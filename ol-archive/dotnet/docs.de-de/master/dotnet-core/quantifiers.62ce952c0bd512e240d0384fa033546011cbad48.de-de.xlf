<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-47f9650" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cd47cc351fb926bcf444bdcbd12f3cd61d9fb327</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\base-types\quantifiers.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0d3de6defad05a55b446401dfe67d7fc72a1d417</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5afb8011ca24fab1d955719fd22a26c7f8a0645d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Quantifiers in regular expressions</source>
          <target state="translated">Quantifizierer in regulären Ausdrücken</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Quantifiers in regular expressions</source>
          <target state="translated">Quantifizierer in regulären Ausdrücken</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Quantifiers in regular expressions</source>
          <target state="translated">Quantifizierer in regulären Ausdrücken</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Quantifiers specify how many instances of a character, group, or character class must be present in the input for a match to be found.</source>
          <target state="translated">Quantifizierer geben an, wie viele Instanzen eines Zeichens, einer Gruppe oder einer Zeichenklasse in der Eingabe vorhanden sein müssen, damit eine Übereinstimmung gefunden wird.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The following table lists the quantifiers supported by .NET.</source>
          <target state="translated">In der folgenden Tabelle werden die von .NET unterstützten Quantifizierer aufgeführt.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Greedy quantifier</source>
          <target state="translated">Gieriger Quantifizierer</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Lazy quantifier</source>
          <target state="translated">Träger Quantifizierer</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Beschreibung</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt><ph id="ph1">\*</ph>?<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt><ph id="ph1">\*</ph>?<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Match zero or more times.</source>
          <target state="translated">Übereinstimmung mit null oder mehr Vorkommen.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>+?<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>+?<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Match one or more times.</source>
          <target state="translated">Übereinstimmung mit einem oder mehr Vorkommen.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>?<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>?<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>??<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>??<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Match zero or one time.</source>
          <target state="translated">Übereinstimmung mit null oder einem Vorkommen.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>}<ept id="p3">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>}<ept id="p3">**</ept></target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>}?<ept id="p3">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>}?<ept id="p3">**</ept></target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Match exactly n times.</source>
          <target state="translated">Übereinstimmung mit genau n Vorkommen.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,}<ept id="p3">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,}<ept id="p3">**</ept></target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,}?<ept id="p3">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,}?<ept id="p3">**</ept></target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Match at least n times.</source>
          <target state="translated">Übereinstimmung mit mindestens n Vorkommen.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,<ept id="p3">**</ept><bpt id="p4">_</bpt>m<ept id="p4">_</ept><bpt id="p5">**</bpt>}<ept id="p5">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,<ept id="p3">**</ept><bpt id="p4">_</bpt>m<ept id="p4">_</ept><bpt id="p5">**</bpt>}<ept id="p5">**</ept></target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,<ept id="p3">**</ept><bpt id="p4">_</bpt>m<ept id="p4">_</ept><bpt id="p5">**</bpt>}?<ept id="p5">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,<ept id="p3">**</ept><bpt id="p4">_</bpt>m<ept id="p4">_</ept><bpt id="p5">**</bpt>}?<ept id="p5">**</ept></target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Match from n to m times.</source>
          <target state="translated">Übereinstimmung mit n bis m Vorkommen.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The quantities <bpt id="p1">*</bpt>n<ept id="p1">*</ept> and <bpt id="p2">*</bpt>m<ept id="p2">*</ept> are integer constants.</source>
          <target state="translated">Die Mengen <bpt id="p1">*</bpt>n<ept id="p1">*</ept> und <bpt id="p2">*</bpt>m<ept id="p2">*</ept> sind ganzzahlige Konstanten.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Ordinarily, quantifiers are greedy; they cause the regular expression engine to match as many occurrences of particular patterns as possible.</source>
          <target state="translated">Gewöhnlich sind Quantifizierer gierig; durch sie gleicht das Modul für reguläre Ausdrücke so viele Vorkommen bestimmter Muster wie möglich ab.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Appending the <ph id="ph1">`?`</ph> character to a quantifier makes it lazy; it causes the regular expression engine to match as few occurrences as possible.</source>
          <target state="translated">Das Anhängen des <ph id="ph1">`?`</ph>-Zeichens an einen Quantifizierer macht es träge; es bewirkt, dass das Modul für reguläre Ausdrücke so wenige Vorkommen wie möglich abgleicht.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For a complete description of the difference between greedy and lazy quantifiers, see the section <bpt id="p1">[</bpt>Greedy and lazy quantifiers<ept id="p1">](#greedy-and-lazy-quantifiers)</ept> later in this topic.</source>
          <target state="translated">Eine vollständige Beschreibung des Unterschieds zwischen gierigen und trägen Quantifizierern finden Sie weiter unten in diesem Thema im Abschnitt <bpt id="p1">[</bpt>Gierige und träge Quantifizierer<ept id="p1">](#greedy-and-lazy-quantifiers)</ept>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Nesting quantifiers (for example, as the regular expression pattern <ph id="ph1">`(a*)*`</ph> does) can increase the number of comparisons that the regular expression engine must perform, as an exponential function of the number of characters in the input string.</source>
          <target state="translated">Das Schachteln von Quantifizierern (z.B. wie durch das Muster für reguläre Ausdrücke <ph id="ph1">`(a*)*`</ph>) kann die Anzahl von Vergleichen, die das Modul für reguläre Ausdrücke ausführen muss, als Exponentialfunktion der Anzahl von Zeichen in der Eingabezeichenfolge erhöhen.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For more information about this behavior and its workarounds, see <bpt id="p1">[</bpt>Backtracking in regular expressions<ept id="p1">](backtracking.md)</ept>.</source>
          <target state="translated">Weitere Informationen zu diesem Verhalten und zu Problemumgehungen finden Sie unter <bpt id="p1">[</bpt>Backtracking in regulären Ausdrücken<ept id="p1">](backtracking.md)</ept>.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Regular expression quantifiers</source>
          <target state="translated">Quantifizierer in regulären Ausdrücken</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The following sections list the quantifiers supported by .NET regular expressions.</source>
          <target state="translated">In den folgenden Abschnitten werden die Quantifizierer aufgeführt, die in regulären .NET-Ausdrücken unterstützt werden.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">\*</ph>, +, ?, {, and } characters are encountered in a regular expression pattern, the regular expression engine interprets them as quantifiers or part of quantifier constructs unless they are included in a <bpt id="p1">[</bpt>character class<ept id="p1">](classes.md)</ept>.</source>
          <target state="translated">Wenn die Zeichen <ph id="ph1">\*</ph>, +, ?, { und } im Muster für reguläre Ausdrücke enthalten sind, interpretiert das Modul für reguläre Ausdrücke sie als Quantifizierer oder als Teil von Quantifiziererkonstrukten, sofern sie nicht in einer <bpt id="p1">[</bpt>Zeichenklasse<ept id="p1">](classes.md)</ept> enthalten sind.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>To interpret these as literal characters outside a character class, you must escape them by preceding them with a backslash.</source>
          <target state="translated">Um sie als Literalzeichen außerhalb einer Zeichenklasse zu interpretieren, müssen Sie sie mit Escapezeichen versehen, indem Sie ihnen einen umgekehrten Schrägstrich voranstellen.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For example, the string <ph id="ph1">`\*`</ph> in a regular expression pattern is interpreted as a literal asterisk ("*") character.</source>
          <target state="translated">Die Zeichenfolge <ph id="ph1">`\*`</ph> in einem Muster für reguläre Ausdrücke wird z.B. als literales Sternchenzeichen („*“) interpretiert.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Match zero or more times: <ph id="ph1">\*</ph></source>
          <target state="translated">Übereinstimmung mit null oder mehr Vorkommen: <ph id="ph1">\*</ph></target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">\*</ph> quantifier matches the preceding element zero or more times.</source>
          <target state="translated">Der <ph id="ph1">\*</ph>-Quantifizierer gleicht das vorangehende Element nullmal oder häufiger ab.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>It is equivalent to the <bpt id="p1">**</bpt>{0,}<ept id="p1">**</ept> quantifier.</source>
          <target state="translated">Dies entspricht dem <bpt id="p1">**</bpt>{0,}<ept id="p1">**</ept>-Quantifizierer.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt><ph id="ph1">\*</ph><ept id="p1">**</ept> is a greedy quantifier whose lazy equivalent is <bpt id="p2">**</bpt><ph id="ph2">\*</ph>?<ept id="p2">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt><ph id="ph1">\*</ph><ept id="p1">**</ept> ist ein gieriger Quantifizierer, dessen träges Äquivalent <bpt id="p2">**</bpt><ph id="ph2">\*</ph>?<ept id="p2">**</ept> lautet.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The following example illustrates this regular expression.</source>
          <target state="translated">Im folgenden Beispiel wird dieser reguläre Ausdruck veranschaulicht.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Of the nine digits in the input string, five match the pattern and four (<ph id="ph1">`95`</ph>, <ph id="ph2">`929`</ph>, <ph id="ph3">`9129`</ph>, and <ph id="ph4">`9919`</ph>) do not.</source>
          <target state="translated">Von den neun Ziffern in der Eingabezeichenfolge entsprechen fünf dem Muster, bei vier Ziffern (<ph id="ph1">`95`</ph>, <ph id="ph2">`929`</ph>, <ph id="ph3">`9129`</ph> und <ph id="ph4">`9919`</ph>) ist das nicht der Fall.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The regular expression pattern is defined as shown in the following table.</source>
          <target state="translated">Das Muster für reguläre Ausdrücke ist wie in der folgenden Tabelle gezeigt definiert.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">Muster</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Beschreibung</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Start at a word boundary.</source>
          <target state="translated">An einer Wortgrenze beginnen.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Match a "9" followed by zero or more "1" characters.</source>
          <target state="translated">Übereinstimmung mit „9“, gefolgt von null oder mehr Zeichen „1“.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Match zero or more "9" characters.</source>
          <target state="translated">Übereinstimmung mit null oder mehr Zeichen „9“.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>End at a word boundary.</source>
          <target state="translated">An einer Wortgrenze beenden.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Match one or more times: +</source>
          <target state="translated">Übereinstimmung mit einem oder mehr Vorkommen: +</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt><ph id="ph1">+</ph><ept id="p1">**</ept> quantifier matches the preceding element one or more times.</source>
          <target state="translated">Der <bpt id="p1">**</bpt><ph id="ph1">+</ph><ept id="p1">**</ept>-Quantifizierer gleicht das vorangehende Element einmal oder häufiger ab.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>It is equivalent to <bpt id="p1">**</bpt>{1,}<ept id="p1">**</ept>.</source>
          <target state="translated">Er entspricht <bpt id="p1">**</bpt>{1,}<ept id="p1">**</ept>.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt><ph id="ph1">+</ph><ept id="p1">**</ept> is a greedy quantifier whose lazy equivalent is <bpt id="p2">**</bpt>+?<ept id="p2">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt><ph id="ph1">+</ph><ept id="p1">**</ept> ist ein gieriger Quantifizierer, dessen träges Äquivalent <bpt id="p2">**</bpt>+?<ept id="p2">**</ept> lautet.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For example, the regular expression <ph id="ph1">`\ban+\w*?\b`</ph> tries to match entire words that begin with the letter <ph id="ph2">`a`</ph> followed by one or more instances of the letter <ph id="ph3">`n`</ph>.</source>
          <target state="translated">Beispielsweise versucht der reguläre Ausdruck <ph id="ph1">`\ban+\w*?\b`</ph> ganze Wörter abzugleichen, die mit dem Buchstaben <ph id="ph2">`a`</ph> beginnen, gefolgt von mindestens einer Instanz des Buchstabens <ph id="ph3">`n`</ph>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The following example illustrates this regular expression.</source>
          <target state="translated">Im folgenden Beispiel wird dieser reguläre Ausdruck veranschaulicht.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The regular expression matches the words <ph id="ph1">`an`</ph>, <ph id="ph2">`annual`</ph>, <ph id="ph3">`announcement`</ph>, and <ph id="ph4">`antique`</ph>, and correctly fails to match <ph id="ph5">`autumn`</ph> and <ph id="ph6">`all`</ph>.</source>
          <target state="translated">Der reguläre Ausdruck gleicht die Wörter <ph id="ph1">`an`</ph>, <ph id="ph2">`annual`</ph>, <ph id="ph3">`announcement`</ph> und <ph id="ph4">`antique`</ph> ab und findet richtigerweise keine Übereinstimmung mit <ph id="ph5">`autumn`</ph> und <ph id="ph6">`all`</ph>.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The regular expression pattern is defined as shown in the following table.</source>
          <target state="translated">Das Muster für reguläre Ausdrücke ist wie in der folgenden Tabelle gezeigt definiert.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">Muster</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Beschreibung</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Start at a word boundary.</source>
          <target state="translated">An einer Wortgrenze beginnen.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Match an "a" followed by one or more "n" characters.</source>
          <target state="translated">Übereinstimmung mit „a“, gefolgt von einem oder mehr Zeichen „n“.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Match a word character zero or more times, but as few times as possible.</source>
          <target state="translated">Gleicht ein Wortzeichen nullmal oder häufiger ab, jedoch so wenige Male wie möglich.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>End at a word boundary.</source>
          <target state="translated">An einer Wortgrenze beenden.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Match zero or one time: ?</source>
          <target state="translated">Übereinstimmung mit null oder einem Vorkommen: ?</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>?<ept id="p1">**</ept></source>
          <target state="translated">Der <bpt id="p1">**</bpt>?<ept id="p1">**</ept>-Quantifizierer</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>quantifier matches the preceding element zero or one time.</source>
          <target state="translated">gleicht das vorangehende Element null- oder einmal ab.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>It is equivalent to <bpt id="p1">**</bpt>{0,1}<ept id="p1">**</ept>.</source>
          <target state="translated">Er entspricht <bpt id="p1">**</bpt>{0,1}<ept id="p1">**</ept>.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>?<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>?<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>is a greedy quantifier whose lazy equivalent is <bpt id="p1">**</bpt>??<ept id="p1">**</ept>.</source>
          <target state="translated">ist ein gieriger Quantifizierer, dessen träges Äquivalent <bpt id="p1">**</bpt>??<ept id="p1">**</ept> lautet.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>For example, the regular expression <ph id="ph1">`\ban?\b`</ph> tries to match entire words that begin with the letter <ph id="ph2">`a`</ph> followed by zero or one instances of the letter <ph id="ph3">`n`</ph>.</source>
          <target state="translated">Beispielsweise versucht der reguläre Ausdruck <ph id="ph1">`\ban?\b`</ph> ganze Wörter abzugleichen, die mit dem Buchstaben <ph id="ph2">`a`</ph> beginnen, gefolgt von null oder einer Instanz des Buchstabens <ph id="ph3">`n`</ph>.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>In other words, it tries to match the words <ph id="ph1">`a`</ph> and <ph id="ph2">`an`</ph>.</source>
          <target state="translated">Das heißt, er versucht, die Wörter <ph id="ph1">`a`</ph> und <ph id="ph2">`an`</ph> abzugleichen.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The following example illustrates this regular expression.</source>
          <target state="translated">Im folgenden Beispiel wird dieser reguläre Ausdruck veranschaulicht.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The regular expression pattern is defined as shown in the following table.</source>
          <target state="translated">Das Muster für reguläre Ausdrücke ist wie in der folgenden Tabelle gezeigt definiert.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">Muster</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Beschreibung</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Start at a word boundary.</source>
          <target state="translated">An einer Wortgrenze beginnen.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Match an "a" followed by zero or one "n" character.</source>
          <target state="translated">Übereinstimmung mit „a“, gefolgt von null oder einem Zeichen „n“.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>End at a word boundary.</source>
          <target state="translated">An einer Wortgrenze beenden.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Match exactly n times: {n}</source>
          <target state="translated">Übereinstimmung mit genau n Vorkommen: {n}</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>}<ept id="p3">**</ept> quantifier matches the preceding element exactly <bpt id="p4">*</bpt>n<ept id="p4">*</ept> times, where <bpt id="p5">*</bpt>n<ept id="p5">*</ept> is any integer.</source>
          <target state="translated">Der <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>}<ept id="p3">**</ept>-Quantifizierer gleicht das vorangehende Element genau <bpt id="p4">*</bpt>n<ept id="p4">*</ept>-mal ab, wobei <bpt id="p5">*</bpt>n<ept id="p5">*</ept> für eine beliebige ganze Zahl steht.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>}<ept id="p3">**</ept> is a greedy quantifier whose lazy equivalent is <bpt id="p4">**</bpt>{<ept id="p4">**</ept><bpt id="p5">_</bpt>n<ept id="p5">_</ept><bpt id="p6">**</bpt>}?<ept id="p6">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>}<ept id="p3">**</ept> ist ein gieriger Quantifizierer, dessen träges Äquivalent <bpt id="p4">**</bpt>{<ept id="p4">**</ept><bpt id="p5">_</bpt>n<ept id="p5">_</ept><bpt id="p6">**</bpt>}?<ept id="p6">**</ept> lautet.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>For example, the regular expression <ph id="ph1">`\b\d+\,\d{3}\b`</ph> tries to match a word boundary followed by one or more decimal digits followed by three decimal digits followed by a word boundary.</source>
          <target state="translated">Beispielsweise versucht der reguläre Ausdruck <ph id="ph1">`\b\d+\,\d{3}\b`</ph>, eine Wortgrenze, gefolgt von einer oder mehreren Dezimalziffern, gefolgt von drei Dezimalziffern, gefolgt von einer Wortgrenze abzugleichen.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The following example illustrates this regular expression.</source>
          <target state="translated">Im folgenden Beispiel wird dieser reguläre Ausdruck veranschaulicht.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The regular expression pattern is defined as shown in the following table.</source>
          <target state="translated">Das Muster für reguläre Ausdrücke ist wie in der folgenden Tabelle gezeigt definiert.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">Muster</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Beschreibung</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Start at a word boundary.</source>
          <target state="translated">An einer Wortgrenze beginnen.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Match one or more decimal digits.</source>
          <target state="translated">Entsprechung für mindestens eine Dezimalstelle finden.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Match a comma character.</source>
          <target state="translated">Übereinstimmung mit einem Kommazeichen.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Match three decimal digits.</source>
          <target state="translated">Entsprechung für drei Dezimalstellen finden.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>End at a word boundary.</source>
          <target state="translated">An einer Wortgrenze beenden.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Match at least n times: {n,}</source>
          <target state="translated">Übereinstimmung mit mindestens n Vorkommen: {n,}</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,}<ept id="p3">**</ept> quantifier matches the preceding element at least <bpt id="p4">*</bpt>n<ept id="p4">*</ept> times, where <bpt id="p5">*</bpt>n<ept id="p5">*</ept> is any integer.</source>
          <target state="translated">Der <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>}<ept id="p3">**</ept>-Quantifizierer gleicht das vorangehende Element mindestens <bpt id="p4">*</bpt>n<ept id="p4">*</ept>-mal ab, wobei <bpt id="p5">*</bpt>n<ept id="p5">*</ept> für eine beliebige ganze Zahl steht.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,}<ept id="p3">**</ept> is a greedy quantifier whose lazy equivalent is <bpt id="p4">**</bpt>{<ept id="p4">**</ept><bpt id="p5">_</bpt>n<ept id="p5">_</ept><bpt id="p6">**</bpt>}?<ept id="p6">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,}<ept id="p3">**</ept> ist ein gieriger Quantifizierer, dessen träges Äquivalent <bpt id="p4">**</bpt>{<ept id="p4">**</ept><bpt id="p5">_</bpt>n<ept id="p5">_</ept><bpt id="p6">**</bpt>}?<ept id="p6">**</ept> lautet.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>For example, the regular expression <ph id="ph1">`\b\d{2,}\b\D+`</ph> tries to match a word boundary followed by at least two digits followed by a word boundary and a non-digit character.</source>
          <target state="translated">Beispielsweise versucht der reguläre Ausdruck <ph id="ph1">`\b\d{2,}\b\D+`</ph>, eine Wortgrenze, gefolgt von mindestens zwei Ziffern, gefolgt von einer Wortgrenze und einer Nicht-Dezimalziffer abzugleichen.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The following example illustrates this regular expression.</source>
          <target state="translated">Im folgenden Beispiel wird dieser reguläre Ausdruck veranschaulicht.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The regular expression fails to match the phrase "7 days" because it contains just one decimal digit, but it successfully matches the phrases "10 weeks and 300 years".</source>
          <target state="translated">Der reguläre Ausdruck kann den Ausdruck „7 Tage“ nicht abgleichen, da er nur eine Dezimalziffer enthält, findet aber erfolgreich Übereinstimmungen mit den Phrasen „10 Wochen“ und „300 Jahre“.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The regular expression pattern is defined as shown in the following table.</source>
          <target state="translated">Das Muster für reguläre Ausdrücke ist wie in der folgenden Tabelle gezeigt definiert.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">Muster</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Beschreibung</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Start at a word boundary.</source>
          <target state="translated">An einer Wortgrenze beginnen.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Match at least two decimal digits.</source>
          <target state="translated">Übereinstimmung mit mindestens zwei Dezimalziffern.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Match a word boundary.</source>
          <target state="translated">Übereinstimmung mit einer Wortgrenze.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Match at least one non-decimal digit.</source>
          <target state="translated">Übereinstimmung mit mindestens einer Nicht-Dezimalziffer.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Match between n and m times: {n,m}</source>
          <target state="translated">Übereinstimmung mit n bis m Vorkommen: {n,m}</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,<ept id="p3">**</ept><bpt id="p4">_</bpt>m<ept id="p4">_</ept><bpt id="p5">**</bpt>}<ept id="p5">**</ept> quantifier matches the preceding element at least <bpt id="p6">*</bpt>n<ept id="p6">*</ept> times, but no more than <bpt id="p7">*</bpt>m<ept id="p7">*</ept> times, where <bpt id="p8">*</bpt>n<ept id="p8">*</ept> and <bpt id="p9">*</bpt>m<ept id="p9">*</ept> are integers.</source>
          <target state="translated">Der <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,<ept id="p3">**</ept><bpt id="p4">_</bpt>m<ept id="p4">_</ept><bpt id="p5">**</bpt>}<ept id="p5">**</ept>-Quantifizierer gleicht das vorangehende Element mindestens <bpt id="p6">*</bpt>n<ept id="p6">*</ept>-mal, aber nicht mehr als <bpt id="p7">*</bpt>m<ept id="p7">*</ept>-mal ab, wobei <bpt id="p8">*</bpt>n<ept id="p8">*</ept> und <bpt id="p9">*</bpt>m<ept id="p9">*</ept> ganze Zahlen sind.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,<ept id="p3">**</ept><bpt id="p4">_</bpt>m<ept id="p4">_</ept><bpt id="p5">**</bpt>}<ept id="p5">**</ept> is a greedy quantifier whose lazy equivalent is <bpt id="p6">**</bpt>{<ept id="p6">**</ept><bpt id="p7">_</bpt>n<ept id="p7">_</ept><bpt id="p8">**</bpt>,<ept id="p8">**</ept><bpt id="p9">_</bpt>m<ept id="p9">_</ept><bpt id="p10">**</bpt>}?<ept id="p10">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,<ept id="p3">**</ept><bpt id="p4">_</bpt>m<ept id="p4">_</ept><bpt id="p5">**</bpt>}<ept id="p5">**</ept> ist ein gieriger Quantifizierer, dessen träges Äquivalent <bpt id="p6">**</bpt>{<ept id="p6">**</ept><bpt id="p7">_</bpt>n<ept id="p7">_</ept><bpt id="p8">**</bpt>,<ept id="p8">**</ept><bpt id="p9">_</bpt>m<ept id="p9">_</ept><bpt id="p10">**</bpt>}?<ept id="p10">**</ept> lautet.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>In the following example, the regular expression <ph id="ph1">`(00\s){2,4}`</ph> tries to match between two and four occurrences of two zero digits followed by a space.</source>
          <target state="translated">Im folgenden Beispiel versucht der reguläre Ausdruck <ph id="ph1">`(00\s){2,4}`</ph>, zwei bis vier Vorkommen zweier&amp;0;-Ziffern, gefolgt von einem Leerzeichen, abzugleichen.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Note that the final portion of the input string includes this pattern five times rather than the maximum of four.</source>
          <target state="translated">Beachten Sie, dass der letzte Teil der Eingabezeichenfolge dieses Muster fünfmal enthält und damit das Maximum von vier überschreitet.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>However, only the initial portion of this substring (up to the space and the fifth pair of zeros) matches the regular expression pattern.</source>
          <target state="translated">Allerdings stimmt nur der erste Teil dieser Teilzeichenfolge (bis zum Leerzeichen und fünften Nullpaar) mit dem Muster für reguläre Ausdrücke überein.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Match zero or more times (lazy match): <ph id="ph1">\*</ph>?</source>
          <target state="translated">Übereinstimmung mit null oder mehr Vorkommen (träger Abgleich): <ph id="ph1">\*</ph>?</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt><ph id="ph1">\*</ph>?<ept id="p1">**</ept></source>
          <target state="translated">Der Quantifizierer <bpt id="p1">**</bpt><ph id="ph1">\*</ph>?<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>quantifier matches the preceding element zero or more times, but as few times as possible.</source>
          <target state="translated">gleicht das vorangehende Element nullmal oder häufiger ab, jedoch so wenige Male wie möglich.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>It is the lazy counterpart of the greedy quantifier <bpt id="p1">**</bpt><ph id="ph1">\*</ph><ept id="p1">**</ept>.</source>
          <target state="translated">Dies ist das träge Gegenstück zum gierigen Quantifizierer <bpt id="p1">**</bpt><ph id="ph1">\*</ph><ept id="p1">**</ept>.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>In the following example, the regular expression <ph id="ph1">`\b\w*?oo\w*?\b`</ph> matches all words that contain the string <ph id="ph2">`oo`</ph>.</source>
          <target state="translated">Im folgenden Beispiel gleicht der reguläre Ausdruck <ph id="ph1">`\b\w*?oo\w*?\b`</ph> alle Wörter ab, die die Zeichenfolge <ph id="ph2">`oo`</ph> enthalten.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The regular expression pattern is defined as shown in the following table.</source>
          <target state="translated">Das Muster für reguläre Ausdrücke ist wie in der folgenden Tabelle gezeigt definiert.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">Muster</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Beschreibung</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Start at a word boundary.</source>
          <target state="translated">An einer Wortgrenze beginnen.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Match zero or more word characters, but as few characters as possible.</source>
          <target state="translated">Übereinstimmung mit null oder mehr Wortzeichen, aber so wenigen Zeichen wie möglich.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Match the string "oo".</source>
          <target state="translated">Übereinstimmung mit der Zeichenfolge „Oo“.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Match zero or more word characters, but as few characters as possible.</source>
          <target state="translated">Übereinstimmung mit null oder mehr Wortzeichen, aber so wenigen Zeichen wie möglich.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>End on a word boundary.</source>
          <target state="translated">An einer Wortgrenze beenden.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Match one or more times (lazy match): +?</source>
          <target state="translated">Übereinstimmung mit einem oder mehr Vorkommen (träger Abgleich): +?</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>+?<ept id="p1">**</ept></source>
          <target state="translated">Der <bpt id="p1">**</bpt>+?<ept id="p1">**</ept>-Quantifizierer</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>quantifier matches the preceding element one or more times, but as few times as possible.</source>
          <target state="translated">gleicht das vorangehende Element einmal oder häufiger ab, jedoch so wenige Male wie möglich.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>It is the lazy counterpart of the greedy quantifier <bpt id="p1">**</bpt><ph id="ph1">+</ph><ept id="p1">**</ept>.</source>
          <target state="translated">Dies ist das träge Gegenstück zum gierigen Quantifizierer <bpt id="p1">**</bpt><ph id="ph1">+</ph><ept id="p1">**</ept>.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>For example, the regular expression <ph id="ph1">`\b\w+?\b`</ph> matches one or more characters separated by word boundaries.</source>
          <target state="translated">Beispielsweise gleicht der reguläre Ausdruck <ph id="ph1">`\b\w+?\b`</ph> ein oder mehr Zeichen ab, die durch Wortgrenzen getrennt sind.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The following example illustrates this regular expression.</source>
          <target state="translated">Im folgenden Beispiel wird dieser reguläre Ausdruck veranschaulicht.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Match zero or one time (lazy match): ??</source>
          <target state="translated">Übereinstimmung mit null oder einem Vorkommen (träger Abgleich): ??</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>??<ept id="p1">**</ept></source>
          <target state="translated">Der <bpt id="p1">**</bpt>??<ept id="p1">**</ept>-Quantifizierer</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>quantifier matches the preceding element zero or one time, but as few times as possible.</source>
          <target state="translated">gleicht das vorangehende Element null- oder einmal ab, jedoch so wenige Male wie möglich.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>It is the lazy counterpart of the greedy quantifier <bpt id="p1">**</bpt>?<ept id="p1">**</ept>.</source>
          <target state="translated">Dies ist das träge Gegenstück zum gierigen Quantifizierer <bpt id="p1">**</bpt>?<ept id="p1">**</ept>.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>For example, the regular expression <ph id="ph1">`^\s*(System.)??Console.Write(Line)??\(??`</ph> attempts to match the strings "Console.Write" or "Console.WriteLine".</source>
          <target state="translated">Beispielsweise versucht der reguläre Ausdruck <ph id="ph1">`^\s*(System.)??Console.Write(Line)??\(??`</ph>, die Zeichenfolgen „Console.Write“ oder „Console.WriteLine“ abzugleichen.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The string can also include "System."</source>
          <target state="translated">Die Zeichenfolge kann auch „System.“</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>before "Console", and it can be followed by an opening parenthesis.</source>
          <target state="translated">vor „Console“ enthalten und von einer öffnenden Klammer gefolgt sein.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>The string must be at the beginning of a line, although it can be preceded by white space.</source>
          <target state="translated">Die Zeichenfolge muss sich am Anfang einer Zeile befinden, ihr kann jedoch ein Leerzeichen vorangestellt sein.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The following example illustrates this regular expression.</source>
          <target state="translated">Im folgenden Beispiel wird dieser reguläre Ausdruck veranschaulicht.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>The regular expression pattern is defined as shown in the following table.</source>
          <target state="translated">Das Muster für reguläre Ausdrücke ist wie in der folgenden Tabelle gezeigt definiert.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">Muster</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Beschreibung</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Match the start of the input stream.</source>
          <target state="translated">Übereinstimmung mit dem Beginn des Eingabestreams.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Match zero or more white-space characters.</source>
          <target state="translated">Sucht nach&amp;0; (null) oder mehr Leerzeichen.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Match zero or one occurrence of the string "System.".</source>
          <target state="translated">Übereinstimmung mit null oder einem Vorkommen der Zeichenfolge „System.“.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Match the string "Console.Write".</source>
          <target state="translated">Übereinstimmung mit der Zeichenfolge „Console.Write“.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Match zero or one occurrence of the string "Line".</source>
          <target state="translated">Übereinstimmung mit null oder einem Vorkommen der Zeichenfolge „Line“.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Match zero or one occurrence of the opening parenthesis.</source>
          <target state="translated">Übereinstimmung mit null oder einem Vorkommen der öffnenden Klammer.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Match exactly n times (lazy match): {n}?</source>
          <target state="translated">Übereinstimmung mit genau n Vorkommen (träger Abgleich): {n}?</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>}?<ept id="p3">**</ept></source>
          <target state="translated">Der <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>}?<ept id="p3">**</ept>-Quantifizierer</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>quantifier matches the preceding element exactly <bpt id="p1">*</bpt>n<ept id="p1">*</ept> times, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is any integer.</source>
          <target state="translated">gleicht das vorangehende Element genau <bpt id="p1">*</bpt>n<ept id="p1">*</ept>-mal ab, wobei <bpt id="p2">*</bpt>n<ept id="p2">*</ept> für eine beliebige ganze Zahl steht.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>It is the lazy counterpart of the greedy quantifier <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>}+<ept id="p3">**</ept>.</source>
          <target state="translated">Dies ist das träge Gegenstück zum gierigen Quantifizierer <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>}+<ept id="p3">**</ept>.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>In the following example, the regular expression <ph id="ph1">`\b(\w{3,}?\.){2}?\w{3,}?\b`</ph> is used to identify a Web site address.</source>
          <target state="translated">Im folgenden Beispiel wird der reguläre Ausdruck <ph id="ph1">`\b(\w{3,}?\.){2}?\w{3,}?\b`</ph> verwendet, um die Adresse einer Website zu identifizieren.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Note that it matches "www.microsoft.com" and "msdn.microsoft.com", but does not match "mywebsite" or "mycompany.com".</source>
          <target state="translated">Beachten Sie, dass „www.microsoft.com“ und „msdn.microsoft.com“ abgeglichen werden, aber nicht „mywebsite“ oder „mycompany.com“.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>The regular expression pattern is defined as shown in the following table.</source>
          <target state="translated">Das Muster für reguläre Ausdrücke ist wie in der folgenden Tabelle gezeigt definiert.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">Muster</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Beschreibung</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Start at a word boundary.</source>
          <target state="translated">An einer Wortgrenze beginnen.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Match at least 3 word characters, but as few characters as possible, followed by a dot or period character.</source>
          <target state="translated">Übereinstimmung mit mindestens 3 Wortzeichen, aber so wenigen Zeichen wie möglich, gefolgt von einem Punktzeichen.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>This is the first capturing group.</source>
          <target state="translated">Dies ist die erste Erfassungsgruppe.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Match the pattern in the first group two times, but as few times as possible.</source>
          <target state="translated">Übereinstimmung mit zwei Vorkommen im Muster in der ersten Gruppe, jedoch so wenige Male wie möglich.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>End the match on a word boundary.</source>
          <target state="translated">Beendet den Vergleich an einer Wortgrenze.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Match at least n times (lazy match): {n,}?</source>
          <target state="translated">Übereinstimmung mit mindestens n Vorkommen (träger Abgleich): {n,}?</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,}?<ept id="p3">**</ept></source>
          <target state="translated">Der <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,}?<ept id="p3">**</ept>-Quantifizierer</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>quantifier matches the preceding element at least <bpt id="p1">*</bpt>n<ept id="p1">*</ept> times, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is any integer, but as few times as possible.</source>
          <target state="translated">gleicht das vorangehende Element mindestens <bpt id="p1">*</bpt>n<ept id="p1">*</ept>-mal ab, jedoch so wenige Male wie möglich, wobei <bpt id="p2">*</bpt>n<ept id="p2">*</ept> für eine beliebige ganze Zahl steht.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>It is the lazy counterpart of the greedy quantifier <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,}<ept id="p3">**</ept>.</source>
          <target state="translated">Dies ist das träge Gegenstück zum gierigen Quantifizierer <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,}<ept id="p3">**</ept>.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>See the example for the <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>}?<ept id="p3">**</ept></source>
          <target state="translated">Eine Abbildung finden Sie im Beispiel für den <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>}?<ept id="p3">**</ept>-Quantifizierer</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>quantifier in the previous section for an illustration.</source>
          <target state="translated">im vorherigen Abschnitt.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>The regular expression in that example uses the <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,}<ept id="p3">**</ept> quantifier to match a string that has at least three characters followed by a period.</source>
          <target state="translated">Der reguläre Ausdruck in diesem Beispiel verwendet den <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,}<ept id="p3">**</ept>-Quantifizierer, um eine Zeichenfolge abzugleichen, die mindestens drei Zeichen umfasst, gefolgt von einem Punkt.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Match between n and m times (lazy match): {n,m}?</source>
          <target state="translated">Übereinstimmung mit n bis m Vorkommen (träger Abgleich): {n,m}?</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,<ept id="p3">**</ept><bpt id="p4">_</bpt>m<ept id="p4">_</ept><bpt id="p5">**</bpt>}?<ept id="p5">**</ept></source>
          <target state="translated">Der <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,<ept id="p3">**</ept><bpt id="p4">_</bpt>m<ept id="p4">_</ept><bpt id="p5">**</bpt>}?<ept id="p5">**</ept>-Quantifizierer</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>quantifier matches the preceding element between <bpt id="p1">*</bpt>n<ept id="p1">*</ept> and <bpt id="p2">*</bpt>m<ept id="p2">*</ept> times, where <bpt id="p3">*</bpt>n<ept id="p3">*</ept> and <bpt id="p4">*</bpt>m<ept id="p4">*</ept> are integers, but as few times as possible.</source>
          <target state="translated">gleicht das vorangehende Element <bpt id="p1">*</bpt>n<ept id="p1">*</ept>- bis <bpt id="p2">*</bpt>m<ept id="p2">*</ept>-mal ab, jedoch so wenige Male wie möglich, wobei <bpt id="p3">*</bpt>n<ept id="p3">*</ept> und <bpt id="p4">*</bpt>m<ept id="p4">*</ept> für ganze Zahlen stehen.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>It is the lazy counterpart of the greedy quantifier <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,<ept id="p3">**</ept><bpt id="p4">_</bpt>m<ept id="p4">_</ept><bpt id="p5">**</bpt>}<ept id="p5">**</ept>.</source>
          <target state="translated">Dies ist das träge Gegenstück zum gierigen Quantifizierer <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,<ept id="p3">**</ept><bpt id="p4">_</bpt>m<ept id="p4">_</ept><bpt id="p5">**</bpt>}<ept id="p5">**</ept>.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>In the following example, the regular expression <ph id="ph1">`\b[A-Z](\w*\s+){1,10}?[.!?]`</ph> matches sentences that contain between one and ten words.</source>
          <target state="translated">Im folgenden Beispiel gleicht der reguläre Ausdruck <ph id="ph1">`\b[A-Z](\w*\s+){1,10}?[.!?]`</ph> Sätze ab, die zwischen ein und zehn Wörter enthalten.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>It matches all the sentences in the input string except for one sentence that contains 18 words.</source>
          <target state="translated">Er gleicht alle Sätze in der Eingabezeichenfolge ab mit Ausnahme eines Satzes, der 18 Wörter enthält.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>The regular expression pattern is defined as shown in the following table.</source>
          <target state="translated">Das Muster für reguläre Ausdrücke ist wie in der folgenden Tabelle gezeigt definiert.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">Muster</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Beschreibung</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Start at a word boundary.</source>
          <target state="translated">An einer Wortgrenze beginnen.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Match an uppercase character from A to Z.</source>
          <target state="translated">Übereinstimmung mit einem Großbuchstaben von A bis Z.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Match zero or more word characters, followed by one or more white-space characters.</source>
          <target state="translated">Übereinstimmung mit null oder mehr Wortzeichen, gefolgt von einem oder mehreren Leerzeichen.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>This is the first capture group.</source>
          <target state="translated">Dies ist die erste Erfassungsgruppe.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Match the previous pattern between 1 and 10 times, but as few times as possible.</source>
          <target state="translated">Übereinstimmung mit dem vorhergehenden Muster zwischen 1- und 10-mal, jedoch so wenige Male wie möglich.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Match any one of the punctuation characters ".", "!", or "?".</source>
          <target state="translated">Übereinstimmung mit einem der Interpunktionszeichen „.“, „!“ oder „?“.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Greedy and lazy quantifiers</source>
          <target state="translated">Gierige und träge Quantifizierer</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>A number of the quantifiers have two versions:</source>
          <target state="translated">Eine Reihe von Quantifizierern gibt es in zwei Versionen:</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>A greedy version.</source>
          <target state="translated">Eine gierige Version.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>A greedy quantifier tries to match an element as many times as possible.</source>
          <target state="translated">Ein gieriger Quantifizierer versucht, ein Element so oft wie möglich abzugleichen.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>•A non-greedy (or lazy) version.</source>
          <target state="translated">•Eine nicht gierige (oder träge) Version.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>A non-greedy quantifier tries to match an element as few times as possible.</source>
          <target state="translated">Ein nicht gieriger Quantifizierer versucht, ein Element so selten wie möglich abzugleichen.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>You can turn a greedy quantifier into a lazy quantifier by simply adding a <bpt id="p1">**</bpt>?<ept id="p1">**</ept>.</source>
          <target state="translated">Sie können einen gierigen Quantifizierer in einen trägen Quantifizierer umwandeln, indem Sie einfach ein <bpt id="p1">**</bpt>?<ept id="p1">**</ept> hinzufügen.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Consider a simple regular expression that is intended to extract the last four digits from a string of numbers such as a credit card number.</source>
          <target state="translated">Nehmen Sie einen einfachen regulären Ausdruck, der die letzten vier Ziffern aus einer Zeichenfolge mit Zahlen extrahieren soll, beispielsweise aus einer Kreditkartennummer.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>The version of the regular expression that uses the <bpt id="p1">**</bpt><ph id="ph1">\*</ph><ept id="p1">**</ept> greedy quantifier is <ph id="ph2">`\b.*([0-9]{4})\b`</ph>.</source>
          <target state="translated">Die Version des regulären Ausdrucks, die den gierigen <bpt id="p1">**</bpt><ph id="ph1">\*</ph><ept id="p1">**</ept>-Quantifizierer verwendet, ist <ph id="ph2">`\b.*([0-9]{4})\b`</ph>.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>However, if a string contains two numbers, this regular expression matches the last four digits of the second number only, as the following example shows.</source>
          <target state="translated">Wenn eine Zeichenfolge zwei Zahlen enthält, gleicht dieser reguläre Ausdruck jedoch nur die letzten vier Ziffern der zweiten Zahl ab, wie im folgenden Beispiel gezeigt.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>The regular expression fails to match the first number because the <bpt id="p1">**</bpt><ph id="ph1">\*</ph><ept id="p1">**</ept> quantifier tries to match the previous element as many times as possible in the entire string, and so it finds its match at the end of the string.</source>
          <target state="translated">Der reguläre Ausdruck kann die erste Zahl nicht abgleichen, da der <bpt id="p1">**</bpt><ph id="ph1">\*</ph><ept id="p1">**</ept>-Quantifizierer versucht, das vorherige Element so oft wie möglich in der gesamten Zeichenfolge abzugleichen. Daher wird die Übereinstimmung am Ende der Zeichenfolge gefunden.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>This is not the desired behavior.</source>
          <target state="translated">Dies entspricht nicht dem gewünschten Verhalten.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Instead, you can use the <bpt id="p1">**</bpt><ph id="ph1">\*</ph>?<ept id="p1">**</ept></source>
          <target state="translated">Stattdessen können Sie den trägen Quantifizierer <bpt id="p1">**</bpt><ph id="ph1">\*</ph>?<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>lazy quantifier to extract digits from both numbers, as the following example shows.</source>
          <target state="translated">verwenden, um Ziffern aus beiden Zahlen zu extrahieren, wie im folgenden Beispiel veranschaulicht.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>In most cases, regular expressions with greedy and lazy quantifiers return the same matches.</source>
          <target state="translated">In den meisten Fällen werden von regulären Ausdrücken mit gierigen und trägen Quantifizierern die gleichen Übereinstimmungen zurückgegeben.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>They most commonly return different results when they are used with the wildcard (<bpt id="p1">**</bpt>.<ept id="p1">**</ept>) metacharacter, which matches any character.</source>
          <target state="translated">Im Allgemeinen geben sie unterschiedliche Ergebnisse zurück, wenn sie mit dem Platzhaltermetazeichen (<bpt id="p1">**</bpt>.<ept id="p1">**</ept>) verwendet werden, das jedes beliebige Zeichen abgleicht.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Quantifiers and empty matches</source>
          <target state="translated">Quantifizierer und leere Übereinstimmungen</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>The quantifiers <bpt id="p1">**</bpt><ph id="ph1">\*</ph><ept id="p1">**</ept>, <bpt id="p2">**</bpt><ph id="ph2">+</ph><ept id="p2">**</ept>, and <bpt id="p3">**</bpt>{<ept id="p3">**</ept><bpt id="p4">_</bpt>n<ept id="p4">_</ept><bpt id="p5">**</bpt>,<ept id="p5">**</ept><bpt id="p6">_</bpt>m<ept id="p6">_</ept><bpt id="p7">**</bpt>}<ept id="p7">**</ept> and their lazy counterparts never repeat after an empty match when the minimum number of captures has been found.</source>
          <target state="translated">Die Quantifizierer <bpt id="p1">**</bpt><ph id="ph1">\*</ph><ept id="p1">**</ept>, <bpt id="p2">**</bpt><ph id="ph2">+</ph><ept id="p2">**</ept>, und <bpt id="p3">**</bpt>{<ept id="p3">**</ept><bpt id="p4">_</bpt>n<ept id="p4">_</ept><bpt id="p5">**</bpt>,<ept id="p5">**</ept><bpt id="p6">_</bpt>m<ept id="p6">_</ept><bpt id="p7">**</bpt>}<ept id="p7">**</ept> sowie ihre trägen Gegenstücke werden nach einer leeren Übereinstimmung nie wiederholt, wenn die Mindestanzahl von Erfassungen gefunden wurde.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>This rule prevents quantifiers from entering infinite loops on empty subexpression matches when the maximum number of possible group captures is infinite or near infinite.</source>
          <target state="translated">Diese Regel verhindert, dass Quantifizierer bei leeren Teilausdruckübereinstimmungen in Endlosschleifen geraten, wenn die maximale Anzahl möglicher Gruppenerfassungen unendlich oder nahezu unendlich ist.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>For example, the following code shows the result of a call to the <bpt id="p1">[</bpt>Regex.Match<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Match(System.String))</ept> method with the regular expression pattern <ph id="ph1">`(a?)*,`</ph> which matches zero or one "a" character zero or more times.</source>
          <target state="translated">Der folgende Code zeigt z.B. das Ergebnis eines Aufrufs der <bpt id="p1">[</bpt>Regex.Match<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Match(System.String))</ept>-Methode mit dem Muster für reguläre Ausdrücke <ph id="ph1">`(a?)*,`</ph>, bei dem null oder ein Zeichen „a“ nullmal oder häufiger abgeglichen wird.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Note that the single capturing group captures each "a" as well as <bpt id="p1">[</bpt>String.Empty<ept id="p1">](xref:System.String.Empty)</ept>, but that there is no second empty match, because the first empty match causes the quantifier to stop repeating.</source>
          <target state="translated">Beachten Sie, dass die einzelne Erfassungsgruppe jedes „a“ sowie <bpt id="p1">[</bpt>String.Empty<ept id="p1">](xref:System.String.Empty)</ept> abgleicht, dass es aber keine zweite leere Übereinstimmung gibt, weil der Quantifizierer nach der ersten leeren Übereinstimmung nicht mehr wiederholt wird.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>To see the practical difference between a capturing group that defines a minimum and a maximum number of captures and one that defines a fixed number of captures, consider the regular expression patterns <ph id="ph1">`(a\1|(?(1)\1)){0,2}`</ph> and <ph id="ph2">`(a\1|(?(1)\1)){2}`</ph>.</source>
          <target state="translated">Um den praktischen Unterschied zwischen einer Erfassungsgruppe, die eine Mindest- und eine Höchstzahl von Erfassungen definiert, und einer Erfassungsgruppe zu sehen, die eine feste Anzahl von Erfassungen definiert, betrachten Sie die Muster für reguläre Ausdrücke <ph id="ph1">`(a\1|(?(1)\1)){0,2}`</ph> und <ph id="ph2">`(a\1|(?(1)\1)){2}`</ph>.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Both regular expressions consist of a single capturing group, which is defined as shown in the following table.</source>
          <target state="translated">Beide reguläre Ausdrücke bestehen aus einer einzelnen Erfassungsgruppe, die wie in der folgenden Tabelle gezeigt definiert ist.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">Muster</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Beschreibung</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Either match "a" along with the value of the first captured group …</source>
          <target state="translated">Entweder „a“ zusammen mit dem Wert der ersten Erfassungsgruppe abgleichen...</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>…</source>
          <target state="translated">…</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>or test whether the first captured group has been defined.</source>
          <target state="translated">oder testen, ob die erste Erfassungsgruppe definiert wurde.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>(Note that the <bpt id="p1">**</bpt>(?(1)<ept id="p1">**</ept> construct does not define a capturing group.)</source>
          <target state="translated">(Beachten Sie, dass das <bpt id="p1">**</bpt>(?(1)<ept id="p1">**</ept>-Konstrukt keine Erfassungsgruppe definiert.)</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>If the first captured group exists, match its value.</source>
          <target state="translated">Wenn die erste Erfassungsgruppe vorhanden ist, deren Wert abgleichen.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>If the group does not exist, the group will match <bpt id="p1">[</bpt>String.Empty<ept id="p1">](xref:System.String.Empty)</ept>.</source>
          <target state="translated">Wenn die Gruppe nicht vorhanden ist, gleicht die Gruppe <bpt id="p1">[</bpt>String.Empty<ept id="p1">](xref:System.String.Empty)</ept> ab.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>The first regular expression tries to match this pattern between zero and two times; the second, exactly two times.</source>
          <target state="translated">Der erste reguläre Ausdruck versucht, dieses Muster zwischen null- und zweimal abzugleichen; der zweite Ausdruck genau zweimal.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Because the first pattern reaches its minimum number of captures with its first capture of <bpt id="p1">[</bpt>String.Empty<ept id="p1">](xref:System.String.Empty)</ept>, it never repeats to try to match <ph id="ph1">`a\1;`</ph> the <ph id="ph2">`{0,2}`</ph> quantifier allows only empty matches in the last iteration.</source>
          <target state="translated">Da das erste Muster die minimale Anzahl von Erfassungen mit der ersten Erfassung von <bpt id="p1">[</bpt>String.Empty<ept id="p1">](xref:System.String.Empty)</ept> erreicht, wird es nie wiederholt, um <ph id="ph1">`a\1;`</ph> abzugleichen. Der <ph id="ph2">`{0,2}`</ph>-Quantifizierer erlaubt nur leere Übereinstimmungen in der letzten Iteration.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>In contrast, the second regular expression does match "a" because it evaluates <ph id="ph1">`a\1`</ph> a second time; the minimum number of iterations, 2, forces the engine to repeat after an empty match.</source>
          <target state="translated">Im Gegensatz dazu gleicht der zweite reguläre Ausdruck „a“ ab, weil <ph id="ph1">`a\1`</ph> ein zweites Mal ausgewertet wird; die Mindestanzahl von Iterationen (2) zwingt das Modul nach einer leeren Übereinstimmung zur Wiederholung.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>See also</source>
          <target state="translated">Siehe auch</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Regular expression language - quick reference<ept id="p1">](quick-ref.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Sprachelemente für reguläre Ausdrücke – Kurzübersicht<ept id="p1">](quick-ref.md)</ept></target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Backtracking in regular expressions<ept id="p1">](backtracking.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Backtracking in regulären Ausdrücken<ept id="p1">](backtracking.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>