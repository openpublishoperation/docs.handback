<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-47f9650" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0a774a170b7703b900c2044708b07faeb4e51548</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\base-types\type-conversion.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f21ec2e74906f6ff9ff9204eb7a376844307c782</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2fbf7b584be3088b013f751f100d30a7c7ebb1cb</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Type conversion</source>
          <target state="translated">Conversión de tipos</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Type conversion</source>
          <target state="translated">Conversión de tipos</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Type conversion</source>
          <target state="translated">Conversión de tipos</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Every value has an associated type, which defines attributes such as the amount of space allocated to the value, the range of possible values it can have, and the members that it makes available.</source>
          <target state="translated">Cada valor tiene un tipo asociado, que define atributos como la cantidad de espacio asignado al valor, el intervalo de valores posibles que puede tener y los miembros que ofrece.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Many values can be expressed as more than one type.</source>
          <target state="translated">Muchos valores se pueden expresar como más de un tipo.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For example, the value <ph id="ph1">`4`</ph> can be expressed as an integer or a floating-point value.</source>
          <target state="translated">Por ejemplo, el valor <ph id="ph1">`4`</ph> se puede expresar como un entero o como un valor de punto flotante.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Type conversion creates a value in a new type that is equivalent to the value of an old type, but does not necessarily preserve the identity (or exact value) of the original object.</source>
          <target state="translated">La conversión de tipo crea un valor en un nuevo tipo que es equivalente al valor de un tipo antiguo, pero no conserva necesariamente la identidad (o valor exacto) del objeto original.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>.NET automatically supports the following conversions:</source>
          <target state="translated">.NET admite automáticamente las conversiones siguientes:</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Conversion from a derived class to a base class.</source>
          <target state="translated">Conversión de una clase derivada a una clase base.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This means, for example, that an instance of any class or structure can be converted to an <bpt id="p1">[</bpt>Object<ept id="p1">](xref:System.Object)</ept> instance.</source>
          <target state="translated">Esto significa, por ejemplo, que una instancia de cualquier clase o estructura se puede convertir en una instancia de tipo <bpt id="p1">[</bpt>Object<ept id="p1">](xref:System.Object)</ept>.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This conversion does not require a casting operator.</source>
          <target state="translated">Esta conversión no requiere un operador de conversión.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Conversion from a base class back to the original derived class.</source>
          <target state="translated">Conversión de una clase base a la clase derivada original.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In C#, this conversion requires a casting operator.</source>
          <target state="translated">En C#, esta conversión requiere un operador de conversión.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In Visual Basic, it requires the <ph id="ph1">`CType`</ph> operator if <ph id="ph2">`Option Strict`</ph> is on.</source>
          <target state="translated">En Visual Basic, requiere el operador <ph id="ph1">`CType`</ph> si <ph id="ph2">`Option Strict`</ph> está activado.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Conversion from a type that implements an interface to an interface object that represents that interface.</source>
          <target state="translated">Conversión de un tipo que implementa una interfaz a un objeto de interfaz que representa esa interfaz.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This conversion does not require a casting operator.</source>
          <target state="translated">Esta conversión no requiere un operador de conversión.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Conversion from an interface object back to the original type that implements that interface.</source>
          <target state="translated">Conversión de un objeto de interfaz al tipo original que implementa esa interfaz.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In C#, this conversion requires a casting operator.</source>
          <target state="translated">En C#, esta conversión requiere un operador de conversión.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In Visual Basic, it requires the <ph id="ph1">`CType`</ph> operator if <ph id="ph2">`Option Strict`</ph> is on.</source>
          <target state="translated">En Visual Basic, requiere el operador <ph id="ph1">`CType`</ph> si <ph id="ph2">`Option Strict`</ph> está activado.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In addition to these automatic conversions, .NET provides several features that support custom type conversion.</source>
          <target state="translated">Además de estas conversiones automáticas, .NET proporciona varias características que admiten la conversión de tipos personalizada.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>These include the following:</source>
          <target state="translated">Entre ellas se incluyen las siguientes:</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Implicit`</ph> operator, which defines the available widening conversions between types.</source>
          <target state="translated">El operador <ph id="ph1">`Implicit`</ph>, que define las conversiones de ampliación disponibles entre los tipos.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>Implicit conversion with the Implicit operator<ept id="p1">](#implicit-conversion-with-the-implicit-operator)</ept> section.</source>
          <target state="translated">Para obtener más información, consulte la sección <bpt id="p1">[</bpt>Conversión implícita con el operador Implicit<ept id="p1">](#implicit-conversion-with-the-implicit-operator)</ept>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Explicit`</ph> operator, which defines the available narrowing conversions between types.</source>
          <target state="translated">El operador <ph id="ph1">`Explicit`</ph>, que define las conversiones de restricción disponibles entre los tipos.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>Explicit conversion with the Explicit operator<ept id="p1">](#explicit-conversion-with-the-explicit-operator)</ept> section.</source>
          <target state="translated">Para obtener más información, consulte la sección <bpt id="p1">[</bpt>Conversión explícita con el operador Explicit<ept id="p1">](#explicit-conversion-with-the-explicit-operator)</ept>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept> interface, which defines conversions to each of the base .NET data types.</source>
          <target state="translated">La interfaz <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept>, que define las conversiones en cada uno de los tipos de datos base de .NET.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>The IConvertible interface<ept id="p1">](#the-iconvertible-interface)</ept> section.</source>
          <target state="translated">Para obtener más información, consulte la sección <bpt id="p1">[</bpt>Interfaz IConvertible<ept id="p1">](#the-iconvertible-interface)</ept>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Convert<ept id="p1">](xref:System.Convert)</ept> class, which provides a set of methods that implement the methods in the <ph id="ph1">`IConvertible`</ph> interface.</source>
          <target state="translated">La clase <bpt id="p1">[</bpt>Convert<ept id="p1">](xref:System.Convert)</ept>, que proporciona un conjunto de métodos que implementan los métodos de la interfaz <ph id="ph1">`IConvertible`</ph>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>The Convert class<ept id="p1">](#the-convert-class)</ept> section.</source>
          <target state="translated">Para obtener más información, consulte la sección <bpt id="p1">[</bpt>Clase Convert<ept id="p1">](#the-convert-class)</ept>.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>TypeConverter<ept id="p1">](xref:System.ComponentModel.TypeConverter)</ept> class, which is a base class that can be extended to support the conversion of a specified type to any other type.</source>
          <target state="translated">La clase <bpt id="p1">[</bpt>TypeConverter<ept id="p1">](xref:System.ComponentModel.TypeConverter)</ept>, que es una clase base que se puede extender para admitir la conversión de un tipo concreto en cualquier otro tipo.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>The TypeConverter class<ept id="p1">](#the-typeconverter-class)</ept> section.</source>
          <target state="translated">Para obtener más información, consulte la sección <bpt id="p1">[</bpt>Clase TypeConverter<ept id="p1">](#the-typeconverter-class)</ept>.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Implicit conversion with the Implicit operator</source>
          <target state="translated">Conversión implícita con el operador Implicit</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Widening conversions involve the creation of a new value from the value of an existing type that has either a more restrictive range or a more restricted member list than the target type.</source>
          <target state="translated">Las conversiones de ampliación implican la creación de un nuevo valor a partir del valor de un tipo existente que tiene un intervalo más restrictivo o una lista de miembros más restringida que el tipo de destino.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Widening conversions cannot result in data loss (although they may result in a loss of precision).</source>
          <target state="translated">Las conversión de ampliación no pueden producir ninguna pérdida de datos (aunque pueden producir una pérdida de precisión).</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Because data cannot be lost, compilers can handle the conversion implicitly or transparently, without requiring the use of an explicit conversion method or a casting operator.</source>
          <target state="translated">Puesto que no se pueden perder datos, los compiladores pueden administrar la conversión de manera implícita o transparente, sin que sea necesario el uso de un método de conversión explícito o de un operador de conversión.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Although code that performs an implicit conversion can call a conversion method or use a casting operator, their use is not required by compilers that support implicit conversions.</source>
          <target state="translated">Aunque el código que realiza una conversión implícita puede llamar a un método de conversión o usar un operador de conversión, los compiladores que admiten las conversiones implícitas no necesitan usarlos.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>For example, the <bpt id="p1">[</bpt>Decimal<ept id="p1">](xref:System.Decimal)</ept> type supports implicit conversions from <bpt id="p2">[</bpt>Byte<ept id="p2">](xref:System.Byte)</ept>, <bpt id="p3">[</bpt>Char<ept id="p3">](xref:System.Char)</ept>, <bpt id="p4">[</bpt>Int16<ept id="p4">](xref:System.Int16)</ept>, <bpt id="p5">[</bpt>Int32<ept id="p5">](xref:System.Int32)</ept>, <bpt id="p6">[</bpt>Int64<ept id="p6">](xref:System.Int64)</ept>, <bpt id="p7">[</bpt>SByte<ept id="p7">](xref:System.SByte)</ept>, <bpt id="p8">[</bpt>UInt16<ept id="p8">](xref:System.UInt16)</ept>, <bpt id="p9">[</bpt>UInt32<ept id="p9">](xref:System.UInt32)</ept>, and <bpt id="p10">[</bpt>UInt64<ept id="p10">](xref:System.UInt64)</ept> values.</source>
          <target state="translated">Por ejemplo, el tipo <bpt id="p1">[</bpt>Decimal<ept id="p1">](xref:System.Decimal)</ept> admite conversiones implícitas de valores <bpt id="p2">[</bpt>Byte<ept id="p2">](xref:System.Byte)</ept>, <bpt id="p3">[</bpt>Char<ept id="p3">](xref:System.Char)</ept>, <bpt id="p4">[</bpt>Int16<ept id="p4">](xref:System.Int16)</ept>, <bpt id="p5">[</bpt>Int32<ept id="p5">](xref:System.Int32)</ept>, <bpt id="p6">[</bpt>Int64<ept id="p6">](xref:System.Int64)</ept>, <bpt id="p7">[</bpt>SByte<ept id="p7">](xref:System.SByte)</ept>, <bpt id="p8">[</bpt>UInt16<ept id="p8">](xref:System.UInt16)</ept>, <bpt id="p9">[</bpt>UInt32<ept id="p9">](xref:System.UInt32)</ept> y <bpt id="p10">[</bpt>UInt64<ept id="p10">](xref:System.UInt64)</ept>.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The following example illustrates some of these implicit conversions in assigning values to a <ph id="ph1">`Decimal`</ph> variable.</source>
          <target state="translated">En el ejemplo siguiente se muestran algunas de estas conversiones implícitas al asignar valores a una variable <ph id="ph1">`Decimal`</ph>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If a particular language compiler supports custom operators, you can also define implicit conversions in your own custom types.</source>
          <target state="translated">Si un compilador de un lenguaje determinado admite operadores personalizados, también puede definir conversiones implícitas en sus propios tipos personalizados.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The following example provides a partial implementation of a signed byte data type named <ph id="ph1">`ByteWithSign`</ph> that uses sign-and-magnitude representation.</source>
          <target state="translated">En el ejemplo siguiente se proporciona una implementación parcial de un tipo de datos de byte con signo denominado <ph id="ph1">`ByteWithSign`</ph> que usa la representación de signo y magnitud.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>It supports implicit conversion of <bpt id="p1">[</bpt>Byte<ept id="p1">](xref:System.Byte)</ept> and <bpt id="p2">[</bpt>SByte<ept id="p2">](xref:System.SByte)</ept> values to <ph id="ph1">`ByteWithSign`</ph> values.</source>
          <target state="translated">Admite la conversión implícita de valores <bpt id="p1">[</bpt>Byte<ept id="p1">](xref:System.Byte)</ept> y <bpt id="p2">[</bpt>SByte<ept id="p2">](xref:System.SByte)</ept> a valores <ph id="ph1">`ByteWithSign`</ph>.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Client code can then declare a <ph id="ph1">`ByteWithSign`</ph> variable and assign it <bpt id="p1">[</bpt>Byte<ept id="p1">](xref:System.Byte)</ept> and <bpt id="p2">[</bpt>SByte<ept id="p2">](xref:System.SByte)</ept> values without performing any explicit conversions or using any casting operators, as the following example shows.</source>
          <target state="translated">Después, el código de cliente puede declarar una variable <ph id="ph1">`ByteWithSign`</ph> y asignarle valores <bpt id="p1">[</bpt>Byte<ept id="p1">](xref:System.Byte)</ept> y <bpt id="p2">[</bpt>SByte<ept id="p2">](xref:System.SByte)</ept> sin realizar ninguna conversión explícita ni emplear ningún operador de conversión, como se muestra en el ejemplo siguiente.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Explicit conversion with the Explicit operator</source>
          <target state="translated">Conversión explícita con el operador Explicit</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Narrowing conversions involve the creation of a new value from the value of an existing type that has either a greater range or a larger member list than the target type.</source>
          <target state="translated">Las conversiones de restricción implican la creación de un nuevo valor a partir del valor de un tipo existente que tiene un intervalo mayor o una lista de miembros mayor que el tipo de destino.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Because a narrowing conversion can result in a loss of data, compilers often require that the conversion be made explicit through a call to a conversion method or a casting operator.</source>
          <target state="translated">Puesto que una conversión de restricción puede producir una pérdida de datos, los compiladores suelen necesitar que la conversión se haga explícita a través de una llamada a un método de conversión o a un operador de conversión.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>That is, the conversion must be handled explicitly in developer code.</source>
          <target state="translated">Es decir, la conversión se debe administrar explícitamente en el código de desarrollo.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The major purpose of requiring a conversion method or casting operator for narrowing conversions is to make the developer aware of the possibility of data loss or an <bpt id="p1">[</bpt>OverflowException<ept id="p1">](xref:System.OverflowException)</ept> so that it can be handled in code.</source>
          <target state="translated">La finalidad principal de solicitar un método de conversión o un operador de conversión para las conversiones de restricción es que el desarrollador sea consciente de la posibilidad de que se pierdan datos o de que se produzca una excepción <bpt id="p1">[</bpt>OverflowException<ept id="p1">](xref:System.OverflowException)</ept>, para que se pueda administrar en el código.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>However, some compilers can relax this requirement.</source>
          <target state="translated">Sin embargo, algunos compiladores pueden ser menos exigentes con este requisito.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>For example, in Visual Basic, if <ph id="ph1">`Option Strict`</ph> is off (its default setting), the Visual Basic compiler tries to perform narrowing conversions implicitly.</source>
          <target state="translated">Por ejemplo, en Visual Basic, si <ph id="ph1">`Option Strict`</ph> está desactivado (la configuración predeterminada), el compilador de Visual Basic intenta realizar las conversiones de restricción implícitamente.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For example, the <bpt id="p1">[</bpt>UInt32<ept id="p1">](xref:System.UInt32)</ept>, <bpt id="p2">[</bpt>Int64<ept id="p2">](xref:System.Int64)</ept>, and <bpt id="p3">[</bpt>UInt64<ept id="p3">](xref:System.UInt64)</ept> data types have ranges that exceed that the <bpt id="p4">[</bpt>Int32<ept id="p4">](xref:System.Int32)</ept> data type, as the following table shows.</source>
          <target state="translated">Por ejemplo, los tipos de datos <bpt id="p1">[</bpt>UInt32<ept id="p1">](xref:System.UInt32)</ept>, <bpt id="p2">[</bpt>Int64<ept id="p2">](xref:System.Int64)</ept> y <bpt id="p3">[</bpt>UInt64<ept id="p3">](xref:System.UInt64)</ept> tienen intervalos que superan el del tipo de datos <bpt id="p4">[</bpt>Int32<ept id="p4">](xref:System.Int32)</ept>, como se muestra en la tabla siguiente.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Type</source>
          <target state="translated">Tipo</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Comparison with range of Int32</source>
          <target state="translated">Comparación con el intervalo de Int32</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Int64<ept id="p1">](xref:System.Int64)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Int64<ept id="p1">](xref:System.Int64)</ept></target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Int64.MaxValue<ept id="p1">](xref:System.Int64.MaxValue)</ept> is greater than <bpt id="p2">[</bpt>Int32.MaxValue<ept id="p2">](xref:System.Int32#System_Int32_MaxValue)</ept>, and <bpt id="p3">[</bpt>Int64.MinValue<ept id="p3">](xref:System.Int64.MinValue)</ept> is less than (has a greater negative range than) <bpt id="p4">[</bpt>Int32.MinValue<ept id="p4">](xref:System.Int32#System_Int32_MinValue)</ept>.</source>
          <target state="translated"><bpt id="p1">[</bpt>Int64.MaxValue<ept id="p1">](xref:System.Int64.MaxValue)</ept> es mayor que <bpt id="p2">[</bpt>Int32.MaxValue<ept id="p2">](xref:System.Int32#System_Int32_MaxValue)</ept> e <bpt id="p3">[</bpt>Int64.MinValue<ept id="p3">](xref:System.Int64.MinValue)</ept> es menor (tiene un intervalo negativo mayor) que <bpt id="p4">[</bpt>Int32.MinValue<ept id="p4">](xref:System.Int32#System_Int32_MinValue)</ept>.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>UInt32<ept id="p1">](xref:System.UInt32)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>UInt32<ept id="p1">](xref:System.UInt32)</ept></target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>UInt32.MaxValue<ept id="p1">](xref:System.UInt32.MaxValue)</ept> is greater than <bpt id="p2">[</bpt>Int32.MaxValue<ept id="p2">](xref:System.Int32.MaxValue)</ept>.</source>
          <target state="translated"><bpt id="p1">[</bpt>UInt32.MaxValue<ept id="p1">](xref:System.UInt32.MaxValue)</ept> es mayor que <bpt id="p2">[</bpt>Int32.MaxValue<ept id="p2">](xref:System.Int32.MaxValue)</ept>.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>UInt64<ept id="p1">](xref:System.UInt64)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>UInt64<ept id="p1">](xref:System.UInt64)</ept></target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>UInt64.MaxValue<ept id="p1">](xref:System.UInt64.MaxValue)</ept> is greater than <bpt id="p2">[</bpt>Int32.MaxValue<ept id="p2">](xref:System.Int32.MaxValue)</ept>.</source>
          <target state="translated"><bpt id="p1">[</bpt>UInt64.MaxValue<ept id="p1">](xref:System.UInt64.MaxValue)</ept> es mayor que <bpt id="p2">[</bpt>Int32.MaxValue<ept id="p2">](xref:System.Int32.MaxValue)</ept>.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>To handle such narrowing conversions, .NET allows types to define an <ph id="ph1">`Explicit`</ph> operator.</source>
          <target state="translated">Para administrar estas conversiones de restricción, .NET permite que los tipos definan un operador <ph id="ph1">`Explicit`</ph>.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Individual language compilers can then implement this operator using their own syntax, or a member of the <bpt id="p1">[</bpt>Convert<ept id="p1">](xref:System.Convert)</ept> class can be called to perform the conversion.</source>
          <target state="translated">Después, los compiladores de lenguaje individuales pueden implementar este operador usando su propia sintaxis o se puede llamar a un miembro de la clase <bpt id="p1">[</bpt>Convert<ept id="p1">](xref:System.Convert)</ept> para realizar la conversión.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>(For more information about the <ph id="ph1">`Convert`</ph> class, see <bpt id="p1">[</bpt>The Convert class<ept id="p1">](#the-convert-class)</ept> later in this topic.) The following example illustrates the use of language features to handle the explicit conversion of these potentially out-of-range integer values to <bpt id="p2">[</bpt>Int32<ept id="p2">](xref:System.Int32)</ept> values.</source>
          <target state="translated">(Para obtener más información acerca de la clase <ph id="ph1">`Convert`</ph>, consulte <bpt id="p1">[</bpt>Clase Convert<ept id="p1">](#the-convert-class)</ept> más adelante en este tema). En el ejemplo siguiente, se muestra el uso de las características de lenguaje para administrar la conversión explícita de estos valores enteros, que potencialmente están fuera del intervalo, a valores de tipo <bpt id="p2">[</bpt>Int32<ept id="p2">](xref:System.Int32)</ept>.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Explicit conversions can produce different results in different languages, and these results can differ from the value returned by the corresponding <bpt id="p1">[</bpt>Convert<ept id="p1">](xref:System.Convert)</ept> method.</source>
          <target state="translated">Las conversiones explícitas pueden producir resultados diferentes en los distintos lenguajes y estos resultados pueden diferir del valor devuelto por el método <bpt id="p1">[</bpt>Convert<ept id="p1">](xref:System.Convert)</ept> correspondiente.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>For example, if the <bpt id="p1">[</bpt>Double<ept id="p1">](xref:System.Double)</ept> value <bpt id="p2">**</bpt>12.63251<ept id="p2">**</ept> is converted to an <bpt id="p3">[</bpt>Int32<ept id="p3">](xref:System.Int32)</ept>, both the .NET <bpt id="p4">[</bpt>Convert.ToInt32(Double)<ept id="p4">](xref:System.Convert.ToInt32(System.Double))</ept> and the Visual Basic <ph id="ph1">`CInt`</ph> method method rounds the <bpt id="p5">[</bpt>Double<ept id="p5">](xref:System.Double)</ept> to return a value of <bpt id="p6">**</bpt>13<ept id="p6">**</ept>, but the C# <ph id="ph2">`(int)`</ph> operator truncates the <bpt id="p7">[</bpt>Double<ept id="p7">](xref:System.Double)</ept> to return a value of <bpt id="p8">**</bpt>12<ept id="p8">**</ept>.</source>
          <target state="translated">Por ejemplo, si el valor <bpt id="p1">[</bpt>Double<ept id="p1">](xref:System.Double)</ept> <bpt id="p2">**</bpt>12.63251<ept id="p2">**</ept> se convierte en <bpt id="p3">[</bpt>Int32<ept id="p3">](xref:System.Int32)</ept>, tanto el método <bpt id="p4">[</bpt>Convert.ToInt32(Double)<ept id="p4">](xref:System.Convert.ToInt32(System.Double))</ept> de .NET como el método <ph id="ph1">`CInt`</ph> de Visual Basic redondean <bpt id="p5">[</bpt>Double<ept id="p5">](xref:System.Double)</ept> para devolver un valor de <bpt id="p6">**</bpt>13<ept id="p6">**</ept>, pero el operador <ph id="ph2">`(int)`</ph> de C# trunca <bpt id="p7">[</bpt>Double<ept id="p7">](xref:System.Double)</ept> para devolver un valor de <bpt id="p8">**</bpt>12<ept id="p8">**</ept>.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Similarly, the C# <ph id="ph1">`(int)`</ph> operator does not support Boolean-to-integer conversion, but the Visual Basic <ph id="ph2">`CInt`</ph> method converts a value of <ph id="ph3">`true`</ph> to <bpt id="p1">**</bpt>-1<ept id="p1">**</ept>.</source>
          <target state="translated">De manera similar, el operador <ph id="ph1">`(int)`</ph> de C# no admite la conversión de booleano a entero, pero el método <ph id="ph2">`CInt`</ph> de Visual Basic convierte un valor de <ph id="ph3">`true`</ph> en <bpt id="p1">**</bpt>-1<ept id="p1">**</ept>.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>On the other hand, the <bpt id="p1">[</bpt>Convert.ToInt32(Boolean)<ept id="p1">](xref:System.Convert.ToInt32(System.Boolean))</ept> method converts a value of <ph id="ph1">`true`</ph> to <bpt id="p2">**</bpt>1<ept id="p2">**</ept>.</source>
          <target state="translated">Por otro lado, el método <bpt id="p1">[</bpt>Convert.ToInt32(Boolean)<ept id="p1">](xref:System.Convert.ToInt32(System.Boolean))</ept> convierte un valor de <ph id="ph1">`true`</ph> en <bpt id="p2">**</bpt>1<ept id="p2">**</ept>.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Most compilers allow explicit conversions to be performed in a checked or unchecked manner.</source>
          <target state="translated">La mayoría de los compiladores permiten realizar conversiones explícitas de manera comprobada o no comprobada.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>When a checked conversion is performed, an <bpt id="p1">[</bpt>OverflowException<ept id="p1">](xref:System.OverflowException)</ept> is thrown when the value of the type to be converted is outside the range of the target type.</source>
          <target state="translated">Cuando se realiza una conversión comprobada, se produce una excepción <bpt id="p1">[</bpt>OverflowException<ept id="p1">](xref:System.OverflowException)</ept> si el valor del tipo que se va a convertir está fuera del intervalo del tipo de destino.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>When an unchecked conversion is performed under the same conditions, the conversion might not throw an exception, but the exact behavior becomes undefined and an incorrect value might result.</source>
          <target state="translated">Si se realiza una conversión no comprobada en las mismas condiciones, es posible que la conversión no produzca una excepción, pero no se podrá determinar con exactitud cuál será el comportamiento y se puede obtener como resultado un valor incorrecto.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>In C#, checked conversions can be performed by using the <ph id="ph1">`checked`</ph> keyword together with a casting operator, or by specifying the <ph id="ph2">`/checked+`</ph> compiler option.</source>
          <target state="translated">En C#, las conversiones comprobadas se pueden realizar usando la palabra clave <ph id="ph1">`checked`</ph> junto con un operador de conversión o especificando la opción del compilador <ph id="ph2">`/checked+`</ph>.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Conversely, unchecked conversions can be performed by using the <ph id="ph1">`unchecked`</ph> keyword together with the casting operator, or by specifying the <ph id="ph2">`/checked-`</ph> compiler option.</source>
          <target state="translated">Por el contrario, las conversiones no comprobadas se pueden realizar utilizando la palabra clave <ph id="ph1">`unchecked`</ph> junto con el operador de conversión de tipo o especificando la opción del compilador <ph id="ph2">`/checked-`</ph>.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>By default, explicit conversions are unchecked.</source>
          <target state="translated">De forma predeterminada, las conversiones explícitas no se comprueban.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>In Visual Basic, checked conversions can be performed by specifying the <ph id="ph1">`/removeintchecks-`</ph> compiler option.</source>
          <target state="translated">En Visual Basic, se pueden realizar las conversiones comprobadas especificando la opción <ph id="ph1">`/removeintchecks-`</ph> del compilador.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Conversely, unchecked conversions can be performed by specifying the <ph id="ph1">`/removeintchecks+`</ph> compiler option.</source>
          <target state="translated">Por el contrario, las conversiones no comprobadas se pueden realizar especificando la opción <ph id="ph1">`/removeintchecks+`</ph> del compilador.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>By default, explicit conversions are checked.</source>
          <target state="translated">De forma predeterminada, las conversiones explícitas se comprueban.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The following C# example uses the <ph id="ph1">`checked`</ph> and <ph id="ph2">`unchecked`</ph> keywords to illustrate the difference in behavior when a value outside the range of a <bpt id="p1">[</bpt>Byte<ept id="p1">](xref:System.Byte)</ept> is converted to a <ph id="ph3">`Byte`</ph>.</source>
          <target state="translated">En el siguiente ejemplo de C# se usan las palabras clave <ph id="ph1">`checked`</ph> y <ph id="ph2">`unchecked`</ph> para mostrar la diferencia de comportamiento cuando un valor que está fuera del intervalo de <bpt id="p1">[</bpt>Byte<ept id="p1">](xref:System.Byte)</ept> se convierte en <ph id="ph3">`Byte`</ph>.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The checked conversion throws an exception, but the unchecked conversion assigns <bpt id="p1">[</bpt>Byte.MaxValue<ept id="p1">](xref:System.Byte.MaxValue)</ept> to the <ph id="ph1">`Byte`</ph> variable.</source>
          <target state="translated">La conversión comprobada produce una excepción, pero la conversión no comprobada asigna <bpt id="p1">[</bpt>Byte.MaxValue<ept id="p1">](xref:System.Byte.MaxValue)</ept> a la variable <ph id="ph1">`Byte`</ph>.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>If a particular language compiler supports custom overloaded operators, you can also define explicit conversions in your own custom types.</source>
          <target state="translated">Si un compilador de un lenguaje determinado admite operadores sobrecargados personalizados, también puede definir conversiones explícitas en sus propios tipos personalizados.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The following example provides a partial implementation of a signed byte data type named <ph id="ph1">`ByteWithSign`</ph> that uses sign-and-magnitude representation.</source>
          <target state="translated">En el ejemplo siguiente se proporciona una implementación parcial de un tipo de datos de byte con signo denominado <ph id="ph1">`ByteWithSign`</ph> que usa la representación de signo y magnitud.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>It supports explicit conversion of <bpt id="p1">[</bpt>Int32<ept id="p1">](xref:System.Int32)</ept> and <bpt id="p2">[</bpt>UInt32<ept id="p2">](xref:System.UInt32)</ept> values to <ph id="ph1">`ByteWithSign`</ph> values.</source>
          <target state="translated">Admite la conversión explícita de valores <bpt id="p1">[</bpt>Int32<ept id="p1">](xref:System.Int32)</ept> y <bpt id="p2">[</bpt>UInt32<ept id="p2">](xref:System.UInt32)</ept> en valores <ph id="ph1">`ByteWithSign`</ph>.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Client code can then declare a <ph id="ph1">`ByteWithSign`</ph> variable and assign it <bpt id="p1">[</bpt>Int32<ept id="p1">](xref:System.Int32)</ept> and <bpt id="p2">[</bpt>UInt32<ept id="p2">](xref:System.UInt32)</ept> values if the assignments include a casting operator, as the following example shows.</source>
          <target state="translated">Después, el código de cliente puede declarar una variable <ph id="ph1">`ByteWithSign`</ph> y asignarle valores de tipo <bpt id="p1">[</bpt>Int32<ept id="p1">](xref:System.Int32)</ept> y <bpt id="p2">[</bpt>UInt32<ept id="p2">](xref:System.UInt32)</ept> si las asignaciones incluyen un operador de conversión, como se muestra en el ejemplo siguiente.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The IConvertible interface</source>
          <target state="translated">Interfaz IConvertible</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>To support the conversion of any type to a common language runtime base type, .NET provides the <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept> interface.</source>
          <target state="translated">Para admitir la conversión de cualquier tipo en un tipo base de Common Language Runtime, .NET proporciona la interfaz <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept>.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The implementing type is required to provide the following:</source>
          <target state="translated">El tipo que se está implementando debe proporcionar lo siguiente:</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>A method that returns the <bpt id="p1">[</bpt>TypeCode<ept id="p1">](xref:System.TypeCode)</ept> of the implementing type.</source>
          <target state="translated">Un método que devuelva el objeto <bpt id="p1">[</bpt>TypeCode<ept id="p1">](xref:System.TypeCode)</ept> del tipo que se está implementando.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Methods to convert the implementing type to each common language runtime base type (<bpt id="p1">[</bpt>Boolean<ept id="p1">](xref:System.Boolean)</ept>, <bpt id="p2">[</bpt>Byte<ept id="p2">](xref:System.Byte)</ept>, <bpt id="p3">[</bpt>DateTime<ept id="p3">](xref:System.DateTime)</ept>, <bpt id="p4">[</bpt>Decimal<ept id="p4">](xref:System.Decimal)</ept>, <bpt id="p5">[</bpt>Double<ept id="p5">](xref:System.Double)</ept>, and so on).</source>
          <target state="translated">Métodos para convertir el tipo que se está implementando en cada uno de los tipos base de Common Language Runtime (<bpt id="p1">[</bpt>Boolean<ept id="p1">](xref:System.Boolean)</ept>, <bpt id="p2">[</bpt>Byte<ept id="p2">](xref:System.Byte)</ept>, <bpt id="p3">[</bpt>DateTime<ept id="p3">](xref:System.DateTime)</ept>, <bpt id="p4">[</bpt>Decimal<ept id="p4">](xref:System.Decimal)</ept>, <bpt id="p5">[</bpt>Double<ept id="p5">](xref:System.Double)</ept>, etc.).</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>A generalized conversion method to convert an instance of the implementing type to another specified type.</source>
          <target state="translated">Un método de conversión generalizado para convertir una instancia del tipo que se está implementando en otro tipo concreto.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Conversions that are not supported should throw an <bpt id="p1">[</bpt>InvalidCastException<ept id="p1">](xref:System.InvalidCastException)</ept>.</source>
          <target state="translated">Las conversiones que no se admiten deben iniciar una excepción <bpt id="p1">[</bpt>InvalidCastException<ept id="p1">](xref:System.InvalidCastException)</ept>.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Each common language runtime base type (that is, the <bpt id="p1">[</bpt>Boolean<ept id="p1">](xref:System.Boolean)</ept>, <bpt id="p2">[</bpt>Byte<ept id="p2">](xref:System.Byte)</ept>, <bpt id="p3">[</bpt>Char<ept id="p3">](xref:System.Char)</ept>, <bpt id="p4">[</bpt>DateTime<ept id="p4">](xref:System.DateTime)</ept>, <bpt id="p5">[</bpt>Decimal<ept id="p5">](xref:System.Decimal)</ept>, <bpt id="p6">[</bpt>Double<ept id="p6">](xref:System.Double)</ept>, <bpt id="p7">[</bpt>Int16<ept id="p7">](xref:System.Int16)</ept>, <bpt id="p8">[</bpt>Int32<ept id="p8">](xref:System.Int32)</ept>, <bpt id="p9">[</bpt>Int64<ept id="p9">](xref:System.Int64)</ept>, <bpt id="p10">[</bpt>SByte<ept id="p10">](xref:System.SByte)</ept>, <bpt id="p11">[</bpt>Single<ept id="p11">](xref:System.Single)</ept>, <bpt id="p12">[</bpt>String<ept id="p12">](xref:System.String)</ept>, <bpt id="p13">[</bpt>UInt16<ept id="p13">](xref:System.UInt16)</ept>, <bpt id="p14">[</bpt>UInt32<ept id="p14">](xref:System.UInt32)</ept>, and <bpt id="p15">[</bpt>UInt64<ept id="p15">](xref:System.UInt64)</ept>, as well as the <bpt id="p16">[</bpt>DBNull<ept id="p16">](xref:System.DBNull)</ept> and <bpt id="p17">[</bpt>Enum<ept id="p17">](xref:System.Enum)</ept> types, implement the <bpt id="p18">[</bpt>IConvertible<ept id="p18">](xref:System.IConvertible)</ept> interface.</source>
          <target state="translated">Cada tipo base de common language runtime (es decir, <bpt id="p1">[</bpt>Boolean<ept id="p1">](xref:System.Boolean)</ept>, <bpt id="p2">[</bpt>Byte<ept id="p2">](xref:System.Byte)</ept>, <bpt id="p3">[</bpt>Char<ept id="p3">](xref:System.Char)</ept>, <bpt id="p4">[</bpt>DateTime<ept id="p4">](xref:System.DateTime)</ept>, <bpt id="p5">[</bpt>Decimal<ept id="p5">](xref:System.Decimal)</ept>, <bpt id="p6">[</bpt>Double<ept id="p6">](xref:System.Double)</ept>, <bpt id="p7">[</bpt>Int16<ept id="p7">](xref:System.Int16)</ept>, <bpt id="p8">[</bpt>Int32<ept id="p8">](xref:System.Int32)</ept>, <bpt id="p9">[</bpt>Int64<ept id="p9">](xref:System.Int64)</ept>, <bpt id="p10">[</bpt>SByte<ept id="p10">](xref:System.SByte)</ept>, <bpt id="p11">[</bpt>Single<ept id="p11">](xref:System.Single)</ept>, <bpt id="p12">[</bpt>String<ept id="p12">](xref:System.String)</ept>, <bpt id="p13">[</bpt>UInt16<ept id="p13">](xref:System.UInt16)</ept>, <bpt id="p14">[</bpt>UInt32<ept id="p14">](xref:System.UInt32)</ept> y <bpt id="p15">[</bpt>UInt64<ept id="p15">](xref:System.UInt64)</ept>, así como los tipos <bpt id="p16">[</bpt>DBNull<ept id="p16">](xref:System.DBNull)</ept> y <bpt id="p17">[</bpt>Enum<ept id="p17">](xref:System.Enum)</ept>) implementa la interfaz <bpt id="p18">[</bpt>IConvertible<ept id="p18">](xref:System.IConvertible)</ept>.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>However, these are explicit interface implementations; the conversion method can be called only through an <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept> interface variable, as the following example shows.</source>
          <target state="translated">Pero se trata de implementaciones de interfaz explícitas; solo se puede llamar al método de conversión mediante una variable de la interfaz <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept>, como se muestra en el ejemplo siguiente.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>This example converts an <bpt id="p1">[</bpt>Int32<ept id="p1">](xref:System.Int32)</ept> value to its equivalent <bpt id="p2">[</bpt>Char<ept id="p2">](xref:System.Char)</ept> value.</source>
          <target state="translated">Este ejemplo convierte un valor <bpt id="p1">[</bpt>Int32<ept id="p1">](xref:System.Int32)</ept> en su valor <bpt id="p2">[</bpt>Char<ept id="p2">](xref:System.Char)</ept> equivalente.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The requirement to call the conversion method on its interface rather than on the implementing type makes explicit interface implementations relatively expensive.</source>
          <target state="translated">El requisito de llamar al método de conversión en su interfaz, en lugar de en el tipo que se está implementando, hace que las implementaciones de interfaz explícitas resulten relativamente costosas.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Instead, we recommend that you call the appropriate member of the <bpt id="p1">[</bpt>Convert<ept id="p1">](xref:System.Convert)</ept> class to convert between common language runtime base types.</source>
          <target state="translated">En su lugar, se recomienda llamar al miembro adecuado de la clase <bpt id="p1">[</bpt>Convert<ept id="p1">](xref:System.Convert)</ept> para convertir entre los tipos base de Common Language Runtime.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>For more information, see the next section, <bpt id="p1">[</bpt>The Convert class<ept id="p1">](#the-convert-class)</ept>.</source>
          <target state="translated">Para obtener más información, consulte la próxima sección, <bpt id="p1">[</bpt>Clase Convert<ept id="p1">](#the-convert-class)</ept>.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>In addition to the <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept> interface and the <bpt id="p2">[</bpt>Convert<ept id="p2">](xref:System.Convert)</ept> class provided by .NET, individual languages may also provide ways to perform conversions.</source>
          <target state="translated">Además de la interfaz <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept> y la clase <bpt id="p2">[</bpt>Convert<ept id="p2">](xref:System.Convert)</ept> proporcionadas por .NET, los lenguajes individuales también pueden proporcionar maneras de realizar las conversiones.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>For example, C# uses casting operators; Visual Basic uses compiler-implemented conversion functions such as <ph id="ph1">`CType`</ph>, <ph id="ph2">`CInt`</ph>, and <ph id="ph3">`DirectCast`</ph>.</source>
          <target state="translated">Por ejemplo, C# utiliza operadores de conversión, mientras que Visual Basic utiliza funciones de conversión implementadas por el compilador como <ph id="ph1">`CType`</ph>, <ph id="ph2">`CInt`</ph> y <ph id="ph3">`DirectCast`</ph>.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>For the most part, the <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept> interface is designed to support conversion between the base types in .NET.</source>
          <target state="translated">En su mayor parte, la interfaz <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept> está diseñada para admitir la conversión entre los tipos base de .NET.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>However, the interface can also be implemented by a custom type to support conversion of that type to other custom types.</source>
          <target state="translated">Sin embargo, la interfaz también puede implementarse por un tipo personalizado con el fin de admitir la conversión de ese tipo a otros tipos personalizados.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>For more information, see the section <bpt id="p1">[</bpt>Custom conversions with the ChangeType method<ept id="p1">](#custom-conversions-with-the-changetype-method)</ept> later in this topic.</source>
          <target state="translated">Para obtener más información, consulte la sección <bpt id="p1">[</bpt>Conversiones personalizadas con el método ChangeType<ept id="p1">](#custom-conversions-with-the-changetype-method)</ept> más adelante en este tema.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The Convert class</source>
          <target state="translated">Clase Convert</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Although each base type's <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept> interface implementation can be called to perform a type conversion, calling the methods of the <bpt id="p2">[</bpt>System.Convert<ept id="p2">](xref:System.Convert)</ept> class is the recommended language-neutral way to convert from one base type to another.</source>
          <target state="translated">Aunque se puede llamar a la implementación de la interfaz <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept> de cada tipo base para realizar una conversión de tipo, llamar a los métodos de la clase <bpt id="p2">[</bpt>System.Convert<ept id="p2">](xref:System.Convert)</ept> es la manera recomendada de convertir de un tipo base en otro de una manera independiente del lenguaje.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>In addition, the <bpt id="p1">[</bpt>Convert.ChangeType(Object, Type, IFormatProvider)<ept id="p1">](xref:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider))</ept> method can be used to convert from a specified custom type to another type.</source>
          <target state="translated">Además, se puede usar el método <bpt id="p1">[</bpt>Convert.ChangeType(Object, Type, IFormatProvider)<ept id="p1">](xref:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider))</ept> para convertir de un tipo personalizado concreto a otro tipo.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Conversions between base types</source>
          <target state="translated">Conversiones entre los tipos base</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Convert<ept id="p1">](xref:System.Convert)</ept> class provides a language-neutral way to perform conversions between base types and is available to all languages that target the common language runtime.</source>
          <target state="translated">La clase <bpt id="p1">[</bpt>Convert<ept id="p1">](xref:System.Convert)</ept> proporciona una manera independiente del lenguaje de realizar conversiones entre los tipos base y está disponible para todos los lenguajes cuyo destino es Common Language Runtime.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>It provides a complete set of methods for both widening and narrowing conversions, and throws an <bpt id="p1">[</bpt>InvalidCastException<ept id="p1">](xref:System.InvalidCastException)</ept> for conversions that are not supported (such as the conversion of a <bpt id="p2">[</bpt>DateTime<ept id="p2">](xref:System.DateTime)</ept> value to an integer value).</source>
          <target state="translated">Ofrece un conjunto completo de métodos tanto para conversiones de ampliación como de restricción e inicia una excepción <bpt id="p1">[</bpt>InvalidCastException<ept id="p1">](xref:System.InvalidCastException)</ept> para las conversiones que no se admiten (como la conversión de un valor <bpt id="p2">[</bpt>DateTime<ept id="p2">](xref:System.DateTime)</ept> a un valor entero).</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Narrowing conversions are performed in a checked context, and an <bpt id="p1">[</bpt>OverflowException<ept id="p1">](xref:System.OverflowException)</ept> is thrown if the conversion fails.</source>
          <target state="translated">Las conversiones de restricción se realizan en un contexto comprobado y se inicia una excepción <bpt id="p1">[</bpt>OverflowException<ept id="p1">](xref:System.OverflowException)</ept> si se produce un error en la conversión.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Because the <bpt id="p1">[</bpt>Convert<ept id="p1">](xref:System.Convert)</ept> class includes methods to convert to and from each base type, it eliminates the need to call each base type's <bpt id="p2">[</bpt>IConvertible<ept id="p2">](xref:System.IConvertible)</ept> explicit interface implementation.</source>
          <target state="translated">Puesto que la clase <bpt id="p1">[</bpt>Convert<ept id="p1">](xref:System.Convert)</ept> incluye métodos para efectuar la conversión directa e inversa de cada tipo base, elimina la necesidad de llamar a la implementación de interfaz explícita <bpt id="p2">[</bpt>IConvertible<ept id="p2">](xref:System.IConvertible)</ept> de cada tipo base.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The following example illustrates the use of the <bpt id="p1">[</bpt>System.Convert<ept id="p1">](xref:System.Convert)</ept> class to perform several widening and narrowing conversions between .NET base types.</source>
          <target state="translated">En el ejemplo siguiente se muestra el uso de la clase <bpt id="p1">[</bpt>System.Convert<ept id="p1">](xref:System.Convert)</ept> para realizar varias conversiones de restricción y ampliación entre los tipos base de .NET.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>In some cases, particularly when converting to and from floating-point values, a conversion may involve a loss of precision, even though it does not throw an <bpt id="p1">[</bpt>OverflowException<ept id="p1">](xref:System.OverflowException)</ept>.</source>
          <target state="translated">En algunos casos, en especial al efectuar conversiones directas e inversas de valores de punto flotante, una conversión puede conllevar una pérdida de precisión, aunque no se inicie una excepción <bpt id="p1">[</bpt>OverflowException<ept id="p1">](xref:System.OverflowException)</ept>.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The following example illustrates this loss of precision.</source>
          <target state="translated">En el ejemplo siguiente se muestra esta pérdida de precisión.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>In the first case, a <bpt id="p1">[</bpt>Decimal<ept id="p1">](xref:System.Decimal)</ept> value has less precision (fewer significant digits) when it is converted to a <bpt id="p2">[</bpt>Double<ept id="p2">](xref:System.Double)</ept>.</source>
          <target state="translated">En el primer caso, un valor <bpt id="p1">[</bpt>Decimal<ept id="p1">](xref:System.Decimal)</ept> tiene menos precisión (menos dígitos significativos) cuando se convierte en el tipo <bpt id="p2">[</bpt>Double<ept id="p2">](xref:System.Double)</ept>.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>In the second case, a <bpt id="p1">[</bpt>Double<ept id="p1">](xref:System.Double)</ept> value is rounded from <bpt id="p2">**</bpt>42.72<ept id="p2">**</ept> to <bpt id="p3">**</bpt>43<ept id="p3">**</ept> in order to complete the conversion.</source>
          <target state="translated">En el segundo caso, un valor <bpt id="p1">[</bpt>Double<ept id="p1">](xref:System.Double)</ept> se redondea de <bpt id="p2">**</bpt>42,72<ept id="p2">**</ept> a <bpt id="p3">**</bpt>43<ept id="p3">**</ept> para completar la conversión.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>For a table that lists both the widening and narrowing conversions supported by the <bpt id="p1">[</bpt>Convert<ept id="p1">](xref:System.Convert)</ept> class, see <bpt id="p2">[</bpt>Type conversion tables<ept id="p2">](conversion-tables.md)</ept>.</source>
          <target state="translated">Para obtener una tabla en la que se muestra una lista de conversiones de restricción y ampliación admitidas por la clase <bpt id="p1">[</bpt>Convert<ept id="p1">](xref:System.Convert)</ept>, consulte <bpt id="p2">[</bpt>Tablas de conversiones de tipos<ept id="p2">](conversion-tables.md)</ept>.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Custom conversions with the ChangeType method</source>
          <target state="translated">Conversiones personalizadas con el método ChangeType</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>In addition to supporting conversions to each of the base types, the <bpt id="p1">[</bpt>Convert<ept id="p1">](xref:System.Convert)</ept> class can be used to convert a custom type to one or more predefined types.</source>
          <target state="translated">Además de admitir las conversiones en cada uno de los tipos base, la clase <bpt id="p1">[</bpt>Convert<ept id="p1">](xref:System.Convert)</ept> se puede usar para convertir un tipo personalizado en uno o varios tipos predefinidos.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>This conversion is performed by the <bpt id="p1">[</bpt>Convert.ChangeType(Object, Type, IFormatProvider)<ept id="p1">](xref:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider))</ept> method, which in turn wraps a call to the <bpt id="p2">[</bpt>IConvertible.ToType<ept id="p2">](xref:System.IConvertible.ToType(System.Type,System.IFormatProvider))</ept> method of the value parameter.</source>
          <target state="translated">Esta conversión se realiza mediante el método <bpt id="p1">[</bpt>Convert.ChangeType(Object, Type, IFormatProvider)<ept id="p1">](xref:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider))</ept>, que a su vez contiene una llamada al método <bpt id="p2">[</bpt>IConvertible.ToType<ept id="p2">](xref:System.IConvertible.ToType(System.Type,System.IFormatProvider))</ept> del parámetro de valor.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>This means that the object represented by the value parameter must provide an implementation of the <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept> interface.</source>
          <target state="translated">Esto significa que el objeto representado por el parámetro de valor debe proporcionar una implementación de la interfaz <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept>.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Because the <bpt id="p1">[</bpt>Convert.ChangeType(Object, Type)<ept id="p1">](xref:System.Convert.ChangeType(System.Object,System.Type))</ept> and <bpt id="p2">[</bpt>Convert.ChangeType(Object, Type, IFormatProvider)<ept id="p2">](xref:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider))</ept> methods use a <bpt id="p3">[</bpt>Type<ept id="p3">](xref:System.Type)</ept> object to specify the target type to which value is converted, they can be used to perform a dynamic conversion to an object whose type is not known at compile time.</source>
          <target state="translated">Dado que los métodos <bpt id="p1">[</bpt>Convert.ChangeType(Object, Type)<ept id="p1">](xref:System.Convert.ChangeType(System.Object,System.Type))</ept> y <bpt id="p2">[</bpt>Convert.ChangeType(Object, Type, IFormatProvider)<ept id="p2">](xref:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider))</ept> usan un objeto <bpt id="p3">[</bpt>Type<ept id="p3">](xref:System.Type)</ept> para especificar el tipo de destino al que se convierte el valor, se pueden usar para realizar una conversión dinámica a un objeto cuyo tipo se desconoce en tiempo de compilación.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>However, note that the <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept> implementation of value must still support this conversion.</source>
          <target state="translated">Pero observe que la implementación del valor de <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept> aún debe admitir esta conversión.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The following example illustrates a possible implementation of the <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept> interface that allows a <ph id="ph1">`TemperatureCelsius`</ph> object to be converted to a <ph id="ph2">`TemperatureFahrenheit`</ph> object and vice versa.</source>
          <target state="translated">En el ejemplo siguiente se muestra una posible implementación de la interfaz <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept> que permite convertir un objeto <ph id="ph1">`TemperatureCelsius`</ph> en un objeto <ph id="ph2">`TemperatureFahrenheit`</ph> y viceversa.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The example defines a base class, <ph id="ph1">`Temperature`</ph>, that implements the <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept> interface and overrides the <bpt id="p2">[</bpt>Object.ToString<ept id="p2">](xref:System.Object.ToString)</ept> method.</source>
          <target state="translated">El ejemplo define una clase base, <ph id="ph1">`Temperature`</ph>, que implementa la interfaz <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept> e invalida el método <bpt id="p2">[</bpt>Object.ToString<ept id="p2">](xref:System.Object.ToString)</ept>.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The derived <ph id="ph1">`TemperatureCelsius`</ph> and <ph id="ph2">`TemperatureFahrenheit`</ph> classes each override the <ph id="ph3">`ToType`</ph> and the <ph id="ph4">`ToString`</ph> methods of the base class.</source>
          <target state="translated">Cada una de las clases derivadas <ph id="ph1">`TemperatureCelsius`</ph> y <ph id="ph2">`TemperatureFahrenheit`</ph> invalida los métodos <ph id="ph3">`ToType`</ph> y <ph id="ph4">`ToString`</ph> de la clase base.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The following example illustrates several calls to these <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept> implementations to convert <ph id="ph1">`TemperatureCelsius`</ph> objects to <ph id="ph2">`TemperatureFahrenheit`</ph> objects and vice versa.</source>
          <target state="translated">En el ejemplo siguiente se muestran varias llamadas a estas implementaciones de <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept> para convertir los objetos <ph id="ph1">`TemperatureCelsius`</ph> en objetos <ph id="ph2">`TemperatureFahrenheit`</ph> y viceversa.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The TypeConverter class</source>
          <target state="translated">Clase TypeConverter</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>.NET also allows you to define a type converter for a custom type by extending the <bpt id="p1">[</bpt>System.ComponentModel.TypeConverter<ept id="p1">](xref:System.ComponentModel.TypeConverter)</ept> class and associating the type converter with the type through a <bpt id="p2">[</bpt>System.ComponentModel.TypeConverterAttribute<ept id="p2">](xref:System.ComponentModel.TypeConverterAttribute)</ept> attribute.</source>
          <target state="translated">.NET también permite definir un convertidor de tipos para un tipo personalizado extendiendo la clase <bpt id="p1">[</bpt>System.ComponentModel.TypeConverter<ept id="p1">](xref:System.ComponentModel.TypeConverter)</ept> y asociando el convertidor de tipos al tipo por medio de un atributo <bpt id="p2">[</bpt>System.ComponentModel.TypeConverterAttribute<ept id="p2">](xref:System.ComponentModel.TypeConverterAttribute)</ept>.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The following table highlights the differences between this approach and implementing the <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept> interface for a custom type.</source>
          <target state="translated">En la tabla siguiente se resaltan las diferencias entre este enfoque y la implementación de la interfaz <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept> para un tipo personalizado.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Design-time support can be provided for a custom type only if it has a type converter defined for it.</source>
          <target state="translated">Se puede proporcionar compatibilidad en tiempo de diseño para un tipo personalizado sólo si se ha definido un convertidor de tipos para éste.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Conversion using TypeConverter</source>
          <target state="translated">Conversión mediante TypeConverter</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Conversion using IConvertible</source>
          <target state="translated">Conversión mediante IConvertible</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Is implemented for a custom type by deriving a separate class from <bpt id="p1">[</bpt>TypeConverter<ept id="p1">](xref:System.ComponentModel.TypeConverter)</ept>.</source>
          <target state="translated">Se implementa para un tipo personalizado derivando una clase independiente de <bpt id="p1">[</bpt>TypeConverter<ept id="p1">](xref:System.ComponentModel.TypeConverter)</ept>.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>This derived class is associated with the custom type by applying a <bpt id="p1">[</bpt>TypeConverterAttribute<ept id="p1">](xref:System.ComponentModel.TypeConverterAttribute)</ept> attribute.</source>
          <target state="translated">Esta clase derivada se asocia al tipo personalizado aplicando un atributo <bpt id="p1">[</bpt>TypeConverterAttribute<ept id="p1">](xref:System.ComponentModel.TypeConverterAttribute)</ept>.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Is implemented by a custom type to perform conversion.</source>
          <target state="translated">Se implementa mediante un tipo personalizado para realizar la conversión.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>A user of the type invokes an <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept> conversion method on the type.</source>
          <target state="translated">Un usuario del tipo invoca un método de conversión de <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept> para el tipo.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Can be used both at design time and at run time.</source>
          <target state="translated">Se puede utilizar en tiempo de diseño y en tiempo de ejecución.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Can be used only at run time.</source>
          <target state="translated">Sólo se puede utilizar en tiempo de ejecución.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Uses reflection; therefore, is slower than conversion enabled by <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept>.</source>
          <target state="translated">Usa la reflexión; por tanto, es más lenta que la conversión mediante <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept>.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Does not use reflection.</source>
          <target state="translated">No utiliza la reflexión.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Allows two-way type conversions from the custom type to other data types, and from other data types to the custom type.</source>
          <target state="translated">Permite realizar conversiones bidireccionales; es decir, convertir el tipo personalizado en otros tipos de datos y convertir otros tipos de datos en el tipo personalizado.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>For example, a <bpt id="p1">[</bpt>TypeConverter<ept id="p1">](xref:System.ComponentModel.TypeConverter)</ept> defined for <ph id="ph1">`MyType`</ph> allows conversions from <ph id="ph2">`MyType`</ph> to <bpt id="p2">[</bpt>String<ept id="p2">](xref:System.String)</ept>, and from <bpt id="p3">[</bpt>String<ept id="p3">](xref:System.String)</ept> to <ph id="ph3">`MyType`</ph>.</source>
          <target state="translated">Por ejemplo, un <bpt id="p1">[</bpt>TypeConverter<ept id="p1">](xref:System.ComponentModel.TypeConverter)</ept> definido para <ph id="ph1">`MyType`</ph> permite conversiones de <ph id="ph2">`MyType`</ph> a <bpt id="p2">[</bpt>String<ept id="p2">](xref:System.String)</ept> y de <bpt id="p3">[</bpt>String<ept id="p3">](xref:System.String)</ept> a <ph id="ph3">`MyType`</ph>.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Allows conversion from a custom type to other data types, but not from other data types to the custom type.</source>
          <target state="translated">Permite convertir un tipo personalizado en otros tipos de datos, pero no otros tipos de datos en el tipo personalizado.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>For more information about using type converters to perform conversions, see <bpt id="p1">[</bpt>System.ComponentModel.TypeConverter<ept id="p1">](xref:System.ComponentModel.TypeConverter)</ept>.</source>
          <target state="translated">Para obtener más información acerca de cómo usar convertidores de tipos para realizar conversiones, consulte <bpt id="p1">[</bpt>System.ComponentModel.TypeConverter<ept id="p1">](xref:System.ComponentModel.TypeConverter)</ept>.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>See also</source>
          <target state="translated">Vea también</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.Convert<ept id="p1">](xref:System.Convert)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>System.Convert<ept id="p1">](xref:System.Convert)</ept></target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept></target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Type conversion tables<ept id="p1">](conversion-tables.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Tablas de conversión de tipos<ept id="p1">](conversion-tables.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>