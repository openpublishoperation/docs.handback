<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-eac019f" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">618b5c7c1b8219f4e9225277064ff3c498ff3382</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\collections\threadsafe\how-to-use-foreach-to-remove.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p2</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d3755e57a8a6dcf2dae1b9ea0dff6404ea6d6466</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">51ea7de7f7b1da9deeb42d64769c73ce9340ea7e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Use ForEach to Remove Items in a BlockingCollection</source>
          <target state="translated">Guide pratique : utiliser la boucle ForEach pour supprimer les éléments d'un BlockingCollection</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Use ForEach to Remove Items in a BlockingCollection</source>
          <target state="translated">Guide pratique : utiliser la boucle ForEach pour supprimer les éléments d'un BlockingCollection</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>How to: Use ForEach to Remove Items in a BlockingCollection</source>
          <target state="translated">Guide pratique : utiliser la boucle ForEach pour supprimer les éléments d'un BlockingCollection</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In addition to taking items from a <bpt id="p1">[</bpt>BlockingCollection<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph><ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Concurrent.BlockingCollection-1)</ept> by using the <ph id="ph3">`Take`</ph> and <ph id="ph4">`TryTake`</ph> methods, you can also use a <ph id="ph5">`foreach`</ph> loop to remove items until adding is completed and the collection is empty.</source>
          <target state="translated">Outre l’extraction d’éléments à partir d’un <bpt id="p1">[</bpt>BlockingCollection<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph><ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Concurrent.BlockingCollection-1)</ept> à l’aide des méthodes <ph id="ph3">`Take`</ph> et <ph id="ph4">`TryTake`</ph>, vous pouvez également utiliser une boucle <ph id="ph5">`foreach`</ph> pour supprimer des éléments jusqu’à ce que l’ajout soit terminé et que la collection soit vide.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This is called a mutating enumeration or consuming enumeration because, unlike a typical <ph id="ph1">`foreach`</ph> loop, this enumerator modifies the source collection by removing items.</source>
          <target state="translated">Cela s’appelle une énumération de mutation ou énumération de consommation car, contrairement à une boucle <ph id="ph1">`foreach`</ph> typique, cet énumérateur modifie la collection source en supprimant ses éléments.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Exemple</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The following example shows how to remove all the items in a <ph id="ph1">`BlockingCollection&lt;T&gt;`</ph> by using a <ph id="ph2">`foreach`</ph> loop.</source>
          <target state="translated">L’exemple suivant indique comment supprimer tous les éléments d’un <ph id="ph1">`BlockingCollection&lt;T&gt;`</ph> à l’aide d’une boucle <ph id="ph2">`foreach`</ph>.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This example uses a <ph id="ph1">`foreach`</ph> loop with the <ph id="ph2">`BlockingCollection&lt;T&gt;.GetConsumingEnumerable`</ph> method in the consuming thread, which causes each item to be removed from the collection as it is enumerated.</source>
          <target state="translated">Cet exemple utilise une boucle <ph id="ph1">`foreach`</ph> avec la méthode <ph id="ph2">`BlockingCollection&lt;T&gt;.GetConsumingEnumerable`</ph> dans le thread consommateur, ce qui provoque la suppression de chaque élément de la collection pendant son énumération.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`BlockingCollection&lt;T&gt;`</ph> limits the maximum number of items that are in the collection at any time.</source>
          <target state="translated"><ph id="ph1">`BlockingCollection&lt;T&gt;`</ph> limite le nombre maximal d’éléments présents dans la collection à tout moment.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Enumerating the collection in this way blocks the consumer thread if no items are available or if the collection is empty.</source>
          <target state="translated">Cette façon d’énumérer la collection bloque le thread consommateur si aucun élément n’est disponible ou si la collection est vide.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In this example blocking is not a concern because the producer thread adds items faster than they can be consumed.</source>
          <target state="translated">Dans cet exemple, le blocage n’est pas un problème, car le thread producteur ajoute des éléments plus vite qu’ils ne peuvent être consommés.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>There is no guarantee that the items are enumerated in the same order in which they are added by the producer threads.</source>
          <target state="translated">Il n’y a aucune garantie que les éléments soient énumérés dans le même ordre que celui dans lequel ils ont été ajoutés par les threads producteurs.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>To enumerate the collection without modifying it, just use <ph id="ph1">`foreach`</ph> without the <ph id="ph2">`GetConsumingEnumerable`</ph> method.</source>
          <target state="translated">Pour énumérer la collection sans la modifier, utilisez seulement <ph id="ph1">`foreach`</ph> sans la méthode <ph id="ph2">`GetConsumingEnumerable`</ph>.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>However, it is important to understand that this kind of enumeration represents a snapshot of the collection at a precise point in time.</source>
          <target state="translated">Toutefois, il est important de comprendre que ce genre d’énumération représente un instantané de la collection à un moment donné.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If other threads are adding or removing items concurrently while you are executing the loop, then the loop might not represent the actual state of the collection.</source>
          <target state="translated">Si d’autres threads ajoutent ou suppriment des éléments simultanément pendant l’exécution de la boucle, la boucle peut ne pas représenter l’état réel de la collection.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">Voir aussi</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.Collections.Concurrent<ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Concurrent)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>System.Collections.Concurrent<ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Concurrent)</ept></target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>BlockingCollection Overview<ept id="p1">](blockingcollection-overview.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Vue d’ensemble de BlockingCollection<ept id="p1">](blockingcollection-overview.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>