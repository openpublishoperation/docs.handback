<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-eac019f" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ba4a356921cb43b88d3ad8e6ef7487699f442385</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\base-types\type-conversion.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p2</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">df8bad09de4109d5c7593cc8eb9155894e15738d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fa96a35131a4ba48f37ac78c13b46e5a9d5690f6</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Type conversion</source>
          <target state="translated">Conversion de type</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Type conversion</source>
          <target state="translated">Conversion de type</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Type conversion</source>
          <target state="translated">Conversion de type</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Every value has an associated type, which defines attributes such as the amount of space allocated to the value, the range of possible values it can have, and the members that it makes available.</source>
          <target state="translated">Chaque valeur a un type associé qui définit des attributs, tels la quantité d'espace allouée à la valeur, la plage de valeurs possibles et les membres qu'il rend disponibles.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Many values can be expressed as more than one type.</source>
          <target state="translated">De nombreuses valeurs peuvent être exprimées sous forme de plusieurs types.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For example, the value <ph id="ph1">`4`</ph> can be expressed as an integer or a floating-point value.</source>
          <target state="translated">Par exemple, la valeur <ph id="ph1">`4`</ph> peut être exprimée sous forme d’entier ou de valeur à virgule flottante.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Type conversion creates a value in a new type that is equivalent to the value of an old type, but does not necessarily preserve the identity (or exact value) of the original object.</source>
          <target state="translated">La conversion de type crée une valeur dans un nouveau type qui est équivalente à la valeur d'un ancien type, mais ne préserve pas nécessairement l'identité (ou la valeur exacte) de l'objet d'origine.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>.NET automatically supports the following conversions:</source>
          <target state="translated">.NET prend automatiquement en charge les conversions suivantes :</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Conversion from a derived class to a base class.</source>
          <target state="translated">Conversion d’une classe dérivée vers une classe de base.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This means, for example, that an instance of any class or structure can be converted to an <bpt id="p1">[</bpt>Object<ept id="p1">](xref:System.Object)</ept> instance.</source>
          <target state="translated">Cela signifie, par exemple, qu’une instance d’une classe ou d’une structure peut être convertie en instance <bpt id="p1">[</bpt>Object<ept id="p1">](xref:System.Object)</ept>.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This conversion does not require a casting operator.</source>
          <target state="translated">Cette conversion ne nécessite pas d’opérateur de cast.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Conversion from a base class back to the original derived class.</source>
          <target state="translated">Reconversion d’une classe de base vers la classe dérivée d’origine.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In C#, this conversion requires a casting operator.</source>
          <target state="translated">En C#, cette conversion nécessite un opérateur de cast.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In Visual Basic, it requires the <ph id="ph1">`CType`</ph> operator if <ph id="ph2">`Option Strict`</ph> is on.</source>
          <target state="translated">En Visual Basic, elle nécessite l’opérateur <ph id="ph1">`CType`</ph> si <ph id="ph2">`Option Strict`</ph> est activée.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Conversion from a type that implements an interface to an interface object that represents that interface.</source>
          <target state="translated">Conversion d’un type qui implémente une interface vers un objet d’interface qui représente cette interface.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This conversion does not require a casting operator.</source>
          <target state="translated">Cette conversion ne nécessite pas d’opérateur de cast.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Conversion from an interface object back to the original type that implements that interface.</source>
          <target state="translated">Reconversion d’un objet d’interface vers le type d’origine qui implémente cette interface.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In C#, this conversion requires a casting operator.</source>
          <target state="translated">En C#, cette conversion nécessite un opérateur de cast.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In Visual Basic, it requires the <ph id="ph1">`CType`</ph> operator if <ph id="ph2">`Option Strict`</ph> is on.</source>
          <target state="translated">En Visual Basic, elle nécessite l’opérateur <ph id="ph1">`CType`</ph> si <ph id="ph2">`Option Strict`</ph> est activée.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In addition to these automatic conversions, .NET provides several features that support custom type conversion.</source>
          <target state="translated">En plus de ces conversions automatiques, .NET fournit plusieurs fonctionnalités qui prennent en charge la conversion de type personnalisé.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>These include the following:</source>
          <target state="translated">Notamment :</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Implicit`</ph> operator, which defines the available widening conversions between types.</source>
          <target state="translated">L'opérateur <ph id="ph1">`Implicit`</ph>, qui définit les conversions étendues disponibles entre des types.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>Implicit conversion with the Implicit operator<ept id="p1">](#implicit-conversion-with-the-implicit-operator)</ept> section.</source>
          <target state="translated">Pour plus d’informations, consultez la section <bpt id="p1">[</bpt>Conversion implicite avec l’opérateur Implicit<ept id="p1">](#implicit-conversion-with-the-implicit-operator)</ept>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Explicit`</ph> operator, which defines the available narrowing conversions between types.</source>
          <target state="translated">L'opérateur <ph id="ph1">`Explicit`</ph>, qui définit les conversions restrictives entre des types.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>Explicit conversion with the Explicit operator<ept id="p1">](#explicit-conversion-with-the-explicit-operator)</ept> section.</source>
          <target state="translated">Pour plus d’informations, consultez la section <bpt id="p1">[</bpt>Conversion explicite avec l’opérateur Explicit<ept id="p1">](#explicit-conversion-with-the-explicit-operator)</ept>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept> interface, which defines conversions to each of the base .NET data types.</source>
          <target state="translated">L’interface <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept>, qui définit les conversions vers chacun des types de données .NET de base.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>The IConvertible interface<ept id="p1">](#the-iconvertible-interface)</ept> section.</source>
          <target state="translated">Pour plus d’informations, consultez la section <bpt id="p1">[</bpt>Interface IConvertible<ept id="p1">](#the-iconvertible-interface)</ept>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Convert<ept id="p1">](xref:System.Convert)</ept> class, which provides a set of methods that implement the methods in the <ph id="ph1">`IConvertible`</ph> interface.</source>
          <target state="translated">La classe <bpt id="p1">[</bpt>Convert<ph id="ph1">`IConvertible`</ph>, qui fournit un ensemble de méthodes qui implémentent les méthodes dans l’interface <ept id="p1">](xref:System.Convert)</ept>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>The Convert class<ept id="p1">](#the-convert-class)</ept> section.</source>
          <target state="translated">Pour plus d’informations, consultez la section <bpt id="p1">[</bpt>Classe Convert<ept id="p1">](#the-convert-class)</ept>.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>TypeConverter<ept id="p1">](xref:System.ComponentModel.TypeConverter)</ept> class, which is a base class that can be extended to support the conversion of a specified type to any other type.</source>
          <target state="translated">La classe <bpt id="p1">[</bpt>TypeConverter<ept id="p1">](xref:System.ComponentModel.TypeConverter)</ept>, qui est une classe de base qui peut être étendue pour prendre en charge la conversion d’un type spécifié vers un autre type.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>The TypeConverter class<ept id="p1">](#the-typeconverter-class)</ept> section.</source>
          <target state="translated">Pour plus d’informations, consultez la section <bpt id="p1">[</bpt>Classe TypeConverter<ept id="p1">](#the-typeconverter-class)</ept>.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Implicit conversion with the Implicit operator</source>
          <target state="translated">Conversion implicite avec l’opérateur Implicit</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Widening conversions involve the creation of a new value from the value of an existing type that has either a more restrictive range or a more restricted member list than the target type.</source>
          <target state="translated">Les conversions étendues impliquent la création d'une valeur à partir de la valeur d'un type existant dont la plage est plus restrictive ou qui contient une liste de membres plus restreinte que le type cible.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Widening conversions cannot result in data loss (although they may result in a loss of precision).</source>
          <target state="translated">Les conversions étendues ne peuvent pas entraîner de perte de données (bien qu'elles puissent produire un résultat de moindre précision).</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Because data cannot be lost, compilers can handle the conversion implicitly or transparently, without requiring the use of an explicit conversion method or a casting operator.</source>
          <target state="translated">Étant donné qu'aucune donnée ne peut être perdue, les compilateurs peuvent gérer la conversion de façon implicite ou transparente, sans exiger l'utilisation d'une méthode de conversion explicite ou d'un opérateur de cast.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Although code that performs an implicit conversion can call a conversion method or use a casting operator, their use is not required by compilers that support implicit conversions.</source>
          <target state="translated">Même si le code qui exécute une conversion implicite peut appeler une méthode de conversion ou utiliser un opérateur de cast, son utilisation n'est pas requise par les compilateurs qui prennent en charge les conversions implicites.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>For example, the <bpt id="p1">[</bpt>Decimal<ept id="p1">](xref:System.Decimal)</ept> type supports implicit conversions from <bpt id="p2">[</bpt>Byte<ept id="p2">](xref:System.Byte)</ept>, <bpt id="p3">[</bpt>Char<ept id="p3">](xref:System.Char)</ept>, <bpt id="p4">[</bpt>Int16<ept id="p4">](xref:System.Int16)</ept>, <bpt id="p5">[</bpt>Int32<ept id="p5">](xref:System.Int32)</ept>, <bpt id="p6">[</bpt>Int64<ept id="p6">](xref:System.Int64)</ept>, <bpt id="p7">[</bpt>SByte<ept id="p7">](xref:System.SByte)</ept>, <bpt id="p8">[</bpt>UInt16<ept id="p8">](xref:System.UInt16)</ept>, <bpt id="p9">[</bpt>UInt32<ept id="p9">](xref:System.UInt32)</ept>, and <bpt id="p10">[</bpt>UInt64<ept id="p10">](xref:System.UInt64)</ept> values.</source>
          <target state="translated">Par exemple, le type <bpt id="p1">[</bpt>Decimal<ept id="p1">](xref:System.Decimal)</ept> prend en charge les conversions implicites des valeurs <bpt id="p2">[</bpt>Byte<ept id="p2">](xref:System.Byte)</ept>, <bpt id="p3">[</bpt>Char<ept id="p3">](xref:System.Char)</ept>, <bpt id="p4">[</bpt>Int16<ept id="p4">](xref:System.Int16)</ept>, <bpt id="p5">[</bpt>Int32<ept id="p5">](xref:System.Int32)</ept>, <bpt id="p6">[</bpt>Int64<ept id="p6">](xref:System.Int64)</ept>, <bpt id="p7">[</bpt>SByte<ept id="p7">](xref:System.SByte)</ept>, <bpt id="p8">[</bpt>UInt16<ept id="p8">](xref:System.UInt16)</ept>, <bpt id="p9">[</bpt>UInt32<ept id="p9">](xref:System.UInt32)</ept> et <bpt id="p10">[</bpt>UInt64<ept id="p10">](xref:System.UInt64)</ept>.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The following example illustrates some of these implicit conversions in assigning values to a <ph id="ph1">`Decimal`</ph> variable.</source>
          <target state="translated">L'exemple suivant illustre certaines de ces conversions implicites en assignant des valeurs à une variable <ph id="ph1">`Decimal`</ph>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If a particular language compiler supports custom operators, you can also define implicit conversions in your own custom types.</source>
          <target state="translated">Si un compilateur de langage particulier prend en charge des opérateurs personnalisés, vous pouvez également définir des conversions implicites dans vos propres types personnalisés.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The following example provides a partial implementation of a signed byte data type named <ph id="ph1">`ByteWithSign`</ph> that uses sign-and-magnitude representation.</source>
          <target state="translated">L'exemple suivant fournit une implémentation partielle d'un type de données d'octets signés nommé <ph id="ph1">`ByteWithSign`</ph> qui utilise la représentation « signe et magnitude ».</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>It supports implicit conversion of <bpt id="p1">[</bpt>Byte<ept id="p1">](xref:System.Byte)</ept> and <bpt id="p2">[</bpt>SByte<ept id="p2">](xref:System.SByte)</ept> values to <ph id="ph1">`ByteWithSign`</ph> values.</source>
          <target state="translated">Il prend en charge la conversion implicite des valeurs <bpt id="p1">[</bpt>Byte<ept id="p1">](xref:System.Byte)</ept> et <bpt id="p2">[</bpt>SByte<ept id="p2">](xref:System.SByte)</ept> en valeurs <ph id="ph1">`ByteWithSign`</ph>.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Client code can then declare a <ph id="ph1">`ByteWithSign`</ph> variable and assign it <bpt id="p1">[</bpt>Byte<ept id="p1">](xref:System.Byte)</ept> and <bpt id="p2">[</bpt>SByte<ept id="p2">](xref:System.SByte)</ept> values without performing any explicit conversions or using any casting operators, as the following example shows.</source>
          <target state="translated">Le code client peut ensuite déclarer une variable <ph id="ph1">`ByteWithSign`</ph> et lui assigner des valeurs <bpt id="p1">[</bpt>Byte<ept id="p1">](xref:System.Byte)</ept> et <bpt id="p2">[</bpt>SByte<ept id="p2">](xref:System.SByte)</ept> sans exécuter de conversion explicite ni utiliser d’opérateur de cast, comme indiqué dans l’exemple suivant.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Explicit conversion with the Explicit operator</source>
          <target state="translated">Conversion explicite avec l’opérateur Explicit</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Narrowing conversions involve the creation of a new value from the value of an existing type that has either a greater range or a larger member list than the target type.</source>
          <target state="translated">Les conversions restrictives impliquent la création d'une valeur à partir de la valeur d'un type existant dont la plage est plus étendue ou qui contient une liste de membres plus étendue que le type cible.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Because a narrowing conversion can result in a loss of data, compilers often require that the conversion be made explicit through a call to a conversion method or a casting operator.</source>
          <target state="translated">Une conversion restrictive pouvant entraîner une perte de données, les compilateurs exigent souvent que la conversion soit effectuée de façon implicite via un appel à une méthode de conversion ou à un opérateur de cast.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>That is, the conversion must be handled explicitly in developer code.</source>
          <target state="translated">En d'autres termes, la conversion doit être gérée de manière explicite dans le code du développeur.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The major purpose of requiring a conversion method or casting operator for narrowing conversions is to make the developer aware of the possibility of data loss or an <bpt id="p1">[</bpt>OverflowException<ept id="p1">](xref:System.OverflowException)</ept> so that it can be handled in code.</source>
          <target state="translated">Exiger une méthode de conversion ou un opérateur de cast pour les conversions restrictives a pour principal objectif que le développeur soit conscient des risques de perte de données ou d’un <bpt id="p1">[</bpt>OverflowException<ept id="p1">](xref:System.OverflowException)</ept> et puisse les gérer dans le code.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>However, some compilers can relax this requirement.</source>
          <target state="translated">Toutefois, certains compilateurs peuvent assouplir cette exigence.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>For example, in Visual Basic, if <ph id="ph1">`Option Strict`</ph> is off (its default setting), the Visual Basic compiler tries to perform narrowing conversions implicitly.</source>
          <target state="translated">Par exemple, en Visual Basic, si <ph id="ph1">`Option Strict`</ph> est désactivé (paramètre par défaut), le compilateur Visual Basic essaie d'exécuter des conversions restrictives de manière implicite.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For example, the <bpt id="p1">[</bpt>UInt32<ept id="p1">](xref:System.UInt32)</ept>, <bpt id="p2">[</bpt>Int64<ept id="p2">](xref:System.Int64)</ept>, and <bpt id="p3">[</bpt>UInt64<ept id="p3">](xref:System.UInt64)</ept> data types have ranges that exceed that the <bpt id="p4">[</bpt>Int32<ept id="p4">](xref:System.Int32)</ept> data type, as the following table shows.</source>
          <target state="translated">Par exemple, les types de données <bpt id="p1">[</bpt>UInt32<ept id="p1">](xref:System.UInt32)</ept>, <bpt id="p2">[</bpt>Int64<ept id="p2">](xref:System.Int64)</ept> et <bpt id="p3">[</bpt>UInt64<ept id="p3">](xref:System.UInt64)</ept> ont tous des plages qui dépassent celle du type de données <bpt id="p4">[</bpt>Int32<ept id="p4">](xref:System.Int32)</ept>, comme indiqué dans le tableau suivant.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Type</source>
          <target state="translated">Type</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Comparison with range of Int32</source>
          <target state="translated">Comparaison avec la plage de Int32</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Int64<ept id="p1">](xref:System.Int64)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Int64<ept id="p1">](xref:System.Int64)</ept></target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Int64.MaxValue<ept id="p1">](xref:System.Int64.MaxValue)</ept> is greater than <bpt id="p2">[</bpt>Int32.MaxValue<ept id="p2">](xref:System.Int32#System_Int32_MaxValue)</ept>, and <bpt id="p3">[</bpt>Int64.MinValue<ept id="p3">](xref:System.Int64.MinValue)</ept> is less than (has a greater negative range than) <bpt id="p4">[</bpt>Int32.MinValue<ept id="p4">](xref:System.Int32#System_Int32_MinValue)</ept>.</source>
          <target state="translated"><bpt id="p1">[</bpt>Int64.MaxValue<ept id="p1">](xref:System.Int64.MaxValue)</ept> est supérieur à <bpt id="p2">[</bpt>Int32.MaxValue<ept id="p2">](xref:System.Int32#System_Int32_MaxValue)</ept> et <bpt id="p3">[</bpt>Int64.MinValue<ept id="p3">](xref:System.Int64.MinValue)</ept> est inférieur à (a une plage plus négative que) <bpt id="p4">[</bpt>Int32.MinValue<ept id="p4">](xref:System.Int32#System_Int32_MinValue)</ept>.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>UInt32<ept id="p1">](xref:System.UInt32)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>UInt32<ept id="p1">](xref:System.UInt32)</ept></target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>UInt32.MaxValue<ept id="p1">](xref:System.UInt32.MaxValue)</ept> is greater than <bpt id="p2">[</bpt>Int32.MaxValue<ept id="p2">](xref:System.Int32.MaxValue)</ept>.</source>
          <target state="translated"><bpt id="p1">[</bpt>UInt32.MaxValue<ept id="p1">](xref:System.UInt32.MaxValue)</ept> est supérieur à <bpt id="p2">[</bpt>Int32.MaxValue<ept id="p2">](xref:System.Int32.MaxValue)</ept>.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>UInt64<ept id="p1">](xref:System.UInt64)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>UInt64<ept id="p1">](xref:System.UInt64)</ept></target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>UInt64.MaxValue<ept id="p1">](xref:System.UInt64.MaxValue)</ept> is greater than <bpt id="p2">[</bpt>Int32.MaxValue<ept id="p2">](xref:System.Int32.MaxValue)</ept>.</source>
          <target state="translated"><bpt id="p1">[</bpt>UInt64.MaxValue<ept id="p1">](xref:System.UInt64.MaxValue)</ept> est supérieur à <bpt id="p2">[</bpt>Int32.MaxValue<ept id="p2">](xref:System.Int32.MaxValue)</ept>.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>To handle such narrowing conversions, .NET allows types to define an <ph id="ph1">`Explicit`</ph> operator.</source>
          <target state="translated">Pour gérer ces conversions restrictives, .NET permet aux types de définir un opérateur <ph id="ph1">`Explicit`</ph>.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Individual language compilers can then implement this operator using their own syntax, or a member of the <bpt id="p1">[</bpt>Convert<ept id="p1">](xref:System.Convert)</ept> class can be called to perform the conversion.</source>
          <target state="translated">Chaque compilateur de langage peut ensuite implémenter cet opérateur à l’aide de sa propre syntaxe, ou un membre de la classe <bpt id="p1">[</bpt>Convert<ept id="p1">](xref:System.Convert)</ept> peut être appelé pour effectuer la conversion.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>(For more information about the <ph id="ph1">`Convert`</ph> class, see <bpt id="p1">[</bpt>The Convert class<ept id="p1">](#the-convert-class)</ept> later in this topic.) The following example illustrates the use of language features to handle the explicit conversion of these potentially out-of-range integer values to <bpt id="p2">[</bpt>Int32<ept id="p2">](xref:System.Int32)</ept> values.</source>
          <target state="translated">(Pour plus d’informations sur la classe <ph id="ph1">`Convert`</ph>, consultez <bpt id="p1">[</bpt>Classe Convert<ept id="p1">](#the-convert-class)</ept> plus loin dans cette rubrique.) L’exemple suivant illustre l’utilisation de fonctionnalités de langage pour gérer la conversion explicite de ces valeurs entières potentiellement hors limites en valeurs <bpt id="p2">[</bpt>Int32<ept id="p2">](xref:System.Int32)</ept>.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Explicit conversions can produce different results in different languages, and these results can differ from the value returned by the corresponding <bpt id="p1">[</bpt>Convert<ept id="p1">](xref:System.Convert)</ept> method.</source>
          <target state="translated">Les conversions explicites peuvent produire des résultats différents selon les langages, et ces résultats peuvent différer de la valeur retournée par la méthode <bpt id="p1">[</bpt>Convert<ept id="p1">](xref:System.Convert)</ept> correspondante.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>For example, if the <bpt id="p1">[</bpt>Double<ept id="p1">](xref:System.Double)</ept> value <bpt id="p2">**</bpt>12.63251<ept id="p2">**</ept> is converted to an <bpt id="p3">[</bpt>Int32<ept id="p3">](xref:System.Int32)</ept>, both the .NET <bpt id="p4">[</bpt>Convert.ToInt32(Double)<ept id="p4">](xref:System.Convert.ToInt32(System.Double))</ept> and the Visual Basic <ph id="ph1">`CInt`</ph> method method rounds the <bpt id="p5">[</bpt>Double<ept id="p5">](xref:System.Double)</ept> to return a value of <bpt id="p6">**</bpt>13<ept id="p6">**</ept>, but the C# <ph id="ph2">`(int)`</ph> operator truncates the <bpt id="p7">[</bpt>Double<ept id="p7">](xref:System.Double)</ept> to return a value of <bpt id="p8">**</bpt>12<ept id="p8">**</ept>.</source>
          <target state="translated">Par exemple, si la valeur <bpt id="p1">[</bpt>Double<ept id="p1">](xref:System.Double)</ept> <bpt id="p2">**</bpt>12.63251<ept id="p2">**</ept> est convertie en valeur <bpt id="p3">[</bpt>Int32<ept id="p3">](xref:System.Int32)</ept>, les méthodes .NET <bpt id="p4">[</bpt>Convert.ToInt32(Double)<ept id="p4">](xref:System.Convert.ToInt32(System.Double))</ept> et Visual Basic <ph id="ph1">`CInt`</ph> arrondissent la valeur <bpt id="p5">[</bpt>Double<ept id="p5">](xref:System.Double)</ept> pour retourner une valeur de <bpt id="p6">**</bpt>13<ept id="p6">**</ept>, mais l’opérateur <ph id="ph2">`(int)`</ph> C# tronque la valeur <bpt id="p7">[</bpt>Double<ept id="p7">](xref:System.Double)</ept> pour retourner une valeur de <bpt id="p8">**</bpt>12<ept id="p8">**</ept>.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Similarly, the C# <ph id="ph1">`(int)`</ph> operator does not support Boolean-to-integer conversion, but the Visual Basic <ph id="ph2">`CInt`</ph> method converts a value of <ph id="ph3">`true`</ph> to <bpt id="p1">**</bpt>-1<ept id="p1">**</ept>.</source>
          <target state="translated">De même, l’opérateur <ph id="ph1">`(int)`</ph> C# ne prend pas en charge la conversion de valeurs booléennes en valeurs entières, mais la méthode <ph id="ph2">`CInt`</ph> Visual Basic convertit une valeur <ph id="ph3">`true`</ph> en <bpt id="p1">**</bpt>-1<ept id="p1">**</ept>.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>On the other hand, the <bpt id="p1">[</bpt>Convert.ToInt32(Boolean)<ept id="p1">](xref:System.Convert.ToInt32(System.Boolean))</ept> method converts a value of <ph id="ph1">`true`</ph> to <bpt id="p2">**</bpt>1<ept id="p2">**</ept>.</source>
          <target state="translated">Quant à elle, la méthode <bpt id="p1">[</bpt>Convert.ToInt32(Boolean)<ept id="p1">](xref:System.Convert.ToInt32(System.Boolean))</ept> convertit une valeur <ph id="ph1">`true`</ph> en <bpt id="p2">**</bpt>1<ept id="p2">**</ept>.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Most compilers allow explicit conversions to be performed in a checked or unchecked manner.</source>
          <target state="translated">La plupart des compilateurs autorisent les conversions explicites contrôlées ou non contrôlées.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>When a checked conversion is performed, an <bpt id="p1">[</bpt>OverflowException<ept id="p1">](xref:System.OverflowException)</ept> is thrown when the value of the type to be converted is outside the range of the target type.</source>
          <target state="translated">Quand une conversion contrôlée est effectuée, un <bpt id="p1">[</bpt>OverflowException<ept id="p1">](xref:System.OverflowException)</ept> est levé lorsque la valeur du type à convertir se situe en dehors de la plage du type cible.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>When an unchecked conversion is performed under the same conditions, the conversion might not throw an exception, but the exact behavior becomes undefined and an incorrect value might result.</source>
          <target state="translated">Lorsqu'une conversion non contrôlée est effectuée dans les mêmes circonstances, la conversion n'entraîne pas nécessairement la levée d'une exception, mais le comportement exact devient indéfini et la valeur obtenue peut être incorrecte.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>In C#, checked conversions can be performed by using the <ph id="ph1">`checked`</ph> keyword together with a casting operator, or by specifying the <ph id="ph2">`/checked+`</ph> compiler option.</source>
          <target state="translated">En C#, vous pouvez effectuer des conversions contrôlées à l'aide du mot clé <ph id="ph1">`checked`</ph> et d'un opérateur de cast, ou en spécifiant l'option de compilateur <ph id="ph2">`/checked+`</ph>.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Conversely, unchecked conversions can be performed by using the <ph id="ph1">`unchecked`</ph> keyword together with the casting operator, or by specifying the <ph id="ph2">`/checked-`</ph> compiler option.</source>
          <target state="translated">Vous pouvez également effectuer des conversions non contrôlées à l'aide du mot clé <ph id="ph1">`unchecked`</ph> et de l'opérateur de cast ou en spécifiant l'option de compilateur <ph id="ph2">`/checked-`</ph>.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>By default, explicit conversions are unchecked.</source>
          <target state="translated">Par défaut, les conversions explicites ne sont pas contrôlées.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>In Visual Basic, checked conversions can be performed by specifying the <ph id="ph1">`/removeintchecks-`</ph> compiler option.</source>
          <target state="translated">Dans Visual Basic, les conversions contrôlées peuvent être effectuées en spécifiant l’option du compilateur <ph id="ph1">`/removeintchecks-`</ph>.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Conversely, unchecked conversions can be performed by specifying the <ph id="ph1">`/removeintchecks+`</ph> compiler option.</source>
          <target state="translated">À l’inverse, les conversions non contrôlées peuvent être effectuées en spécifiant l’option du compilateur <ph id="ph1">`/removeintchecks+`</ph>.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>By default, explicit conversions are checked.</source>
          <target state="translated">Par défaut, les conversions explicites sont contrôlées.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The following C# example uses the <ph id="ph1">`checked`</ph> and <ph id="ph2">`unchecked`</ph> keywords to illustrate the difference in behavior when a value outside the range of a <bpt id="p1">[</bpt>Byte<ept id="p1">](xref:System.Byte)</ept> is converted to a <ph id="ph3">`Byte`</ph>.</source>
          <target state="translated">L'exemple C# suivant utilise les mots clés <ph id="ph1">`checked`</ph> et <ph id="ph2">`unchecked`</ph> pour illustrer la différence de comportement lorsqu’une valeur en dehors de la plage d’une valeur <bpt id="p1">[</bpt>Byte<ept id="p1">](xref:System.Byte)</ept> est convertie en <ph id="ph3">`Byte`</ph>.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The checked conversion throws an exception, but the unchecked conversion assigns <bpt id="p1">[</bpt>Byte.MaxValue<ept id="p1">](xref:System.Byte.MaxValue)</ept> to the <ph id="ph1">`Byte`</ph> variable.</source>
          <target state="translated">La conversion contrôlée lève une exception, mais la conversion non contrôlée assigne <bpt id="p1">[</bpt>Byte.MaxValue<ept id="p1">](xref:System.Byte.MaxValue)</ept> à la variable <ph id="ph1">`Byte`</ph>.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>If a particular language compiler supports custom overloaded operators, you can also define explicit conversions in your own custom types.</source>
          <target state="translated">Si un compilateur de langage particulier prend en charge des opérateurs surchargés personnalisés, vous pouvez également définir des conversions explicites dans vos propres types personnalisés.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The following example provides a partial implementation of a signed byte data type named <ph id="ph1">`ByteWithSign`</ph> that uses sign-and-magnitude representation.</source>
          <target state="translated">L'exemple suivant fournit une implémentation partielle d'un type de données d'octets signés nommé <ph id="ph1">`ByteWithSign`</ph> qui utilise la représentation « signe et magnitude ».</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>It supports explicit conversion of <bpt id="p1">[</bpt>Int32<ept id="p1">](xref:System.Int32)</ept> and <bpt id="p2">[</bpt>UInt32<ept id="p2">](xref:System.UInt32)</ept> values to <ph id="ph1">`ByteWithSign`</ph> values.</source>
          <target state="translated">Il prend en charge la conversion explicite de valeurs <bpt id="p1">[</bpt>Int32<ept id="p1">](xref:System.Int32)</ept> et <bpt id="p2">[</bpt>UInt32<ept id="p2">](xref:System.UInt32)</ept> en valeurs <ph id="ph1">`ByteWithSign`</ph>.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Client code can then declare a <ph id="ph1">`ByteWithSign`</ph> variable and assign it <bpt id="p1">[</bpt>Int32<ept id="p1">](xref:System.Int32)</ept> and <bpt id="p2">[</bpt>UInt32<ept id="p2">](xref:System.UInt32)</ept> values if the assignments include a casting operator, as the following example shows.</source>
          <target state="translated">Le code client peut ensuite déclarer une variable <ph id="ph1">`ByteWithSign`</ph> et lui assigner des valeurs <bpt id="p1">[</bpt>Int32<ept id="p1">](xref:System.Int32)</ept> et <bpt id="p2">[</bpt>UInt32<ept id="p2">](xref:System.UInt32)</ept> si les assignations incluent un opérateur de cast, comme indiqué dans l’exemple suivant.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The IConvertible interface</source>
          <target state="translated">Interface IConvertible</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>To support the conversion of any type to a common language runtime base type, .NET provides the <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept> interface.</source>
          <target state="translated">Pour prendre en charge la conversion d’un type vers un type de base du Common Language Runtime (CLR), .NET fournit l’interface <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept>.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The implementing type is required to provide the following:</source>
          <target state="translated">Le type d'implémentation est requis pour fournir les éléments suivants :</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>A method that returns the <bpt id="p1">[</bpt>TypeCode<ept id="p1">](xref:System.TypeCode)</ept> of the implementing type.</source>
          <target state="translated">une méthode qui retourne le <bpt id="p1">[</bpt>TypeCode<ept id="p1">](xref:System.TypeCode)</ept> du type d’implémentation ;</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Methods to convert the implementing type to each common language runtime base type (<bpt id="p1">[</bpt>Boolean<ept id="p1">](xref:System.Boolean)</ept>, <bpt id="p2">[</bpt>Byte<ept id="p2">](xref:System.Byte)</ept>, <bpt id="p3">[</bpt>DateTime<ept id="p3">](xref:System.DateTime)</ept>, <bpt id="p4">[</bpt>Decimal<ept id="p4">](xref:System.Decimal)</ept>, <bpt id="p5">[</bpt>Double<ept id="p5">](xref:System.Double)</ept>, and so on).</source>
          <target state="translated">des méthodes pour convertir le type d’implémentation dans chaque type de base du Common Language Runtime (<bpt id="p1">[</bpt>Boolean<ept id="p1">](xref:System.Boolean)</ept>, <bpt id="p2">[</bpt>Byte<ept id="p2">](xref:System.Byte)</ept>, <bpt id="p3">[</bpt>DateTime<ept id="p3">](xref:System.DateTime)</ept>, <bpt id="p4">[</bpt>Decimal<ept id="p4">](xref:System.Decimal)</ept>, <bpt id="p5">[</bpt>Double<ept id="p5">](xref:System.Double)</ept>, et ainsi de suite) ;</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>A generalized conversion method to convert an instance of the implementing type to another specified type.</source>
          <target state="translated">une méthode de conversion généralisée pour convertir une instance du type d'implémentation dans un autre type spécifié.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Conversions that are not supported should throw an <bpt id="p1">[</bpt>InvalidCastException<ept id="p1">](xref:System.InvalidCastException)</ept>.</source>
          <target state="translated">Les conversions qui ne sont pas prises en charge doivent lever un <bpt id="p1">[</bpt>InvalidCastException<ept id="p1">](xref:System.InvalidCastException)</ept>.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Each common language runtime base type (that is, the <bpt id="p1">[</bpt>Boolean<ept id="p1">](xref:System.Boolean)</ept>, <bpt id="p2">[</bpt>Byte<ept id="p2">](xref:System.Byte)</ept>, <bpt id="p3">[</bpt>Char<ept id="p3">](xref:System.Char)</ept>, <bpt id="p4">[</bpt>DateTime<ept id="p4">](xref:System.DateTime)</ept>, <bpt id="p5">[</bpt>Decimal<ept id="p5">](xref:System.Decimal)</ept>, <bpt id="p6">[</bpt>Double<ept id="p6">](xref:System.Double)</ept>, <bpt id="p7">[</bpt>Int16<ept id="p7">](xref:System.Int16)</ept>, <bpt id="p8">[</bpt>Int32<ept id="p8">](xref:System.Int32)</ept>, <bpt id="p9">[</bpt>Int64<ept id="p9">](xref:System.Int64)</ept>, <bpt id="p10">[</bpt>SByte<ept id="p10">](xref:System.SByte)</ept>, <bpt id="p11">[</bpt>Single<ept id="p11">](xref:System.Single)</ept>, <bpt id="p12">[</bpt>String<ept id="p12">](xref:System.String)</ept>, <bpt id="p13">[</bpt>UInt16<ept id="p13">](xref:System.UInt16)</ept>, <bpt id="p14">[</bpt>UInt32<ept id="p14">](xref:System.UInt32)</ept>, and <bpt id="p15">[</bpt>UInt64<ept id="p15">](xref:System.UInt64)</ept>, as well as the <bpt id="p16">[</bpt>DBNull<ept id="p16">](xref:System.DBNull)</ept> and <bpt id="p17">[</bpt>Enum<ept id="p17">](xref:System.Enum)</ept> types, implement the <bpt id="p18">[</bpt>IConvertible<ept id="p18">](xref:System.IConvertible)</ept> interface.</source>
          <target state="translated">Chaque type de base du Common Language Runtime (autrement dit, les types <bpt id="p1">[</bpt>Boolean<ept id="p1">](xref:System.Boolean)</ept>, <bpt id="p2">[</bpt>Byte<ept id="p2">](xref:System.Byte)</ept>, <bpt id="p3">[</bpt>Char<ept id="p3">](xref:System.Char)</ept>, <bpt id="p4">[</bpt>DateTime<ept id="p4">](xref:System.DateTime)</ept>, <bpt id="p5">[</bpt>Decimal<ept id="p5">](xref:System.Decimal)</ept>, <bpt id="p6">[</bpt>Double<ept id="p6">](xref:System.Double)</ept>, <bpt id="p7">[</bpt>Int16<ept id="p7">](xref:System.Int16)</ept>, <bpt id="p8">[</bpt>Int32<ept id="p8">](xref:System.Int32)</ept>, <bpt id="p9">[</bpt>Int64<ept id="p9">](xref:System.Int64)</ept>, <bpt id="p10">[</bpt>SByte<ept id="p10">](xref:System.SByte)</ept>, <bpt id="p11">[</bpt>Single<ept id="p11">](xref:System.Single)</ept>, <bpt id="p12">[</bpt>String<ept id="p12">](xref:System.String)</ept>, <bpt id="p13">[</bpt>UInt16<ept id="p13">](xref:System.UInt16)</ept>, <bpt id="p14">[</bpt>UInt32<ept id="p14">](xref:System.UInt32)</ept> et <bpt id="p15">[</bpt>UInt64<ept id="p15">](xref:System.UInt64)</ept>, ainsi que les types <bpt id="p16">[</bpt>DBNull<ept id="p16">](xref:System.DBNull)</ept> et <bpt id="p17">[</bpt>Enum<ept id="p17">](xref:System.Enum)</ept>, implémentent l’interface <bpt id="p18">[</bpt>IConvertible<ept id="p18">](xref:System.IConvertible)</ept>.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>However, these are explicit interface implementations; the conversion method can be called only through an <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept> interface variable, as the following example shows.</source>
          <target state="translated">Il s’agit toutefois d’implémentations d’interface explicites. La méthode de conversion ne peut être appelée que via une variable d’interface <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept>, comme le montre l’exemple suivant.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>This example converts an <bpt id="p1">[</bpt>Int32<ept id="p1">](xref:System.Int32)</ept> value to its equivalent <bpt id="p2">[</bpt>Char<ept id="p2">](xref:System.Char)</ept> value.</source>
          <target state="translated">Cet exemple convertit une valeur <bpt id="p1">[</bpt>Int32<ept id="p1">](xref:System.Int32)</ept> en sa valeur <bpt id="p2">[</bpt>Char<ept id="p2">](xref:System.Char)</ept> équivalente.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The requirement to call the conversion method on its interface rather than on the implementing type makes explicit interface implementations relatively expensive.</source>
          <target state="translated">L’exigence visant à appeler la méthode de conversion sur son interface plutôt que sur le type d’implémentation rend les implémentations d’interface explicites relativement coûteuse.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Instead, we recommend that you call the appropriate member of the <bpt id="p1">[</bpt>Convert<ept id="p1">](xref:System.Convert)</ept> class to convert between common language runtime base types.</source>
          <target state="translated">En lieu et place, nous vous recommandons d’appeler le membre approprié de la classe <bpt id="p1">[</bpt>Convert<ept id="p1">](xref:System.Convert)</ept> pour effectuer des conversions entre des types de base du Common Language Runtime.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>For more information, see the next section, <bpt id="p1">[</bpt>The Convert class<ept id="p1">](#the-convert-class)</ept>.</source>
          <target state="translated">Pour plus d’informations, consultez la section suivante, <bpt id="p1">[</bpt>Classe Convert<ept id="p1">](#the-convert-class)</ept>.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>In addition to the <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept> interface and the <bpt id="p2">[</bpt>Convert<ept id="p2">](xref:System.Convert)</ept> class provided by .NET, individual languages may also provide ways to perform conversions.</source>
          <target state="translated">Outre l’interface <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept> et la classe <bpt id="p2">[</bpt>Convert<ept id="p2">](xref:System.Convert)</ept> fournie par .NET, chaque langage peut également offrir des moyens d’effectuer des conversions.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>For example, C# uses casting operators; Visual Basic uses compiler-implemented conversion functions such as <ph id="ph1">`CType`</ph>, <ph id="ph2">`CInt`</ph>, and <ph id="ph3">`DirectCast`</ph>.</source>
          <target state="translated">Par exemple, C# utilise des opérateurs de casting et Visual Basic fait appel à des fonctions de conversion implémentées par compilateur, telles que <ph id="ph1">`CType`</ph>, <ph id="ph2">`CInt`</ph> et <ph id="ph3">`DirectCast`</ph>.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>For the most part, the <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept> interface is designed to support conversion between the base types in .NET.</source>
          <target state="translated">Pour l’essentiel, l’interface <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept> est conçue pour prendre en charge la conversion entre les types de base dans .NET.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>However, the interface can also be implemented by a custom type to support conversion of that type to other custom types.</source>
          <target state="translated">Toutefois, l'interface peut également être implémentée par un type personnalisé pour prendre en charge la conversion de ce type vers d'autres types personnalisés.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>For more information, see the section <bpt id="p1">[</bpt>Custom conversions with the ChangeType method<ept id="p1">](#custom-conversions-with-the-changetype-method)</ept> later in this topic.</source>
          <target state="translated">Pour plus d’informations, consultez la section <bpt id="p1">[</bpt>Conversions personnalisées avec la méthode ChangeType<ept id="p1">](#custom-conversions-with-the-changetype-method)</ept>, plus loin dans cette rubrique.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The Convert class</source>
          <target state="translated">Classe Convert</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Although each base type's <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept> interface implementation can be called to perform a type conversion, calling the methods of the <bpt id="p2">[</bpt>System.Convert<ept id="p2">](xref:System.Convert)</ept> class is the recommended language-neutral way to convert from one base type to another.</source>
          <target state="translated">L’implémentation de l’interface <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept> de chaque type de base peut être appelée pour effectuer une conversion de type. Toutefois, l’appel des méthodes de la classe <bpt id="p2">[</bpt>System.Convert<ept id="p2">](xref:System.Convert)</ept> est recommandé pour effectuer une conversion d’un type de base vers un autre, car il est indépendant du langage.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>In addition, the <bpt id="p1">[</bpt>Convert.ChangeType(Object, Type, IFormatProvider)<ept id="p1">](xref:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider))</ept> method can be used to convert from a specified custom type to another type.</source>
          <target state="translated">En outre, la méthode <bpt id="p1">[</bpt>Convert.ChangeType(Object, Type, IFormatProvider)<ept id="p1">](xref:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider))</ept> peut être utilisée pour convertir un type personnalisé spécifié en un autre type.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Conversions between base types</source>
          <target state="translated">Conversions entre types de base</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Convert<ept id="p1">](xref:System.Convert)</ept> class provides a language-neutral way to perform conversions between base types and is available to all languages that target the common language runtime.</source>
          <target state="translated">La classe <bpt id="p1">[</bpt>Convert<ept id="p1">](xref:System.Convert)</ept> constitue une façon indépendante du langage d’effectuer des conversions entre des types de base, et est disponible pour tous les langages qui ciblent le Common Language Runtime (CLR).</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>It provides a complete set of methods for both widening and narrowing conversions, and throws an <bpt id="p1">[</bpt>InvalidCastException<ept id="p1">](xref:System.InvalidCastException)</ept> for conversions that are not supported (such as the conversion of a <bpt id="p2">[</bpt>DateTime<ept id="p2">](xref:System.DateTime)</ept> value to an integer value).</source>
          <target state="translated">Elle fournit un ensemble complet de méthodes pour les conversions étendues et restrictives, et lève un <bpt id="p1">[</bpt>InvalidCastException<ept id="p1">](xref:System.InvalidCastException)</ept> pour les conversions qui ne sont pas prises en charge (telles que la conversion d’une valeur <bpt id="p2">[</bpt>DateTime<ept id="p2">](xref:System.DateTime)</ept> en valeur entière).</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Narrowing conversions are performed in a checked context, and an <bpt id="p1">[</bpt>OverflowException<ept id="p1">](xref:System.OverflowException)</ept> is thrown if the conversion fails.</source>
          <target state="translated">Les conversions restrictives sont effectuées dans un contexte vérifié (checked), et un <bpt id="p1">[</bpt>OverflowException<ept id="p1">](xref:System.OverflowException)</ept> est levé en cas d’échec de la conversion.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Because the <bpt id="p1">[</bpt>Convert<ept id="p1">](xref:System.Convert)</ept> class includes methods to convert to and from each base type, it eliminates the need to call each base type's <bpt id="p2">[</bpt>IConvertible<ept id="p2">](xref:System.IConvertible)</ept> explicit interface implementation.</source>
          <target state="translated">Étant donné que la classe <bpt id="p1">[</bpt>Convert<ept id="p1">](xref:System.Convert)</ept> inclut des méthodes permettant d’effectuer des conversions pour chaque type de base, elle évite de devoir appeler l’implémentation d’interface explicite <bpt id="p2">[</bpt>IConvertible<ept id="p2">](xref:System.IConvertible)</ept> de chaque type de base.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The following example illustrates the use of the <bpt id="p1">[</bpt>System.Convert<ept id="p1">](xref:System.Convert)</ept> class to perform several widening and narrowing conversions between .NET base types.</source>
          <target state="translated">L’exemple suivant illustre l’utilisation de la classe <bpt id="p1">[</bpt>System.Convert<ept id="p1">](xref:System.Convert)</ept> pour effectuer plusieurs conversions étendues et restrictives entre des types de base .NET.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>In some cases, particularly when converting to and from floating-point values, a conversion may involve a loss of precision, even though it does not throw an <bpt id="p1">[</bpt>OverflowException<ept id="p1">](xref:System.OverflowException)</ept>.</source>
          <target state="translated">Dans certains cas, particulièrement lors de la conversion entre des valeurs à virgule flottante, une conversion peut impliquer une perte de précision, bien qu’elle ne lève pas d’<bpt id="p1">[</bpt>OverflowException<ept id="p1">](xref:System.OverflowException)</ept>.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The following example illustrates this loss of precision.</source>
          <target state="translated">L'exemple suivant illustre cette perte de précision.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>In the first case, a <bpt id="p1">[</bpt>Decimal<ept id="p1">](xref:System.Decimal)</ept> value has less precision (fewer significant digits) when it is converted to a <bpt id="p2">[</bpt>Double<ept id="p2">](xref:System.Double)</ept>.</source>
          <target state="translated">Dans le premier cas, une valeur <bpt id="p1">[</bpt>Decimal<ept id="p1">](xref:System.Decimal)</ept> a moins de précision (moins de chiffres significatifs) lorsqu’elle est convertie en valeur <bpt id="p2">[</bpt>Double<ept id="p2">](xref:System.Double)</ept>.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>In the second case, a <bpt id="p1">[</bpt>Double<ept id="p1">](xref:System.Double)</ept> value is rounded from <bpt id="p2">**</bpt>42.72<ept id="p2">**</ept> to <bpt id="p3">**</bpt>43<ept id="p3">**</ept> in order to complete the conversion.</source>
          <target state="translated">Dans le second cas, une valeur <bpt id="p1">[</bpt>Double<ept id="p1">](xref:System.Double)</ept> est arrondie de <bpt id="p2">**</bpt>42,72<ept id="p2">**</ept> à <bpt id="p3">**</bpt>43<ept id="p3">**</ept> afin de terminer la conversion.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>For a table that lists both the widening and narrowing conversions supported by the <bpt id="p1">[</bpt>Convert<ept id="p1">](xref:System.Convert)</ept> class, see <bpt id="p2">[</bpt>Type conversion tables<ept id="p2">](conversion-tables.md)</ept>.</source>
          <target state="translated">Pour obtenir un tableau qui répertorie les conversions étendues et restrictives prises en charge par la classe <bpt id="p1">[</bpt>Convert<ept id="p1">](xref:System.Convert)</ept>, consultez <bpt id="p2">[</bpt>Tableaux de conversion de types<ept id="p2">](conversion-tables.md)</ept>.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Custom conversions with the ChangeType method</source>
          <target state="translated">Conversions personnalisées avec la méthode ChangeType</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>In addition to supporting conversions to each of the base types, the <bpt id="p1">[</bpt>Convert<ept id="p1">](xref:System.Convert)</ept> class can be used to convert a custom type to one or more predefined types.</source>
          <target state="translated">Outre la prise en charge des conversions vers chacun des types de base, la classe <bpt id="p1">[</bpt>Convert<ept id="p1">](xref:System.Convert)</ept> peut être utilisée pour convertir un type personnalisé vers un ou plusieurs types prédéfinis.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>This conversion is performed by the <bpt id="p1">[</bpt>Convert.ChangeType(Object, Type, IFormatProvider)<ept id="p1">](xref:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider))</ept> method, which in turn wraps a call to the <bpt id="p2">[</bpt>IConvertible.ToType<ept id="p2">](xref:System.IConvertible.ToType(System.Type,System.IFormatProvider))</ept> method of the value parameter.</source>
          <target state="translated">Cette conversion est effectuée par la méthode <bpt id="p1">[</bpt>Convert.ChangeType(Object, Type, IFormatProvider)<ept id="p1">](xref:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider))</ept>, qui à son tour encapsule un appel à la méthode <bpt id="p2">[</bpt>IConvertible.ToType<ept id="p2">](xref:System.IConvertible.ToType(System.Type,System.IFormatProvider))</ept> du paramètre value.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>This means that the object represented by the value parameter must provide an implementation of the <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept> interface.</source>
          <target state="translated">Ainsi, l'objet représenté par le paramètre value doit fournir une implémentation de l’interface <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept>.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Because the <bpt id="p1">[</bpt>Convert.ChangeType(Object, Type)<ept id="p1">](xref:System.Convert.ChangeType(System.Object,System.Type))</ept> and <bpt id="p2">[</bpt>Convert.ChangeType(Object, Type, IFormatProvider)<ept id="p2">](xref:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider))</ept> methods use a <bpt id="p3">[</bpt>Type<ept id="p3">](xref:System.Type)</ept> object to specify the target type to which value is converted, they can be used to perform a dynamic conversion to an object whose type is not known at compile time.</source>
          <target state="translated">Étant donné que les méthodes <bpt id="p1">[</bpt>Convert.ChangeType(Object, Type)<ept id="p1">](xref:System.Convert.ChangeType(System.Object,System.Type))</ept> et <bpt id="p2">[</bpt>Convert.ChangeType(Object, Type, IFormatProvider)<ept id="p2">](xref:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider))</ept> utilisent un objet <bpt id="p3">[</bpt>Type<ept id="p3">](xref:System.Type)</ept> pour spécifier le type cible dans lequel la valeur est convertie, elles peuvent servir à effectuer une conversion dynamique en objet dont le type n’est pas connu au moment de la compilation.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>However, note that the <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept> implementation of value must still support this conversion.</source>
          <target state="translated">Toutefois, notez que l’implémentation <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept> de la valeur doit toujours prendre en charge cette conversion.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The following example illustrates a possible implementation of the <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept> interface that allows a <ph id="ph1">`TemperatureCelsius`</ph> object to be converted to a <ph id="ph2">`TemperatureFahrenheit`</ph> object and vice versa.</source>
          <target state="translated">L’exemple suivant illustre une implémentation possible de l’interface <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept> qui permet de convertir un objet <ph id="ph1">`TemperatureCelsius`</ph> en objet <ph id="ph2">`TemperatureFahrenheit`</ph>, et inversement.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The example defines a base class, <ph id="ph1">`Temperature`</ph>, that implements the <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept> interface and overrides the <bpt id="p2">[</bpt>Object.ToString<ept id="p2">](xref:System.Object.ToString)</ept> method.</source>
          <target state="translated">L’exemple définit une classe de base, <ph id="ph1">`Temperature`</ph>, qui implémente l’interface <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept> et remplace la méthode <bpt id="p2">[</bpt>Object.ToString<ept id="p2">](xref:System.Object.ToString)</ept>.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The derived <ph id="ph1">`TemperatureCelsius`</ph> and <ph id="ph2">`TemperatureFahrenheit`</ph> classes each override the <ph id="ph3">`ToType`</ph> and the <ph id="ph4">`ToString`</ph> methods of the base class.</source>
          <target state="translated">Les classes dérivées <ph id="ph1">`TemperatureCelsius`</ph> et <ph id="ph2">`TemperatureFahrenheit`</ph> substituent chacune les méthodes <ph id="ph3">`ToType`</ph> et <ph id="ph4">`ToString`</ph> de la classe de base.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The following example illustrates several calls to these <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept> implementations to convert <ph id="ph1">`TemperatureCelsius`</ph> objects to <ph id="ph2">`TemperatureFahrenheit`</ph> objects and vice versa.</source>
          <target state="translated">L’exemple suivant illustre plusieurs appels à ces implémentations <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept> pour convertir des objets <ph id="ph1">`TemperatureCelsius`</ph> en objets <ph id="ph2">`TemperatureFahrenheit`</ph>, et inversement.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The TypeConverter class</source>
          <target state="translated">Classe TypeConverter</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>.NET also allows you to define a type converter for a custom type by extending the <bpt id="p1">[</bpt>System.ComponentModel.TypeConverter<ept id="p1">](xref:System.ComponentModel.TypeConverter)</ept> class and associating the type converter with the type through a <bpt id="p2">[</bpt>System.ComponentModel.TypeConverterAttribute<ept id="p2">](xref:System.ComponentModel.TypeConverterAttribute)</ept> attribute.</source>
          <target state="translated">.NET vous permet également de définir un convertisseur de type pour un type personnalisé en étendant la classe <bpt id="p1">[</bpt>System.ComponentModel.TypeConverter<ept id="p1">](xref:System.ComponentModel.TypeConverter)</ept> et en associant le convertisseur de type au type par le biais d’un attribut <bpt id="p2">[</bpt>System.ComponentModel.TypeConverterAttribute<ept id="p2">](xref:System.ComponentModel.TypeConverterAttribute)</ept>.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The following table highlights the differences between this approach and implementing the <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept> interface for a custom type.</source>
          <target state="translated">Le tableau suivant met en évidence les différences entre cette approche et l’implémentation de l’interface <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept> pour un type personnalisé.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Design-time support can be provided for a custom type only if it has a type converter defined for it.</source>
          <target state="translated">La prise en charge au moment du design ne peut être fournie pour un type personnalisé que si un convertisseur de type est défini pour ce dernier.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Conversion using TypeConverter</source>
          <target state="translated">Conversion à l'aide de TypeConverter</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Conversion using IConvertible</source>
          <target state="translated">Conversion à l'aide de IConvertible</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Is implemented for a custom type by deriving a separate class from <bpt id="p1">[</bpt>TypeConverter<ept id="p1">](xref:System.ComponentModel.TypeConverter)</ept>.</source>
          <target state="translated">Est implémentée pour un type personnalisé en dérivant une classe distincte de <bpt id="p1">[</bpt>TypeConverter<ept id="p1">](xref:System.ComponentModel.TypeConverter)</ept>.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>This derived class is associated with the custom type by applying a <bpt id="p1">[</bpt>TypeConverterAttribute<ept id="p1">](xref:System.ComponentModel.TypeConverterAttribute)</ept> attribute.</source>
          <target state="translated">Cette classe dérivée est associée au type personnalisé en appliquant un attribut <bpt id="p1">[</bpt>TypeConverterAttribute<ept id="p1">](xref:System.ComponentModel.TypeConverterAttribute)</ept>.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Is implemented by a custom type to perform conversion.</source>
          <target state="translated">Est implémentée par un type personnalisé pour effectuer la conversion.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>A user of the type invokes an <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept> conversion method on the type.</source>
          <target state="translated">Un utilisateur du type appelle une méthode de conversion <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept> sur le type.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Can be used both at design time and at run time.</source>
          <target state="translated">Peut être utilisée à la fois au moment du design et au moment de l'exécution.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Can be used only at run time.</source>
          <target state="translated">Ne peut être utilisée qu'au moment de l'exécution.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Uses reflection; therefore, is slower than conversion enabled by <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept>.</source>
          <target state="translated">Utilise la réflexion, et est donc plus lente que la conversion à l’aide d’<bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept>.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Does not use reflection.</source>
          <target state="translated">N'utilise pas la réflexion.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Allows two-way type conversions from the custom type to other data types, and from other data types to the custom type.</source>
          <target state="translated">Permet les conversions de type bilatérales du type personnalisé en d'autres types de données, et d'autres types de données en type personnalisé.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>For example, a <bpt id="p1">[</bpt>TypeConverter<ept id="p1">](xref:System.ComponentModel.TypeConverter)</ept> defined for <ph id="ph1">`MyType`</ph> allows conversions from <ph id="ph2">`MyType`</ph> to <bpt id="p2">[</bpt>String<ept id="p2">](xref:System.String)</ept>, and from <bpt id="p3">[</bpt>String<ept id="p3">](xref:System.String)</ept> to <ph id="ph3">`MyType`</ph>.</source>
          <target state="translated">Par exemple, un <bpt id="p1">[</bpt>TypeConverter<ept id="p1">](xref:System.ComponentModel.TypeConverter)</ept> défini pour <ph id="ph1">`MyType`</ph> permet les conversions de <ph id="ph2">`MyType`</ph> en <bpt id="p2">[</bpt>String<ept id="p2">](xref:System.String)</ept> et de <bpt id="p3">[</bpt>String<ept id="p3">](xref:System.String)</ept> en <ph id="ph3">`MyType`</ph>.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Allows conversion from a custom type to other data types, but not from other data types to the custom type.</source>
          <target state="translated">Permet la conversion d'un type personnalisé en d'autres types de données, mais pas d'autres types de données en type personnalisé.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>For more information about using type converters to perform conversions, see <bpt id="p1">[</bpt>System.ComponentModel.TypeConverter<ept id="p1">](xref:System.ComponentModel.TypeConverter)</ept>.</source>
          <target state="translated">Pour plus d’informations sur l’utilisation de convertisseurs de type pour effectuer des conversions, consultez <bpt id="p1">[</bpt>System.ComponentModel.TypeConverter<ept id="p1">](xref:System.ComponentModel.TypeConverter)</ept>.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>See also</source>
          <target state="translated">Voir aussi</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.Convert<ept id="p1">](xref:System.Convert)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>System.Convert<ept id="p1">](xref:System.Convert)</ept></target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept></target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Type conversion tables<ept id="p1">](conversion-tables.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Tables de conversion de type<ept id="p1">](conversion-tables.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>