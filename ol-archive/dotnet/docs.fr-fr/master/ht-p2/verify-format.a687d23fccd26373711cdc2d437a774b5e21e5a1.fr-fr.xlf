<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-eac019f" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d04c77b2d7597371651f15ca4a7e203c9cbb8ccb</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\base-types\verify-format.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p2</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cd3676f3accb66f84abe354fb6a722a64e34e371</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9542d9df9c6b529814ef673d9390dd0f2ecb95e4</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: verify that strings are in valid email format</source>
          <target state="translated">Guide pratique : vérifier que des chaînes sont dans un format d’adresse e-mail valide</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to verify that strings are in valid email format</source>
          <target state="translated">Guide pratique pour vérifier que des chaînes sont dans un format d’adresse e-mail valide</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>How to: verify that strings are in valid email format</source>
          <target state="translated">Guide pratique : vérifier que des chaînes sont dans un format d’adresse e-mail valide</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The following example uses a regular expression to verify that a string is in valid email format.</source>
          <target state="translated">L'exemple suivant utilise une expression régulière pour vérifier qu'une chaîne est dans un format d'adresse e-mail valide.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Exemple</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The example defines an <ph id="ph1">`IsValidEmail`</ph> method, which returns <ph id="ph2">`true`</ph> if the string contains a valid email address and <ph id="ph3">`false`</ph> if it does not, but takes no other action.</source>
          <target state="translated">L'exemple définit une méthode <ph id="ph1">`IsValidEmail`</ph> qui retourne la valeur <ph id="ph2">`true`</ph> si la chaîne contient une adresse e-mail valide et la valeur <ph id="ph3">`false`</ph> dans le cas contraire, mais qui n'effectue aucune autre action.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>To verify that the email address is valid, the <ph id="ph1">`IsValidEmail`</ph> method calls the <bpt id="p1">[</bpt>Regex.Replace(String, String, MatchEvaluator)<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator))</ept> method with the <ph id="ph2">`(@)(.+)$`</ph> regular expression pattern to separate the domain name from the email address.</source>
          <target state="translated">Pour vérifier que l’adresse e-mail est valide, la méthode <ph id="ph1">`IsValidEmail`</ph> appelle la méthode <bpt id="p1">[</bpt>Regex.Replace(String, String, MatchEvaluator)<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator))</ept> avec le modèle d’expression régulière <ph id="ph2">`(@)(.+)$`</ph> pour séparer le nom de domaine de l’adresse e-mail.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The third parameter is a <bpt id="p1">[</bpt>MatchEvaluator<ept id="p1">](xref:System.Text.RegularExpressions.MatchEvaluator)</ept> delegate that represents the method that processes and replaces the matched text.</source>
          <target state="translated">Le troisième paramètre est un délégué <bpt id="p1">[</bpt>MatchEvaluator<ept id="p1">](xref:System.Text.RegularExpressions.MatchEvaluator)</ept> qui représente la méthode qui traite et remplace le texte correspondant.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The regular expression pattern is interpreted as follows.</source>
          <target state="translated">Le modèle d’expression régulière est interprété comme suit.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">Modèle</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Description</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Match the <ph id="ph1">@</ph> character.</source>
          <target state="translated">Correspond à l’arobase (<ph id="ph1">@</ph>).</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This is the first capturing group.</source>
          <target state="translated">Il s'agit du premier groupe de capture.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Match one or more occurrences of any character.</source>
          <target state="translated">Correspond à une ou plusieurs occurrences d'un caractère quelconque.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This is the second capturing group.</source>
          <target state="translated">Il s'agit du deuxième groupe de capture.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>End the match at the end of the string.</source>
          <target state="translated">Termine la correspondance à la fin de la chaîne.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The domain name along with the <ph id="ph1">@</ph> character is passed to the <ph id="ph2">`DomainMapper`</ph> method, which uses the <bpt id="p1">[</bpt>IdnMapping<ept id="p1">](xref:System.Globalization.IdnMapping)</ept> class to translate Unicode characters that are outside the US-ASCII character range to Punycode.</source>
          <target state="translated">Le nom de domaine avec le caractère <ph id="ph1">@</ph> est passé à la méthode <ph id="ph2">`DomainMapper`</ph>, qui utilise la classe <bpt id="p1">[</bpt>IdnMapping<ept id="p1">](xref:System.Globalization.IdnMapping)</ept> pour convertir les caractères Unicode situés en dehors de la plage de caractères US-ASCII au format Punycode.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The method also sets the <ph id="ph1">`invalid`</ph> flag to <ph id="ph2">`true`</ph> if the <bpt id="p1">[</bpt>IdnMapping.GetAscii<ept id="p1">](xref:System.Globalization.IdnMapping.GetAscii(System.String))</ept> method detects any invalid characters in the domain name.</source>
          <target state="translated">La méthode affecte également à l’indicateur <ph id="ph1">`invalid`</ph> la valeur <ph id="ph2">`true`</ph> si la méthode <bpt id="p1">[</bpt>IdnMapping.GetAscii<ept id="p1">](xref:System.Globalization.IdnMapping.GetAscii(System.String))</ept> détecte des caractères non valides dans le nom de domaine.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The method returns the Punycode domain name preceded by the <ph id="ph1">@</ph> symbol to the <ph id="ph2">`IsValidEmail`</ph> method.</source>
          <target state="translated">La méthode retourne le nom de domaine Punycode précédé du symbole <ph id="ph1">@</ph> à la méthode <ph id="ph2">`IsValidEmail`</ph>.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`IsValidEmail`</ph> method then calls the <bpt id="p1">[</bpt>Regex.IsMatch(String, String)<ept id="p1">](xref:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String))</ept> method to verify that the address conforms to a regular expression pattern.</source>
          <target state="translated">La méthode <ph id="ph1">`IsValidEmail`</ph> appelle alors la méthode <bpt id="p1">[</bpt>Regex.IsMatch(String, String)<ept id="p1">](xref:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String))</ept> pour vérifier que l’adresse est conforme à un modèle d’expression régulière.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Note that the <ph id="ph1">`IsValidEmail`</ph> method does not perform authentication to validate the email address.</source>
          <target state="translated">Notez que la méthode <ph id="ph1">`IsValidEmail`</ph> n'effectue pas d'authentification pour valider l'adresse e-mail.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>It merely determines whether its format is valid for an email address.</source>
          <target state="translated">Elle détermine simplement si son format est valide pour une adresse e-mail.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In addition, the <ph id="ph1">`IsValidEmail`</ph> method does not verify that the top-level domain name is a valid domain name listed at the <bpt id="p1">[</bpt>IANA Root Zone Database<ept id="p1">](https://www.iana.org/domains/root/db)</ept>, which would require a look-up operation.</source>
          <target state="translated">En outre, la méthode <ph id="ph1">`IsValidEmail`</ph> ne vérifie pas si le nom de domaine de premier niveau est un nom de domaine valide répertorié dans la <bpt id="p1">[</bpt>base de données des zones racines de l’IANA<ept id="p1">](https://www.iana.org/domains/root/db)</ept>. Cela nécessite une opération de recherche.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Instead, the regular expression merely verifies that the top-level domain name consists of between two and twenty-four ASCII characters, with alphanumeric first and last characters and the remaining characters being either alphanumeric or a hyphen (-).</source>
          <target state="translated">À la place, l'expression régulière vérifie simplement que le nom de domaine de niveau supérieur comprend entre deux et vingt-quatre caractères ASCII, les premier et dernier caractères étant des caractères alphanumériques, les autres des caractères alphanumériques ou un trait d'union (-).</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In this example, the regular expression pattern <ph id="ph1">`^(?(")(".+?(?&lt;!\\)"@)|(([0-9a-z]((\.(?!\.))|[-!#\$%&amp;'\*\+/=\?\^`</ph><ph id="ph2">\{</ph><ph id="ph3">\}</ph><ph id="ph4">\|</ph>~\w])<bpt id="p1">*</bpt><ph id="ph5">)(?&lt;=[0-9a-z])@))(?(</ph><ph id="ph6">\[</ph>)(<ph id="ph7">\[</ph>(\d{1,3}<ph id="ph8">\.</ph>){3}\d{1,3}<ph id="ph9">\]</ph>)|(([0-9a-z][-\w]<ept id="p1">*</ept>[0-9a-z]*<ph id="ph10">\.</ph>)+[a-z0-9][<ph id="ph11">\-</ph>a-z0-9]{0,22}[a-z0-9]))$` is interpreted as shown in the following table.</source>
          <target state="translated">Dans cet exemple, le modèle d’expression régulière <ph id="ph1">`^(?(")(".+?(?&lt;!\\)"@)|(([0-9a-z]((\.(?!\.))|[-!#\$%&amp;'\*\+/=\?\^`</ph><ph id="ph2">\{</ph><ph id="ph3">\}</ph><ph id="ph4">\|</ph>~\w])<bpt id="p1">*</bpt><ph id="ph5">)(?&lt;=[0-9a-z])@))(?(</ph><ph id="ph6">\[</ph>)(<ph id="ph7">\[</ph>(\d{1,3}<ph id="ph8">\.</ph>){3}\d{1,3}<ph id="ph9">\]</ph>)|(([0-9a-z][-\w]<ept id="p1">*</ept>[0-9a-z]*<ph id="ph10">\.</ph>)+[a-z0-9][<ph id="ph11">\-</ph>a-z0-9]{0,22}[a-z0-9]))$` est interprété de la manière indiquée dans le tableau ci-dessous.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Note that the regular expression is compiled using the <bpt id="p1">[</bpt>RegexOptions.IgnoreCase<ept id="p1">](xref:System.Text.RegularExpressions.RegexOptions.IgnoreCase)</ept> flag.</source>
          <target state="translated">Notez que l’expression régulière est compilée à l’aide de l’indicateur <bpt id="p1">[</bpt>RegexOptions.IgnoreCase<ept id="p1">](xref:System.Text.RegularExpressions.RegexOptions.IgnoreCase)</ept>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">Modèle</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Description</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Begin the match at the start of the string.</source>
          <target state="translated">Commence la recherche de correspondance au début de la chaîne.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Determine whether the first character is a quotation mark.</source>
          <target state="translated">Détermine si le premier caractère est un guillemet.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`(?(")`</ph> is the beginning of an alternation construct.</source>
          <target state="translated"><ph id="ph1">`(?(")`</ph> est le début d'une construction d'alternative.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If the first character is a quotation mark, match a beginning quotation mark followed by at least one occurrence of any character, followed by an ending quotation mark.</source>
          <target state="translated">Si le premier caractère correspond à des guillemets, établit une correspondance avec des guillemets ouvrants suivis d'au moins une occurrence d'un caractère quelconque, suivie de guillemets fermants.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The ending quotation mark must not be preceded by a backslash character <ph id="ph1">`(\). (?&lt;!`</ph> is the beginning of a zero-width negative lookbehind assertion.</source>
          <target state="translated">Les guillemets fermants ne doivent pas être précédés d’une barre oblique inverse <ph id="ph1">`(\). (?&lt;!`</ph> est le début d’une assertion de postanalyse négative de largeur nulle.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The string should conclude with an at sign <ph id="ph1">(@).</ph></source>
          <target state="translated">La chaîne doit se terminer par un arobase (<ph id="ph1">(@).</ph>)</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>`&amp;#124;(([0-9a-z]</source>
          <target state="translated">`&amp;#124;(([0-9a-z]</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If the first character is not a quotation mark, match any alphabetic character from a to z or A to Z (the comparison is case insensitive), or any numeric character from 0 to 9.</source>
          <target state="translated">Si le premier caractère n'est pas un guillemet, établit une correspondance avec un caractère alphabétique de a à z ou de A à Z (la comparaison ne respecte pas la casse) ou un chiffre (de 0 à 9).</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If the next character is a period, match it.</source>
          <target state="translated">Si le caractère suivant est un point, établit une correspondance avec un point.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If it is not a period, look ahead to the next character and continue the match.</source>
          <target state="translated">Dans le cas contraire, effectue une préanalyse du caractère suivant et continue la recherche de correspondances.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`(?!\.)`</ph> is a zero-width negative lookahead assertion that prevents two consecutive periods from appearing in the local part of an email address.</source>
          <target state="translated"><ph id="ph1">`(?!\.)`</ph> est une assertion de préanalyse négative de largeur nulle qui empêche deux points consécutifs de s'afficher dans la partie locale d'une adresse de messagerie.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`&amp;#124;[-!#\$%&amp;'\*\+/=\?\^`</ph><ph id="ph2">\{</ph><ph id="ph3">\}</ph><ph id="ph4">\&amp;</ph>#124;~\w]</source>
          <target state="translated"><ph id="ph1">`&amp;#124;[-!#\$%&amp;'\*\+/=\?\^`</ph><ph id="ph2">\{</ph><ph id="ph3">\}</ph><ph id="ph4">\&amp;</ph>#124;~\w]</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>If the next character is not a period, match any word character or one of the following characters: -!#$%'*+=?^`{}&amp;#124;~.</source>
          <target state="translated">Si le caractère suivant n’est pas un point, établit une correspondance avec un caractère alphabétique quelconque ou l’un des caractères suivants : -!#$%'*+=?^`{}&amp;#124;~.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`((\.(?!\.))&amp;#124;[-!#\$%'\*\+/=\?\^`</ph><ph id="ph2">\{</ph><ph id="ph3">\}</ph><ph id="ph4">\&amp;</ph>#124;~\w])*</source>
          <target state="translated"><ph id="ph1">`((\.(?!\.))&amp;#124;[-!#\$%'\*\+/=\?\^`</ph><ph id="ph2">\{</ph><ph id="ph3">\}</ph><ph id="ph4">\&amp;</ph>#124;~\w])*</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Match the alternation pattern (a period followed by a non-period, or one of a number of characters) zero or more times.</source>
          <target state="translated">Établit une correspondance avec le modèle d’alternative (un point suivi d’un autre caractère qu’un point, ou l’un des caractères) zéro, une ou plusieurs fois.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Match the <ph id="ph1">@</ph> character.</source>
          <target state="translated">Correspond à l’arobase (<ph id="ph1">@</ph>).</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Continue the match if the character that precedes the <ph id="ph1">@</ph> character is A through Z, a through z, or 0 through 9.</source>
          <target state="translated">Continue la recherche de correspondances si le caractère qui précède le caractère <ph id="ph1">@</ph> est compris entre A et Z, a et z, ou 0 et 9.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`(?&lt;=[0-9a-z])`</ph> construct defines a zero-width positive lookbehind assertion.</source>
          <target state="translated">La construction <ph id="ph1">`(?&lt;=[0-9a-z])`</ph> définit une assertion de postanalyse positive de largeur nulle.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Check whether the character that follows <ph id="ph1">@</ph> is an opening bracket.</source>
          <target state="translated">Vérifie si le caractère qui suit <ph id="ph1">@</ph> est un crochet ouvrant.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>If it is an opening bracket, match the opening bracket followed by an IP address (four sets of one to three digits, with each set separated by a period) and a closing bracket.</source>
          <target state="translated">S'il s'agit d'un crochet ouvrant, établit une correspondance avec le crochet ouvrant suivi d'une adresse IP (quatre ensembles de un à trois chiffres, chaque ensemble étant séparé par un point) et d'un crochet fermant.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>If the character that follows <ph id="ph1">@</ph> is not an opening bracket, match one alphanumeric character with a value of A-Z, a-z, or 0-9, followed by zero or more occurrences of a word character or a hyphen, followed by zero or one alphanumeric character with a value of A-Z, a-z, or 0-9, followed by a period.</source>
          <target state="translated">Si le caractère qui suit <ph id="ph1">@</ph> n’est pas un crochet ouvrant, établit une correspondance avec un caractère alphanumérique ayant une valeur comprise entre A et Z, a et z ou 0 et 9, suivi de zéro, une ou plusieurs occurrences d’un caractère alphabétique ou d’un trait d’union, suivi de zéro, un ou plusieurs caractères alphanumériques ayant une valeur comprise entre A et Z, a et z ou 0 et 9, suivi d’un point.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>This pattern can be repeated one or more times, and must be followed by the top-level domain name.</source>
          <target state="translated">Ce modèle peut être répété une ou plusieurs fois et doit être suivi du nom de domaine de niveau supérieur.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The top-level domain name must begin and end with an alphanumeric character (a-z, A-Z, and 0-9).</source>
          <target state="translated">Le nom de domaine de niveau supérieur doit commencer et se terminer par un caractère alphanumérique (compris entre a et z, A et Z ou 0 et 9).</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>It can also include from zero to 22 ASCII characters that are either alphanumeric or hyphens.</source>
          <target state="translated">Il peut également comprendre entre zéro et 22 caractères ASCII (soit des caractères alphanumériques, soit des traits d'union).</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>End the match at the end of the string.</source>
          <target state="translated">Termine la correspondance à la fin de la chaîne.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>You can call the <ph id="ph1">`IsValidEmail`</ph> and <ph id="ph2">`DomainMapper`</ph> methods by using code such as the following:</source>
          <target state="translated">Vous pouvez appeler les méthodes <ph id="ph1">`IsValidEmail`</ph> et <ph id="ph2">`DomainMapper`</ph> en utilisant le code suivant :</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">Voir aussi</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>.NET regular expressions<ept id="p1">](regular-expressions.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Expressions régulières .NET<ept id="p1">](regular-expressions.md)</ept></target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Regular expression examples<ept id="p1">](regex-examples.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Exemples d’expressions régulières<ept id="p1">](regex-examples.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>