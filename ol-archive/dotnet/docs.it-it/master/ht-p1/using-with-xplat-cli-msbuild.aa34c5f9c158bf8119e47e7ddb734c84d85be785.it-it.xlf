<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-e631009" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">01b17021e79bcdb2dc69f97b709f4aa63dbab9aa</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\preview3\tutorials\using-with-xplat-cli-msbuild.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p1</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f4687c866d3e890d8a186aa37ff5cdea27ffe4b8</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">80690ec3287d1b867fca08669e2a6f0351ed22df</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Getting started with .NET Core on Windows/Linux/macOS using the command line (SDK Preview 3)</source>
          <target state="translated">Introduzione all'uso di .NET Core su Windows/Linux/macOS dalla riga di comando (anteprima 3 dell'SDK)</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Getting started with .NET Core on Windows, Linux, or macOS using the .NET Core command line interface (CLI)</source>
          <target state="translated">Introduzione all'uso di .NET Core su Windows/Linux/macOS dall'interfaccia della riga di comando di .NET Core</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Getting started with .NET Core on Windows/Linux/macOS using the command line (SDK Preview 3)</source>
          <target state="translated">Introduzione all'uso di .NET Core su Windows/Linux/macOS dalla riga di comando (anteprima 3 dell'SDK)</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This guide will show you how to use the .NET Core CLI tooling to build cross-platform console apps.</source>
          <target state="translated">Questa guida illustra come usare gli strumenti dell'interfaccia della riga di comando di .NET Core per creare applicazioni console multipiattaforma.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>It will start with the most basic console app and eventually span multiple projects, including testing.</source>
          <target state="translated">Si inizia con un'applicazione console molto semplice per poi passare a più progetti, incluso un progetto di test.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You'll add these features step-by-step, building on what you've already seen and built.</source>
          <target state="translated">Le funzionalità verranno illustrate in maniera graduale, aggiungendo nuove informazioni sulla base di quelle già acquisite.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>If you're unfamiliar with the .NET Core CLI toolset, read <bpt id="p1">[</bpt>the .NET Core SDK overview<ept id="p1">](../tools/dotnet.md)</ept>.</source>
          <target state="translated">Se non si ha familiarità con il set di strumenti dell'interfaccia della riga di comando di .NET Core, leggere <bpt id="p1">[</bpt>la panoramica di .NET Core SDK<ept id="p1">](../tools/dotnet.md)</ept>.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
          <target state="translated">Prerequisiti</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Before you begin, ensure you have <bpt id="p1">[</bpt>.NET Core CLI tooling Preview 3 or later<ept id="p1">](https://github.com/dotnet/core/blob/master/release-notes/preview3-download.md)</ept>.</source>
          <target state="translated">Prima di iniziare, assicurarsi di avere gli strumenti <bpt id="p1">[</bpt>dell'anteprima 3 o successiva dell'interfaccia della riga di comando di .NET Core<ept id="p1">](https://github.com/dotnet/core/blob/master/release-notes/preview3-download.md)</ept>.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You'll also need a text editor.</source>
          <target state="translated">È necessario anche un editor di testo.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Hello, Console App!</source>
          <target state="translated">Creazione di un'applicazione console</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>First, navigate to or create a new folder with a name you like.</source>
          <target state="translated">Innanzitutto, passare a un'altra cartella e crearne una nuova con il nome desiderato.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>"Hello" is the name chosen for the sample code, which can be found <bpt id="p1">[</bpt>here<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/console-apps/HelloMsBuild)</ept>.</source>
          <target state="translated">"Hello" è il nome selezionato per il codice di esempio, che è possibile trovare <bpt id="p1">[</bpt>qui<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/console-apps/HelloMsBuild)</ept>.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Open up a command prompt and type the following:</source>
          <target state="translated">Aprire un prompt dei comandi e digitare quanto segue:</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Let's do a quick walkthrough:</source>
          <target state="translated">Ecco una descrizione rapida dei comandi digitati:</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">`dotnet new`</ph><ept id="p1">](../tools/dotnet-new.md)</ept> creates an up-to-date <ph id="ph2">`Hello.csproj`</ph> project file with the dependencies necessary to build a console app.</source>
          <target state="translated"><bpt id="p1">[</bpt><ph id="ph1">`dotnet new`</ph><ept id="p1">](../tools/dotnet-new.md)</ept> crea un file di progetto <ph id="ph2">`Hello.csproj`</ph> aggiornato con le dipendenze necessarie per compilare un'applicazione console.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>It also creates a <ph id="ph1">`Program.cs`</ph>, a basic file containing the entry point for the application.</source>
          <target state="translated">Crea inoltre un file <ph id="ph1">`Program.cs`</ph> di base contenente il punto di ingresso per l'applicazione.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Hello.csproj`</ph>:</source>
          <target state="translated"><ph id="ph1">`Hello.csproj`</ph>:</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The project file specifies everything that's needed to restore dependencies and build the program.</source>
          <target state="translated">Il file di progetto specifica tutti gli elementi necessari per recuperare le dipendenze e compilare il programma.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Import`</ph> tag brings in some properties that are common to all .NET Core projects.</source>
          <target state="translated">Il tag <ph id="ph1">`Import`</ph> introduce alcune proprietà comuni a tutti i progetti .NET Core.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`OutputType`</ph> tag specifies that we're building an executable, in other words a console application.</source>
          <target state="translated">Il tag <ph id="ph1">`OutputType`</ph> specifica che si sta compilando un file eseguibile, ovvero un'applicazione console.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`TargetFramework`</ph> tag specifies what .NET runtime we're targeting.</source>
          <target state="translated">Il tag <ph id="ph1">`TargetFramework`</ph> specifica il runtime .NET di destinazione.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In an advance scenario, you can specify multiple target frameworks and build to all those in a single operation.</source>
          <target state="translated">In uno scenario avanzato è possibile specificare più framework di destinazione ed eseguire la compilazione per ciascuno di essi in un'unica operazione.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In this tutorial, we'll stick to building only for .NET Core 1.0.</source>
          <target state="translated">In questa esercitazione verrà illustrata la procedura di compilazione solo per .NET Core 1.0.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Compile`</ph> tag tells the compiler to build all the files in the current directory and all its subdirectories that have the <ph id="ph2">`.cs`</ph> file extension, in other words all the C# files in the project.</source>
          <target state="translated">Il tag <ph id="ph1">`Compile`</ph> indica al compilatore di generare tutti i file nella directory corrente e in tutte le relative sottodirectory con estensione <ph id="ph2">`.cs`</ph>, ovvero in tutti i file C# del progetto.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In advanced scenarios, it is possible to exclude files, but in this tutorial, and in most simple scenarios, this line can be left unchanged.</source>
          <target state="translated">Negli scenari avanzati è possibile escludere alcuni file, ma in questa esercitazione e nella maggior parte degli scenari semplici questa riga può essere lasciata invariata.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`EmbeddedResource`</ph> tag instructs the build system to embed localization files with the extension <ph id="ph2">`.resx`</ph> into the compiled executable.</source>
          <target state="translated">Il tag <ph id="ph1">`EmbeddedResource`</ph> indica al sistema di compilazione di incorporare i file di localizzazione con estensione <ph id="ph2">`.resx`</ph> nel file eseguibile compilato.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>We won't use that feature in this tutorial.</source>
          <target state="translated">Nell'esercitazione corrente questa funzionalità non verrà usata.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`PackageReference`</ph> tags specify what dependency packages must be restored and included when building the application.</source>
          <target state="translated">Il tag <ph id="ph1">`PackageReference`</ph> specifica quali pacchetti di dipendenze devono essere ripristinati e inclusi durante la compilazione dell'applicazione.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Each package reference specifies the name of the package under the <ph id="ph1">`Include`</ph> attribute, and a version number.</source>
          <target state="translated">Ogni riferimento di pacchetto specifica il nome del pacchetto associato all'attributo <ph id="ph1">`Include`</ph> e un numero di versione.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>In most advanced scenarios, you'll add more package references.</source>
          <target state="translated">Negli scenari più avanzati è possibile aggiungere altri riferimenti di pacchetti</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>It is also possible to reference other projects on disk.</source>
          <target state="translated">e fare riferimento ad altri progetti su disco.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Program.cs`</ph>:</source>
          <target state="translated"><ph id="ph1">`Program.cs`</ph>:</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The program starts by <ph id="ph1">`using System`</ph>, which means "bring everything in the <ph id="ph2">`System`</ph> namespace into scope for this file".</source>
          <target state="translated">Il programma inizia con <ph id="ph1">`using System`</ph>, che significa "porta tutti gli elementi presenti nello spazio dei nomi <ph id="ph2">`System`</ph> nell'ambito relativo a questo file".</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`System`</ph> namespace includes basic constructs such as <ph id="ph2">`string`</ph>, or numeric types.</source>
          <target state="translated">Lo spazio dei nomi <ph id="ph1">`System`</ph> include costrutti di base come <ph id="ph2">`string`</ph> o tipi numerici.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>We then define a namespace called "ConsoleApplication".</source>
          <target state="translated">È quindi necessario definire uno spazio dei nomi denominato "ConsoleApplication".</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>You can change this to anything you want.</source>
          <target state="translated">È comunque possibile modificare il nome secondo le proprie esigenze.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>A class named "Program" is defined within that namespace, with a <ph id="ph1">`Main`</ph> method that takes an array of strings as its argument.</source>
          <target state="translated">All'interno dello spazio dei nomi viene definita una classe denominata "Program" con un metodo <ph id="ph1">`Main`</ph> che accetta come argomento una matrice di stringhe.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This array will contain the list of arguments passed in when the compiled program will be called.</source>
          <target state="translated">Nella matrice sarà contenuto l'elenco degli argomenti che verranno passati nel momento in cui verrà chiamato il programma compilato.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>As it is, this array is not used: all the program is doing is to write "Hello World!"</source>
          <target state="translated">Così com'è, questa matrice non viene usata: il programma, infatti, si limita a scrivere "Hello World!"</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>to the console.</source>
          <target state="translated">nella console.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>We can make things a little more interesting by changing the <ph id="ph1">`Console.WriteLine`</ph> into the following code.</source>
          <target state="translated">Per rendere la procedura più interessante è possibile modificare <ph id="ph1">`Console.WriteLine`</ph> nel codice seguente.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">`dotnet restore`</ph><ept id="p1">](../tools/dotnet-restore.md)</ept> calls into <bpt id="p2">[</bpt>NuGet<ept id="p2">](http://nuget.org)</ept> (.NET's package manager) to restore the tree of dependencies.</source>
          <target state="translated"><bpt id="p1">[</bpt><ph id="ph1">`dotnet restore`</ph><ept id="p1">](../tools/dotnet-restore.md)</ept> esegue una chiamata a <bpt id="p2">[</bpt>NuGet<ept id="p2">](http://nuget.org)</ept> (il gestore di pacchetti per .NET) per ripristinare l'albero delle dipendenze.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>NuGet analyzes the <ph id="ph1">`Hello.csproj`</ph> file, downloads the dependencies stated in the file (or grabs them from a cache on your machine), and writes the <ph id="ph2">`obj/project.assets.json`</ph> file.</source>
          <target state="translated">NuGet analizza il file <ph id="ph1">`Hello.csproj`</ph>, scarica le dipendenze indicate nel file (o li estrae da una cache nel computer) e scrive il file <ph id="ph2">`obj/project.assets.json`</ph>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`project.assets.json`</ph> file is necessary to be able to compile and run.</source>
          <target state="translated">Il file <ph id="ph1">`project.assets.json`</ph> è necessario per la compilazione e l'esecuzione.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`project.assets.json`</ph> file is a persisted and complete set of the graph of NuGet dependencies and other information describing an app.</source>
          <target state="translated">Il file <ph id="ph1">`project.assets.json`</ph> è un set completo e persistente del grafico delle dipendenze NuGet e include altre informazioni che descrivono un'applicazione.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>This file is read by other tools, such as <ph id="ph1">`dotnet build`</ph> and <ph id="ph2">`dotnet run`</ph>, enabling them to process the source code with a correct set of NuGet dependencies and binding resolutions.</source>
          <target state="translated">Questo file viene letto da altri strumenti, ad esempio <ph id="ph1">`dotnet build`</ph> e <ph id="ph2">`dotnet run`</ph>, che possono quindi elaborare il codice sorgente con un set corretto di risoluzioni di binding e dipendenze NuGet.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">`dotnet run`</ph><ept id="p1">](../tools/dotnet-run.md)</ept> calls <ph id="ph2">`dotnet build`</ph> to ensure that the build targets have been built, and then calls <ph id="ph3">`dotnet &lt;assembly.dll&gt;`</ph> to run the target application.</source>
          <target state="translated"><bpt id="p1">[</bpt><ph id="ph1">`dotnet run`</ph><ept id="p1">](../tools/dotnet-run.md)</ept> chiama <ph id="ph2">`dotnet build`</ph> per assicurarsi che le destinazioni siano state compilate e quindi chiama <ph id="ph3">`dotnet &lt;assembly.dll&gt;`</ph> per eseguire l'applicazione di destinazione.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Alternatively, you can also execute <bpt id="p1">[</bpt><ph id="ph1">`dotnet build`</ph><ept id="p1">](../tools/dotnet-build.md)</ept> to compile the code without running the build console applications.</source>
          <target state="translated">In alternativa, è possibile eseguire <bpt id="p1">[</bpt><ph id="ph1">`dotnet build`</ph><ept id="p1">](../tools/dotnet-build.md)</ept> per compilare il codice senza eseguire la compilazione di applicazioni console.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>This results in a <ph id="ph1">`bin/Debug/netcoreapp1.0/Hello.dll`</ph> compiled application that can be run with <ph id="ph2">`dotnet bin\Debug\netcoreapp1.0\Hello.dll`</ph> on Windows, and <ph id="ph3">`dotnet bin/Debug/netcoreapp1.0/Hello.dll`</ph> on other systems.</source>
          <target state="translated">In questo caso si ottiene un'applicazione compilata <ph id="ph1">`bin/Debug/netcoreapp1.0/Hello.dll`</ph> che può essere eseguita con <ph id="ph2">`dotnet bin\Debug\netcoreapp1.0\Hello.dll`</ph> in Windows e con <ph id="ph3">`dotnet bin/Debug/netcoreapp1.0/Hello.dll`</ph> in altri sistemi.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>You may specify an additional parameter on the command-line (assuming you are on Windows):</source>
          <target state="translated">È possibile specificare un parametro aggiuntivo nella riga di comando (presupponendo che sia in esecuzione Windows):</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>As an advanced scenario, it's possible to build the application as a self-contained set of platform-specific files that can be deployed and run to a machine that doesn't necessarily have .NET Core installed.</source>
          <target state="translated">Come scenario avanzato, è possibile compilare l'applicazione come un set indipendente di file specifici della piattaforma che può essere distribuito ed eseguito anche in computer in cui non è installato .NET Core.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>.NET Core Application Deployment<ept id="p1">](../deploying/index.md)</ept> for details.</source>
          <target state="translated">Per informazioni dettagliate, vedere <bpt id="p1">[</bpt>Distribuzione di applicazioni .NET Core<ept id="p1">](../deploying/index.md)</ept>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Augmenting the program</source>
          <target state="translated">Possibilità di espansione del programma</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Let's change the file just a little bit.</source>
          <target state="translated">È possibile apportare modifiche al file del programma.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Fibonacci numbers are fun, so let's try that out:</source>
          <target state="translated">Ad esempio, si può provare a inserire i numeri di Fibonacci:</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Program.cs`</ph>:</source>
          <target state="translated"><ph id="ph1">`Program.cs`</ph>:</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>And running the program (assuming you're on Windows, and have changed the project directory name to Fibonacci):</source>
          <target state="translated">E quindi eseguire il programma (si presuppone che il file venga eseguito in Windows e il nome della directory del progetto è stato modificato in Fibonacci):</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>And that's it!</source>
          <target state="translated">L'operazione è ora completata.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>You can augment <ph id="ph1">`Program.cs`</ph> any way you like.</source>
          <target state="translated"><ph id="ph1">`Program.cs`</ph> offre innumerevoli possibilità di espansione.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Adding some new files</source>
          <target state="translated">Aggiunta di nuovi file</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Single files are fine for simple one-off programs, but chances are you're going to want to break things out into multiple files if you're building anything which has multiple components.</source>
          <target state="translated">Per i programmi semplici sono sufficienti singoli file, ma è probabile che sia opportuno suddividere il codice in più file se si creano programmi con più componenti.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Multiple files are a way to do that.</source>
          <target state="translated">Un progetto con più file può offrire una buona soluzione.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Create a new file and give it a unique namespace:</source>
          <target state="translated">Creare un nuovo file e assegnargli uno spazio dei nomi univoco:</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Next, include it in your <ph id="ph1">`Program.cs`</ph> file:</source>
          <target state="translated">Includerlo quindi nel file <ph id="ph1">`Program.cs`</ph>:</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>And finally, you can build it:</source>
          <target state="translated">E infine eseguire la compilazione:</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Now the fun part: making the new file do something!</source>
          <target state="translated">A questo punto è possibile passare alla parte più divertente della procedura: rendere operativo il nuovo file.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Example: A Fibonacci Sequence Generator</source>
          <target state="translated">Esempio: Generatore della sequenza di Fibonacci</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Let's say you want to build off of the previous Fibonacci example by caching some Fibonacci values and add some recursive flair.</source>
          <target state="translated">Si supponga di voler sviluppare il precedente esempio di sequenza di Fibonacci memorizzando nella cache alcuni valori di Fibonacci e aggiungendo alcune ricorsività.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Your code for a <bpt id="p1">[</bpt>better Fibonacci example<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/console-apps/FibonacciBetterMsBuild)</ept> might use a new <ph id="ph1">`FibonacciGenerator.cs`</ph> file with the following code.</source>
          <target state="translated">Il codice per un <bpt id="p1">[</bpt>esempio di sequenza di Fibonacci migliore<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/console-apps/FibonacciBetterMsBuild)</ept> potrebbe usare un nuovo file <ph id="ph1">`FibonacciGenerator.cs`</ph> con il codice seguente.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Now adjust the <ph id="ph1">`Main()`</ph> method in your <ph id="ph2">`Program.cs`</ph> file as shown below.</source>
          <target state="translated">A questo punto, modificare il metodo <ph id="ph1">`Main()`</ph> nel file <ph id="ph2">`Program.cs`</ph>, come illustrato di seguito.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Finally, run it!</source>
          <target state="translated">Infine, eseguire l'applicazione.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>And that's it!</source>
          <target state="translated">L'operazione è ora completata.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Conclusion</source>
          <target state="translated">Conclusione</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Hopefully this guide has helped you learn how to create a .NET Core console app, from the basics all the way up to a multi-project system with unit tests.</source>
          <target state="translated">Questa guida ha illustrato le procedure per creare un'applicazione console .NET Core, a partire dalle funzionalità di base fino a un sistema basato su più progetti con unit test.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The next step is to create awesome console apps of your own!</source>
          <target state="translated">Il passaggio successivo sarà quello di creare eccezionali applicazioni console personalizzate.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>If a more advanced example of a console app interests you, check out the next tutorial: <bpt id="p1">[</bpt>Organizing and testing projects with the .NET Core command line (SDK Preview 3)<ept id="p1">](using-with-xplat-cli-msbuild-folders.md)</ept>.</source>
          <target state="translated">Per un esempio di applicazione console più avanzato, vedere l'esercitazione successiva: <bpt id="p1">[</bpt>Organizzazione e testing dei progetti con la riga di comando di .NET Core (anteprima 3 dell'SDK)<ept id="p1">](using-with-xplat-cli-msbuild-folders.md)</ept>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>