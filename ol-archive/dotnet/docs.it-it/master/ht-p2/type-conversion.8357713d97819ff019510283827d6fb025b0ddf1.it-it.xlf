<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-6a73dd2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9f3f0dc381f8892dfb24d027ccc1f46a9b89135a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\base-types\type-conversion.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p2</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">df8bad09de4109d5c7593cc8eb9155894e15738d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2fbf7b584be3088b013f751f100d30a7c7ebb1cb</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Type conversion</source>
          <target state="translated">Conversione di tipi</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Type conversion</source>
          <target state="translated">Conversione di tipi</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Type conversion</source>
          <target state="translated">Conversione di tipi</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Every value has an associated type, which defines attributes such as the amount of space allocated to the value, the range of possible values it can have, and the members that it makes available.</source>
          <target state="translated">A ogni valore è associato un tipo che definisce attributi quali la quantità di spazio allocato per il valore, l'intervallo di valori possibili supportati e i membri resi disponibili.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Many values can be expressed as more than one type.</source>
          <target state="translated">Numerosi valori possono essere espressi mediante tipi diversi.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For example, the value <ph id="ph1">`4`</ph> can be expressed as an integer or a floating-point value.</source>
          <target state="translated">Il valore <ph id="ph1">`4`</ph>, ad esempio, può essere espresso come intero o come valore a virgola mobile.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Type conversion creates a value in a new type that is equivalent to the value of an old type, but does not necessarily preserve the identity (or exact value) of the original object.</source>
          <target state="translated">Mediante la conversione di tipi viene creato un valore in un nuovo tipo equivalente al valore del tipo precedente, ma non viene necessariamente mantenuta l'identità, o il valore esatto, dell'oggetto originale.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>.NET automatically supports the following conversions:</source>
          <target state="translated">.NET supporta automaticamente le conversioni seguenti:</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Conversion from a derived class to a base class.</source>
          <target state="translated">Conversione da una classe derivata a una classe di base.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This means, for example, that an instance of any class or structure can be converted to an <bpt id="p1">[</bpt>Object<ept id="p1">](xref:System.Object)</ept> instance.</source>
          <target state="translated">Ciò significa ad esempio che un'istanza di qualsiasi classe o struttura può essere convertita in un'istanza <bpt id="p1">[</bpt>Object<ept id="p1">](xref:System.Object)</ept>.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This conversion does not require a casting operator.</source>
          <target state="translated">Questa conversione non richiede un operatore di cast.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Conversion from a base class back to the original derived class.</source>
          <target state="translated">Conversione da una classe di base a classe derivata originale.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In C#, this conversion requires a casting operator.</source>
          <target state="translated">In C#, questa conversione richiede un operatore di cast.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In Visual Basic, it requires the <ph id="ph1">`CType`</ph> operator if <ph id="ph2">`Option Strict`</ph> is on.</source>
          <target state="translated">In Visual Basic, è necessario l'operatore <ph id="ph1">`CType`</ph> se <ph id="ph2">`Option Strict`</ph> è attivo.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Conversion from a type that implements an interface to an interface object that represents that interface.</source>
          <target state="translated">Conversione da un tipo che implementa un'interfaccia a un oggetto di interfaccia che rappresenta tale interfaccia.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This conversion does not require a casting operator.</source>
          <target state="translated">Questa conversione non richiede un operatore di cast.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Conversion from an interface object back to the original type that implements that interface.</source>
          <target state="translated">Conversione da un oggetto di interfaccia al tipo originale che implementa l'interfaccia.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In C#, this conversion requires a casting operator.</source>
          <target state="translated">In C#, questa conversione richiede un operatore di cast.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In Visual Basic, it requires the <ph id="ph1">`CType`</ph> operator if <ph id="ph2">`Option Strict`</ph> is on.</source>
          <target state="translated">In Visual Basic, è necessario l'operatore <ph id="ph1">`CType`</ph> se <ph id="ph2">`Option Strict`</ph> è attivo.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In addition to these automatic conversions, .NET provides several features that support custom type conversion.</source>
          <target state="translated">Oltre a queste conversioni automatiche, .NET offre diverse funzionalità che supportano la conversione di tipo personalizzato.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>These include the following:</source>
          <target state="translated">tra cui:</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Implicit`</ph> operator, which defines the available widening conversions between types.</source>
          <target state="translated">Operatore <ph id="ph1">`Implicit`</ph> che definisce le conversioni tra tipi verso un tipo di dati più grande.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>Implicit conversion with the Implicit operator<ept id="p1">](#implicit-conversion-with-the-implicit-operator)</ept> section.</source>
          <target state="translated">Per altre informazioni, vedere la sezione <bpt id="p1">[</bpt>Conversione implicita con l'operatore Implicit<ept id="p1">](#implicit-conversion-with-the-implicit-operator)</ept>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Explicit`</ph> operator, which defines the available narrowing conversions between types.</source>
          <target state="translated">Operatore <ph id="ph1">`Explicit`</ph> che definisce le conversioni tra tipi verso un tipo di dati più piccolo.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>Explicit conversion with the Explicit operator<ept id="p1">](#explicit-conversion-with-the-explicit-operator)</ept> section.</source>
          <target state="translated">Per altre informazioni, vedere la sezione <bpt id="p1">[</bpt>Conversione esplicita con l'operatore Explicit<ept id="p1">](#explicit-conversion-with-the-explicit-operator)</ept>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept> interface, which defines conversions to each of the base .NET data types.</source>
          <target state="translated">Interfaccia <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept> che definisce le conversioni in ognuno dei tipi di dati .NET di base.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>The IConvertible interface<ept id="p1">](#the-iconvertible-interface)</ept> section.</source>
          <target state="translated">Per altre informazioni, vedere la sezione <bpt id="p1">[</bpt>Interfaccia IConvertible<ept id="p1">](#the-iconvertible-interface)</ept>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Convert<ept id="p1">](xref:System.Convert)</ept> class, which provides a set of methods that implement the methods in the <ph id="ph1">`IConvertible`</ph> interface.</source>
          <target state="translated">Classe <bpt id="p1">[</bpt>Convert<ept id="p1">](xref:System.Convert)</ept> che offre un set di metodi che implementano i metodi nell'interfaccia <ph id="ph1">`IConvertible`</ph>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>The Convert class<ept id="p1">](#the-convert-class)</ept> section.</source>
          <target state="translated">Per altre informazioni, vedere la sezione <bpt id="p1">[</bpt>Classe Convert<ept id="p1">](#the-convert-class)</ept>.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>TypeConverter<ept id="p1">](xref:System.ComponentModel.TypeConverter)</ept> class, which is a base class that can be extended to support the conversion of a specified type to any other type.</source>
          <target state="translated">Classe <bpt id="p1">[</bpt>TypeConverter<ept id="p1">](xref:System.ComponentModel.TypeConverter)</ept>, una classe di base che può essere estesa per supportare la conversione di un tipo specifico in qualsiasi altro tipo.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>The TypeConverter class<ept id="p1">](#the-typeconverter-class)</ept> section.</source>
          <target state="translated">Per altre informazioni, vedere la sezione <bpt id="p1">[</bpt>Classe TypeConverter<ept id="p1">](#the-typeconverter-class)</ept>.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Implicit conversion with the Implicit operator</source>
          <target state="translated">Conversione implicita con l'operatore Implicit</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Widening conversions involve the creation of a new value from the value of an existing type that has either a more restrictive range or a more restricted member list than the target type.</source>
          <target state="translated">Le conversioni verso un tipo di dati più grande comportano la creazione di un nuovo valore dal valore di un tipo esistente che dispone di un intervallo più restrittivo o di un elenco di membri più limitato rispetto al tipo di destinazione.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Widening conversions cannot result in data loss (although they may result in a loss of precision).</source>
          <target state="translated">Le conversioni verso un tipo di dati più grande non possono comportare perdita di dati, ma è possibile che comportino una perdita di precisione.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Because data cannot be lost, compilers can handle the conversion implicitly or transparently, without requiring the use of an explicit conversion method or a casting operator.</source>
          <target state="translated">Poiché i dati non possono venire persi, i compilatori possono gestire la conversione in modo implicito o trasparente, senza la necessità di utilizzare un metodo di conversione esplicito o un operatore di cast.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Although code that performs an implicit conversion can call a conversion method or use a casting operator, their use is not required by compilers that support implicit conversions.</source>
          <target state="translated">Sebbene il codice che esegue una conversione esplicita sia in grado di chiamare un metodo di conversione o di utilizzare un operatore di cast, l'utilizzo di tali elementi non è richiesto dai compilatori che supportano le conversioni implicite.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>For example, the <bpt id="p1">[</bpt>Decimal<ept id="p1">](xref:System.Decimal)</ept> type supports implicit conversions from <bpt id="p2">[</bpt>Byte<ept id="p2">](xref:System.Byte)</ept>, <bpt id="p3">[</bpt>Char<ept id="p3">](xref:System.Char)</ept>, <bpt id="p4">[</bpt>Int16<ept id="p4">](xref:System.Int16)</ept>, <bpt id="p5">[</bpt>Int32<ept id="p5">](xref:System.Int32)</ept>, <bpt id="p6">[</bpt>Int64<ept id="p6">](xref:System.Int64)</ept>, <bpt id="p7">[</bpt>SByte<ept id="p7">](xref:System.SByte)</ept>, <bpt id="p8">[</bpt>UInt16<ept id="p8">](xref:System.UInt16)</ept>, <bpt id="p9">[</bpt>UInt32<ept id="p9">](xref:System.UInt32)</ept>, and <bpt id="p10">[</bpt>UInt64<ept id="p10">](xref:System.UInt64)</ept> values.</source>
          <target state="translated">Ad esempio, il tipo <bpt id="p1">[</bpt>Decimal<ept id="p1">](xref:System.Decimal)</ept> supporta conversioni implicite da valori <bpt id="p2">[</bpt>Byte<ept id="p2">](xref:System.Byte)</ept>, <bpt id="p3">[</bpt>Char<ept id="p3">](xref:System.Char)</ept>, <bpt id="p4">[</bpt>Int16<ept id="p4">](xref:System.Int16)</ept>, <bpt id="p5">[</bpt>Int32<ept id="p5">](xref:System.Int32)</ept>, <bpt id="p6">[</bpt>Int64<ept id="p6">](xref:System.Int64)</ept>, <bpt id="p7">[</bpt>SByte<ept id="p7">](xref:System.SByte)</ept>, <bpt id="p8">[</bpt>UInt16<ept id="p8">](xref:System.UInt16)</ept>, <bpt id="p9">[</bpt>UInt32<ept id="p9">](xref:System.UInt32)</ept> e <bpt id="p10">[</bpt>UInt64<ept id="p10">](xref:System.UInt64)</ept>.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The following example illustrates some of these implicit conversions in assigning values to a <ph id="ph1">`Decimal`</ph> variable.</source>
          <target state="translated">Nell'esempio seguente vengono illustrate alcune conversioni implicite nell'assegnazione di valori a una variabile <ph id="ph1">`Decimal`</ph>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If a particular language compiler supports custom operators, you can also define implicit conversions in your own custom types.</source>
          <target state="translated">Se un determinato compilatore di linguaggio supporta gli operatori personalizzati, è anche possibile definire le conversioni implicite nei tipi personalizzati.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The following example provides a partial implementation of a signed byte data type named <ph id="ph1">`ByteWithSign`</ph> that uses sign-and-magnitude representation.</source>
          <target state="translated">Nell'esempio seguente viene fornita un'implementazione parziale di un tipo di dati Signed Byte denominato <ph id="ph1">`ByteWithSign`</ph> che utilizza la rappresentazione di segno e grandezza.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>It supports implicit conversion of <bpt id="p1">[</bpt>Byte<ept id="p1">](xref:System.Byte)</ept> and <bpt id="p2">[</bpt>SByte<ept id="p2">](xref:System.SByte)</ept> values to <ph id="ph1">`ByteWithSign`</ph> values.</source>
          <target state="translated">Il tipo supporta la conversione implicita di valori <bpt id="p1">[</bpt>Byte<ept id="p1">](xref:System.Byte)</ept> e <bpt id="p2">[</bpt>SByte<ept id="p2">](xref:System.SByte)</ept> in valori <ph id="ph1">`ByteWithSign`</ph>.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Client code can then declare a <ph id="ph1">`ByteWithSign`</ph> variable and assign it <bpt id="p1">[</bpt>Byte<ept id="p1">](xref:System.Byte)</ept> and <bpt id="p2">[</bpt>SByte<ept id="p2">](xref:System.SByte)</ept> values without performing any explicit conversions or using any casting operators, as the following example shows.</source>
          <target state="translated">Il codice client può quindi dichiarare una variabile <ph id="ph1">`ByteWithSign`</ph> e assegnare alla variabile valori <bpt id="p1">[</bpt>Byte<ept id="p1">](xref:System.Byte)</ept> e <bpt id="p2">[</bpt>SByte<ept id="p2">](xref:System.SByte)</ept> senza eseguire alcuna conversione esplicita né usare operatori di cast, come visualizzato nell'esempio seguente.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Explicit conversion with the Explicit operator</source>
          <target state="translated">Conversione esplicita con l'operatore Explicit</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Narrowing conversions involve the creation of a new value from the value of an existing type that has either a greater range or a larger member list than the target type.</source>
          <target state="translated">Le conversioni verso un tipo di dati più piccolo comportano la creazione di un nuovo valore dal valore di un tipo esistente che dispone di un intervallo più ampio o di un elenco di membri più grande rispetto al tipo di destinazione.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Because a narrowing conversion can result in a loss of data, compilers often require that the conversion be made explicit through a call to a conversion method or a casting operator.</source>
          <target state="translated">Poiché una conversione verso un tipo di dati più piccolo può comportare una perdita di dati, i compilatori spesso richiedono che tale conversione sia resa esplicita tramite una chiamata a un metodo di conversione o a un operatore di cast.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>That is, the conversion must be handled explicitly in developer code.</source>
          <target state="translated">È quindi necessario gestire la conversione in modo esplicito nel codice dello sviluppatore.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The major purpose of requiring a conversion method or casting operator for narrowing conversions is to make the developer aware of the possibility of data loss or an <bpt id="p1">[</bpt>OverflowException<ept id="p1">](xref:System.OverflowException)</ept> so that it can be handled in code.</source>
          <target state="translated">Lo scopo principale della richiesta di un metodo di conversione o di un operatore di cast per le conversioni verso un tipo di dati più piccolo è rendere lo sviluppatore consapevole della possibilità di perdita dei dati o del verificarsi di un'eccezione <bpt id="p1">[</bpt>OverflowException<ept id="p1">](xref:System.OverflowException)</ept>, in modo che tale eventualità venga gestita nel codice.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>However, some compilers can relax this requirement.</source>
          <target state="translated">In alcuni compilatori tuttavia questo requisito non è sempre rispettato.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>For example, in Visual Basic, if <ph id="ph1">`Option Strict`</ph> is off (its default setting), the Visual Basic compiler tries to perform narrowing conversions implicitly.</source>
          <target state="translated">In Visual Basic, ad esempio, se l'opzione <ph id="ph1">`Option Strict`</ph> è disattivata (impostazione predefinita), il compilatore tenta di eseguire le conversioni verso un tipo di dati più piccolo in modo implicito.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For example, the <bpt id="p1">[</bpt>UInt32<ept id="p1">](xref:System.UInt32)</ept>, <bpt id="p2">[</bpt>Int64<ept id="p2">](xref:System.Int64)</ept>, and <bpt id="p3">[</bpt>UInt64<ept id="p3">](xref:System.UInt64)</ept> data types have ranges that exceed that the <bpt id="p4">[</bpt>Int32<ept id="p4">](xref:System.Int32)</ept> data type, as the following table shows.</source>
          <target state="translated">Ad esempio i tipi di dati <bpt id="p1">[</bpt>UInt32<ept id="p1">](xref:System.UInt32)</ept>, <bpt id="p2">[</bpt>Int64<ept id="p2">](xref:System.Int64)</ept> e <bpt id="p3">[</bpt>UInt64<ept id="p3">](xref:System.UInt64)</ept> hanno intervalli più ampi del tipo di dati <bpt id="p4">[</bpt>Int32<ept id="p4">](xref:System.Int32)</ept>, come illustrato nella tabella seguente.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Type</source>
          <target state="translated">Tipo</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Comparison with range of Int32</source>
          <target state="translated">Confronto con intervallo di Int32</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Int64<ept id="p1">](xref:System.Int64)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Int64<ept id="p1">](xref:System.Int64)</ept></target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Int64.MaxValue<ept id="p1">](xref:System.Int64.MaxValue)</ept> is greater than <bpt id="p2">[</bpt>Int32.MaxValue<ept id="p2">](xref:System.Int32#System_Int32_MaxValue)</ept>, and <bpt id="p3">[</bpt>Int64.MinValue<ept id="p3">](xref:System.Int64.MinValue)</ept> is less than (has a greater negative range than) <bpt id="p4">[</bpt>Int32.MinValue<ept id="p4">](xref:System.Int32#System_Int32_MinValue)</ept>.</source>
          <target state="translated"><bpt id="p1">[</bpt>Int64. MaxValue<ept id="p1">](xref:System.Int64.MaxValue)</ept> è maggiore di <bpt id="p2">[</bpt>Int32. MaxValue<ept id="p2">](xref:System.Int32#System_Int32_MaxValue)</ept> e <bpt id="p3">[</bpt>Int64.MinValue<ept id="p3">](xref:System.Int64.MinValue)</ept> è minore di (dispone di un intervallo negativo più ampio di) <bpt id="p4">[</bpt>Int32.MinValue<ept id="p4">](xref:System.Int32#System_Int32_MinValue)</ept>.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>UInt32<ept id="p1">](xref:System.UInt32)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>UInt32<ept id="p1">](xref:System.UInt32)</ept></target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>UInt32.MaxValue<ept id="p1">](xref:System.UInt32.MaxValue)</ept> is greater than <bpt id="p2">[</bpt>Int32.MaxValue<ept id="p2">](xref:System.Int32.MaxValue)</ept>.</source>
          <target state="translated"><bpt id="p1">[</bpt>UInt32.MaxValue<ept id="p1">](xref:System.UInt32.MaxValue)</ept> è maggiore di <bpt id="p2">[</bpt>Int32. MaxValue<ept id="p2">](xref:System.Int32.MaxValue)</ept>.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>UInt64<ept id="p1">](xref:System.UInt64)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>UInt64<ept id="p1">](xref:System.UInt64)</ept></target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>UInt64.MaxValue<ept id="p1">](xref:System.UInt64.MaxValue)</ept> is greater than <bpt id="p2">[</bpt>Int32.MaxValue<ept id="p2">](xref:System.Int32.MaxValue)</ept>.</source>
          <target state="translated"><bpt id="p1">[</bpt>UInt64.MaxValue<ept id="p1">](xref:System.UInt64.MaxValue)</ept> è maggiore di <bpt id="p2">[</bpt>Int32. MaxValue<ept id="p2">](xref:System.Int32.MaxValue)</ept>.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>To handle such narrowing conversions, .NET allows types to define an <ph id="ph1">`Explicit`</ph> operator.</source>
          <target state="translated">Per gestire le conversioni verso un tipo di dati più piccolo, .NET consente ai tipi di definire un operatore <ph id="ph1">`Explicit`</ph>.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Individual language compilers can then implement this operator using their own syntax, or a member of the <bpt id="p1">[</bpt>Convert<ept id="p1">](xref:System.Convert)</ept> class can be called to perform the conversion.</source>
          <target state="translated">I singoli compilatori di linguaggio possono quindi implementare questo operatore usando la propria sintassi oppure è possibile chiamare un membro della classe <bpt id="p1">[</bpt>Convert<ept id="p1">](xref:System.Convert)</ept> per eseguire la conversione.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>(For more information about the <ph id="ph1">`Convert`</ph> class, see <bpt id="p1">[</bpt>The Convert class<ept id="p1">](#the-convert-class)</ept> later in this topic.) The following example illustrates the use of language features to handle the explicit conversion of these potentially out-of-range integer values to <bpt id="p2">[</bpt>Int32<ept id="p2">](xref:System.Int32)</ept> values.</source>
          <target state="translated">Per altre informazioni sulla classe <ph id="ph1">`Convert`</ph>, vedere la sezione <bpt id="p1">[</bpt>Classe Convert<ept id="p1">](#the-convert-class)</ept> più avanti in questo argomento. L'esempio seguente illustra l'uso delle funzionalità del linguaggio per gestire la conversione esplicita di questi valori Integer potenzialmente esterni all'intervallo in valori <bpt id="p2">[</bpt>Int32<ept id="p2">](xref:System.Int32)</ept>.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Explicit conversions can produce different results in different languages, and these results can differ from the value returned by the corresponding <bpt id="p1">[</bpt>Convert<ept id="p1">](xref:System.Convert)</ept> method.</source>
          <target state="translated">Le conversioni esplicite possono produrre risultati diversi in linguaggi diversi e tali risultati possono differire dal valore restituito dal metodo <bpt id="p1">[</bpt>Convert<ept id="p1">](xref:System.Convert)</ept> corrispondente.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>For example, if the <bpt id="p1">[</bpt>Double<ept id="p1">](xref:System.Double)</ept> value <bpt id="p2">**</bpt>12.63251<ept id="p2">**</ept> is converted to an <bpt id="p3">[</bpt>Int32<ept id="p3">](xref:System.Int32)</ept>, both the .NET <bpt id="p4">[</bpt>Convert.ToInt32(Double)<ept id="p4">](xref:System.Convert.ToInt32(System.Double))</ept> and the Visual Basic <ph id="ph1">`CInt`</ph> method method rounds the <bpt id="p5">[</bpt>Double<ept id="p5">](xref:System.Double)</ept> to return a value of <bpt id="p6">**</bpt>13<ept id="p6">**</ept>, but the C# <ph id="ph2">`(int)`</ph> operator truncates the <bpt id="p7">[</bpt>Double<ept id="p7">](xref:System.Double)</ept> to return a value of <bpt id="p8">**</bpt>12<ept id="p8">**</ept>.</source>
          <target state="translated">Se ad esempio il valore <bpt id="p1">[</bpt>Double<ept id="p1">](xref:System.Double)</ept> <bpt id="p2">**</bpt>12.63251<ept id="p2">**</ept> viene convertito in <bpt id="p3">[</bpt>Int32<ept id="p3">](xref:System.Int32)</ept>, sia il metodo .NET <bpt id="p4">[</bpt>Convert.ToInt32(Double)<ept id="p4">](xref:System.Convert.ToInt32(System.Double))</ept> sia il metodo Visual Basic <ph id="ph1">`CInt`</ph> arrotondano il valore <bpt id="p5">[</bpt>Double<ept id="p5">](xref:System.Double)</ept> per restituire <bpt id="p6">**</bpt>13<ept id="p6">**</ept>, ma l'operatore C# <ph id="ph2">`(int)`</ph> tronca il valore <bpt id="p7">[</bpt>Double<ept id="p7">](xref:System.Double)</ept> e restituisce <bpt id="p8">**</bpt>12<ept id="p8">**</ept>.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Similarly, the C# <ph id="ph1">`(int)`</ph> operator does not support Boolean-to-integer conversion, but the Visual Basic <ph id="ph2">`CInt`</ph> method converts a value of <ph id="ph3">`true`</ph> to <bpt id="p1">**</bpt>-1<ept id="p1">**</ept>.</source>
          <target state="translated">Analogamente, l'operatore C# <ph id="ph1">`(int)`</ph> non supporta la conversione da valore booleano a valore intero, mentre il metodo Visual Basic <ph id="ph2">`CInt`</ph> consente di convertire un valore <ph id="ph3">`true`</ph> in <bpt id="p1">**</bpt>-1<ept id="p1">**</ept>.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>On the other hand, the <bpt id="p1">[</bpt>Convert.ToInt32(Boolean)<ept id="p1">](xref:System.Convert.ToInt32(System.Boolean))</ept> method converts a value of <ph id="ph1">`true`</ph> to <bpt id="p2">**</bpt>1<ept id="p2">**</ept>.</source>
          <target state="translated">Per contro, il metodo <bpt id="p1">[</bpt>Convert.ToInt32(Boolean)<ept id="p1">](xref:System.Convert.ToInt32(System.Boolean))</ept> consente di convertire un valore <ph id="ph1">`true`</ph> in <bpt id="p2">**</bpt>1<ept id="p2">**</ept>.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Most compilers allow explicit conversions to be performed in a checked or unchecked manner.</source>
          <target state="translated">La maggior parte dei compilatori consente l'esecuzione di conversioni esplicite in modalità controllata o non controllata.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>When a checked conversion is performed, an <bpt id="p1">[</bpt>OverflowException<ept id="p1">](xref:System.OverflowException)</ept> is thrown when the value of the type to be converted is outside the range of the target type.</source>
          <target state="translated">Quando viene eseguita una conversione controllata, viene generato un evento <bpt id="p1">[</bpt>OverflowException<ept id="p1">](xref:System.OverflowException)</ept> se il valore del tipo da convertire non rientra nell'intervallo del tipo di destinazione.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>When an unchecked conversion is performed under the same conditions, the conversion might not throw an exception, but the exact behavior becomes undefined and an incorrect value might result.</source>
          <target state="translated">Quando viene eseguita una conversione non controllata nelle stesse condizioni, potrebbe non venire generata un'eccezione, ma il comportamento esatto della conversione risulterà non definito e potrebbe venire restituito un valore non corretto.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>In C#, checked conversions can be performed by using the <ph id="ph1">`checked`</ph> keyword together with a casting operator, or by specifying the <ph id="ph2">`/checked+`</ph> compiler option.</source>
          <target state="translated">In C# è possibile eseguire conversioni controllate utilizzando la parola chiave <ph id="ph1">`checked`</ph> con l'operatore di cast o specificando l'opzione del compilatore <ph id="ph2">`/checked+`</ph>.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Conversely, unchecked conversions can be performed by using the <ph id="ph1">`unchecked`</ph> keyword together with the casting operator, or by specifying the <ph id="ph2">`/checked-`</ph> compiler option.</source>
          <target state="translated">Viceversa, le conversioni in modalità non controllata possono essere eseguite utilizzando la parola chiave <ph id="ph1">`unchecked`</ph> con l'operatore di cast o specificando l'opzione del compilatore <ph id="ph2">`/checked-`</ph>.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>By default, explicit conversions are unchecked.</source>
          <target state="translated">Per impostazione predefinita, le conversioni esplicite vengono eseguite in modalità non controllata.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>In Visual Basic, checked conversions can be performed by specifying the <ph id="ph1">`/removeintchecks-`</ph> compiler option.</source>
          <target state="translated">In Visual Basic, le conversioni controllate possono essere eseguite specificando l'opzione del compilatore <ph id="ph1">`/removeintchecks-`</ph>.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Conversely, unchecked conversions can be performed by specifying the <ph id="ph1">`/removeintchecks+`</ph> compiler option.</source>
          <target state="translated">Per contro, le conversioni non controllate possono essere eseguite specificando l'opzione del compilatore <ph id="ph1">`/removeintchecks+`</ph>.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>By default, explicit conversions are checked.</source>
          <target state="translated">Per impostazione predefinita, le conversioni esplicite vengono eseguite in modalità controllata.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The following C# example uses the <ph id="ph1">`checked`</ph> and <ph id="ph2">`unchecked`</ph> keywords to illustrate the difference in behavior when a value outside the range of a <bpt id="p1">[</bpt>Byte<ept id="p1">](xref:System.Byte)</ept> is converted to a <ph id="ph3">`Byte`</ph>.</source>
          <target state="translated">Nell'esempio C# seguente vengono usate le parole chiave <ph id="ph1">`checked`</ph> e <ph id="ph2">`unchecked`</ph> per illustrare la differenza nel comportamento quando un valore al di fuori dell'intervallo di un tipo <bpt id="p1">[</bpt>Byte<ept id="p1">](xref:System.Byte)</ept> viene convertito in <ph id="ph3">`Byte`</ph>.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The checked conversion throws an exception, but the unchecked conversion assigns <bpt id="p1">[</bpt>Byte.MaxValue<ept id="p1">](xref:System.Byte.MaxValue)</ept> to the <ph id="ph1">`Byte`</ph> variable.</source>
          <target state="translated">La conversione controllata genera un'eccezione, mentre la conversione non controllata assegna <bpt id="p1">[</bpt>Byte.MaxValue<ept id="p1">](xref:System.Byte.MaxValue)</ept> alla variabile <ph id="ph1">`Byte`</ph>.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>If a particular language compiler supports custom overloaded operators, you can also define explicit conversions in your own custom types.</source>
          <target state="translated">Se un determinato compilatore di linguaggio supporta gli operatori di overload personalizzati, è anche possibile definire conversioni esplicite nei tipi personalizzati.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The following example provides a partial implementation of a signed byte data type named <ph id="ph1">`ByteWithSign`</ph> that uses sign-and-magnitude representation.</source>
          <target state="translated">Nell'esempio seguente viene fornita un'implementazione parziale di un tipo di dati Signed Byte denominato <ph id="ph1">`ByteWithSign`</ph> che utilizza la rappresentazione di segno e grandezza.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>It supports explicit conversion of <bpt id="p1">[</bpt>Int32<ept id="p1">](xref:System.Int32)</ept> and <bpt id="p2">[</bpt>UInt32<ept id="p2">](xref:System.UInt32)</ept> values to <ph id="ph1">`ByteWithSign`</ph> values.</source>
          <target state="translated">Il tipo supporta la conversione esplicita di valori <bpt id="p1">[</bpt>Int32<ept id="p1">](xref:System.Int32)</ept> e <bpt id="p2">[</bpt>UInt32<ept id="p2">](xref:System.UInt32)</ept> in valori <ph id="ph1">`ByteWithSign`</ph>.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Client code can then declare a <ph id="ph1">`ByteWithSign`</ph> variable and assign it <bpt id="p1">[</bpt>Int32<ept id="p1">](xref:System.Int32)</ept> and <bpt id="p2">[</bpt>UInt32<ept id="p2">](xref:System.UInt32)</ept> values if the assignments include a casting operator, as the following example shows.</source>
          <target state="translated">Il codice client può quindi dichiarare una variabile <ph id="ph1">`ByteWithSign`</ph> e assegnare a tale variabile valori <bpt id="p1">[</bpt>Int32<ept id="p1">](xref:System.Int32)</ept> e <bpt id="p2">[</bpt>UInt32<ept id="p2">](xref:System.UInt32)</ept> se le assegnazioni includono un operatore di cast o un metodo di conversione, come visualizzato nell'esempio seguente.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The IConvertible interface</source>
          <target state="translated">Interfaccia IConvertible</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>To support the conversion of any type to a common language runtime base type, .NET provides the <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept> interface.</source>
          <target state="translated">Per supportare la conversione di un tipo qualsiasi in un tipo di base Common Language Runtime, in .NET è disponibile l'interfaccia <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept>.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The implementing type is required to provide the following:</source>
          <target state="translated">È necessario che il tipo di implementazione fornisca gli elementi seguenti:</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>A method that returns the <bpt id="p1">[</bpt>TypeCode<ept id="p1">](xref:System.TypeCode)</ept> of the implementing type.</source>
          <target state="translated">Un metodo che restituisce l'oggetto <bpt id="p1">[</bpt>TypeCode<ept id="p1">](xref:System.TypeCode)</ept> del tipo di implementazione.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Methods to convert the implementing type to each common language runtime base type (<bpt id="p1">[</bpt>Boolean<ept id="p1">](xref:System.Boolean)</ept>, <bpt id="p2">[</bpt>Byte<ept id="p2">](xref:System.Byte)</ept>, <bpt id="p3">[</bpt>DateTime<ept id="p3">](xref:System.DateTime)</ept>, <bpt id="p4">[</bpt>Decimal<ept id="p4">](xref:System.Decimal)</ept>, <bpt id="p5">[</bpt>Double<ept id="p5">](xref:System.Double)</ept>, and so on).</source>
          <target state="translated">Metodi per convertire il tipo di implementazione in ognuno dei tipi di base di Common Language Runtime (<bpt id="p1">[</bpt>Boolean<ept id="p1">](xref:System.Boolean)</ept>, <bpt id="p2">[</bpt>Byte<ept id="p2">](xref:System.Byte)</ept>, <bpt id="p3">[</bpt>DateTime<ept id="p3">](xref:System.DateTime)</ept>, <bpt id="p4">[</bpt>Decimal<ept id="p4">](xref:System.Decimal)</ept>, <bpt id="p5">[</bpt>Double<ept id="p5">](xref:System.Double)</ept> e così via).</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>A generalized conversion method to convert an instance of the implementing type to another specified type.</source>
          <target state="translated">Un metodo di conversione generalizzato per convertire un'istanza del tipo di implementazione in un altro tipo specificato.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Conversions that are not supported should throw an <bpt id="p1">[</bpt>InvalidCastException<ept id="p1">](xref:System.InvalidCastException)</ept>.</source>
          <target state="translated">Le conversioni non supportate devono generare un evento <bpt id="p1">[</bpt>InvalidCastException<ept id="p1">](xref:System.InvalidCastException)</ept>.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Each common language runtime base type (that is, the <bpt id="p1">[</bpt>Boolean<ept id="p1">](xref:System.Boolean)</ept>, <bpt id="p2">[</bpt>Byte<ept id="p2">](xref:System.Byte)</ept>, <bpt id="p3">[</bpt>Char<ept id="p3">](xref:System.Char)</ept>, <bpt id="p4">[</bpt>DateTime<ept id="p4">](xref:System.DateTime)</ept>, <bpt id="p5">[</bpt>Decimal<ept id="p5">](xref:System.Decimal)</ept>, <bpt id="p6">[</bpt>Double<ept id="p6">](xref:System.Double)</ept>, <bpt id="p7">[</bpt>Int16<ept id="p7">](xref:System.Int16)</ept>, <bpt id="p8">[</bpt>Int32<ept id="p8">](xref:System.Int32)</ept>, <bpt id="p9">[</bpt>Int64<ept id="p9">](xref:System.Int64)</ept>, <bpt id="p10">[</bpt>SByte<ept id="p10">](xref:System.SByte)</ept>, <bpt id="p11">[</bpt>Single<ept id="p11">](xref:System.Single)</ept>, <bpt id="p12">[</bpt>String<ept id="p12">](xref:System.String)</ept>, <bpt id="p13">[</bpt>UInt16<ept id="p13">](xref:System.UInt16)</ept>, <bpt id="p14">[</bpt>UInt32<ept id="p14">](xref:System.UInt32)</ept>, and <bpt id="p15">[</bpt>UInt64<ept id="p15">](xref:System.UInt64)</ept>, as well as the <bpt id="p16">[</bpt>DBNull<ept id="p16">](xref:System.DBNull)</ept> and <bpt id="p17">[</bpt>Enum<ept id="p17">](xref:System.Enum)</ept> types, implement the <bpt id="p18">[</bpt>IConvertible<ept id="p18">](xref:System.IConvertible)</ept> interface.</source>
          <target state="translated">Tutti i tipi di base di Common Language Runtime (ovvero <bpt id="p1">[</bpt>Boolean<ept id="p1">](xref:System.Boolean)</ept>, <bpt id="p2">[</bpt>Byte<ept id="p2">](xref:System.Byte)</ept>, <bpt id="p3">[</bpt>Char<ept id="p3">](xref:System.Char)</ept>, <bpt id="p4">[</bpt>DateTime<ept id="p4">](xref:System.DateTime)</ept>, <bpt id="p5">[</bpt>Decimal<ept id="p5">](xref:System.Decimal)</ept>, <bpt id="p6">[</bpt>Double<ept id="p6">](xref:System.Double)</ept>, <bpt id="p7">[</bpt>Int16<ept id="p7">](xref:System.Int16)</ept>, <bpt id="p8">[</bpt>Int32<ept id="p8">](xref:System.Int32)</ept>, <bpt id="p9">[</bpt>Int64<ept id="p9">](xref:System.Int64)</ept>, <bpt id="p10">[</bpt>SByte<ept id="p10">](xref:System.SByte)</ept>, <bpt id="p11">[</bpt>Single<ept id="p11">](xref:System.Single)</ept>, <bpt id="p12">[</bpt>String<ept id="p12">](xref:System.String)</ept>, <bpt id="p13">[</bpt>UInt16<ept id="p13">](xref:System.UInt16)</ept>, <bpt id="p14">[</bpt>UInt32<ept id="p14">](xref:System.UInt32)</ept> e <bpt id="p15">[</bpt>UInt64<ept id="p15">](xref:System.UInt64)</ept>, nonché i tipi <bpt id="p16">[</bpt>DBNull<ept id="p16">](xref:System.DBNull)</ept> e <bpt id="p17">[</bpt>Enum<ept id="p17">](xref:System.Enum)</ept> implementano l'interfaccia <bpt id="p18">[</bpt>IConvertible<ept id="p18">](xref:System.IConvertible)</ept>.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>However, these are explicit interface implementations; the conversion method can be called only through an <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept> interface variable, as the following example shows.</source>
          <target state="translated">Si tratta tuttavia di implementazioni esplicite dell'interfaccia: il metodo di conversione può essere chiamato solo tramite una variabile dell'interfaccia <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept>, come visualizzato nell'esempio seguente.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>This example converts an <bpt id="p1">[</bpt>Int32<ept id="p1">](xref:System.Int32)</ept> value to its equivalent <bpt id="p2">[</bpt>Char<ept id="p2">](xref:System.Char)</ept> value.</source>
          <target state="translated">In questo esempio un valore <bpt id="p1">[</bpt>Int32<ept id="p1">](xref:System.Int32)</ept> viene convertito nel valore <bpt id="p2">[</bpt>Char<ept id="p2">](xref:System.Char)</ept> equivalente.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The requirement to call the conversion method on its interface rather than on the implementing type makes explicit interface implementations relatively expensive.</source>
          <target state="translated">Il requisito che il metodo di conversione venga chiamato sull'interfaccia anziché sul tipo di implementazione rende relativamente costose le implementazioni esplicite dell'interfaccia.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Instead, we recommend that you call the appropriate member of the <bpt id="p1">[</bpt>Convert<ept id="p1">](xref:System.Convert)</ept> class to convert between common language runtime base types.</source>
          <target state="translated">In alternativa è consigliabile chiamare il membro appropriato della classe <bpt id="p1">[</bpt>Convert<ept id="p1">](xref:System.Convert)</ept> per eseguire la conversione tra tipi di base di Common Language Runtime.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>For more information, see the next section, <bpt id="p1">[</bpt>The Convert class<ept id="p1">](#the-convert-class)</ept>.</source>
          <target state="translated">Per altre informazioni, vedere la sezione successiva <bpt id="p1">[</bpt>Classe Convert<ept id="p1">](#the-convert-class)</ept>.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>In addition to the <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept> interface and the <bpt id="p2">[</bpt>Convert<ept id="p2">](xref:System.Convert)</ept> class provided by .NET, individual languages may also provide ways to perform conversions.</source>
          <target state="translated">Oltre all'interfaccia <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept> e alla classe <bpt id="p2">[</bpt>Convert<ept id="p2">](xref:System.Convert)</ept> offerte da .NET, nei singoli linguaggi possono essere disponibili altre modalità per eseguire le conversioni.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>For example, C# uses casting operators; Visual Basic uses compiler-implemented conversion functions such as <ph id="ph1">`CType`</ph>, <ph id="ph2">`CInt`</ph>, and <ph id="ph3">`DirectCast`</ph>.</source>
          <target state="translated">In C# vengono ad esempio utilizzati gli operatori di cast mentre in Visual Basic vengono utilizzate funzioni di conversione implementate dal compilatore quali <ph id="ph1">`CType`</ph>, <ph id="ph2">`CInt`</ph> e <ph id="ph3">`DirectCast`</ph>.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>For the most part, the <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept> interface is designed to support conversion between the base types in .NET.</source>
          <target state="translated">L'interfaccia <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept> è principalmente progettata per supportare la conversione tra tipi di base in .NET.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>However, the interface can also be implemented by a custom type to support conversion of that type to other custom types.</source>
          <target state="translated">L'interfaccia può tuttavia anche essere implementata da un tipo personalizzato per supportare la conversione di tale tipo in altri tipi personalizzati.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>For more information, see the section <bpt id="p1">[</bpt>Custom conversions with the ChangeType method<ept id="p1">](#custom-conversions-with-the-changetype-method)</ept> later in this topic.</source>
          <target state="translated">Per altre informazioni, vedere la sezione <bpt id="p1">[</bpt>Conversioni personalizzate con il metodo ChangeType<ept id="p1">](#custom-conversions-with-the-changetype-method)</ept> più avanti in questo argomento.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The Convert class</source>
          <target state="translated">Classe Convert</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Although each base type's <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept> interface implementation can be called to perform a type conversion, calling the methods of the <bpt id="p2">[</bpt>System.Convert<ept id="p2">](xref:System.Convert)</ept> class is the recommended language-neutral way to convert from one base type to another.</source>
          <target state="translated">Benché sia possibile chiamare l'implementazione dell'interfaccia <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept> di ogni tipo di base per eseguire una conversione di tipi, l'approccio indipendente dal linguaggio consigliato per convertire un tipo di base in un altro consiste nel chiamare i metodi della classe <bpt id="p2">[</bpt>System.Convert<ept id="p2">](xref:System.Convert)</ept>.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>In addition, the <bpt id="p1">[</bpt>Convert.ChangeType(Object, Type, IFormatProvider)<ept id="p1">](xref:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider))</ept> method can be used to convert from a specified custom type to another type.</source>
          <target state="translated">È anche possibile usare il metodo <bpt id="p1">[</bpt>Convert.ChangeType(Object, Type, IFormatProvider)<ept id="p1">](xref:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider))</ept> per eseguire la conversione da un tipo personalizzato specificato a un altro.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Conversions between base types</source>
          <target state="translated">Conversioni tra tipi di base</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Convert<ept id="p1">](xref:System.Convert)</ept> class provides a language-neutral way to perform conversions between base types and is available to all languages that target the common language runtime.</source>
          <target state="translated">La classe <bpt id="p1">[</bpt>Convert<ept id="p1">](xref:System.Convert)</ept> consente di eseguire conversioni indipendenti dal linguaggio tra tipi di base ed è disponibile in tutti i linguaggi destinati a Common Language Runtime.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>It provides a complete set of methods for both widening and narrowing conversions, and throws an <bpt id="p1">[</bpt>InvalidCastException<ept id="p1">](xref:System.InvalidCastException)</ept> for conversions that are not supported (such as the conversion of a <bpt id="p2">[</bpt>DateTime<ept id="p2">](xref:System.DateTime)</ept> value to an integer value).</source>
          <target state="translated">Questa classe offre un set completo di metodi per le conversioni verso un tipo di dati più piccolo e per le conversioni verso un tipo di dati più grande e genera un evento <bpt id="p1">[</bpt>InvalidCastException<ept id="p1">](xref:System.InvalidCastException)</ept> per le conversioni non supportate (ad esempio la conversione di un valore <bpt id="p2">[</bpt>DateTime<ept id="p2">](xref:System.DateTime)</ept> in un valore intero).</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Narrowing conversions are performed in a checked context, and an <bpt id="p1">[</bpt>OverflowException<ept id="p1">](xref:System.OverflowException)</ept> is thrown if the conversion fails.</source>
          <target state="translated">Le conversioni verso un tipo di dati più piccolo vengono eseguite in un contesto controllato (checked) e, se la conversione ha esito negativo, viene generato un evento <bpt id="p1">[</bpt>OverflowException<ept id="p1">](xref:System.OverflowException)</ept>.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Because the <bpt id="p1">[</bpt>Convert<ept id="p1">](xref:System.Convert)</ept> class includes methods to convert to and from each base type, it eliminates the need to call each base type's <bpt id="p2">[</bpt>IConvertible<ept id="p2">](xref:System.IConvertible)</ept> explicit interface implementation.</source>
          <target state="translated">Poiché la classe <bpt id="p1">[</bpt>Convert<ept id="p1">](xref:System.Convert)</ept> include metodi per la conversione in e da ogni tipo di base, non occorre chiamare l'implementazione esplicita dell'interfaccia <bpt id="p2">[</bpt>IConvertible<ept id="p2">](xref:System.IConvertible)</ept> di ogni tipo di base.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The following example illustrates the use of the <bpt id="p1">[</bpt>System.Convert<ept id="p1">](xref:System.Convert)</ept> class to perform several widening and narrowing conversions between .NET base types.</source>
          <target state="translated">Nell'esempio seguente viene illustrato l'uso della classe <bpt id="p1">[</bpt>System.Convert<ept id="p1">](xref:System.Convert)</ept> per eseguire diverse conversioni verso un tipo di dati più grande e più piccolo tra tipi di base .NET.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>In some cases, particularly when converting to and from floating-point values, a conversion may involve a loss of precision, even though it does not throw an <bpt id="p1">[</bpt>OverflowException<ept id="p1">](xref:System.OverflowException)</ept>.</source>
          <target state="translated">Talvolta, in particolare nel caso di conversione verso e da valori a virgola mobile, una conversione può comportare una perdita di precisione, anche se non viene generato un evento <bpt id="p1">[</bpt>OverflowException<ept id="p1">](xref:System.OverflowException)</ept>.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The following example illustrates this loss of precision.</source>
          <target state="translated">Nell'esempio seguente viene illustrata questa perdita di precisione.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>In the first case, a <bpt id="p1">[</bpt>Decimal<ept id="p1">](xref:System.Decimal)</ept> value has less precision (fewer significant digits) when it is converted to a <bpt id="p2">[</bpt>Double<ept id="p2">](xref:System.Double)</ept>.</source>
          <target state="translated">Nel primo caso, un valore <bpt id="p1">[</bpt>Decimal<ept id="p1">](xref:System.Decimal)</ept> è meno preciso (meno cifre significative) quando viene convertito in <bpt id="p2">[</bpt>Double<ept id="p2">](xref:System.Double)</ept>.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>In the second case, a <bpt id="p1">[</bpt>Double<ept id="p1">](xref:System.Double)</ept> value is rounded from <bpt id="p2">**</bpt>42.72<ept id="p2">**</ept> to <bpt id="p3">**</bpt>43<ept id="p3">**</ept> in order to complete the conversion.</source>
          <target state="translated">Nel secondo caso, un valore <bpt id="p1">[</bpt>Double<ept id="p1">](xref:System.Double)</ept> viene arrotondato da <bpt id="p2">**</bpt>42,72<ept id="p2">**</ept> a <bpt id="p3">**</bpt>43<ept id="p3">**</ept> per completare la conversione.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>For a table that lists both the widening and narrowing conversions supported by the <bpt id="p1">[</bpt>Convert<ept id="p1">](xref:System.Convert)</ept> class, see <bpt id="p2">[</bpt>Type conversion tables<ept id="p2">](conversion-tables.md)</ept>.</source>
          <target state="translated">Per una tabella che elenca le conversioni verso un tipo di dati più piccolo e più grande supportate dalla classe <bpt id="p1">[</bpt>Convert<ept id="p1">](xref:System.Convert)</ept>, vedere <bpt id="p2">[</bpt>Tabelle di conversione dei tipi<ept id="p2">](conversion-tables.md)</ept>.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Custom conversions with the ChangeType method</source>
          <target state="translated">Conversioni personalizzate con il metodo ChangeType</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>In addition to supporting conversions to each of the base types, the <bpt id="p1">[</bpt>Convert<ept id="p1">](xref:System.Convert)</ept> class can be used to convert a custom type to one or more predefined types.</source>
          <target state="translated">Oltre a supportare le conversioni in ognuno dei tipi di base, la classe <bpt id="p1">[</bpt>Convert<ept id="p1">](xref:System.Convert)</ept> può essere usata per convertire un tipo personalizzato in uno o più tipi predefiniti.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>This conversion is performed by the <bpt id="p1">[</bpt>Convert.ChangeType(Object, Type, IFormatProvider)<ept id="p1">](xref:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider))</ept> method, which in turn wraps a call to the <bpt id="p2">[</bpt>IConvertible.ToType<ept id="p2">](xref:System.IConvertible.ToType(System.Type,System.IFormatProvider))</ept> method of the value parameter.</source>
          <target state="translated">Questa conversione viene eseguita dal metodo <bpt id="p1">[</bpt>Convert.ChangeType(Object, Type, IFormatProvider)<ept id="p1">](xref:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider))</ept>, che a sua volta esegue il wrapping di una chiamata al metodo <bpt id="p2">[</bpt>IConvertible.ToType<ept id="p2">](xref:System.IConvertible.ToType(System.Type,System.IFormatProvider))</ept> del parametro value.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>This means that the object represented by the value parameter must provide an implementation of the <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept> interface.</source>
          <target state="translated">Questo significa che l'oggetto rappresentato dal parametro value deve offrire un'implementazione dell'interfaccia <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept>.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Because the <bpt id="p1">[</bpt>Convert.ChangeType(Object, Type)<ept id="p1">](xref:System.Convert.ChangeType(System.Object,System.Type))</ept> and <bpt id="p2">[</bpt>Convert.ChangeType(Object, Type, IFormatProvider)<ept id="p2">](xref:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider))</ept> methods use a <bpt id="p3">[</bpt>Type<ept id="p3">](xref:System.Type)</ept> object to specify the target type to which value is converted, they can be used to perform a dynamic conversion to an object whose type is not known at compile time.</source>
          <target state="translated">Poiché i metodi <bpt id="p1">[</bpt>Convert.ChangeType(Object, Type)<ept id="p1">](xref:System.Convert.ChangeType(System.Object,System.Type))</ept> e <bpt id="p2">[</bpt>Convert.ChangeType(Object, Type, IFormatProvider)<ept id="p2">](xref:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider))</ept> usano un oggetto <bpt id="p3">[</bpt>Type<ept id="p3">](xref:System.Type)</ept> per specificare il tipo di destinazione in cui viene convertito value, possono essere usati per eseguire una conversione dinamica a un oggetto il cui tipo non è noto in fase di compilazione.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>However, note that the <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept> implementation of value must still support this conversion.</source>
          <target state="translated">Tuttavia, si noti che l'implementazione <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept> di value deve comunque supportare questa conversione.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The following example illustrates a possible implementation of the <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept> interface that allows a <ph id="ph1">`TemperatureCelsius`</ph> object to be converted to a <ph id="ph2">`TemperatureFahrenheit`</ph> object and vice versa.</source>
          <target state="translated">Nell'esempio seguente viene illustrata una possibile implementazione dell'interfaccia <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept> che consente la conversione di un oggetto <ph id="ph1">`TemperatureCelsius`</ph> in un oggetto <ph id="ph2">`TemperatureFahrenheit`</ph> e viceversa.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The example defines a base class, <ph id="ph1">`Temperature`</ph>, that implements the <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept> interface and overrides the <bpt id="p2">[</bpt>Object.ToString<ept id="p2">](xref:System.Object.ToString)</ept> method.</source>
          <target state="translated">Nell'esempio viene definita una classe di base, <ph id="ph1">`Temperature`</ph>, che implementa l'interfaccia <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept> ed esegue l'override del metodo <bpt id="p2">[</bpt>Object.ToString<ept id="p2">](xref:System.Object.ToString)</ept>.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The derived <ph id="ph1">`TemperatureCelsius`</ph> and <ph id="ph2">`TemperatureFahrenheit`</ph> classes each override the <ph id="ph3">`ToType`</ph> and the <ph id="ph4">`ToString`</ph> methods of the base class.</source>
          <target state="translated">Le classi <ph id="ph1">`TemperatureCelsius`</ph> e <ph id="ph2">`TemperatureFahrenheit`</ph> derivate eseguono ognuna l'override dei metodi <ph id="ph3">`ToType`</ph> e <ph id="ph4">`ToString`</ph> della classe di base.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The following example illustrates several calls to these <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept> implementations to convert <ph id="ph1">`TemperatureCelsius`</ph> objects to <ph id="ph2">`TemperatureFahrenheit`</ph> objects and vice versa.</source>
          <target state="translated">Nell'esempio seguente vengono illustrate diverse chiamate a queste implementazioni di <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept> per convertire oggetti <ph id="ph1">`TemperatureCelsius`</ph> in oggetti <ph id="ph2">`TemperatureFahrenheit`</ph> e viceversa.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The TypeConverter class</source>
          <target state="translated">Classe TypeConverter</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>.NET also allows you to define a type converter for a custom type by extending the <bpt id="p1">[</bpt>System.ComponentModel.TypeConverter<ept id="p1">](xref:System.ComponentModel.TypeConverter)</ept> class and associating the type converter with the type through a <bpt id="p2">[</bpt>System.ComponentModel.TypeConverterAttribute<ept id="p2">](xref:System.ComponentModel.TypeConverterAttribute)</ept> attribute.</source>
          <target state="translated">In .NET è anche possibile definire un convertitore di tipi per un tipo personalizzato mediante l'estensione della classe <bpt id="p1">[</bpt>System.ComponentModel.TypeConverter<ept id="p1">](xref:System.ComponentModel.TypeConverter)</ept> e l'associazione del convertitore di tipi al tipo tramite un attributo <bpt id="p2">[</bpt>System.ComponentModel.TypeConverterAttribute<ept id="p2">](xref:System.ComponentModel.TypeConverterAttribute)</ept>.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The following table highlights the differences between this approach and implementing the <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept> interface for a custom type.</source>
          <target state="translated">Nella tabella seguente sono evidenziate le differenze tra questo approccio e l'implementazione dell'interfaccia <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept> per un tipo personalizzato.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Design-time support can be provided for a custom type only if it has a type converter defined for it.</source>
          <target state="translated">È possibile fornire supporto per un tipo personalizzato in fase di progettazione solo se per tale tipo è stato definito un convertitore di tipi.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Conversion using TypeConverter</source>
          <target state="translated">Conversione mediante TypeConverter</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Conversion using IConvertible</source>
          <target state="translated">Conversione mediante IConvertible</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Is implemented for a custom type by deriving a separate class from <bpt id="p1">[</bpt>TypeConverter<ept id="p1">](xref:System.ComponentModel.TypeConverter)</ept>.</source>
          <target state="translated">Implementata per un tipo personalizzato derivando una classe separata da <bpt id="p1">[</bpt>TypeConverter<ept id="p1">](xref:System.ComponentModel.TypeConverter)</ept>.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>This derived class is associated with the custom type by applying a <bpt id="p1">[</bpt>TypeConverterAttribute<ept id="p1">](xref:System.ComponentModel.TypeConverterAttribute)</ept> attribute.</source>
          <target state="translated">Questa classe derivata viene associata al tipo personalizzato applicando un attributo <bpt id="p1">[</bpt>TypeConverterAttribute<ept id="p1">](xref:System.ComponentModel.TypeConverterAttribute)</ept>.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Is implemented by a custom type to perform conversion.</source>
          <target state="translated">Implementata da un tipo personalizzato per eseguire la conversione.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>A user of the type invokes an <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept> conversion method on the type.</source>
          <target state="translated">Un utente di tale tipo chiama sul tipo stesso un metodo di conversione <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept>.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Can be used both at design time and at run time.</source>
          <target state="translated">Utilizzabile sia in fase di progettazione che in fase di esecuzione.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Can be used only at run time.</source>
          <target state="translated">Utilizzabile solo in fase di esecuzione.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Uses reflection; therefore, is slower than conversion enabled by <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept>.</source>
          <target state="translated">Usa la reflection ed è quindi più lenta della conversione consentita da <bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept>.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Does not use reflection.</source>
          <target state="translated">Non utilizza la reflection.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Allows two-way type conversions from the custom type to other data types, and from other data types to the custom type.</source>
          <target state="translated">Consente di eseguire conversioni bidirezionali, dal tipo personalizzato ad altri tipi di dati e da altri tipi di dati al tipo personalizzato.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>For example, a <bpt id="p1">[</bpt>TypeConverter<ept id="p1">](xref:System.ComponentModel.TypeConverter)</ept> defined for <ph id="ph1">`MyType`</ph> allows conversions from <ph id="ph2">`MyType`</ph> to <bpt id="p2">[</bpt>String<ept id="p2">](xref:System.String)</ept>, and from <bpt id="p3">[</bpt>String<ept id="p3">](xref:System.String)</ept> to <ph id="ph3">`MyType`</ph>.</source>
          <target state="translated">Ad esempio, un <bpt id="p1">[</bpt>TypeConverter<ept id="p1">](xref:System.ComponentModel.TypeConverter)</ept> definito per <ph id="ph1">`MyType`</ph> consente le conversioni da <ph id="ph2">`MyType`</ph> a <bpt id="p2">[</bpt>String<ept id="p2">](xref:System.String)</ept> e da <bpt id="p3">[</bpt>String<ept id="p3">](xref:System.String)</ept> a <ph id="ph3">`MyType`</ph>.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Allows conversion from a custom type to other data types, but not from other data types to the custom type.</source>
          <target state="translated">Consente la conversione da un tipo personalizzato ad altri tipi di dati, ma non da altri tipi di dati al tipo personalizzato.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>For more information about using type converters to perform conversions, see <bpt id="p1">[</bpt>System.ComponentModel.TypeConverter<ept id="p1">](xref:System.ComponentModel.TypeConverter)</ept>.</source>
          <target state="translated">Per altre informazioni sull'uso di convertitori di tipi per l'esecuzione di conversioni, vedere <bpt id="p1">[</bpt>System.ComponentModel.TypeConverter<ept id="p1">](xref:System.ComponentModel.TypeConverter)</ept>.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>See also</source>
          <target state="translated">Vedere anche</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.Convert<ept id="p1">](xref:System.Convert)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>System.Convert<ept id="p1">](xref:System.Convert)</ept></target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>IConvertible<ept id="p1">](xref:System.IConvertible)</ept></target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Type conversion tables<ept id="p1">](conversion-tables.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Tabelle di conversione dei tipi<ept id="p1">](conversion-tables.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>