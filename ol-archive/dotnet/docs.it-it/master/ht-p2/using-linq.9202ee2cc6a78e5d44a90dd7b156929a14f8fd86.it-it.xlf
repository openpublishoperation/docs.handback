<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-6a73dd2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0d941d7722353c68051bb761f4b05a6e304291ef</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\using-linq.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p2</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">37f7c80da13d49cc162ccaef9fa38e94e54530a1</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e96eb3810eb31f7770d3225aa9c81ae905d5cc01</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>LINQ (Language Integrated Query)</source>
          <target state="translated">LINQ (Language Integrated Query)</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>LINQ (Language Integrated Query)</source>
          <target state="translated">LINQ (Language Integrated Query)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>LINQ (Language Integrated Query)</source>
          <target state="translated">LINQ (Language Integrated Query)</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>What is it?</source>
          <target state="translated">Descrizione</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>LINQ provides language-level querying capabilities and a <bpt id="p1">[</bpt>higher-order function<ept id="p1">](https://en.wikipedia.org/wiki/Higher-order_function)</ept> API to C# and VB as a way to write expressive, declarative code.</source>
          <target state="translated">LINQ offre funzionalità per eseguire query a livello di linguaggio e un'API con <bpt id="p1">[</bpt>funzione di ordine superiore<ept id="p1">](https://en.wikipedia.org/wiki/Higher-order_function)</ept> per C# e VB che consente di scrivere codice dichiarativo ed espressivo.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Language-level query syntax:</source>
          <target state="translated">Sintassi di query a livello di linguaggio:</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Same example using the <ph id="ph1">`IEnumerable&lt;T&gt;`</ph> API:</source>
          <target state="translated">Stesso esempio usando l'API <ph id="ph1">`IEnumerable&lt;T&gt;`</ph>:</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>LINQ is Expressive</source>
          <target state="translated">LINQ è espressivo</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Imagine you have a list of pets, but want to convert it into a dictionary where you can access a pet directly by its <ph id="ph1">`RFID`</ph> value.</source>
          <target state="translated">Si supponga di avere un elenco di animali domestici e di volerlo convertire in un dizionario nel quale sia possibile accedere a un animale selezionando direttamente il valore <ph id="ph1">`RFID`</ph> corrispondente.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Traditional imperative code:</source>
          <target state="translated">Codice imperativo tradizionale:</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The intention behind the code is not to create a new <ph id="ph1">`Dictionary&lt;int, Pet&gt;`</ph> and add to it via a loop, it is to convert an existing list into a dictionary!</source>
          <target state="translated">Scopo del codice non è creare un nuovo <ph id="ph1">`Dictionary&lt;int, Pet&gt;`</ph> e aggiungerlo tramite un ciclo. Piuttosto è convertire un elenco esistente in un dizionario.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>LINQ preserves the intention whereas the imperative code does not.</source>
          <target state="translated">A differenza del codice imperativo, LINQ consente di rispettare tale intenzione.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Equivalent LINQ expression:</source>
          <target state="translated">Espressione LINQ equivalente:</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The code using LINQ is valuable because it evens the playing field between intent and code when reasoning as a programmer.</source>
          <target state="translated">Il codice che usa LINQ è utile perché mette sullo stesso livello scopo e codice in fase di programmazione.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Another bonus is code brevity.</source>
          <target state="translated">Un altro vantaggio del codice è il fatto che sia conciso.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Imagine reducing large portions of a codebase by 1/3 as done above.</source>
          <target state="translated">È infatti possibile ridurre parti prolisse della codebase di un 1/3 come illustrato in precedenza.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Pretty sweet deal, right?</source>
          <target state="translated">Interessante, vero?</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>LINQ Providers Simplify Data Access</source>
          <target state="translated">I provider LINQ semplificano l'accesso ai dati</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For a significant chunk of software out in the wild, everything revolves around dealing with data from some source (Databases, JSON, XML, etc).</source>
          <target state="translated">Per gran parte dei software in circostanze normali, tutto è basato sulla gestione dei dati da un'origine dati, ad esempio database, JSON, XML e così via.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Often this involves learning a new API for each data source, which can be annoying.</source>
          <target state="translated">Spesso è necessario imparare a conoscere un'API nuova per ogni origine dati, operazione alquanto noiosa.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>LINQ simplifies this by abstracting common elements of data access into a query syntax which looks the same no matter which data source you pick.</source>
          <target state="translated">LINQ semplifica tale processo estraendo gli elementi comuni di accesso ai dati in una sintassi di query simile indipendentemente dal tipo di origine dei dati raccolti.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Consider the following: finding all XML elements with a specific attribute value.</source>
          <target state="translated">Nell'esempio seguente vengono individuati tutti gli elementi XML con un valore dell'attributo specifico.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Writing code to manually traverse the XML document to perform this task would be far more challenging.</source>
          <target state="translated">Scrivere il codice per attraversare manualmente il documento XML ed eseguire tale operazione sarebbe più complicato.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Interacting with XML isn’t the only thing you can do with LINQ Providers.</source>
          <target state="translated">I provider LINQ non consentono solo di interagire con XML.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Linq to SQL<ept id="p1">](https://msdn.microsoft.com/library/bb386976.aspx)</ept> is a fairly bare-bones Object-Relational Mapper (ORM) for an MSSQL Server Database.</source>
          <target state="translated"><bpt id="p1">[</bpt>LINQ to SQL<ept id="p1">](https://msdn.microsoft.com/library/bb386976.aspx)</ept> è un Object-Relational Mapper (ORM) pressoché essenziale per un database del server MSSQL.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>JSON.NET<ept id="p1">](http://www.newtonsoft.com/json/help/html/LINQtoJSON.htm)</ept> library provides efficient JSON Document traversal via LINQ.</source>
          <target state="translated">La libreria <bpt id="p1">[</bpt>JSON.NET<ept id="p1">](http://www.newtonsoft.com/json/help/html/LINQtoJSON.htm)</ept> consente l'attraversamento di un documento JSON tramite LINQ.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Furthermore, if there isn’t a library which does what you need, you can also <bpt id="p1">[</bpt>write your own LINQ Provider<ept id="p1">](https://msdn.microsoft.com/library/Bb546158.aspx)</ept>!</source>
          <target state="translated">Se invece non esiste una libreria adatta, è anche possibile <bpt id="p1">[</bpt>scrivere un provider LINQ personalizzato<ept id="p1">](https://msdn.microsoft.com/library/Bb546158.aspx)</ept>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Why Use the Query Syntax?</source>
          <target state="translated">Perché usare la sintassi di query?</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This is a question which often comes up.</source>
          <target state="translated">È una domanda frequente.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>After all, this,</source>
          <target state="translated">Dopo tutto, questa sintassi</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>is a lot more concise than this:</source>
          <target state="translated">è molto più breve rispetto alla seguente:</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Isn’t the API syntax just a more concise way to do the query syntax?</source>
          <target state="translated">La sintassi dell'API non è un modo più conciso per una sintassi di query?</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>No.</source>
          <target state="translated">No.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The query syntax allows for the use the <bpt id="p1">**</bpt>let<ept id="p1">**</ept> clause, which allows you to introduce and bind a variable within the scope of the expression, using it in subsequent pieces of the expression.</source>
          <target state="translated">La sintassi di query consente di usare la clausola <bpt id="p1">**</bpt>let<ept id="p1">**</ept>, che consente di introdotta e associare una variabile nell'ambito dell'espressione, usandola nelle parti successive dell'espressione.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Reproducing the same code with only the API syntax can be done, but will most likely lead to code which is hard to read.</source>
          <target state="translated">È possibile riprodurre lo stesso codice usando solo la sintassi dell'API, ma il codice risulterebbe di difficile lettura.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>So this begs the question, <bpt id="p1">**</bpt>should you just use the query syntax?<ept id="p1">**</ept></source>
          <target state="translated">Una domanda sorge spontanea. <bpt id="p1">**</bpt>È consigliabile usare solo la sintassi di query?<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The answer to this question is <bpt id="p1">**</bpt>yes<ept id="p1">**</ept> if...</source>
          <target state="translated">La risposta a questa domanda è <bpt id="p1">**</bpt>sì<ept id="p1">**</ept> se...</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Your existing codebase already uses the query syntax</source>
          <target state="translated">La codebase esistente usa già la sintassi di query</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>You need to scope variables within your queries due to complexity</source>
          <target state="translated">È necessario definire l'ambito delle variabili all'interno delle query per motivi di complessità</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>You prefer the query syntax and it won’t distract from your codebase</source>
          <target state="translated">Si preferisce la sintassi di query, che non si distaccherà dalla codebase</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The answer to this question is <bpt id="p1">**</bpt>no<ept id="p1">**</ept> if...</source>
          <target state="translated">La risposta a questa domanda è <bpt id="p1">**</bpt>no<ept id="p1">**</ept> se...</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Your existing codebase already uses the API syntax</source>
          <target state="translated">La codebase esistente usa già la sintassi dell'API</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>You have no need to scope variables within your queries</source>
          <target state="translated">Non è necessario definire l'ambito delle variabili all'interno delle query</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>You prefer the API syntax and it won’t distract from your codebase</source>
          <target state="translated">Si preferisce la sintassi dell'API, che non si distaccherà dalla codebase</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Essential Samples</source>
          <target state="translated">Esempi significativi</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For a truly comprehensive list of LINQ samples, visit <bpt id="p1">[</bpt>101 LINQ Samples<ept id="p1">](https://code.msdn.microsoft.com/101-LINQ-Samples-3fb9811b)</ept>.</source>
          <target state="translated">Per un elenco completo di esempi di LINQ, vedere <bpt id="p1">[</bpt>101 LINQ Samples<ept id="p1">](https://code.msdn.microsoft.com/101-LINQ-Samples-3fb9811b)</ept> (101 esempi di LINQ).</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The following is a quick demonstration of some of the essential pieces of LINQ.</source>
          <target state="translated">Di seguito una rapida dimostrazione di alcune delle parti essenziali di LINQ.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This is in no way comprehensive, as LINQ provides significantly more functionality than what is showcased here.</source>
          <target state="translated">Non è affatto una dimostrazione completa, poiché LINQ offre molte più funzionalità rispetto a quanto viene illustrato di seguito.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The bread and butter - <ph id="ph1">`Where`</ph>, <ph id="ph2">`Select`</ph>, and <ph id="ph3">`Aggregate`</ph>:</source>
          <target state="translated">Essenziali sono <ph id="ph1">`Where`</ph>, <ph id="ph2">`Select`</ph> e <ph id="ph3">`Aggregate`</ph>:</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Flattening a list of lists:</source>
          <target state="translated">Elenco di elenchi bidimensionale:</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Union between two sets (with custom comparator):</source>
          <target state="translated">Unione tra due set, con criteri di confronto personalizzati:</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Intersection between two sets:</source>
          <target state="translated">Intersezione tra due set:</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Ordering:</source>
          <target state="translated">Ordinamento:</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Finally, a more advanced sample: determining if the values of the properties of two instances of the same type are equal (Borrowed and modified from <bpt id="p1">[</bpt>this StackOverflow post<ept id="p1">](http://stackoverflow.com/a/844855)</ept>):</source>
          <target state="translated">Infine, un esempio più avanzato: determinare se i valori delle proprietà di due istanze dello stesso tipo sono uguali. L'esempio è stato preso in prestito e modificato da <bpt id="p1">[</bpt>questo articolo di StackOverflow<ept id="p1">](http://stackoverflow.com/a/844855)</ept>:</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>PLINQ</source>
          <target state="translated">PLINQ</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>PLINQ, or Parallel LINQ, is a parallel execution engine for LINQ expressions.</source>
          <target state="translated">PLINQ o Parallel LINQ è un motore di esecuzione parallela per le espressioni LINQ.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>In other words, a regular LINQ expressions can be trivially parallelized across any number of threads.</source>
          <target state="translated">In altre parole, un'espressione LINQ può essere facilmente parallelizzata su un numero qualsiasi di thread.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>This is accomplished via a call to <ph id="ph1">`AsParallel()`</ph> preceding the expression.</source>
          <target state="translated">Questa operazione viene eseguita chiamando <ph id="ph1">`AsParallel()`</ph>, che precede l'espressione.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Consider the following:</source>
          <target state="translated">Si consideri quanto segue.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>This code will partition <ph id="ph1">`facebookUsers`</ph> across system threads as necessary, sum up the total likes on each thread in parallel, sum the results computed by each thread, and project that result into a nice string.</source>
          <target state="translated">Questo codice, se necessario, crea un partizione di <ph id="ph1">`facebookUsers`</ph> tra i thread del sistema, somma i like totali su ogni thread in parallelo, somma i risultati calcolati da ogni thread e proietta il risultato in una stringa.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>In diagram form:</source>
          <target state="translated">Sotto forma di diagramma:</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>PLINQ diagram</source>
          <target state="translated">Diagramma PLINQ</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Parallelizable CPU-bound jobs which can be easily expressed via LINQ (in other words, are pure functions and have no side effects) are a great candidate for PLINQ.</source>
          <target state="translated">I processi basati su CPU parallelizzabili che possono essere espressi facilmente tramite LINQ, quindi funzioni pure senza effetti collateri, sono i candidati ideali di PLINQ.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>For jobs which <bpt id="p1">_</bpt>do<ept id="p1">_</ept> have a side effect, consider using the <bpt id="p2">[</bpt>Task Parallel Library<ept id="p2">](https://msdn.microsoft.com/library/dd460717.aspx)</ept>.</source>
          <target state="translated">Per i processi <bpt id="p1">_</bpt>con<ept id="p1">_</ept> effetti collaterali, è possibile usare <bpt id="p2">[</bpt>Task Parallel Library<ept id="p2">](https://msdn.microsoft.com/library/dd460717.aspx)</ept>.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Further Resources:</source>
          <target state="translated">Altre risorse:</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>101 LINQ Samples<ept id="p1">](https://code.msdn.microsoft.com/101-LINQ-Samples-3fb9811b)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>101 esempi di LINQ<ept id="p1">](https://code.msdn.microsoft.com/101-LINQ-Samples-3fb9811b)</ept></target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Linqpad<ept id="p1">](https://www.linqpad.net/)</ept>, a playground environment and Database querying engine for C#/F#/VB</source>
          <target state="translated"><bpt id="p1">[</bpt>Linqpad<ept id="p1">](https://www.linqpad.net/)</ept>, un ambiente di sviluppo e un motore di query sul database per C#/F#/VB</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>EduLinq<ept id="p1">](http://codeblog.jonskeet.uk/2011/02/23/reimplementing-linq-to-objects-part-45-conclusion-and-list-of-posts/)</ept>, an e-book for learning how LINQ-to-objects is implemented</source>
          <target state="translated"><bpt id="p1">[</bpt>EduLinq<ept id="p1">](http://codeblog.jonskeet.uk/2011/02/23/reimplementing-linq-to-objects-part-45-conclusion-and-list-of-posts/)</ept>, un e-book per scoprire come implementare LINQ-to-objects</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>