<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-47f9650" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7b3acb4571cddc19520f8534828d94844c9d59e6</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\base-types\compilation.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">55963ba9967fc148f6ecf7debd16aa08f56b79d4</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1464c9812435b68fb5ea64b9bef227f4b1a956e7</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Compilation and reuse in regular expressions</source>
          <target state="translated">正規表現におけるコンパイルと再利用</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Compilation and reuse in regular expressions</source>
          <target state="translated">正規表現におけるコンパイルと再利用</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Compilation and reuse in regular expressions</source>
          <target state="translated">正規表現におけるコンパイルと再利用</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You can optimize the performance of applications that make extensive use of regular expressions by understanding how the regular expression engine compiles expressions and by understanding how regular expressions are cached.</source>
          <target state="translated">正規表現エンジンが式をどのようにコンパイルするか、および正規表現がどのようにキャッシュされるかを理解することで、正規表現を幅広く使用するアプリケーションのパフォーマンスを最適化できます。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This topic discusses both compilation and caching.</source>
          <target state="translated">このトピックでは、コンパイルとキャッシュの両方について説明します。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Compiled Regular Expressions</source>
          <target state="translated">コンパイルされた正規表現</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>By default, the regular expression engine compiles a regular expression to a sequence of internal instructions (these are high-level codes that are different from Microsoft intermediate language, or MSIL).</source>
          <target state="translated">既定では、正規表現エンジンは、内部命令のシーケンス (Microsoft 中間言語 (MSIL) とは異なる高度なコード) に正規表現をコンパイルします。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>When the engine executes a regular expression, it interprets the internal codes.</source>
          <target state="translated">エンジンは、正規表現を実行するときに内部コードを解釈します。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If a <bpt id="p1">[</bpt>Regex<ept id="p1">](xref:System.Text.RegularExpressions.Regex)</ept> object is constructed with the <bpt id="p2">[</bpt>RegexOptions.Compiled<ept id="p2">](xref:System.Text.RegularExpressions.RegexOptions.Compiled)</ept> option, it compiles the regular expression to explicit MSIL code instead of high-level regular expression internal instructions.</source>
          <target state="translated"><bpt id="p2">[</bpt>RegexOptions.Compiled<ept id="p2">](xref:System.Text.RegularExpressions.RegexOptions.Compiled)</ept> オプションを使用して <bpt id="p1">[</bpt>Regex<ept id="p1">](xref:System.Text.RegularExpressions.Regex)</ept> オブジェクトを構築した場合、このオブジェクトは、高度な正規表現の内部命令ではなく明示的な MSIL コードに正規表現をコンパイルします。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This allows .NET's just-in-time (JIT) compiler to convert the expression to native machine code for higher performance.</source>
          <target state="translated">これにより、.NET の Just-In-Time (JIT) コンパイラは、式をネイティブのマシン コードに変換してパフォーマンスを高めることができます。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>However, generated MSIL cannot be unloaded.</source>
          <target state="translated">ただし、生成された MSIL をアンロードすることはできません。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The only way to unload code is to unload an entire application domain (that is, to unload all of your application's code.).</source>
          <target state="translated">コードをアンロードする唯一の方法は、アプリケーション ドメイン全体をアンロードする (つまり、アプリケーションのすべてのコードをアンロードする) ことです。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Effectively, once a regular expression is compiled with the <bpt id="p1">[</bpt>RegexOptions.Compiled<ept id="p1">](xref:System.Text.RegularExpressions.RegexOptions.Compiled)</ept> option, .NET never releases the resources used by the compiled expression, even if the regular expression was created by a <bpt id="p2">[</bpt>Regex<ept id="p2">](xref:System.Text.RegularExpressions.Regex)</ept> object that is itself released to garbage collection.</source>
          <target state="translated">実際には、<bpt id="p1">[</bpt>RegexOptions.Compiled<ept id="p1">](xref:System.Text.RegularExpressions.RegexOptions.Compiled)</ept> オプションを使用して正規表現をコンパイルすると、<bpt id="p2">[</bpt>Regex<ept id="p2">](xref:System.Text.RegularExpressions.Regex)</ept> オブジェクト (それ自体がガベージ コレクションに解放される) によって正規表現が作成された場合でも、.NET は、コンパイルされた式で使用されるリソースを解放することはありません。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You must be careful to limit the number of different regular expressions you compile with the <bpt id="p1">[</bpt>RegexOptions.Compiled<ept id="p1">](xref:System.Text.RegularExpressions.RegexOptions.Compiled)</ept> option to avoid consuming too many resources.</source>
          <target state="translated">リソースを過剰に消費することがないよう、<bpt id="p1">[</bpt>RegexOptions.Compiled<ept id="p1">](xref:System.Text.RegularExpressions.RegexOptions.Compiled)</ept> オプションを使用してコンパイルするさまざまな正規表現の数を慎重に制限する必要があります。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If an application must use a large or unbounded number of regular expressions, each expression should be interpreted, not compiled.</source>
          <target state="translated">アプリケーションで多数または無制限の数の正規表現を使用しなければならない場合は、各式をコンパイルするのではなく、解釈する必要があります。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>However, if a small number of regular expressions are used repeatedly, they should be compiled with <bpt id="p1">[</bpt>RegexOptions.Compiled<ept id="p1">](xref:System.Text.RegularExpressions.RegexOptions.Compiled)</ept> for better performance.</source>
          <target state="translated">ただし、少数の正規表現が繰り返し使用される場合は、パフォーマンスを高めるために <bpt id="p1">[</bpt>RegexOptions.Compiled<ept id="p1">](xref:System.Text.RegularExpressions.RegexOptions.Compiled)</ept> を使用してコンパイルする必要があります。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The Regular Expressions Cache</source>
          <target state="translated">正規表現のキャッシュ</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>To improve performance, the regular expression engine maintains an application-wide cache of compiled regular expressions.</source>
          <target state="translated">パフォーマンスを高めるために、正規表現エンジンは、コンパイルされた正規表現のアプリケーション全体のキャッシュを保持します。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The cache stores regular expression patterns that are used only in static method calls.</source>
          <target state="translated">キャッシュは、静的メソッド呼び出しでのみ使用される正規表現パターンを格納します</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>(Regular expression patterns supplied to instance methods are not cached.) This avoids the need to reparse an expression into high-level byte code each time it is used.</source>
          <target state="translated">(インスタンス メソッドに渡される正規表現パターンはキャッシュされません)。これにより、式を使用するたびに高度なバイト コードに再解析する必要がなくなります。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The maximum number of cached regular expressions is determined by the value of the <ph id="ph1">`static`</ph> (<ph id="ph2">`Shared`</ph> in Visual Basic) <bpt id="p1">[</bpt>Regex.CacheSize<ept id="p1">](xref:System.Text.RegularExpressions.Regex.CacheSize)</ept> property.</source>
          <target state="translated">キャッシュされる正規表現の最大数は、<ph id="ph1">`static`</ph> (Visual Basic では <ph id="ph2">`Shared`</ph>) <bpt id="p1">[</bpt>Regex.CacheSize<ept id="p1">](xref:System.Text.RegularExpressions.Regex.CacheSize)</ept> プロパティの値によって決定されます。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>By default, the regular expression engine caches up to 15 compiled regular expressions.</source>
          <target state="translated">既定では、正規表現エンジンは最大 15 個のコンパイルされた正規表現をキャッシュします。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If the number of compiled regular expressions exceeds the cache size, the least recently used regular expression is discarded and the new regular expression is cached.</source>
          <target state="translated">コンパイルされた正規表現の数がキャッシュ サイズを超えた場合は、最近の使用頻度が最も低い正規表現が破棄され、新しい正規表現がキャッシュされます。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Your application can take advantage of precompiled regular expressions in one of the following two ways:</source>
          <target state="translated">アプリケーションでは、次の&amp;2; つの方法のいずれかでプリコンパイル済みの正規表現を利用できます。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>By using a static method of the <bpt id="p1">[</bpt>Regex<ept id="p1">](xref:System.Text.RegularExpressions.Regex)</ept> object to define the regular expression.</source>
          <target state="translated"><bpt id="p1">[</bpt>Regex<ept id="p1">](xref:System.Text.RegularExpressions.Regex)</ept> オブジェクトの静的メソッドを使用して、正規表現を定義する。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If you are using a regular expression pattern that has already been defined in another static method call, the regular expression engine will retrieve it from the cache.</source>
          <target state="translated">別の静的メソッド呼び出しで既に定義されている正規表現パターンを使用している場合、正規表現エンジンはこれをキャッシュから取得します。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>If not, the engine will compile the regular expression and add it to the cache.</source>
          <target state="translated">そうでない場合、エンジンは正規表現をコンパイルしてキャッシュに追加します。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>By reusing an existing <bpt id="p1">[</bpt>Regex<ept id="p1">](xref:System.Text.RegularExpressions.Regex)</ept> object as long as its regular expression pattern is needed.</source>
          <target state="translated">既存の <bpt id="p1">[</bpt>Regex<ept id="p1">](xref:System.Text.RegularExpressions.Regex)</ept> オブジェクトの正規表現パターンが必要な間、このオブジェクトを再利用する。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Because of the overhead of object instantiation and regular expression compilation, creating and rapidly destroying numerous <bpt id="p1">[</bpt>Regex<ept id="p1">](xref:System.Text.RegularExpressions.Regex)</ept> objects is a very expensive process.</source>
          <target state="translated">オブジェクトのインスタンス化および正規表現のコンパイルのオーバーヘッドが原因となり、さまざまな <bpt id="p1">[</bpt>Regex<ept id="p1">](xref:System.Text.RegularExpressions.Regex)</ept> オブジェクトを作成してすぐに破棄するプロセスは非常にコストがかかります。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For applications that use a large number of different regular expressions, you can optimize performance by using calls to static <bpt id="p1">[</bpt>Regex<ept id="p1">](xref:System.Text.RegularExpressions.Regex)</ept> methods and possibly by increasing the size of the regular expression cache.</source>
          <target state="translated">多数の異なる正規表現を使用するアプリケーションの場合は、静的 <bpt id="p1">[</bpt>Regex<ept id="p1">](xref:System.Text.RegularExpressions.Regex)</ept> メソッドの呼び出しを使用することで、および場合によっては正規表現キャッシュのサイズを大きくすることで、パフォーマンスを最適化できます。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">関連項目</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>.NET regular expressions<ept id="p1">](regular-expressions.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>.NET 正規表現<ept id="p1">](regular-expressions.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>