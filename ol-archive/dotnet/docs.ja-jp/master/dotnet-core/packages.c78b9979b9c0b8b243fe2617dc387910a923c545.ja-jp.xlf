<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0ca64c3" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9cb957973e68129194c998c88e398351b48819ec</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\packages.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a1540136a04d932d6e14de4c38fca2901c1fa40c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">20b4eb0db47e407af02bedba6c10724129d958d1</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Packages, Metapackages and Frameworks</source>
          <target state="translated">パッケージ、メタパッケージ、フレームワーク</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Packages, Metapackages and Frameworks</source>
          <target state="translated">パッケージ、メタパッケージ、フレームワーク</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Packages, Metapackages and Frameworks</source>
          <target state="translated">パッケージ、メタパッケージ、フレームワーク</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>.NET Core is a platform made of NuGet packages.</source>
          <target state="translated">.NET Core は、NuGet パッケージで作成されたプラットフォームです。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Some product experiences benefit from fine-grained definition of packages while others from coarse-grained.</source>
          <target state="translated">製品のエクスペリエンスには、粒度の細かいパッケージの定義から恩恵を受けるものもあれば、粒度の粗いパッケージの定義から恩恵を受けるものもあります。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>To accommodate this duality, the product is distributed as a fine-grained set of packages and then described in coarser chunks with a package type informally called a "metapackage".</source>
          <target state="translated">この二重性に対応するために、製品は、粒度の細かいパッケージ セットとして配布され、俗に "メタパッケージ" と呼ばれるパッケージの種類を使用して粒度の粗いチャンク単位で記述されます。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Each of the .NET Core packages support being run on multiple .NET runtimes, represented as frameworks.</source>
          <target state="translated">各 .NET Core パッケージは、フレームワークとして表現される、複数の .NET ランタイムでの実行に対応しています。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Some of those frameworks are traditional frameworks, like <ph id="ph1">`net46`</ph>, representing the .NET Framework.</source>
          <target state="translated">このようなフレームワークには、<ph id="ph1">`net46`</ph> (.NET Framework に相当する) のような従来のフレームワークもあれば、</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Another set is new frameworks that can be thought of as "package-based frameworks", which establish a new model for defining frameworks.</source>
          <target state="translated">フレームワークを定義するために新しいモデルを確立し、"パッケージ ベースのフレームワーク" と見なすことができる新しいフレームワークもあります。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>These package-based frameworks are entirely formed and defined as packages, forming a strong relationship between packages and frameworks.</source>
          <target state="translated">パッケージ ベースのフレームワークは、完全にパッケージとして形成および定義されるので、パッケージとフレームワークの間に強力なリレーションシップが形成されます。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Packages</source>
          <target state="translated">パッケージ</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>.NET Core is split into a set of packages, which provide primitives, higher-level data types, app composition types and common utilities.</source>
          <target state="translated">.NET core は、プリミティブ、上位レベルのデータ型、アプリ コンポジション型、および一般的なユーティリティを提供する一連のパッケージに分割されます。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Each of these packages represent a single assembly of the same name.</source>
          <target state="translated">これらのパッケージはいずれも、同じ名前の単一アセンブリです。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For example, <bpt id="p1">[</bpt>System.Runtime<ept id="p1">](https://www.nuget.org/packages/System.Runtime)</ept> contains System.Runtime.dll.</source>
          <target state="translated">たとえば、<bpt id="p1">[</bpt>System.Runtime<ept id="p1">](https://www.nuget.org/packages/System.Runtime)</ept> には、System.Runtime.dll が含まれています。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>There are advantages to defining packages in a fine-grained manner:</source>
          <target state="translated">粒度の細かい方法でパッケージを定義することには、次の利点があります。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Fine-grained packages can ship on their own schedule with relatively limited testing of other packages.</source>
          <target state="translated">粒度の細かいパッケージの場合は、ほかのパッケージのテストが比較的に抑えられるので、独自のスケジュールに合わせて配布することができます。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Fine-grained packages can provide differing OS and CPU support.</source>
          <target state="translated">粒度の細かいパッケージでは、さまざまな OS および CPU をサポートできます。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Fine-grained packages can have dependencies specific to only one library.</source>
          <target state="translated">粒度の細かいパッケージは、1 つライブラリのみに固有の依存関係を持つことができます。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Apps are smaller because unreferenced packages don't become part of the app distribution.</source>
          <target state="translated">アプリ配布の対象に未参照のパッケージが含まれないので、アプリのサイズが小さくなります。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Some of these benefits are only used in certain circumstances.</source>
          <target state="translated">これらの利点の一部は、特定の状況でのみ使用されます。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For example, NET Core packages will typically ship on the same schedule with the same platform support.</source>
          <target state="translated">たとえば、NET Core パッケージは、通常、同じプラットフォーム サポートを使用して、同じスケジュールで配布されます。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In the case of servicing, fixes can be distributed and installed as small single package updates.</source>
          <target state="translated">サポートを行う場合は、修正プログラムをサイズの小さな単一のパッケージ更新プログラムとして配布およびインストールすることができます。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Due to the narrow scope of change, the validation and time to make a fix available is limited to what is needed for a single library.</source>
          <target state="translated">変更の範囲が狭いため、検証と修正プログラムを使用できるようにするまでの時間は、単一のライブラリで必要とされる内容に限定されます。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The following is a list of the key NuGet packages for .NET Core:</source>
          <target state="translated">.NET Core 用の主な NuGet パッケージを次に一覧します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.Runtime<ept id="p1">](https://www.nuget.org/packages/System.Runtime)</ept> - The most fundamental .NET Core package, including <bpt id="p2">[</bpt>Object<ept id="p2">](http://docs.microsoft.com/dotnet/core/api/System.Object)</ept>, <bpt id="p3">[</bpt>String<ept id="p3">](http://docs.microsoft.com/dotnet/core/api/System.String)</ept>, <bpt id="p4">[</bpt>Array<ept id="p4">](http://docs.microsoft.com/dotnet/core/api/System.Array)</ept>, <bpt id="p5">[</bpt>Action<ept id="p5">](http://docs.microsoft.com/dotnet/core/api/System.Action)</ept> and <bpt id="p6">[</bpt>IList<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph><ept id="p6">](http://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.IList-1)</ept>.</source>
          <target state="translated"><bpt id="p1">[</bpt>System.Runtime<ept id="p1">](https://www.nuget.org/packages/System.Runtime)</ept> - 最も基本的な .NET Core パッケージです。<bpt id="p2">[</bpt>Object<ept id="p2">](http://docs.microsoft.com/dotnet/core/api/System.Object)</ept>、<bpt id="p3">[</bpt>String<ept id="p3">](http://docs.microsoft.com/dotnet/core/api/System.String)</ept>、<bpt id="p4">[</bpt>Array<ept id="p4">](http://docs.microsoft.com/dotnet/core/api/System.Array)</ept>、<bpt id="p5">[</bpt>Action<ept id="p5">](http://docs.microsoft.com/dotnet/core/api/System.Action)</ept>、<bpt id="p6">[</bpt>IList<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph><ept id="p6">](http://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.IList-1)</ept> などがあります。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.Collections<ept id="p1">](https://www.nuget.org/packages/System.Collections)</ept> - A set of (primarily) generic collections, including <bpt id="p2">[</bpt>List<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph><ept id="p2">](http://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.List-1)</ept> and <bpt id="p3">[</bpt>Dictionary<ph id="ph3">&amp;lt;</ph>K,V<ph id="ph4">&amp;gt;</ph><ept id="p3">](http://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.Dictionary-2)</ept>.</source>
          <target state="translated"><bpt id="p1">[</bpt>System.Collections<ept id="p1">](https://www.nuget.org/packages/System.Collections)</ept> - (主な) ジェネリック コレクションのセットです。<bpt id="p2">[</bpt>List<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph><ept id="p2">](http://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.List-1)</ept> や <bpt id="p3">[</bpt>Dictionary<ph id="ph3">&amp;lt;</ph>K,V<ph id="ph4">&amp;gt;</ph><ept id="p3">](http://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.Dictionary-2)</ept> などがあります。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.Net.Http<ept id="p1">](https://www.nuget.org/packages/System.Net.Http)</ept> - A set of types for HTTP network communication, including <bpt id="p2">[</bpt>HttpClient<ept id="p2">](http://docs.microsoft.com/dotnet/core/api/System.Net.Http.HttpClient)</ept> and <bpt id="p3">[</bpt>HttpResponseMessage<ept id="p3">](http://docs.microsoft.com/dotnet/core/api/System.Net.Http.HttpResponseMessage)</ept>.</source>
          <target state="translated"><bpt id="p1">[</bpt>System.Net.Http<ept id="p1">](https://www.nuget.org/packages/System.Net.Http)</ept> - HTTP ネットワーク通信の種類のセットです。<bpt id="p2">[</bpt>HttpClient<ept id="p2">](http://docs.microsoft.com/dotnet/core/api/System.Net.Http.HttpClient)</ept> や <bpt id="p3">[</bpt>HttpResponseMessage<ept id="p3">](http://docs.microsoft.com/dotnet/core/api/System.Net.Http.HttpResponseMessage)</ept> などがあります。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.IO.FileSystem<ept id="p1">](https://www.nuget.org/packages/System.IO.FileSystem)</ept> - A set of types for reading and writing to local or networked disk-based storage, including <bpt id="p2">[</bpt>File<ept id="p2">](http://docs.microsoft.com/dotnet/core/api/System.IO.File)</ept> and <bpt id="p3">[</bpt>Directory<ept id="p3">](http://docs.microsoft.com/dotnet/core/api/System.IO.Directory)</ept>.</source>
          <target state="translated"><bpt id="p1">[</bpt>System.IO.FileSystem<ept id="p1">](https://www.nuget.org/packages/System.IO.FileSystem)</ept> - ローカルまたはネットワークに接続されたディスク ベースの記憶域に対する読み取りおよび書き込みの種類のセットです。<bpt id="p2">[</bpt>File<ept id="p2">](http://docs.microsoft.com/dotnet/core/api/System.IO.File)</ept> や <bpt id="p3">[</bpt>Directory<ept id="p3">](http://docs.microsoft.com/dotnet/core/api/System.IO.Directory)</ept> などがあります。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.Linq<ept id="p1">](https://www.nuget.org/packages/System.Linq)</ept> - A set of types for querying objects, including Enumerable and <bpt id="p2">[</bpt>ILookup<ph id="ph1">&amp;lt;</ph>TKey, TElement<ph id="ph2">&amp;gt;</ph><ept id="p2">](http://docs.microsoft.com/dotnet/core/api/System.Linq.ILookup-2)</ept>.</source>
          <target state="translated"><bpt id="p1">[</bpt>System.Linq<ept id="p1">](https://www.nuget.org/packages/System.Linq)</ept> - オブジェクトに対するクエリの種類のセットです。Enumerable や <bpt id="p2">[</bpt>ILookup<ph id="ph1">&amp;lt;</ph>TKey, TElement<ph id="ph2">&amp;gt;</ph><ept id="p2">](http://docs.microsoft.com/dotnet/core/api/System.Linq.ILookup-2)</ept> などがあります。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.Reflection<ept id="p1">](https://www.nuget.org/packages/System.Reflection)</ept> - A set of types for loading, inspecting and activating types, including <bpt id="p2">[</bpt>Assembly<ept id="p2">](http://docs.microsoft.com/dotnet/core/api/System.Reflection.Assembly)</ept>, <bpt id="p3">[</bpt>TypeInfo<ept id="p3">](http://docs.microsoft.com/dotnet/core/api/System.Reflection.TypeInfo)</ept> and <bpt id="p4">[</bpt>MethodInfo<ept id="p4">](http://docs.microsoft.com/dotnet/core/api/System.Reflection.MethodInfo)</ept>.</source>
          <target state="translated"><bpt id="p1">[</bpt>System.Reflection<ept id="p1">](https://www.nuget.org/packages/System.Reflection)</ept> - 読み込み、検査、およびアクティブ化の種類のセットです。<bpt id="p2">[</bpt>Assembly<ept id="p2">](http://docs.microsoft.com/dotnet/core/api/System.Reflection.Assembly)</ept>、<bpt id="p3">[</bpt>TypeInfo<ept id="p3">](http://docs.microsoft.com/dotnet/core/api/System.Reflection.TypeInfo)</ept>、<bpt id="p4">[</bpt>MethodInfo<ept id="p4">](http://docs.microsoft.com/dotnet/core/api/System.Reflection.MethodInfo)</ept> などがあります。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Typically, rather than including packages in your projects on a package-by-package basis, it is far easier to include a <bpt id="p1">*</bpt>metapackage<ept id="p1">*</ept>, which is a set of packages that are often used together.</source>
          <target state="translated">一般的に、パッケージ単位でパッケージをプロジェクトに追加するより、<bpt id="p1">*</bpt>メタパッケージ<ept id="p1">*</ept>を追加する方がずっと簡単です。メタパッケージとは、よく一緒に使われるパッケージをセットにしたものです。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>(For more information on metapackages, see the following section.) However, when you need a single package, you can include it as in the example below, which references the <bpt id="p1">[</bpt>System.Runtime<ept id="p1">](https://www.nuget.org/packages/System.Runtime/)</ept> package.</source>
          <target state="translated">(メタパッケージの詳細については、次のセクションを参照してください。)ただし、単一のパッケージが必要な場合、下の例のように追加できます。<bpt id="p1">[</bpt>System.Runtime<ept id="p1">](https://www.nuget.org/packages/System.Runtime/)</ept> パッケージを参照しています。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Metapackages</source>
          <target state="translated">メタパッケージ</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Metapackages are a NuGet package convention for describing a set of packages that are meaningful together.</source>
          <target state="translated">メタパッケージは、統合して意味をなすパッケージ セットを記述するための NuGet パッケージの規則です。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>They represent this set of packages by making them dependencies.</source>
          <target state="translated">メタパッケージでは、パッケージ間に依存関係を設定して、パッケージ セットを表現します。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>They can optionally establish a framework for this set of packages by specifying a framework.</source>
          <target state="translated">メタパッケージでは必要に応じて、フレームワークを指定して、このパッケージ セットのフレームワークを確立することができます。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Previous versions of the .NET Core tools (both project.json and csproj-based tools) by default specified both a framework and a metapackage.</source>
          <target state="translated">.NET Core ツールの以前のバージョンは (project.json ツールと csproj-based ツールの両方)、既定では、フレームワークとメタパッケージの両方を指定していました。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Currently, however, the metapackage is implicitly referenced by the target framework, so that each metapackage is tied to a target framework.</source>
          <target state="translated">ただし、現時点では、各メタパッケージがターゲット フレームワークに関連付けられるように、ターゲット フレームワークによってメタパッケージが暗黙的に参照されます。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">`netstandard1.6`</ph> framework references the NetStandard.Library version 1.6.0 metapackage.</source>
          <target state="translated">たとえば、<ph id="ph1">`netstandard1.6`</ph> フレームワークは NetStandard.Library バージョン 1.6.0 メタパッケージを参照します。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Similarly, the <ph id="ph1">`netcoreapp1.1`</ph> framework references the Microsoft.NETCore.App Version 1.1.0 metapackage.</source>
          <target state="translated">同様に、<ph id="ph1">`netcoreapp1.1`</ph> フレームワークは Microsoft.NETCore.App バージョン 1.1.0 メタパッケージを参照します。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Implicit metapackage package reference in the .NET Core SDK<ept id="p1">](https://github.com/dotnet/core/blob/master/release-notes/1.0/sdk/1.0-rc3-implicit-package-refs.md)</ept>.</source>
          <target state="translated">詳細については、「<bpt id="p1">[</bpt>Implicit metapackage package reference in the .NET Core SDK<ept id="p1">](https://github.com/dotnet/core/blob/master/release-notes/1.0/sdk/1.0-rc3-implicit-package-refs.md)</ept>」 (.NET Core SDK のメタパッケージの暗黙的パッケージ参照) を参照してください。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Targeting a framework and implicitly referencing a metapackage means that you in effect are adding a reference to each of its dependent packages as a single gesture.</source>
          <target state="translated">フレームワークをターゲットにし、メタパッケージを暗黙的に参照することは、各依存パッケージの参照を&amp;1; つのジェスチャとして追加することを実質的に意味します。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>That makes all of the libraries in those packages available for IntelliSense (or similar experience) and for publishing your app.</source>
          <target state="translated">これらのパッケージのライブラリはすべて、IntelliSense (または同様のエクスペリエンス) とアプリの公開で利用できます。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>There are advantages to using metapackages:</source>
          <target state="translated">メタパッケージを使用する利点は次のとおりです。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Provides a convenient user experience to reference a large set of fine-grained packages.</source>
          <target state="translated">一連の粒度の細かいパッケージを参照するのに便利なユーザー エクスペリエンスを提供できます。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Defines a set of packages (including specific versions) that are tested and work well together.</source>
          <target state="translated">テストされ一体となって優れた機能を発揮するパッケージ セット (特定のバージョンを含む) を定義できます。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The .NET Standard Library metapackage is:</source>
          <target state="translated">.NET Standard Library のメタパッケージ:</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>NETStandard.Library<ept id="p1">](https://www.nuget.org/packages/NETStandard.Library)</ept> - Describes the libraries that are part of the ".NET Standard Library".</source>
          <target state="translated"><bpt id="p1">[</bpt>NETStandard.Library<ept id="p1">](https://www.nuget.org/packages/NETStandard.Library)</ept> - ".NET Standard Library" に含まれるライブラリについて記述します。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Applies to all .NET implementations (for example, .NET Framework, .NET Core and Mono) that support the .NET Standard Library.</source>
          <target state="translated">.NET Standard Library をサポートするすべての .NET 実装 (.NET Framework、.NET Core および Mono など) に適用されます。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Establishes the 'netstandard' framework.</source>
          <target state="translated">"netstandard" フレームワークを確立します。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The key .NET Core metapackages are:</source>
          <target state="translated">主な .NET Core メタパッケージ:</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Microsoft.NETCore.App<ept id="p1">](https://www.nuget.org/packages/Microsoft.NETCore.App)</ept> - Describes the libraries that are part of the .NET Core distribution.</source>
          <target state="translated"><bpt id="p1">[</bpt>Microsoft.NETCore.App<ept id="p1">](https://www.nuget.org/packages/Microsoft.NETCore.App)</ept> - .NET Core 配布に含まれるライブラリについて記述します。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Establishes the <bpt id="p1">[</bpt><ph id="ph1">`.NETCoreApp`</ph> framework<ept id="p1">](https://github.com/dotnet/core-setup/blob/master/pkg/projects/Microsoft.NETCore.App/Microsoft.NETCore.App.pkgproj)</ept>.</source>
          <target state="translated"><bpt id="p1">[</bpt><ph id="ph1">`.NETCoreApp`</ph> フレームワーク<ept id="p1">](https://github.com/dotnet/core-setup/blob/master/pkg/projects/Microsoft.NETCore.App/Microsoft.NETCore.App.pkgproj)</ept>を確立します。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Depends on the smaller <ph id="ph1">`NETStandard.Library`</ph>.</source>
          <target state="translated">よりサイズの小さな <ph id="ph1">`NETStandard.Library`</ph> に依存します。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Microsoft.NETCore.Portable.Compatibility<ept id="p1">](https://www.nuget.org/packages/Microsoft.NETCore.Portable.Compatibility)</ept> - A set of compatibility facades that enable mscorlib-based Portable Class Libraries (PCLs) to run on .NET Core.</source>
          <target state="translated"><bpt id="p1">[</bpt>Microsoft.NETCore.Portable.Compatibility<ept id="p1">](https://www.nuget.org/packages/Microsoft.NETCore.Portable.Compatibility)</ept> - mscorlib ベースのポータブル クラス ライブラリ (PCL) を .NET Core で実行できるようにするための互換性ファサードのセットです。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Frameworks</source>
          <target state="translated">フレームワーク</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>.NET Core packages each support a set of runtime frameworks.</source>
          <target state="translated">.NET Core の各パッケージでは、一連のランタイム フレームワークがサポートされます。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Frameworks describe an available API set (and potentially other characteristics) that you can rely on when you target a given framework.</source>
          <target state="translated">フレームワークでは、特定のフレームワークを対象とするときに依存することができる使用可能な API セット (および、場合によってはその他の特性) について記述します。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>They are versioned as new APIs are added.</source>
          <target state="translated">フレームワークのバージョンは、新しい API が追加されると更新されます。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>For example, <bpt id="p1">[</bpt>System.IO.FileSystem<ept id="p1">](https://www.nuget.org/packages/System.IO.FileSystem)</ept> supports the following frameworks:</source>
          <target state="translated">たとえば、 <bpt id="p1">[</bpt>System.IO.FileSystem<ept id="p1">](https://www.nuget.org/packages/System.IO.FileSystem)</ept> では、次のフレームワークをサポートします。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>.NETFramework,Version=4.6</source>
          <target state="translated">.NETFramework,Version=4.6</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>.NETStandard,Version=1.3</source>
          <target state="translated">.NETStandard,Version=1.3</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>6 Xamarin platforms (for example, xamarinios10)</source>
          <target state="translated">6 Xamarin プラットフォーム (xamarinios10 など)</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>It is useful to contrast the first two of these frameworks, since they are examples of the two different ways that frameworks are defined.</source>
          <target state="translated">上記フレームワークの最初の&amp;2; つの例は、フレームワークの&amp;2; 種類の定義方法を示したものであるので、この&amp;2; つを比べることには意義があります。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`.NETFramework,Version=4.6`</ph> framework represents the available APIs in the .NET Framework 4.6.</source>
          <target state="translated"><ph id="ph1">`.NETFramework,Version=4.6`</ph> フレームワークは、.NET Framework 4.6 で使用できる API を表します。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>You can produce libraries  compiled with the .NET Framework 4.6 reference assemblies and then distribute those libraries in NuGet packages in a net46 lib folder.</source>
          <target state="translated">.NET Framework 4.6 参照アセンブリでコンパイルされたライブラリを生成し、NuGet パッケージの net46 lib フォルダーに置かれているそれらのライブラリを配布することができます。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>It will be used for apps that target the .NET Framework 4.6 or that are compatible with it.</source>
          <target state="translated">このフレームワークは、.NET Framework 4.6 を対象とするアプリ、または .NET Framework 4.6 と互換性のあるアプリで使用されます。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>This is how all frameworks have traditionally worked.</source>
          <target state="translated">これは、すべてのフレームワークの従来のしくみです。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`.NETStandard,Version=1.3`</ph> framework is a package-based framework.</source>
          <target state="translated"><ph id="ph1">`.NETStandard,Version=1.3`</ph> フレームワークは、パッケージ ベースのフレームワークです。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>It relies on packages that target the framework to define and expose APIs in terms of the framework.</source>
          <target state="translated">これは、フレームワークに関して API を定義して公開するためにフレームワークを対象とするパッケージに依存します。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Package-based Frameworks</source>
          <target state="translated">パッケージ ベースのフレームワーク</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>There is a two-way relationship between frameworks and packages.</source>
          <target state="translated">フレームワークとパッケージの間には双方向のリレーションシップがあります。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The first part is defining the APIs available for a given framework, for example <ph id="ph1">`netstandard1.3`</ph>.</source>
          <target state="translated">リレーションシップの&amp;1; 番目の部分は、特定のフレームワーク (<ph id="ph1">`netstandard1.3`</ph> など) で使用可能な API を定義することです。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Packages that target <ph id="ph1">`netstandard1.3`</ph> (or compatible frameworks, like <ph id="ph2">`netstandard1.0`</ph>) define the APIs available for <ph id="ph3">`netstandard1.3`</ph>.</source>
          <target state="translated"><ph id="ph1">`netstandard1.3`</ph> (または<ph id="ph2">`netstandard1.0`</ph> のような互換性のあるフレームワーク) を対象とするパッケージは、<ph id="ph3">`netstandard1.3`</ph> で使用可能な API を定義します。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>That may sound like a circular definition, but it isn't.</source>
          <target state="translated">循環定義のように思われるかもしれませんが、そうではありません。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>By virtue of being "package-based", the API definition for the framework comes from packages.</source>
          <target state="translated">"パッケージ ベース" であるため、フレームワークの API 定義は、パッケージから取得されます。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The framework itself doesn't define any APIs.</source>
          <target state="translated">フレームワーク自体で、API の定義は行われません。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The second part of the relationship is asset selection.</source>
          <target state="translated">リレーションシップの&amp;2; 番目の部分は、資産の選択です。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Packages can contain assets for multiple frameworks.</source>
          <target state="translated">パッケージには、複数のフレームワークの資産を含めることができます。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Given a reference to a set of packages and/or metapackages, the framework is needed to determine which asset should be selected, for example <ph id="ph1">`net46`</ph> or <ph id="ph2">`netstandard1.3`</ph>.</source>
          <target state="translated">パッケージ セットおよび/またはメタパッケージ セットへの参照を指定する場合は、選択すべき資産 (たとえば、<ph id="ph1">`net46`</ph> または <ph id="ph2">`netstandard1.3`</ph>) を決定するためにフレームワークが必要です。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>It is important to select the correct asset.</source>
          <target state="translated">正しい資産を選択することが重要です。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>For example, a <ph id="ph1">`net46`</ph> asset is not likely to be compatible with .NET Framework 4.0 or .NET Core 1.0.</source>
          <target state="translated">たとえば、<ph id="ph1">`net46`</ph> 資産が .NET Framework 4.0 または .NET Core 1.0 と互換性を持たない可能性があります。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Package-based Framework Composition</source>
          <target state="translated">パッケージ ベースのフレームワークのコンポジション</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>You can see this relationship in the image above.</source>
          <target state="translated">このリレーションシップは上図のようになります。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>API<ept id="p1">*</ept> targets and defines the <bpt id="p2">*</bpt>framework<ept id="p2">*</ept>.</source>
          <target state="translated"><bpt id="p1">*</bpt>API<ept id="p1">*</ept> は、<bpt id="p2">*</bpt>フレームワーク<ept id="p2">*</ept>を対象とし、定義します。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>framework<ept id="p1">*</ept> is used for <bpt id="p2">*</bpt>asset selection<ept id="p2">*</ept>.</source>
          <target state="translated"><bpt id="p1">*</bpt>フレームワーク<ept id="p1">*</ept>は、<bpt id="p2">*</bpt>資産の選択<ept id="p2">*</ept>で使用されます。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>asset<ept id="p1">*</ept> gives you the API.</source>
          <target state="translated"><bpt id="p1">*</bpt>資産<ept id="p1">*</ept> は、API を提供します。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The two primary package-based frameworks used with .NET Core are:</source>
          <target state="translated">.NET Core では、次の&amp;2; つのパッケージ ベースのプライマリ フレームワークが使用されます。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>.NET Standard</source>
          <target state="translated">.NET Standard</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The .NET Standard (target framework moniker: <ph id="ph1">`netstandard`</ph>) framework represents the APIs defined by and built on top of the <bpt id="p1">[</bpt>.NET Standard Library<ept id="p1">](../standard/library.md)</ept>.</source>
          <target state="translated">.NET Standard (ターゲット フレームワーク モニカー: <ph id="ph1">`netstandard`</ph>) フレームワークは、<bpt id="p1">[</bpt>.NET Standard Library<ept id="p1">](../standard/library.md)</ept> によって定義され、.NET Standard Library の上に構築された API を表します。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Libraries that are intended to run on multiple runtimes should target this framework.</source>
          <target state="translated">複数のランタイムでの実行を意図したライブラリは、このフレームワークを対象とする必要があります。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>They will be supported on any .NET Standard compliant runtime, such as .NET Core, .NET Framework and Mono/Xamarin.</source>
          <target state="translated">それらのライブラリは、.NET Core、.NET Framework、Mono/Xamarin など、.NET Standard 準拠のランタイムでサポートされます。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Each of these runtimes supports a set of .NET Standard versions, depending on which APIs they implement.</source>
          <target state="translated">このようなランタイムはそれぞれが、実装される API に応じて、一連の .NET Standard バージョンをサポートします。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`netstandard`</ph> framework implicitly references the <ph id="ph2">`NETStandard.Library`</ph> metapackage.</source>
          <target state="translated"><ph id="ph1">`netstandard`</ph> フレームワークは <ph id="ph2">`NETStandard.Library`</ph> メタパッケージを暗黙的に参照します。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>For example, the following MSBuild project file indicates that the project targets <ph id="ph1">`netstandard1.6`</ph>, which references the .NET Standard Library version 1.6 metapackage.</source>
          <target state="translated">たとえば、次の MSBuild プロジェクト ファイルは、プロジェクトが <ph id="ph1">`netstandard1.6`</ph> をターゲットにすることを示します。これは .NET Standard Library バージョン 1.6 メタパッケージを参照します。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>However, the framework and metapackage references in the project file do not need to match, and you can use the <ph id="ph1">`&lt;NetStandardImplicitPackageVersion&gt;`</ph> element in your project file to specify a framework version that is lower than the metapackage version.</source>
          <target state="translated">ただし、プロジェクト ファイルのフレームワーク参照とメタパッケージ参照が一致する必要はありません。プロジェクト ファイルの <ph id="ph1">`&lt;NetStandardImplicitPackageVersion&gt;`</ph> 要素を利用し、メタパッケージ バージョンより下のフレームワーク バージョンを指定できます。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>For example, the following project file is valid.</source>
          <target state="translated">たとえば、次のプロジェクト ファイルが有効です。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>It may seem strange to target <ph id="ph1">`netstandard1.3`</ph> but use the 1.6.0 version of <ph id="ph2">`NETStandard.Library`</ph>.</source>
          <target state="translated"><ph id="ph1">`netstandard1.3`</ph> を対象とするのに <ph id="ph2">`NETStandard.Library`</ph> のバージョン 1.6.0 を使用するのは、奇妙に思えるかもしれません。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>It is a valid use-case, since the metapackage maintains support for older <ph id="ph1">`netstandard`</ph> versions.</source>
          <target state="translated">これは、メタパッケージでは古い <ph id="ph1">`netstandard`</ph> バージョンのサポートが継続されていることから、使用例として有効です。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>It could be the case you've standardized on the 1.6.0 version of the metapackage and use it for all your libraries, which target a variety of <ph id="ph1">`netstandard`</ph> versions.</source>
          <target state="translated">メタパッケージのバージョン 1.6.0 が標準とされている状況で、これをすべてのライブラリ (<ph id="ph1">`netstandard`</ph> の各種バージョンを対象とする) で使用する場合が考えられます。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>With this approach, you only need to restore <ph id="ph1">`NETStandard.Library`</ph> 1.6.0 and not earlier versions.</source>
          <target state="translated">この方法を使用した場合、<ph id="ph1">`NETStandard.Library`</ph> 1.6.0 を復元する必要があるだけで、それより前のバージョンの復元は必要ありません。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The reverse would not be valid: targeting <ph id="ph1">`netstandard1.6`</ph> with the 1.3.0 version of <ph id="ph2">`NETStandard.Library`</ph>.</source>
          <target state="translated">逆は無効になります (<ph id="ph1">`netstandard1.6`</ph> を対象とするが、<ph id="ph2">`NETStandard.Library`</ph> のバージョン 1.3.0 を使用する)。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>You cannot target a higher framework with a lower metapackage, since the lower version metapackage will not expose any assets for that higher framework.</source>
          <target state="translated">上位フレームワークと下位メタパッケージの組み合わせを対象とすることはできません。下位バージョンのメタパッケージはその上位フレームワークに対して資産を公開しないことが理由です。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The versioning scheme for metapackages asserts that metapackages match the highest version of the framework they describe.</source>
          <target state="translated">メタパッケージのバージョン管理スキームは、メタパッケージが、記述したフレームワークの最上位バージョンと一致することをアサートします。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>By virtue of the versioning scheme, the first version of <ph id="ph1">`NETStandard.Library`</ph> is v1.6.0 given that it contains <ph id="ph2">`netstandard1.6`</ph> assets.</source>
          <target state="translated">バージョン管理スキームにより、<ph id="ph2">`netstandard1.6`</ph> 資産が含まれている場合、<ph id="ph1">`NETStandard.Library`</ph> の最初のバージョンは v1.6.0 となります。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>v1.3.0 is used in the example above, for symmetry with the example above, but does not actually exist.</source>
          <target state="translated">上記の例では対称性を考慮して v1.3.0 が使用されていますが、実際には存在しません。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>.NET Core Application</source>
          <target state="translated">.NET Core アプリケーション</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The .NET Core Application (TFM: <ph id="ph1">`netcoreapp`</ph>) framework represents the packages and associated APIs that come with the .NET Core distribution and the console application model that it provides.</source>
          <target state="translated">.NET Core アプリケーション (TFM: <ph id="ph1">`netcoreapp`</ph>) フレームワークは、.NET Core 配布に付属のパッケージおよび関連する API と、.NET Core 配布によって提供されるコンソール アプリケーション モデルを表します。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>.NET Core apps must use this framework, due to targeting the console application model, as should libraries that intended to run only on .NET Core.</source>
          <target state="translated">.NET Core アプリは、コンソール アプリケーション モデルを対象とすることから、.NET Core での実行のみを意図するライブラリとして、このフレームワークを使用する必要があります。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Using this framework restricts apps and libraries to running only on .NET Core.</source>
          <target state="translated">このフレームワークを使用すると、アプリとライブラリは .NET Core でのみの実行に限定されます。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Microsoft.NETCore.App`</ph> metapackage targets the <ph id="ph2">`netcoreapp`</ph> framework.</source>
          <target state="translated"><ph id="ph1">`Microsoft.NETCore.App`</ph> メタパッケージは、<ph id="ph2">`netcoreapp`</ph> フレームワークを対象とします。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>It provides access to ~60 libraries, ~40 provided by the <ph id="ph1">`NETStandard.Library`</ph> package and ~20 more in addition.</source>
          <target state="translated">これは、約&amp;60; のライブラリにアクセスできるようにします (約&amp;40; 個は <ph id="ph1">`NETStandard.Library`</ph> パッケージによって提供され、さらに約&amp;20; 個の追加分)。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>You can reference additional libraries that target <ph id="ph1">`netcoreapp`</ph> or compatible frameworks, such as <ph id="ph2">`netstandard`</ph>, to get access to additional APIs.</source>
          <target state="translated"><ph id="ph1">`netcoreapp`</ph> または互換性を持つフレームワーク (<ph id="ph2">`netstandard`</ph> など) を対象とする追加のライブラリを参照することで、追加の API にアクセスできます。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Most of the additional libraries provided by <ph id="ph1">`Microsoft.NETCore.App`</ph> also target <ph id="ph2">`netstandard`</ph> given that their dependencies are satisfied by other <ph id="ph3">`netstandard`</ph> libraries.</source>
          <target state="translated"><ph id="ph1">`Microsoft.NETCore.App`</ph> によって提供される追加ライブラリの大部分も、依存関係がほかの <ph id="ph3">`netstandard`</ph> ライブラリによって満足されるならば、<ph id="ph2">`netstandard`</ph> を対象とします。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>That means that <ph id="ph1">`netstandard`</ph> libraries can also reference those packages as dependencies.</source>
          <target state="translated">つまり、<ph id="ph1">`netstandard`</ph> ライブラリは、それらのパッケージを依存関係として参照することもできます。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>