<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-47f9650" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cd47cc351fb926bcf444bdcbd12f3cd61d9fb327</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\base-types\quantifiers.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0d3de6defad05a55b446401dfe67d7fc72a1d417</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5afb8011ca24fab1d955719fd22a26c7f8a0645d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Quantifiers in regular expressions</source>
          <target state="translated">正規表現での量指定子</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Quantifiers in regular expressions</source>
          <target state="translated">正規表現での量指定子</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Quantifiers in regular expressions</source>
          <target state="translated">正規表現での量指定子</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Quantifiers specify how many instances of a character, group, or character class must be present in the input for a match to be found.</source>
          <target state="translated">量指定子は、一致と見なされるために入力中に存在する必要がある文字、グループ、または文字クラスの出現数を指定します。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The following table lists the quantifiers supported by .NET.</source>
          <target state="translated">次の表に、.NET でサポートされている量指定子の一覧を示します。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Greedy quantifier</source>
          <target state="translated">最長一致の量指定子</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Lazy quantifier</source>
          <target state="translated">最短一致の量指定子</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">説明</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt><ph id="ph1">\*</ph>?<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt><ph id="ph1">\*</ph>?<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Match zero or more times.</source>
          <target state="translated">0 回以上の繰り返しに一致します。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>+?<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>+?<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Match one or more times.</source>
          <target state="translated">1 回以上の繰り返しに一致します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>?<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>?<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>??<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>??<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Match zero or one time.</source>
          <target state="translated">0 回または&amp;1; 回の繰り返しに一致します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>}<ept id="p3">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>}<ept id="p3">**</ept></target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>}?<ept id="p3">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>}?<ept id="p3">**</ept></target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Match exactly n times.</source>
          <target state="translated">n 回の繰り返しに一致します。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,}<ept id="p3">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,}<ept id="p3">**</ept></target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,}?<ept id="p3">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,}?<ept id="p3">**</ept></target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Match at least n times.</source>
          <target state="translated">n 回以上の繰り返しに一致します。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,<ept id="p3">**</ept><bpt id="p4">_</bpt>m<ept id="p4">_</ept><bpt id="p5">**</bpt>}<ept id="p5">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,<ept id="p3">**</ept><bpt id="p4">_</bpt>m<ept id="p4">_</ept><bpt id="p5">**</bpt>}<ept id="p5">**</ept></target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,<ept id="p3">**</ept><bpt id="p4">_</bpt>m<ept id="p4">_</ept><bpt id="p5">**</bpt>}?<ept id="p5">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,<ept id="p3">**</ept><bpt id="p4">_</bpt>m<ept id="p4">_</ept><bpt id="p5">**</bpt>}?<ept id="p5">**</ept></target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Match from n to m times.</source>
          <target state="translated">n 回から m 回の繰り返しに一致します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The quantities <bpt id="p1">*</bpt>n<ept id="p1">*</ept> and <bpt id="p2">*</bpt>m<ept id="p2">*</ept> are integer constants.</source>
          <target state="translated">量 <bpt id="p1">*</bpt>n<ept id="p1">*</ept> および <bpt id="p2">*</bpt>m<ept id="p2">*</ept> は整数の定数です。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Ordinarily, quantifiers are greedy; they cause the regular expression engine to match as many occurrences of particular patterns as possible.</source>
          <target state="translated">通常、量指定子は最長一致です。最長一致の場合、正規表現エンジンでは、特定のパターンの繰り返しができるだけ多くなるように照合が行われます。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Appending the <ph id="ph1">`?`</ph> character to a quantifier makes it lazy; it causes the regular expression engine to match as few occurrences as possible.</source>
          <target state="translated">量指定子に <ph id="ph1">`?`</ph> 文字を付けると最短一致になります。最短一致の場合、正規表現エンジンでは、特定のパターンの繰り返しができるだけ少なくなるように照合が行われます。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For a complete description of the difference between greedy and lazy quantifiers, see the section <bpt id="p1">[</bpt>Greedy and lazy quantifiers<ept id="p1">](#greedy-and-lazy-quantifiers)</ept> later in this topic.</source>
          <target state="translated">最長一致と最短一致の量指定子の違いの詳細については、このトピックの「<bpt id="p1">[</bpt>最長一致と最短一致の量指定子<ept id="p1">](#greedy-and-lazy-quantifiers)</ept>」のセクションをご覧ください。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Nesting quantifiers (for example, as the regular expression pattern <ph id="ph1">`(a*)*`</ph> does) can increase the number of comparisons that the regular expression engine must perform, as an exponential function of the number of characters in the input string.</source>
          <target state="translated">量指定子を入れ子にすると (たとえば、正規表現パターン <ph id="ph1">`(a*)*`</ph> など)、入力文字列の文字数に応じて指数関数的に、正規表現エンジンで実行する必要がある比較の回数が増加する可能性があります。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For more information about this behavior and its workarounds, see <bpt id="p1">[</bpt>Backtracking in regular expressions<ept id="p1">](backtracking.md)</ept>.</source>
          <target state="translated">この動作と回避方法の詳細については、「<bpt id="p1">[</bpt>正規表現におけるバックトラッキング<ept id="p1">](backtracking.md)</ept>」を参照してください。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Regular expression quantifiers</source>
          <target state="translated">正規表現の量指定子</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The following sections list the quantifiers supported by .NET regular expressions.</source>
          <target state="translated">以降のセクションでは、.NET の正規表現でサポートされている量指定子について説明します。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">\*</ph>, +, ?, {, and } characters are encountered in a regular expression pattern, the regular expression engine interprets them as quantifiers or part of quantifier constructs unless they are included in a <bpt id="p1">[</bpt>character class<ept id="p1">](classes.md)</ept>.</source>
          <target state="translated">正規表現エンジンでは、正規表現パターンで <ph id="ph1">\*</ph>, +, ?, {, および } の各文字を検出すると、<bpt id="p1">[</bpt>文字クラス<ept id="p1">](classes.md)</ept>に含まれているもの以外は量指定子または量指定子コンストラクトの一部として解釈します。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>To interpret these as literal characters outside a character class, you must escape them by preceding them with a backslash.</source>
          <target state="translated">文字クラスの外側でこれらをリテラル文字として解釈するには、文字の前に円記号を付けてエスケープする必要があります。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For example, the string <ph id="ph1">`\*`</ph> in a regular expression pattern is interpreted as a literal asterisk ("*") character.</source>
          <target state="translated">たとえば、正規表現パターン内の <ph id="ph1">`\*`</ph> という文字列は、リテラルのアスタリスク ("*") 文字と解釈されます。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Match zero or more times: <ph id="ph1">\*</ph></source>
          <target state="translated">0 回以上の繰り返しに一致: <ph id="ph1">\*</ph></target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">\*</ph> quantifier matches the preceding element zero or more times.</source>
          <target state="translated"><ph id="ph1">\*</ph> 量指定子は、直前の要素の&amp;0; 回以上の繰り返しに一致します。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>It is equivalent to the <bpt id="p1">**</bpt>{0,}<ept id="p1">**</ept> quantifier.</source>
          <target state="translated">これは <bpt id="p1">**</bpt>{0,}<ept id="p1">**</ept> 量指定子と同じです。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt><ph id="ph1">\*</ph><ept id="p1">**</ept> is a greedy quantifier whose lazy equivalent is <bpt id="p2">**</bpt><ph id="ph2">\*</ph>?<ept id="p2">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt><ph id="ph1">\*</ph><ept id="p1">**</ept> は最長一致の量指定子であり、最短一致でこれに対応するのは <bpt id="p2">**</bpt><ph id="ph2">\*</ph>?<ept id="p2">**</ept> です。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The following example illustrates this regular expression.</source>
          <target state="translated">次の例は、この正規表現を示しています。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Of the nine digits in the input string, five match the pattern and four (<ph id="ph1">`95`</ph>, <ph id="ph2">`929`</ph>, <ph id="ph3">`9129`</ph>, and <ph id="ph4">`9919`</ph>) do not.</source>
          <target state="translated">入力文字列の&amp;9; 個の数字のうち、5 個がパターンに一致し、4 個 (<ph id="ph1">`95`</ph>、<ph id="ph2">`929`</ph>、<ph id="ph3">`9129`</ph>、および <ph id="ph4">`9919`</ph>) が一致しません。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The regular expression pattern is defined as shown in the following table.</source>
          <target state="translated">正規表現パターンは、次の表に示すように定義されています。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">パターン</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">説明</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Start at a word boundary.</source>
          <target state="translated">ワード境界から開始します。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Match a "9" followed by zero or more "1" characters.</source>
          <target state="translated">"9" の後に文字 "1" が&amp;0; 個以上続くパターンに一致します。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Match zero or more "9" characters.</source>
          <target state="translated">0 個以上の文字 "9" に一致します。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>End at a word boundary.</source>
          <target state="translated">ワード境界で終了します。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Match one or more times: +</source>
          <target state="translated">1 回以上の繰り返しに一致: +</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt><ph id="ph1">+</ph><ept id="p1">**</ept> quantifier matches the preceding element one or more times.</source>
          <target state="translated"><bpt id="p1">**</bpt><ph id="ph1">+</ph><ept id="p1">**</ept> 量指定子は、直前の要素の&amp;1; 回以上の繰り返しに一致します。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>It is equivalent to <bpt id="p1">**</bpt>{1,}<ept id="p1">**</ept>.</source>
          <target state="translated">これは <bpt id="p1">**</bpt>{1,}<ept id="p1">**</ept> と同じです。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt><ph id="ph1">+</ph><ept id="p1">**</ept> is a greedy quantifier whose lazy equivalent is <bpt id="p2">**</bpt>+?<ept id="p2">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt><ph id="ph1">+</ph><ept id="p1">**</ept> は最長一致の量指定子であり、最短一致でこれに対応するのは <bpt id="p2">**</bpt>+?<ept id="p2">**</ept> です。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For example, the regular expression <ph id="ph1">`\ban+\w*?\b`</ph> tries to match entire words that begin with the letter <ph id="ph2">`a`</ph> followed by one or more instances of the letter <ph id="ph3">`n`</ph>.</source>
          <target state="translated">たとえば、正規表現 <ph id="ph1">`\ban+\w*?\b`</ph> は、文字 <ph id="ph2">`a`</ph> で始まり、文字 <ph id="ph3">`n`</ph> が&amp;1; 回以上繰り返されるすべての単語に一致を試みます。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The following example illustrates this regular expression.</source>
          <target state="translated">次の例は、この正規表現を示しています。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The regular expression matches the words <ph id="ph1">`an`</ph>, <ph id="ph2">`annual`</ph>, <ph id="ph3">`announcement`</ph>, and <ph id="ph4">`antique`</ph>, and correctly fails to match <ph id="ph5">`autumn`</ph> and <ph id="ph6">`all`</ph>.</source>
          <target state="translated">この正規表現は、単語 <ph id="ph1">`an`</ph>、<ph id="ph2">`annual`</ph>、<ph id="ph3">`announcement`</ph>、および <ph id="ph4">`antique`</ph> に一致し、<ph id="ph5">`autumn`</ph> と <ph id="ph6">`all`</ph> では不一致となります。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The regular expression pattern is defined as shown in the following table.</source>
          <target state="translated">正規表現パターンは、次の表に示すように定義されています。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">パターン</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">説明</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Start at a word boundary.</source>
          <target state="translated">ワード境界から開始します。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Match an "a" followed by one or more "n" characters.</source>
          <target state="translated">"a" の後に文字 "n" が&amp;1; 個以上続くパターンに一致します。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Match a word character zero or more times, but as few times as possible.</source>
          <target state="translated">単語に含まれる文字の&amp;0; 回以上の繰り返しのうち、最も少ない繰り返しに一致します。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>End at a word boundary.</source>
          <target state="translated">ワード境界で終了します。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Match zero or one time: ?</source>
          <target state="translated">0 回または&amp;1; 回の繰り返しに一致: ?</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>?<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>?<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>quantifier matches the preceding element zero or one time.</source>
          <target state="translated">量指定子は、直前の要素の&amp;0; 回または&amp;1; 回の繰り返しに一致します。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>It is equivalent to <bpt id="p1">**</bpt>{0,1}<ept id="p1">**</ept>.</source>
          <target state="translated">これは <bpt id="p1">**</bpt>{0,1}<ept id="p1">**</ept> と同じです。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>?<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>?<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>is a greedy quantifier whose lazy equivalent is <bpt id="p1">**</bpt>??<ept id="p1">**</ept>.</source>
          <target state="translated">は最長一致の量指定子であり、最短一致でこれに対応するのは <bpt id="p1">**</bpt>??<ept id="p1">**</ept> です。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>For example, the regular expression <ph id="ph1">`\ban?\b`</ph> tries to match entire words that begin with the letter <ph id="ph2">`a`</ph> followed by zero or one instances of the letter <ph id="ph3">`n`</ph>.</source>
          <target state="translated">たとえば、正規表現 <ph id="ph1">`\ban?\b`</ph> は、文字 <ph id="ph2">`a`</ph> で始まり、文字 <ph id="ph3">`n`</ph> が&amp;0; 回または&amp;1; 回繰り返されるすべての単語に一致を試みます。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>In other words, it tries to match the words <ph id="ph1">`a`</ph> and <ph id="ph2">`an`</ph>.</source>
          <target state="translated">つまり、単語 <ph id="ph1">`a`</ph> と <ph id="ph2">`an`</ph> に一致を試みます。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The following example illustrates this regular expression.</source>
          <target state="translated">次の例は、この正規表現を示しています。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The regular expression pattern is defined as shown in the following table.</source>
          <target state="translated">正規表現パターンは、次の表に示すように定義されています。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">パターン</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">説明</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Start at a word boundary.</source>
          <target state="translated">ワード境界から開始します。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Match an "a" followed by zero or one "n" character.</source>
          <target state="translated">"a" の後に文字 "n" が&amp;0; 個または&amp;1; 個続くパターンに一致します。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>End at a word boundary.</source>
          <target state="translated">ワード境界で終了します。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Match exactly n times: {n}</source>
          <target state="translated">n 回の繰り返しに一致: {n}</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>}<ept id="p3">**</ept> quantifier matches the preceding element exactly <bpt id="p4">*</bpt>n<ept id="p4">*</ept> times, where <bpt id="p5">*</bpt>n<ept id="p5">*</ept> is any integer.</source>
          <target state="translated"><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>}<ept id="p3">**</ept> 量指定子は、直前の要素の <bpt id="p4">*</bpt>n<ept id="p4">*</ept> 回の繰り返しに一致します。ここで、<bpt id="p5">*</bpt>n<ept id="p5">*</ept> は任意の整数です。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>}<ept id="p3">**</ept> is a greedy quantifier whose lazy equivalent is <bpt id="p4">**</bpt>{<ept id="p4">**</ept><bpt id="p5">_</bpt>n<ept id="p5">_</ept><bpt id="p6">**</bpt>}?<ept id="p6">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>}<ept id="p3">**</ept> は最長一致の量指定子であり、最短一致でこれに対応するのは <bpt id="p4">**</bpt>{<ept id="p4">**</ept><bpt id="p5">_</bpt>n<ept id="p5">_</ept><bpt id="p6">**</bpt>}?<ept id="p6">**</ept> です。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>For example, the regular expression <ph id="ph1">`\b\d+\,\d{3}\b`</ph> tries to match a word boundary followed by one or more decimal digits followed by three decimal digits followed by a word boundary.</source>
          <target state="translated">たとえば、正規表現 <ph id="ph1">`\b\d+\,\d{3}\b`</ph> は、ワード境界、1 個以上の&amp;10; 進数、3 個の&amp;10; 進数、ワード境界の順に続く文字に一致を試みます。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The following example illustrates this regular expression.</source>
          <target state="translated">次の例は、この正規表現を示しています。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The regular expression pattern is defined as shown in the following table.</source>
          <target state="translated">正規表現パターンは、次の表に示すように定義されています。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">パターン</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">説明</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Start at a word boundary.</source>
          <target state="translated">ワード境界から開始します。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Match one or more decimal digits.</source>
          <target state="translated">1 個以上の&amp;10; 進数と一致します。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Match a comma character.</source>
          <target state="translated">コンマ文字と一致します。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Match three decimal digits.</source>
          <target state="translated">3 個の&amp;10; 進数と一致します。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>End at a word boundary.</source>
          <target state="translated">ワード境界で終了します。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Match at least n times: {n,}</source>
          <target state="translated">n 回以上の繰り返しに一致: {n,}</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,}<ept id="p3">**</ept> quantifier matches the preceding element at least <bpt id="p4">*</bpt>n<ept id="p4">*</ept> times, where <bpt id="p5">*</bpt>n<ept id="p5">*</ept> is any integer.</source>
          <target state="translated"><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,}<ept id="p3">**</ept> 量指定子は、直前の要素の <bpt id="p4">*</bpt>n<ept id="p4">*</ept> 回以上の繰り返しに一致します。ここで、<bpt id="p5">*</bpt>n<ept id="p5">*</ept> は任意の整数です。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,}<ept id="p3">**</ept> is a greedy quantifier whose lazy equivalent is <bpt id="p4">**</bpt>{<ept id="p4">**</ept><bpt id="p5">_</bpt>n<ept id="p5">_</ept><bpt id="p6">**</bpt>}?<ept id="p6">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,}<ept id="p3">**</ept> は最長一致の量指定子であり、最短一致でこれに対応するのは <bpt id="p4">**</bpt>{<ept id="p4">**</ept><bpt id="p5">_</bpt>n<ept id="p5">_</ept><bpt id="p6">**</bpt>}?<ept id="p6">**</ept> です。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>For example, the regular expression <ph id="ph1">`\b\d{2,}\b\D+`</ph> tries to match a word boundary followed by at least two digits followed by a word boundary and a non-digit character.</source>
          <target state="translated">たとえば、正規表現 <ph id="ph1">`\b\d{2,}\b\D+`</ph> は、ワード境界、2 個以上の&amp;10; 進数、ワード境界、数字以外の文字の順に続く文字に一致を試みます。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The following example illustrates this regular expression.</source>
          <target state="translated">次の例は、この正規表現を示しています。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The regular expression fails to match the phrase "7 days" because it contains just one decimal digit, but it successfully matches the phrases "10 weeks and 300 years".</source>
          <target state="translated">この正規表現は "7 days" という語句には一致しません。これは、10 進数が 1 個しか含まれていないためです。しかし、"10 weeks and 300 years" という語句には正常に一致します。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The regular expression pattern is defined as shown in the following table.</source>
          <target state="translated">正規表現パターンは、次の表に示すように定義されています。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">パターン</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">説明</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Start at a word boundary.</source>
          <target state="translated">ワード境界から開始します。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Match at least two decimal digits.</source>
          <target state="translated">2 個以上の&amp;10; 進数と一致します。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Match a word boundary.</source>
          <target state="translated">ワード境界に一致します。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Match at least one non-decimal digit.</source>
          <target state="translated">1 個以上の&amp;10; 進数以外の数字と一致します。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Match between n and m times: {n,m}</source>
          <target state="translated">n 回から m 回までの繰り返しに一致: {n,m}</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,<ept id="p3">**</ept><bpt id="p4">_</bpt>m<ept id="p4">_</ept><bpt id="p5">**</bpt>}<ept id="p5">**</ept> quantifier matches the preceding element at least <bpt id="p6">*</bpt>n<ept id="p6">*</ept> times, but no more than <bpt id="p7">*</bpt>m<ept id="p7">*</ept> times, where <bpt id="p8">*</bpt>n<ept id="p8">*</ept> and <bpt id="p9">*</bpt>m<ept id="p9">*</ept> are integers.</source>
          <target state="translated"><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,<ept id="p3">**</ept><bpt id="p4">_</bpt>m<ept id="p4">_</ept><bpt id="p5">**</bpt>}<ept id="p5">**</ept> 量指定子は、直前の要素の <bpt id="p6">*</bpt>n<ept id="p6">*</ept> 回以上、<bpt id="p7">*</bpt>m<ept id="p7">*</ept> 回以下の繰り返しに一致します。ここで、<bpt id="p8">*</bpt>n<ept id="p8">*</ept> と <bpt id="p9">*</bpt>m<ept id="p9">*</ept> は整数です。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,<ept id="p3">**</ept><bpt id="p4">_</bpt>m<ept id="p4">_</ept><bpt id="p5">**</bpt>}<ept id="p5">**</ept> is a greedy quantifier whose lazy equivalent is <bpt id="p6">**</bpt>{<ept id="p6">**</ept><bpt id="p7">_</bpt>n<ept id="p7">_</ept><bpt id="p8">**</bpt>,<ept id="p8">**</ept><bpt id="p9">_</bpt>m<ept id="p9">_</ept><bpt id="p10">**</bpt>}?<ept id="p10">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,<ept id="p3">**</ept><bpt id="p4">_</bpt>m<ept id="p4">_</ept><bpt id="p5">**</bpt>}<ept id="p5">**</ept> は最長一致の量指定子であり、最短一致でこれに対応するのは <bpt id="p6">**</bpt>{<ept id="p6">**</ept><bpt id="p7">_</bpt>n<ept id="p7">_</ept><bpt id="p8">**</bpt>,<ept id="p8">**</ept><bpt id="p9">_</bpt>m<ept id="p9">_</ept><bpt id="p10">**</bpt>}?<ept id="p10">**</ept> です。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>In the following example, the regular expression <ph id="ph1">`(00\s){2,4}`</ph> tries to match between two and four occurrences of two zero digits followed by a space.</source>
          <target state="translated">次の例では、正規表現 <ph id="ph1">`(00\s){2,4}`</ph> は、2 個の&amp;0; と&amp;1; 個のスペースが、2 回以上&amp;4; 回以下だけ現れる文字列に一致を試みます。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Note that the final portion of the input string includes this pattern five times rather than the maximum of four.</source>
          <target state="translated">入力文字列の最後の部分には、このパターンが最大の&amp;4; 回ではなく&amp;5; 回含まれていることに注意してください。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>However, only the initial portion of this substring (up to the space and the fifth pair of zeros) matches the regular expression pattern.</source>
          <target state="translated">この部分文字列の最初の部分 (スペースと&amp;5; つ目の&amp;0; のペアまで) だけが正規表現パターンに一致します。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Match zero or more times (lazy match): <ph id="ph1">\*</ph>?</source>
          <target state="translated">0 回以上の繰り返しに一致 (最短一致): <ph id="ph1">\*</ph>?</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt><ph id="ph1">\*</ph>?<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt><ph id="ph1">\*</ph>?<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>quantifier matches the preceding element zero or more times, but as few times as possible.</source>
          <target state="translated">量指定子は、直前の要素の&amp;0; 回以上の繰り返しのうち、最も少ない繰り返しに一致します。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>It is the lazy counterpart of the greedy quantifier <bpt id="p1">**</bpt><ph id="ph1">\*</ph><ept id="p1">**</ept>.</source>
          <target state="translated">これは、最長一致の量指定子 <bpt id="p1">**</bpt><ph id="ph1">\*</ph><ept id="p1">**</ept> に対応する、最短一致の量指定子です。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>In the following example, the regular expression <ph id="ph1">`\b\w*?oo\w*?\b`</ph> matches all words that contain the string <ph id="ph2">`oo`</ph>.</source>
          <target state="translated">次の例では、正規表現 <ph id="ph1">`\b\w*?oo\w*?\b`</ph> は、文字列 <ph id="ph2">`oo`</ph> を含むすべての単語に一致します。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The regular expression pattern is defined as shown in the following table.</source>
          <target state="translated">正規表現パターンは、次の表に示すように定義されています。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">パターン</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">説明</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Start at a word boundary.</source>
          <target state="translated">ワード境界から開始します。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Match zero or more word characters, but as few characters as possible.</source>
          <target state="translated">単語に含まれる&amp;0; 個以上の文字のうち、最も少ない文字に一致します。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Match the string "oo".</source>
          <target state="translated">文字列 "oo" と一致します。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Match zero or more word characters, but as few characters as possible.</source>
          <target state="translated">単語に含まれる&amp;0; 個以上の文字のうち、最も少ない文字に一致します。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>End on a word boundary.</source>
          <target state="translated">ワード境界で終了します。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Match one or more times (lazy match): +?</source>
          <target state="translated">1 回以上の繰り返しに一致 (最短一致): +?</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>+?<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>+?<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>quantifier matches the preceding element one or more times, but as few times as possible.</source>
          <target state="translated">量指定子は、直前の要素の&amp;1; 回以上の繰り返しのうち、最も少ない繰り返しに一致します。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>It is the lazy counterpart of the greedy quantifier <bpt id="p1">**</bpt><ph id="ph1">+</ph><ept id="p1">**</ept>.</source>
          <target state="translated">これは、最長一致の量指定子 <bpt id="p1">**</bpt><ph id="ph1">+</ph><ept id="p1">**</ept> に対応する、最短一致の量指定子です。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>For example, the regular expression <ph id="ph1">`\b\w+?\b`</ph> matches one or more characters separated by word boundaries.</source>
          <target state="translated">たとえば、正規表現 <ph id="ph1">`\b\w+?\b`</ph> は、ワード境界で区切られた&amp;1; つ以上の文字に一致します。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The following example illustrates this regular expression.</source>
          <target state="translated">次の例は、この正規表現を示しています。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Match zero or one time (lazy match): ??</source>
          <target state="translated">0 回または&amp;1; 回の繰り返しに一致 (最短一致): ??</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>??<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>??<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>quantifier matches the preceding element zero or one time, but as few times as possible.</source>
          <target state="translated">量指定子は、直前の要素の&amp;0; 回または&amp;1; 回の繰り返しのうち、最も少ない繰り返しに一致します。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>It is the lazy counterpart of the greedy quantifier <bpt id="p1">**</bpt>?<ept id="p1">**</ept>.</source>
          <target state="translated">これは、最長一致の量指定子 <bpt id="p1">**</bpt>?<ept id="p1">**</ept> に対応する、最短一致の量指定子です。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>For example, the regular expression <ph id="ph1">`^\s*(System.)??Console.Write(Line)??\(??`</ph> attempts to match the strings "Console.Write" or "Console.WriteLine".</source>
          <target state="translated">たとえば、正規表現 <ph id="ph1">`^\s*(System.)??Console.Write(Line)??\(??`</ph> は、文字列 "Console.Write" または "Console.WriteLine" に一致を試みます。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The string can also include "System."</source>
          <target state="translated">文字列には、"Console" の前に</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>before "Console", and it can be followed by an opening parenthesis.</source>
          <target state="translated">"System." が含まれていてもよく、最後に左かっこがあってもかまいません。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>The string must be at the beginning of a line, although it can be preceded by white space.</source>
          <target state="translated">文字列は行の先頭にある必要がありますが、文字列の前に空白があってもかまいません。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The following example illustrates this regular expression.</source>
          <target state="translated">次の例は、この正規表現を示しています。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>The regular expression pattern is defined as shown in the following table.</source>
          <target state="translated">正規表現パターンは、次の表に示すように定義されています。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">パターン</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">説明</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Match the start of the input stream.</source>
          <target state="translated">入力ストリームの先頭と一致します。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Match zero or more white-space characters.</source>
          <target state="translated">0 個以上の空白文字と一致します。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Match zero or one occurrence of the string "System.".</source>
          <target state="translated">文字列 "System." の&amp;0; 回または&amp;1; 回の繰り返しに一致します。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Match the string "Console.Write".</source>
          <target state="translated">文字列 "Console.Write" と一致します。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Match zero or one occurrence of the string "Line".</source>
          <target state="translated">文字列 "Line" の&amp;0; 回または&amp;1; 回の繰り返しに一致します。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Match zero or one occurrence of the opening parenthesis.</source>
          <target state="translated">左かっこの&amp;0; 回または&amp;1; 回の繰り返しに一致します。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Match exactly n times (lazy match): {n}?</source>
          <target state="translated">n 回の繰り返しに一致 (最短一致): {n}?</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>}?<ept id="p3">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>}?<ept id="p3">**</ept></target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>quantifier matches the preceding element exactly <bpt id="p1">*</bpt>n<ept id="p1">*</ept> times, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is any integer.</source>
          <target state="translated">量指定子は、直前の要素の <bpt id="p1">*</bpt>n<ept id="p1">*</ept> 回の繰り返しに一致します。ここで、<bpt id="p2">*</bpt>n<ept id="p2">*</ept> は任意の整数です。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>It is the lazy counterpart of the greedy quantifier <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>}+<ept id="p3">**</ept>.</source>
          <target state="translated">これは、最長一致の量指定子 <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>}+<ept id="p3">**</ept> に対応する、最短一致の量指定子です。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>In the following example, the regular expression <ph id="ph1">`\b(\w{3,}?\.){2}?\w{3,}?\b`</ph> is used to identify a Web site address.</source>
          <target state="translated">次の例では、正規表現 <ph id="ph1">`\b(\w{3,}?\.){2}?\w{3,}?\b`</ph> を使用して Web サイトのアドレスを識別します。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Note that it matches "www.microsoft.com" and "msdn.microsoft.com", but does not match "mywebsite" or "mycompany.com".</source>
          <target state="translated">"www.microsoft.com" と "msdn.microsoft.com" には一致しますが、"mywebsite" や "mycompany.com" には一致しない点に注意してください。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>The regular expression pattern is defined as shown in the following table.</source>
          <target state="translated">正規表現パターンは、次の表に示すように定義されています。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">パターン</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">説明</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Start at a word boundary.</source>
          <target state="translated">ワード境界から開始します。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Match at least 3 word characters, but as few characters as possible, followed by a dot or period character.</source>
          <target state="translated">単語に含まれる 3 個以上の文字のうち、最も少ない文字の後に、ドット (ピリオド) 文字が続くパターンに一致します。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>This is the first capturing group.</source>
          <target state="translated">これが最初のキャプチャ グループです。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Match the pattern in the first group two times, but as few times as possible.</source>
          <target state="translated">最初のグループのパターンの&amp;2; 回の繰り返しのうち、最も少ない繰り返しに一致します。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>End the match on a word boundary.</source>
          <target state="translated">ワード境界で照合を終了します。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Match at least n times (lazy match): {n,}?</source>
          <target state="translated">n 回以上の繰り返しに一致 (最短一致): {n,}?</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,}?<ept id="p3">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,}?<ept id="p3">**</ept></target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>quantifier matches the preceding element at least <bpt id="p1">*</bpt>n<ept id="p1">*</ept> times, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is any integer, but as few times as possible.</source>
          <target state="translated">量指定子は、直前の要素の <bpt id="p1">*</bpt>n<ept id="p1">*</ept> 回以上の繰り返しのうち、最も少ない繰り返しに一致します。ここで、<bpt id="p2">*</bpt>n<ept id="p2">*</ept> は任意の整数です。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>It is the lazy counterpart of the greedy quantifier <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,}<ept id="p3">**</ept>.</source>
          <target state="translated">これは、最長一致の量指定子 <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,}<ept id="p3">**</ept> に対応する、最短一致の量指定子です。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>See the example for the <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>}?<ept id="p3">**</ept></source>
          <target state="translated">実例として、前のセクションの <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>}?<ept id="p3">**</ept></target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>quantifier in the previous section for an illustration.</source>
          <target state="translated">量指定子の例を参照してください。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>The regular expression in that example uses the <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,}<ept id="p3">**</ept> quantifier to match a string that has at least three characters followed by a period.</source>
          <target state="translated">この例の正規表現は、3 文字以上の後にピリオドが続く文字列に一致させるために <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,}<ept id="p3">**</ept> 量指定子を使用しています。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Match between n and m times (lazy match): {n,m}?</source>
          <target state="translated">n 回から m 回までの繰り返しに一致 (最短一致): {n,m}?</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,<ept id="p3">**</ept><bpt id="p4">_</bpt>m<ept id="p4">_</ept><bpt id="p5">**</bpt>}?<ept id="p5">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,<ept id="p3">**</ept><bpt id="p4">_</bpt>m<ept id="p4">_</ept><bpt id="p5">**</bpt>}?<ept id="p5">**</ept></target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>quantifier matches the preceding element between <bpt id="p1">*</bpt>n<ept id="p1">*</ept> and <bpt id="p2">*</bpt>m<ept id="p2">*</ept> times, where <bpt id="p3">*</bpt>n<ept id="p3">*</ept> and <bpt id="p4">*</bpt>m<ept id="p4">*</ept> are integers, but as few times as possible.</source>
          <target state="translated">量指定子は、直前の要素の <bpt id="p1">*</bpt>n<ept id="p1">*</ept> 回から <bpt id="p2">*</bpt>m<ept id="p2">*</ept> 回までの繰り返しのうち、最も少ない繰り返しに一致します。ここで、<bpt id="p3">*</bpt>n<ept id="p3">*</ept> と <bpt id="p4">*</bpt>m<ept id="p4">*</ept> は整数です。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>It is the lazy counterpart of the greedy quantifier <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,<ept id="p3">**</ept><bpt id="p4">_</bpt>m<ept id="p4">_</ept><bpt id="p5">**</bpt>}<ept id="p5">**</ept>.</source>
          <target state="translated">これは、最長一致の量指定子 <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,<ept id="p3">**</ept><bpt id="p4">_</bpt>m<ept id="p4">_</ept><bpt id="p5">**</bpt>}<ept id="p5">**</ept> に対応する、最短一致の量指定子です。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>In the following example, the regular expression <ph id="ph1">`\b[A-Z](\w*\s+){1,10}?[.!?]`</ph> matches sentences that contain between one and ten words.</source>
          <target state="translated">次の例では、正規表現 <ph id="ph1">`\b[A-Z](\w*\s+){1,10}?[.!?]`</ph> は、1 個以上&amp;10; 個以下の単語が含まれる文に一致します。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>It matches all the sentences in the input string except for one sentence that contains 18 words.</source>
          <target state="translated">18 個の単語が含まれている 1 つの文を除き、入力文字列中のすべての文に一致します。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>The regular expression pattern is defined as shown in the following table.</source>
          <target state="translated">正規表現パターンは、次の表に示すように定義されています。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">パターン</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">説明</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Start at a word boundary.</source>
          <target state="translated">ワード境界から開始します。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Match an uppercase character from A to Z.</source>
          <target state="translated">A から Z の大文字と一致します。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Match zero or more word characters, followed by one or more white-space characters.</source>
          <target state="translated">単語に含まれる&amp;0; 個以上の文字の後に空白文字が&amp;1; 個以上続くパターンと一致します。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>This is the first capture group.</source>
          <target state="translated">これが最初のキャプチャ グループです。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Match the previous pattern between 1 and 10 times, but as few times as possible.</source>
          <target state="translated">前のパターンの 1 回以上 10 回以下の繰り返しのうち、最も少ない繰り返しに一致します。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Match any one of the punctuation characters ".", "!", or "?".</source>
          <target state="translated">区切り文字 "."、"!"、"?" のいずれか&amp;1; 文字と一致します。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Greedy and lazy quantifiers</source>
          <target state="translated">最長一致と最短一致の量指定子</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>A number of the quantifiers have two versions:</source>
          <target state="translated">いくつかの量指定子には次の&amp;2; つのバージョンがあります。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>A greedy version.</source>
          <target state="translated">最長一致バージョン。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>A greedy quantifier tries to match an element as many times as possible.</source>
          <target state="translated">最長一致の量指定子は、要素をできるだけ多く一致させようとします。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>•A non-greedy (or lazy) version.</source>
          <target state="translated">•最短一致バージョン。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>A non-greedy quantifier tries to match an element as few times as possible.</source>
          <target state="translated">最短一致の量指定子は、要素をできるだけ少なく一致させようとします。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>You can turn a greedy quantifier into a lazy quantifier by simply adding a <bpt id="p1">**</bpt>?<ept id="p1">**</ept>.</source>
          <target state="translated">最長一致の量指定子に <bpt id="p1">**</bpt>?<ept id="p1">**</ept> を追加するだけで最短一致の量指定子にすることができます。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Consider a simple regular expression that is intended to extract the last four digits from a string of numbers such as a credit card number.</source>
          <target state="translated">クレジット カード番号などの数値の列から最後の&amp;4; 桁の数字を取り出す、単純な正規表現について考えてみます。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>The version of the regular expression that uses the <bpt id="p1">**</bpt><ph id="ph1">\*</ph><ept id="p1">**</ept> greedy quantifier is <ph id="ph2">`\b.*([0-9]{4})\b`</ph>.</source>
          <target state="translated">最長一致の <bpt id="p1">**</bpt><ph id="ph1">\*</ph><ept id="p1">**</ept> 量指定子を使用するバージョンの正規表現は、<ph id="ph2">`\b.*([0-9]{4})\b`</ph> です。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>However, if a string contains two numbers, this regular expression matches the last four digits of the second number only, as the following example shows.</source>
          <target state="translated">しかし、2 個の数値が含まれている文字列の場合、この正規表現は、次の例に示すように&amp;2; 番目の数値の最後の&amp;4; 桁の数字だけに一致します。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>The regular expression fails to match the first number because the <bpt id="p1">**</bpt><ph id="ph1">\*</ph><ept id="p1">**</ept> quantifier tries to match the previous element as many times as possible in the entire string, and so it finds its match at the end of the string.</source>
          <target state="translated">この正規表現は最初の数値の一致に失敗します。<bpt id="p1">**</bpt><ph id="ph1">\*</ph><ept id="p1">**</ept> 量指定子では、直前の要素をできるだけ多く繰り返して文字列全体に一致させようとして、文字列の最後まで一致と見なされるためです。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>This is not the desired behavior.</source>
          <target state="translated">これは期待した動作ではありません。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Instead, you can use the <bpt id="p1">**</bpt><ph id="ph1">\*</ph>?<ept id="p1">**</ept></source>
          <target state="translated">この場合は、次の例に示すように、代わりに最短一致の <bpt id="p1">**</bpt><ph id="ph1">\*</ph>?<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>lazy quantifier to extract digits from both numbers, as the following example shows.</source>
          <target state="translated">量指定子を使用すると、両方の数値から数字を抽出できます。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>In most cases, regular expressions with greedy and lazy quantifiers return the same matches.</source>
          <target state="translated">多くの場合、最長一致と最短一致の量指定子を使用した正規表現は、同じ一致結果を返します。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>They most commonly return different results when they are used with the wildcard (<bpt id="p1">**</bpt>.<ept id="p1">**</ept>) metacharacter, which matches any character.</source>
          <target state="translated">異なる結果を返すことが最も多いのは、任意の文字に一致するワイルドカード (<bpt id="p1">**</bpt>.<ept id="p1">**</ept>) のメタ文字を使用した場合です。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Quantifiers and empty matches</source>
          <target state="translated">量指定子と空一致</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>The quantifiers <bpt id="p1">**</bpt><ph id="ph1">\*</ph><ept id="p1">**</ept>, <bpt id="p2">**</bpt><ph id="ph2">+</ph><ept id="p2">**</ept>, and <bpt id="p3">**</bpt>{<ept id="p3">**</ept><bpt id="p4">_</bpt>n<ept id="p4">_</ept><bpt id="p5">**</bpt>,<ept id="p5">**</ept><bpt id="p6">_</bpt>m<ept id="p6">_</ept><bpt id="p7">**</bpt>}<ept id="p7">**</ept> and their lazy counterparts never repeat after an empty match when the minimum number of captures has been found.</source>
          <target state="translated">量指定子 <bpt id="p1">**</bpt><ph id="ph1">\*</ph><ept id="p1">**</ept>、<bpt id="p2">**</bpt><ph id="ph2">+</ph><ept id="p2">**</ept>、および <bpt id="p3">**</bpt>{<ept id="p3">**</ept><bpt id="p4">_</bpt>n<ept id="p4">_</ept><bpt id="p5">**</bpt>,<ept id="p5">**</ept><bpt id="p6">_</bpt>m<ept id="p6">_</ept><bpt id="p7">**</bpt>}<ept id="p7">**</ept> と、これらに対応する最短一致の量指定子は、最小回数のキャプチャが見つかった場合、空一致の後には繰り返されません。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>This rule prevents quantifiers from entering infinite loops on empty subexpression matches when the maximum number of possible group captures is infinite or near infinite.</source>
          <target state="translated">この規則により、可能なグループ キャプチャの最大回数が無限またはほぼ無限のときに、量指定子が空の部分式一致の無限ループに入ることを回避できます。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>For example, the following code shows the result of a call to the <bpt id="p1">[</bpt>Regex.Match<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Match(System.String))</ept> method with the regular expression pattern <ph id="ph1">`(a?)*,`</ph> which matches zero or one "a" character zero or more times.</source>
          <target state="translated">たとえば、次のコードは、0 個または&amp;1; 個の文字 "a" と&amp;0; 回以上一致する正規表現パターン <ph id="ph1">`(a?)*,`</ph> を指定して <bpt id="p1">[</bpt>Regex.Match<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Match(System.String))</ept> メソッドを呼び出した結果を表示します。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Note that the single capturing group captures each "a" as well as <bpt id="p1">[</bpt>String.Empty<ept id="p1">](xref:System.String.Empty)</ept>, but that there is no second empty match, because the first empty match causes the quantifier to stop repeating.</source>
          <target state="translated">単一のキャプチャ グループによって各 "a" と <bpt id="p1">[</bpt>String.Empty<ept id="p1">](xref:System.String.Empty)</ept> がキャプチャされますが、2 番目の空一致はないことに注意してください。これは、最初の空一致により量指定子が繰り返しを停止するためです。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>To see the practical difference between a capturing group that defines a minimum and a maximum number of captures and one that defines a fixed number of captures, consider the regular expression patterns <ph id="ph1">`(a\1|(?(1)\1)){0,2}`</ph> and <ph id="ph2">`(a\1|(?(1)\1)){2}`</ph>.</source>
          <target state="translated">最小回数と最大回数のキャプチャを定義するキャプチャ グループと固定回数のキャプチャを定義するキャプチャ グループとの間の実際の違いを確認するために、正規表現パターンの <ph id="ph1">`(a\1|(?(1)\1)){0,2}`</ph> と <ph id="ph2">`(a\1|(?(1)\1)){2}`</ph> について検討します。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Both regular expressions consist of a single capturing group, which is defined as shown in the following table.</source>
          <target state="translated">どちらの正規表現も、次の表に示すように定義される単一のキャプチャ グループで構成されています。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">パターン</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">説明</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Either match "a" along with the value of the first captured group …</source>
          <target state="translated">"a" と最初のキャプチャ グループの値に一致します …</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>…</source>
          <target state="translated">…</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>or test whether the first captured group has been defined.</source>
          <target state="translated">または、最初のキャプチャ グループが定義されているかどうかをテストします。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>(Note that the <bpt id="p1">**</bpt>(?(1)<ept id="p1">**</ept> construct does not define a capturing group.)</source>
          <target state="translated">(<bpt id="p1">**</bpt>(?(1)<ept id="p1">**</ept> 構成要素ではキャプチャ グループは定義されないことに注意してください。)</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>If the first captured group exists, match its value.</source>
          <target state="translated">最初のキャプチャ グループが存在する場合、その値と一致します。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>If the group does not exist, the group will match <bpt id="p1">[</bpt>String.Empty<ept id="p1">](xref:System.String.Empty)</ept>.</source>
          <target state="translated">グループが存在しない場合、そのグループは <bpt id="p1">[</bpt>String.Empty<ept id="p1">](xref:System.String.Empty)</ept> と一致します。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>The first regular expression tries to match this pattern between zero and two times; the second, exactly two times.</source>
          <target state="translated">最初の正規表現では&amp;0; ～&amp;2; 回、このパターンとの照合が行われます。2 番目の正規表現では、厳密に&amp;2; 回です。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Because the first pattern reaches its minimum number of captures with its first capture of <bpt id="p1">[</bpt>String.Empty<ept id="p1">](xref:System.String.Empty)</ept>, it never repeats to try to match <ph id="ph1">`a\1;`</ph> the <ph id="ph2">`{0,2}`</ph> quantifier allows only empty matches in the last iteration.</source>
          <target state="translated">最初のパターンは <bpt id="p1">[</bpt>String.Empty<ept id="p1">](xref:System.String.Empty)</ept> の最初のキャプチャでキャプチャの最小回数に達するため、<ph id="ph1">`a\1;`</ph> との照合は繰り返されません。<ph id="ph2">`{0,2}`</ph> 量指定子では、最後の繰り返しでの空一致だけが許可されます。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>In contrast, the second regular expression does match "a" because it evaluates <ph id="ph1">`a\1`</ph> a second time; the minimum number of iterations, 2, forces the engine to repeat after an empty match.</source>
          <target state="translated">一方、2 番目の正規表現では、2 回目の <ph id="ph1">`a\1`</ph> が評価されるため、"a" に一致します。繰り返しの最小回数は 2 で、空一致の後でエンジンが繰り返さなければならない回数になります。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>See also</source>
          <target state="translated">関連項目</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Regular expression language - quick reference<ept id="p1">](quick-ref.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>正規表現言語 - クイック リファレンス<ept id="p1">](quick-ref.md)</ept></target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Backtracking in regular expressions<ept id="p1">](backtracking.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>正規表現におけるバックトラッキング<ept id="p1">](backtracking.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>