<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-6a73dd2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d863587fbfee2bf713f8566a3e5b294d49ae50e9</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\deploying\creating-nuget-packages.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p1</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7c39f0e3f60ca0f18f61039965109663a3454702</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">55bf9d88e534f923a20a04e22bf6d0c275ece669</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Creating a NuGet Package with Cross Platform Tools</source>
          <target state="translated">クロス プラットフォーム ツールによる NuGet パッケージの作成</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Creating a NuGet Package with Cross Platform Tools</source>
          <target state="translated">クロス プラットフォーム ツールによる NuGet パッケージの作成</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core, NuGet</source>
          <target state="translated">.NET, .NET Core, NuGet</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>How to Create a NuGet Package with Cross Platform Tools</source>
          <target state="translated">クロスプラットフォーム ツールを使用して NuGet パッケージを作成する方法</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The following shows command-line samples using Unix.</source>
          <target state="translated">以下は、Unix を使用する場合のコマンド ライン サンプルです。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`dotnet pack`</ph> command as shown here works the same way on Windows.</source>
          <target state="translated">ここに示されている <ph id="ph1">`dotnet pack`</ph> コマンドは Windows でも同じように機能します。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For .NET Core 1.0, libraries are expected to be distributed as NuGet packages.</source>
          <target state="translated">.NET Core 1.0 では、ライブラリは NuGet パッケージとして配布する必要があります。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This is in fact how all of the .NET Standard libraries are distributed and consumed.</source>
          <target state="translated">実際に、.NET Standard ライブラリはすべてそのように配布され、使用されています。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This is most easily done with the <ph id="ph1">`dotnet pack`</ph> command.</source>
          <target state="translated"><ph id="ph1">`dotnet pack`</ph> コマンドを使用して行うのが最も簡単です。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Imagine that you just wrote an awesome new library that you would like to distribute over NuGet.</source>
          <target state="translated">たとえば、NuGet 経由で配布する新しい優れたライブラリを作成したとします。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You can create a NuGet package with cross platform tools to do exactly that!</source>
          <target state="translated">クロス プラットフォーム ツールを使用して NuGet パッケージを作成すれば、正確に実行できます。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The following example assumes a library called <bpt id="p1">**</bpt>SuperAwesomeLibrary<ept id="p1">**</ept> which targets <ph id="ph1">`netstandard1.0`</ph>.</source>
          <target state="translated">次の例では、<ph id="ph1">`netstandard1.0`</ph> をターゲットとする <bpt id="p1">**</bpt>SuperAwesomeLibrary<ept id="p1">**</ept> というライブラリを想定します。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If you have transitive dependencies; that is, a project which depends on another project, you'll need to make sure to restore packages for your entire solution with the <ph id="ph1">`dotnet restore`</ph> command before creating a NuGet package.</source>
          <target state="translated">推移的依存関係がある (つまり、別のプロジェクトに依存するプロジェクトがある) 場合、NuGet パッケージを作成する前に <ph id="ph1">`dotnet restore`</ph> コマンドでソリューション全体のパッケージを復元する必要があります。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Failing to do so will result in the <ph id="ph1">`dotnet pack`</ph> command to not work properly.</source>
          <target state="translated">そうしないと、<ph id="ph1">`dotnet pack`</ph> コマンドが正しく機能しません。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>After ensuring packages are restored, you can navigate to the directory where a library lives:</source>
          <target state="translated">パッケージが復元されたことを確認したら、以下のコマンドを実行してライブラリがあるディレクトリに移動できます。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Then it's just a single command from the command line:</source>
          <target state="translated">その後、コマンド ラインから以下の 1 つのコマンドのみを実行します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Your <ph id="ph1">`/bin/Debug`</ph> folder will now look like this:</source>
          <target state="translated">これで <ph id="ph1">`/bin/Debug`</ph> フォルダーは次のようになります。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Note that this will produce a package which is capable of being debugged.</source>
          <target state="translated">この場合、デバッグ可能なパッケージが生成されることに注意してください。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If you want to build a NuGet package with release binaries, all you need to do is add the <ph id="ph1">`-c`</ph><ph id="ph2">/</ph><ph id="ph3">`--configuration`</ph> switch and use <ph id="ph4">`release`</ph> as the argument.</source>
          <target state="translated">リリース バイナリと共に NuGet パッケージをビルドする場合、<ph id="ph1">`-c`</ph><ph id="ph2">/</ph><ph id="ph3">`--configuration`</ph> スイッチを追加して、引数として <ph id="ph4">`release`</ph> を使用するだけです。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Your <ph id="ph1">`/bin`</ph> folder will now have a <ph id="ph2">`release`</ph> folder containing your NuGet package with release binaries:</source>
          <target state="translated">これで、<ph id="ph1">`/bin`</ph> フォルダーに、NuGet パッケージとリリース バイナリを含む <ph id="ph2">`release`</ph> フォルダーが生成されます。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>And now you have the necessary files to publish a NuGet package!</source>
          <target state="translated">これで、NuGet パッケージを発行するために必要なファイルが準備できました。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Don't confuse <ph id="ph1">`dotnet pack`</ph> with <ph id="ph2">`dotnet publish`</ph></source>
          <target state="translated"><ph id="ph1">`dotnet pack`</ph>と <ph id="ph2">`dotnet publish`</ph> を混同しないようにしてください</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>It is important to note that at no point is the <ph id="ph1">`dotnet publish`</ph> command involved.</source>
          <target state="translated">ここで <ph id="ph1">`dotnet publish`</ph> コマンドを使用しても意味がありません。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`dotnet publish`</ph> command is for deploying applications with all of their dependencies in the same bundle -  not for generating a NuGet package to be distributed and consumed via NuGet.</source>
          <target state="translated"><ph id="ph1">`dotnet publish`</ph> コマンドは、同じバンドルにすべての依存関係があるアプリケーションを配置するためのものであり、NuGet 経由で配布して使用する NuGet パッケージを生成するためのものではありません。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>