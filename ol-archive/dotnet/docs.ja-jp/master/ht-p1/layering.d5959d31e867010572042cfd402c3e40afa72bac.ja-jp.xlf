<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-6a73dd2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">233d365b582c274cd3a1f078846a6e854c7a6c95</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\preview3\tools\layering.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p1</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2d631122c1ab87bfc94c77ec9fc9d33c1599ead7</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f85c48891bdd2e31e9b5279289b09b07c63150a0</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>.NET Core Command Line Tools Preview 3 Architecture</source>
          <target state="translated">.NET Core コマンド ライン ツールの Preview 3 のアーキテクチャ</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Preview 3 brings about certain changes to the way the overall .NET Core tools are layered.</source>
          <target state="translated">Preview 3 では、.NET Core のツールの階層化の方法全体が変わります。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>CLI, extensibility, custom commands, .NET Core</source>
          <target state="translated">CLI, 拡張, カスタム コマンド, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>High level overview of changes in CLI Preview 3</source>
          <target state="translated">CLI Preview 3 の変更の概要</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="translated">概要</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This document will describe in high-level the changes that moving from <ph id="ph1">`project.json`</ph> to MSBuild and <ph id="ph2">`csproj`</ph> project system bring.</source>
          <target state="translated">このドキュメントでは、<ph id="ph1">`project.json`</ph> から MSBuild および <ph id="ph2">`csproj`</ph> プロジェクト システムに移行する場合の概要を説明します。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>It will outline the new way the tooling is layered all-up and which new pieces are available and what is their place in the overall picture.</source>
          <target state="translated">ツールの新しい階層化の概要および、使用できる新しいツールとそれの全体の中での位置付けを示します。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>After reading this article, you should have a better understanding of all of the pieces that make up .NET Core tooling after moving to MSBuild and <ph id="ph1">`csproj`</ph>.</source>
          <target state="translated">この記事を読み終えると、MSBuild と <ph id="ph1">`csproj`</ph> に移行した後の .NET Core ツールのすべてのツールをより理解できるようになります。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note:<ept id="p1">**</ept> this article is <bpt id="p2">**</bpt>not required<ept id="p2">**</ept> to use the Preview 3 .NET Core Command Line tools.</source>
          <target state="translated"><bpt id="p1">**</bpt>注:<ept id="p1">**</ept> この記事では、Preview 3 の .NET Core のコマンド ライン ツールを使用する<bpt id="p2">**</bpt>必要はありません<ept id="p2">**</ept>。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>you can continue using the tools as you are used to.</source>
          <target state="translated">使いなれたツールを使用し続けることができます。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This article is here to complete the picture of how the move to MSBuild changes the overall "layering" and the architecture of the command line tools.</source>
          <target state="translated">この記事では、MSBuild に移行した場合、コマンド ライン ツールの階層全体およびアーキテクチャがどのように変わるかの全体像を示します。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Moving away from project.json</source>
          <target state="translated">project.json から移行する</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The biggest change in the Preview 3 tooling for .NET Core is certainly the <bpt id="p1">[</bpt>move away from project.json to csproj<ept id="p1">](https://blogs.msdn.microsoft.com/dotnet/2016/05/23/changes-to-project-json/)</ept> as the project system.</source>
          <target state="translated">.NET Core の Preview 3 ツールの最大の違いは、プロジェクト システムが <bpt id="p1">[</bpt>project.json から csproj に移行<ept id="p1">](https://blogs.msdn.microsoft.com/dotnet/2016/05/23/changes-to-project-json/)</ept>されることです。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Preview 3 version of the command line tools is the first release of .NET Core command line tooling that does not contain any support for project.json.</source>
          <target state="translated">このコマンド ライン ツールの Preview 3 バージョンは、project.json が完全にサポートされなくなる .NET Core コマンド ライン ツールの最初のリリースです。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>That means that it cannot be used to build, run or publish project.json based applications and libraries.</source>
          <target state="translated">これは、project.json を使用してアプリケーションやライブラリを構築、実行、発行できないことを意味します。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In order to use this version of the tools, you will need to migrate your existing projects or start new ones.</source>
          <target state="translated">このバージョンのツールを使用するには、既存のプロジェクトを移行するか、新規に作成する必要があります。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>As part of this move, the custom build engine that was developed to build project.json projects was replaced with a mature and fully capable build engine called <bpt id="p1">[</bpt>MSBuild<ept id="p1">](https://github.com/Microsoft/msbuild)</ept>.</source>
          <target state="translated">この移行の一環として、project.json プロジェクトの構築用に開発されたカスタム ビルド エンジンが、<bpt id="p1">[</bpt>MSBuild<ept id="p1">](https://github.com/Microsoft/msbuild)</ept> と呼ばれる、成熟した完全な機能を持つビルド エンジンに置き換えられました。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>MSBuild is a well-known engine in the .NET community, since it has been a key technology since the platform's first release.</source>
          <target state="translated">MSBuild は、プラットフォームの最初のリリース以来重要なテクノロジとなっているエンジンで、.NET コミュニティでは広く知られています。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Of course, because it needs to build .NET Core applications, MSBuild has been ported to .NET Core and can be used on any platform that .NET Core runs on.</source>
          <target state="translated">MSBuild では .NET Core アプリケーションを構築するので、もちろん .NET Core に移植され、.NET Core を実行するすべてのプラットフォームで使用できるようになっています。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>One of the main promises of .NET Core is that of a cross-platform development stack, and we have made sure that this move does not break that promise.</source>
          <target state="translated">.NET Core の最大の保証の 1 つは、これがクロスプラット フォームの開発スタックであるということです。この動きによってこれは保証され続けるように努めました。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note:<ept id="p1">**</ept> if you are new to MSBuild and would like to learn more about it, you can start by reading the <bpt id="p2">[</bpt>existing documentation<ept id="p2">](https://msdn.microsoft.com/en-us/library/dd637714.aspx)</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>注:<ept id="p1">**</ept> MSBuild を初めて使用する方が、これについて深く学ぶには、最初に<bpt id="p2">[</bpt>既存ドキュメント<ept id="p2">](https://msdn.microsoft.com/en-us/library/dd637714.aspx)</ept>をお読みになってください。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The tooling layers</source>
          <target state="translated">ツールの階層</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>With the move away from the existing project system as well as with building engine switches, the question that naturally follows is do any of these changes change the overall "layering" of the whole .NET Core tooling ecosystem?</source>
          <target state="translated">既存のプロジェクト システムとビルド エンジンが切り替わるにあたり、これらの変更によって .NET Core ツールのエコシステム全体の "レイヤー" には全体的な変更があるのかという疑問が当然生じると思います。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Are there new bits and components?</source>
          <target state="translated">小さなものからコンポーネントまで、新しいものはありますか?</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Let's start with a quick refresher on Preview 2 layering as shown in the following picture:</source>
          <target state="translated">次の図で Preview 2 のレイヤーを簡単に再確認してみましょう。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Preview 2 tools high-level architecture</source>
          <target state="translated">Preview 2 のツールの概要</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The layering of the tools is quite simple.</source>
          <target state="translated">ツールのレイヤーはかなり単純です。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>At the bottom we have the .NET Core Command Line tools as a foundation.</source>
          <target state="translated">最下層には .NET Core のコマンド ライン ツールが基礎としてあります。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>All other, higher-level tools such as Visual Studio or VS Code, depend and rely on the CLI to build projects, restore dependencies and so on.</source>
          <target state="translated">Visual Studio または VS コードなどのその他のすべての上位レベルのツールは、プロジェクトの構築、依存関係の復元に CLI に依存します。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This meant that, for example, if Visual Studio wanted to perform a restore operation, it would call into <ph id="ph1">`dotnet restore`</ph> command in the CLI.</source>
          <target state="translated">これは、たとえば Visual Studio が復元操作を行う場合、CLI の <ph id="ph1">`dotnet restore`</ph> コマンドが呼び出されることを意味します。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>With the move to the new project system, the previous diagram changes:</source>
          <target state="translated">新しいプロジェクト システムに移行すると、前の図は以下のように変わります。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Preview 3 tools high-level architecture</source>
          <target state="translated">Preview 3 のツールの概要</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The main difference is that the CLI is not the foundational layer anymore; this role is now filled by the "shared SDK component".</source>
          <target state="translated">主な違いは、CLI が基本的なレイヤーではなくなり、この役割が "共有 SDK コンポーネント" に置き換えられたことです。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This shared SDK component is a set of targets and associated tasks that are responsible for compiling your code, publishing it, packing nuget packages etc. The SDK itself is open-source and is available on GitHub on the <bpt id="p1">[</bpt>SDK repo<ept id="p1">](https://github.com/dotnet/sdk)</ept>.</source>
          <target state="translated">この共有 SDK コンポーネントとは、一連のターゲットとそれに関連付けられている、コードのコンパイル、その発行、nuget パッケージの作成などを担当するタスクです。SDK 自体はオープン ソースであり、GitHub の <bpt id="p1">[</bpt>SDK リポジトリ<ept id="p1">](https://github.com/dotnet/sdk)</ept>から入手できます。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note:<ept id="p1">**</ept> a "target" is an MSBuild term that indicates a named operation that MSBuild can invoke.</source>
          <target state="translated"><bpt id="p1">**</bpt>注:<ept id="p1">**</ept> "ターゲット" とは、MSBuild が呼び出すことのできる名前付きの操作を意味する MSBuild の用語です。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>It is usually coupled with one or more tasks that execute some logic that the target is supposed to do.</source>
          <target state="translated">これは、通常ターゲットが行うことを期待されているいくつかのロジックを実行する 1 つ以上のタスクと連結されています。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>MSBuild supports many ready-made targets such as <ph id="ph1">`Copy`</ph> or <ph id="ph2">`Execute`</ph>; it also allows users to write their own tasks using managed code and define targets to execute those tasks.</source>
          <target state="translated">MSBuild では、<ph id="ph1">`Copy`</ph> や <ph id="ph2">`Execute`</ph> などの多数の既製ターゲットをサポートしています。また、ユーザーがマネージ コードを使用して、独自のタスクを記述し、それらのタスクをターゲットに実行させるよう定義することも可能です。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>You can read more about MSBuild tasks on <bpt id="p1">[</bpt>MSDN<ept id="p1">](https://msdn.microsoft.com/en-us/library/ms171466.aspx)</ept>.</source>
          <target state="translated">MSBuild のタスクの詳細については、「<bpt id="p1">[</bpt>MSDN<ept id="p1">](https://msdn.microsoft.com/en-us/library/ms171466.aspx)</ept>」を参照してください。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>All the toolsets now consume the shared SDK component and its targets, CLI included.</source>
          <target state="translated">すべてのツールセットは、CLI を含む、共有 SDK コンポーネントとそのターゲットを消費します。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>For example, the next version of Visual Studio will not call into <ph id="ph1">`dotnet restore`</ph> command to restore dependencies for .NET Core projects, it will use the "Restore" target directly.</source>
          <target state="translated">たとえば、Visual Studio の次のバージョンでは .NET Core プロジェクトの依存関係の復元に <ph id="ph1">`dotnet restore`</ph> コマンドを呼び出しません。直接 "Restore" ターゲットを使用します。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Since these are MSBuild targets, you can also use raw MSBuild to execute them using the <bpt id="p1">[</bpt>dotnet msbuild<ept id="p1">](dotnet-msbuild.md)</ept> command.</source>
          <target state="translated">これらは MSBuild のターゲットであるため、これらの実行に未加工の MSBuild の <bpt id="p1">[</bpt>dotnet msbuild<ept id="p1">](dotnet-msbuild.md)</ept> コマンドを使用することも可能です。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Preview 3 CLI commands</source>
          <target state="translated">Preview 3 の CLI コマンド</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The shared SDK component means that the majority of existing CLI commands have been re-implemented as MSBuild tasks and targets.</source>
          <target state="translated">共有 SDK コンポーネントとは、大多数の既存の CLI コマンドが MSBuild のタスクやターゲットとして再実装されたものです。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>What does this mean for the CLI commands and your usage of the toolset?</source>
          <target state="translated">これは CLI コマンドやツールセットの使用にどのような意味があるのでしょうか?</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>From an usage perspective, it doesn't change the way you use the CLI.</source>
          <target state="translated">使用の観点からは、CLI の使用方法には変わりはありません。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The CLI still has the core commands that exist in Preview 2 release:</source>
          <target state="translated">CLI にはまだ Preview 2 リリースにある主要なコマンドがあります。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>These commands still do what you expect them to do (new up a project, build it, publish it, pack it and so on).</source>
          <target state="translated">これらのコマンドは、現在も (新しいプロジェクトの作成、構築、発行、作成などの) 目的の動作をします。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Majority of the options are not changed, and are still there, and you can consult either the commands' help screens (using <ph id="ph1">`dotent &lt;command&gt; --help`</ph>) or Preview 3 documentation on this site to get familiar with any changes.</source>
          <target state="translated">オプションの多くは変更されず残っています。変更の詳細については、コマンドのヘルプ画面を (<ph id="ph1">`dotent &lt;command&gt; --help`</ph> コマンドを使用して) 確認するか、このサイトの Preview 3 ドキュメントを参照してください。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>From an execution perspective, the CLI commands will take their parameters and construct a call to "raw" MSBuild that will set the needed properties and run the desired target.</source>
          <target state="translated">実行の観点から見た場合、CLI コマンドはそのパラメーターを取り、必要なプロパティを設定して目的のターゲットを実行する「未加工」の MSBuild への呼び出しを作成します。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>To better illustrate this, consider the following command:</source>
          <target state="translated">次の図でこれを分かりやすく説明します。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>This command is publishing an application into a <ph id="ph1">`pub`</ph> folder using the "Release" configuration.</source>
          <target state="translated">このコマンドは、"Release" 構成を使用してアプリケーションを <ph id="ph1">`pub`</ph> フォルダーに発行します。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Internally, this command gets translated into the following MSBuild invocation:</source>
          <target state="translated">このコマンドは、内部では次の MSBuild の呼び出しに変換されます。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The notable exception to this rule are <ph id="ph1">`new`</ph> and <ph id="ph2">`run`</ph> commands, as they have not been implemented as MSBuild targets.</source>
          <target state="translated"><ph id="ph1">`new`</ph> と <ph id="ph2">`run`</ph> のコマンドは、MSBuild のターゲットとして実装されておらず、このルールの主な例外です。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Conclusion</source>
          <target state="translated">まとめ</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>This document outlined at a high-level the changes that are happening to the overall CLI tooling architecture and functioning that are coming with Preview 3.</source>
          <target state="translated">このドキュメントでは、Preview 3 で導入される CLI ツールのアーキテクチャと機能全体に対する変更の概要を示しました。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>It has introduced the notion of the shared SDK component as well as explained how the CLI commands function, from a technical perspective, in Preview 3.</source>
          <target state="translated">共有 SDK コンポーネントの概念を導入するとともに、Preview 3 での CLI コマンドのしくみを技術的な観点から説明しました。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>