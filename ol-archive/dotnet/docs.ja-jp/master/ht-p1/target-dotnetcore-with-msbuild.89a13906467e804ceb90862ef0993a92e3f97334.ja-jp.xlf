<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-eac019f" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5d37e78be88828d6c82777f96b6334903aecbe53</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\tutorials\target-dotnetcore-with-msbuild.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p1</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9d67f3601a3cb1048712a906cf656953435abf39</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2108c62291854c71e99819295eadae00d8e08f9e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Using MSBuild to build .NET Core projects</source>
          <target state="translated">MSBuild を使用して .NET Core プロジェクトを作成する</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Using MSBuild to build .NET Core projects</source>
          <target state="translated">MSBuild を使用して .NET Core プロジェクトを作成する</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Using MSBuild to build .NET Core projects</source>
          <target state="translated">MSBuild を使用して .NET Core プロジェクトを作成する</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The .NET Core tooling is going to <bpt id="p1">[</bpt>move from project.json to MSBuild based projects<ept id="p1">](https://blogs.msdn.microsoft.com/dotnet/2016/05/23/changes-to-project-json/)</ept>.</source>
          <target state="translated">.NET Core ツールは <bpt id="p1">[</bpt>project.json から MSBuild ベースのプロジェクトに移行<ept id="p1">](https://blogs.msdn.microsoft.com/dotnet/2016/05/23/changes-to-project-json/)</ept>されます。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>We expect the first version of the .NET Core tools that use MSBuild to ship along with the next version of Visual Studio.</source>
          <target state="translated">MSBuild を使用する最初のバージョンの .NET Core ツールが次のバージョンの Visual Studio と共に出荷される予定です。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>However, it is possible to use MSBuild for .NET Core projects today, and this page shows how.</source>
          <target state="translated">ただし、現在、.NET Core プロジェクトに MSBuild を利用できます。その方法をこのページで紹介します。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>We recommend that most people targeting .NET Core with <bpt id="p1">*</bpt>new<ept id="p1">*</ept> projects today use the default tooling experience with project.json because of the following reasons:</source>
          <target state="translated">現在、<bpt id="p1">*</bpt>新しい<ept id="p1">*</ept>プロジェクトで .NET Core をターゲットにしているユーザーの大半に project.json で既定のツールを利用することを推奨しています。それは次のような理由によります。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>MSBuild doesn't yet support a lot of the benefits of project.json</source>
          <target state="translated">MSBuild はまだ project.json のさまざまな長所に対応していません</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A lot of the ASP.NET based tooling doesn't currently work with MSBuild projects</source>
          <target state="translated">ASP.NET ベースのツールの大半は現在のところ、MSBuild プロジェクトと連動しません</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>When we do release the .NET Core tooling that uses MSBuild, it will be able to automatically convert from project.json to MSBuild projects</source>
          <target state="translated">MSBuild を使用する .NET Core ツールをリリースするとき、project.json プロジェクトから MSBuild プロジェクトに自動的に変換できるようになります</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You may want to use MSBuild to target .NET Core for existing projects that already use MSBuild that you want to port to .NET Core, or if you are using MSBuild's extensibility in your build for scenarios that are not well supported for project.json projects.</source>
          <target state="translated">既存のプロジェクトで MSBuild を既に使用しているとき、それを .NET Core に移植するのであれば、あるいは、project.json プロジェクトを十分にサポートしないシナリオでビルドに MSBuild の拡張性を利用する場合、MSBuild を使用し、.NET Core をターゲットにすれば、効率的になることがあります。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
          <target state="translated">必須コンポーネント</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Visual Studio 2015 Update 3<ept id="p1">](https://www.visualstudio.com/en-us/news/releasenotes/vs2015-update3-vs)</ept> or higher</source>
          <target state="translated"><bpt id="p1">[</bpt>Visual Studio 2015 更新プログラム 3<ept id="p1">](https://www.visualstudio.com/en-us/news/releasenotes/vs2015-update3-vs)</ept> 以降</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>.NET Core tools for Visual Studio<ept id="p1">](https://www.visualstudio.com/downloads/download-visual-studio-vs)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Visual Studio 用の .NET Core ツール<ept id="p1">](https://www.visualstudio.com/downloads/download-visual-studio-vs)</ept></target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>NuGet Visual Studio extension <bpt id="p1">[</bpt>v3.5.0-beta<ept id="p1">](https://dist.nuget.org/visualstudio-2015-vsix/v3.5.0-beta/NuGet.Tools.vsix)</ept> or later</source>
          <target state="translated">NuGet Visual Studio 拡張機能 <bpt id="p1">[</bpt>v3.5.0-beta<ept id="p1">](https://dist.nuget.org/visualstudio-2015-vsix/v3.5.0-beta/NuGet.Tools.vsix)</ept> 以降</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Creating a library targeting .NET Core</source>
          <target state="translated">.NET Core をターゲットにするライブラリを作成する</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In the Visual Studio menu bar, choose <bpt id="p1">**</bpt>File<ept id="p1">**</ept><ph id="ph1"> | </ph><bpt id="p2">**</bpt>New<ept id="p2">**</ept><ph id="ph2"> | </ph><bpt id="p3">**</bpt>Project<ept id="p3">**</ept> and select <bpt id="p4">**</bpt>Class Library (Portable)<ept id="p4">**</ept></source>
          <target state="translated">Visual Studio メニュー バーで、<bpt id="p1">**</bpt>[ファイル]<ept id="p1">**</ept><ph id="ph1"> | </ph><bpt id="p2">**</bpt>[新規]<ept id="p2">**</ept><ph id="ph2"> | </ph><bpt id="p3">**</bpt>[プロジェクト]<ept id="p3">**</ept> の順に選択し、<bpt id="p4">**</bpt>[クラス ライブラリ (ポータブル)]<ept id="p4">**</ept> を選択します</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>New Project</source>
          <target state="translated">新しいプロジェクト</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Choose a name and location for your project and click <bpt id="p1">**</bpt>OK<ept id="p1">**</ept></source>
          <target state="translated">プロジェクトの名前と場所を選択し、<bpt id="p1">**</bpt>[OK]<ept id="p1">**</ept> をクリックします</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The "Add Portable Class Library" dialog will appear.</source>
          <target state="translated">"ポータブル クラス ライブラリの追加" ダイアログが表示されます。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>.NET Framework 4.6<ept id="p1">**</ept> and <bpt id="p2">**</bpt>ASP.NET Core 1.0<ept id="p2">**</ept> as targets and click <bpt id="p3">**</bpt>OK<ept id="p3">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>[.NET Framework 4.6]<ept id="p1">**</ept> と <bpt id="p2">**</bpt>[ASP.NET Core 1.0]<ept id="p2">**</ept> をターゲットとして選択し、<bpt id="p3">**</bpt>[OK]<ept id="p3">**</ept> をクリックします</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Portable targets dialog</source>
          <target state="translated">ポータブル ターゲット ダイアログ</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In Solution Explorer, right click on your project and choose <bpt id="p1">**</bpt>Properties<ept id="p1">**</ept></source>
          <target state="translated">ソリューション エクスプローラーでプロジェクトを右クリックし、<bpt id="p1">**</bpt>[プロパティ]<ept id="p1">**</ept> を選択します</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Library<ept id="p1">**</ept> tab of the project properties, click on the <bpt id="p2">**</bpt>Target .NET Platform Standard<ept id="p2">**</ept> link, and click <bpt id="p3">**</bpt>Yes<ept id="p3">**</ept> in the dialog that is shown</source>
          <target state="translated">プロジェクト プロパティの <bpt id="p1">**</bpt>[ライブラリ]<ept id="p1">**</ept> タブで、<bpt id="p2">**</bpt>[Target .NET Platform Standard]<ept id="p2">**</ept> リンクをクリックし、ダイアログが表示されたら <bpt id="p3">**</bpt>[はい]<ept id="p3">**</ept> をクリックします</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Open the <ph id="ph1">`project.json`</ph> file in your project, and make the following changes:</source>
          <target state="translated">プロジェクトの <ph id="ph1">`project.json`</ph> ファイルを開き、次の変更を行います。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Change the version number of the <ph id="ph1">`NETStandard.Library`</ph> package to <ph id="ph2">`1.6.0`</ph> (this is the .NET Core 1.0 version of the package)</source>
          <target state="translated"><ph id="ph1">`NETStandard.Library`</ph> パッケージのバージョン番号を <ph id="ph2">`1.6.0`</ph> に変更します (これはパッケージの .NET Core 1.0 バージョンです)</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Add the below <ph id="ph1">`imports`</ph> definition inside the <ph id="ph2">`netstandard1.6`</ph> framework definition.</source>
          <target state="translated"><ph id="ph2">`netstandard1.6`</ph> フレームワーク定義の中に下の <ph id="ph1">`imports`</ph> 定義を追加します。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>This will allow your project to reference .NET Core compatible NuGet packages that haven't been updated to target .NET Standard</source>
          <target state="translated">これにより、.NET Standard をターゲットにするように更新されていない .NET Core 互換 NuGet パッケージをプロジェクトは参照できます。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Creating a .NET Core console application</source>
          <target state="translated">.NET Core コンソール アプリケーションを作成する</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Building a console application for .NET Core requires some customization of the MSBuild build process.</source>
          <target state="translated">.NET Core のコンソール アプリケーションを作成するには、MSBuild ビルド プロセスをいくつかカスタマイズする必要があります。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You can find a sample project for a .NET Core console application called <bpt id="p1">[</bpt>CoreApp<ept id="p1">](https://github.com/dotnet/corefxlab/tree/master/samples/NetCoreSample/CoreApp)</ept> in the <bpt id="p2">[</bpt>corefxlab<ept id="p2">](https://github.com/dotnet/corefxlab)</ept> repo.</source>
          <target state="translated"><bpt id="p2">[</bpt>corefxlab<ept id="p2">](https://github.com/dotnet/corefxlab)</ept> リポジトリに .NET Core コンソール アプリケーションのサンプル プロジェクトがあります。「<bpt id="p1">[</bpt>CoreApp<ept id="p1">](https://github.com/dotnet/corefxlab/tree/master/samples/NetCoreSample/CoreApp)</ept>」という名前です。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Another good option is to start with <bpt id="p1">[</bpt>coretemplate<ept id="p1">](https://github.com/mellinoe/coretemplate)</ept>, which uses separate MSBuild targets files to target .NET Core instead of putting the changes directly in the project file.</source>
          <target state="translated"><bpt id="p1">[</bpt>coretemplate<ept id="p1">](https://github.com/mellinoe/coretemplate)</ept> で開始することも推奨されます。変更をプロジェクト ファイルに直接配置する代わりに、別個の MSBuild ターゲット ファイルを利用し、.NET Core をターゲットにします。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>It is also possible to start by creating a project in Visual Studio and modifying it to target .NET Core.</source>
          <target state="translated">Visual Studio でプロジェクトを作成し、.NET Core をターゲットにするように変更することもできます。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The instructions below show the minimal steps to get this working.</source>
          <target state="translated">以下の手順は、これを機能させるための最小手順を示しています。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>In contrast to <bpt id="p1">[</bpt>CoreApp<ept id="p1">](https://github.com/dotnet/corefxlab/tree/master/samples/NetCoreSample/CoreApp)</ept> or <bpt id="p2">[</bpt>coretemplate<ept id="p2">](https://github.com/mellinoe/coretemplate)</ept>, a project created this way won't include configurations for targeting Linux and macOS.</source>
          <target state="translated"><bpt id="p1">[</bpt>CoreApp<ept id="p1">](https://github.com/dotnet/corefxlab/tree/master/samples/NetCoreSample/CoreApp)</ept> や <bpt id="p2">[</bpt>coretemplate<ept id="p2">](https://github.com/mellinoe/coretemplate)</ept> とは対照的に、この方法で作成されたプロジェクトには、Linux や macOS をターゲットにする構成が含まれません。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>In the Visual Studio menu bar, choose <bpt id="p1">**</bpt>File<ept id="p1">**</ept><ph id="ph1"> | </ph><bpt id="p2">**</bpt>New<ept id="p2">**</ept><ph id="ph2"> | </ph><bpt id="p3">**</bpt>Project<ept id="p3">**</ept> and select <bpt id="p4">**</bpt>Console Application<ept id="p4">**</ept></source>
          <target state="translated">Visual Studio メニュー バーで、<bpt id="p1">**</bpt>[ファイル]<ept id="p1">**</ept><ph id="ph1"> | </ph><bpt id="p2">**</bpt>[新規]<ept id="p2">**</ept><ph id="ph2"> | </ph><bpt id="p3">**</bpt>[プロジェクト]<ept id="p3">**</ept> の順に選択し、<bpt id="p4">**</bpt>[コンソール アプリケーション]<ept id="p4">**</ept> を選択します</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Choose a name and location for your project and click <bpt id="p1">**</bpt>OK<ept id="p1">**</ept></source>
          <target state="translated">プロジェクトの名前と場所を選択し、<bpt id="p1">**</bpt>[OK]<ept id="p1">**</ept> をクリックします</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>In Solution Explorer, right click on your project, choose <bpt id="p1">**</bpt>Properties<ept id="p1">**</ept>, and then go to the <bpt id="p2">**</bpt>Build<ept id="p2">**</ept> tab</source>
          <target state="translated">ソリューション エクスプローラーでプロジェクトを右クリックし、<bpt id="p1">**</bpt>[プロパティ]<ept id="p1">**</ept> を選択し、<bpt id="p2">**</bpt>[ビルド]<ept id="p2">**</ept> タブに移動します。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Configuration<ept id="p1">**</ept> dropdown (at the top of the properties page), select <bpt id="p2">**</bpt>All Configurations<ept id="p2">**</ept>, and then change the <bpt id="p3">**</bpt>Platform Target<ept id="p3">**</ept> to <bpt id="p4">**</bpt>x64<ept id="p4">**</ept></source>
          <target state="translated">([プロパティ] ページの上部にある) <bpt id="p1">**</bpt>[構成]<ept id="p1">**</ept> ドロップダウンで、<bpt id="p2">**</bpt>[すべての構成]<ept id="p2">**</ept> を選択し、<bpt id="p3">**</bpt>[プラットフォーム ターゲット]<ept id="p3">**</ept> を <bpt id="p4">**</bpt>[x64]<ept id="p4">**</ept> に変更します</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Delete the <ph id="ph1">`app.config`</ph> file from the project</source>
          <target state="translated">プロジェクトから <ph id="ph1">`app.config`</ph> ファイルを削除します</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Add a <ph id="ph1">`project.json`</ph> file to the project with the following contents:</source>
          <target state="translated">次のコンテンツのプロジェクトに <ph id="ph1">`project.json`</ph> ファイルを追加します。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>In Solution Explorer, right click on the project, choose <bpt id="p1">**</bpt>Unload Project<ept id="p1">**</ept>, then right click again and choose <bpt id="p2">**</bpt>Edit <bpt id="p3">_</bpt>MyProj.csproj<ept id="p3">_</ept><ept id="p2">**</ept>, and make the following changes</source>
          <target state="translated">ソリューション エクスプローラーで、プロジェクトを右クリックして <bpt id="p1">**</bpt>[プロジェクトのアンロード]<ept id="p1">**</ept> を選択し、もう一度右クリックして <bpt id="p2">**</bpt>[<bpt id="p3">_</bpt>MyProj.csproj<ept id="p3">_</ept> の編集]<ept id="p2">**</ept> を選択します。次のような変更を行います</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Remove all the default <ph id="ph1">`Reference`</ph> items (to <ph id="ph2">`System`</ph>, <ph id="ph3">`System.Core`</ph>, etc.)</source>
          <target state="translated">すべての既定の <ph id="ph1">`Reference`</ph> 項目を削除します (<ph id="ph2">`System`</ph>、<ph id="ph3">`System.Core`</ph> など)</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Add the following properties to the first <ph id="ph1">`PropertyGroup`</ph> in the project:</source>
          <target state="translated">プロジェクトの最初の <ph id="ph1">`PropertyGroup`</ph> に次のプロパティを追加します。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Add the following at the end of the file (after the import of <ph id="ph1">`Microsoft.CSharp.Targets`</ph>):</source>
          <target state="translated">ファイルの終わりに次を追加します (<ph id="ph1">`Microsoft.CSharp.Targets`</ph> のインポート後に)。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Close the .csproj file, and reload the project in Visual Studio</source>
          <target state="translated">.csproj ファイルを閉じ、Visual Studio でプロジェクトをもう一度読み込みます</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>You should be able to run your program with F5 in Visual Studio, or from the command line in the output folder with <ph id="ph1">`dotnet MyApp.exe`</ph></source>
          <target state="translated">Visual Studio で F5 を押すと、プログラムが実行されます。または、次が含まれる出力フォルダーでコマンド ラインから実行することもできます。<ph id="ph1">`dotnet MyApp.exe`</ph></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>