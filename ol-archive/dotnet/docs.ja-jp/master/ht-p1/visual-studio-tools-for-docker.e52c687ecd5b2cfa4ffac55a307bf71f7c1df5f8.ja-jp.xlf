<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-6a73dd2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">274402bbd254e97d88771675daf07995983914aa</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\docker\visual-studio-tools-for-docker.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p1</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">08a250983ad0941bcb350d807a68c4def0ffc1aa</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b515b1f8079f4667ed317ca6b7a7ee6778a43bfa</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Visual Studio Tools for Docker</source>
          <target state="translated">Visual Studio Tools for Docker</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Using Visual Studio Tools for Docker</source>
          <target state="translated">Visual Studio Tools for Docker を使用する</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core, Docker, ASP.NET Core, Visual Studio 2015</source>
          <target state="translated">.NET, .NET Core, Docker, ASP.NET Core, Visual Studio 2015</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Visual Studio Tools for Docker</source>
          <target state="translated">Visual Studio Tools for Docker</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Developing and debugging your application in a Docker container can be a ceremony of tasks to get setup with various tools.</source>
          <target state="translated">Docker コンテナーでアプリケーションを開発およびデバッグする場合、さまざまなツールをきちんと準備する必要があります。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Visual Studio Tools for Docker<ept id="p1">](https://visualstudiogallery.msdn.microsoft.com/0f5b2caa-ea00-41c8-b8a2-058c7da0b3e4)</ept> helps you get past the hurdles and find the bugs using F5 to debug your application directly in a locally hosted Docker Container.</source>
          <target state="translated"><bpt id="p1">[</bpt>Visual Studio Tools for Docker<ept id="p1">](https://visualstudiogallery.msdn.microsoft.com/0f5b2caa-ea00-41c8-b8a2-058c7da0b3e4)</ept> は、このハードルを越える手助けをします。F5 を押して、直接ローカルにホストされている Docker コンテナーのアプリケーションにあるバグを探し、デバッグすることができます。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The current version targets Linux Docker containers, with Windows Containers coming soon.</source>
          <target state="translated">現在のバージョンは Linux Docker コンテナー向けで、近日 Windows 用のコンテナーも公開予定です。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
          <target state="translated">必要条件</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Microsoft Visual Studio 2015 Update 3<ept id="p1">](https://www.visualstudio.com/downloads/download-visual-studio-vs)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Microsoft Visual Studio 2015 更新プログラム 3<ept id="p1">](https://www.visualstudio.com/downloads/download-visual-studio-vs)</ept></target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>.NET Core 1.0.1 - VS 2015 Tooling Preview 2<ept id="p1">](https://go.microsoft.com/fwlink/?LinkID=827546)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>.NET Core 1.0.1 - VS 2015 Tooling Preview 2<ept id="p1">](https://go.microsoft.com/fwlink/?LinkID=827546)</ept></target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Docker For Windows<ept id="p1">](https://www.docker.com/products/docker#/windows)</ept> to run your Docker containers locally</source>
          <target state="translated">Docker コンテナーをローカルで実行するための <bpt id="p1">[</bpt>Docker For Windows<ept id="p1">](https://www.docker.com/products/docker#/windows)</ept></target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Installation and setup</source>
          <target state="translated">インストールとセットアップ</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Download and install the <bpt id="p1">[</bpt>Visual Studio Tools for Docker<ept id="p1">](https://aka.ms/DockerToolsForVS)</ept> from the <bpt id="p2">[</bpt>Visual Studio Gallery<ept id="p2">](http://visualstudiogallery.msdn.microsoft.com/)</ept> or you can search for it in <bpt id="p3">**</bpt>Extensions and Updates<ept id="p3">**</ept> within Visual Studio.</source>
          <target state="translated"><bpt id="p1">[</bpt>Visual Studio Tools for Docker<ept id="p1">](https://aka.ms/DockerToolsForVS)</ept> を、<bpt id="p2">[</bpt>Visual Studio ギャラリー<ept id="p2">](http://visualstudiogallery.msdn.microsoft.com/)</ept>からダウンロードしてインストールするか、それを Visual Studio の [<bpt id="p3">**</bpt>拡張機能と更新プログラム<ept id="p3">**</ept>] から探します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>A required configuration is to setup <bpt id="p1">**</bpt><bpt id="p2">[</bpt>Shared Drives<ept id="p2">](https://docs.docker.com/docker-for-windows/#/shared-drives)</ept><ept id="p1">**</ept> in Docker for Windows.</source>
          <target state="translated">Docker for Windows では、<bpt id="p1">**</bpt><bpt id="p2">[</bpt>共有ドライブ<ept id="p2">](https://docs.docker.com/docker-for-windows/#/shared-drives)</ept><ept id="p1">**</ept>を設定する必要があります。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The setting is required for the volume mapping and debugging support.</source>
          <target state="translated">この設定は、ボリュームのマップとデバッグのサポートで必要です。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Right click the Docker icon in the System Tray, click Settings and select Shared Drives.</source>
          <target state="translated">システム トレイの Docker アイコンを右クリックして、[設定] をクリックして [Shared Drives] (共有ドライブ) を選択します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Shared Drives</source>
          <target state="translated">共有ドライブ</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Create an ASP.NET Web Application and add Docker Support</source>
          <target state="translated">ASP.NET Web アプリケーションを作成し、Docker のサポートを追加する</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Using Visual Studio, create a new ASP.NET Core Web Application.</source>
          <target state="translated">Visual Studio を使用して、新しい ASP.NET Core Web アプリケーションを作成できます。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>When the application is loaded, either select <bpt id="p1">**</bpt>Add Docker Support<ept id="p1">**</ept> from the <bpt id="p2">**</bpt>Project Menu<ept id="p2">**</ept> or right click the project from the Solution Explorer and select <bpt id="p3">**</bpt>Add<ept id="p3">**</ept><ph id="ph1"> &gt; </ph><bpt id="p4">**</bpt>Docker Support<ept id="p4">**</ept>.</source>
          <target state="translated">アプリケーションが読み込まれたら、[<bpt id="p2">**</bpt>プロジェクト<ept id="p2">**</ept>] メニューの [<bpt id="p1">**</bpt>Add Docker Support<ept id="p1">**</ept>] (Docker サポートの追加) を選択するか、ソリューション エクスプローラーからプロジェクトを右クリックし、[<bpt id="p3">**</bpt>追加<ept id="p3">**</ept>]<ph id="ph1"> &gt; </ph>[<bpt id="p4">**</bpt>Docker Support<ept id="p4">**</ept>] (Docker サポート) の順に選択します。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Project Menu</source>
          <target state="translated">[プロジェクト] メニュー</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Project Add Docker Support</source>
          <target state="translated">[プロジェクト]、[Add Docker Support] (Docker サポートの追加)</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Project Context Menu</source>
          <target state="translated">プロジェクトのコンテキスト メニュー</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Right Click Add Docker Support</source>
          <target state="translated">[追加]、[Docker Support] (Docker サポート) を右クリック</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The following files are added to the project.</source>
          <target state="translated">プロジェクトに次のファイルが追加されます。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Dockerfile<ept id="p1">**</ept>: the Docker file for ASP.NET Core applications is based on the <bpt id="p2">[</bpt>microsoft/aspnetcore<ept id="p2">](https://hub.docker.com/r/microsoft/aspnetcore)</ept> image.</source>
          <target state="translated"><bpt id="p1">**</bpt>Dockerfile<ept id="p1">**</ept>: ASP.NET Core アプリケーション用の Docker ファイルは、<bpt id="p2">[</bpt>microsoft/aspnetcore<ept id="p2">](https://hub.docker.com/r/microsoft/aspnetcore)</ept> イメージに基づきます。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This image includes the ASP.NET Core NuGet packages, which have been pre-jitted improving startup performance.</source>
          <target state="translated">このイメージには、Just-In-Time (JIT) にコンパイルされてパフォーマンスが向上した ASP.NET Core NuGet パッケージが含まれます。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>When building .NET Core Console Applications, the Dockerfile FROM will reference the most recent <bpt id="p1">[</bpt>microsoft/dotnet<ept id="p1">](https://hub.docker.com/r/microsoft/dotnet)</ept> image.</source>
          <target state="translated">.NET Core のコンソール アプリケーションを構築するとき、Dockerfile の FROM は最新の <bpt id="p1">[</bpt>microsoft/dotnet<ept id="p1">](https://hub.docker.com/r/microsoft/dotnet)</ept> イメージを参照します。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>docker-compose.yml<ept id="p1">**</ept>: base Docker Compose file used to define the collection of images to be built and run with docker-compose build/run.</source>
          <target state="translated"><bpt id="p1">**</bpt>docker-compose.yml<ept id="p1">**</ept>: docker-compose build/run と共に実行され構築されるイメージの集合を定義するために使用されるベースとなる Docker Compose ファイル。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>docker-compose.dev.debug.yml<ept id="p1">**</ept>: additional docker-compose file with for iterative changes when your configuration is set to debug.</source>
          <target state="translated"><bpt id="p1">**</bpt>docker-compose.dev.debug.yml<ept id="p1">**</ept>: 構成がデバッグに設定されている場合の反復的な変更用の追加の docker-compose ファイル。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Visual Studio will call -f docker-compose.yml -f docker-compose.dev.debug.yml to merge these together.</source>
          <target state="translated">Visual Studio は -f docker-compose.yml -f docker-compose.dev.debug.yml を呼び出し、これらをマージします。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This compose file is used by Visual Studio development tools.</source>
          <target state="translated">この構成ファイルは、Visual Studio の開発ツールによって使用されます。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>docker-compose.dev.release.yml<ept id="p1">**</ept>: additional Docker Compose file to debug your release definition.</source>
          <target state="translated"><bpt id="p1">**</bpt>docker-compose.dev.release.yml<ept id="p1">**</ept>: リリース定義をデバッグする、追加の Docker Compose ファイル。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>It will volume mount the debugger so it doesn't change the contents of the production image.</source>
          <target state="translated">実稼働イメージの内容を変更しないように、デバッガーをボリューム マウントします。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The docker-compose.yml file contains the name of the image that is created when project is run.</source>
          <target state="translated">docker-compose.yml ファイルには、プロジェクトの実行時に作成されたイメージの名前が含まれています。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>In this example, <ph id="ph1">`image: user/hellodockertools${TAG}`</ph> generates the image <ph id="ph2">`user/hellodockertools:dev`</ph> when the application is run in <bpt id="p1">**</bpt>Debug<ept id="p1">**</ept> mode and <ph id="ph3">`user/hellodockertools:latest`</ph> in <bpt id="p2">**</bpt>Release<ept id="p2">**</ept> mode respectively.</source>
          <target state="translated">この例では、<ph id="ph1">`image: user/hellodockertools${TAG}`</ph> によってアプリケーションが<bpt id="p1">**</bpt>デバッグ<ept id="p1">**</ept> モードで実行されるとき、<ph id="ph2">`user/hellodockertools:dev`</ph> が生成され、<bpt id="p2">**</bpt>リリース<ept id="p2">**</ept> モードで実行されるときに、<ph id="ph3">`user/hellodockertools:latest`</ph> が生成されます。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You will want to change the <ph id="ph1">`user`</ph> to your Docker Hub username if you plan to push the image to the registry.</source>
          <target state="translated">イメージをレジストリにプッシュする場合、<ph id="ph1">`user`</ph> を Docker Hub のユーザー名に変更してください。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`spboyer/hellodockertools`</ph>, or change to your private registry url <ph id="ph2">`privateregistry.domain.com/`</ph> depending on your configuration.</source>
          <target state="translated">たとえば、<ph id="ph1">`spboyer/hellodockertools`</ph> や、構成に応じて <ph id="ph2">`privateregistry.domain.com/`</ph> のプライベート レジストリ url に変更します。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Debugging</source>
          <target state="translated">デバッグ</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>Docker<ept id="p1">**</ept> from the debug dropdown in the toolbar and use F5 to start debugging the application.</source>
          <target state="translated">ツールバーのデバッグ ドロップダウンから [<bpt id="p1">**</bpt>Docker<ept id="p1">**</ept>] を選択し、F5 を使用してアプリケーションのデバッグを開始します。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The microsoft/aspnetcore image is acquired (if not already in your cache)</source>
          <target state="translated">(キャッシュにない場合) microsoft/aspnetcore イメージが取得されます</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>ASPNETCORE_ENVIRONMENT is set to Development within the container</source>
          <target state="translated">ASPNETCORE_ENVIRONMENT は、コンテナーで Development に設定されます</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>PORT 80 is EXPOSED and mapped to a dynamically assigned port for localhost.</source>
          <target state="translated">ポート 80 が公開され、localhost 用に動的に割り当てられているポートにマップされます。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The port is determined by the docker host and can be queried with docker ps.</source>
          <target state="translated">このポートは、docker ホストによって決定され、docker ps でクエリを実行することができます。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Your application is copied to the container</source>
          <target state="translated">アプリケーションがコンテナーにコピーされます。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Default browser is launched with the debugger attached to the container, using the dynamically assigned port.</source>
          <target state="translated">動的に割り当てられたポートを使用して、デバッガーがコンテナーにアタッチされ、既定のブラウザーが起動します。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The resulting Docker image built is the <ph id="ph1">`dev`</ph> image of your application with the <ph id="ph2">`microsoft/aspnetcore`</ph> images as the base image.</source>
          <target state="translated">構築された結果の Docker イメージは <ph id="ph2">`microsoft/aspnetcore`</ph> イメージをベース イメージとするアプリケーションの <ph id="ph1">`dev`</ph> イメージです。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Note: the dev image is empty of your app contents as Debug confgurations use volume mounting to provide the iterative experience.</source>
          <target state="translated">注: デバッグ構成では、反復にボリューム マウントを使用するため、dev イメージにはアプリのコンテンツは含みません。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>To push an image, use the Release configuration.</source>
          <target state="translated">イメージをプッシュするには、リリース構成を使用します。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The application is running using the container which you can see by running the <ph id="ph1">`docker ps`</ph> command.</source>
          <target state="translated">アプリケーションは、<ph id="ph1">`docker ps`</ph> コマンドを実行して参照できるコンテナーを使用して実行されます。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Edit and Continue</source>
          <target state="translated">エディット コンティニュ</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Changes to static files and/or razor template files (.cshtml) are automatically updated without the need of a compilation step.</source>
          <target state="translated">静的なファイルや razor テンプレート ファイル (.cshtml) に対する変更は、コンパイルをする必要なく、自動的に更新されます。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Make the change, save and tap refresh in the browser to view the update.</source>
          <target state="translated">変更を行って保存し、タップしてブラウザーを更新し、更新を確認します。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Modifications to code files require compiling and a restart of Kestrel within the container.</source>
          <target state="translated">コード ファイルを変更した場合、コンパイルを行い、コンテナー内で Kestrel を再起動する必要があります。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>After making the change, use CTRL + F5 to perform the process and start the application within the container.</source>
          <target state="translated">変更後、CTRL キーを押しながら F5 キーを使用して、手順を実行して、コンテナー内でアプリケーションを起動します。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The Docker container is not rebuilt or stopped; using <ph id="ph1">`docker ps`</ph> in the command line you can see that the original container is still running as of 10 minutes ago.</source>
          <target state="translated">Docker コンテナーは再構築されたり、停止されたりすることはありません。コマンド ラインから <ph id="ph1">`docker ps`</ph> を使用すると、元のコンテナーが 10 分前と同じ状態で実行されていることを確認できます。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Publishing Docker images</source>
          <target state="translated">Docker イメージの発行</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Once you have completed the develop and debug cycle of your application, the Visual Studio Tools for Docker will help you create the production image of your application.</source>
          <target state="translated">アプリケーションの開発とデバッグのサイクルが完了したら、Visual Studio Tools for Docker でアプリケーションの実稼働イメージを作成できます。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Change the debug dropdown to <bpt id="p1">**</bpt>Release<ept id="p1">**</ept> and build the application.</source>
          <target state="translated">デバッグ ドロップダウンを [<bpt id="p1">**</bpt>リリース<ept id="p1">**</ept>] に変更し、アプリケーションを構築します。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The tooling will produce the image with the <ph id="ph1">`:latest`</ph> tag which you can push to your private registry or Docker Hub.</source>
          <target state="translated">このツールにより、イメージが、プライベート レジストリまたは Docker Hub にプッシュできる <ph id="ph1">`:latest`</ph> タグ付きで生成されます。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Using the <ph id="ph1">`docker images`</ph> you can see the list of images.</source>
          <target state="translated"><ph id="ph1">`docker images`</ph> を使用すると、イメージの一覧を確認できます。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>There may be an expectation for the production or release image to be smaller in size by comparison to the <bpt id="p1">**</bpt>dev<ept id="p1">**</ept> image, however through the use of the volume mapping; the debugger and application were actually being run from your local machine and not within the container.</source>
          <target state="translated"><bpt id="p1">**</bpt>dev<ept id="p1">**</ept> イメージと比較した場合、実稼働またはリリース イメージはサイズが小さいと思うかもしれません。しかし、ボリューム マッピングを使用することにより、デバッガーとアプリケーションは実際はコンテナーではなくローカル マシンから実行されます。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>latest<ept id="p1">**</ept> image has packaged the entire application code needed to run the application on a host machine, therefore the delta is the size of your application code.</source>
          <target state="translated"><bpt id="p1">**</bpt>latest<ept id="p1">**</ept> イメージには、ホスト コンピューターでアプリケーションを実行するために必要なアプリケーションのコード全体がパッケージ化されているため、デルタはアプリケーション コードのサイズです。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>