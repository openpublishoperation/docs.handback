<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-6a73dd2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e6212a63e74f2d1525e87480b092861be9f92379</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\assembly-format.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p2</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ede6c3854aab9b51f42f4e28a43b61926e492e83</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b8d15d44ca3191cc1e0e54fe0234341b0299397c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>.NET Assembly File Format</source>
          <target state="translated">.NET アセンブリ ファイルの形式</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>.NET Assembly File Format</source>
          <target state="translated">.NET アセンブリ ファイルの形式</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>.NET Assembly File Format</source>
          <target state="translated">.NET アセンブリ ファイルの形式</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The .NET platform defines a binary file format - “assembly” - that is used to fully-describe and contain .NET programs.</source>
          <target state="translated">.NET プラットフォームでは、.NET プログラムの完全な記述と格納に使用するバイナリ ファイル形式として、"アセンブリ" が定義されています。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Assemblies are used for the programs themselves as well as any dependent libraries.</source>
          <target state="translated">アセンブリは、プログラム自体と同様に従属ライブラリにも使用されます。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>A .NET program can be executed as one of more assemblies, with no other required artifacts, beyond the appropriate .NET runtime.</source>
          <target state="translated">.NET プログラムは、適切な .NET ランタイム以外の成果物を必要とせずに、1 つ以上のアセンブリとして実行できます。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Native dependencies, including operating system APIs, are a separate concern and are not contained within the .NET assembly format, although are sometimes described with this format (for example, WinRT).</source>
          <target state="translated">ネイティブの依存関係 (オペレーティング システム API を含む) は別の考慮事項であり、.NET アセンブリの形式には存在しません。ただし、この形式を使用して記述されることがあります (たとえば WinRT)。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Each CLI component carries the metadata for declarations, implementations, and references specific to that component.</source>
          <target state="translated">各 CLI コンポーネントには、そのコンポーネントに固有の宣言、実装、参照のためのメタデータが含まれます。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Therefore, the component-specific metadata is referred to as component metadata, and the resulting component is said to be self-describing – from ECMA 335 I.9.1, Components and assemblies.</source>
          <target state="translated">そのため、コンポーネント固有のメタデータはコンポーネント メタデータと呼ばれ、結果として得られるコンポーネントは自己記述と呼ばれます (ECMA 335 I.9.1 のコンポーネントおよびアセンブリの仕様)。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The format is fully specified and standardized as ECMA 335.</source>
          <target state="translated">この形式は ECMA 335 として仕様が完全に指定され、標準化されています。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>All .NET compilers and runtimes use this format.</source>
          <target state="translated">すべての .NET コンパイラとランタイムが、この形式を使用します。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The presence of a documented and infrequently updated binary format has been a major benefit (arguably a requirement) for interoperatibility.</source>
          <target state="translated">ドキュメント化された、更新が頻繁でないバイナリ形式の存在は、相互運用性の面で大きなメリットであり、ほぼ間違いなく必要条件になっています。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The format was last updated in a substantive way in 2005 (.NET 2.0) to accommodate generics and processor architecture.</source>
          <target state="translated">この形式が最後に実質的な方法で更新されたのは 2005 年 (.NET 2.0) で、ジェネリックやプロセッサ アーキテクチャに対応するための変更が行われました。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The format is CPU- and OS-agnostic.</source>
          <target state="translated">この形式は CPU や OS に依存しません。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>It has been used as part of .NET runtimes that target many chips and CPUs.</source>
          <target state="translated">多くのチップや CPU を対象にした .NET ランタイムの一部として使用されています。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>While the format itself has Windows heritage, it is implementable on any operating system.</source>
          <target state="translated">この形式自体は Windows で開発された経緯がありますが、任意のオペレーティング システムに実装できます。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>It’s arguably most significant choice for OS interoperability is that most values are stored in little-endian format.</source>
          <target state="translated">OS の相互運用性にかかわる、この形式の最も重要なオプションと言えるのは、ほとんどの値をリトル エンディアン形式で格納することです。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>It doesn’t have a specific affinity to machine pointer size (for example, 32-bit, 64-bit).</source>
          <target state="translated">コンピューターのポインター サイズ (32 ビット、64 ビットなど) に対する特定の関係はありません。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The .NET assembly format is also very descriptive about the structure of a given program or library.</source>
          <target state="translated">.NET アセンブリ形式は、特定のプログラムまたはライブラリの構造をとてもわかりやすく記述することもできます。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>It describes the internal components of an assembly, specifically: assembly references and types defined and their internal structure.</source>
          <target state="translated">アセンブリの内部コンポーネント、具体的にはアセンブリ参照や定義済みの型とそれらの内部構造を記述します。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Tools or APIs can read and process this information for display or to make programmatic decisions.</source>
          <target state="translated">ツールまたは API で表示のためにこの情報の読み取り、処理を行ったり、プログラムによる決定を行うことができます。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Format</source>
          <target state="translated">形式</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The .NET binary format is based on the Windows <bpt id="p1">[</bpt>PE file<ept id="p1">](http://en.wikipedia.org/wiki/Portable_Executable)</ept> format.</source>
          <target state="translated">.NET バイナリ形式は、Windows <bpt id="p1">[</bpt>PE ファイル<ept id="p1">](http://en.wikipedia.org/wiki/Portable_Executable)</ept>形式に基づいています。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In fact, .NET class libraries are conformant Windows PEs, and appear on first glance to be Windows dynamic link libraries (DLLs) or application executables (EXEs).</source>
          <target state="translated">実際には、.NET クラス ライブラリは Windows PE に準拠し、Windows ダイナミック リンク ライブラリ (DLL) またはアプリケーション実行可能ファイル (EXE) のように見えます。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This is a very useful characteristic on Windows, where they can masquerade as native executable binaries and get some of the same treatment (for example, OS load, PE tools).</source>
          <target state="translated">これは Windows 上でとても便利な特性であり、ネイティブな実行可能バイナリのように偽装して、実行可能バイナリと同じように扱うことができます (OS ロード、PE ツールなど)。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Assembly headers</source>
          <target state="translated">アセンブリ ヘッダー</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Assembly Headers from ECMA 335 II.25.1, Structure of the runtime file format.</source>
          <target state="translated">ECMA 335 II.25.1 のランタイム ファイル形式の構造に基づくアセンブリ ヘッダー。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Processing the Assemblies</source>
          <target state="translated">アセンブリの処理</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>It is possible to write tools or APIs to process assemblies.</source>
          <target state="translated">アセンブリを処理するツールや API を記述することができます。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Assembly information enables making programmatic decisions at runtime, re-writing assemblies, providing API IntelliSense in an editor and generating documentation.</source>
          <target state="translated">アセンブリ情報を使用して、実行時のプログラムによる決定、アセンブリの書き換え、エディターでの API IntelliSense の提供、ドキュメントの生成ができます。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.Reflection<ept id="p1">](https://msdn.microsoft.com/library/system.reflection.aspx)</ept> and <bpt id="p2">[</bpt>Mono.Cecil<ept id="p2">](http://www.mono-project.com/docs/tools+libraries/libraries/Mono.Cecil/)</ept> are good examples of tools that are frequently used for this purpose.</source>
          <target state="translated"><bpt id="p1">[</bpt>System.Reflection<ept id="p1">](https://msdn.microsoft.com/library/system.reflection.aspx)</ept> と <bpt id="p2">[</bpt>Mono.Cecil<ept id="p2">](http://www.mono-project.com/docs/tools+libraries/libraries/Mono.Cecil/)</ept> は、この目的によく使われるツールの好例です。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>