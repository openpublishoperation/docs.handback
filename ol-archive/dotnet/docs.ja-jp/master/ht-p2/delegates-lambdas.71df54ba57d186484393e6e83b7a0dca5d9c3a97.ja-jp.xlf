<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-eac019f" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0d1dfc333f16acad44b1e276b75ff3c65a77e5aa</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\delegates-lambdas.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p2</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">aae9cbbba18c773bfb2aa397d05cf92d27a78319</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">46e09833ba2995d4f5a0cfa8ea89899539be0125</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Delegates and lambdas</source>
          <target state="translated">デリゲートとラムダ</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Delegates and lambdas</source>
          <target state="translated">デリゲートとラムダ</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Delegates and lambdas</source>
          <target state="translated">デリゲートとラムダ</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Delegates define a type, which specify a particular method signature.</source>
          <target state="translated">デリゲートは、特定のメソッド シグネチャを指定する型を定義します。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>A method (static or instance) that satisfies this signature can be assigned to a variable of that type, then called directly (with the appropriate arguments) or passed as an argument itself to another method and then called.</source>
          <target state="translated">このシグネチャを満たすメソッド (静的またはインスタンス) は、その型の変数に代入し、(適切な引数を使用して) 直接呼び出したり、別のメソッドに引数そのものとして渡してから呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The following example demonstrates delegate use.</source>
          <target state="translated">次の例は、デリゲートの使い方を示しています。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>On line 4 we create a delegate type of a certain signature, in this case a method that takes a string parameter and then returns a string parameter.</source>
          <target state="translated">4 行目で特定のシグネチャのデリゲート型を作成しています。この場合、文字列パラメーターを取ってから文字列パラメーターを返すメソッドです。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>On line 6, we define the implementation of the delegate by providing a method that has the exact same signature.</source>
          <target state="translated">6 行目で、まったく同じシグネチャを持つメソッドを提供することによって、デリゲートの実装を定義しています。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>On line 13, the method is assigned to a type that conforms to the <ph id="ph1">`Reverse`</ph> delegate.</source>
          <target state="translated">13 行目では、メソッドが <ph id="ph1">`Reverse`</ph> デリゲートに準拠する型に割り当てられます。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Finally, on line 15 we invoke the delegate passing a string to be reversed.</source>
          <target state="translated">最後に、15 行目で元に戻す文字列を渡してデリゲートを呼び出します。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In order to streamline the development process, .NET includes a set of delegate types that programmers can reuse and not have to create new types.</source>
          <target state="translated">開発プロセスを効率化するため、.NET にはプログラマが再利用できるデリゲート型のセットが含まれているため、新しい型を作成する必要はありません。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>These are <ph id="ph1">`Func&lt;&gt;`</ph>, <ph id="ph2">`Action&lt;&gt;`</ph> and <ph id="ph3">`Predicate&lt;&gt;`</ph>, and they can be used in various places throughout the .NET APIs without the need to define new delegate types.</source>
          <target state="translated">これらは <ph id="ph1">`Func&lt;&gt;`</ph>、<ph id="ph2">`Action&lt;&gt;`</ph>、および <ph id="ph3">`Predicate&lt;&gt;`</ph> で、新しいデリゲート型を定義することなく、.NET API を通じてさまざまな場所で使用できます。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Of course, there are some differences between the three as you will see in their signatures which mostly have to do with the way they were meant to be used:</source>
          <target state="translated">もちろん、これらの 3 つの間にはそのシグネチャで見られるように、いくつかの違いがあり、ほとんどがその用途に関係しています。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Action&lt;&gt;`</ph> is used when there is a need to perform an action using the arguments of the delegate.</source>
          <target state="translated"><ph id="ph1">`Action&lt;&gt;`</ph> は、デリゲートの引数を使用してアクションを実行する必要がある場合に使用されます。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Func&lt;&gt;`</ph> is used usually when you have a transformation on hand, that is, you need to transform the arguments of the delegate into a different result.</source>
          <target state="translated"><ph id="ph1">`Func&lt;&gt;`</ph> は、通常、変換が手元にあるときに使用されます。つまり、デリゲートの引数を異なる結果に変換する必要があります。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Projections are a prime example of this.</source>
          <target state="translated">これの典型的な例が予測です。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Predicate&lt;&gt;`</ph> is used when you need to determine if the argument satisfies the condition of the delegate.</source>
          <target state="translated"><ph id="ph1">`Predicate&lt;&gt;`</ph> は、引数がデリゲートの条件を満たすかどうかを判断する必要がある場合に使用されます。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>It can also be written as a <ph id="ph1">`Func&lt;T, bool&gt;`</ph>.</source>
          <target state="translated"><ph id="ph1">`Func&lt;T, bool&gt;`</ph> として書き込むこともできます。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>We can now take our example above and rewrite it using the <ph id="ph1">`Func&lt;&gt;`</ph> delegate instead of a custom type.</source>
          <target state="translated">ここで、上記の例を使用して、カスタム型の代わりに <ph id="ph1">`Func&lt;&gt;`</ph> デリゲートを使用して書き換えることができます。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The program will continue running exactly the same.</source>
          <target state="translated">プログラムは引き続きまったく同じに実行されます。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For this simple example, having a method defined outside of the Main() method seems a bit superfluous.</source>
          <target state="translated">この簡単な例では、Main() メソッドの外部で定義されているメソッドは、少し余分なようです。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>It is because of this that .NET Framework 2.0 introduced the concept of <bpt id="p1">**</bpt>anonymous delegates<ept id="p1">**</ept>.</source>
          <target state="translated">これは、.NET Framework 2.0 で<bpt id="p1">**</bpt>匿名デリゲート<ept id="p1">**</ept>の概念が導入されたためです。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>With their support you are able to create “inline” delegates without having to specify any additional type or method.</source>
          <target state="translated">そのサポートにより、追加の型やメソッドを指定せずに、"インライン" デリゲートを作成することができます。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>You simply inline the definition of the delegate where you need it.</source>
          <target state="translated">必要に応じて、デリゲートの定義を単純にインライン化します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For an example, we are going to switch it up and use our anonymous delegate to filter out a list of only even numbers and then print them to the console.</source>
          <target state="translated">たとえば、デリゲートを切り替え、この匿名デリゲートを使用して、偶数だけをリストから除外し、コンソールに表示します。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Notice the highlighted lines.</source>
          <target state="translated">強調表示された行に注目してください。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>As you can see, the body of the delegate is just a set of expressions, as any other delegate.</source>
          <target state="translated">ご覧のように、デリゲートの本体は、他のデリゲートと同じく、単なる式のセットです。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>But instead of it being a separate definition, we’ve introduced it <bpt id="p1">_</bpt>ad hoc<ept id="p1">_</ept> in our call to the <ph id="ph1">`FindAll()`</ph> method of the <ph id="ph2">`List&lt;T&gt;`</ph> type.</source>
          <target state="translated">しかし、それを別の定義にする代わりに、<ph id="ph2">`List&lt;T&gt;`</ph> 型の <ph id="ph1">`FindAll()`</ph> メソッドへの呼び出しでそれを<bpt id="p1">_</bpt>アド ホック<ept id="p1">_</ept>で導入しました。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>However, even with this approach, there is still much code that we can throw away.</source>
          <target state="translated">ただし、この方法でも、破棄できる多くのコードがまだ残ります。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This is where <bpt id="p1">**</bpt>lambda expressions<ept id="p1">**</ept> come into play.</source>
          <target state="translated">このような場合に<bpt id="p1">**</bpt>ラムダ式<ept id="p1">**</ept>が機能します。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Lambda expressions, or just “lambdas” for short, were introduced first in C# 3.0, as one of the core building blocks of Language Integrated Query (LINQ).</source>
          <target state="translated">ラムダ式 (または略して単に「ラムダ」) は、最初に C# 3.0 で統合言語クエリ (LINQ) のコア ビルディング ブロックの 1 つとして導入されました。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>They are just a more convenient syntax for using delegates.</source>
          <target state="translated">これらは、デリゲートの使用の利便性を高める構文です。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>They declare a signature and a method body, but don’t have an formal identity of their own, unless they are assigned to a delegate.</source>
          <target state="translated">これらは、シグネチャとメソッド本体を宣言しますが、デリゲートに割り当てられない限り、独自の正式な ID を持ちません。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Unlike delegates, they can be directly assigned as the left-hand side of event registration or in various Linq clauses and methods.</source>
          <target state="translated">デリゲートの場合とは異なり、これらはイベント登録の左側として、またはさまざまな Linq 句およびメソッドで、直接割り当てることができます。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Since a lambda expression is just another way of specifying a delegate, we should be able to rewrite the above sample to use a lambda expression instead of an anonymous delegate.</source>
          <target state="translated">ラムダ式はデリゲートを指定するもう 1 つの方法であるため、上記のサンプルを匿名デリゲートの代わりにラムダ式を使用するように書き換えることができるようになる必要があります。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If you take a look at the highlighted lines, you can see how a lambda expression looks like.</source>
          <target state="translated">強調表示された行を見ると、ラムダ式がどのようなものかがわかります。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Again, it is just a <bpt id="p1">**</bpt>very<ept id="p1">**</ept> convenient syntax for using delegates, so what happens under the covers is similar to what happens with the anonymous delegate.</source>
          <target state="translated">繰り返しますが、これは、匿名デリゲートの使用に<bpt id="p1">**</bpt>非常に<ept id="p1">**</ept>便利な構文であるため、内部での動作は匿名デリゲートの動作と似ています。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Again, lambdas are just delegates, which means that they can be used as an event handler without any problems, as the following code snippet illustrates.</source>
          <target state="translated">ここでも、ラムダは単なるデリゲートです。つまり、次のコード スニペットに示すように、ラムダは問題なくイベント ハンドラーとして使用することができます。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Further reading and resources</source>
          <target state="translated">参考資料とリソース</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Delegates<ept id="p1">](https://msdn.microsoft.com/library/ms173171.aspx)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>デリゲート<ept id="p1">](https://msdn.microsoft.com/library/ms173171.aspx)</ept></target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Anonymous Functions<ept id="p1">](https://msdn.microsoft.com/library/bb882516.aspx)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>匿名関数<ept id="p1">](https://msdn.microsoft.com/library/bb882516.aspx)</ept></target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Lambda expressions<ept id="p1">](https://msdn.microsoft.com/library/bb397687.aspx)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>ラムダ式<ept id="p1">](https://msdn.microsoft.com/library/bb397687.aspx)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>