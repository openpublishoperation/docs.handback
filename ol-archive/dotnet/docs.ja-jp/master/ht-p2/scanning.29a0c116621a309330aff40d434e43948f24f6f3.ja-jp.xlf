<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-eac019f" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8951e4ca82c0148bae7e8279681920ffabb523be</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\base-types\scanning.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p2</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b31360b3634fb8e5fd90463083a8be59c07be365</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d053878964559a80554a78cf7c481c56411c33b9</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Regular expression example: scanning for HREFs</source>
          <target state="translated">正規表現の例: HREF のスキャン</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Regular expression example scanning for HREFs</source>
          <target state="translated">正規表現の例: HREF のスキャン</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Regular expression example: scanning for HREFs</source>
          <target state="translated">正規表現の例: HREF のスキャン</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The following example searches an input string and displays all the href="…" values and their locations in the string.</source>
          <target state="translated">次の例では、入力文字列を検索して、文字列中のすべての href="…" 値とその場所を表示します。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The Regex Object</source>
          <target state="translated">Regex オブジェクト</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Because the <ph id="ph1">`DumpHRefs`</ph> method can be called multiple times from user code, it uses the <ph id="ph2">`static`</ph> <bpt id="p1">[</bpt>Regex.Match(String, String, RegexOptions)<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions))</ept> method.</source>
          <target state="translated"><ph id="ph1">`DumpHRefs`</ph> メソッドは、ユーザー コードから複数回呼び出される可能性があるため、<ph id="ph2">`static`</ph> <bpt id="p1">[</bpt>Regex.Match(String, String, RegexOptions)<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions))</ept> メソッドを使用します。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This enables the regular expression engine to cache the regular expression and avoids the overhead of instantiating a new <bpt id="p1">[</bpt>Regex<ept id="p1">](xref:System.Text.RegularExpressions.Regex)</ept> object each time the method is called.</source>
          <target state="translated">これにより、正規表現エンジンが正規表現をキャッシュできるようになり、メソッドを呼び出すたびに新しい <bpt id="p1">[</bpt>Regex<ept id="p1">](xref:System.Text.RegularExpressions.Regex)</ept> オブジェクトをインスタンス化するオーバーヘッドを回避できます。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>Match<ept id="p1">](xref:System.Text.RegularExpressions.Match)</ept> object is then used to iterate through all matches in the string.</source>
          <target state="translated"><bpt id="p1">[</bpt>Match<ept id="p1">](xref:System.Text.RegularExpressions.Match)</ept> オブジェクトは、文字列内のすべての一致を反復処理するために使用されます。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The following example then illustrates a call to the <ph id="ph1">`DumpHRefs`</ph> method.</source>
          <target state="translated"><ph id="ph1">`DumpHRefs`</ph> メソッドを呼び出す例を次に示します。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The regular expression pattern <ph id="ph1">`href\s*=\s*(?:["']&amp;#40;?&lt;1&gt;[^"']*)["']|(?&lt;1&gt;\S+))`</ph> is interpreted as shown in the following table.</source>
          <target state="translated">この正規表現パターン <ph id="ph1">`href\s*=\s*(?:["']&amp;#40;?&lt;1&gt;[^"']*)["']|(?&lt;1&gt;\S+))`</ph> の解釈を次の表に示します。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">パターン</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">説明</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Match the literal string "href".</source>
          <target state="translated">リテラル文字列 "href" と一致します。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The match is case-insensitive.</source>
          <target state="translated">一致では、大文字と小文字を区別しません。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Match zero or more white-space characters.</source>
          <target state="translated">0 個以上の空白文字と一致します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>`Match the equals sign.</source>
          <target state="translated">等号と一致します。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Match zero or more white-space characters.</source>
          <target state="translated">0 個以上の空白文字と一致します。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Match one of the following without assigning the result to a captured group: A quotation mark or apostrophe, followed by zero or more occurrences of any character other than a quotation mark or apostrophe, followed by a quotation mark or apostrophe.</source>
          <target state="translated">次のいずれかと一致し、キャプチャ グループに結果を代入しません: 引用符またはアポストロフィ、引用符またはアポストロフィ以外の任意の文字の 0 回以上の繰り返し、引用符またはアポストロフィの順に続く文字列。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The group named <ph id="ph1">`1`</ph> is included in this pattern.</source>
          <target state="translated">このパターンには <ph id="ph1">`1`</ph> という名前のグループが含まれています。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>-or- One or more non-white-space characters.</source>
          <target state="translated">または、1 個以上の空白以外の文字。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The group named <ph id="ph1">`1`</ph> is included in this pattern.</source>
          <target state="translated">このパターンには <ph id="ph1">`1`</ph> という名前のグループが含まれています。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Assign zero or more occurrences of any character other than a quotation mark or apostrophe to the capturing group named <ph id="ph1">`1`</ph>.</source>
          <target state="translated">引用符またはアポストロフィ以外の任意の文字の 0 回以上の繰り返しを <ph id="ph1">`1`</ph> という名前のキャプチャ グループに代入します。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Assign one or more non-white-space characters to the capturing group named <ph id="ph1">`1`</ph>.</source>
          <target state="translated">1 個以上の空白以外の文字を <ph id="ph1">`1`</ph> という名前のキャプチャ グループに代入します。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Match Result Class</source>
          <target state="translated">Match 結果クラス</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The results of a search are stored in the <bpt id="p1">[</bpt>Match<ept id="p1">](xref:System.Text.RegularExpressions.Match)</ept> class, which provides access to all the substrings extracted by the search.</source>
          <target state="translated">検索結果は <bpt id="p1">[</bpt>Match<ept id="p1">](xref:System.Text.RegularExpressions.Match)</ept> クラス内に格納されます。これにより、検索処理によって抽出されたすべての部分文字列にアクセスできます。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>It also remembers the string being searched and the regular expression being used, so it can call the <bpt id="p1">[</bpt>Match.NextMatch<ept id="p1">](xref:System.Text.RegularExpressions.Match.NextMatch)</ept> method to perform another search starting where the last one ended.</source>
          <target state="translated">このクラスは、検索対象となった文字列や、使用された正規表現も記憶しているため、<bpt id="p1">[</bpt>Match.NextMatch<ept id="p1">](xref:System.Text.RegularExpressions.Match.NextMatch)</ept> メソッドを呼び出して、最後の検索が終了した位置から別の検索を実行することができます。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Explicitly Named Captures</source>
          <target state="translated">明示的に指定したキャプチャ</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In traditional regular expressions, capturing parentheses are automatically numbered sequentially.</source>
          <target state="translated">従来の正規表現では、キャプチャするかっこに自動的に連番が割り当てられます。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This leads to two problems.</source>
          <target state="translated">その結果、2 つの問題が発生します。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>First, if a regular expression is modified by inserting or removing a set of parentheses, all code that refers to the numbered captures must be rewritten to reflect the new numbering.</source>
          <target state="translated">1 つ目の問題は、かっこのペアの挿入や削除を行って正規表現が修正されると、新しい番号を反映するために、番号付きのキャプチャを参照するコードをすべて書き直す必要があることです。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Second, because different sets of parentheses often are used to provide two alternative expressions for an acceptable match, it might be difficult to determine which of the two expressions actually returned a result.</source>
          <target state="translated">2 つ目の問題は、ある文字列の検索用に 2 つの代替表現を指定する際、異なるかっこのペアを使用することが多いため、実際にどちらの代替表現から結果が返されたのかを判断するのが難しい場合があることです。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>To address these problems, the <bpt id="p1">[</bpt>Regex<ept id="p1">](xref:System.Text.RegularExpressions.Regex)</ept> class supports the syntax <ph id="ph1">`(?&lt;name&gt;…)`</ph> for capturing a match into a specified slot (the slot can be named using a string or an integer; integers can be recalled more quickly).</source>
          <target state="translated">これらの問題に対処するために、<bpt id="p1">[</bpt>Regex<ept id="p1">](xref:System.Text.RegularExpressions.Regex)</ept> クラスでは指定されたスロットに一致文字列をキャプチャするための構文 <ph id="ph1">`(?&lt;name&gt;…)`</ph> をサポートしています (スロットには、文字列または整数の名前を付けることができます。整数の名前を付けた方が、よりすばやく再呼び出しできます)。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Thus, alternative matches for the same string all can be directed to the same place.</source>
          <target state="translated">これにより、同じ文字列に対する代替表現の一致結果をすべて同じ場所に渡すことができます。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In case of a conflict, the last match dropped into a slot is the successful match.</source>
          <target state="translated">競合が発生する場合は、スロットにキャプチャされた最後の一致文字列が、適切な一致であると見なされます。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>(However, a complete list of multiple matches for a single slot is available.</source>
          <target state="translated">(ただし、1 つのスロットで複数の一致文字列の完全なリストを使用することもできます。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>See the <bpt id="p1">[</bpt>Group.Captures<ept id="p1">](xref:System.Text.RegularExpressions.Group.Captures)</ept> collection for details.)</source>
          <target state="translated">詳細については、<bpt id="p1">[</bpt>Group.Captures<ept id="p1">](xref:System.Text.RegularExpressions.Group.Captures)</ept> コレクションを参照してください。)</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">関連項目</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>.NET regular expressions<ept id="p1">](regular-expressions.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>.NET 正規表現<ept id="p1">](regular-expressions.md)</ept></target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Regular expression examples<ept id="p1">](regex-examples.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>正規表現の例<ept id="p1">](regex-examples.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>