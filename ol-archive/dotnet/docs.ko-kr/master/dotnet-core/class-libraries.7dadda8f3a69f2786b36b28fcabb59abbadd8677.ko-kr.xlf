<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0ca64c3" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">028fd4961c97e31ea9f213b832c723b2ce2cf27c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\class-libraries.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">92e33f28118649674ef0d7d1a61b4e06ee5a3a4a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">831754c1a672c75f630705e685461e8923725eca</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>.NET Class Libraries</source>
          <target state="translated">.NET 클래스 라이브러리</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>.NET Class Libraries</source>
          <target state="translated">.NET 클래스 라이브러리</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>.NET Class Libraries</source>
          <target state="translated">.NET 클래스 라이브러리</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Class libraries are the <bpt id="p1">[</bpt>shared library<ept id="p1">](http://en.wikipedia.org/wiki/Library_%28computing%29#Shared_libraries)</ept> concept for .NET.</source>
          <target state="translated">클래스 라이브러리는 .NET에 대한 <bpt id="p1">[</bpt>공유 라이브러리<ept id="p1">](http://en.wikipedia.org/wiki/Library_%28computing%29#Shared_libraries)</ept> 개념입니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>They enable you to componentize useful functionality into modules that can be used by multiple applications.</source>
          <target state="translated">유용한 기능을 여러 응용 프로그램에서 사용할 수 있는 모듈로 구성 요소화할 수 있게 합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>They can also be used as a means of loading functionality that is not needed or not known at application startup.</source>
          <target state="translated">불필요하거나 응용 프로그램 시작 시 알 수 없는 기능을 로드하는 수단으로 사용할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Class libraries are described using the <bpt id="p1">[</bpt>.NET Assembly file format<ept id="p1">](assembly-format.md)</ept>.</source>
          <target state="translated">클래스 라이브러리는 <bpt id="p1">[</bpt>.NET 어셈블리 파일 형식<ept id="p1">](assembly-format.md)</ept>을 사용하여 설명됩니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>There are three types of class libraries that you can use:</source>
          <target state="translated">사용할 수 있는 세 가지 유형의 클래스 라이브러리는 다음과 같습니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Platform-specific<ept id="p1">**</ept> class libraries have access to all the APIs in a given platform (for example, .NET Framework, Xamarin iOS), but can only be used by apps and libraries that target that platform.</source>
          <target state="translated"><bpt id="p1">**</bpt>플랫폼별<ept id="p1">**</ept> 클래스 라이브러리는 지정된 플랫폼(예: .NET Framework, Xamarin iOS)의 모든 API에 액세스할 수 있지만 해당 플랫폼을 대상으로 하는 앱과 라이브러리만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Portable<ept id="p1">**</ept> class libraries have access to a subset of APIs, and can be used by apps and libraries that target multiple platforms.</source>
          <target state="translated"><bpt id="p1">**</bpt>이식 가능<ept id="p1">**</ept> 클래스 라이브러리는 API 하위 집합에 액세스할 수 있으며 여러 플랫폼을 대상으로 하는 앱과 라이브러리에서 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>.NET Core<ept id="p1">**</ept> class libraries are a merger of the platform-specific and portable library concept into a single model that provides the best of both.</source>
          <target state="translated"><bpt id="p1">**</bpt>.NET Core<ept id="p1">**</ept> 클래스 라이브러리는 플랫폼별 및 이식 가능한 라이브러리 개념을 두 가지의 장점을 제공하는 하나의 모델로 통합합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Platform-specific Class Libraries</source>
          <target state="translated">플랫폼별 클래스 라이브러리</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Platform-specific libraries are bound to a single .NET platform (for example, .NET Framework on Windows) and can therefore take significant dependencies on a known execution environment.</source>
          <target state="translated">플랫폼별 라이브러리는 단일 .NET 플랫폼(예: Windows의 .NET Framework)에 바인딩되어 있으므로 알려진 실행 환경에 종속될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Such an environment will expose a known set of APIs (.NET and OS APIs) and will maintain and expose expected state (for example, Windows registry).</source>
          <target state="translated">이러한 환경은 알려진 API 집합(.NET 및 OS API)을 표시하며 필요한 상태(예: Windows 레지스트리)를 유지 관리하고 표시합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Developers who create platform specific libraries can fully exploit the underlying platform.</source>
          <target state="translated">플랫폼별 라이브러리를 만드는 개발자는 기본 플랫폼을 충분히 활용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The libraries will only ever run on that given platform, making platform checks or other forms of conditional code unnecessary (modulo single sourcing code for multiple platforms).</source>
          <target state="translated">라이브러리는 지정된 플랫폼에서만 실행되므로 플랫폼 검사 또는 다른 형태의 조건부 코드가 불필요합니다(여러 플랫폼용 모듈로 단일 소싱 코드).</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Platform-specific libraries have been the primary class library type for the .NET Framework.</source>
          <target state="translated">플랫폼별 라이브러리는 .NET Framework의 기본 클래스 라이브러리 형식이었습니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Even as other .NET platforms emerged, platform-specific libraries remained the dominant library type.</source>
          <target state="translated">다른 .NET 플랫폼이 등장한 후에도 플랫폼별 라이브러리가 주요 라이브러리 형식으로 유지되었습니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Portable Class Libraries</source>
          <target state="translated">이식 가능한 클래스 라이브러리</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Portable libraries are supported on multiple .NET platforms.</source>
          <target state="translated">이식 가능한 라이브러리는 여러 .NET 플랫폼에서 지원됩니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>They can still take dependencies on a known execution environment, however, the environment is a synthetic one that is generated by the intersection of a set of concrete .NET platforms.</source>
          <target state="translated">이 라이브러리도 알려진 실행 환경에 종속되지만 환경이 구체적인 .NET 플랫폼 집합의 교집합에 의해 생성되는 가상 환경입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This means that exposed APIs and platform assumptions are a subset of what would be available to a platform-specific library.</source>
          <target state="translated">즉, 표시되는 API 및 플랫폼 가정이 플랫폼별 라이브러리에서 사용할 수 있는 전체의 하위 집합입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>You choose a platform configuration when you create a portable library.</source>
          <target state="translated">이식 가능한 라이브러리를 만드는 경우 플랫폼 구성을 선택합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>These are the set of platforms that you need to support (for example, .NET Framework 4.5+, Windows Phone 8.0+).</source>
          <target state="translated">이러한 구성은 지원해야 하는 플랫폼 집합(예: .NET Framework 4.5 이상, Windows Phone 8.0 이상)입니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The more platforms you opt to support, the fewer APIs and fewer platform assumptions you can make, the lowest common denominator.</source>
          <target state="translated">더 많은 플랫폼을 지원하도록 선택할수록 만들 수 있는 API 및 플랫폼 가정(최소 공통 분모)이 줄어듭니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This characteristic can be confusing at first, since people often think “more is better”, but find that more supported platforms results in fewer available APIs.</source>
          <target state="translated">"많을수록 더 좋다"고 생각하는 경향이 있으므로 이 특성은 처음에 혼동을 줄 수도 있지만 지원되는 플랫폼이 많을수록 사용 가능한 API가 줄어듭니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Many library developers have switched from producing multiple platform-specific libraries from one source (using conditional compilation directives) to portable libraries.</source>
          <target state="translated">많은 라이브러리 개발자가 한 소스에서 여러 플랫폼별 라이브러리를 생성하는 형태(조건부 컴파일 지시문 사용)에서 이식 가능한 라이브러리로 전환했습니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>There are <bpt id="p1">[</bpt>several approaches<ept id="p1">](http://blog.stephencleary.com/2012/11/portable-class-library-enlightenment.html)</ept> for accessing platform-specific functionality within portable libraries, with <bpt id="p2">[</bpt>bait-and-switch<ept id="p2">](http://log.paulbetts.org/the-bait-and-switch-pcl-trick/)</ept> being the most widely accepted technique at this point.</source>
          <target state="translated">이식 가능한 라이브러리 내에서 플랫폼별 기능에 액세스하기 위한 <bpt id="p1">[</bpt>여러 가지 방법<ept id="p1">](http://blog.stephencleary.com/2012/11/portable-class-library-enlightenment.html)</ept>이 있으며, <bpt id="p2">[</bpt>bait-and-switch<ept id="p2">](http://log.paulbetts.org/the-bait-and-switch-pcl-trick/)</ept>가 현재 가장 광범위하게 사용되는 기술입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>.NET Core Class Libraries</source>
          <target state="translated">.NET Core 클래스 라이브러리</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>.NET Core libraries are a replacement of the platform-specific and portable libraries concepts.</source>
          <target state="translated">.NET Core 라이브러리는 플랫폼별 및 이식 가능한 라이브러리 개념을 대체합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>They are platform-specific in the sense that they expose all functionality from the underlying platform (no synthetic platforms or platform intersections).</source>
          <target state="translated">기본 플랫폼의 모든 기능을 표시한다는 점에서 플랫폼별 라이브러리입니다(가상 플랫폼 또는 플랫폼 교차 부분 아님).</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>They are portable in the sense that they work on all supporting platforms.</source>
          <target state="translated">또한 지원되는 모든 플랫폼에서 작동한다는 점에서 이식 가능한 라이브러리입니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>.NET Core exposes a set of library <bpt id="p1">_</bpt>contracts<ept id="p1">_</ept>.</source>
          <target state="translated">.NET Core는 라이브러리 <bpt id="p1">_</bpt>계약<ept id="p1">_</ept> 집합을 표시합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>.NET platforms must support each contract fully or not at all.</source>
          <target state="translated">.NET 플랫폼은 각 계약을 완전히 지원하거나 전혀 지원하지 않아야 합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Each platform, therefore, supports a set of .NET Core contracts.</source>
          <target state="translated">따라서 각 플랫폼은 .NET Core 계약 집합을 지원합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The corollary is that each .NET Core class library is supported on the platforms that support it’s contract dependencies.</source>
          <target state="translated">필연적인 결과로, 각 .NET Core 클래스 라이브러리는 해당 계약 종속성을 지원하는 플랫폼에서 지원됩니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>.NET Core contracts do not expose the entire functionality of the .NET Framework (nor is that a goal), however, they do expose many more APIs than Portable Class Libraries.</source>
          <target state="translated">.NET Core는 .NET Framework의 전체 기능을 표시하지는 않지만(이를 지향하지 않음), 이식 가능한 클래스 라이브러리보다 많은 API를 표시합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>More APIs will be added over time.</source>
          <target state="translated">시간이 지나면 더 많은 API가 추가될 것입니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The following platforms support .NET Core class libraries:</source>
          <target state="translated">.NET Core 클래스 라이브러리를 지원하는 플랫폼은 다음과 같습니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>.NET Core</source>
          <target state="translated">.NET Core</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>ASP.NET Core</source>
          <target state="translated">ASP.NET Core</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>.NET Framework 4.5+</source>
          <target state="translated">.NET Framework 4.5 이상</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Windows Store Apps</source>
          <target state="translated">Windows 스토어 앱</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Windows Phone 8+</source>
          <target state="translated">Windows Phone 8 이상</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Mono Class Libraries</source>
          <target state="translated">Mono 클래스 라이브러리</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Class libraries are supported on Mono, including the three types of libraries described above.</source>
          <target state="translated">위에서 설명한 세 가지 형식의 라이브러리를 포함하여 클래스 라이브러리는 Mono에서 지원됩니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Mono has often been seen (correctly) as a cross-platform implementation of the Microsoft .NET Framework.</source>
          <target state="translated">Mono는 Microsoft .NET Framework의 플랫폼 간 구현으로 간주되는 경우가 많습니다(맞음).</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>In part, this was because platform-specific .NET Framework libraries could run on the Mono runtime without modification or recompilation.</source>
          <target state="translated">부분적으로 이는 플랫폼별 .NET Framework 라이브러리를 수정하거나 컴파일하지 않고 Mono 런타임에서 실행할 수 있기 때문이었습니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>This characteristic was in place before the creation of portable class libraries, so was an obvious choice to enable binary portability between the .NET Framework and Mono (although it only worked in one direction).</source>
          <target state="translated">이 특성은 이식 가능한 클래스 라이브러리를 만들기 전에 구현되었으므로 한 방향으로만 작동한다는 제약에도 불구하고 .NET Framework와 Mono 간에 이진 이식성을 사용하는 것이 당연했습니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>