<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b5c25fc" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">17c2db54f871795c370a6475c21e36736a6b46c3</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\tools\dotnet-build.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1e6e78c0a20a04b44c7ad36608e956ce0b56826b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">19f335ea5cea3ffced36bb3eaf770360555ce40f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>dotnet-build command | Microsoft Docs</source>
          <target state="translated">dotnet-build 명령 | Microsoft 문서</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>The dotnet-build command builds a project and all of its dependencies.</source>
          <target state="translated">dotnet-build 명령은 프로젝트와 모든 종속성을 빌드합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>dotnet-build, CLI, CLI command, .NET Core</source>
          <target state="translated">dotnet-build, CLI, CLI 명령, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>dotnet-build</source>
          <target state="translated">dotnet-build</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Name</source>
          <target state="translated">이름</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`dotnet-build`</ph> - Builds a project and all of its dependencies.</source>
          <target state="translated"><ph id="ph1">`dotnet-build`</ph> - 프로젝트 및 모든 종속성을 빌드합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Synopsis</source>
          <target state="translated">개요</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">설명</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`dotnet build`</ph> command builds the project and its dependencies into a set of binaries.</source>
          <target state="translated"><ph id="ph1">`dotnet build`</ph> 명령은 이진 파일 집합으로 프로젝트와 해당 종속성을 빌드합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The binaries are the symbol files used for debugging (having a <ph id="ph1">`*.pdb`</ph> extension) as well as the project's code in Intermediate Language (IL) with a <ph id="ph2">`*.dll`</ph> extension.</source>
          <target state="translated">이진 파일은 <ph id="ph2">`*.dll`</ph> 확장을 사용하는 IL(중간 언어)의 프로젝트 코드뿐만 아니라 디버깅에 사용되는 기호 파일(<ph id="ph1">`*.pdb`</ph> 확장 포함)입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Additionally, a JSON file that lists out the dependencies of the application with the <ph id="ph1">`*.deps.json`</ph> extension will be produced.</source>
          <target state="translated">또한 <ph id="ph1">`*.deps.json`</ph> 확장을 사용하는 응용 프로그램의 종속성을 나열하는 JSON 파일이 생성됩니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Finally, a <ph id="ph1">`runtime.config.json`</ph> file will be produced as well.</source>
          <target state="translated">마지막으로 <ph id="ph1">`runtime.config.json`</ph> 파일도 생성됩니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This file specifies which shared runtime and version the built code will run against.</source>
          <target state="translated">이 파일은 빌드된 코드가 실행하는 공유 런타임 및 버전을 지정합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If the project has third-party dependencies, such as libraries from NuGet, these will be resolved from the NuGet cache and will not be available with the project's built output.</source>
          <target state="translated">프로젝트에 NuGet의 라이브러리와 같은 타사 종속성이 있는 경우, 이러한 종속성은 NuGet 캐시에서 확인되고 프로젝트의 빌드 출력으로 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>With that in mind, the product of <ph id="ph1">`dotnet build`</ph> is not ready to be transferred to another machine to run.</source>
          <target state="translated">따라서 <ph id="ph1">`dotnet build`</ph>의 제품을 실행하기 위해 다른 컴퓨터로 전송할 준비가 되지 않았습니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This is in contrast to the behavior of .NET Framework in which building an executable project (an application) will produce an output that is possible to run on any machine that has .NET Framework installed.</source>
          <target state="translated">이는 실행 가능한 프로젝트(응용 프로그램) 빌드로 .NET Framework가 설치된 컴퓨터에서 실행할 수 있는 출력을 생성하는 .NET Framework의 동작과는 대조적입니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In order to get a similar experience in .NET Core, you have to use the <bpt id="p1">[</bpt>dotnet publish<ept id="p1">](dotnet-publish.md)</ept> command.</source>
          <target state="translated">.NET Core에서 비슷한 환경을 가져오려면 <bpt id="p1">[</bpt>dotnet publish<ept id="p1">](dotnet-publish.md)</ept> 명령을 사용해야 합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>More information about this can be found in the <bpt id="p1">[</bpt>.NET Core Application Deployment<ept id="p1">](../deploying/index.md)</ept> document.</source>
          <target state="translated">이에 대한 자세한 내용은 <bpt id="p1">[</bpt>.NET Core 응용 프로그램 배포<ept id="p1">](../deploying/index.md)</ept> 문서에서 확인할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Building requires the existence of an <bpt id="p1">*</bpt>assets.json<ept id="p1">*</ept> file (a file that lists all of the dependencies of your application), which means that you have to run <bpt id="p2">[</bpt><ph id="ph1">`dotnet restore`</ph><ept id="p2">](dotnet-restore.md)</ept> prior to building the project.</source>
          <target state="translated">빌드하려면 <bpt id="p1">*</bpt>assets.json<ept id="p1">*</ept> 파일(응용 프로그램의 종속성을 모두 나열하는 파일)의 확장이 있어야 합니다. 즉, 프로젝트를 빌드하기 전에 <bpt id="p2">[</bpt><ph id="ph1">`dotnet restore`</ph><ept id="p2">](dotnet-restore.md)</ept>를 실행해야 합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Lack of the assets file manifests as the inability of the tooling to resolve reference assemblies which will result in errors.</source>
          <target state="translated">자산 파일이 부족하면 참조 어셈블리를 확인하는 도구를 사용할 수 없으므로 오류가 발생합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`dotnet build`</ph> uses MSBuild to build the project, thus it supports both parallel builds and incremental builds.</source>
          <target state="translated"><ph id="ph1">`dotnet build`</ph>는 MSBuild를 사용하여 프로젝트를 빌드하므로 병렬 빌드와 증분 빌드를 모두 지원합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Please refer to <bpt id="p1">[</bpt>MSBuild documentation<ept id="p1">](https://docs.microsoft.com/visualstudio/msbuild/msbuild)</ept> to get more information on those topics.</source>
          <target state="translated">해당 항목에 대한 자세한 내용은 <bpt id="p1">[</bpt>MSBuild 설명서<ept id="p1">](https://docs.microsoft.com/visualstudio/msbuild/msbuild)</ept>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In addition to its options, the <ph id="ph1">`dotnet build`</ph> command will accept MSBuild options as well, such as <ph id="ph2">`/p`</ph> for setting properties or <ph id="ph3">`/l`</ph> to define a logger.</source>
          <target state="translated">해당 옵션 외에도, <ph id="ph1">`dotnet build`</ph> 명령은 속성 설정에 대한 <ph id="ph2">`/p`</ph> 또는 로거를 정의하는 <ph id="ph3">`/l`</ph>처럼 MSBuild 옵션도 수락합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>You can find out more about these options in the <bpt id="p1">[</bpt><ph id="ph1">`dotnet msbuild`</ph><ept id="p1">](dotnet-msbuild.md)</ept> command documentation.</source>
          <target state="translated"><bpt id="p1">[</bpt> <ph id="ph1">`dotnet msbuild`</ph> <ept id="p1">](dotnet-msbuild.md)</ept> 명령 설명서에서 이러한 옵션에 대한 자세한 내용을 확인할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If you wish to know when</source>
          <target state="translated">시기를 알고 싶은 경우</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Whether the project is executable or not is determined by the <ph id="ph1">`&lt;OutputType&gt;`</ph> property in the project file.</source>
          <target state="translated">프로젝트가 실행 가능한지 아닌지 여부는 프로젝트 파일의 <ph id="ph1">`&lt;OutputType&gt;`</ph> 속성으로 확인할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The following example shows a project that will produce executable code:</source>
          <target state="translated">다음 예제에서는 실행 코드를 생성하는 프로젝트를 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In order to produce a library, simply omit that property.</source>
          <target state="translated">라이브러리를 생성하려면 해당 속성을 생략하면 됩니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The main difference in output is that the IL DLL for a library will not contain any entry points and it will not be possible to execute it.</source>
          <target state="translated">출력의 주요 차이점은 라이브러리에 대한 IL DLL에 진입점이 포함되지 않고 실행할 수 없다는 점입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Arguments</source>
          <target state="translated">인수</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The project file to build.</source>
          <target state="translated">빌드할 프로젝트 파일입니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If a project file is not specified, MSBuild searches the current working directory for a file that has a file extension that ends in <ph id="ph1">`proj`</ph> and uses that file.</source>
          <target state="translated">프로젝트 파일을 지정하지 않으면 MSBuild는 현재 작업 디렉터리에서 <ph id="ph1">`proj`</ph>로 끝나는 파일 확장명이 있는 파일을 검색하고 해당 파일을 사용합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Options</source>
          <target state="translated">옵션</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Prints out a short help for the command.</source>
          <target state="translated">명령에 대한 간단한 도움말을 출력합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Directory in which to place the built binaries.</source>
          <target state="translated">빌드된 이진 파일을 배치할 디렉터리입니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>You also need to define <ph id="ph1">`--framework`</ph> when you specify this option.</source>
          <target state="translated">이 옵션을 지정하는 경우 <ph id="ph1">`--framework`</ph>도 정의해야 합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Compiles for a specific framework.</source>
          <target state="translated">특정 프레임워크에 대해 컴파일합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The framework needs to be defined in the <bpt id="p1">[</bpt>project file<ept id="p1">](csproj.md)</ept>.</source>
          <target state="translated">프레임워크는 <bpt id="p1">[</bpt>프로젝트<ept id="p1">](csproj.md)</ept> 파일에 정의해야 합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Defines a configuration under which to build.</source>
          <target state="translated">빌드할 구성을 정의합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If omitted, it defaults to <ph id="ph1">`Debug`</ph>.</source>
          <target state="translated">생략하면 <ph id="ph1">`Debug`</ph>로 기본 설정됩니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Target runtime to build for.</source>
          <target state="translated">빌드할 대상 런타임입니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>For a list of Runtime Identifiers (RIDs) you can use, see the <bpt id="p1">[</bpt>RID catalog<ept id="p1">](../rid-catalog.md)</ept>.</source>
          <target state="translated">사용할 수 있는 RID(런타임 식별자) 목록은 <bpt id="p1">[</bpt>RID 카탈로그<ept id="p1">](../rid-catalog.md)</ept>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Defines what <ph id="ph1">`*`</ph> should be replaced with in the version field in the project file.</source>
          <target state="translated">프로젝트 파일의 버전 필드에서 <ph id="ph1">`*`</ph>를 대체할 항목을 정의합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The format follows NuGet's version guidelines.</source>
          <target state="translated">형식은 NuGet의 버전 지침을 따릅니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Marks the build as unsafe for incremental build.</source>
          <target state="translated">빌드를 증분 빌드에 안전하지 않은 것으로 표시합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>This turns off incremental compilation and forces a clean rebuild of the project dependency graph.</source>
          <target state="translated">따라서 증분 컴파일이 해제되고 프로젝트 종속성 그래프를 강제로 완전히 다시 빌드합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Ignores project-to-project references and only builds the root project specified to build.</source>
          <target state="translated">프로젝트 간 참조를 무시하고 빌드하도록 지정된 루트 프로젝트만 빌드합니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Sets the verbosity level of the command.</source>
          <target state="translated">명령의 세부 정보 표시 수준을 설정합니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Allowed values are <ph id="ph1">`q[uiet]`</ph>, <ph id="ph2">`m[inimal]`</ph>, <ph id="ph3">`n[ormal]`</ph>, <ph id="ph4">`d[etailed]`</ph>, and <ph id="ph5">`diag[nostic]`</ph>.</source>
          <target state="translated">허용되는 값은 <ph id="ph1">`q[uiet]`</ph>, <ph id="ph2">`m[inimal]`</ph>, <ph id="ph3">`n[ormal]`</ph>, <ph id="ph4">`d[etailed]`</ph>, <ph id="ph5">`diag[nostic]`</ph>입니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">예제</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Build a project and its dependencies:</source>
          <target state="translated">프로젝트 및 해당 종속성을 빌드합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Build a project and its dependencies using Release configuration:</source>
          <target state="translated">릴리스 구성을 사용하여 프로젝트 및 해당 종속성을 빌드합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Build a project and its dependencies for a specific runtime (in this example, Ubuntu 16.04):</source>
          <target state="translated">특정 런타임(이 예제의 경우 Ubuntu 16.04)에 대한 프로젝트 및 해당 종속성을 빌드합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>