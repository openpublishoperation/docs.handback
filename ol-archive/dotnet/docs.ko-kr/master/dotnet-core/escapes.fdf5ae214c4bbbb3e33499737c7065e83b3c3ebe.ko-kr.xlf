<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-47f9650" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">68355baa75feb8559b921c877ea42517fc942c7e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\base-types\escapes.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6481b3d793862f9f4f50d08fab4a29939750e7f5</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">654be0c1fa88e384746816288cddc163a5014a53</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Character escapes in regular expressions</source>
          <target state="translated">정규식의 문자 이스케이프</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Character escapes in regular expressions</source>
          <target state="translated">정규식의 문자 이스케이프</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Character escapes in regular expressions</source>
          <target state="translated">정규식의 문자 이스케이프</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The backslash (<ph id="ph1">\)</ph> in a regular expression indicates one of the following:</source>
          <target state="translated">정규식의 백슬래시(<ph id="ph1">\)</ph>)는 다음 중 하나를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The character that follows it is a special character, as shown in the table in the following section.</source>
          <target state="translated">다음 섹션의 표에 나와 있는 대로 뒤에 나오는 문자는 특수 문자입니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For example, <bpt id="p1">**</bpt>\b<ept id="p1">**</ept> is an anchor that indicates that a regular expression match should begin on a word boundary, <bpt id="p2">**</bpt>\t<ept id="p2">**</ept> represents a tab, and <bpt id="p3">**</bpt>\x020<ept id="p3">**</ept> represents a space.</source>
          <target state="translated">예를 들어 <bpt id="p1">**</bpt>\b<ept id="p1">**</ept>는 단어 경계에서 정규식 일치가 시작되어야 함을 나타내는 앵커이고, <bpt id="p2">**</bpt>\t<ept id="p2">**</ept>는 탭을 나타내고, <bpt id="p3">**</bpt>\x020<ept id="p3">**</ept>은 공백을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A character that otherwise would be interpreted as an unescaped language construct should be interpreted literally.</source>
          <target state="translated">이스케이프되지 않은 언어 구문으로 해석되는 문자는 문자 그대로 해석되어야 합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For example, a brace (<bpt id="p1">**</bpt>{<ept id="p1">**</ept>) begins the definition of a quantifier, but a backslash followed by a brace (<bpt id="p2">**</bpt><ph id="ph1">\{</ph><ept id="p2">**</ept>) indicates that the regular expression engine should match the brace.</source>
          <target state="translated">예를 들어 중괄호(<bpt id="p1">**</bpt>{<ept id="p1">**</ept>)는 수량자 정의를 시작하지만 중괄호 뒤에 백슬래시가 있으면(<bpt id="p2">**</bpt><ph id="ph1">\{</ph><ept id="p2">**</ept>) 정규식 엔진이 중괄호와 일치해야 함을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Similarly, a single backslash marks the beginning of an escaped language construct, but two backslashes (<bpt id="p1">**</bpt><ph id="ph1">\\</ph><ept id="p1">**</ept>) indicate that the regular expression engine should match the backslash.</source>
          <target state="translated">마찬가지로 단일 백슬래시는 이스케이프된 언어 구문의 시작을 표시하지만, 이중 백슬래시(<bpt id="p1">**</bpt><ph id="ph1">\\</ph><ept id="p1">**</ept>)는 정규식 엔진이 백슬래시와 일치해야 함을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Character escapes are recognized in regular expression patterns but not in replacement patterns.</source>
          <target state="translated">문자 이스케이프는 정규식 패턴에서는 인식되지만 대체 패턴에서 인식되지 않습니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Character Escapes in .NET</source>
          <target state="translated">.NET의 문자 이스케이프</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The following table lists the character escapes supported by regular expressions in .NET.</source>
          <target state="translated">다음 표에서는 .NET의 정규식에서 지원하는 문자 이스케이프를 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Character or sequence</source>
          <target state="translated">문자 또는 시퀀스</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">설명</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>All characters except for the following: <bpt id="p1">*</bpt><bpt id="p2">*</bpt>. $ ^ { [ ( &amp;#124; ) <ept id="p2">*</ept> + ? <ph id="ph1">\*</ph><ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt><bpt id="p2">*</bpt>. $ ^ { [ ( &amp;#124; ) <ept id="p2">*</ept> + ?<ph id="ph1">\*</ph><ept id="p1">*</ept>를 제외한 모든 문자</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Characters other than those listed in the <bpt id="p1">**</bpt>Character or sequence<ept id="p1">**</ept> column have no special meaning in regular expressions; they match themselves.</source>
          <target state="translated"><bpt id="p1">**</bpt>문자 또는 시퀀스<ept id="p1">**</ept> 열에 나열된 문자 이외의 문자는 정규식에서 특별한 의미를 가지지 않습니다. 문자 그대로 해석됩니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The characters included in the <bpt id="p1">**</bpt>Character or sequence<ept id="p1">**</ept> column are special regular expression language elements.</source>
          <target state="translated"><bpt id="p1">**</bpt>문자 또는 시퀀스<ept id="p1">**</ept> 열에 포함된 문자는 특수 정규식 언어 요소입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>To match them in a regular expression, they must be escaped or included in a positive character group.</source>
          <target state="translated">정규식에서 이들 문자를 찾으려면 문자를 이스케이프하거나 긍정 문자 그룹에 포함해야 합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For example, the regular expression <ph id="ph1">`\$\d+ or [$]\d+`</ph> matches "$1200".</source>
          <target state="translated">예를 들어 정규식 <ph id="ph1">`\$\d+ or [$]\d+`</ph>는 "$1200"을 찾습니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>\a<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>\a<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Matches a bell (alarm) character, <bpt id="p1">**</bpt>\u0007<ept id="p1">**</ept>.</source>
          <target state="translated">벨(경보) 문자인 <bpt id="p1">**</bpt>\u0007<ept id="p1">**</ept>을 찾습니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>\b<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>\b<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In a <bpt id="p1">__</bpt>[<ept id="p1">__</ept><bpt id="p2">*</bpt>character<ept id="p2">*</ept><bpt id="p3">_</bpt><bpt id="p4">*</bpt>group<ept id="p4">*</ept><ept id="p3">_</ept><bpt id="p5">_</bpt>]<ept id="p5">_</ept>_ character class, matches a backspace, <bpt id="p6">**</bpt>\u0008<ept id="p6">**</ept>.</source>
          <target state="translated"><bpt id="p1">__</bpt>[<ept id="p1">__</ept><bpt id="p2">*</bpt>character<ept id="p2">*</ept><bpt id="p3">_</bpt><bpt id="p4">*</bpt>group<ept id="p4">*</ept><ept id="p3">_</ept><bpt id="p5">_</bpt>]<ept id="p5">_</ept>_ 문자 클래스에서 백스페이스 문자인 <bpt id="p6">**</bpt>\u0008<ept id="p6">**</ept>을 찾습니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>(See <bpt id="p1">[</bpt>Character classes in regular expressions<ept id="p1">](classes.md)</ept>.) Outside a character class, <bpt id="p2">**</bpt>\b<ept id="p2">**</ept> is an anchor that matches a word boundary.</source>
          <target state="translated"><bpt id="p1">[</bpt>정규식의 문자 클래스<ept id="p1">](classes.md)</ept>를 참조하세요. 문자 클래스 외부의 <bpt id="p2">**</bpt>\b<ept id="p2">**</ept>는 단어 경계와 일치하는 앵커입니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>(See <bpt id="p1">[</bpt>Anchors in regular expressions<ept id="p1">](anchors.md)</ept>.)</source>
          <target state="translated"><bpt id="p1">[</bpt>정규식의 앵커<ept id="p1">](anchors.md)</ept>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>\t<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>\t<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Matches a tab, <bpt id="p1">**</bpt>\u0009<ept id="p1">**</ept>.</source>
          <target state="translated">탭 문자인 <bpt id="p1">**</bpt>\u0009<ept id="p1">**</ept>를 찾습니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>\r<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>\r<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Matches a carriage return, <bpt id="p1">**</bpt>\u000D<ept id="p1">**</ept>.</source>
          <target state="translated">캐리지 리턴 문자인 <bpt id="p1">**</bpt>\u000D<ept id="p1">**</ept>를 찾습니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Note that <bpt id="p1">**</bpt>\r<ept id="p1">**</ept> is not equivalent to the newline character, <bpt id="p2">**</bpt>\n<ept id="p2">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>\r<ept id="p1">**</ept>은 줄 바꿈 문자인 <bpt id="p2">**</bpt>\n<ept id="p2">**</ept>과 다릅니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>\v<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>\v<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Matches a vertical tab, <bpt id="p1">**</bpt>\u000B<ept id="p1">**</ept>.</source>
          <target state="translated">세로 탭 문자인 <bpt id="p1">**</bpt>\u000B<ept id="p1">**</ept>를 찾습니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>\f<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>\f<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Matches a form feed, <bpt id="p1">**</bpt>\u000C<ept id="p1">**</ept>.</source>
          <target state="translated">용지 공급 문자인 <bpt id="p1">**</bpt>\u000C<ept id="p1">**</ept>를 찾습니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>\n<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>\n<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Matches a new line, <bpt id="p1">**</bpt>\u000A<ept id="p1">**</ept>.</source>
          <target state="translated">줄 바꿈 문자인 <bpt id="p1">**</bpt>\u000A<ept id="p1">**</ept>를 찾습니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>\e<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>\e<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Matches an escape, <bpt id="p1">**</bpt>\u001B<ept id="p1">**</ept>.</source>
          <target state="translated">이스케이프 문자인 <bpt id="p1">**</bpt>\u001B<ept id="p1">**</ept>를 찾습니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><ph id="ph1">*</ph><bpt id="p1">*</bpt><ph id="ph2">\*</ph><ept id="p1">*</ept><bpt id="p2">_</bpt>nnn<ept id="p2">_</ept></source>
          <target state="translated"><ph id="ph1">*</ph><bpt id="p1">*</bpt><ph id="ph2">\*</ph><ept id="p1">*</ept><bpt id="p2">_</bpt>nnn<ept id="p2">_</ept></target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Matches an ASCII character, where nnn consists of two or three digits that represent the octal character code.</source>
          <target state="translated">ASCII 문자를 찾습니다. 여기서 nnn은&amp;8;진수 문자 코드를 나타내는 두 자리 또는 세 자리 숫자로 구성됩니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`\040`</ph> represents a space character.</source>
          <target state="translated">예를 들어 <ph id="ph1">`\040`</ph>은 공백 문자를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This construct is interpreted as a backreference if it has only one digit (for example, <ph id="ph1">`\2`</ph>) or if it corresponds to the number of a capturing group.</source>
          <target state="translated">이 생성자가 한 개의 숫자만 포함하거나(예: <ph id="ph1">`\2`</ph>) 캡처링 그룹의 수와 일치하는 경우에는 역참조로 해석됩니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>(See <bpt id="p1">[</bpt>Backreference constructs in regular expressions<ept id="p1">](backreference.md)</ept>.)</source>
          <target state="translated"><bpt id="p1">[</bpt>정규식의 역참조 구문<ept id="p1">](backreference.md)</ept>을 참조하세요.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>\x<ept id="p1">**</ept><bpt id="p2">_</bpt>nn<ept id="p2">_</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>\x<ept id="p1">**</ept><bpt id="p2">_</bpt>nn<ept id="p2">_</ept></target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Matches an ASCII character, where <bpt id="p1">*</bpt>nn<ept id="p1">*</ept> is a two-digit hexadecimal character code.</source>
          <target state="translated">ASCII 문자를 찾습니다. 여기서 <bpt id="p1">*</bpt>nn<ept id="p1">*</ept>은 두 자리&amp;16;진수 문자 코드입니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>\c<ept id="p1">**</ept><bpt id="p2">_</bpt>X<ept id="p2">_</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>\c<ept id="p1">**</ept><bpt id="p2">_</bpt>X<ept id="p2">_</ept></target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Matches an ASCII control character, where <bpt id="p1">*</bpt>X<ept id="p1">*</ept> is the letter of the control character.</source>
          <target state="translated">ASCII 제어 문자를 찾습니다. 여기서 <bpt id="p1">*</bpt>X<ept id="p1">*</ept>는 제어 문자를 나타내는 문자입니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`\cC`</ph> is CTRL-C.</source>
          <target state="translated">예를 들어, <ph id="ph1">`\cC`</ph>는 CTRL-C입니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>\u<ept id="p1">**</ept><bpt id="p2">_</bpt>nnnn<ept id="p2">_</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>\u<ept id="p1">**</ept><bpt id="p2">_</bpt>nnnn<ept id="p2">_</ept></target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Matches a UTF-16 code unit whose value is <bpt id="p1">*</bpt>nnnn<ept id="p1">*</ept> hexadecimal.</source>
          <target state="translated">단위 값이 <bpt id="p1">*</bpt>nnnn<ept id="p1">*</ept>&amp;16;진수인 UTF-16 코드 단위를 찾습니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept> The Perl 5 character escape that is used to specify Unicode is not supported by .NET.</source>
          <target state="translated"><bpt id="p1">**</bpt>참고<ept id="p1">**</ept> 유니코드를 지정하는 데 사용되는 Perl 5 문자 이스케이프는 .NET에서 지원되지 않습니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The Perl 5 character escape has the form <bpt id="p1">**</bpt>\x{####…}<ept id="p1">**</ept>, where <bpt id="p2">**</bpt>####…<ept id="p2">**</ept></source>
          <target state="translated">Perl 5 문자 이스케이프는 <bpt id="p1">**</bpt>\x{####…}<ept id="p1">**</ept> 형식입니다. 여기서 <bpt id="p2">**</bpt>####…<ept id="p2">**</ept></target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>is a series of hexadecimal digits.</source>
          <target state="translated">는 일련의&amp;16;진수입니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Instead, use <bpt id="p1">**</bpt>\u<ept id="p1">**</ept><bpt id="p2">_</bpt>nnnn<ept id="p2">_</ept>.</source>
          <target state="translated">대신 <bpt id="p1">**</bpt>\u<ept id="p1">**</ept><bpt id="p2">_</bpt>nnnn<ept id="p2">_</ept>을 사용합니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>When followed by a character that is not recognized as an escaped character, matches that character.</source>
          <target state="translated">이스케이프된 문자로 인식되지 않는 문자가 뒤에 나올 경우 이 문자를 찾습니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`\*`</ph> matches an asterisk (*) and is the same as <ph id="ph2">`\x2A`</ph>.</source>
          <target state="translated">예를 들어 <ph id="ph1">`\*`</ph>는 별표(*)와 일치하고 <ph id="ph2">`\x2A`</ph>와 같습니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">예제</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The following example illustrates the use of character escapes in a regular expression.</source>
          <target state="translated">다음 예제에서는 정규식에서 문자 이스케이프를 사용하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>It parses a string that contains the names of the world's largest cities and their populations in 2009.</source>
          <target state="translated">세계 최대 도시의 이름과 2009년 인구가 포함된 문자열을 구문 분석합니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Each city name is separated from its population by a tab (<bpt id="p1">**</bpt>\t<ept id="p1">**</ept>) or a vertical bar (| or <ph id="ph1">`\u007c`</ph>).</source>
          <target state="translated">각 도시 이름과 해당 인구는 탭(<bpt id="p1">**</bpt>\t<ept id="p1">**</ept>) 또는 세로 막대(| 또는 <ph id="ph1">`\u007c`</ph>)로 구분됩니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Individual cities and their populations are separated from each other by a carriage return and line feed.</source>
          <target state="translated">개별 도시 및 해당 인구는 캐리지 리턴 및 줄 바꿈으로 서로 구분됩니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The regular expression <ph id="ph1">`\G(.+)[\t|\u007c](.+)\r?\n`</ph> is interpreted as shown in the following table.</source>
          <target state="translated">정규식 <ph id="ph1">`\G(.+)[\t|\u007c](.+)\r?\n`</ph>는 다음 테이블과 같이 해석됩니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">패턴</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">설명</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Begin the match where the last match ended.</source>
          <target state="translated">마지막 일치가 종료되면 일치를 시작합니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Match any character one or more times.</source>
          <target state="translated">임의 문자를 한 번 이상 찾습니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>This is the first capturing group.</source>
          <target state="translated">이 그룹은 첫 번째 캡처링 그룹입니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Match a tab (<bpt id="p1">**</bpt>\t<ept id="p1">**</ept>) or a vertical bar (&amp;#124;).</source>
          <target state="translated">탭 문자(<bpt id="p1">**</bpt>\t<ept id="p1">**</ept>) 또는 세로 막대(&amp;#124;)를 찾습니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Match any character one or more times.</source>
          <target state="translated">임의 문자를 한 번 이상 찾습니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>This is the second capturing group.</source>
          <target state="translated">이 그룹은 두 번째 캡처링 그룹입니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Match zero or one occurrence of a carriage return followed by a new line.</source>
          <target state="translated">캐리지 리턴, 줄 바꿈이 차례로 나타나는 발생&amp;0;개 또는&amp;1;개를 찾습니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">참고 항목</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Regular expression language - quick reference<ept id="p1">](quick-ref.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>정규식 언어 - 빠른 참조<ept id="p1">](quick-ref.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>