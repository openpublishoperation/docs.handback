<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0ca64c3" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ca9d57a3ef3382c4957de5edb55959f1a3f13ee0</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\testing\index.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">22a21b10e0303ed46a4bf167b158278ee04b6d79</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c39fcd79da4aefa773e4376166d34e47b1462358</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Unit Testing in .NET Core</source>
          <target state="translated">.NET Core의 단위 테스트</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Unit Testing in .NET Core</source>
          <target state="translated">.NET Core의 단위 테스트</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Unit Testing in .NET Core</source>
          <target state="translated">.NET Core의 단위 테스트</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>By <bpt id="p1">[</bpt>Steve Smith<ept id="p1">](http://ardalis.com)</ept> and <bpt id="p2">[</bpt>Bill Wagner<ept id="p2">](https://github.com/BillWagner)</ept></source>
          <target state="translated">작성자: <bpt id="p1">[</bpt>Steve Smith<ept id="p1">](http://ardalis.com)</ept> 및 <bpt id="p2">[</bpt>Bill Wagner<ept id="p2">](https://github.com/BillWagner)</ept></target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>.NET Core has been designed with testability in mind, so that creating unit tests for your applications is easier than ever before.</source>
          <target state="translated">.NET Core는 테스트 가능성을 염두에 두고 설계되어 이전보다 더 쉽게 응용 프로그램에 대한 단위 테스트를 만들 수 있습니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This article briefly introduces unit tests (and how they differ from other kinds of tests).</source>
          <target state="translated">이 문서에서는 단위 테스트 및 이 테스트가 다른 종류의 테스트와 어떻게 다른지에 대해 간략하게 소개합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Linked resources demonstrates how to add a test project to your solution and then run unit tests using either the command line or Visual Studio.</source>
          <target state="translated">연결된 리소스에서는 테스트 프로젝트를 솔루션에 추가한 다음 명령줄이나 Visual Studio를 사용하여 단위 테스트를 실행하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Getting Started with Testing</source>
          <target state="translated">테스트 시작</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Having a suite of automated tests is one of the best ways to ensure a software application does what its authors intended it to do.</source>
          <target state="translated">자동화된 테스트 모음이 있다면 소프트웨어 응용 프로그램이 작성자가 의도한 대로 수행되는지 확인하는 최선의 방법 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>There are many different kinds of tests for software applications, including integration tests, web tests, load tests, and many others.</source>
          <target state="translated">통합 테스트, 웹 테스트, 부하 테스트 등 소프트웨어 응용 프로그램에 대한 다양한 종류의 테스트가 있습니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>At the lowest level are unit tests, which test individual software components or methods.</source>
          <target state="translated">최하위 수준에 개별 소프트웨어 구성 요소나 메서드를 테스트하는 단위 테스트가 있습니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Unit tests should only test code within the developer’s control, and should not test infrastructure concerns, like databases, file systems, or network resources.</source>
          <target state="translated">단위 테스트에서는 개발자의 제어 수준 내에서만 코드를 테스트하며 데이터베이스, 파일 시스템, 네트워크 리소스 등의 인프라 문제는 테스트하지 않습니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Unit tests may be written using <bpt id="p1">[</bpt>Test Driven Development (TDD)<ept id="p1">](http://deviq.com/test-driven-development/)</ept>, or they can be added to existing code to confirm its correctness.</source>
          <target state="translated">단위 테스트는 <bpt id="p1">[</bpt>TDD(테스트 기반 개발)<ept id="p1">](http://deviq.com/test-driven-development/)</ept>를 사용하여 작성하거나, 기존 코드에 추가하여 정확성을 확인할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In either case, they should be small, well-named, and fast, since ideally you will want to be able to run hundreds of them before pushing your changes into the project’s shared code repository.</source>
          <target state="translated">두 경우 모두 변경 내용을 프로젝트의 공유 코드 리포지토리로 푸시하기 전에 수백 개의 테스트를 실행할 수 있어야 하므로 두 경우 모두 작고 신속하며 이름을 잘 지정해야 합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Developers often struggle with coming up with good names for their test classes and methods.</source>
          <target state="translated">개발자는 종종 테스트 클래스 및 메서드에 적합한 이름을 찾으려고 노력합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>As a starting point, the ASP.NET product team follows <bpt id="p1">[</bpt>these conventions<ept id="p1">](https://github.com/aspnet/Home/wiki/Engineering-guidelines#unit-tests-and-functional-tests)</ept>.</source>
          <target state="translated">시작점으로 ASP.NET 제품 팀은 <bpt id="p1">[</bpt>이러한 규칙<ept id="p1">](https://github.com/aspnet/Home/wiki/Engineering-guidelines#unit-tests-and-functional-tests)</ept>을 따릅니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>When writing unit tests, be careful you don’t accidentally introduce dependencies on infrastructure.</source>
          <target state="translated">단위 테스트를 작성할 때 실수로 인프라에 대한 종속성이 생성되지 않도록 주의하세요.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>These tend to make tests slower and more brittle, and thus should be reserved for integration tests.</source>
          <target state="translated">이러한 테스트는 속도가 느려지고 불안정해지는 경향이 있으므로 통합 테스트용으로 예약해야 합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You can avoid these hidden dependencies in your application code by following the <bpt id="p1">[</bpt>Explicit Dependencies Principle<ept id="p1">](http://deviq.com/explicit-dependencies-principle/)</ept> and using <bpt id="p2">[</bpt>Dependency Injection<ept id="p2">](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection)</ept> to request your dependencies from the framework.</source>
          <target state="translated"><bpt id="p1">[</bpt>명시적 종속성 원칙<ept id="p1">](http://deviq.com/explicit-dependencies-principle/)</ept>을 따르고 <bpt id="p2">[</bpt>종속성 주입<ept id="p2">](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection)</ept>을 사용하여 프레임워크에서 종속성을 요청하면 응용 프로그램 코드에서 숨겨진 종속성을 방지할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You can also keep your unit tests in a separate project from your integration tests, and ensure your unit test project doesn’t have references to or dependencies on infrastructure packages.</source>
          <target state="translated">또한 단위 테스트를 통합 테스트와 별도의 프로젝트에 유지하고 단위 테스트 프로젝트에 인프라 패키지에 대한 참조나 종속성이 없도록 할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Learn more about unit testing in .NET Core projects:</source>
          <target state="translated">.NET Core 프로젝트의 단위 테스트에 대한 자세한 내용은 다음을 참조하세요.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Try this <bpt id="p1">[</bpt>walkthrough creating unit tests with xUnit and the .NET CLI<ept id="p1">](unit-testing-with-dotnet-test.md)</ept>.</source>
          <target state="translated"><bpt id="p1">[</bpt>xUnit 및 .NET CLI를 사용하여 단위 테스트 만들기 연습<ept id="p1">](unit-testing-with-dotnet-test.md)</ept>을 사용해 보세요.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The XUnit team has written a tutorial that shows <bpt id="p1">[</bpt>how to use xUnit with .NET Core and Visual Studio<ept id="p1">](http://xunit.github.io/docs/getting-started-dotnet-core.html)</ept>.</source>
          <target state="translated">XUnit 팀은 <bpt id="p1">[</bpt>.NET Core 및 Visual Studio에서 xUnit을 사용하는 방법<ept id="p1">](http://xunit.github.io/docs/getting-started-dotnet-core.html)</ept>을 보여 주는 자습서를 작성했습니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If you prefer using MSTest, try the <bpt id="p1">[</bpt>walkthrough creating unit tests with MSTest and the .NET CLI<ept id="p1">](unit-testing-with-mstest.md)</ept>.</source>
          <target state="translated">MSTest를 사용하려는 경우 <bpt id="p1">[</bpt>MSTest 및 .NET CLI를 사용하여 단위 테스트 만들기 연습<ept id="p1">](unit-testing-with-mstest.md)</ept>을 사용해 보세요.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>