<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b5c25fc" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5872201f705c07bf692d0dc7f962068632f6b540</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\migration\index.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1a8b6220634b48f903457109f8354e4dbf515aed</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b5a17d825dd7004db86fc4c3e46ee8af797ef7c8</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>.NET Core migration to the csproj format | Microsoft Docs</source>
          <target state="translated">csproj 형식으로 .NET Core 마이그레이션 | Microsoft 문서</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>.NET Core project.json to csproj migration</source>
          <target state="translated">.NET Core project.json을 csproj로 마이그레이션</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core, .NET Core migration</source>
          <target state="translated">.NET, .NET Core, .NET Core 마이그레이션</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Migrating .NET Core projects to the .csproj format</source>
          <target state="translated">.csproj 형식으로 .NET Core 프로젝트 마이그레이션</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This document will cover migration scenarios for .NET Core projects and will go over the following three migration scenarios:</source>
          <target state="translated">이 문서에서는 .NET Core 프로젝트에 대한 마이그레이션 시나리오를 설명하고 다음 세 가지 마이그레이션 시나리오를 살펴봅니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Migration from a valid latest schema of <bpt id="p2">*</bpt>project.json<ept id="p2">*</ept> to <bpt id="p3">*</bpt>csproj<ept id="p3">*</ept><ept id="p1">](#migration-from-projectjson-to-csproj)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt><bpt id="p2">*</bpt>project.json<ept id="p2">*</ept>의 유효한 스키마에서 <bpt id="p3">*</bpt>csproj<ept id="p3">*</ept>로 마이그레이션<ept id="p1">](#migration-from-projectjson-to-csproj)</ept></target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Migration from DNX to csproj<ept id="p1">](#migration-from-dnx-to-csproj)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>DNX에서 csproj로 마이그레이션<ept id="p1">](#migration-from-dnx-to-csproj)</ept></target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Migration from RC3 and previous .NET Core csproj projects to the final format<ept id="p1">](#migration-from-earlier-net-core-csproj-formats-to-rtm-csproj)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>RC3 및 이전 .NET Core csproj 프로젝트에서 최종 형식으로 마이그레이션<ept id="p1">](#migration-from-earlier-net-core-csproj-formats-to-rtm-csproj)</ept></target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Migration from project.json to csproj</source>
          <target state="translated">project.json에서 csproj로 마이그레이션</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Migration from <bpt id="p1">*</bpt>project.json<ept id="p1">*</ept> to <bpt id="p2">*</bpt>.csproj<ept id="p2">*</ept> can be done using one of the following methods:</source>
          <target state="translated"><bpt id="p1">*</bpt>project.json<ept id="p1">*</ept>에서 <bpt id="p2">*</bpt>.csproj<ept id="p2">*</ept>로 마이그레이션하려면 다음 방법 중 하나를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Visual Studio 2017<ept id="p1">](#visual-studio-2017)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Visual Studio 2017<ept id="p1">](#visual-studio-2017)</ept></target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>dotnet migrate command-line tool<ept id="p1">](#dotnet-migrate)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>dotnet 마이그레이션 명령줄 도구<ept id="p1">](#dotnet-migrate)</ept></target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Both methods use the same underlying engine to migrate the projects, so the results will be the same for both.</source>
          <target state="translated">두 방법 모두 동일한 기본 엔진을 사용하여 프로젝트를 마이그레이션하므로 결과가 동일합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In most cases, using one of these two ways to migrate the <bpt id="p1">*</bpt>project.json<ept id="p1">*</ept> to <bpt id="p2">*</bpt>csproj<ept id="p2">*</ept> is the only thing that is needed and no further manual editing of the project file is necessary.</source>
          <target state="translated">대부분의 경우 이러한 두 가지 방법 중 하나를 사용하여 <bpt id="p1">*</bpt>project.json<ept id="p1">*</ept>을 <bpt id="p2">*</bpt>csproj<ept id="p2">*</ept>로 마이그레이션하기만 하면 되며 프로젝트 파일을 추가로 수동 편집할 필요가 없습니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The resulting <bpt id="p1">*</bpt>.csproj<ept id="p1">*</ept> file will be named the same as the containing directory name.</source>
          <target state="translated">결과로 얻는 <bpt id="p1">*</bpt>.csproj<ept id="p1">*</ept> 파일의 이름은 포함되는 디렉터리 이름과 동일하게 지정됩니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Visual Studio 2017</source>
          <target state="translated">Visual Studio 2017</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>When you open a <bpt id="p1">*</bpt>.xproj<ept id="p1">*</ept> file or a solution file which references <bpt id="p2">*</bpt>.xproj<ept id="p2">*</ept> files, the <bpt id="p3">**</bpt>One-way upgrade<ept id="p3">**</ept> dialog appears.</source>
          <target state="translated"><bpt id="p1">*</bpt>.xproj<ept id="p1">*</ept> 파일이나 <bpt id="p2">*</bpt>.xproj<ept id="p2">*</ept> 파일을 참조하는 솔루션 파일을 열면 <bpt id="p3">**</bpt>단방향 업그레이드<ept id="p3">**</ept> 대화 상자가 나타납니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The dialog displays the projects to be migrated.</source>
          <target state="translated">이 대화 상자에 마이그레이션할 프로젝트가 표시됩니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If you open a solution file, all the projects specified in the solution file will be listed.</source>
          <target state="translated">솔루션 파일을 여는 경우에는 솔루션 파일에 지정된 모든 프로젝트가 나열됩니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Review the list of projects to be migrated and select <bpt id="p1">**</bpt>OK<ept id="p1">**</ept>.</source>
          <target state="translated">마이그레이션할 프로젝트 목록을 검토하고 <bpt id="p1">**</bpt>확인<ept id="p1">**</ept>을 선택합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>One-way upgrade dialog showing the list of projects to be migrated</source>
          <target state="translated">마이그레이션할 프로젝트 목록을 표시하는 단방향 업그레이드 대화 상자</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Visual Studio will migrate the projects chosen automatically.</source>
          <target state="translated">Visual Studio는 선택된 프로젝트를 자동으로 마이그레이션합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>When migrating a solution, if you don't choose all projects, the same dialog will appear asking you to upgrade the remaining projects from that solution.</source>
          <target state="translated">솔루션을 마이그레이션할 때 모든 프로젝트를 선택하지 않는 경우에는 동일한 대화 상자에 해당 솔루션의 나머지 솔루션을 업그레이드할지 묻는 메시지가 표시됩니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Files that were migrated (<bpt id="p1">*</bpt>project.json<ept id="p1">*</ept>, <bpt id="p2">*</bpt>global.json<ept id="p2">*</ept>, <bpt id="p3">*</bpt>.xproj<ept id="p3">*</ept> and solution file) will be moved to a <bpt id="p4">*</bpt>Backup<ept id="p4">*</ept> folder.</source>
          <target state="translated">마이그레이션된 파일(<bpt id="p1">*</bpt>project.json<ept id="p1">*</ept>, <bpt id="p2">*</bpt>global.json<ept id="p2">*</ept>, <bpt id="p3">*</bpt>.xproj<ept id="p3">*</ept> 및 솔루션 파일)은 <bpt id="p4">*</bpt>Backup<ept id="p4">*</ept> 폴더로 이동됩니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The solution file that is migrated will be upgraded to Visual Studio 2017 and you won't be able to open that solution file in previous versions of Visual Studio.</source>
          <target state="translated">마이그레이션된 솔루션 파일은 Visual Studio 2017로 업그레이드되며 이전 버전의 Visual Studio에서 해당 솔루션 파일을 열 수 없습니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>A file named <bpt id="p1">*</bpt>UpgradeLog.htm<ept id="p1">*</ept> is also saved and automatically opened that contains a migration report.</source>
          <target state="translated">마이그레이션 보고서를 포함하는 <bpt id="p1">*</bpt>UpgradeLog.htm<ept id="p1">*</ept>이라는 파일도 저장되고 자동으로 열립니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The new tooling is not available in Visual Studio 2015, so you cannot migrate your projects using that version of Visual Studio.</source>
          <target state="translated">Visual Studio 2015에서는 새로운 도구를 사용할 수 없으므로, 해당 버전의 Visual Studio를 사용하여 프로젝트를 마이그레이션할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>dotnet migrate</source>
          <target state="translated">dotnet 마이그레이션</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In the command-line scenario, you can use the <bpt id="p1">[</bpt><ph id="ph1">`dotnet migrate`</ph><ept id="p1">](../tools/dotnet-migrate.md)</ept> command.</source>
          <target state="translated">명령줄 시나리오에서는 <bpt id="p1">[</bpt><ph id="ph1">`dotnet migrate`</ph><ept id="p1">](../tools/dotnet-migrate.md)</ept> 명령을 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>It will migrate a project, a solution or a set of folders in that order, depending on which ones were found.</source>
          <target state="translated">이 경우 프로젝트, 솔루션 또는 폴더 집합을 발견된 순서에 따라 차례로 마이그레이션합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>When you migrate a project, the project and all its dependencies are migrated.</source>
          <target state="translated">프로젝트를 마이그레이션하면 프로젝트 및 프로젝트의 모든 종속 항목이 마이그레이션됩니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Files that were migrated (<bpt id="p1">*</bpt>project.json<ept id="p1">*</ept>, <bpt id="p2">*</bpt>global.json<ept id="p2">*</ept> and <bpt id="p3">*</bpt>.xproj<ept id="p3">*</ept>) will be moved to a <bpt id="p4">*</bpt>backup<ept id="p4">*</ept> folder.</source>
          <target state="translated">마이그레이션된 파일(<bpt id="p1">*</bpt>project.json<ept id="p1">*</ept>, <bpt id="p2">*</bpt>global.json<ept id="p2">*</ept> 및 <bpt id="p3">*</bpt>.xproj<ept id="p3">*</ept>)은 <bpt id="p4">*</bpt>backup<ept id="p4">*</ept> 폴더로 이동됩니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If you are using VS Code, the <ph id="ph1">`dotnet migrate`</ph> command will not modify VS Code-specific files such as <ph id="ph2">`tasks.json`</ph>.</source>
          <target state="translated">VS Code를 사용 중인 경우 <ph id="ph1">`dotnet migrate`</ph> 명령은 <ph id="ph2">`tasks.json`</ph>과 같은 VS Code 관련 파일을 수정하지 않습니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>These files need to be changed manually.</source>
          <target state="translated">이러한 파일은 수동으로 변경해야 합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This is also true if you are using Project Ryder or any editor or Integrated Development Environment (IDE) other than Visual Studio.</source>
          <target state="translated">Project Ryder나 다른 편집기 또는 Visual Studio 이외의 IDE(통합 개발 환경)를 사용 중인 경우에도 마찬가지입니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Common issues</source>
          <target state="translated">일반적인 문제</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If you get an error: “No executable found matching command dotnet-migrate":</source>
          <target state="translated">“No executable found matching command dotnet-migrate"(dotnet-migrate 명령과 일치하는 실행 파일을 찾을 수 없습니다.) 오류가 발생하는 경우 다음을 수행합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Run <ph id="ph1">`dotnet --version`</ph> to see which version you are using.</source>
          <target state="translated"><ph id="ph1">`dotnet --version`</ph>을 실행하여 사용 중인 버전을 확인합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">`dotnet migrate`</ph><ept id="p1">](../tools/dotnet-migrate.md)</ept> requires .NET Core CLI RC3 or higher.</source>
          <target state="translated"><bpt id="p1">[</bpt><ph id="ph1">`dotnet migrate`</ph><ept id="p1">](../tools/dotnet-migrate.md)</ept>을 사용하려면 .NET Core CLI RC3 이상이 필요합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>You’ll get this error if you have a <bpt id="p1">*</bpt>global.json<ept id="p1">*</ept> file in the current or parent directory and the <ph id="ph1">`sdk`</ph> version is set to an older version.</source>
          <target state="translated"><bpt id="p1">*</bpt>global.json<ept id="p1">*</ept> 파일이 현재 또는 상위 디렉터리에 있고 <ph id="ph1">`sdk`</ph> 버전이 이전 버전으로 설정된 경우 이 오류가 발생합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Migration from DNX to csproj</source>
          <target state="translated">DNX에서 csproj로 마이그레이션</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>If you are still using DNX for .NET Core development, your migration process should be done in two stages:</source>
          <target state="translated">.NET Core 개발에 DNX를 여전히 사용 중인 경우 다음 두 단계로 마이그레이션 프로세스를 수행해야 합니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">[</bpt>existing DNX migration guidance<ept id="p1">](from-dnx.md)</ept> to migrate from DNX to project-json enabled CLI.</source>
          <target state="translated"><bpt id="p1">[</bpt>기존 DNX 마이그레이션 지침<ept id="p1">](from-dnx.md)</ept>에 따라 DNX에서 project-json 사용 CLI로 마이그레이션합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Follow the steps from the previous section to migrate from <bpt id="p1">*</bpt>project.json<ept id="p1">*</ept> to <bpt id="p2">*</bpt>.csproj<ept id="p2">*</ept>.</source>
          <target state="translated">이전 섹션의 단계에 따라 <bpt id="p1">*</bpt>project.json<ept id="p1">*</ept>에서 <bpt id="p2">*</bpt>.csproj<ept id="p2">*</ept>로 마이그레이션합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>DNX has become officially deprecated during the Preview 1 release of the .NET Core CLI.</source>
          <target state="translated">DNX는 .NET Core CLI의 Preview 1 릴리스부터 공식적으로 더 이상 사용되지 않습니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Migration from earlier .NET Core csproj formats to RTM csproj</source>
          <target state="translated">이전 .NET Core csproj 형식에서 RTM csproj로 마이그레이션</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The .NET Core csproj format has been changing and evolving with each new pre-release version of the tooling.</source>
          <target state="translated">.NET Core csproj 형식은 새 시험판 버전의 도구가 나올 때마다 변경되고 개선되었습니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>There is no tool that will migrate your project file from earlier versions of csproj to the latest, so you need to manually edit the project file.</source>
          <target state="translated">csproj의 이전 버전에서 최신 버전으로 프로젝트 파일을 마이그레이션하는 도구는 없으므로 프로젝트 파일을 수동으로 편집해야 합니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The actual steps depend on the version of the project file you are migrating.</source>
          <target state="translated">실제 단계는 마이그레이션하는 프로젝트 파일의 버전에 따라 달라집니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The following is some guidance to consider based on the changes that happened between versions:</source>
          <target state="translated">다음은 버전 간에 수행된 변경 사항에 따라 고려할 몇 가지 지침입니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Remove the tools version property from the <ph id="ph1">`&lt;Project&gt;`</ph> element, if it exists.</source>
          <target state="translated"><ph id="ph1">`&lt;Project&gt;`</ph> 요소에 도구 버전 속성이 있는 경우 제거합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Remove the XML namespace (<ph id="ph1">`xmlns`</ph>) from the <ph id="ph2">`&lt;Project&gt;`</ph> element.</source>
          <target state="translated"><ph id="ph2">`&lt;Project&gt;`</ph> 요소에서 XML 네임스페이스(<ph id="ph1">`xmlns`</ph>)를 제거합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>If it doesn't exist, add the <ph id="ph1">`Sdk`</ph> attribute to the <ph id="ph2">`&lt;Project&gt;`</ph> element and set it to <ph id="ph3">`Microsoft.NET.Sdk`</ph> or <ph id="ph4">`Microsoft.NET.Sdk.Web`</ph>.</source>
          <target state="translated"><ph id="ph1">`Sdk`</ph> 특성이 없는 경우 <ph id="ph2">`&lt;Project&gt;`</ph> 요소에 추가하고 <ph id="ph3">`Microsoft.NET.Sdk`</ph> 또는 <ph id="ph4">`Microsoft.NET.Sdk.Web`</ph>으로 설정합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>This attribute specifies that the project uses the SDK to be used.</source>
          <target state="translated">이 특성은 프로젝트에서 사용할 SDK를 사용하도록 지정합니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Microsoft.NET.Sdk.Web`</ph> is used for web apps.</source>
          <target state="translated">웹앱에는 <ph id="ph1">`Microsoft.NET.Sdk.Web`</ph>이 사용됩니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Remove the <ph id="ph1">`&lt;Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" /&gt;`</ph> and <ph id="ph2">`&lt;Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" /&gt;`</ph> statements from the top and bottom of the project.</source>
          <target state="translated">프로젝트의 맨 위와 맨 아래에서 <ph id="ph1">`&lt;Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" /&gt;`</ph> 및 <ph id="ph2">`&lt;Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" /&gt;`</ph> 문을 제거합니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>These import statements are implied by the SDK, so there is no need for them to be in the project.</source>
          <target state="translated">이러한 import 문은 SDK에 포함되므로, 프로젝트에 있을 필요가 없습니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>If you have <ph id="ph1">`Microsoft.NETCore.App`</ph> or <ph id="ph2">`NETStandard.Library`</ph> <ph id="ph3">`&lt;PackageReference&gt;`</ph> items in your project, you should remove them.</source>
          <target state="translated">프로젝트에 <ph id="ph1">`Microsoft.NETCore.App`</ph> 또는 <ph id="ph2">`NETStandard.Library`</ph> <ph id="ph3">`&lt;PackageReference&gt;`</ph> 항목이 있으면 제거해야 합니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>These package references are <bpt id="p1">[</bpt>implied by the SDK<ept id="p1">](https://aka.ms/sdkimplicitrefs)</ept>.</source>
          <target state="translated">이러한 패키지 참조는 <bpt id="p1">[</bpt>SDK에 포함<ept id="p1">](https://aka.ms/sdkimplicitrefs)</ept>되어 있습니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Remove the <ph id="ph1">`Microsoft.NET.Sdk`</ph> <ph id="ph2">`&lt;PackageReference&gt;`</ph> element, if it exists.</source>
          <target state="translated"><ph id="ph1">`Microsoft.NET.Sdk`</ph> <ph id="ph2">`&lt;PackageReference&gt;`</ph> 요소가 있는 경우 제거합니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The SDK reference comes through the <ph id="ph1">`Sdk`</ph> attribute on the <ph id="ph2">`&lt;Project&gt;`</ph> element.</source>
          <target state="translated">SDK 참조는 <ph id="ph2">`&lt;Project&gt;`</ph> 요소의 <ph id="ph1">`Sdk`</ph> 특성을 통해 가져옵니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Remove the globs that are <bpt id="p1">[</bpt>implied by the SDK<ept id="p1">](https://aka.ms/sdkimplicititems)</ept>.</source>
          <target state="translated"><bpt id="p1">[</bpt>SDK에 포함<ept id="p1">](https://aka.ms/sdkimplicititems)</ept>된 GLOB를 제거합니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Leaving these globs in your project will cause an error on build because compile items will be duplicated.</source>
          <target state="translated">프로젝트에 이러한 GLOB를 남겨 두면 컴파일 항목이 중복되므로 빌드 시 오류가 발생합니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>After these steps your project should be fully compatible with the RTM .NET Core csproj format.</source>
          <target state="translated">이러한 단계를 수행하면 프로젝트가 RTM .NET Core csproj 형식과 완벽히 호환됩니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>For examples of before and after the migration from old csproj format to the new one, see the <bpt id="p1">[</bpt>Updating Visual Studio 2017 RC – .NET Core Tooling improvements<ept id="p1">](https://blogs.msdn.microsoft.com/dotnet/2016/12/12/updating-visual-studio-2017-rc-net-core-tooling-improvements/)</ept> article on the .NET blog.</source>
          <target state="translated">이전 csproj 형식에서 새 형식으로 마이그레이션하기 전후의 예는 .NET 블로그에서 <bpt id="p1">[</bpt>Updating Visual Studio 2017 RC – .NET Core Tooling improvements<ept id="p1">](https://blogs.msdn.microsoft.com/dotnet/2016/12/12/updating-visual-studio-2017-rc-net-core-tooling-improvements/)</ept>(Visual Studio 2017 RC 업데이트 – .NET Core 도구 개선 사항) 문서를 참조하세요.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>