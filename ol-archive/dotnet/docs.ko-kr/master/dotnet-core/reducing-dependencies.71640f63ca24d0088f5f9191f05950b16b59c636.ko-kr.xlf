<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-47f9650" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">aaa29f82cc89593fd29d469d5633bc60fa434ad7</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\deploying\reducing-dependencies.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">420da35782bc8f3011141b08c75e124df793d82f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">125c2cfce4f4b8c92242176197de35db9ecfbc1b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Reducing Package Dependencies with project.json</source>
          <target state="translated">project.json으로 패키지 종속성 감소</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Reducing Package Dependencies with project.json</source>
          <target state="translated">project.json으로 패키지 종속성 감소</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Reducing Package Dependencies with project.json</source>
          <target state="translated">project.json으로 패키지 종속성 감소</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This article covers what you need to know about reducing your package dependencies when authoring <ph id="ph1">`project.json`</ph> libraries.</source>
          <target state="translated">이 문서에서는 <ph id="ph1">`project.json`</ph> 라이브러리를 작성할 때 패키지 종속성을 줄이는 방법에 대해 알아야 할 내용을 다룹니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>By the end of this article, you will learn how to compose your library such that it only uses the dependencies it needs.</source>
          <target state="translated">이 문서를 마칠 때는 필요한 종속성만을 사용하도록 라이브러리를 작성하는 방법을 이해하게 될 것입니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Why it's Important</source>
          <target state="translated">중요한 이유</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>.NET Core is a product made up of NuGet packages.</source>
          <target state="translated">.NET Core는 NuGet 패키지로 구성된 제품입니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>An essential package is the <bpt id="p1">[</bpt>.NET Standard Library metapackage<ept id="p1">](https://www.nuget.org/packages/NETStandard.Library)</ept>, which is a NuGet package composed of other packages.</source>
          <target state="translated">필수 패키지는 <bpt id="p1">[</bpt>.NET 표준 라이브러리 메타패키지<ept id="p1">](https://www.nuget.org/packages/NETStandard.Library)</ept>입니다. 이는 다른 패키지들로 구성된 NuGet 패키지로,</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>It provides you with the set of packages that are guaranteed to work on multiple .NET implementations, such as .NET Framework, .NET Core and Xamarin/Mono.</source>
          <target state="translated">.NET Framework, .NET Core 및 Xamarin/Mono 같은 여러 .NET 구현에서 작업할 수 있도록 보장하는 패키지 집합을 제공합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>However, there's a good chance that your library won't use every single package it contains.</source>
          <target state="translated">그러나 라이브러리에서 포함된 모든 패키지를 사용하지는 않을 것입니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>When authoring a library and distributing it over NuGet, it's a best practice to "trim" your dependencies down to only the packages you actually use.</source>
          <target state="translated">라이브러리를 작성하여 NuGet을 통해 배포할 때, 실제로 사용하는 패키지만으로 종속성을 "잘라내는" 것이 가장 바람직합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This results in a smaller overall footprint for NuGet packages.</source>
          <target state="translated">이렇게 하면 NuGet 패키지에서 전체적인 공간을 적게 차지합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>How to do it</source>
          <target state="translated">방법</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Currently, there is no official <ph id="ph1">`dotnet`</ph> command which trims package references.</source>
          <target state="translated">현재로서는 패키지 참조를 잘라내는 공식 <ph id="ph1">`dotnet`</ph> 명령이 없습니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Instead, you'll have to do it manually.</source>
          <target state="translated">이 작업을 수동으로 수행해야 합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The general process looks like the following:</source>
          <target state="translated">일반적인 프로세스는 다음과 같습니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Reference <ph id="ph1">`NETStandard.Library`</ph> version <ph id="ph2">`1.6.0`</ph> in a <ph id="ph3">`dependencies`</ph> section of your <ph id="ph4">`project.json`</ph>.</source>
          <target state="translated"><ph id="ph4">`project.json`</ph>의 <ph id="ph3">`dependencies`</ph> 섹션에서 <ph id="ph1">`NETStandard.Library`</ph> 버전 <ph id="ph2">`1.6.0`</ph>을 참조합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Restore packages with <ph id="ph1">`dotnet restore`</ph> from the command line.</source>
          <target state="translated">명령줄에서 <ph id="ph1">`dotnet restore`</ph>로 패키지를 복원합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Inspect the <ph id="ph1">`project.lock.json`</ph> file and find the <ph id="ph2">`NETSTandard.Library`</ph> section.</source>
          <target state="translated"><ph id="ph1">`project.lock.json`</ph> 파일을 검사하고 <ph id="ph2">`NETSTandard.Library`</ph> 섹션을 찾습니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>It's near the beginning of the file.</source>
          <target state="translated">파일의 시작 부분에 있습니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Copy all of the listed packages under <ph id="ph1">`dependencies`</ph>.</source>
          <target state="translated"><ph id="ph1">`dependencies`</ph> 아래에 나열된 모든 패키지를 복사합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Remove the <ph id="ph1">`.NETStandard.Library`</ph> reference and replace it with the copied packages.</source>
          <target state="translated"><ph id="ph1">`.NETStandard.Library`</ph> 참조를 제거하고 복사된 패키지로 교체합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Remove references to packages you don't need.</source>
          <target state="translated">필요 없는 패키지에 대한 참조를 제거합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>You can find out which packages you don't need by one of the following ways:</source>
          <target state="translated">다음 방법 중 하나를 사용하여 필요 없는 패키지를 알아낼 수 있습니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Trial and error.</source>
          <target state="translated">시행착오.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This involves removing a package, restoring, seeing if your library still compiles, and repeating this process.</source>
          <target state="translated">패키지를 제거하고 복원하면서 여전히 컴파일되는지를 알아보고 이 프로세스를 반복합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Using a tool such as <bpt id="p1">[</bpt>ILSpy<ept id="p1">](http://ilspy.net)</ept> or <bpt id="p2">[</bpt>.NET Reflector<ept id="p2">](http://www.red-gate.com/products/dotnet-development/reflector)</ept> to peek at references to see what your code is actually using.</source>
          <target state="translated">참조를 피킹하여 실제로 어떤 코드가 사용되는지를 알아보기 위해 <bpt id="p1">[</bpt>ILSpy<ept id="p1">](http://ilspy.net)</ept> 또는 <bpt id="p2">[</bpt>.NET Reflector<ept id="p2">](http://www.red-gate.com/products/dotnet-development/reflector)</ept> 같은 도구를 사용합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You can then remove packages which don't correspond to types you're using.</source>
          <target state="translated">그런 다음 사용 중인 형식에 해당하지 않는 패키지를 제거할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">예제</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Imagine that you wrote a library which provided additional functionality to generic collection types.</source>
          <target state="translated">제네릭 컬렉션 형식에 추가 기능을 제공한 라이브러리를 작성했다고 가정해 보겠습니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Such a library would need to depend on packages such as <ph id="ph1">`System.Collections`</ph>, but may not at all depend on packages such as <ph id="ph2">`System.Net.Http`</ph>.</source>
          <target state="translated">그런 라이브러리는 <ph id="ph1">`System.Collections`</ph> 같은 패키지에 종속되어야 하지만, <ph id="ph2">`System.Net.Http`</ph> 같은 패키지에는 전혀 종속되지 않을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>As such, it would be good to trim package dependencies down to only what this library required!</source>
          <target state="translated">따라서 이 라이브러리에 필요한 것으로만 패키지 종속성을 잘라낼 수 있습니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>To trim this library, you start with the <ph id="ph1">`project.json`</ph> file and add a reference to <ph id="ph2">`NETStandard.Library`</ph> version <ph id="ph3">`1.6.0`</ph>.</source>
          <target state="translated">이 라이브러리를 잘라내려면 <ph id="ph1">`project.json`</ph> 파일로 시작해서 <ph id="ph2">`NETStandard.Library`</ph> 버전 <ph id="ph3">`1.6.0`</ph>에 대한 참조를 추가합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Next, you restore packages with <ph id="ph1">`dotnet restore`</ph>, inspect the <ph id="ph2">`project.lock.json`</ph> file, and find all the packages restored for <ph id="ph3">`NETSTandard.Library`</ph>.</source>
          <target state="translated">그런 다음 <ph id="ph1">`dotnet restore`</ph>로 패키지를 복원하고, <ph id="ph2">`project.lock.json`</ph> 파일을 검사하고, <ph id="ph3">`NETSTandard.Library`</ph>에 대해 복원된 모든 패키지를 찾습니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Here's what the relevant section in the <ph id="ph1">`project.lock.json`</ph> file looks like when targeting <ph id="ph2">`netstandard1.0`</ph>:</source>
          <target state="translated">다음은 <ph id="ph2">`netstandard1.0`</ph>을 대상으로 할 때 <ph id="ph1">`project.lock.json`</ph> 파일의 관련 섹션이 어떤 모양인지를 보여줍니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Next, copy over the package references into the <ph id="ph1">`dependencies`</ph> section of the library's <ph id="ph2">`project.json`</ph> file, replacing the <ph id="ph3">`NETStandard.Library`</ph> reference:</source>
          <target state="translated">그런 다음, 라이브러리의 <ph id="ph2">`project.json`</ph> 파일에 있는 <ph id="ph1">`dependencies`</ph> 섹션으로 패키지 참조를 복사하여 <ph id="ph3">`NETStandard.Library`</ph> 참조를 교체합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>That's quite a lot of packages, many of which which certainly aren't necessary for extending collection types.</source>
          <target state="translated">패키지가 매우 많지만, 이중 다수는 확실히 컬렉션 형식의 확장에 필요하지 않습니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>You can either remove packages manually or use a tool such as <bpt id="p1">[</bpt>ILSpy<ept id="p1">](http://ilspy.net)</ept> or <bpt id="p2">[</bpt>.NET Reflector<ept id="p2">](http://www.red-gate.com/products/dotnet-development/reflector)</ept> to identify which packages your code actually uses.</source>
          <target state="translated">패키지를 수동으로 제거하거나 <bpt id="p1">[</bpt>ILSpy<ept id="p1">](http://ilspy.net)</ept> 또는 <bpt id="p2">[</bpt>.NET Reflector<ept id="p2">](http://www.red-gate.com/products/dotnet-development/reflector)</ept>와 같은 도구를 사용하여 코드가 실제로 사용하는 패키지를 식별할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Here's what a trimmed package could look like:</source>
          <target state="translated">잘라낸 패키지의 모양은 다음과 같습니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Now, it has a smaller footprint than if it had depended on the <ph id="ph1">`NETStandard.Library`</ph> metapackage.</source>
          <target state="translated">이제 <ph id="ph1">`NETStandard.Library`</ph> 메타패키지에 의존하는 경우 공간을 덜 차지하게 되었습니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>