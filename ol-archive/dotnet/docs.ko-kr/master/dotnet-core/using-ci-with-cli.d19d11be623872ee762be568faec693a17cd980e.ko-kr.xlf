<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-4a95368" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2acfb2bf7732aa17e850b9adcf03dfcb7993908b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\preview3\tools\using-ci-with-cli.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f58455cc14273ae119b595d530c29a233a67691a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6d1e64dbd59650c4a0912891814961505889e764</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Using .NET Core SDK and tools in Continuous Integration (CI) | Microsoft Docs</source>
          <target state="translated">.NET Core SDK 및 CI(연속 통합)의 도구 사용 | Microsoft 문서</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Using .NET Core SDK and tools in Continuous Integration (CI)</source>
          <target state="translated">.NET Core SDK 및 CI(연속 통합)의 도구 사용</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Using .NET Core SDK and tools in Continuous Integration (CI) (Tooling Preview 4)</source>
          <target state="translated">.NET Core SDK 및 CI(연속 통합)의 도구 사용(Tooling Preview 4)</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This topic applies to Visual Studio 2017 RC - .NET Core Tools Preview 4.</source>
          <target state="translated">이 항목은 Visual Studio 2017 RC - .NET Core Tools Preview 4에 적용됩니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For the .NET Core Tools Preview 2 version, see the <bpt id="p1">[</bpt>Using .NET Core SDK and tools in Continuous Integration (CI)<ept id="p1">](../../tools/using-ci-with-cli.md)</ept> topic.</source>
          <target state="translated">.NET Core Tools Preview 2 버전의 경우 <bpt id="p1">[</bpt>.NET Core SDK 및 CI(연속 통합)의 도구 사용<ept id="p1">](../../tools/using-ci-with-cli.md)</ept> 항목을 참조하세요.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="translated">개요</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This document outlines the usage of .NET Core SDK and its tools on the build server.</source>
          <target state="translated">이 문서는 .NET Core SDK 및 빌드 서버의 도구를 사용하는 방법의 개요를 제공합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In general, on a CI build server, you want to automate the installation in some way.</source>
          <target state="translated">일반적으로 CI 빌드 서버에서는 어떤 방식으로든 설치를 자동화하고자 합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The automation, ideally, should not require administrative privileges if at all possible.</source>
          <target state="translated">자동화에서는 가능한 한 관리자 권한을 요구하지 않는 것이 바람직합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For SaaS CI solutions, there are several options.</source>
          <target state="translated">SaaS CI 솔루션에는 몇 가지 옵션이 있습니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This document will cover two very popular ones, <bpt id="p1">[</bpt>TravisCI<ept id="p1">](https://travis-ci.org/)</ept> and <bpt id="p2">[</bpt>AppVeyor<ept id="p2">](https://www.appveyor.com/)</ept>.</source>
          <target state="translated">이 문서에서는 매우 인기 있는 두 가지, <bpt id="p1">[</bpt>TravisCI<ept id="p1">](https://travis-ci.org/)</ept> 및 <bpt id="p2">[</bpt>AppVeyor<ept id="p2">](https://www.appveyor.com/)</ept>에 대해 다룹니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>There are, of course, many other services out there, but the installation and usage mechanisms should be similar.</source>
          <target state="translated">물론 다른 서비스도 많이 있지만, 설치 및 사용법 메커니즘은 유사해야 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Installation options for CI build servers</source>
          <target state="translated">CI 빌드 서버에 대한 설치 옵션</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Using the native installers</source>
          <target state="translated">기본 설치 관리자 사용</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If using installers that require administrative privileges is not something that presents a problem, native installers for each platform can be used to set up the build server.</source>
          <target state="translated">관리 권한을 요구하는 설치 관리자를 사용하는 것이 문제가 되지 않는 경우, 각 플랫폼의 기본 설치 관리자를 사용하여 빌드 서버를 설치할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This approach, especially in the case of Linux build servers, has one advantage which is automatic installing of dependencies needed for the SDK to run.</source>
          <target state="translated">이 접근법은 특히 Linux 빌드 서버의 경우, 실행할 SDK에 필요한 종속성을 자동으로 설치한다는 한 가지 이점이 있습니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The native installers will also install a system-wide version of the SDK, which may be desired; if it's not, you should look into the <bpt id="p1">[</bpt>installer script usage<ept id="p1">](#using-the-installer-script)</ept> outlined below.</source>
          <target state="translated">기본 설치 관리자는 또한 시스템 차원의 SDK 버전을 설치하는데, 이것이 바람직할 수 있습니다. 이렇게 하지 않는 경우 아래에 요약된 <bpt id="p1">[</bpt>설치 관리자 스크립트 사용법<ept id="p1">](#using-the-installer-script)</ept>을 살펴보아야 합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Using this approach is simple.</source>
          <target state="translated">이 접근법은 사용이 간단합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For Linux, there is a choice of using a feed-based package manager, such as <ph id="ph1">`apt-get`</ph> for Ubuntu or <ph id="ph2">`yum`</ph> for CentOS, or using the packages themselves (that is, DEB or RPM).</source>
          <target state="translated">Linux에서는 피드 기반 패키지 관리자를 사용하거나(Ubuntu의 경우 <ph id="ph1">`apt-get`</ph>, CentOS의 경우 <ph id="ph2">`yum`</ph>), 패키지 자체를 사용할 수 있습니다(즉, DEB 또는 RPM).</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The former would require setting up the feed that contains the packages.</source>
          <target state="translated">전자의 경우 패키지가 포함된 피드를 설정해야 합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For Windows platforms, you can use the MSI.</source>
          <target state="translated">Windows 플랫폼에서는 MSI를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>All of the binaries can be found on the <bpt id="p1">[</bpt>.NET Core getting started page<ept id="p1">](https://aka.ms/dotnetcoregs)</ept> which points to the latest stable releases.</source>
          <target state="translated">안정적인 최신 릴리스를 안내하는 <bpt id="p1">[</bpt>.NET Core 시작 페이지<ept id="p1">](https://aka.ms/dotnetcoregs)</ept>에서 모든 이진을 찾을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If you wish to use newer (and potentially unstable) releases or the latest, you can use the links from the <bpt id="p1">[</bpt>CLI repo<ept id="p1">](https://github.com/dotnet/cli)</ept>.</source>
          <target state="translated">더 새로운 릴리스(불안정할 수 있음)나 최신 릴리스를 사용하려면 <bpt id="p1">[</bpt>CLI 리포지토리<ept id="p1">](https://github.com/dotnet/cli)</ept>의 링크를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Using the installer script</source>
          <target state="translated">설치 관리자 스크립트 사용</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Using the installer script allows for non-administrative installation on your build server.</source>
          <target state="translated">설치 관리자 스크립트를 사용하면 관리자가 아닌 사용자도 빌드 서버에 설치할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>It also allows a very easy automation.</source>
          <target state="translated">자동화도 매우 쉽게 수행할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The script itself will download the ZIP/tarball files needed and will unpack them; it will also add the install location on the local machine to the PATH so that the tools become available for invocation immediately post-install.</source>
          <target state="translated">스크립트 자체는 필요한 ZIP/tarball 파일을 다운로드하고 압축을 풉니다. 또한 설치 후 바로 도구를 호출할 수 있도록 로컬 컴퓨터의 설치 위치를 PATH에 추가합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The installer script can easily be automated at the start of the build to fetch and install the needed version of the SDK.</source>
          <target state="translated">필요한 SDK 버전을 가져와서 설치할 수 있도록 빌드 시작 부분에서 설치 관리자 스크립트를 손쉽게 자동화할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The "needed version" is whatever version application being built requires.</source>
          <target state="translated">"필요한 버전"이란 빌드 중인 응용 프로그램에 필요한 버전을 말합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You can choose the installation path so you can install the SDK locally and then clean up after the build completes.</source>
          <target state="translated">SDK를 로컬에 설치하고 빌드가 완료된 후 정리할 수 있도록 설치 경로를 선택할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This brings additional encapsulation and atomicity to the build process.</source>
          <target state="translated">이렇게 하면 빌드 프로세스에 캡슐화 및 원자성이 추가됩니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The installation script reference can be found in the <bpt id="p1">[</bpt>dotnet-install<ept id="p1">](dotnet-install-script.md)</ept> document.</source>
          <target state="translated">설치 스크립트 참조는 <bpt id="p1">[</bpt>dotnet-install<ept id="p1">](dotnet-install-script.md)</ept> 문서에서 찾을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Dealing with the dependencies</source>
          <target state="translated">종속성 처리</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Using the installer script means that the native dependencies are not installed automatically and that you have to install them if the operating system you are installing on already doesn't have them.</source>
          <target state="translated">설치 관리자 스크립트를 사용하는 경우 기본 종속성이 자동으로 설치되지 않으며, 설치 중인 운영 체제에 아직 없는 경우 종속성을 설치해야 합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>You can see the list of prerequisites in the <bpt id="p1">[</bpt>CLI repo<ept id="p1">](https://github.com/dotnet/core/blob/master/Documentation/prereqs.md)</ept>.</source>
          <target state="translated"><bpt id="p1">[</bpt>CLI 리포지토리<ept id="p1">](https://github.com/dotnet/core/blob/master/Documentation/prereqs.md)</ept>에서 필수 조건 목록을 볼 수 있습니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>CI services setup examples</source>
          <target state="translated">CI 서비스 설치 예제</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The below sections show examples of configurations using the mentioned CI SaaS offerings.</source>
          <target state="translated">아래 섹션에서는 언급한 CI SaaS 제품을 사용하여 구성하는 예제를 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>TravisCI</source>
          <target state="translated">TravisCI</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>travis-ci<ept id="p1">](https://travis-ci.org/)</ept> can be configured to install the .NET Core SDK using the <ph id="ph1">`csharp`</ph> language and the <ph id="ph2">`dotnet`</ph> key.</source>
          <target state="translated"><ph id="ph1">`csharp`</ph> 언어 및 <ph id="ph2">`dotnet`</ph> 키를 사용하여 .NET Core SDK를 설치하도록 <bpt id="p1">[</bpt>travis-ci<ept id="p1">](https://travis-ci.org/)</ept>를 구성할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Just use:</source>
          <target state="translated">다음을 사용하면 됩니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Travis can run both <ph id="ph1">`osx`</ph> (OS X 10.11) and <ph id="ph2">`linux`</ph> ( Ubuntu 14.04 ) job in a build matrix, see <bpt id="p1">[</bpt>example .travis.yml<ept id="p1">](https://github.com/dotnet/docs/blob/master/.travis.yml)</ept> for more information.</source>
          <target state="translated">Travis는 빌드 행렬에서 <ph id="ph1">`osx`</ph>(OS X 10.11) 및 <ph id="ph2">`linux`</ph>(Ubuntu 14.04) 작업을 모두 실행할 수 있습니다. 자세한 내용은 <bpt id="p1">[</bpt>example .travis.yml<ept id="p1">](https://github.com/dotnet/docs/blob/master/.travis.yml)</ept>을 참조하세요.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>AppVeyor</source>
          <target state="translated">AppVeyor</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>appveyor.com ci<ept id="p1">](https://www.appveyor.com/)</ept> has .NET Core SDK preview2 already installed in the build worker image <ph id="ph1">`Visual Studio 2015`</ph>.</source>
          <target state="translated"><bpt id="p1">[</bpt>appveyor.com ci<ept id="p1">](https://www.appveyor.com/)</ept>의 빌드 작업자 이미지 <ph id="ph1">`Visual Studio 2015`</ph>에 .NET Core SDK preview2가 이미 설치되어 있습니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Just use:</source>
          <target state="translated">다음을 사용하면 됩니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>It's possible to install a specific version of .NET Core SDK, see <bpt id="p1">[</bpt>example appveyor.yml<ept id="p1">](https://github.com/dotnet/docs/blob/master/appveyor.yml)</ept> for more info.</source>
          <target state="translated">.NET Core SDK의 특정 버전을 설치할 수 있습니다. 자세한 내용은 <bpt id="p1">[</bpt>예제 appveyor.yml<ept id="p1">](https://github.com/dotnet/docs/blob/master/appveyor.yml)</ept>을 참조하세요.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>In the example, the .NET Core SDK binaries are downloaded, unzipped in a subdirectory and added to <ph id="ph1">`PATH`</ph> env var.</source>
          <target state="translated">이 예제에서는 .NET Core SDK 이진을 다운로드하고, 하위 디렉터리에 압축을 해제하고, <ph id="ph1">`PATH`</ph> 환경 변수에 추가했습니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>A build matrix can be added to run integration tests with multiple version of the .NET Core SDK.</source>
          <target state="translated">빌드 행렬을 추가하여 .NET Core SDK의 여러 버전으로 통합 테스트를 실행할 수 있습니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>