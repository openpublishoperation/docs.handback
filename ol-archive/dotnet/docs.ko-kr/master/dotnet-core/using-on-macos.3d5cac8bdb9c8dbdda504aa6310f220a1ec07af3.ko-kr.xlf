<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b5c25fc" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c4d1b7690ca87f2a1a9ced4d82e47aee2f7ecc9f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\tutorials\using-on-macos.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">db4157484ae74d7f79225467e7f5832db16b921a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8f7e4628651fc64cf3b80bffadf0ba2902254246</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Getting started with .NET Core on macOS</source>
          <target state="translated">macOS에서 .NET Core 시작</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Getting started with .NET Core on macOS, using Visual Studio Code</source>
          <target state="translated">Visual Studio Code를 사용하여 macOS에서 .NET Core 시작</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Getting started with .NET Core on macOS, using Visual Studio Code</source>
          <target state="translated">Visual Studio Code를 사용하여 macOS에서 .NET Core 시작</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This document provides a tour of the steps and workflow to create a .NET Core Solution using <bpt id="p1">[</bpt>Visual Studio Code<ept id="p1">](http://code.visualstudio.com)</ept>.</source>
          <target state="translated">이 문서에서는 <bpt id="p1">[</bpt>Visual Studio Code<ept id="p1">](http://code.visualstudio.com)</ept>를 사용하여 .NET Core 솔루션을 만드는 단계와 워크플로를 안내합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You'll learn how to create projects, create unit tests, use the debugging tools, and incorporate third-party libraries via <bpt id="p1">[</bpt>NuGet<ept id="p1">](http://nuget.org)</ept>.</source>
          <target state="translated">프로젝트 만들기, 단위 테스트 만들기, 디버깅 도구 사용, <bpt id="p1">[</bpt>NuGet<ept id="p1">](http://nuget.org)</ept>을 통해 타사 라이브러리 통합 등을 배웁니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This article uses Visual Studio Code on Mac OS.</source>
          <target state="translated">이 문서에서는 Mac OS에서 Visual Studio Code를 사용합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Where there are differences, it points out the differences for the Windows platform.</source>
          <target state="translated">차이가 있는 경우 Windows 플랫폼에 대한 차이를 가리킵니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
          <target state="translated">필수 조건</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Before starting, you'll need to install the <bpt id="p1">[</bpt>.NET Core SDK<ept id="p1">](https://www.microsoft.com/net/core)</ept>.</source>
          <target state="translated">시작하기 전에, <bpt id="p1">[</bpt>.NET Core SDK<ept id="p1">](https://www.microsoft.com/net/core)</ept>를 설치해야 합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The .NET Core SDK includes the latest release of the .NET Core framework and runtime.</source>
          <target state="translated">.NET Core SDK에는 최신 버전의 .NET Core 프레임워크 및 런타임이 포함되어 있습니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You'll also need to install <bpt id="p1">[</bpt>Visual Studio Code<ept id="p1">](http://code.visualstudio.com)</ept>.</source>
          <target state="translated"><bpt id="p1">[</bpt>Visual Studio Code<ept id="p1">](http://code.visualstudio.com)</ept>도 설치해야 합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>During the course of this article, you'll also install extensions that will improve the .NET Core development experience.</source>
          <target state="translated">이 문서를 진행하면서 .NET Core 개발자 환경을 개선할 확장도 설치하게 됩니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Getting Started</source>
          <target state="translated">시작</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The source for this tutorial is available on <bpt id="p1">[</bpt>GitHub<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/getting-started/golden)</ept>.</source>
          <target state="translated">이 자습서의 소스는 <bpt id="p1">[</bpt>GitHub<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/getting-started/golden)</ept>에서 이용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Start Visual Studio Code.</source>
          <target state="translated">Visual Studio Code를 시작합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Press Ctrl + '<ph id="ph1">\`</ph>' (the back-quote character) to open an embedded terminal in VS Code.</source>
          <target state="translated">Ctrl + '<ph id="ph1">\`</ph>'(역따옴표)를 눌러 VS Code에서 포함된 터미널을 엽니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>(Alternatively, you can use a separate terminal window, if you prefer).</source>
          <target state="translated">또는 원하는 경우 별도의 터미널 창을 사용할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>By the time we're done, you'll create three projects: a library project, tests for that library project, and a console application that makes use of the library.</source>
          <target state="translated">작업을 완료하면 세 개의 프로젝트, 즉 라이브러리 프로젝트, 해당 라이브러리 프로젝트에 대한 테스트, 그리고 라이브러리를 사용할 수 있게 하는 콘솔 응용 프로그램을 만들게 됩니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Let's start by creating those folders.</source>
          <target state="translated">폴더를 만드는 것으로 시작해 보겠습니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In the terminal, create a 'golden' directory.</source>
          <target state="translated">터미널에서 'golden' 디렉터리를 만듭니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In VS Code, open the <bpt id="p1">*</bpt>golden<ept id="p1">*</ept> directory.</source>
          <target state="translated">VS Code에서 <bpt id="p1">*</bpt>golden<ept id="p1">*</ept> 디렉터리를 엽니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This directory is the root of your solution.</source>
          <target state="translated">이 디렉터리는 솔루션의 루트입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Run the <bpt id="p1">[</bpt><ph id="ph1">`dotnet new`</ph><ept id="p1">](../tools/dotnet-new.md)</ept> command to create a new solution:</source>
          <target state="translated"><bpt id="p1">[</bpt><ph id="ph1">`dotnet new`</ph><ept id="p1">](../tools/dotnet-new.md)</ept> 명령을 실행하여 새 솔루션을 만듭니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This command creates a <bpt id="p1">*</bpt>golden.sln<ept id="p1">*</ept> file for the entire solution.</source>
          <target state="translated">이 명령은 전체 솔루션에 대한 <bpt id="p1">*</bpt>golden.sln<ept id="p1">*</ept> 파일을 만듭니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Your next task is to create the library.</source>
          <target state="translated">다음 작업은 라이브러리를 만드는 것입니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In the terminal window (either the embedded terminal in VS code, or another terminal), cd to <bpt id="p1">*</bpt>golden/<ept id="p1">*</ept> and type the command:</source>
          <target state="translated">터미널 창(VS Code의 포함된 터미널 또는 다른 터미널)에서 <bpt id="p1">*</bpt>golden/<ept id="p1">*</ept>으로 이동하고 다음 명령을 입력합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This creates a library project, with two files: <bpt id="p1">*</bpt>library.csproj<ept id="p1">*</ept> and <bpt id="p2">*</bpt>Class1.cs<ept id="p2">*</ept> in the <bpt id="p3">*</bpt>library<ept id="p3">*</ept> directory.</source>
          <target state="translated">그러면 두 개의 파일(<bpt id="p1">*</bpt>library.csproj<ept id="p1">*</ept> 및 <bpt id="p2">*</bpt>Class1.cs<ept id="p2">*</ept>)과 함께 라이브러리 프로젝트가 <bpt id="p3">*</bpt>library<ept id="p3">*</ept> 디렉터리에 생성됩니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You want that library project included in your solution.</source>
          <target state="translated">해당 라이브러리 프로젝트를 솔루션에 포함할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Run the <bpt id="p1">[</bpt><ph id="ph1">`dotnet sln`</ph><ept id="p1">](../tools/dotnet-sln.md)</ept> command to add the newly created <bpt id="p2">*</bpt>library.csproj<ept id="p2">*</ept> project to the solution:</source>
          <target state="translated"><bpt id="p1">[</bpt><ph id="ph1">`dotnet sln`</ph><ept id="p1">](../tools/dotnet-sln.md)</ept> 명령을 실행하여 새로 만든 <bpt id="p2">*</bpt>library.csproj<ept id="p2">*</ept> 프로젝트를 솔루션에 추가합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Let's examine the project that you've created.</source>
          <target state="translated">만든 프로젝트를 검토해 봅시다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>library.csproj<ept id="p1">*</ept> file contains the following information:</source>
          <target state="translated"><bpt id="p1">*</bpt>library.csproj<ept id="p1">*</ept> 파일에는 다음 정보가 들어 있습니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This library project will make use of JSON representation of objects, so you'll want to add a reference to the <ph id="ph1">`Newtonsoft.Json`</ph> NuGet package.</source>
          <target state="translated">이 프로젝트는 개체의 JSON 표현 방식을 사용하므로, 사용자는 <ph id="ph1">`Newtonsoft.Json`</ph> NuGet 패키지에 참조를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`dotnet add`</ph> command adds new items to a project.</source>
          <target state="translated"><ph id="ph1">`dotnet add`</ph> 명령은 프로젝트에 새 항목을 추가합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>To add a reference to a NuGet package, you use the <ph id="ph1">`package`</ph> command and specify the name of the package.</source>
          <target state="translated">NuGet 패키지에 참조를 추가하려면 <ph id="ph1">`package`</ph> 명령을 사용하여 패키지의 이름을 지정합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This adds <ph id="ph1">`Newtonsoft.Json`</ph> and its dependencies to the Library project.</source>
          <target state="translated">그러면 <ph id="ph1">`Newtonsoft.Json`</ph> 및 해당 종속성이 라이브러리 프로젝트에 추가됩니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Alternatively, you could manually edit the <bpt id="p1">*</bpt>library.csproj<ept id="p1">*</ept> file and add the following node:</source>
          <target state="translated">또는 <bpt id="p1">*</bpt>library.csproj<ept id="p1">*</ept> 파일을 수동으로 편집하고 다음 노드를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>After you've finished adding those dependencies, you need to install those packages into workspace.</source>
          <target state="translated">이러한 종속성 추가를 완료한 후 작업 영역에 패키지를 설치해야 합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Run the <ph id="ph1">`dotnet restore`</ph> command to updates all dependencies, and write a <bpt id="p1">*</bpt>obj/project.assets.json<ept id="p1">*</ept> file under the project directory.</source>
          <target state="translated"><ph id="ph1">`dotnet restore`</ph> 명령을 실행하여 모든 종속성을 업데이트하고, <bpt id="p1">*</bpt>obj/project.assets.json<ept id="p1">*</ept> 파일을 만들어 프로젝트 디렉터리에 저장합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This file contains the full dependency tree of all the dependencies in your project.</source>
          <target state="translated">이 파일에는 프로젝트의 모든 종속성에 대한 전체 종속성 트리가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>You don't need to read this file, it's used by tools in the .NET Core SDK.</source>
          <target state="translated">이 파일을 읽을 필요는 없습니다. .NET Core SDK의 도구에서 이 파일을 사용합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Now, let's update the C# code.</source>
          <target state="translated">이제 C# 코드를 업데이트해 보겠습니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Let's create a <ph id="ph1">`Thing`</ph> class that contains one public method.</source>
          <target state="translated">하나의 공용 메서드를 포함하는 <ph id="ph1">`Thing`</ph> 클래스를 만들어 보겠습니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>This method will return the sum of two numbers, but will do so by converting that number to a JSON string, and then deserializing it.</source>
          <target state="translated">이 메서드는 두 숫자의 합을 반환하지만, 그 과정에서 해당 숫자를 JSON 문자열로 변환하고 역직렬화합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Rename the file <bpt id="p1">*</bpt>Class1.cs<ept id="p1">*</ept> to <bpt id="p2">*</bpt>Thing.cs<ept id="p2">*</ept>.</source>
          <target state="translated"><bpt id="p1">*</bpt>Class1.cs<ept id="p1">*</ept> 파일의 이름을 <bpt id="p2">*</bpt>Thing.cs<ept id="p2">*</ept>로 바꿉니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Then, replace the existing code (for the template-generated Class1) with the following:</source>
          <target state="translated">그런 다음 기존 코드(템플릿에서 생성된 Class1)를 다음으로 바꿉니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This makes use of a number of modern C# features, such as static usings, expression-bodied members, and interpolated strings, that you can learn about in the <bpt id="p1">[</bpt>Learn C#<ept id="p1">](../../csharp/index.md)</ept> section.</source>
          <target state="translated">여기에는 static 사용, 식 본문 멤버, 보간된 문자열 등 최신 C# 기능이 사용되며, 이러한 기능은 <bpt id="p1">[</bpt>C# 배우기<ept id="p1">](../../csharp/index.md)</ept> 섹션에서 배울 수 있습니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Now that you've updated the code, you can build the library using <ph id="ph1">`dotnet build`</ph>.</source>
          <target state="translated">이제 코드를 업데이트했으므로 <ph id="ph1">`dotnet build`</ph>를 사용하여 라이브러리를 빌드할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>You now have a built <bpt id="p1">*</bpt>library.dll<ept id="p1">*</ept> file under <bpt id="p2">*</bpt>golden/library/bin/Debug/netstandard1.4<ept id="p2">*</ept>.</source>
          <target state="translated">이제 <bpt id="p2">*</bpt>golden/library/bin/Debug/netstandard1.4<ept id="p2">*</ept>에 <bpt id="p1">*</bpt>library.dll<ept id="p1">*</ept> 파일을 만들었습니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Writing the test project</source>
          <target state="translated">테스트 프로젝트 작성</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Let's build a test project for this library that you've build.</source>
          <target state="translated">빌드한 라이브러리에 대한 테스트 프로젝트를 빌드해 보겠습니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Change to the <bpt id="p1">*</bpt>golden<ept id="p1">*</ept> directory.</source>
          <target state="translated"><bpt id="p1">*</bpt>golden<ept id="p1">*</ept> 디렉터리로 변경합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Run <ph id="ph1">`dotnet new xunit -o test-library`</ph> to create a new test project.</source>
          <target state="translated"><ph id="ph1">`dotnet new xunit -o test-library`</ph>를 실행하여 새 테스트 프로젝트를 만듭니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>You'll want to add this project to the solution as well by running <ph id="ph1">`dotnet sln add test-library/test-library.csproj`</ph>.</source>
          <target state="translated"><ph id="ph1">`dotnet sln add test-library/test-library.csproj`</ph>를 실행하여 이 프로젝트를 솔루션에 추가할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>You'll need to add a dependency node for the library you wrote in the steps above.</source>
          <target state="translated">위 단계에서 작성한 라이브러리에 대한 종속성 노드를 추가해야 합니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`dotnet add reference`</ph> command does that:</source>
          <target state="translated"><ph id="ph1">`dotnet add reference`</ph> 명령은 다음 작업을 수행합니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Or, you can manually edit the <bpt id="p1">*</bpt>test-library.csproj<ept id="p1">*</ept> file and add the following node:</source>
          <target state="translated">또는 <bpt id="p1">*</bpt>test-library.csproj<ept id="p1">*</ept> 파일을 수동으로 편집하고 다음 노드를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`library`</ph> node specifies that this dependency should resolve to a project in the current workspace.</source>
          <target state="translated"><ph id="ph1">`library`</ph> 노드는 이 종속성을 현재 작업 영역의 프로젝트로 확인해야 함을 지정합니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Without explicitly specifying this, it's possible that the test project would build against a NuGet package of the same name.</source>
          <target state="translated">이를 명시적으로 지정하지 않으면 테스트 프로젝트가 같은 이름의 NuGet 패키지에 대해 빌드될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Now that the dependencies have been properly configured, let's create the tests for your library.</source>
          <target state="translated">이제 종속성은 제대로 구성되었으므로 라이브러리에 대한 테스트를 만들어 보겠습니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Open <bpt id="p1">*</bpt>UnitTest1.cs<ept id="p1">*</ept> and replace its contents with the following code:</source>
          <target state="translated"><bpt id="p1">*</bpt>UnitTest1.cs<ept id="p1">*</ept>를 열고 내용을 다음 코드로 바꿉니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Now, run <ph id="ph1">`dotnet restore`</ph> and <ph id="ph2">`dotnet build`</ph>.</source>
          <target state="translated">이제 <ph id="ph1">`dotnet restore`</ph> 및 <ph id="ph2">`dotnet build`</ph>를 실행합니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>These commands will recursively find all projects to restore dependencies and build them.</source>
          <target state="translated">이러한 명령은 모든 프로젝트를 재귀적으로 찾아 종속성을 복원하고 빌드합니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Finally, run <ph id="ph1">`dotnet test test-library/test-library.csproj`</ph> to run the tests.</source>
          <target state="translated">마지막으로 <ph id="ph1">`dotnet test test-library/test-library.csproj`</ph>를 실행하여 테스트를 실행합니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The xUnit console test runner will run the one test, and report that it is passing.</source>
          <target state="translated">xUnit 콘솔 Test Runner가 하나의 테스트를 실행하고 통과를 보고합니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Writing the console app</source>
          <target state="translated">콘솔 앱 작성</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>In your terminal run <ph id="ph1">`dotnet new console -o app`</ph> to create a new console application.</source>
          <target state="translated">터미널에서 <ph id="ph1">`dotnet new console -o app`</ph>을 실행하여 새 콘솔 응용 프로그램을 만듭니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>This project is also part of the solution, so run <ph id="ph1">`dotnet sln add app/app.csproj`</ph> to add the project to the solution.</source>
          <target state="translated">또한 이 프로젝트는 솔루션의 일부이므로 <ph id="ph1">`dotnet sln add app/app.csproj`</ph>를 실행하여 솔루션에 프로젝트를 추가합니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Your console application depends on the library you built and tested in the previous steps.</source>
          <target state="translated">콘솔 응용 프로그램은 이전 단계에서 빌드하고 테스트한 라이브러리에 종속됩니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>You need to indicate that by running <ph id="ph1">`dotnet add reference`</ph> again:</source>
          <target state="translated"><ph id="ph1">`dotnet add reference`</ph>를 다시 실행하여 나타내야 합니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Run <ph id="ph1">`dotnet restore`</ph> to restore all dependencies.</source>
          <target state="translated"><ph id="ph1">`dotnet restore`</ph>를 실행하여 모든 종속성을 복원합니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Open <bpt id="p1">*</bpt>program.cs<ept id="p1">*</ept> and replace the contents of the <ph id="ph1">`Main`</ph> method with this line:</source>
          <target state="translated"><bpt id="p1">*</bpt>program.cs<ept id="p1">*</ept>를 열고 <ph id="ph1">`Main`</ph> 메서드의 내용을 다음 줄로 바꿉니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>You'll need to add a couple <ph id="ph1">`using`</ph> directives to the top of the file:</source>
          <target state="translated">파일 상단에 <ph id="ph1">`using`</ph> 지시문 두 줄을 추가해야 합니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Then, run <ph id="ph1">`dotnet build`</ph>.</source>
          <target state="translated">그런 다음 <ph id="ph1">`dotnet build`</ph>를 실행합니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>That creates the assemblies, and you can type <ph id="ph1">`dotnet run -p app/app.csproj`</ph> to run the executable.</source>
          <target state="translated">어셈블리가 만들어지며 <ph id="ph1">`dotnet run -p app/app.csproj`</ph>을 입력하여 실행 파일을 실행할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`-p`</ph> argument to <ph id="ph2">`dotnet run`</ph> specifies the project for the main application.</source>
          <target state="translated"><ph id="ph2">`dotnet run`</ph>에 대한 <ph id="ph1">`-p`</ph> 인수는 주 응용 프로그램에 대한 프로젝트를 지정합니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Debugging your application</source>
          <target state="translated">응용 프로그램 디버깅</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>You can debug your code in VS Code using the C# extension.</source>
          <target state="translated">C# 확장을 통해 VS Code에서 코드를 디버깅할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>You install this extension by pressing <ph id="ph1">`F1`</ph> to open the VS Code palette.</source>
          <target state="translated"><ph id="ph1">`F1`</ph>을 눌러 VS Code 팔레트를 열어서 이 확장을 설치합니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Type <ph id="ph1">`ext install`</ph> to see the list of extensions.</source>
          <target state="translated"><ph id="ph1">`ext install`</ph>을 입력하여 확장의 목록을 표시합니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Select the C# extension.</source>
          <target state="translated">C# 확장을 선택합니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>(More details are available on the <bpt id="p1">[</bpt>Visual Studio Code C# Extension documentation<ept id="p1">](https://github.com/OmniSharp/omnisharp-vscode/blob/master/debugger.md)</ept> page.)</source>
          <target state="translated">자세한 내용은 <bpt id="p1">[</bpt>Visual Studio Code C# 확장 문서<ept id="p1">](https://github.com/OmniSharp/omnisharp-vscode/blob/master/debugger.md)</ept> 페이지를 참조하세요.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>After you install the extension, VS Code will ask that you restart the application to load the new extension.</source>
          <target state="translated">확장을 설치하면 VS Code가 응용 프로그램을 다시 시작하여 새 확장을 로드할지를 물어봅니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Once the extension is installed, you can open the debugger tab (see figure).</source>
          <target state="translated">확장이 설치되면 디버거 탭을 열 수 있습니다(그림 참조).</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>VS Code Debugger</source>
          <target state="translated">VS Code 디버거</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Set a breakpoint at the <ph id="ph1">`WriteLine`</ph> statement in <ph id="ph2">`Main`</ph>.</source>
          <target state="translated"><ph id="ph2">`Main`</ph>의 <ph id="ph1">`WriteLine`</ph> 문에 중단점을 설정합니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>You do this by pressing the <ph id="ph1">`F9`</ph> key, or by clicking the mouse in the left margin on the line you want the breakpoint.</source>
          <target state="translated"><ph id="ph1">`F9`</ph> 키를 누르거나 중단점을 추가할 줄의 왼쪽 여백에서 마우스를 클릭하면 됩니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Open the debugger by pressing the debug icon on the left of the VS Code screen (see figure).</source>
          <target state="translated">VS Code 화면 왼쪽에 있는 디버그 아이콘을 눌러 디버거를 엽니다(그림 참조).</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Then, press the Play button to start the application under the debugger.</source>
          <target state="translated">디버거에서 응용 프로그램을 시작하려면 재생 단추를 누릅니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>You should hit the breakpoint.</source>
          <target state="translated">중단점에 도달합니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Step into the <ph id="ph1">`Get`</ph> method and make sure that you have passed in the correct arguments.</source>
          <target state="translated"><ph id="ph1">`Get`</ph> 메서드를 단계별로 실행하며 올바른 인수를 전달했는지 확인합니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Make sure that the answer is actually 42.</source>
          <target state="translated">답이 실제로 42인지 확인합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>