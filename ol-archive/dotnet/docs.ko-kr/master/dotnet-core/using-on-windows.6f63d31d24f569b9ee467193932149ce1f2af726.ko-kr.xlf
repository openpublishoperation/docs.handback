<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">446ada6d325a81f9c0078e4771866d99af341aed</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\tutorials\using-on-windows.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">903822ba8f6ffa91c84b86ddd9ff49358dfc05f9</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3ebb718800324b1d326f84d3d2305df2d902c5cf</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Getting started with .NET Core on Windows</source>
          <target state="translated">Windows에서 .NET Core 시작</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Getting started with .NET Core on Windows, using Visual Studio 2015</source>
          <target state="translated">Visual Studio 2015를 사용하여 Windows에서 .NET Core 시작</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Getting started with .NET Core on Windows, using Visual Studio 2015</source>
          <target state="translated">Visual Studio 2015를 사용하여 Windows에서 .NET Core 시작</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This topic applies to Visual Studio 2015 - .NET Core Tools Preview 2.</source>
          <target state="translated">이 항목은 Visual Studio 2015 - .NET Core Tools Preview 2에 적용됩니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For the Visual Studio 2017 RC - .NET Core Tools Preview 4 version, see the <bpt id="p1">[</bpt>Getting started with .NET Core on Windows, using Visual Studio 2017<ept id="p1">](../preview3/tutorials/using-on-windows-vs-2017.md)</ept> topic.</source>
          <target state="translated">Visual Studio 2017 RC - .NET Core Tools Preview 4 버전의 경우 <bpt id="p1">[</bpt>Visual Studio 2017을 사용하여 Windows에서 .NET Core 시작<ept id="p1">](../preview3/tutorials/using-on-windows-vs-2017.md)</ept> 항목을 참조하세요.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Visual Studio 2015 provides a full-featured development environment for developing .NET Core applications.</source>
          <target state="translated">Visual Studio 2015는 .NET Core 응용 프로그램 개발을 위해 필요한 모든 기능을 갖춘 개발 환경을 제공합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The procedures in this document describe the steps necessary to build a number of typical .NET Core solutions, or solutions that include .NET Core components, using Visual Studio.</source>
          <target state="translated">이 문서의 절차에서는 Visual Studio 사용하여 일반적인 .NET Core 솔루션 또는 .NET Core 구성 요소가 포함된 솔루션을 빌드하는 데 필요한 단계를 설명합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The scenarios include testing and using third-party libraries that have not been explicitly built for the most recent version of .NET Core.</source>
          <target state="translated">최신 .NET Core 버전용으로 명시적으로 빌드되지 않은 타사 라이브러리의 테스트 및 사용도 시나리오에 포함됩니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
          <target state="translated">필수 조건</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Follow the instructions on <bpt id="p1">[</bpt>our prerequisites page<ept id="p1">](../windows-prerequisites.md)</ept> to update your environment.</source>
          <target state="translated"><bpt id="p1">[</bpt>필수 조건 페이지<ept id="p1">](../windows-prerequisites.md)</ept>의 지침에 따라 환경을 업데이트합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Getting Started</source>
          <target state="translated">시작</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The following steps will set up Visual Studio 2015 for .NET Core development:</source>
          <target state="translated">다음 단계를 통해 .NET Core 개발을 위한 Visual Studio 2015를 설정합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Open Visual Studio, and on the <bpt id="p1">**</bpt>File<ept id="p1">**</ept> menu, choose <bpt id="p2">**</bpt>New<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Project<ept id="p3">**</ept>.</source>
          <target state="translated">Visual Studio를 열고 <bpt id="p1">**</bpt>파일<ept id="p1">**</ept> 메뉴에서 <bpt id="p2">**</bpt>새로 만들기<ept id="p2">**</ept>, <bpt id="p3">**</bpt>프로젝트<ept id="p3">**</ept>를 선택합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>New Project<ept id="p1">**</ept> dialog, in the <bpt id="p2">**</bpt>Templates<ept id="p2">**</ept> list, expand the <bpt id="p3">**</bpt>Visual C#<ept id="p3">**</ept> node and choose <bpt id="p4">**</bpt>.NET Core<ept id="p4">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>새 프로젝트<ept id="p1">**</ept> 대화 상자의 <bpt id="p2">**</bpt>템플릿<ept id="p2">**</ept> 목록에서 <bpt id="p3">**</bpt>Visual C#<ept id="p3">**</ept> 노드를 확장하고 <bpt id="p4">**</bpt>.NET Core<ept id="p4">**</ept>를 선택합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You should see three new project templates for <bpt id="p1">**</bpt>Class Library (.NET Core)<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Console Application (.NET Core)<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>ASP.NET Core Web Application (.NET Core)<ept id="p3">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>클래스 라이브러리(.NET Core)<ept id="p1">**</ept>, <bpt id="p2">**</bpt>콘솔 응용 프로그램(.NET Core)<ept id="p2">**</ept> 및 <bpt id="p3">**</bpt>ASP.NET Core 웹 응용 프로그램(.NET Core)<ept id="p3">**</ept>에 대한 세 개의 새 프로젝트 템플릿이 표시됩니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>A solution using only .NET Core projects</source>
          <target state="translated">.NET Core 프로젝트만을 사용하는 솔루션</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Writing the library</source>
          <target state="translated">라이브러리 작성</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In Visual Studio, choose <bpt id="p1">**</bpt>File<ept id="p1">**</ept>, <bpt id="p2">**</bpt>New<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Project<ept id="p3">**</ept>.</source>
          <target state="translated">Visual Studio에서 <bpt id="p1">**</bpt>파일<ept id="p1">**</ept>, <bpt id="p2">**</bpt>새로 만들기<ept id="p2">**</ept>, <bpt id="p3">**</bpt>프로젝트<ept id="p3">**</ept>를 선택합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>New Project<ept id="p1">**</ept> dialog, expand the <bpt id="p2">**</bpt>Visual C#<ept id="p2">**</ept> node and choose the <bpt id="p3">**</bpt>.NET Core<ept id="p3">**</ept> node, and then choose <bpt id="p4">**</bpt>Class Library (.NET Core)<ept id="p4">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>새 프로젝트<ept id="p1">**</ept> 대화 상자에서 <bpt id="p2">**</bpt>Visual C#<ept id="p2">**</ept> 노드를 확장하고 <bpt id="p3">**</bpt>.NET Core<ept id="p3">**</ept> 노드를 선택한 다음 <bpt id="p4">**</bpt>클래스 라이브러리(.NET Core)<ept id="p4">**</ept>를 선택합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Name the project "Library" and the solution "Golden".</source>
          <target state="translated">프로젝트 이름을 "Library", 솔루션 이름을 "Golden"으로 지정합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Leave <bpt id="p1">**</bpt>Create directory for solution<ept id="p1">**</ept> checked.</source>
          <target state="translated"><bpt id="p1">**</bpt>솔루션용 디렉터리 만들기<ept id="p1">**</ept> 확인란을 선택한 상태로 둡니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>OK<ept id="p1">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>확인<ept id="p1">**</ept>을 클릭합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In Solution Explorer, open the context menu for the <bpt id="p1">**</bpt>References<ept id="p1">**</ept> node and choose <bpt id="p2">**</bpt>Manage NuGet Packages<ept id="p2">**</ept>.</source>
          <target state="translated">솔루션 탐색기에서 <bpt id="p1">**</bpt>참조<ept id="p1">**</ept> 노드의 상황에 맞는 메뉴를 열고 <bpt id="p2">**</bpt>NuGet 패키지 관리<ept id="p2">**</ept>를 선택합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Choose "nuget.org" as the <bpt id="p1">**</bpt>Package source<ept id="p1">**</ept>, and choose the <bpt id="p2">**</bpt>Browse<ept id="p2">**</ept> tab.</source>
          <target state="translated"><bpt id="p1">**</bpt>패키지 소스<ept id="p1">**</ept>로 "nuget.org"를 선택하고 <bpt id="p2">**</bpt>찾아보기<ept id="p2">**</ept> 탭을 선택합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Browse for <bpt id="p1">**</bpt>Newtonsoft.Json<ept id="p1">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>Newtonsoft.Json<ept id="p1">**</ept>을 찾습니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Install<ept id="p1">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>설치<ept id="p1">**</ept>를 클릭합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Open the context menu for the <bpt id="p1">**</bpt>References<ept id="p1">**</ept> node and choose  <bpt id="p2">**</bpt>Restore packages<ept id="p2">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>참조<ept id="p1">**</ept> 노드의 상황에 맞는 메뉴를 열고 <bpt id="p2">**</bpt>패키지 복원<ept id="p2">**</ept>을 선택합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Rename the <ph id="ph1">`Class1.cs`</ph> file to <ph id="ph2">`Thing.cs`</ph>.</source>
          <target state="translated"><ph id="ph1">`Class1.cs`</ph> 파일이 이름을 <ph id="ph2">`Thing.cs`</ph>로 바꿉니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Accept the rename of the class.</source>
          <target state="translated">클래스의 이름 바꾸기를 적용합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Remove the constructor and add a method: <ph id="ph1">`public int Get(int number) =&gt; Newtonsoft.Json.JsonConvert.DeserializeObject&lt;int&gt;($"{number}");`</ph></source>
          <target state="translated">생성자를 제거하고 메서드를 추가합니다.<ph id="ph1">`public int Get(int number) =&gt; Newtonsoft.Json.JsonConvert.DeserializeObject&lt;int&gt;($"{number}");`</ph></target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>Build<ept id="p1">**</ept> menu, choose <bpt id="p2">**</bpt>Build Solution<ept id="p2">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>빌드<ept id="p1">**</ept> 메뉴에서 <bpt id="p2">**</bpt>솔루션 빌드<ept id="p2">**</ept>를 선택합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The solution should build without error.</source>
          <target state="translated">솔루션이 오류 없이 빌드됩니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Writing the test project</source>
          <target state="translated">테스트 프로젝트 작성</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In Solution Explorer, open the context menu for the <bpt id="p1">**</bpt>Solution<ept id="p1">**</ept> node and choose <bpt id="p2">**</bpt>Add<ept id="p2">**</ept>, <bpt id="p3">**</bpt>New Solution Folder<ept id="p3">**</ept>.</source>
          <target state="translated">솔루션 탐색기에서 <bpt id="p1">**</bpt>솔루션<ept id="p1">**</ept> 노드의 상황에 맞는 메뉴를 열고 <bpt id="p2">**</bpt>추가<ept id="p2">**</ept>, <bpt id="p3">**</bpt>새 솔루션 폴더<ept id="p3">**</ept>를 선택합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Name the folder "test".</source>
          <target state="translated">폴더 이름을 "test"로 지정합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This is only a solution folder, not a physical folder.</source>
          <target state="translated">이것은 실제 폴더가 아니라 솔루션 폴더일 뿐입니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Open the context menu for the <bpt id="p1">**</bpt>test<ept id="p1">**</ept> folder and choose <bpt id="p2">**</bpt>Add<ept id="p2">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>test<ept id="p1">**</ept> 폴더의 상황에 맞는 메뉴를 열고 <bpt id="p2">**</bpt>추가<ept id="p2">**</ept>를 선택합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>New Project<ept id="p1">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>새 프로젝트<ept id="p1">**</ept>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>New Project<ept id="p1">**</ept> dialog, choose <bpt id="p2">**</bpt>Console Application (.NET Core)<ept id="p2">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>새 프로젝트<ept id="p1">**</ept> 대화 상자에서 <bpt id="p2">**</bpt>콘솔 응용 프로그램(.NET Core)<ept id="p2">**</ept>을 선택합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Name it "TestLibrary" and explicitly put it under the <ph id="ph1">`Golden\test`</ph> path.</source>
          <target state="translated">이름을 "TestLibrary"로 지정하고 <ph id="ph1">`Golden\test`</ph> 경로에 명시적으로 저장합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The project needs to be a console application, not a class library.</source>
          <target state="translated">프로젝트는 클래스 라이브러리가 아니라 콘솔 응용 프로그램이어야 합니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>TestLibrary<ept id="p1">**</ept> project, open the context menu for the <bpt id="p2">**</bpt>References<ept id="p2">**</ept> node and choose <bpt id="p3">**</bpt>Add Reference<ept id="p3">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>TestLibrary<ept id="p1">**</ept> 프로젝트에서 <bpt id="p2">**</bpt>참조<ept id="p2">**</ept> 노드의 상황에 맞는 메뉴를 열고 <bpt id="p3">**</bpt>참조 추가<ept id="p3">**</ept>를 선택합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Reference Manager<ept id="p1">**</ept> dialog, check <bpt id="p2">**</bpt>Library<ept id="p2">**</ept> under the <bpt id="p3">**</bpt>Projects<ept id="p3">**</ept>, <bpt id="p4">**</bpt>Solution<ept id="p4">**</ept> node, and then click <bpt id="p5">**</bpt>OK<ept id="p5">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>참조 관리자<ept id="p1">**</ept> 대화 상자에서 <bpt id="p3">**</bpt>프로젝트<ept id="p3">**</ept> 아래에 있는 <bpt id="p2">**</bpt>라이브러리<ept id="p2">**</ept>, <bpt id="p4">**</bpt>솔루션<ept id="p4">**</ept> 노드를 선택한 후 <bpt id="p5">**</bpt>확인<ept id="p5">**</ept>을 클릭합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>TestLibrary<ept id="p1">**</ept> project, open the <ph id="ph1">`project.json`</ph> file, and replace <ph id="ph2">`"Library": "1.0.0-*"`</ph> with <ph id="ph3">`"Library": {"target": "project", "version": "1.0.0-*"}`</ph>.</source>
          <target state="translated"><bpt id="p1">**</bpt>TestLibrary<ept id="p1">**</ept> 프로젝트에서 <ph id="ph1">`project.json`</ph> 파일을 열고 <ph id="ph2">`"Library": "1.0.0-*"`</ph>을 <ph id="ph3">`"Library": {"target": "project", "version": "1.0.0-*"}`</ph>으로 바꿉니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>This is to avoid the resolution of the <ph id="ph1">`Library`</ph> project to a NuGet package with the same name.</source>
          <target state="translated">이는 <ph id="ph1">`Library`</ph> 프로젝트가 동일한 이름의 NuGet 패키지로 해석되는 것을 방지하기 위해서입니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Explicitly setting the target to "project" ensures that the tooling will first search for a project with that name, and not a package.</source>
          <target state="translated">대상을 "프로젝트"로 명시적으로 설정하면, 도구가 먼저 해당 이름의 프로젝트(패키지가 아닌)를 검색합니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>TestLibrary<ept id="p1">**</ept> project, open the context menu for the <bpt id="p2">**</bpt>References<ept id="p2">**</ept> node and choose <bpt id="p3">**</bpt>Restore Packages<ept id="p3">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>TestLibrary<ept id="p1">**</ept> 프로젝트에서 <bpt id="p2">**</bpt>참조<ept id="p2">**</ept> 노드의 상황에 맞는 메뉴를 열고 <bpt id="p3">**</bpt>패키지 복원<ept id="p3">**</ept>을 선택합니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Open the context menu for the <bpt id="p1">**</bpt>References<ept id="p1">**</ept> node and choose <bpt id="p2">**</bpt>Manage NuGet Packages<ept id="p2">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>참조<ept id="p1">**</ept> 노드의 상황에 맞는 메뉴를 열고 <bpt id="p2">**</bpt>NuGet 패키지 관리<ept id="p2">**</ept>를 선택합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Choose "nuget.org" as the <bpt id="p1">**</bpt>Package source<ept id="p1">**</ept>, and choose the <bpt id="p2">**</bpt>Browse<ept id="p2">**</ept> tab.</source>
          <target state="translated"><bpt id="p1">**</bpt>패키지 소스<ept id="p1">**</ept>로 "nuget.org"를 선택하고 <bpt id="p2">**</bpt>찾아보기<ept id="p2">**</ept> 탭을 선택합니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Check the <bpt id="p1">**</bpt>Include prerelease<ept id="p1">**</ept> checkbox, and then browse for <bpt id="p2">**</bpt>xUnit<ept id="p2">**</ept> version 2.2.0 or newer, and then click <bpt id="p3">**</bpt>Install<ept id="p3">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>시험판 포함<ept id="p1">**</ept> 확인란을 선택한 다음 <bpt id="p2">**</bpt>xUnit<ept id="p2">**</ept> 2.2.0 버전 이상을 검색하고 <bpt id="p3">**</bpt>설치<ept id="p3">**</ept>를 클릭합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Browse for <bpt id="p1">**</bpt>dotnet-test-xunit<ept id="p1">**</ept> version 2.2.0 or newer, and then click <bpt id="p2">**</bpt>Install<ept id="p2">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>dotnet-test-xunit<ept id="p1">**</ept> 버전 2.2.0 이상을 검색하고 <bpt id="p2">**</bpt>설치<ept id="p2">**</ept>를 클릭합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Edit <ph id="ph1">`project.json`</ph> and replace <ph id="ph2">`"imports": "dnxcore50"`</ph> with <ph id="ph3">`"imports": [ "dnxcore50", "portable-net45+win8" ]`</ph>.</source>
          <target state="translated"><ph id="ph1">`project.json`</ph>을 편집하고 <ph id="ph2">`"imports": "dnxcore50"`</ph>을 <ph id="ph3">`"imports": [ "dnxcore50", "portable-net45+win8" ]`</ph>로 바꿉니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>This enables the xunit libraries to be correctly restored and used by the project: those libraries have been compiled to be used with portable profiles that include "portable-net45+win8", but not .NET Core, which didn't exist when they were built.</source>
          <target state="translated">이렇게 하면 프로젝트에서 xunit 라이브러리를 올바르게 복원하고 사용합니다. 이러한 라이브러리는 "portable-net45+win8"이 포함된 이식 가능한 프로필과 함께 사용하도록 컴파일되었습니다. .NET Core는 이러한 라이브러리의 빌드 당시 존재하지 않았습니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`import`</ph> relaxes the tooling version checks at build time.</source>
          <target state="translated"><ph id="ph1">`import`</ph>는 빌드 시 도구 버전 검사 기능을 완화합니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>You may now restore packages without error.</source>
          <target state="translated">이제 오류 없이 패키지를 복원할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Edit <ph id="ph1">`project.json`</ph> to add <ph id="ph2">`"testRunner": "xunit",`</ph> after the <ph id="ph3">`"frameworks"`</ph> section.</source>
          <target state="translated"><ph id="ph1">`project.json`</ph>을 편집하여 <ph id="ph3">`"frameworks"`</ph> 섹션 뒤에 <ph id="ph2">`"testRunner": "xunit",`</ph>를 추가합니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Add a <ph id="ph1">`LibraryTests.cs`</ph> class file to the <bpt id="p1">**</bpt>TestLibrary<ept id="p1">**</ept> project, add the <ph id="ph2">`using`</ph> directives <ph id="ph3">`using Xunit;`</ph> and <ph id="ph4">`using Library;`</ph> to the top of the file, and add the following code to the class:</source>
          <target state="translated"><bpt id="p1">**</bpt>TestLibrary<ept id="p1">**</ept> 프로젝트에 <ph id="ph1">`LibraryTests.cs`</ph> 클래스 파일을 추가하고, <ph id="ph2">`using`</ph> 지시문 <ph id="ph3">`using Xunit;`</ph> 및 <ph id="ph4">`using Library;`</ph>를 파일 상단에 추가하고, 다음 코드를 클래스에 추가합니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Optionally, delete the <ph id="ph1">`Program.cs`</ph> file from the <bpt id="p1">**</bpt>TestLibrary<ept id="p1">**</ept> project, and remove <ph id="ph2">`"buildOptions": {"emitEntryPoint": true},`</ph> from <ph id="ph3">`project.json`</ph>.</source>
          <target state="translated">선택적으로, <bpt id="p1">**</bpt>TestLibrary<ept id="p1">**</ept> 프로젝트에서 <ph id="ph1">`Program.cs`</ph> 파일을 삭제하고 <ph id="ph3">`project.json`</ph>에서 <ph id="ph2">`"buildOptions": {"emitEntryPoint": true},`</ph>를 제거합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>You should now be able to build the solution.</source>
          <target state="translated">이제 솔루션을 빌드할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>Test<ept id="p1">**</ept> menu, choose <bpt id="p2">**</bpt>Windows<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Test Explorer<ept id="p3">**</ept>, and in Test Explorer choose <bpt id="p4">**</bpt>Run All<ept id="p4">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>테스트<ept id="p1">**</ept> 메뉴에서 <bpt id="p2">**</bpt>Windows<ept id="p2">**</ept>, <bpt id="p3">**</bpt>테스트 탐색기<ept id="p3">**</ept>를 선택하고, 테스트 탐색기에서 <bpt id="p4">**</bpt>모두 실행<ept id="p4">**</ept>을 선택합니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The test should pass.</source>
          <target state="translated">테스트를 전달해야 합니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Writing the console app</source>
          <target state="translated">콘솔 앱 작성</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>In Solution Explorer, open the context menu for the <ph id="ph1">`src`</ph> folder, and add a new <bpt id="p1">**</bpt>Console Application (.NET Core)<ept id="p1">**</ept> project.</source>
          <target state="translated">솔루션 탐색기에서 <ph id="ph1">`src`</ph> 폴더의 상황에 맞는 메뉴를 열고 새 <bpt id="p1">**</bpt>콘솔 응용 프로그램(.NET Core)<ept id="p1">**</ept> 프로젝트를 추가합니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Name it "App", and set the location to <ph id="ph1">`Golden\src`</ph>.</source>
          <target state="translated">이름을 "App"으로 지정하고 위치를 <ph id="ph1">`Golden\src`</ph>로 설정합니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>App<ept id="p1">**</ept> project, open the context menu for the <bpt id="p2">**</bpt>References<ept id="p2">**</ept> node and choose <bpt id="p3">**</bpt>Add<ept id="p3">**</ept>,  <bpt id="p4">**</bpt>Reference<ept id="p4">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>App<ept id="p1">**</ept> 프로젝트에서 <bpt id="p2">**</bpt>참조<ept id="p2">**</ept> 노드의 상황에 맞는 메뉴를 열고 <bpt id="p3">**</bpt>추가<ept id="p3">**</ept>, <bpt id="p4">**</bpt>참조<ept id="p4">**</ept>를 선택합니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Reference Manager<ept id="p1">**</ept> dialog, check <bpt id="p2">**</bpt>Library<ept id="p2">**</ept> under the <bpt id="p3">**</bpt>Projects<ept id="p3">**</ept>, <bpt id="p4">**</bpt>Solution<ept id="p4">**</ept> node, and then click <bpt id="p5">**</bpt>OK<ept id="p5">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>참조 관리자<ept id="p1">**</ept> 대화 상자에서 <bpt id="p3">**</bpt>프로젝트<ept id="p3">**</ept> 아래에 있는 <bpt id="p2">**</bpt>라이브러리<ept id="p2">**</ept>, <bpt id="p4">**</bpt>솔루션<ept id="p4">**</ept> 노드를 선택한 후 <bpt id="p5">**</bpt>확인<ept id="p5">**</ept>을 클릭합니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>App<ept id="p1">**</ept> project, open the <ph id="ph1">`project.json`</ph> file, and replace <ph id="ph2">`"Library": "1.0.0-*"`</ph> with <ph id="ph3">`"Library": {"target": "project"}`</ph>.</source>
          <target state="translated"><bpt id="p1">**</bpt>App<ept id="p1">**</ept> 프로젝트에서 <ph id="ph1">`project.json`</ph> 파일을 열고 <ph id="ph2">`"Library": "1.0.0-*"`</ph>을 <ph id="ph3">`"Library": {"target": "project"}`</ph>로 바꿉니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Open the context menu for the <bpt id="p1">**</bpt>References<ept id="p1">**</ept> node and choose <bpt id="p2">**</bpt>Restore Packages<ept id="p2">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>참조<ept id="p1">**</ept> 노드의 상황에 맞는 메뉴를 열고 <bpt id="p2">**</bpt>패키지 복원<ept id="p2">**</ept>을 선택합니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Open the context menu for the <bpt id="p1">**</bpt>App<ept id="p1">**</ept> node and choose <bpt id="p2">**</bpt>Set as StartUp Project<ept id="p2">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>앱<ept id="p1">**</ept> 노드의 상황에 맞는 메뉴를 열고 <bpt id="p2">**</bpt>시작 프로젝트로 설정<ept id="p2">**</ept>을 선택합니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Open the <ph id="ph1">`Program.cs`</ph> file, add a <ph id="ph2">`using Library;`</ph> directive to the top of the file, and then add <ph id="ph3">`Console.WriteLine($"The answer is {new Thing().Get(42)}");`</ph> to the <ph id="ph4">`Main`</ph> method.</source>
          <target state="translated"><ph id="ph1">`Program.cs`</ph> 파일을 열고 <ph id="ph2">`using Library;`</ph> 지시문을 파일의 상단에 추가한 다음 <ph id="ph3">`Console.WriteLine($"The answer is {new Thing().Get(42)}");`</ph>을 <ph id="ph4">`Main`</ph> 메서드에 추가합니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Set a breakpoint after the line that you just added.</source>
          <target state="translated">방금 추가한 줄 뒤에 중단점을 설정합니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Press F5 to run the application..</source>
          <target state="translated">F5 키를 눌러 응용 프로그램을 실행합니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The application should build without error, and should hit the breakpoint.</source>
          <target state="translated">응용 프로그램이 오류 없이 빌드되고 중단점에 도달합니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>You should also be able to check that the application output "The answer is 42.".</source>
          <target state="translated">또한 응용 프로그램 출력이 "The answer is 42."인지 확인할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>A mixed .NET Core library and .NET Framework application</source>
          <target state="translated">.NET Core 라이브러리 및 .NET Framework 응용 프로그램 혼합</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Starting from the solution obtained with the previous script, execute the following steps:</source>
          <target state="translated">이전 스크립트에서 얻은 솔루션부터 시작하여 다음 단계를 실행합니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>In Solution Explorer, open the <ph id="ph1">`project.json`</ph> file for the <bpt id="p1">**</bpt>Library<ept id="p1">**</ept> project and replace <ph id="ph2">`"frameworks": {
 "netstandard1.6" }`</ph> with <ph id="ph3">`"frameworks": {
 "netstandard1.4" }`</ph>.</source>
          <target state="translated">솔루션 탐색기에서 <bpt id="p1">**</bpt>라이브러리<ept id="p1">**</ept> 프로젝트에 대한 <ph id="ph1">`project.json`</ph> 파일을 열고 <ph id="ph2">`"frameworks": {
 "netstandard1.6" }`</ph>을 <ph id="ph3">`"frameworks": {
 "netstandard1.4" }`</ph>로 바꿉니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Library<ept id="p1">**</ept> project, open the context menu for the <bpt id="p2">**</bpt>References<ept id="p2">**</ept> node and choose <bpt id="p3">**</bpt>Restore Packages<ept id="p3">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>Library<ept id="p1">**</ept> 프로젝트에서 <bpt id="p2">**</bpt>참조<ept id="p2">**</ept> 노드의 상황에 맞는 메뉴를 열고 <bpt id="p3">**</bpt>패키지 복원<ept id="p3">**</ept>을 선택합니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The solution should still build and function exactly like it did before: the test should pass, and the console application should run and be debuggable.</source>
          <target state="translated">솔루션이 여전히 빌드되며 전처럼 정확히 작동합니다. 테스트가 통과되고 콘솔 응용 프로그램이 실행되며 디버깅 가능합니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Library<ept id="p1">**</ept> project, open the context menu and choose <bpt id="p2">**</bpt>Build<ept id="p2">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>Library<ept id="p1">**</ept> 프로젝트에서 상황에 맞는 메뉴를 열고 <bpt id="p2">**</bpt>빌드<ept id="p2">**</ept>를 선택합니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>In Solution Explorer, open the context menu for the <ph id="ph1">`src`</ph> folder, and choose <bpt id="p1">**</bpt>Add<ept id="p1">**</ept>.</source>
          <target state="translated">솔루션 탐색기에서 <ph id="ph1">`src`</ph> 폴더의 상황에 맞는 메뉴를 열고 <bpt id="p1">**</bpt>추가<ept id="p1">**</ept>,</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>, <bpt id="p1">**</bpt>New Project<ept id="p1">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>새 프로젝트<ept id="p1">**</ept>를 선택합니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>New Project<ept id="p1">**</ept> dialog, choose the <bpt id="p2">**</bpt>Visual C#<ept id="p2">**</ept> node, and then choose <bpt id="p3">**</bpt>Console Application<ept id="p3">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>새 프로젝트<ept id="p1">**</ept> 대화 상자에서 <bpt id="p2">**</bpt>Visual C#<ept id="p2">**</ept> 노드를 선택한 다음 <bpt id="p3">**</bpt>콘솔 응용 프로그램<ept id="p3">**</ept>을 선택합니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Make sure you choose a standard console application, not the .NET Core version.</source>
          <target state="translated">.NET Core 버전이 아니라 표준 콘솔 응용 프로그램을 선택했는지 확인합니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>In this section, you'll be consuming the library from a .NET Framework application.</source>
          <target state="translated">이 섹션에서는 .NET Framework 응용 프로그램에서 라이브러리를 사용합니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Name the project "FxApp", and set the location to <ph id="ph1">`Golden\src`</ph>.</source>
          <target state="translated">프로젝트 이름을 "FxApp"으로 지정하고 위치를 <ph id="ph1">`Golden\src`</ph>로 설정합니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>FxApp<ept id="p1">**</ept> project, open the context menu for the <bpt id="p2">**</bpt>References<ept id="p2">**</ept> node and choose <bpt id="p3">**</bpt>Add Reference<ept id="p3">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>FxApp<ept id="p1">**</ept> 프로젝트에서 <bpt id="p2">**</bpt>참조<ept id="p2">**</ept> 노드의 상황에 맞는 메뉴를 열고 <bpt id="p3">**</bpt>참조 추가<ept id="p3">**</ept>를 선택합니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Reference Manager<ept id="p1">**</ept> dialog, choose <bpt id="p2">**</bpt>Browse<ept id="p2">**</ept> and browse to the location of the built <ph id="ph1">`Library.dll`</ph> (under the ..Golden\src\Library\bin\Debug\netstandard1.4 path), and then click <bpt id="p3">**</bpt>Add<ept id="p3">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>참조 관리자<ept id="p1">**</ept> 대화 상자에서 <bpt id="p2">**</bpt>찾아보기<ept id="p2">**</ept>를 선택하고, 빌드된 <ph id="ph1">`Library.dll`</ph>의 위치(..Golden\src\Library\bin\Debug\netstandard1.4 경로 아래)로 이동한 다음 <bpt id="p3">**</bpt>추가<ept id="p3">**</ept>를 클릭합니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>You could also package the library and reference the package, as another way to reference .NET Core code from the .NET Framework.</source>
          <target state="translated">또한 라이브러리를 패키지하고, .NET Framework에서 .NET Core 코드를 참조하는 또 다른 방법으로서 패키지를 참조할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Open the context menu for the <bpt id="p1">**</bpt>References<ept id="p1">**</ept> node and choose <bpt id="p2">**</bpt>Manage NuGet Packages<ept id="p2">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>참조<ept id="p1">**</ept> 노드의 상황에 맞는 메뉴를 열고 <bpt id="p2">**</bpt>NuGet 패키지 관리<ept id="p2">**</ept>를 선택합니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Choose "nuget.org" as the <bpt id="p1">**</bpt>Package source<ept id="p1">**</ept>, and choose the <bpt id="p2">**</bpt>Browse<ept id="p2">**</ept> tab.</source>
          <target state="translated"><bpt id="p1">**</bpt>패키지 소스<ept id="p1">**</ept>로 "nuget.org"를 선택하고 <bpt id="p2">**</bpt>찾아보기<ept id="p2">**</ept> 탭을 선택합니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Check the <bpt id="p1">**</bpt>Include prerelease<ept id="p1">**</ept> checkbox, and then browse for <bpt id="p2">**</bpt>Newtonsoft.Json<ept id="p2">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>시험판 포함<ept id="p1">**</ept> 확인란을 선택한 다음 <bpt id="p2">**</bpt>Newtonsoft.Json<ept id="p2">**</ept>을 찾습니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Install<ept id="p1">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>설치<ept id="p1">**</ept>를 클릭합니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>FxApp<ept id="p1">**</ept> project, open the <ph id="ph1">`Program.cs`</ph> file and add a <ph id="ph2">`using Library;`</ph> directive to the top of the file, and add <ph id="ph3">`Console.WriteLine($"The answer is {new Thing().Get(42)}.");`</ph> to the <ph id="ph4">`Main`</ph> method of the program.</source>
          <target state="translated"><bpt id="p1">**</bpt>FxApp<ept id="p1">**</ept> 프로젝트에서 <ph id="ph1">`Program.cs`</ph> 파일을 열고, 파일 상단에 <ph id="ph2">`using Library;`</ph> 지시문을 추가하고, <ph id="ph3">`Console.WriteLine($"The answer is {new Thing().Get(42)}.");`</ph>을 프로그램의 <ph id="ph4">`Main`</ph> 메서드에 추가합니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Set a breakpoint after the line that you just added.</source>
          <target state="translated">방금 추가한 줄 뒤에 중단점을 설정합니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Make <bpt id="p1">**</bpt>FxApp<ept id="p1">**</ept> the startup application for the solution.</source>
          <target state="translated"><bpt id="p1">**</bpt>FxApp<ept id="p1">**</ept>을 솔루션의 시작 응용 프로그램으로 설정합니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Press F5 to run the app.</source>
          <target state="translated">F5 키를 눌러 앱을 실행합니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The application should build and hit the breakpoint.</source>
          <target state="translated">응용 프로그램이 빌드되고 중단점에 도달합니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The application output should be "The answer is 42.".</source>
          <target state="translated">응용 프로그램 출력이 "The answer is 42."여야 합니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>On Windows platform you can use MSTest.</source>
          <target state="translated">Windows 플랫폼에서 MSTest를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Find out more in the <bpt id="p1">[</bpt>Using MSTest on Windows document<ept id="p1">](../testing/using-mstest-on-windows.md)</ept>.</source>
          <target state="translated">자세한 내용은 <bpt id="p1">[</bpt>Using MSTest on Windows document(Windows 문서에서 MSTest 사용)<ept id="p1">](../testing/using-mstest-on-windows.md)</ept>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Moving a library from netstandard 1.4 to 1.3</source>
          <target state="translated">netstandard 1.4에서 1.3으로 라이브러리 이동</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>In Solution Explorer, open the <ph id="ph1">`project.json`</ph> file in the <bpt id="p1">**</bpt>Library<ept id="p1">**</ept> project.</source>
          <target state="translated">솔루션 탐색기의 <bpt id="p1">**</bpt>라이브러리<ept id="p1">**</ept> 프로젝트에서 <ph id="ph1">`project.json`</ph> 파일을 엽니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Replace <ph id="ph1">`frameworks": { "netstandard1.4" }`</ph> with <ph id="ph2">`frameworks": { "netstandard1.3" }`</ph>.</source>
          <target state="translated"><ph id="ph1">`frameworks": { "netstandard1.4" }`</ph>을 <ph id="ph2">`frameworks": { "netstandard1.3" }`</ph>로 바꿉니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Library<ept id="p1">**</ept> project, open the context menu for the <bpt id="p2">**</bpt>References<ept id="p2">**</ept> node and choose <bpt id="p3">**</bpt>Restore Packages<ept id="p3">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>Library<ept id="p1">**</ept> 프로젝트에서 <bpt id="p2">**</bpt>참조<ept id="p2">**</ept> 노드의 상황에 맞는 메뉴를 열고 <bpt id="p3">**</bpt>패키지 복원<ept id="p3">**</ept>을 선택합니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>Build<ept id="p1">**</ept> menu, choose <bpt id="p2">**</bpt>Build Library<ept id="p2">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>빌드<ept id="p1">**</ept> 메뉴에서 <bpt id="p2">**</bpt>라이브러리 빌드<ept id="p2">**</ept>를 선택합니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Remove the <ph id="ph1">`Library`</ph> reference from the <bpt id="p1">**</bpt>FxApp<ept id="p1">**</ept> then add it back using the ..Golden\src\Library\bin\Debug\netstandard1.3 path.</source>
          <target state="translated"><bpt id="p1">**</bpt>FxApp<ept id="p1">**</ept>에서 <ph id="ph1">`Library`</ph> 참조를 제거하고 ..Golden\src\Library\bin\Debug\netstandard1.3 경로를 사용하여 다시 추가합니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>This will now reference the 1.3 version.</source>
          <target state="translated">이제 1.3 버전을 참조합니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Press F5 to run the application.</source>
          <target state="translated">F5 키를 눌러 응용 프로그램을 실행합니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Everything should still work as it did before.</source>
          <target state="translated">모든 것이 여전히 이전처럼 작동합니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Check that the application output is "The answer is 42.", that the breakpoint was hit, and that variables can be inspected.</source>
          <target state="translated">응용 프로그램 출력이 "The answer is 42."이고, 중단점에 도달하고, 변수를 검사할 수 있는지 확인합니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>A mixed PCL library and .NET Framework application</source>
          <target state="translated">PCL 라이브러리 및 .NET Framework 응용 프로그램 혼합</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Close the previous solution if it was open: you will be starting a new script from this section on.</source>
          <target state="translated">이전 솔루션이 열려 있었다면 이를 닫습니다. 이 섹션에서 새 스크립트를 시작하게 됩니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Writing the library</source>
          <target state="translated">라이브러리 작성</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>In Visual Studio, choose <bpt id="p1">**</bpt>File<ept id="p1">**</ept>, <bpt id="p2">**</bpt>New<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Project<ept id="p3">**</ept>.</source>
          <target state="translated">Visual Studio에서 <bpt id="p1">**</bpt>파일<ept id="p1">**</ept>, <bpt id="p2">**</bpt>새로 만들기<ept id="p2">**</ept>, <bpt id="p3">**</bpt>프로젝트<ept id="p3">**</ept>를 선택합니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>New Project<ept id="p1">**</ept> dialog, expand the <bpt id="p2">**</bpt>Visual C#<ept id="p2">**</ept> node, and choose <bpt id="p3">**</bpt>Class Library (Portable for iOS, Android and Windows)<ept id="p3">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>새 프로젝트<ept id="p1">**</ept> 대화 상자에서 <bpt id="p2">**</bpt>Visual C#<ept id="p2">**</ept> 노드를 확장하고 <bpt id="p3">**</bpt>클래스 라이브러리(iOS, Android 및 Windows의 경우 이식 가능)<ept id="p3">**</ept>를 선택합니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Name the project "PCLLibrary" and the solution "GoldenPCL".</source>
          <target state="translated">프로젝트 이름을 "PCLLibrary", 솔루션 이름을 "GoldenPCL"로 지정합니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Leave <bpt id="p1">**</bpt>Create directory for solution<ept id="p1">**</ept> checked.</source>
          <target state="translated"><bpt id="p1">**</bpt>솔루션용 디렉터리 만들기<ept id="p1">**</ept> 확인란을 선택한 상태로 둡니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>OK<ept id="p1">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>확인<ept id="p1">**</ept>을 클릭합니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>In Solution Explorer, open the context menu for the <bpt id="p1">**</bpt>References<ept id="p1">**</ept> node and choose <bpt id="p2">**</bpt>Manage NuGet Packages<ept id="p2">**</ept>.</source>
          <target state="translated">솔루션 탐색기에서 <bpt id="p1">**</bpt>참조<ept id="p1">**</ept> 노드의 상황에 맞는 메뉴를 열고 <bpt id="p2">**</bpt>NuGet 패키지 관리<ept id="p2">**</ept>를 선택합니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Choose "nuget.org" as the <bpt id="p1">**</bpt>Package source<ept id="p1">**</ept>, and choose the <bpt id="p2">**</bpt>Browse<ept id="p2">**</ept> tab.</source>
          <target state="translated"><bpt id="p1">**</bpt>패키지 소스<ept id="p1">**</ept>로 "nuget.org"를 선택하고 <bpt id="p2">**</bpt>찾아보기<ept id="p2">**</ept> 탭을 선택합니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Check the <bpt id="p1">**</bpt>Include prerelease<ept id="p1">**</ept> checkbox, and then browse for <bpt id="p2">**</bpt>Newtonsoft.Json<ept id="p2">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>시험판 포함<ept id="p1">**</ept> 확인란을 선택한 다음 <bpt id="p2">**</bpt>Newtonsoft.Json<ept id="p2">**</ept>을 찾습니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Install<ept id="p1">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>설치<ept id="p1">**</ept>를 클릭합니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Rename the class "Thing" and add a method: <ph id="ph1">`public int Get(int number) =&gt; Newtonsoft.Json.JsonConvert.DeserializeObject&lt;int&gt;($"{number}");`</ph></source>
          <target state="translated">클래스 이름을 "Thing"으로 바꾸고 메서드를 추가합니다.<ph id="ph1">`public int Get(int number) =&gt; Newtonsoft.Json.JsonConvert.DeserializeObject&lt;int&gt;($"{number}");`</ph></target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>Build<ept id="p1">**</ept> menu, choose <bpt id="p2">**</bpt>Build Solution<ept id="p2">**</ept>, and verify that the solution builds.</source>
          <target state="translated"><bpt id="p1">**</bpt>빌드<ept id="p1">**</ept> 메뉴에서 <bpt id="p2">**</bpt>솔루션 빌드<ept id="p2">**</ept>를 선택하고, 솔루션이 빌드되는지 확인합니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Writing the console app</source>
          <target state="translated">콘솔 앱 작성</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>In Solution Explorer, open the context menu for the <bpt id="p1">**</bpt>Solution 'GoldenPCL'<ept id="p1">**</ept> node and choose <bpt id="p2">**</bpt>Add<ept id="p2">**</ept>.</source>
          <target state="translated">솔루션 탐색기에서 <bpt id="p1">**</bpt>솔루션 'GoldenPCL'<ept id="p1">**</ept> 노드의 상황에 맞는 메뉴를 열고 <bpt id="p2">**</bpt>추가<ept id="p2">**</ept>를 선택합니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>New Project<ept id="p1">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>새 프로젝트<ept id="p1">**</ept>.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>New Project<ept id="p1">**</ept> dialog, expand the <bpt id="p2">**</bpt>Visual C#<ept id="p2">**</ept> node, choose <bpt id="p3">**</bpt>Console Application<ept id="p3">**</ept>, and name the project "App".</source>
          <target state="translated"><bpt id="p1">**</bpt>새 프로젝트<ept id="p1">**</ept> 대화 상자에서 <bpt id="p2">**</bpt>Visual C#<ept id="p2">**</ept> 노드를 확장하고 <bpt id="p3">**</bpt>콘솔 응용 프로그램<ept id="p3">**</ept>을 선택하고 프로젝트 이름을 "App"으로 지정합니다.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>App<ept id="p1">**</ept> project, open the context menu for the <bpt id="p2">**</bpt>References<ept id="p2">**</ept> node and choose <bpt id="p3">**</bpt>Add<ept id="p3">**</ept>,  <bpt id="p4">**</bpt>Reference<ept id="p4">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>App<ept id="p1">**</ept> 프로젝트에서 <bpt id="p2">**</bpt>참조<ept id="p2">**</ept> 노드의 상황에 맞는 메뉴를 열고 <bpt id="p3">**</bpt>추가<ept id="p3">**</ept>, <bpt id="p4">**</bpt>참조<ept id="p4">**</ept>를 선택합니다.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Reference Manager<ept id="p1">**</ept> dialog, choose <bpt id="p2">**</bpt>Browse<ept id="p2">**</ept> and browse to the location of the built <ph id="ph1">`PCLLibrary.dll`</ph> (under the ..\GoldenPCL\PCLLibrary\bin\Debug path), and then click <bpt id="p3">**</bpt>Add<ept id="p3">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>참조 관리자<ept id="p1">**</ept> 대화 상자에서 <bpt id="p2">**</bpt>찾아보기<ept id="p2">**</ept>를 선택하고, 빌드된 <ph id="ph1">`PCLLibrary.dll`</ph>의 위치(..\GoldenPCL\PCLLibrary\bin\Debug 경로 아래)로 이동한 다음 <bpt id="p3">**</bpt>추가<ept id="p3">**</ept>를 클릭합니다.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>App<ept id="p1">**</ept> project, open the <ph id="ph1">`Program.cs`</ph> file and add a <ph id="ph2">`using PCLLibrary;`</ph> directive to the top of the file, and add <ph id="ph3">`Console.WriteLine($"The answer is {new Thing().Get(42)}.");`</ph> to the <ph id="ph4">`Main`</ph> method of the program.</source>
          <target state="translated"><bpt id="p1">**</bpt>App<ept id="p1">**</ept> 프로젝트에서 <ph id="ph1">`Program.cs`</ph> 파일을 열고, 파일 상단에 <ph id="ph2">`using PCLLibrary;`</ph> 지시문을 추가하고, <ph id="ph3">`Console.WriteLine($"The answer is {new Thing().Get(42)}.");`</ph>을 프로그램의 <ph id="ph4">`Main`</ph> 메서드에 추가합니다.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Set a breakpoint after the line that you just added..</source>
          <target state="translated">방금 추가한 줄 뒤에 중단점을 설정합니다.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>In Solution Explorer, open the context menu for the <bpt id="p1">**</bpt>App<ept id="p1">**</ept> node and choose <bpt id="p2">**</bpt>Set as StartUp Project<ept id="p2">**</ept>.</source>
          <target state="translated">솔루션 탐색기에서 <bpt id="p1">**</bpt>앱<ept id="p1">**</ept> 노드의 상황에 맞는 메뉴를 열고 <bpt id="p2">**</bpt>시작 프로젝트로 설정<ept id="p2">**</ept>을 선택합니다.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Press F5 to run the app.</source>
          <target state="translated">F5 키를 눌러 앱을 실행합니다.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>The application should build, run, and hit the breakpoint after it outputs "The answer is 42.".</source>
          <target state="translated">응용 프로그램이 빌드 및 실행되고 "The answer is 42." 출력 이후 중단점에 도달합니다.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Moving a PCL to a NetStandard library</source>
          <target state="translated">PCL을 NetStandard 라이브러리로 이동</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>The Portable Class Library tooling can automatically modify your PCL to target .NET Standard.</source>
          <target state="translated">이식 가능한 클래스 라이브러리 도구는 .NET 표준을 대상으로 지정하도록 PCL을 자동으로 수정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Double click on the “Properties” node to open the Project Property page</source>
          <target state="translated">"속성" 노드를 두 번 클릭하여 프로젝트 속성 페이지를 엽니다.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Under the “Targeting header” click the hyperlink “Target .NET Platform Standard”</source>
          <target state="translated">"대상 지정 헤더"에서 ".NET 플랫폼 표준을 대상으로 지정" 하이퍼링크를 클릭합니다.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Click “Yes” when asked for confirmation</source>
          <target state="translated">확인 메시지가 표시되면 "예"를 클릭합니다.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>The tooling will automatically select the version of .NET Standard that includes all of the targets originally targeted by your PCL.</source>
          <target state="translated">PCL에서 원래 대상으로 지정한 모든 대상을 포함하는 .NET 표준 버전이 자동으로 선택됩니다.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>You can target a different version of .NET Standard using the .NET Standard dropdown in the project property page.</source>
          <target state="translated">프로젝트 속성 페이지에서 .NET 표준 드롭다운을 사용하여 .NET 표준의 다른 버전을 대상으로 지정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>If you previously had a packages.config, you may be prompted to uninstall any installed packages before the conversion.</source>
          <target state="translated">전에 packages.config가 있었던 경우, 변환 전에 설치된 모든 패키지를 제거하라는 메시지가 표시될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Manually edit project.json to target .NET Standard from an existing Portable Class Library</source>
          <target state="translated">기존의 이식 가능한 클래스 라이브러리에서 .NET 표준을 대상으로 지정하도록 project.json을 수동으로 편집</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>If your project.json contains “dnxcore50” in the “supports” element, remove it.</source>
          <target state="translated">project.json의 "supports" 요소에 "dnxcore50"이 포함된 경우 이를 제거합니다.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Remove the dependency on “Microsoft.NETCore”</source>
          <target state="translated">"Microsoft.NETCore"에 대한 종속성을 제거합니다.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Modify the dependency on “Microsoft.NETCore.Portable.Compatibility” version “1.0.0” to version “1.0.1”</source>
          <target state="translated">"Microsoft.NETCore.Portable.Compatibility" 버전 "1.0.0"에 대한 종속성을 버전 "1.0.1"로 수정합니다.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Add a dependency on “NETStandard.Library” version “1.6.0”</source>
          <target state="translated">"NETStandard.Library" 버전 "1.6.0"에 대한 종속성을 추가합니다.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>From the “frameworks” element, remove the “dotnet” framework (and the “imports” element within it)</source>
          <target state="translated">"frameworks" 요소에서 "dotnet" 프레임워크(및 그 안의 "imports" 요소)를 제거합니다.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Add <ph id="ph1">` "netstandard1.x” : { } `</ph> to the frameworks element, where x is replaced with the version of .NET Standard you want to target</source>
          <target state="translated">frameworks 요소에 <ph id="ph1">` "netstandard1.x” : { } `</ph>를 추가합니다. 여기서 x는 대상으로 지정할 .NET 표준의 버전으로 교체됩니다.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Example project.json</source>
          <target state="translated">project.json 예제</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>This project.json includes supports clauses for UWP and .NET 4.6 and targets netstandard1.3:</source>
          <target state="translated">이 project.json은 UWP 및 .NET 4.6에 대한 지원 절을 포함하며, netstandard1.3을 대상으로 지정합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>