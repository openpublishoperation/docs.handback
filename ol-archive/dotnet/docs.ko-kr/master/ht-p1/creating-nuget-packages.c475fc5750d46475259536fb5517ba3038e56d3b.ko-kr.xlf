<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-6a73dd2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d863587fbfee2bf713f8566a3e5b294d49ae50e9</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\deploying\creating-nuget-packages.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p1</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7c39f0e3f60ca0f18f61039965109663a3454702</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">55bf9d88e534f923a20a04e22bf6d0c275ece669</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Creating a NuGet Package with Cross Platform Tools</source>
          <target state="translated">플랫폼 간 도구로 NuGet 패키지 만들기</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Creating a NuGet Package with Cross Platform Tools</source>
          <target state="translated">플랫폼 간 도구로 NuGet 패키지 만들기</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core, NuGet</source>
          <target state="translated">.NET, .NET Core, NuGet</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>How to Create a NuGet Package with Cross Platform Tools</source>
          <target state="translated">플랫폼 간 도구로 NuGet 패키지를 만드는 방법</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The following shows command-line samples using Unix.</source>
          <target state="translated">다음에서는 Unix를 사용하는 명령줄 샘플을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`dotnet pack`</ph> command as shown here works the same way on Windows.</source>
          <target state="translated">여기에 표시된 <ph id="ph1">`dotnet pack`</ph> 명령은 Windows에서와 동일한 방식으로 작동합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For .NET Core 1.0, libraries are expected to be distributed as NuGet packages.</source>
          <target state="translated">.NET Core 1.0의 경우 라이브러리가 NuGet 패키지로 배포되어야 합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This is in fact how all of the .NET Standard libraries are distributed and consumed.</source>
          <target state="translated">이는 실제로 모든 .NET 표준 라이브러리가 배포되고 사용되는 방법이며,</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This is most easily done with the <ph id="ph1">`dotnet pack`</ph> command.</source>
          <target state="translated"><ph id="ph1">`dotnet pack`</ph> 명령을 사용하여 가장 쉽게 수행할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Imagine that you just wrote an awesome new library that you would like to distribute over NuGet.</source>
          <target state="translated">NuGet을 통해 배포하려는 놀라운 새 라이브러리를 작성했다고 가정해 보세요.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You can create a NuGet package with cross platform tools to do exactly that!</source>
          <target state="translated">플랫폼 간 도구를 사용하여 NuGet 패키지를 만들면 이 작업을 정확하게 수행할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The following example assumes a library called <bpt id="p1">**</bpt>SuperAwesomeLibrary<ept id="p1">**</ept> which targets <ph id="ph1">`netstandard1.0`</ph>.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">`netstandard1.0`</ph>을 대상으로 하는 <bpt id="p1">**</bpt>SuperAwesomeLibrary<ept id="p1">**</ept>라는 라이브러리를 가정합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If you have transitive dependencies; that is, a project which depends on another project, you'll need to make sure to restore packages for your entire solution with the <ph id="ph1">`dotnet restore`</ph> command before creating a NuGet package.</source>
          <target state="translated">전이적 종속성 즉, 다른 프로젝트에 종속되어 있는 프로젝트가 있는 경우 NuGet 패키지를 만들기 전에 <ph id="ph1">`dotnet restore`</ph> 명령을 사용하여 전체 솔루션에 대한 패키지를 복원해야 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Failing to do so will result in the <ph id="ph1">`dotnet pack`</ph> command to not work properly.</source>
          <target state="translated">이렇게 복원하지 않으면 <ph id="ph1">`dotnet pack`</ph> 명령이 제대로 작동하지 않습니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>After ensuring packages are restored, you can navigate to the directory where a library lives:</source>
          <target state="translated">패키지가 복원되었는지 확인한 후 라이브러리가 있는 디렉터리로 이동할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Then it's just a single command from the command line:</source>
          <target state="translated">그러면 명령줄에서 단일 명령만 표시됩니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Your <ph id="ph1">`/bin/Debug`</ph> folder will now look like this:</source>
          <target state="translated">이제 <ph id="ph1">`/bin/Debug`</ph> 폴더가 다음과 같이 표시됩니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Note that this will produce a package which is capable of being debugged.</source>
          <target state="translated">그러면 디버그할 수 있는 패키지가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If you want to build a NuGet package with release binaries, all you need to do is add the <ph id="ph1">`-c`</ph><ph id="ph2">/</ph><ph id="ph3">`--configuration`</ph> switch and use <ph id="ph4">`release`</ph> as the argument.</source>
          <target state="translated">릴리스 이진 파일과 함께 NuGet 패키지를 빌드하려면 <ph id="ph1">`-c`</ph><ph id="ph2">/</ph><ph id="ph3">`--configuration`</ph> 스위치를 추가하고 <ph id="ph4">`release`</ph>를 인수로 사용하기만 하면 됩니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Your <ph id="ph1">`/bin`</ph> folder will now have a <ph id="ph2">`release`</ph> folder containing your NuGet package with release binaries:</source>
          <target state="translated">이제 <ph id="ph1">`/bin`</ph> 폴더에 릴리스 이진 파일과 함께 NuGet 패키지를 포함하는 <ph id="ph2">`release`</ph> 폴더가 있습니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>And now you have the necessary files to publish a NuGet package!</source>
          <target state="translated">또한 NuGet 패키지를 게시하는 데 필요한 파일이 있습니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Don't confuse <ph id="ph1">`dotnet pack`</ph> with <ph id="ph2">`dotnet publish`</ph></source>
          <target state="translated"><ph id="ph1">`dotnet pack`</ph>을 다음과 혼동하지 마세요.<ph id="ph2">`dotnet publish`</ph></target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>It is important to note that at no point is the <ph id="ph1">`dotnet publish`</ph> command involved.</source>
          <target state="translated">어떤 지점에서도 <ph id="ph1">`dotnet publish`</ph> 명령은 관련되지 않습니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`dotnet publish`</ph> command is for deploying applications with all of their dependencies in the same bundle -  not for generating a NuGet package to be distributed and consumed via NuGet.</source>
          <target state="translated"><ph id="ph1">`dotnet publish`</ph> 명령은 동일한 번들에 있는 모든 종속성과 함께 응용 프로그램을 배포하기 위한 것이며 NuGet을 통해 배포하고 사용할 NuGet 패키지를 생성하기 위한 것이 아닙니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>