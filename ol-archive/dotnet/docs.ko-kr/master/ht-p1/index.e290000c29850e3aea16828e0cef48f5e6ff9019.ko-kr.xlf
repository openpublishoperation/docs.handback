<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-eac019f" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8b6b38aa7f59002dcfbb229ce6522df67b611028</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\index.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p1</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">51d85d4a1a8987cad00d52188931fd6d20e3f794</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">294100657d3c5bf03489378ac2996c9e3eb58259</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>.NET Core</source>
          <target state="translated">.NET Core</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>.NET Core</source>
          <target state="translated">.NET Core</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>.NET Core</source>
          <target state="translated">.NET Core</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Check out the <bpt id="p1">[</bpt>"Getting Started" tutorials<ept id="p1">](getting-started.md)</ept> to learn how to create a simple .NET Core application.</source>
          <target state="translated">간단한 .NET Core 응용 프로그램을 만드는 방법을 알아보려면 <bpt id="p1">[</bpt>"시작" 자습서<ept id="p1">](getting-started.md)</ept>를 확인하세요.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>It only takes a few minutes to get your first app up and running.</source>
          <target state="translated">첫 번째 앱을 만들고 실행하는 데 몇 분밖에 걸리지 않습니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>.NET Core is a general purpose development platform maintained by Microsoft and the .NET community on <bpt id="p1">[</bpt>GitHub<ept id="p1">](https://github.com/dotnet/core)</ept>.</source>
          <target state="translated">.NET Core는 Microsoft 및 <bpt id="p1">[</bpt>GitHub<ept id="p1">](https://github.com/dotnet/core)</ept>의 .NET 커뮤니티에서 유지 관리하는 범용 개발 플랫폼입니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>It is cross-platform, supporting Windows, macOS and Linux, and can be used in device, cloud, and embedded/IoT scenarios.</source>
          <target state="translated">플랫폼 간으로 Windows, macOS 및 Linux를 지원하며 장치, 클라우드 및 포함/IoT 시나리오에서 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The following characteristics best define .NET Core:</source>
          <target state="translated">다음은 .NET Core를 가장 잘 정의하는 특징입니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Flexible deployment:<ept id="p1">**</ept> Can be included in your app or installed side-by-side user- or machine-wide.</source>
          <target state="translated"><bpt id="p1">**</bpt>유연한 배포:<ept id="p1">**</ept> 앱이나 설치된 side-by-side사용자 또는 시스템 수준에 포함할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Cross-platform:<ept id="p1">**</ept> Runs on Windows, macOS and Linux; can be ported to other OSes.</source>
          <target state="translated"><bpt id="p1">**</bpt>플랫폼 간:<ept id="p1">**</ept> Windows, macOS 및 Linux에서 실행되며 다른 OS에 이식할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>supported Operating Systems (OS)<ept id="p1">](https://github.com/dotnet/core/blob/master/roadmap.md)</ept>, CPUs and application scenarios will grow over time, provided by Microsoft, other companies, and individuals.</source>
          <target state="translated"><bpt id="p1">[</bpt>지원되는 OS(운영 체제)<ept id="p1">](https://github.com/dotnet/core/blob/master/roadmap.md)</ept>, CPU 및 응용 프로그램 시나리오는 시간에 따라 증가하며 Microsoft, 다른 회사 및 개인이 제공합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Command-line tools:<ept id="p1">**</ept>  All product scenarios can be exercised at the command-line.</source>
          <target state="translated"><bpt id="p1">**</bpt>명령줄 도구:<ept id="p1">**</ept> 모든 제품 시나리오를 명령줄에서 실행할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Compatible:<ept id="p1">**</ept> .NET Core is compatible with .NET Framework, Xamarin and Mono, via the <bpt id="p2">[</bpt>.NET Standard Library<ept id="p2">](../standard/library.md)</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>호환:<ept id="p1">**</ept> .NET Core는 <bpt id="p2">[</bpt>.NET 표준 라이브러리<ept id="p2">](../standard/library.md)</ept>를 통해 .NET Framework, Xamarin 및 Mono와 호환됩니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Open source:<ept id="p1">**</ept> The .NET Core platform is open source, using MIT and Apache 2 licenses.</source>
          <target state="translated"><bpt id="p1">**</bpt>오픈 소스:<ept id="p1">**</ept> .NET Core 플랫폼은 MIT 및 Apache 2 라이선스를 사용하는 오픈 소스입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Documentation is licensed under <bpt id="p1">[</bpt>CC-BY<ept id="p1">](http://creativecommons.org/licenses/by/4.0/)</ept>.</source>
          <target state="translated">설명서는 <bpt id="p1">[</bpt>CC-BY<ept id="p1">](http://creativecommons.org/licenses/by/4.0/)</ept>에 따라 사용이 허가됩니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>.NET Core is a <bpt id="p1">[</bpt>.NET Foundation<ept id="p1">](http://www.dotnetfoundation.org/)</ept> project.</source>
          <target state="translated">.NET Core는 <bpt id="p1">[</bpt>.NET Foundation<ept id="p1">](http://www.dotnetfoundation.org/)</ept> 프로젝트입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Supported by Microsoft:<ept id="p1">**</ept> .NET Core is supported by Microsoft, per <bpt id="p2">[</bpt>.NET Core Support<ept id="p2">](https://www.microsoft.com/net/core/support/)</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>Microsoft에서 지원:<ept id="p1">**</ept> .NET Core는 <bpt id="p2">[</bpt>.NET Core 지원<ept id="p2">](https://www.microsoft.com/net/core/support/)</ept>에 따라 Microsoft에서 지원됩니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Composition</source>
          <target state="translated">컴퍼지션</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>.NET Core is composed of the following parts:</source>
          <target state="translated">.NET Core는 다음과 같은 부분으로 구성됩니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>.NET runtime<ept id="p1">](https://github.com/dotnet/coreclr)</ept>, which provides a type system, assembly loading, a garbage collector, native interop and other basic services.</source>
          <target state="translated"><bpt id="p1">[</bpt>.NET 런타임<ept id="p1">](https://github.com/dotnet/coreclr)</ept> - 형식 시스템, 어셈블리 로드, 가비지 수집기, 네이티브 interop 및 기타 기본 서비스를 제공합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>A set of <bpt id="p1">[</bpt>framework libraries<ept id="p1">](https://github.com/dotnet/corefx)</ept>, which provide primitive data types, app composition types and fundamental utilities.</source>
          <target state="translated"><bpt id="p1">[</bpt>프레임워크 라이브러리<ept id="p1">](https://github.com/dotnet/corefx)</ept> 집합 - 기본 데이터 형식, 앱 구성 형식 및 기본 유틸리티를 제공합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>set of SDK tools<ept id="p1">](https://github.com/dotnet/cli)</ept> and <bpt id="p2">[</bpt>language compilers<ept id="p2">](https://github.com/dotnet/roslyn)</ept> that enable the base developer experience, available in the <bpt id="p3">[</bpt>.NET Core SDK<ept id="p3">](sdk.md)</ept>.</source>
          <target state="translated"><bpt id="p1">[</bpt>SDK 도구 집합<ept id="p1">](https://github.com/dotnet/cli)</ept> 및 <bpt id="p2">[</bpt>언어 컴파일러<ept id="p2">](https://github.com/dotnet/roslyn)</ept> - <bpt id="p3">[</bpt>.NET Core SDK<ept id="p3">](sdk.md)</ept>에서 사용할 수 있는 기본 개발자 환경을 사용할 수 있도록 합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The 'dotnet' app host, which is used to launch .NET Core apps.</source>
          <target state="translated">'dotnet' 앱 호스트 - .NET Core 앱을 시작하는 데 사용됩니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>It selects the runtime and hosts the runtime, provides an assembly loading policy and launches the app.</source>
          <target state="translated">이 호스트는 런타임을 선택하고 런타임을 호스트하며 어셈블리 로드 정책을 제공하고 앱을 시작합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The same host is also used to launch SDK tools in much the same way.</source>
          <target state="translated">동일한 호스트를 사용하여 거의 동일한 방식으로 SDK 도구를 시작할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Languages</source>
          <target state="translated">언어</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The C# and F# languages (Visual Basic is coming) can be used to write applications and libraries for .NET Core.</source>
          <target state="translated">C# 및 F# 언어(Visual Basic은 곧 제공 예정)를 사용하여 .NET Core에 대한 응용 프로그램 및 라이브러리를 작성할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The compilers run on .NET Core, enabling you to develop for .NET Core anywhere it runs.</source>
          <target state="translated">컴파일러는 .NET Core에서 실행되며, 실행되는 모든 위치에서 .NET Core를 개발할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In general, you will not use the compilers directly, but indirectly using the SDK tools.</source>
          <target state="translated">일반적으로 컴파일러는 직접 사용하지 않고 SDK 도구를 통해 간접적으로 사용합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The C# and F# compilers and the .NET Core tools are or can be integrated into several text editors and IDEs, including Visual Studio, <bpt id="p1">[</bpt>Visual Studio Code<ept id="p1">](https://marketplace.visualstudio.com/items?itemName=ms-vscode.csharp)</ept>, Sublime Text and Vim, making .NET Core development an option in your favorite coding environment and OS.</source>
          <target state="translated">C# 및 F# 컴파일러와 .NET Core 도구는 Visual Studio, <bpt id="p1">[</bpt>Visual Studio Code<ept id="p1">](https://marketplace.visualstudio.com/items?itemName=ms-vscode.csharp)</ept>, Sublime Text 및 Vim을 포함한 여러 텍스트 편집기 및 IDE에 통합되어 즐겨찾는 코딩 환경 및 OS에서 .NET Core 개발을 옵션으로 만들 수 있습니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This integration is provided, in part, by the good folks of the <bpt id="p1">[</bpt>OmniSharp project<ept id="p1">](http://www.omnisharp.net/)</ept>.</source>
          <target state="translated">이 통합은 <bpt id="p1">[</bpt>OmniSharp 프로젝트<ept id="p1">](http://www.omnisharp.net/)</ept>의 적합한 담당자에 의해 부분적으로 제공됩니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>.NET APIs and Compatibility</source>
          <target state="translated">.NET API 및 호환성</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>.NET Core can be thought of as a cross-platform version of the .NET Framework, at the layer of the .NET Framework Base Class Libraries (BCL).</source>
          <target state="translated">.NET Core는 .NET Framework BCL(기본 클래스 라이브러리) 계층에서 .NET Framework의 플랫폼 간 버전이라고 할 수 있으며,</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>It implements the <bpt id="p1">[</bpt>.NET Standard Library<ept id="p1">](../standard/library.md)</ept> specification.</source>
          <target state="translated"><bpt id="p1">[</bpt>.NET 표준 라이브러리<ept id="p1">](../standard/library.md)</ept> 사양을 구현합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>.NET Core provides a subset of the APIs that are available in the .NET Framework or Mono/Xamarin.</source>
          <target state="translated">.NET Core는 .NET Framework 또는 Mono/Xamarin에서 사용할 수 있는 API의 하위 집합을 제공합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>In some cases, types are not fully implemented (some members are not available or have been moved).</source>
          <target state="translated">경우에 따라 형식이 완전히 구현되지 않으며, 일부 멤버는 사용할 수 없거나 이동되었습니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Look at the <bpt id="p1">[</bpt>.NET Core roadmap<ept id="p1">](https://github.com/dotnet/core/blob/master/roadmap.md)</ept> to learn more about the .NET Core API roadmap.</source>
          <target state="translated">.NET Core API 로드맵에 대한 자세한 내용은 <bpt id="p1">[</bpt>.NET Core roadmap(.NET Core 로드맵)<ept id="p1">](https://github.com/dotnet/core/blob/master/roadmap.md)</ept>을 참조하세요.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Relationship to the .NET Standard Library</source>
          <target state="translated">.NET 표준 라이브러리와의 관계</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>.NET Standard Library<ept id="p1">](../standard/library.md)</ept> is an API spec that describes the consistent set of .NET APIs that developers can expect in each .NET implementation.</source>
          <target state="translated"><bpt id="p1">[</bpt>.NET 표준 라이브러리<ept id="p1">](../standard/library.md)</ept>는 개발자가 각 .NET 구현에서 예상할 수 있는 일관된 .NET API 집합을 설명하는 API 사양입니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>.NET implementations need to implement this spec in order to be considered .NET Standard Library compliant and to support libraries that target the .NET Standard Library.</source>
          <target state="translated">.NET 표준 라이브러리를 규격으로 간주하고 .NET 표준 라이브러리를 대상으로 하는 라이브러리를 지원하려면 .NET 구현에서 이 사양을 구현해야 합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>.NET Core implements the .NET Standard Library, and therefore supports .NET Standard Libraries.</source>
          <target state="translated">.NET Core는 .NET 표준 라이브러리를 구현하므로 .NET 표준 라이브러리를 지원합니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Workloads</source>
          <target state="translated">작업</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>By itself, .NET Core includes a single application model -- console apps -- which is useful for tools, local services and text-based games.</source>
          <target state="translated">.NET Core는 자체적으로 도구, 로컬 서비스 및 텍스트 기반 게임에 유용한 단일 응용 프로그램 모델 즉, 콘솔 앱을 포함합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Additional application models have been built on top of .NET Core to extend its functionality, such as:</source>
          <target state="translated">기능을 확장하기 위해 다음과 같은 추가 응용 프로그램 모델이 .NET Core를 기반으로 구축되었습니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ASP.NET Core<ept id="p1">](http://asp.net)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>ASP.NET Core<ept id="p1">](http://asp.net)</ept></target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Windows 10 Universal Windows Platform (UWP)<ept id="p1">](https://developer.microsoft.com/windows)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Windows 10 UWP(유니버설 Windows 플랫폼)<ept id="p1">](https://developer.microsoft.com/windows)</ept></target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Xamarin.Forms<ept id="p1">](https://www.xamarin.com/forms)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Xamarin.Forms<ept id="p1">](https://www.xamarin.com/forms)</ept></target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Open Source</source>
          <target state="translated">오픈 소스</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>.NET Core<ept id="p1">](https://github.com/dotnet/core)</ept> is open source (MIT license) and was contributed to the <bpt id="p2">[</bpt>.NET Foundation<ept id="p2">](http://dotnetfoundation.org)</ept> by Microsoft in 2014.</source>
          <target state="translated"><bpt id="p1">[</bpt>.NET Core<ept id="p1">](https://github.com/dotnet/core)</ept>는 오픈 소스(MIT 라이선스)이며 2014년 Microsoft에 의해 <bpt id="p2">[</bpt>.NET Foundation<ept id="p2">](http://dotnetfoundation.org)</ept>에 제공되었습니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>It is now one of the most active .NET Foundation projects.</source>
          <target state="translated">이제 가장 많이 사용되는 .NET Foundation 프로젝트 중의 하나입니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>It can be freely adopted by individuals and companies, including for personal, academic or commercial purposes.</source>
          <target state="translated">이 프로젝트는 개인, 교육 또는 상업용으로 개인 및 회사에서 자유롭게 채택할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Multiple companies use .NET Core as part of apps, tools, new platforms and hosting services.</source>
          <target state="translated">여러 회사에서 앱, 도구, 새 플랫폼 및 호스팅 서비스의 일부로 .NET Core를 사용합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Some of these companies make significant contributions to .NET Core on GitHub and provide guidance on the product direction as part of the <bpt id="p1">[</bpt>.NET Foundation Technical Steering Group<ept id="p1">](http://www.dotnetfoundation.org/blog/tsg-welcome)</ept>.</source>
          <target state="translated">이러한 회사 중 일부는 GitHub에서 .NET Core에 대한 중요한 정보를 제공하고 <bpt id="p1">[</bpt>.NET Foundation Technical Steering Group(.NET Foundation 기술 방향 설정 그룹)<ept id="p1">](http://www.dotnetfoundation.org/blog/tsg-welcome)</ept>의 일부로 제품 판매에 대한 지침을 제공합니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Acquisition</source>
          <target state="translated">취득</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>.NET Core is distributed in two main ways, as packages on NuGet.org and as standalone distributions.</source>
          <target state="translated">.NET Core는 NuGet.org의 패키지 및 독립 실행형 배포라는 두 가지 주요 방식으로 배포됩니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Distributions</source>
          <target state="translated">분포</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>You can download .NET Core at the <bpt id="p1">[</bpt>.NET Core Getting Started<ept id="p1">](https://www.microsoft.com/net/core)</ept> page.</source>
          <target state="translated">.NET Core는 <bpt id="p1">[</bpt>.NET Core Getting Started(.NET Core 시작)<ept id="p1">](https://www.microsoft.com/net/core)</ept> 페이지에서 다운로드할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>Microsoft .NET Core<ept id="p1">*</ept> distribution includes the CoreCLR runtime, associated libraries, a console application host and the <ph id="ph1">`dotnet`</ph> app launcher.</source>
          <target state="translated"><bpt id="p1">*</bpt>Microsoft .NET Core<ept id="p1">*</ept> 배포에는 CoreCLR 런타임, 관련 라이브러리, 콘솔 응용 프로그램 호스트 및 <ph id="ph1">`dotnet`</ph> 앱 시작 관리자가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>It is described by the <bpt id="p1">[</bpt><ph id="ph1">`Microsoft.NETCore.App`</ph><ept id="p1">](https://www.nuget.org/packages/Microsoft.NETCore.App)</ept> metapackage.</source>
          <target state="translated">이 배포는 <bpt id="p1">[</bpt><ph id="ph1">`Microsoft.NETCore.App`</ph><ept id="p1">](https://www.nuget.org/packages/Microsoft.NETCore.App)</ept> 메타패키지에서 설명합니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>Microsoft .NET Core SDK<ept id="p1">*</ept> distribution includes .NET Core and a set of tools for restoring NuGet packages and compiling and building apps.</source>
          <target state="translated"><bpt id="p1">*</bpt>Microsoft .NET Core SDK<ept id="p1">*</ept> 배포에는 .NET Core와 NuGet 패키지를 복원하고 앱을 컴파일 및 빌드하는 도구 집합이 포함됩니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Typically, you will first install the .NET Core SDK to get started with .NET Core development.</source>
          <target state="translated">일반적으로 .NET Core 개발을 시작하려면 먼저 .NET Core SDK를 설치합니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>You may choose to install additional .NET Core (perhaps pre-release) builds.</source>
          <target state="translated">추가 .NET Core(아마도 시험판) 빌드를 설치할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Packages</source>
          <target state="translated">패키지</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>.NET Core Packages<ept id="p1">](packages.md)</ept> contain the .NET Core runtime and libraries (reference assemblies and implementations).</source>
          <target state="translated"><bpt id="p1">[</bpt>.NET Core 패키지<ept id="p1">](packages.md)</ept>에는 .NET Core 런타임 및 라이브러리(참조 어셈블리 및 구현)이 포함됩니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>For example, <bpt id="p1">[</bpt>System.Net.Http<ept id="p1">](https://www.nuget.org/packages/System.Net.Http/)</ept>.</source>
          <target state="translated">예를 들어 <bpt id="p1">[</bpt>System.Net.Http<ept id="p1">](https://www.nuget.org/packages/System.Net.Http/)</ept>가 있습니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>.NET Core Metapackages<ept id="p1">](packages.md)</ept> describe various layers and app-models by referencing the appropriate set of versioned library packages.</source>
          <target state="translated"><bpt id="p1">[</bpt>.NET Core 메타패키지<ept id="p1">](packages.md)</ept>에서는 버전이 있는 적합한 라이브러리 패키지 집합을 참조하여 다양한 계층 및 앱 모델에 대해 설명합니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Architecture</source>
          <target state="translated">아키텍처</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>.NET Core is a cross-platform .NET implementation.</source>
          <target state="translated">.NET Core는 플랫폼 간 .NET 구현입니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The primary architectural concerns unique to .NET Core are related to providing platform-specific implementations for supported platforms.</source>
          <target state="translated">.NET Core의 고유한 기본 아키텍처 문제는 .Net Core에서 지원되는 플랫폼에 플랫폼별 구현을 제공하는 것과 관련이 있습니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Environments</source>
          <target state="translated">환경</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>.NET Core is supported by Microsoft on Windows, macOS and Linux.</source>
          <target state="translated">.NET Core는 Microsoft에 의해 Windows, macOS 및 Linux에서 지원됩니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>On Linux, Microsoft primarily supports .NET Core running on Red Hat Enterprise Linux (RHEL) and Debian distribution families.</source>
          <target state="translated">Linux의 경우 Microsoft는 주로 RHEL(Red Hat Enterprise Linux) 및 Debian 배포 제품군에서 .NET Core 실행을 지원합니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>.NET Core currently supports X64 CPUs.</source>
          <target state="translated">.NET Core는 현재 X64 CPU를 지원합니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>On Windows, X86 is also supported.</source>
          <target state="translated">Windows에서는 X86도 지원됩니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>ARM64 and ARM32 are in progress.</source>
          <target state="translated">ARM64 및 ARM32는 진행 중입니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>.NET Core Roadmap<ept id="p1">](https://github.com/dotnet/core/blob/master/roadmap.md)</ept> provides more detailed information on workload and OS and CPU environment support and plans.</source>
          <target state="translated"><bpt id="p1">[</bpt>.NET Core Roadmap(.NET Core 로드맵)<ept id="p1">](https://github.com/dotnet/core/blob/master/roadmap.md)</ept>에서는 워크로드 및 OS와 CPU 환경 지원 및 계획에 대한 자세한 정보를 제공합니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Other companies or groups may support .NET Core for other app types and environment.</source>
          <target state="translated">다른 회사 또는 그룹에서 다른 앱 형식 및 환경의 .NET Core를 지원할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Designed for Adaptability</source>
          <target state="translated">뛰어난 적응성</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>.NET Core has been built as a very similar but unique product relative to other .NET products.</source>
          <target state="translated">.NET Core는 다른 .NET 제품에 비해 매우 유사하지만 고유한 제품으로 구축되었습니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>It has been designed to enable broad adaptability to new platforms, for new workloads and with new compiler toolchains.</source>
          <target state="translated">.NET Core는 새 플랫폼, 새 워크로드 및 새로운 컴파일러 도구 체인에서 광범위하게 적응되도록 설계되었습니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>It has several OS and CPU ports in progress and may be ported to many more.</source>
          <target state="translated">여러 개의 OS 및 CPU 포트가 진행 중이며 훨씬 더 많은 포트로 이식할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>An example is the <bpt id="p1">[</bpt>LLILC<ept id="p1">](https://github.com/dotnet/llilc)</ept> project, which is an early prototype of native compilation for .NET Core via the <bpt id="p2">[</bpt>LLVM<ept id="p2">](http://llvm.org/)</ept> compiler.</source>
          <target state="translated">예를 들어 <bpt id="p2">[</bpt>LLVM<ept id="p2">](http://llvm.org/)</ept> 컴파일러를 통한 .NET Core 네이티브 컴파일의 초기 프로토타입인 <bpt id="p1">[</bpt>LLILC<ept id="p1">](https://github.com/dotnet/llilc)</ept> 프로젝트가 있습니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The product is broken into several pieces, enabling the various parts to be adapted to new platforms on different schedules.</source>
          <target state="translated">제품은 여러 조각으로 구분되어 다양한 부품을 서로 다른 일정으로 새 플랫폼에 적용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The runtime and platform-specific foundational libraries must be ported as a unit.</source>
          <target state="translated">런타임 및 플랫폼별 기본 라이브러리는 하나의 단위로 이식해야 합니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Platform-agnostic libraries should work as-is on all platforms, by construction.</source>
          <target state="translated">플랫폼 제약 없는 라이브러리는 구성에 따라 모든 플랫폼에서 있는 그대로 작동합니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>There is a project bias to reducing platform-specific implementations to increase developer efficiency, preferring platform-neutral C# code whenever an algorithm or API can be implemented in-full or in-part that way.</source>
          <target state="translated">플랫폼별 구현을 줄여 개발자 효율성을 향상시키거나, 알고리즘이나 API를 전체 또는 일부로 구현할 수 있을 때마다 플랫폼 중립적인 C# 코드를 선호한다는 등 프로젝트에 대한 편견이 있습니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>People commonly ask how .NET Core is implemented in order to support multiple operating systems.</source>
          <target state="translated">일반적으로 사용자는 여러 운영 체제를 지원하기 위해 .NET Core를 구현하는 방법을 질문합니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>They typically ask if there are separate implementations or if <bpt id="p1">[</bpt>conditional compilation<ept id="p1">](https://en.wikipedia.org/wiki/Conditional_compilation)</ept> is used.</source>
          <target state="translated">또한 별도의 구현이 있는지 또는 <bpt id="p1">[</bpt>조건부 컴파일<ept id="p1">](https://en.wikipedia.org/wiki/Conditional_compilation)</ept>이 사용되는지에 대해서도 질문합니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>It's both, with a strong bias towards conditional compilation.</source>
          <target state="translated">둘 다 조건부 컴파일에 대한 강력한 편견이 있습니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>You can see in the chart below that the vast majority of <bpt id="p1">[</bpt>CoreFX<ept id="p1">](https://github.com/dotnet/corefx)</ept> is platform-neutral code that is shared across all platforms.</source>
          <target state="translated">대부분의 <bpt id="p1">[</bpt>CoreFX<ept id="p1">](https://github.com/dotnet/corefx)</ept>가 모든 플랫폼에서 공유되는 플랫폼 중립 코드임을 다음 차트에서 확인할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Platform-neutral code can be implemented as a single portable assembly that be used on all platforms.</source>
          <target state="translated">플랫폼 중립 코드는 모든 플랫폼에서 사용할 수 있는 이식 가능한 단일 어셈블리로 구현할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>CoreFX: Lines of Code per Platform</source>
          <target state="translated">CoreFX: 플랫폼별 코드 줄</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Windows and Unix implementations are similar in size.</source>
          <target state="translated">Windows 및 Unix 구현은 크기가 비슷합니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Windows has a larger implementation since CoreFX implements some Windows-only features, such as <bpt id="p1">[</bpt>Microsoft.Win32.Registry<ept id="p1">](https://github.com/dotnet/corefx/tree/master/src/Microsoft.Win32.Registry)</ept> but does not yet implement any Unix-only concepts.</source>
          <target state="translated">CoreFX는 <bpt id="p1">[</bpt>Microsoft.Win32.Registry<ept id="p1">](https://github.com/dotnet/corefx/tree/master/src/Microsoft.Win32.Registry)</ept>와 같은 일부 Windows 전용 기능을 구현하고 Unix 전용 개념은 구현하지 않기 때문에 Windows 구현이 더 큽니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>You will also see that the majority of the Linux and macOS implementations are shared across a Unix implementation, while the Linux- and macOS-specific implementations are roughly similar in size.</source>
          <target state="translated">또한 대부분의 Linux 및 macOS 구현이 Unix 구현에서 공유되는데 Linux 및 macOS 관련 구현의 크기가 거의 비슷함을 확인할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>There are a mix of platform-specific and platform-neutral libraries in .NET Core.</source>
          <target state="translated">.NET Core에는 플랫폼별 라이브러리와 플랫폼 중립 라이브러리가 혼합되어 있습니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>You can see the pattern in a few examples:</source>
          <target state="translated">몇 가지 예제에서 패턴을 확인할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CoreCLR<ept id="p1">](https://github.com/dotnet/coreclr)</ept> is platform-specific.</source>
          <target state="translated"><bpt id="p1">[</bpt>CoreCLR<ept id="p1">](https://github.com/dotnet/coreclr)</ept>는 플랫폼별이며,</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>It's built in C/C++, so is platform-specific by construction.</source>
          <target state="translated">C/C++에서 빌드되어 플랫폼별로 구성됩니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.IO<ept id="p1">](https://github.com/dotnet/corefx/tree/master/src/System.IO)</ept> and <bpt id="p2">[</bpt>System.Security.Cryptography.Algorithms<ept id="p2">](https://github.com/dotnet/corefx/tree/master/src/System.Security.Cryptography.Algorithms)</ept> are platform-specific, given that the storage and cryptography APIs differ significantly on each OS.</source>
          <target state="translated"><bpt id="p1">[</bpt>System.IO<ept id="p1">](https://github.com/dotnet/corefx/tree/master/src/System.IO)</ept> 및 <bpt id="p2">[</bpt>System.Security.Cryptography.Algorithms<ept id="p2">](https://github.com/dotnet/corefx/tree/master/src/System.Security.Cryptography.Algorithms)</ept>는 저장소 및 암호화 API가 각 OS에서 현저하게 다르기 때문에 플랫폼별입니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.Collections<ept id="p1">](https://github.com/dotnet/corefx/tree/master/src/System.Collections)</ept> and <bpt id="p2">[</bpt>System.Linq<ept id="p2">](https://github.com/dotnet/corefx/tree/master/src/System.Linq)</ept> are platform-neutral, given that they create and operate over data structures.</source>
          <target state="translated"><bpt id="p1">[</bpt>System.Collections<ept id="p1">](https://github.com/dotnet/corefx/tree/master/src/System.Collections)</ept> 및 <bpt id="p2">[</bpt>System.Linq<ept id="p2">](https://github.com/dotnet/corefx/tree/master/src/System.Linq)</ept>는 데이터 구조를 통해 만들고 작동하기 때문에 플랫폼 중립입니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Comparisons to other .NET Platforms</source>
          <target state="translated">다른 .NET 플랫폼과 비교</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>It is perhaps easiest to understand the size and shape of .NET Core by comparing it to existing .NET platforms.</source>
          <target state="translated">기존 .NET 플랫폼과 비교하여 .NET Core의 크기 및 모양을 이해하는 것이 가장 쉽습니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Comparison with .NET Framework</source>
          <target state="translated">.NET Framework와 비교</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The .NET platform was first announced by Microsoft in 2000 and then evolved from there.</source>
          <target state="translated">.NET 플랫폼은 Microsoft가 2000년에 처음 발표한 후 발전해 왔습니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The .NET Framework has been the primary .NET product produced by Microsoft during that 15+ year span.</source>
          <target state="translated">.NET Framework는 Microsoft가 15년 이상 동안 생성한 기본 .NET 제품이었습니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The major differences between .NET Core and the .NET Framework:</source>
          <target state="translated">.NET Core와 .NET Framework 간의 주요 차이점은 다음과 같습니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>App-models<ept id="p1">**</ept> -- .NET Core does not support all the .NET Framework app-models, in part because many of them are built on Windows technologies, such as WPF (built on top of DirectX).</source>
          <target state="translated"><bpt id="p1">**</bpt>앱 모델<ept id="p1">**</ept> -- 많은 .NET Framework 앱 모델이 WPF(DirectX를 기반으로 구축됨)와 같은 Windows 기술을 기반으로 구축되었기 때문에 .NET Core는 이러한 앱 모델을 모두 지원하지는 않습니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The console and ASP.NET Core app-models are supported by both .NET Core and .NET Framework.</source>
          <target state="translated">콘솔 및 ASP.NET Core 앱 모델은 .NET Core와 .NET Framework 둘 다에서 지원됩니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>APIs<ept id="p1">**</ept> -- .NET Core contains many of the same, but fewer, APIs as the .NET Framework, and with a different factoring (assembly names are different; type shape differs in key cases).</source>
          <target state="translated"><bpt id="p1">**</bpt>API<ept id="p1">**</ept> -- .NET Core는 .NET Framework와 대부분 동일하지만 더 적은 API를 포함하며 다른 팩터링(어셈블리 이름이 다르고 형식 모양이 주요 사례에서 다름)을 사용합니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>These differences currently typically require changes to port source to .NET Core.</source>
          <target state="translated">일반적으로 이러한 차이로 인해 현재 포트 소스를 .NET Core로 변경해야 합니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>.NET Core implements the <bpt id="p1">[</bpt>.NET Standard Library<ept id="p1">](../standard/library.md)</ept> API, which will grow to include more of the .NET Framework BCL API over time.</source>
          <target state="translated">.NET Core는 시간에 따라 더 많은 .NET Framework BCL API를 포함하도록 확장되는 <bpt id="p1">[</bpt>.NET 표준 라이브러리<ept id="p1">](../standard/library.md)</ept> API를 구현합니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Subsystems<ept id="p1">**</ept> -- .NET Core implements a subset of the subsystems in the .NET Framework, with the goal of a simpler implementation and programming model.</source>
          <target state="translated"><bpt id="p1">**</bpt>하위 시스템<ept id="p1">**</ept> -- .Net Core는 더 간단한 구현 및 프로그래밍 모델 구축을 위해 .NET Framework에 하위 시스템의 하위 집합을 구현합니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>For example, Code Access Security (CAS) is not supported, while reflection is supported.</source>
          <target state="translated">예를 들어 CAS(코드 액세스 보안)는 지원되지 않지만 리플렉션은 지원됩니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Platforms<ept id="p1">**</ept> -- The .NET Framework supports Windows and Windows Server while .NET Core also supports macOS and Linux.</source>
          <target state="translated"><bpt id="p1">**</bpt>플랫폼<ept id="p1">**</ept> -- .NET Framework는 Windows와 Windows Server를 지원하는 반면 .NET Core는 macOS 및 Linux도 지원합니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Open Source<ept id="p1">**</ept> -- .NET Core is open source, while a <bpt id="p2">[</bpt>read-only subset of the .NET Framework<ept id="p2">](https://github.com/microsoft/referencesource)</ept> is open source.</source>
          <target state="translated"><bpt id="p1">**</bpt>오픈 소스<ept id="p1">**</ept> -- .NET Core는 오픈 소스이며, <bpt id="p2">[</bpt>.NET Framework의 읽기 전용 하위 집합<ept id="p2">](https://github.com/microsoft/referencesource)</ept>은 오픈 소스입니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>While .NET Core is unique and has significant differences to the .NET Framework and other .NET platforms, it is straightforward to share code, using either source or binary sharing techniques.</source>
          <target state="translated">.NET Core는 고유하고 .NET Framework 및 기타 .NET 플랫폼과 현저한 차이가 있지만 소스 또는 이진 공유 기술을 사용하여 간단하게 코드를 공유할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Comparison with Mono</source>
          <target state="translated">Mono와 비교</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Mono<ept id="p1">](http://www.mono-project.com/)</ept> is the original cross-platform and <bpt id="p2">[</bpt>open source<ept id="p2">](https://github.com/mono/mono)</ept> .NET implementation, first shipping in 2004.</source>
          <target state="translated"><bpt id="p1">[</bpt>Mono<ept id="p1">](http://www.mono-project.com/)</ept>는 원래 플랫폼 간 <bpt id="p2">[</bpt>오픈 소스<ept id="p2">](https://github.com/mono/mono)</ept> .NET 구현으로, 2004년에 처음 제공되었습니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>It can be thought of as a community clone of the .NET Framework.</source>
          <target state="translated">.NET Framework의 커뮤니티 복제본으로 생각할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The Mono project team relied on the open <bpt id="p1">[</bpt>.NET standards<ept id="p1">](https://github.com/dotnet/coreclr/blob/master/Documentation/project-docs/dotnet-standards.md)</ept> (notably ECMA 335) published by Microsoft in order to provide a compatible implementation.</source>
          <target state="translated">Mono 프로젝트 팀은 호환되는 구현을 제공하기 위해 Microsoft에서 게시한 오픈 <bpt id="p1">[</bpt>.NET 표준<ept id="p1">](https://github.com/dotnet/coreclr/blob/master/Documentation/project-docs/dotnet-standards.md)</ept>(특히 ECMA 335)을 사용했습니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The major differences between .NET Core and Mono:</source>
          <target state="translated">.NET Core와 Mono 간의 주요 차이점은 다음과 같습니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>App-models<ept id="p1">**</ept> -- Mono supports a subset of the .NET Framework app-models (for example, Windows Forms) and some additional ones (for example, <bpt id="p2">[</bpt>Xamarin.iOS<ept id="p2">](https://www.xamarin.com/platform)</ept>) through the Xamarin product.</source>
          <target state="translated"><bpt id="p1">**</bpt>앱 모델<ept id="p1">**</ept> -- Mono는 Xamarin 제품을 통해 .NET Framework 앱 모델의 하위 집합(예: Windows Forms) 및 몇 가지 추가 모델(예: <bpt id="p2">[</bpt>Xamarin.iOS<ept id="p2">](https://www.xamarin.com/platform)</ept>)을 지원합니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>.NET Core doesn't support these.</source>
          <target state="translated">.NET Core는 이러한 모델을 지원하지 않습니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>APIs<ept id="p1">**</ept> -- Mono supports a <bpt id="p2">[</bpt>large subset<ept id="p2">](http://docs.go-mono.com/?link=root%3a%2fclasslib)</ept> of the .NET Framework APIs, using the same assembly names and factoring.</source>
          <target state="translated"><bpt id="p1">**</bpt>API<ept id="p1">**</ept> -- Mono는 .NET Framework API의 <bpt id="p2">[</bpt>큰 하위 집합<ept id="p2">](http://docs.go-mono.com/?link=root%3a%2fclasslib)</ept>을 지원하며, 동일한 어셈블리 이름 및 팩터링을 사용합니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Platforms<ept id="p1">**</ept> -- Mono supports many platforms and CPUs.</source>
          <target state="translated"><bpt id="p1">**</bpt>플랫폼<ept id="p1">**</ept> -- Mono는 여러 플랫폼 및 CPU를 지원합니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Open Source<ept id="p1">**</ept> -- Mono and .NET Core both use the MIT license and are .NET Foundation projects.</source>
          <target state="translated"><bpt id="p1">**</bpt>오픈 소스<ept id="p1">**</ept> -- Mono와 .NET Core 둘 다 MIT 라이선스를 사용하며 .NET Foundation 프로젝트입니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Focus<ept id="p1">**</ept> -- The primary focus of Mono in recent years is mobile platforms, while .NET Core is focused on cloud workloads.</source>
          <target state="translated"><bpt id="p1">**</bpt>포커스<ept id="p1">**</ept> -- 최근 몇 년 간 Mono의 주요 포커스는 모바일 플랫폼인 반면 .NET Core의 포커스는 클라우드 워크로드입니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>