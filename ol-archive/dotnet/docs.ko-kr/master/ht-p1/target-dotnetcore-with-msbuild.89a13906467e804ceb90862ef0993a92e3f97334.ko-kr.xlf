<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-6a73dd2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ee8f409bf11f4b4a7136b886114616b233bc2cc0</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\tutorials\target-dotnetcore-with-msbuild.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p1</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9d67f3601a3cb1048712a906cf656953435abf39</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4219aeba7216961b2c0c12621776717a05eca656</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Using MSBuild to build .NET Core projects</source>
          <target state="translated">MSBuild를 사용하여 .NET Core 프로젝트 빌드</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Using MSBuild to build .NET Core projects</source>
          <target state="translated">MSBuild를 사용하여 .NET Core 프로젝트 빌드</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Using MSBuild to build .NET Core projects</source>
          <target state="translated">MSBuild를 사용하여 .NET Core 프로젝트 빌드</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The .NET Core tooling is going to <bpt id="p1">[</bpt>move from project.json to MSBuild based projects<ept id="p1">](https://blogs.msdn.microsoft.com/dotnet/2016/05/23/changes-to-project-json/)</ept>.</source>
          <target state="translated">.NET Core 도구는 <bpt id="p1">[</bpt>project.json에서 MSBuild 기반 프로젝트로 이동<ept id="p1">](https://blogs.msdn.microsoft.com/dotnet/2016/05/23/changes-to-project-json/)</ept>하고 있습니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>We expect the first version of the .NET Core tools that use MSBuild to ship along with the next version of Visual Studio.</source>
          <target state="translated">MSBuild를 사용하는 .NET Core 도구의 첫 번째 버전이 Visual Studio의 다음 버전과 함께 출시될 것으로 예상합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>However, it is possible to use MSBuild for .NET Core projects today, and this page shows how.</source>
          <target state="translated">그러나 지금은 .NET Core용 MSBuild 프로젝트를 사용할 수 있으며, 이 페이지에서 그 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>We recommend that most people targeting .NET Core with <bpt id="p1">*</bpt>new<ept id="p1">*</ept> projects today use the default tooling experience with project.json because of the following reasons:</source>
          <target state="translated">오늘날 <bpt id="p1">*</bpt>새<ept id="p1">*</ept> 프로젝트에서 .NET Core를 대상으로 하는 대부분의 사용자는 다음과 같은 이유 때문에 project.json의 기본 도구 환경을 사용하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>MSBuild doesn't yet support a lot of the benefits of project.json</source>
          <target state="translated">MSBuild는 project.json의 많은 장점을 아직 지원하지 않습니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A lot of the ASP.NET based tooling doesn't currently work with MSBuild projects</source>
          <target state="translated">많은 ASP.NET 기반 도구가 현재 MSBuild 프로젝트와 작동하지 않습니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>When we do release the .NET Core tooling that uses MSBuild, it will be able to automatically convert from project.json to MSBuild projects</source>
          <target state="translated">MSBuild를 사용하는 .NET Core 도구가 릴리스되면 project.json에서 MSBuild 프로젝트로 자동으로 변환될 수 있을 것입니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You may want to use MSBuild to target .NET Core for existing projects that already use MSBuild that you want to port to .NET Core, or if you are using MSBuild's extensibility in your build for scenarios that are not well supported for project.json projects.</source>
          <target state="translated">이미 MSBuild를 사용하며 .NET Core로 이식하려는 기존 프로젝트에 대해 .NET Core를 대상으로 지정하기 위해 MSBuild를 사용할 수 있습니다. 또는 project.json 프로젝트에 대해 잘 지원되지 않는 시나리오의 경우 빌드에서 MSBuild 확장성을 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
          <target state="translated">필수 조건</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Visual Studio 2015 Update 3<ept id="p1">](https://www.visualstudio.com/en-us/news/releasenotes/vs2015-update3-vs)</ept> or higher</source>
          <target state="translated"><bpt id="p1">[</bpt>Visual Studio 2015 업데이트 3<ept id="p1">](https://www.visualstudio.com/en-us/news/releasenotes/vs2015-update3-vs)</ept> 이상</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>.NET Core tools for Visual Studio<ept id="p1">](https://www.visualstudio.com/downloads/download-visual-studio-vs)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Visual Studio 2015용 .NET Core 도구<ept id="p1">](https://www.visualstudio.com/downloads/download-visual-studio-vs)</ept></target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>NuGet Visual Studio extension <bpt id="p1">[</bpt>v3.5.0-beta<ept id="p1">](https://dist.nuget.org/visualstudio-2015-vsix/v3.5.0-beta/NuGet.Tools.vsix)</ept> or later</source>
          <target state="translated">NuGet Visual Studio 확장 <bpt id="p1">[</bpt>v3.5.0-beta<ept id="p1">](https://dist.nuget.org/visualstudio-2015-vsix/v3.5.0-beta/NuGet.Tools.vsix)</ept> 이상</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Creating a library targeting .NET Core</source>
          <target state="translated">.NET Core를 대상으로 하는 라이브러리 만들기</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In the Visual Studio menu bar, choose <bpt id="p1">**</bpt>File<ept id="p1">**</ept><ph id="ph1"> | </ph><bpt id="p2">**</bpt>New<ept id="p2">**</ept><ph id="ph2"> | </ph><bpt id="p3">**</bpt>Project<ept id="p3">**</ept> and select <bpt id="p4">**</bpt>Class Library (Portable)<ept id="p4">**</ept></source>
          <target state="translated">Visual Studio 메뉴 모음에서 <bpt id="p1">**</bpt>파일<ept id="p1">**</ept><ph id="ph1"> | </ph><bpt id="p2">**</bpt>새로 만들기<ept id="p2">**</ept><ph id="ph2"> | </ph><bpt id="p3">**</bpt>프로젝트<ept id="p3">**</ept>를 선택하고 <bpt id="p4">**</bpt>클래스 라이브러리(이식 가능)<ept id="p4">**</ept>를 선택합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>New Project</source>
          <target state="translated">새 프로젝트</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Choose a name and location for your project and click <bpt id="p1">**</bpt>OK<ept id="p1">**</ept></source>
          <target state="translated">프로젝트의 이름과 위치를 선택하고 <bpt id="p1">**</bpt>확인<ept id="p1">**</ept>을 클릭합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The "Add Portable Class Library" dialog will appear.</source>
          <target state="translated">"이식 가능한 클래스 라이브러리 추가" 대화 상자가 나타납니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>.NET Framework 4.6<ept id="p1">**</ept> and <bpt id="p2">**</bpt>ASP.NET Core 1.0<ept id="p2">**</ept> as targets and click <bpt id="p3">**</bpt>OK<ept id="p3">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>.NET Framework 4.6<ept id="p1">**</ept> 및 <bpt id="p2">**</bpt>ASP.NET Core 1.0<ept id="p2">**</ept>을 대상으로 선택하고 <bpt id="p3">**</bpt>확인<ept id="p3">**</ept>을 클릭합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Portable targets dialog</source>
          <target state="translated">휴대용 대상 대화 상자</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In Solution Explorer, right click on your project and choose <bpt id="p1">**</bpt>Properties<ept id="p1">**</ept></source>
          <target state="translated">솔루션 탐색기에서 프로젝트를 마우스 오른쪽 단추로 클릭하고 <bpt id="p1">**</bpt>속성<ept id="p1">**</ept>을 선택합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Library<ept id="p1">**</ept> tab of the project properties, click on the <bpt id="p2">**</bpt>Target .NET Platform Standard<ept id="p2">**</ept> link, and click <bpt id="p3">**</bpt>Yes<ept id="p3">**</ept> in the dialog that is shown</source>
          <target state="translated">프로젝트 속성의 <bpt id="p1">**</bpt>라이브러리<ept id="p1">**</ept> 탭에서 <bpt id="p2">**</bpt>.NET 플랫폼 표준을 대상으로 지정<ept id="p2">**</ept> 링크를 클릭하고 표시되는 대화 상자에서 <bpt id="p3">**</bpt>예<ept id="p3">**</ept>를 클릭합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Open the <ph id="ph1">`project.json`</ph> file in your project, and make the following changes:</source>
          <target state="translated">프로젝트에서 <ph id="ph1">`project.json`</ph> 파일을 열고 다음과 같이 변경합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Change the version number of the <ph id="ph1">`NETStandard.Library`</ph> package to <ph id="ph2">`1.6.0`</ph> (this is the .NET Core 1.0 version of the package)</source>
          <target state="translated"><ph id="ph1">`NETStandard.Library`</ph> 패키지의 버전 번호를 <ph id="ph2">`1.6.0`</ph>(패키지의 .NET Core 1.0 버전)으로 변경합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Add the below <ph id="ph1">`imports`</ph> definition inside the <ph id="ph2">`netstandard1.6`</ph> framework definition.</source>
          <target state="translated">아래의 <ph id="ph1">`imports`</ph> 정의를 <ph id="ph2">`netstandard1.6`</ph> 프레임워크 정의 내부에 추가합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>This will allow your project to reference .NET Core compatible NuGet packages that haven't been updated to target .NET Standard</source>
          <target state="translated">이렇게 하면 프로젝트가 .NET 표준을 대상으로 하도록 업데이트되지 않은, .NET Core와 호환되는 NuGet 패키지를 참조할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Creating a .NET Core console application</source>
          <target state="translated">.NET Core 콘솔 응용 프로그램 만들기</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Building a console application for .NET Core requires some customization of the MSBuild build process.</source>
          <target state="translated">.NET Core에 대한 콘솔 응용 프로그램을 빌드하려면 MSBuild 빌드 프로세스의 일부를 사용자 지정해야 합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You can find a sample project for a .NET Core console application called <bpt id="p1">[</bpt>CoreApp<ept id="p1">](https://github.com/dotnet/corefxlab/tree/master/samples/NetCoreSample/CoreApp)</ept> in the <bpt id="p2">[</bpt>corefxlab<ept id="p2">](https://github.com/dotnet/corefxlab)</ept> repo.</source>
          <target state="translated"><bpt id="p2">[</bpt>corefxlab<ept id="p2">](https://github.com/dotnet/corefxlab)</ept> 리포지토리에서 <bpt id="p1">[</bpt>CoreApp<ept id="p1">](https://github.com/dotnet/corefxlab/tree/master/samples/NetCoreSample/CoreApp)</ept>이라고 하는 .NET Core 콘솔 응용 프로그램에 대한 샘플 프로젝트를 찾을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Another good option is to start with <bpt id="p1">[</bpt>coretemplate<ept id="p1">](https://github.com/mellinoe/coretemplate)</ept>, which uses separate MSBuild targets files to target .NET Core instead of putting the changes directly in the project file.</source>
          <target state="translated">또 다른 좋은 옵션은, 프로젝트 파일을 직접 변경하는 대신 .NET Core를 대상으로 지정하기 위해 별도의 MSBuild 대상 파일을 사용하는 <bpt id="p1">[</bpt>coretemplate<ept id="p1">](https://github.com/mellinoe/coretemplate)</ept>으로 시작하는 것입니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>It is also possible to start by creating a project in Visual Studio and modifying it to target .NET Core.</source>
          <target state="translated">Visual Studio에서 프로젝트를 만드는 것으로 시작한 다음 이를 수정하여 .NET Core를 대상으로 지정하는 것도 가능합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The instructions below show the minimal steps to get this working.</source>
          <target state="translated">다음 지침은 이를 위한 최소 단계를 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>In contrast to <bpt id="p1">[</bpt>CoreApp<ept id="p1">](https://github.com/dotnet/corefxlab/tree/master/samples/NetCoreSample/CoreApp)</ept> or <bpt id="p2">[</bpt>coretemplate<ept id="p2">](https://github.com/mellinoe/coretemplate)</ept>, a project created this way won't include configurations for targeting Linux and macOS.</source>
          <target state="translated"><bpt id="p1">[</bpt>CoreApp<ept id="p1">](https://github.com/dotnet/corefxlab/tree/master/samples/NetCoreSample/CoreApp)</ept> 또는 <bpt id="p2">[</bpt>coretemplate<ept id="p2">](https://github.com/mellinoe/coretemplate)</ept>과는 달리, 이 방식으로 만든 프로젝트에는 Linux 및 macOS를 대상으로 하는 구성이 포함되어 있지 않습니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>In the Visual Studio menu bar, choose <bpt id="p1">**</bpt>File<ept id="p1">**</ept><ph id="ph1"> | </ph><bpt id="p2">**</bpt>New<ept id="p2">**</ept><ph id="ph2"> | </ph><bpt id="p3">**</bpt>Project<ept id="p3">**</ept> and select <bpt id="p4">**</bpt>Console Application<ept id="p4">**</ept></source>
          <target state="translated">Visual Studio 메뉴 모음에서 <bpt id="p1">**</bpt>파일<ept id="p1">**</ept><ph id="ph1"> | </ph><bpt id="p2">**</bpt>새로 만들기<ept id="p2">**</ept><ph id="ph2"> | </ph><bpt id="p3">**</bpt>프로젝트<ept id="p3">**</ept>를 선택하고 <bpt id="p4">**</bpt>콘솔 응용 프로그램<ept id="p4">**</ept>을 선택합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Choose a name and location for your project and click <bpt id="p1">**</bpt>OK<ept id="p1">**</ept></source>
          <target state="translated">프로젝트의 이름과 위치를 선택하고 <bpt id="p1">**</bpt>확인<ept id="p1">**</ept>을 클릭합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>In Solution Explorer, right click on your project, choose <bpt id="p1">**</bpt>Properties<ept id="p1">**</ept>, and then go to the <bpt id="p2">**</bpt>Build<ept id="p2">**</ept> tab</source>
          <target state="translated">솔루션 탐색기에서 프로젝트를 마우스 오른쪽 단추로 클릭하고 <bpt id="p1">**</bpt>속성<ept id="p1">**</ept>을 선택한 다음 <bpt id="p2">**</bpt>빌드<ept id="p2">**</ept> 탭으로 이동합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Configuration<ept id="p1">**</ept> dropdown (at the top of the properties page), select <bpt id="p2">**</bpt>All Configurations<ept id="p2">**</ept>, and then change the <bpt id="p3">**</bpt>Platform Target<ept id="p3">**</ept> to <bpt id="p4">**</bpt>x64<ept id="p4">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>구성<ept id="p1">**</ept> 드롭다운(속성 페이지 상단)에서 <bpt id="p2">**</bpt>모든 구성<ept id="p2">**</ept>을 선택하고 <bpt id="p3">**</bpt>플랫폼 대상<ept id="p3">**</ept>을 <bpt id="p4">**</bpt>x64<ept id="p4">**</ept>로 변경합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Delete the <ph id="ph1">`app.config`</ph> file from the project</source>
          <target state="translated">프로젝트에서 <ph id="ph1">`app.config`</ph> 파일 삭제</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Add a <ph id="ph1">`project.json`</ph> file to the project with the following contents:</source>
          <target state="translated">다음 내용으로 <ph id="ph1">`project.json`</ph> 파일을 프로젝트에 추가합니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>In Solution Explorer, right click on the project, choose <bpt id="p1">**</bpt>Unload Project<ept id="p1">**</ept>, then right click again and choose <bpt id="p2">**</bpt>Edit <bpt id="p3">_</bpt>MyProj.csproj<ept id="p3">_</ept><ept id="p2">**</ept>, and make the following changes</source>
          <target state="translated">솔루션 탐색기에서 프로젝트를 마우스 오른쪽 단추로 클릭한 다음 <bpt id="p1">**</bpt>프로젝트 언로드<ept id="p1">**</ept>를 선택하고, 마우스 오른쪽 단추를 다시 클릭하여 <bpt id="p2">**</bpt>편집 <bpt id="p3">_</bpt>MyProj.csproj<ept id="p3">_</ept><ept id="p2">**</ept>를 선택하고 다음과 같이 변경합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Remove all the default <ph id="ph1">`Reference`</ph> items (to <ph id="ph2">`System`</ph>, <ph id="ph3">`System.Core`</ph>, etc.)</source>
          <target state="translated">모든 기본 <ph id="ph1">`Reference`</ph> 항목을 제거합니다(<ph id="ph2">`System`</ph>, <ph id="ph3">`System.Core`</ph> 등).</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Add the following properties to the first <ph id="ph1">`PropertyGroup`</ph> in the project:</source>
          <target state="translated">다음 속성을 프로젝트의 첫 번째 <ph id="ph1">`PropertyGroup`</ph>에 추가합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Add the following at the end of the file (after the import of <ph id="ph1">`Microsoft.CSharp.Targets`</ph>):</source>
          <target state="translated">파일의 끝에 다음을 추가합니다(<ph id="ph1">`Microsoft.CSharp.Targets`</ph>의 가져오기 이후).</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Close the .csproj file, and reload the project in Visual Studio</source>
          <target state="translated">.csproj 파일을 닫고 Visual Studio에서 프로젝트를 다시 로드합니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>You should be able to run your program with F5 in Visual Studio, or from the command line in the output folder with <ph id="ph1">`dotnet MyApp.exe`</ph></source>
          <target state="translated">Visual Studio에서 F5 키를 눌러 프로그램을 실행하거나, 출력 폴더의 명령줄에서 다음을 사용하여 프로그램을 실행할 수 있습니다.<ph id="ph1">`dotnet MyApp.exe`</ph></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>