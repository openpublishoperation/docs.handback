<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-eac019f" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a941a7e1bcafa4f342907f3160dbbf8e6ff4bac9</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\testing\unit-testing-with-dotnet-test.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p1</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0b4524e861b4ecf8137e207d600c2404d0db001e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f069bf13a0c0508f4334776c12f670a09056f90b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Unit Testing in .NET Core using dotnet test</source>
          <target state="translated">Dotnet 테스트를 사용하여 .NET Core에서 단위 테스트</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Unit Testing in .NET Core using dotnet test</source>
          <target state="translated">Dotnet 테스트를 사용하여 .NET Core에서 단위 테스트</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Unit Testing in .NET Core using dotnet test</source>
          <target state="translated">Dotnet 테스트를 사용하여 .NET Core에서 단위 테스트</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>By <bpt id="p1">[</bpt>Steve Smith<ept id="p1">](http://ardalis.com)</ept> and <bpt id="p2">[</bpt>Bill Wagner<ept id="p2">](https://github.com/BillWagner)</ept></source>
          <target state="translated">작성자: <bpt id="p1">[</bpt>Steve Smith<ept id="p1">](http://ardalis.com)</ept> 및 <bpt id="p2">[</bpt>Bill Wagner<ept id="p2">](https://github.com/BillWagner)</ept></target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>View or download sample code<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/getting-started/unit-testing-using-dotnet-test)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>샘플 코드 보기 또는 다운로드<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/getting-started/unit-testing-using-dotnet-test)</ept></target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Creating the Projects</source>
          <target state="translated">프로젝트 만들기</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Writing Libraries with Cross Platform Tools<ept id="p1">](../tutorials/libraries.md)</ept> has information on organizing multi-project solutions for both the source and the tests.</source>
          <target state="translated"><bpt id="p1">[</bpt>플랫폼 간 도구로 라이브러리 작성<ept id="p1">](../tutorials/libraries.md)</ept>에서는 소스와 테스트 모두의 다중 프로젝트 솔루션 구성에 대한 정보를 제공합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This article follows those conventions.</source>
          <target state="translated">이 문서는 그러한 규칙을 따릅니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The final project structure will be something like this:</source>
          <target state="translated">최종 프로젝트 구조는 다음과 같습니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In the root directory, you'll need to create a <ph id="ph1">`global.json`</ph> that contains the names of your <ph id="ph2">`src`</ph> and <ph id="ph3">`test`</ph> directories:</source>
          <target state="translated">루트 디렉터리에서 <ph id="ph2">`src`</ph> 및 <ph id="ph3">`test`</ph> 디렉터리의 이름을 포함하는 <ph id="ph1">`global.json`</ph>을 만들어야 합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Creating the source project</source>
          <target state="translated">소스 프로젝트 만들기</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Then, in the <ph id="ph1">`src`</ph> directory, create the <ph id="ph2">`PrimeService`</ph> directory.</source>
          <target state="translated">그런 다음 <ph id="ph1">`src`</ph> 디렉터리에서 <ph id="ph2">`PrimeService`</ph> 디렉터리를 만듭니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>CD into that directory, and run <ph id="ph1">`dotnet new -t lib`</ph> to create the source project.</source>
          <target state="translated">해당 디렉터리로 이동하고 <ph id="ph1">`dotnet new -t lib`</ph>를 실행하여 소스 프로젝트를 만듭니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Rename <ph id="ph1">`Library.cs`</ph> as <ph id="ph2">`PrimeService.cs`</ph>.</source>
          <target state="translated"><ph id="ph1">`Library.cs`</ph>의 이름을 <ph id="ph2">`PrimeService.cs`</ph>로 바꿉니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>To use test-driven development (TDD), you'll create a failing implementation of the <ph id="ph1">`PrimeService`</ph> class:</source>
          <target state="translated">TDD(테스트 기반 개발)를 사용하기 위해 <ph id="ph1">`PrimeService`</ph> 클래스의 실패 구현을 만듭니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Creating the test project</source>
          <target state="translated">테스트 프로젝트 만들기</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Next, cd into the 'test' directory, and create the <ph id="ph1">`PrimeServices.Tests`</ph> directory.</source>
          <target state="translated">이제 'test' 디렉터리로 이동하여 <ph id="ph1">`PrimeServices.Tests`</ph> 디렉터리를 만듭니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>CD into the <ph id="ph1">`PrimeServices.Tests`</ph> directory and create a new project using <ph id="ph2">`dotnet new -t xunittest`</ph>.</source>
          <target state="translated"><ph id="ph1">`PrimeServices.Tests`</ph> 디렉터리로 이동하고 <ph id="ph2">`dotnet new -t xunittest`</ph>를 사용하여 새 프로젝트를 만듭니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`dotnet new -t xunittest`</ph> creates a test project that uses xunit as the test library.</source>
          <target state="translated"><ph id="ph1">`dotnet new -t xunittest`</ph>는 xunit을 테스트 라이브러리로 사용하는 테스트 프로젝트를 만듭니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The generated template configured the test runner at the root of <ph id="ph1">`project.json`</ph>:</source>
          <target state="translated">생성된 템플릿이 <ph id="ph1">`project.json`</ph>의 루트에 Test Runner를 구성했습니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The template also sets the framework node to use <ph id="ph1">`netcoreapp1.0`</ph>, and include the required imports to get xUnit.net to work with .NET Core RTM:</source>
          <target state="translated">템플릿은 또한 <ph id="ph1">`netcoreapp1.0`</ph>을 사용하도록 프레임워크 노드를 설정하며, xUnit.net이 .NET Core RTM과 작동하도록 필수 가져오기를 포함합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The test project requires other packages to create and run unit tests.</source>
          <target state="translated">테스트 프로제트는 다른 패키지에 단위 테스트를 만들고 실행하도록 요구합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`dotnet new`</ph> added xunit, and the xunit runner.</source>
          <target state="translated"><ph id="ph1">`dotnet new`</ph>는 xunit 및 xunit runner를 추가했습니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>You need to add the PrimeService package as another dependency to the project:</source>
          <target state="translated">PrimeService 패키지를 또 다른 종속성으로 프로젝트에 추가해야 합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Notice that the <ph id="ph1">`PrimeService`</ph> project does not include any directory path information.</source>
          <target state="translated"><ph id="ph1">`PrimeService`</ph> 프로젝트는 디렉터리 경로 정보를 포함하지 않습니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Because you created the project structure to match the expected organization of <ph id="ph1">`src`</ph> and <ph id="ph2">`test`</ph>, and the <ph id="ph3">`global.json`</ph> file indicates that, the build system will find the correct location for the project.</source>
          <target state="translated"><ph id="ph1">`src`</ph> 및 <ph id="ph2">`test`</ph>의 확장 구성과 일치하도록 프로젝트 구조를 만들었으므로, <ph id="ph3">`global.json`</ph> 파일은 빌드 시스템이 프로젝트에 대한 올바른 위치를 찾을 것임을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You add the <ph id="ph1">`"target": "project"`</ph> element to inform NuGet that it should look in project directories, not in the NuGet feed.</source>
          <target state="translated"><ph id="ph1">`"target": "project"`</ph> 요소를 추가하여 NuGet에 NuGet 피드가 아닌 프로젝트 디렉터리를 조회하도록 알립니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Without this key, you might download a package with the same name as your internal library.</source>
          <target state="translated">이 키가 없는 경우 내부 라이브러리와 같은 이름의 패키지를 다운로드할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>You can see the entire file in the <bpt id="p1">[</bpt>samples repository<ept id="p1">](https://github.com/dotnet/docs/blob/master/samples/core/getting-started/unit-testing-using-dotnet-test/test/PrimeService.Tests/project.json)</ept> on GitHub.</source>
          <target state="translated">GitHub의 <bpt id="p1">[</bpt>샘플 리포지토리<ept id="p1">](https://github.com/dotnet/docs/blob/master/samples/core/getting-started/unit-testing-using-dotnet-test/test/PrimeService.Tests/project.json)</ept>에서 전체 파일을 볼 수 있습니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>After this initial structure is in place, you can write your first test.</source>
          <target state="translated">이 초기 구조가 자리 잡으면 첫 번째 테스트를 작성할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Once you verify that first unit test, everything is configured and should run smoothly as you add features and tests.</source>
          <target state="translated">첫 번째 단위 테스트를 확인한 후에는 모든 것이 구성되며 기능과 테스트를 추가할 때 원활하게 실행됩니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Creating the first test</source>
          <target state="translated">첫 번째 테스트 만들기</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The TDD approach calls for writing one failing test, then making it pass, then repeating the process.</source>
          <target state="translated">TDD 접근 방식에서는 하나의 실패 테스트를 작성하고, 통과시키고, 이 프로세스를 반복해야 합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>So, let's write that one failing test.</source>
          <target state="translated">따라서 하나의 실패 테스트를 작성하겠습니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Remove <ph id="ph1">`program.cs`</ph> from the <ph id="ph2">`PrimeService.Tests`</ph> directory, and create a new C# file with the following content:</source>
          <target state="translated"><ph id="ph2">`PrimeService.Tests`</ph> 디렉터리에서 <ph id="ph1">`program.cs`</ph>를 제거하고 다음과 같은 내용으로 새 C# 파일을 만듭니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`[Fact]`</ph> attribute denotes a method as a single test.</source>
          <target state="translated"><ph id="ph1">`[Fact]`</ph> 특성은 메서드를 단일 테스트로 나타냅니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Save this file, then run <ph id="ph1">`dotnet build`</ph> to build the test project.</source>
          <target state="translated">이 파일을 저장한 다음 <ph id="ph1">`dotnet build`</ph>를 실행하여 테스트 프로젝트를 빌드합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If you have not already built the <ph id="ph1">`PrimeService`</ph> project, the build system will detect that and build it because it is a dependency of the test project.</source>
          <target state="translated"><ph id="ph1">`PrimeService`</ph> 프로젝트를 아직 빌드하지 않은 경우, 이 프로젝트는 테스트 프로젝트의 종속성이기 때문에 빌드 시스템이 이를 탐지하고 빌드합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Now, execute <ph id="ph1">`dotnet test`</ph> to run the tests from the console.</source>
          <target state="translated">이제 <ph id="ph1">`dotnet test`</ph>를 실행하여 콘솔에서 테스트를 실행합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The xunit test runner has the program entry point to run your tests from the Console.</source>
          <target state="translated">xunit Test Runner는 콘솔에서 테스트를 실행하기 위한 프로그램 진입점을 가지고 있습니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`dotnet test`</ph> starts the test runner, and provides a command line argument to the testrunner indicating the assembly that contains your tests.</source>
          <target state="translated"><ph id="ph1">`dotnet test`</ph>는 Test Runner를 시작하고, 테스트가 포함된 어셈블리를 나타내는 testrunner에 명령줄 인수를 제공합니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Your test fails.</source>
          <target state="translated">테스트가 실패합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>You haven't created the implementation yet.</source>
          <target state="translated">구현은 아직 만들지 않았습니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Write the simplest code to make this one test pass:</source>
          <target state="translated">이 하나의 테스트를 통과시킬 가장 간단한 코드를 작성합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Adding More Features</source>
          <target state="translated">더 많은 기능 추가</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Now, that you've made one test pass, it's time to write more.</source>
          <target state="translated">이제 하나의 테스트를 통과했으므로 더 작성할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>There are a few other simple cases for prime numbers: 0, -1.</source>
          <target state="translated">소수에 대한 몇 가지 다른 간단한 사례가 있습니다(0, -1).</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>You could add those as new tests, with the <ph id="ph1">`[Fact]`</ph> attribute, but that quickly becomes tedious.</source>
          <target state="translated">이들을 <ph id="ph1">`[Fact]`</ph> 특성과 함께 새 테스트로 추가할 수도 있지만, 이렇게 하면 금방 지루해질 수 있습니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>There are other xunit attributes that enable you to write a suite of similar tests.</source>
          <target state="translated">비슷한 테스트 모음을 작성하는 데 사용할 수 있는 다른 xunit 특성이 있습니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Theory`</ph> represents a suite of tests that execute the same code, but have different input arguments.</source>
          <target state="translated"><ph id="ph1">`Theory`</ph>는 같은 코드를 실행하는 테스트 모음을 나타내지만, 서로 다른 입력 인수를 가지고 있습니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">`[InlineData]`</ph> attribute to specify values for those inputs.</source>
          <target state="translated"><ph id="ph1">`[InlineData]`</ph> 특성을 사용하여 그러한 입력의 값을 지정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Instead of creating new tests, leverage these two attributes to create a single theory that tests some values less than 2, which is the lowest prime number:</source>
          <target state="translated">새 테스트를 만드는 대신 이 두 가지 특성을 사용하여 2보다 작은 일부 값(가장 낮은 소수)을 테스트하는 단일 이론을 만듭니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Run <ph id="ph1">`dotnet test`</ph> and you'll see that two of these tests fail.</source>
          <target state="translated"><ph id="ph1">`dotnet test`</ph>를 실행하면 이러한 테스트 중 두 개가 실패하는 것을 알 수 있습니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>You can make them pass by changing the service.</source>
          <target state="translated">서비스를 변경하여 이들을 통과시킬 수 있습니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>You need to change the <ph id="ph1">`if`</ph> clause at the beginning of the method:</source>
          <target state="translated">메서드의 시작 부분에서 <ph id="ph1">`if`</ph> 절을 변경해야 합니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Now, these tests all pass.</source>
          <target state="translated">이제 이러한 테스트가 모두 통과됩니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>You continue to iterate by adding more tests, more theories, and more code in the main library.</source>
          <target state="translated">기본 라이브러리에서 더 많은 테스트, 더 많은 이론, 더 많은 코드를 추가하여 계속 반복합니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>You'll quickly end up with the <bpt id="p1">[</bpt>finished version of the tests<ept id="p1">](https://github.com/dotnet/docs/blob/master/samples/core/getting-started/unit-testing-using-dotnet-test/test/PrimeService.Tests/PrimeServie_IsPrimeShould.cs)</ept> and the <bpt id="p2">[</bpt>complete implementation of the library<ept id="p2">](https://github.com/dotnet/docs/blob/master/samples/core/getting-started/unit-testing-using-dotnet-test/src/PrimeService/PrimeService.cs)</ept>.</source>
          <target state="translated"><bpt id="p1">[</bpt>테스트의 완료된 버전<ept id="p1">](https://github.com/dotnet/docs/blob/master/samples/core/getting-started/unit-testing-using-dotnet-test/test/PrimeService.Tests/PrimeServie_IsPrimeShould.cs)</ept> 및 <bpt id="p2">[</bpt>라이브러리의 완전한 구현<ept id="p2">](https://github.com/dotnet/docs/blob/master/samples/core/getting-started/unit-testing-using-dotnet-test/src/PrimeService/PrimeService.cs)</ept>으로 신속하게 종료하게 됩니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>You've built a small library and a set of unit tests for that library.</source>
          <target state="translated">작은 라이브러리 및 이 라이브러리에 대한 단위 테스트 집합을 작성했습니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>You've structured this solution so that adding new packages and tests will be seamless, and you can concentrate on the problem at hand.</source>
          <target state="translated">새 패키지와 테스트를 원활하게 추가할 수 있도록 이 솔루션을 구성했으므로 이제 당면한 문제에 집중할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The tools will run automatically.</source>
          <target state="translated">도구는 자동으로 실행됩니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>On Windows platform you can use MSTest.</source>
          <target state="translated">Windows 플랫폼에서 MSTest를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Find out more in the <bpt id="p1">[</bpt>Using MSTest on Windows document<ept id="p1">](./using-mstest-on-windows.md)</ept>.</source>
          <target state="translated">자세한 내용은 <bpt id="p1">[</bpt>Using MSTest on Windows document(Windows 문서에서 MSTest 사용)<ept id="p1">](./using-mstest-on-windows.md)</ept>를 참조하세요.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>