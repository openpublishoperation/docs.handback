<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-6a73dd2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">11faa46347b18240e9ddf1c27f27a814103e2565</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\testing\using-mstest-on-windows.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p1</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d0b889def7c2a7fe5e0e328fc65218e643d5f863</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">50b99a584fcadd6faa0452adeaa9ca5b5a07022a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Use MSTest with .NET Core on Windows</source>
          <target state="translated">Windows에서 .NET Core와 함께 MSTest 사용</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to use MSTest with .NET Core on Windows, using Visual Studio 2015</source>
          <target state="translated">Windows에서 Visual Studio 2015를 사용하여 .NET Core와 함께 MSTest를 사용하는 방법</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>MSTest, .NET, .NET Core</source>
          <target state="translated">MSTest, .NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Unit testing with MSTest and .NET Core on Windows, using Visual Studio 2015</source>
          <target state="translated">Windows에서 Visual Studio 2015를 사용하여 MSTest 및 .NET Core로 단위 테스트</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>While xUnit could be a better choice when targeting multiple platforms, with .NET Core on Windows is also possible to use MSTest.</source>
          <target state="translated">여러 플랫폼을 대상으로 할 경우 xUnit을 선택하는 것이 더 나을 수 있지만, Windows에서 .NET Core와 함께 MSTest를 사용할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
          <target state="translated">필수 조건</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Follow the instructions on <bpt id="p1">[</bpt>Getting started with .NET Core on Windows<ept id="p1">](../tutorials/using-on-windows.md)</ept> to create the library project.</source>
          <target state="translated"><bpt id="p1">[</bpt>Windows에서 .NET Core 시작<ept id="p1">](../tutorials/using-on-windows.md)</ept>의 지침에 따라 라이브러리 프로젝트를 만듭니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Writing the test project using MSTest</source>
          <target state="translated">MSTest를 사용하여 테스트 프로젝트 작성</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In Solution Explorer, open the context menu for the <bpt id="p1">**</bpt>Solution<ept id="p1">**</ept> node and choose <bpt id="p2">**</bpt>Add<ept id="p2">**</ept>, <bpt id="p3">**</bpt>New Solution Folder<ept id="p3">**</ept>.</source>
          <target state="translated">솔루션 탐색기에서 <bpt id="p1">**</bpt>솔루션<ept id="p1">**</ept> 노드의 상황에 맞는 메뉴를 열고 <bpt id="p2">**</bpt>추가<ept id="p2">**</ept>, <bpt id="p3">**</bpt>새 솔루션 폴더<ept id="p3">**</ept>를 선택합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Name the folder "test".</source>
          <target state="translated">폴더 이름을 "test"로 지정합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This is only a solution folder, not a physical folder.</source>
          <target state="translated">이것은 실제 폴더가 아니라 솔루션 폴더일 뿐입니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Open the context menu for the <bpt id="p1">**</bpt>test<ept id="p1">**</ept> folder and choose <bpt id="p2">**</bpt>Add<ept id="p2">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>test<ept id="p1">**</ept> 폴더의 상황에 맞는 메뉴를 열고 <bpt id="p2">**</bpt>추가<ept id="p2">**</ept>를 선택합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>New Project<ept id="p1">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>새 프로젝트<ept id="p1">**</ept>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>New Project<ept id="p1">**</ept> dialog, choose <bpt id="p2">**</bpt>Console Application (.NET Core)<ept id="p2">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>새 프로젝트<ept id="p1">**</ept> 대화 상자에서 <bpt id="p2">**</bpt>콘솔 응용 프로그램(.NET Core)<ept id="p2">**</ept>을 선택합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Name it "TestLibrary" and explicitly put it under the <ph id="ph1">`Golden\test`</ph> path.</source>
          <target state="translated">이름을 "TestLibrary"로 지정하고 <ph id="ph1">`Golden\test`</ph> 경로에 명시적으로 저장합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The project needs to be a console application, not a class library.</source>
          <target state="translated">프로젝트는 클래스 라이브러리가 아니라 콘솔 응용 프로그램이어야 합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>TestLibrary<ept id="p1">**</ept> project, open the context menu for the <bpt id="p2">**</bpt>References<ept id="p2">**</ept> node and choose <bpt id="p3">**</bpt>Add Reference<ept id="p3">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>TestLibrary<ept id="p1">**</ept> 프로젝트에서 <bpt id="p2">**</bpt>참조<ept id="p2">**</ept> 노드의 상황에 맞는 메뉴를 열고 <bpt id="p3">**</bpt>참조 추가<ept id="p3">**</ept>를 선택합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Reference Manager<ept id="p1">**</ept> dialog, check <bpt id="p2">**</bpt>Library<ept id="p2">**</ept> under the <bpt id="p3">**</bpt>Projects<ept id="p3">**</ept>, <bpt id="p4">**</bpt>Solution<ept id="p4">**</ept> node, and then click <bpt id="p5">**</bpt>OK<ept id="p5">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>참조 관리자<ept id="p1">**</ept> 대화 상자에서 <bpt id="p3">**</bpt>프로젝트<ept id="p3">**</ept> 아래에 있는 <bpt id="p2">**</bpt>라이브러리<ept id="p2">**</ept>, <bpt id="p4">**</bpt>솔루션<ept id="p4">**</ept> 노드를 선택한 후 <bpt id="p5">**</bpt>확인<ept id="p5">**</ept>을 클릭합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>TestLibrary<ept id="p1">**</ept> project, open the <ph id="ph1">`project.json`</ph> file, and replace <ph id="ph2">`"Library": "1.0.0-*"`</ph> with <ph id="ph3">`"Library": {"target": "project"}`</ph>.</source>
          <target state="translated"><bpt id="p1">**</bpt>TestLibrary<ept id="p1">**</ept> 프로젝트에서 <ph id="ph1">`project.json`</ph> 파일을 열고 <ph id="ph2">`"Library": "1.0.0-*"`</ph>을 <ph id="ph3">`"Library": {"target": "project"}`</ph>으로 바꿉니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This is to avoid the resolution of the <ph id="ph1">`Library`</ph> project to a NuGet package with the same name.</source>
          <target state="translated">이는 <ph id="ph1">`Library`</ph> 프로젝트가 동일한 이름의 NuGet 패키지로 해석되는 것을 방지하기 위해서입니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Explicitly setting the target to "project" ensures that the tooling will first search for a project with that name, and not a package.</source>
          <target state="translated">대상을 "프로젝트"로 명시적으로 설정하면, 도구가 먼저 해당 이름의 프로젝트(패키지가 아닌)를 검색합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Open the context menu for the <bpt id="p1">**</bpt>References<ept id="p1">**</ept> node and choose <bpt id="p2">**</bpt>Manage NuGet Packages<ept id="p2">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>참조<ept id="p1">**</ept> 노드의 상황에 맞는 메뉴를 열고 <bpt id="p2">**</bpt>NuGet 패키지 관리<ept id="p2">**</ept>를 선택합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Choose "nuget.org" as the <bpt id="p1">**</bpt>Package source<ept id="p1">**</ept>, and choose the <bpt id="p2">**</bpt>Browse<ept id="p2">**</ept> tab.</source>
          <target state="translated"><bpt id="p1">**</bpt>패키지 소스<ept id="p1">**</ept>로 "nuget.org"를 선택하고 <bpt id="p2">**</bpt>찾아보기<ept id="p2">**</ept> 탭을 선택합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Check the <bpt id="p1">**</bpt>Include prerelease<ept id="p1">**</ept> checkbox, and then browse for <bpt id="p2">**</bpt>MSTest.TestFramework<ept id="p2">**</ept> version 1.0.1-preview or newer, and then click <bpt id="p3">**</bpt>Install<ept id="p3">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>시험판 포함<ept id="p1">**</ept> 확인란을 선택한 다음 <bpt id="p2">**</bpt>MSTest.TestFramework<ept id="p2">**</ept> 버전 1.0.1-preview 이상을 검색하고 <bpt id="p3">**</bpt>설치<ept id="p3">**</ept>를 클릭합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Browse for <bpt id="p1">**</bpt>dotnet-test-mstest<ept id="p1">**</ept> version 1.1.1-preview or newer, and then click <bpt id="p2">**</bpt>Install<ept id="p2">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>dotnet-test-mstest<ept id="p1">**</ept> 버전 1.1.1-preview 이상을 검색하고 <bpt id="p2">**</bpt>설치<ept id="p2">**</ept>를 클릭합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Edit <ph id="ph1">`project.json`</ph> to add <ph id="ph2">`"testRunner": "mstest",`</ph> after the <ph id="ph3">`"version"`</ph> section.</source>
          <target state="translated"><ph id="ph1">`project.json`</ph>을 편집하여 <ph id="ph3">`"version"`</ph> 섹션 뒤에 <ph id="ph2">`"testRunner": "mstest",`</ph>를 추가합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Add a <ph id="ph1">`LibraryTests.cs`</ph> class file to the <bpt id="p1">**</bpt>TestLibrary<ept id="p1">**</ept> project, add the <ph id="ph2">`using`</ph> directives <ph id="ph3">`Microsoft.VisualStudio.TestTools.UnitTesting;`</ph> and <ph id="ph4">`using Library;`</ph> to the top of the file, and add the following code to the class:</source>
          <target state="translated"><bpt id="p1">**</bpt>TestLibrary<ept id="p1">**</ept> 프로젝트에 <ph id="ph1">`LibraryTests.cs`</ph> 클래스 파일을 추가하고, <ph id="ph2">`using`</ph> 지시문 <ph id="ph3">`Microsoft.VisualStudio.TestTools.UnitTesting;`</ph> 및 <ph id="ph4">`using Library;`</ph>를 파일 상단에 추가하고, 다음 코드를 클래스에 추가합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Optionally, delete the <ph id="ph1">`Program.cs`</ph> file from the <bpt id="p1">**</bpt>TestLibrary<ept id="p1">**</ept> project, and remove <ph id="ph2">`"buildOptions": {"emitEntryPoint": true},`</ph> from <ph id="ph3">`project.json`</ph>.</source>
          <target state="translated">선택적으로, <bpt id="p1">**</bpt>TestLibrary<ept id="p1">**</ept> 프로젝트에서 <ph id="ph1">`Program.cs`</ph> 파일을 삭제하고 <ph id="ph3">`project.json`</ph>에서 <ph id="ph2">`"buildOptions": {"emitEntryPoint": true},`</ph>를 제거합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You should now be able to build the solution.</source>
          <target state="translated">이제 솔루션을 빌드할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>Test<ept id="p1">**</ept> menu, choose <bpt id="p2">**</bpt>Windows<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Test Explorer<ept id="p3">**</ept>, and in Test Explorer choose <bpt id="p4">**</bpt>Run All<ept id="p4">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>테스트<ept id="p1">**</ept> 메뉴에서 <bpt id="p2">**</bpt>Windows<ept id="p2">**</ept>, <bpt id="p3">**</bpt>테스트 탐색기<ept id="p3">**</ept>를 선택하고, 테스트 탐색기에서 <bpt id="p4">**</bpt>모두 실행<ept id="p4">**</ept>을 선택합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The test should pass.</source>
          <target state="translated">테스트를 전달해야 합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>