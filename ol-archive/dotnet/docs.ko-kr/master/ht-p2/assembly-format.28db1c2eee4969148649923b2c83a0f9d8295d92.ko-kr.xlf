<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-6a73dd2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e6212a63e74f2d1525e87480b092861be9f92379</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\assembly-format.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p2</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ede6c3854aab9b51f42f4e28a43b61926e492e83</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b8d15d44ca3191cc1e0e54fe0234341b0299397c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>.NET Assembly File Format</source>
          <target state="translated">.NET 어셈블리 파일 형식</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>.NET Assembly File Format</source>
          <target state="translated">.NET 어셈블리 파일 형식</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>.NET Assembly File Format</source>
          <target state="translated">.NET 어셈블리 파일 형식</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The .NET platform defines a binary file format - “assembly” - that is used to fully-describe and contain .NET programs.</source>
          <target state="translated">.NET 플랫폼에서는 .NET 프로그램을 완벽하게 설명하고 포함하는 데 사용되는 이진 파일 형식("어셈블리")를 정의합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Assemblies are used for the programs themselves as well as any dependent libraries.</source>
          <target state="translated">어셈블리는 프로그램 자체와 모든 종속 라이브러리에 사용됩니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>A .NET program can be executed as one of more assemblies, with no other required artifacts, beyond the appropriate .NET runtime.</source>
          <target state="translated">적절한 .NET 런타임 외에 다른 필수 아티팩트 없이 추가 어셈블리 중 하나로 .NET 프로그램을 실행할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Native dependencies, including operating system APIs, are a separate concern and are not contained within the .NET assembly format, although are sometimes described with this format (for example, WinRT).</source>
          <target state="translated">운영 체제 API를 비롯한 기본 종속성은 별도의 문제이며, .NET 어셈블리 형식으로 설명되는 경우도 있지만(예: WinRT) 이 형식에 포함되지 않습니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Each CLI component carries the metadata for declarations, implementations, and references specific to that component.</source>
          <target state="translated">각 CLI 구성 요소는 해당 구성 요소와 관련된 선언, 구현 및 참조에 대한 메타데이터를 전달합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Therefore, the component-specific metadata is referred to as component metadata, and the resulting component is said to be self-describing – from ECMA 335 I.9.1, Components and assemblies.</source>
          <target state="translated">따라서 구성 요소 관련 메타데이터는 구성 요소별 메타데이터라고 하며 결과 구성 요소는 자기 설명적입니다(ECMA 335 I.9.1, Components and assemblies).</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The format is fully specified and standardized as ECMA 335.</source>
          <target state="translated">형식은 완벽하게 지정되며 ECMA 335로 표준화됩니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>All .NET compilers and runtimes use this format.</source>
          <target state="translated">모든 .NET 컴파일러와 런타임에서 이 형식을 사용합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The presence of a documented and infrequently updated binary format has been a major benefit (arguably a requirement) for interoperatibility.</source>
          <target state="translated">문서화되고 자주 업데이트되지 않는 이진 형식이 있을 경우 상호 운용성에 특히 도움이 됩니다(요구 사항인 경우도 있음).</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The format was last updated in a substantive way in 2005 (.NET 2.0) to accommodate generics and processor architecture.</source>
          <target state="translated">형식은 2005(.NET 2.0)에서 대체 방법을 사용하여 제네릭 및 프로세서 아키텍처에 맞게 마지막으로 업데이트되었습니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The format is CPU- and OS-agnostic.</source>
          <target state="translated">형식은 CPU 및 OS와 관련이 없습니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>It has been used as part of .NET runtimes that target many chips and CPUs.</source>
          <target state="translated">많은 칩과 CPU를 대상으로 하는 .NET 런타임의 일부로 사용되었습니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>While the format itself has Windows heritage, it is implementable on any operating system.</source>
          <target state="translated">형식 자체에 Windows 유산이 있을 경우 모든 운영 체제에서 구현할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>It’s arguably most significant choice for OS interoperability is that most values are stored in little-endian format.</source>
          <target state="translated">논란의 여지는 있지만 OS 상호 운용성에 가장 중요한 선택 사항은 대부분의 값을 little-endian 형식으로 저장하는 것입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>It doesn’t have a specific affinity to machine pointer size (for example, 32-bit, 64-bit).</source>
          <target state="translated">컴퓨터 포인터 크기(예: 32비트, 64비트)에 대한 특정 선호도는 없습니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The .NET assembly format is also very descriptive about the structure of a given program or library.</source>
          <target state="translated">.NET 어셈블리 형식은 지정된 프로그램 또는 라이브러리의 구조에 대해 매우 설명적이기도 합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>It describes the internal components of an assembly, specifically: assembly references and types defined and their internal structure.</source>
          <target state="translated">어셈블리의 내부 구성 요소, 특히 정의된 어셈블리 참조 및 형식과 해당 내부 구조를 설명합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Tools or APIs can read and process this information for display or to make programmatic decisions.</source>
          <target state="translated">도구 또는 API는 표시하거나 프로그래밍 방식으로 결정을 내리기 위해 이 정보를 읽고 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Format</source>
          <target state="translated">서식</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The .NET binary format is based on the Windows <bpt id="p1">[</bpt>PE file<ept id="p1">](http://en.wikipedia.org/wiki/Portable_Executable)</ept> format.</source>
          <target state="translated">.NET 이진 형식은 Windows <bpt id="p1">[</bpt>PE 파일<ept id="p1">](http://en.wikipedia.org/wiki/Portable_Executable)</ept> 형식을 기반으로 합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In fact, .NET class libraries are conformant Windows PEs, and appear on first glance to be Windows dynamic link libraries (DLLs) or application executables (EXEs).</source>
          <target state="translated">실제로 .NET 클래스 라이브러리는 규칙에 부합되는 Windows PE이며, 처음에는 Windows DLL(동적 연결 라이브러리) 또는 EXE(응용 프로그램 실행 파일)처럼 보입니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This is a very useful characteristic on Windows, where they can masquerade as native executable binaries and get some of the same treatment (for example, OS load, PE tools).</source>
          <target state="translated">이는 Windows에서 매우 유용한 특성으로, 네이티브 실행 이진 파일로 가장하고 동일한 처리 중 일부(예: OS 로드, PE 도구)를 얻을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Assembly headers</source>
          <target state="translated">어셈블리 헤더</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Assembly Headers from ECMA 335 II.25.1, Structure of the runtime file format.</source>
          <target state="translated">ECMA 335 II.25.1 런타임 파일 형식 구조의 어셈블리 헤더입니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Processing the Assemblies</source>
          <target state="translated">어셈블리 처리</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>It is possible to write tools or APIs to process assemblies.</source>
          <target state="translated">어셈블리를 처리할 도구 또는 API를 작성할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Assembly information enables making programmatic decisions at runtime, re-writing assemblies, providing API IntelliSense in an editor and generating documentation.</source>
          <target state="translated">어셈블리 정보를 사용하면 런타임에 프로그래밍 방식으로 결정을 내리고, 어셈블리를 다시 작성하고, 편집기에서 API IntelliSense를 제공하고, 설명서를 생성할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.Reflection<ept id="p1">](https://msdn.microsoft.com/library/system.reflection.aspx)</ept> and <bpt id="p2">[</bpt>Mono.Cecil<ept id="p2">](http://www.mono-project.com/docs/tools+libraries/libraries/Mono.Cecil/)</ept> are good examples of tools that are frequently used for this purpose.</source>
          <target state="translated"><bpt id="p1">[</bpt>System.Reflection<ept id="p1">](https://msdn.microsoft.com/library/system.reflection.aspx)</ept> 및 <bpt id="p2">[</bpt>Mono.Cecil<ept id="p2">](http://www.mono-project.com/docs/tools+libraries/libraries/Mono.Cecil/)</ept>은 이러한 용도에 자주 사용되는 도구의 좋은 예입니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>