<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-eac019f" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">47a407d1c1e768a027aaca63ee7a668e992467b2</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\language-independence.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p2</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2cd82917b5829a18453fc14cb36b156bb7d01cb4</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">53915650050c83efbb1f9ca1a95efbb9f2ee476c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Language independence and language-independent components</source>
          <target state="translated">언어 독립성 및 언어 독립적 구성 요소</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Language independence and language-independent components</source>
          <target state="translated">언어 독립성 및 언어 독립적 구성 요소</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Language independence and language-independent components</source>
          <target state="translated">언어 독립성 및 언어 독립적 구성 요소</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The .NET platform is language independent.</source>
          <target state="translated">.NET 플랫폼은 언어 독립적입니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This means that, as a developer, you can develop in one of the many languages that target the .NET platform, such as C#, F#, and Visual Basic.</source>
          <target state="translated">즉, 개발자는 C#, F#, Visual Basic 등의 .NET 플랫폼을 대상으로 하는 많은 언어 중 하나로 개발할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You can access the types and members of class libraries developed for the .NET platform without having to know the language in which they were originally written and without having to follow any of the original language's conventions.</source>
          <target state="translated">원래 작성된 언어를 모르거나 원래의 언어 규칙을 따르지 않고도 .NET 플랫폼용으로 개발된 클래스 라이브러리의 형식과 멤버에 액세스할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>If you are a component developer, your component can be accessed by any .NET app regardless of its language.</source>
          <target state="translated">구성 요소 개발자인 경우 해당 언어와 관계없이 모든 .NET 앱에서 구성 요소에 액세스할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This first part of this article discusses creating language-independent components - that is, components that can be consumed by apps that are written in any language.</source>
          <target state="translated">이 문서의 첫 부분에서는 언어 독립적 구성 요소, 즉 모든 언어로 작성된 앱에서 사용할 수 있는 구성 요소를 만드는 방법을 설명합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You can also create a single component or app from source code written in multiple languages; see <bpt id="p1">[</bpt>Cross-Language Interoperability<ept id="p1">](#cross-language-interoperability)</ept> in the second part of this article.</source>
          <target state="translated">여러 언어로 작성된 소스 코드에서 구성 요소나 앱을 하나 만들 수도 있습니다. 이 문서의 두 번째 부분에서 <bpt id="p1">[</bpt>언어 간 상호 운용성<ept id="p1">](#cross-language-interoperability)</ept>을 참조하세요.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>To fully interact with other objects written in any language, objects must expose to callers only those features that are common to all languages.</source>
          <target state="translated">어떠한 언어로 작성된 다른 개체와도 완전하게 상호 작용하려면 개체는 모든 언어에 공통적인 기능만 호출자에게 노출해야 합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This common set of features is defined by the Common Language Specification (CLS), which is a set of rules that apply to generated assemblies.</source>
          <target state="translated">기능의 공통 집합은 생성된 어셈블리에 적용되는 규칙 집합인 CLS(공용 언어 사양)에서 정의됩니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The Common Language Specification is defined in Partition I, Clauses 7 through 11 of the <bpt id="p1">[</bpt>ECMA-335 Standard: Common Language Infrastructure<ept id="p1">](http://www.ecma-international.org/publications/standards/Ecma-335.htm)</ept>.</source>
          <target state="translated">공용 언어 사양은 <bpt id="p1">[</bpt>ECMA-335 Standard: Common Language Infrastructure<ept id="p1">](http://www.ecma-international.org/publications/standards/Ecma-335.htm)</ept>에서 Partition I, Clauses 7~11에 정의되어 있습니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If your component conforms to the Common Language Specification, it is guaranteed to be CLS-compliant and can be accessed from code in assemblies written in any programming language that supports the CLS.</source>
          <target state="translated">구성 요소가 공용 언어 사양을 따르는 경우, 이 구성 요소는 CLS 규격임이 보장되고 CLS를 지원하는 모든 프로그래밍 언어로 작성된 어셈블리 코드에서 액세스할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You can determine whether your component conforms to the Common Language Specification at compile time by applying the <bpt id="p1">[</bpt>CLSCompliantAttribute<ept id="p1">](xref:System.CLSCompliantAttribute)</ept> attribute to your source code.</source>
          <target state="translated"><bpt id="p1">[</bpt>CLSCompliantAttribute<ept id="p1">](xref:System.CLSCompliantAttribute)</ept> 특성을 소스 코드에 적용하여 구성 요소가 컴파일 시간에 공용 언어 사양을 준수하는지 여부를 확인할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For more information, see The <bpt id="p1">[</bpt>CLSCompliantAttribute attribute<ept id="p1">](#the-clscompliantattribute-attribute)</ept>.</source>
          <target state="translated">자세한 내용은 <bpt id="p1">[</bpt>CLSCompliantAttribute 특성<ept id="p1">](#the-clscompliantattribute-attribute)</ept>을 참조하세요.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In this article:</source>
          <target state="translated">이 문서의 내용</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CLS compliance rules<ept id="p1">](#cls-compliance-rules)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>CLS 준수 규칙<ept id="p1">](#cls-compliance-rules)</ept></target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Types and type member signatures<ept id="p1">](#types-and-type-member-signatures)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>형식 및 형식 멤버 시그니처<ept id="p1">](#types-and-type-member-signatures)</ept></target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Naming conventions<ept id="p1">](#naming-conventions)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>명명 규칙<ept id="p1">](#naming-conventions)</ept></target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Type conversion<ept id="p1">](#type-conversion)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>형식 변환<ept id="p1">](#type-conversion)</ept></target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Arrays<ept id="p1">](#arrays)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>배열<ept id="p1">](#arrays)</ept></target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Interfaces<ept id="p1">](#interfaces)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>인터페이스<ept id="p1">](#interfaces)</ept></target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Enumerations<ept id="p1">](#enumerations)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>열거형<ept id="p1">](#enumerations)</ept></target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Type members in general<ept id="p1">](#type-members-in-general)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>형식 멤버 일반 사항<ept id="p1">](#type-members-in-general)</ept></target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Member accessibility<ept id="p1">](#member-accessibility)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>멤버 접근성<ept id="p1">](#member-accessibility)</ept></target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Generic types and members<ept id="p1">](#generic-types-and-members)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>제네릭 형식 및 멤버<ept id="p1">](#generic-types-and-members)</ept></target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Constructors<ept id="p1">](#constructors)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>생성자<ept id="p1">](#constructors)</ept></target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Properties<ept id="p1">](#properties)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>속성<ept id="p1">](#properties)</ept></target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Events<ept id="p1">](#events)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>이벤트<ept id="p1">](#events)</ept></target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Overloads<ept id="p1">](#overloads)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>오버로드<ept id="p1">](#overloads)</ept></target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Exceptions<ept id="p1">](#exceptions)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>예외<ept id="p1">](#exceptions)</ept></target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Attributes<ept id="p1">](#attributes)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>특성<ept id="p1">](#attributes)</ept></target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CLSCompliantAttribute attribute<ept id="p1">](#the-clscompliantattribute-attribute)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>CLSCompliantAttribute 특성<ept id="p1">](#the-clscompliantattribute-attribute)</ept></target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Cross-Language Interoperability<ept id="p1">](#cross-language-interoperability)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>언어 간 상호 운용성<ept id="p1">](#cross-language-interoperability)</ept></target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>CLS compliance rules</source>
          <target state="translated">CLS 규격 규칙</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This section discusses the rules for creating a CLS-compliant component.</source>
          <target state="translated">이 섹션에서는 CLS 규격 구성 요소를 만드는 규칙을 설명합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>For a complete list of rules, see Partition I, Clause 11 of the <bpt id="p1">[</bpt>ECMA-335 Standard: Common Language Infrastructure<ept id="p1">](http://www.ecma-international.org/publications/standards/Ecma-335.htm)</ept>.</source>
          <target state="translated">규칙의 전체 목록은 <bpt id="p1">[</bpt>ECMA-335 Standard: Common Language Infrastructure<ept id="p1">](http://www.ecma-international.org/publications/standards/Ecma-335.htm)</ept>에서 Partition I, Clause 11을 참조하세요.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The Common Language Specification discusses each rule for CLS compliance as it applies to consumers (developers who are programmatically accessing a component that is CLS-compliant), frameworks (developers who are using a language compiler to create CLS-compliant libraries), and extenders (developers who are creating a tool such as a language compiler or a code parser that creates CLS-compliant components).</source>
          <target state="translated">공용 언어 사양에서는 소비자(CLS 규격인 구성 요소를 프로그래밍 방식으로 액세스하는 개발자), 프레임워크(언어 컴파일러를 사용하여 CLS 규격 라이브러리를 만드는 개발자) 및 extender(CLS 규격 구성 요소를 생성하는 언어 컴파일러 또는 코드 파서 등의 도구를 만드는 개발자)에게 적용되는 CLS 규격에 대한 각 규칙을 설명합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This article focuses on the rules as they apply to frameworks.</source>
          <target state="translated">이 문서에서는 프레임워크에 적용되는 규칙에 초점을 맞춥니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Note, though, that some of the rules that apply to extenders may also apply to assemblies that are created using <bpt id="p1">[</bpt>Reflection.Emit<ept id="p1">](xref:System.Reflection.Emit)</ept>.</source>
          <target state="translated">그러나 extender에 적용되는 규칙 중 일부는 <bpt id="p1">[</bpt>Reflection.Emit<ept id="p1">](xref:System.Reflection.Emit)</ept>를 사용하여 만든 어셈블리에도 적용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>To design a component that is language independent, you only need to apply the rules for CLS compliance to your component's public interface.</source>
          <target state="translated">언어 독립적인 구성 요소를 디자인하려면 CLS 규격의 규칙을 구성 요소의 공용 인터페이스에 적용하기만 하면 됩니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Your private implementation does not have to conform to the specification.</source>
          <target state="translated">private 구현은 사양을 준수할 필요가 없습니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The rules for CLS compliance apply only to a component's public interface, not to its private implementation.</source>
          <target state="translated">CLS 규격의 규칙은 구성 요소의 public 인터페이스에만 적용되고 private 구현에는 적용되지 않습니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>For example, unsigned integers other than <bpt id="p1">[</bpt>Byte<ept id="p1">](xref:System.Byte)</ept> are not CLS-compliant.</source>
          <target state="translated">예를 들어 <bpt id="p1">[</bpt>Byte<ept id="p1">](xref:System.Byte)</ept> 이외의 부호 없는 정수는 CLS 규격이 아닙니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Because the <ph id="ph1">`Person`</ph> class in the following example exposes an <ph id="ph2">`Age`</ph> property of type <bpt id="p1">[</bpt>UInt16<ept id="p1">](xref:System.UInt16)</ept>, the following code displays a compiler warning.</source>
          <target state="translated">다음 예제의 <ph id="ph1">`Person`</ph> 클래스는 <bpt id="p1">[</bpt>UInt16<ept id="p1">](xref:System.UInt16)</ept> 형식의 <ph id="ph2">`Age`</ph> 속성을 표시하므로 다음 코드에서 컴파일러 경고가 표시됩니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>You can make the Person class CLS-compliant by changing the type of <ph id="ph1">`Age`</ph> property from <ph id="ph2">`UInt16`</ph> to <bpt id="p1">[</bpt>Int16<ept id="p1">](xref:System.Int16)</ept>, which is a CLS-compliant, 16-bit signed integer.</source>
          <target state="translated"><ph id="ph1">`Age`</ph> 속성의 형식을 <ph id="ph2">`UInt16`</ph>에서 CLS 규격 16비트 부호 있는 정수인 <bpt id="p1">[</bpt>Int16<ept id="p1">](xref:System.Int16)</ept>으로 변경하여 Person 클래스를 CLS 규격으로 만들 수 있습니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>You do not have to change the type of the private <ph id="ph1">`personAge`</ph> field.</source>
          <target state="translated">private <ph id="ph1">`personAge`</ph> 필드의 형식을 변경할 필요가 없습니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>A library's public interface consists of the following:</source>
          <target state="translated">라이브러리의 공용 인터페이스는 다음으로 구성됩니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Definitions of public classes.</source>
          <target state="translated">공용 클래스의 정의</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Definitions of the public members of public classes, and definitions of members accessible to derived classes (that is, protected members).</source>
          <target state="translated">공용 클래스의 공용 멤버에 대한 정의 및 파생 클래스에서 액세스할 수 있는 멤버에 대한 정의(즉, protected 멤버)</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Parameters and return types of public methods of public classes, and parameters and return types of methods accessible to derived classes.</source>
          <target state="translated">공용 클래스의 공용 메서드에 대한 매개 변수 및 반환 형식, 파생 클래스에서 액세스할 수 있는 메서드에 대한 매개 변수 및 반환 형식</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The rules for CLS compliance are listed in the following table.</source>
          <target state="translated">CLS 규격의 규칙은 다음 표에 나와 있습니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The text of the rules is taken verbatim from the <bpt id="p1">[</bpt>ECMA-335 Standard: Common Language Infrastructure<ept id="p1">](http://www.ecma-international.org/publications/standards/Ecma-335.htm)</ept>, which is Copyright 2012 by Ecma International.</source>
          <target state="translated">규칙 텍스트는 <bpt id="p1">[</bpt>ECMA-335 Standard: Common Language Infrastructure<ept id="p1">](http://www.ecma-international.org/publications/standards/Ecma-335.htm)</ept>에서 그대로 가져온 것으로, Copyright 2012 by Ecma International입니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>More detailed information about these rules is found in the following sections.</source>
          <target state="translated">이러한 규칙에 대한 보다 자세한 내용은 다음 섹션에서 찾을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Category</source>
          <target state="translated">범주</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>See</source>
          <target state="translated">참조</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Rule</source>
          <target state="translated">규칙</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Rule Number</source>
          <target state="translated">규칙 번호</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Accessibility</source>
          <target state="translated">접근성</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Member accessibility<ept id="p1">](#member-accessibility)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>멤버 접근성<ept id="p1">](#member-accessibility)</ept></target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Accessibility shall not be changed when overriding inherited methods, except when overriding a method inherited from a different assembly with accessibility <ph id="ph1">`family-or-assembly`</ph>.</source>
          <target state="translated"><ph id="ph1">`family-or-assembly`</ph> 액세스 가능성을 갖는 다른 어셈블리에서 상속된 메서드를 재정의하는 경우를 제외하고는, 상속된 메서드를 재정의할 때 액세스 가능성이 변경되어서는 안 됩니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>In this case, the override shall have accessibility <ph id="ph1">`family`</ph>.</source>
          <target state="translated">이 경우, 재정의는 <ph id="ph1">`family`</ph> 액세스 가능성을 가져야 합니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>10</source>
          <target state="translated">10</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Accessibility</source>
          <target state="translated">접근성</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Member accessibility<ept id="p1">](#member-accessibility)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>멤버 접근성<ept id="p1">](#member-accessibility)</ept></target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The visibility and accessibility of types and members shall be such that types in the signature of any member shall be visible and accessible whenever the member itself is visible and accessible.</source>
          <target state="translated">형식과 멤버의 표시 유형 및 접근성은 해당 멤버가 표시되고 액세스 가능한 경우 모든 멤버의 시그니처에 있는 해당 형식이 표시되고 액세스 가능해야 합니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>For example, a public method that is visible outside its assembly shall not have an argument whose type is visible only within the assembly.</source>
          <target state="translated">예를 들어 어셈블리 외부에 표시되는 공용 메서드는 어셈블리 내부에서만 표시되는 형식의 인수를 가질 수 없습니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The visibility and accessibility of types composing an instantiated generic type used in the signature of any member shall be visible and accessible whenever the member itself is visible and accessible.</source>
          <target state="translated">해당 멤버가 표시되고 액세스 가능한 경우 모든 멤버의 시그니처에 사용된 인스턴스화된 제네릭 형식을 구성하는 형식의 표시 유형과 액세스 가능성은 표시되고 액세스 가능해야 합니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>For example, an instantiated generic type present in the signature of a member that is visible outside its assembly shall not have a generic argument whose type is visible only within the assembly.</source>
          <target state="translated">예를 들어 어셈블리 외부에 표시되는 멤버의 시그니처에 있는 인스턴스화된 제네릭 형식은 어셈블리 내부에서만 표시되는 형식의 제네릭 인수를 가질 수 없습니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>12</source>
          <target state="translated">12</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Arrays</source>
          <target state="translated">배열</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Arrays<ept id="p1">](#arrays)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>배열<ept id="p1">](#arrays)</ept></target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Arrays shall have elements with a CLS-compliant type, and all dimensions of the array shall have lower bounds of zero.</source>
          <target state="translated">배열에는 CLS 규격 형식의 요소가 있어야 하며 배열의 모든 차원은 하한이 0이어야 합니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Only the fact that an item is an array and the element type of the array shall be required to distinguish between overloads.</source>
          <target state="translated">항목은 배열이며 이 배열의 요소 형식은 오버로드 간에 구분되어야 합니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>When overloading is based on two or more array types the element types shall be named types.</source>
          <target state="translated">오버로드가 2개 이상의 배열 형식에 기반하는 경우 요소 형식은 명명된 형식이어야 합니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>16</source>
          <target state="translated">16</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Attributes</source>
          <target state="translated">특성</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Attributes<ept id="p1">](#attributes)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>특성<ept id="p1">](#attributes)</ept></target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Attributes shall be of type <bpt id="p1">[</bpt>System.Attribute<ept id="p1">](xref:System.Attribute)</ept>, or a type inheriting from it.</source>
          <target state="translated">특성은 <bpt id="p1">[</bpt>System.Attribute<ept id="p1">](xref:System.Attribute)</ept> 형식 또는 이 형식에서 상속받는 형식입니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>41</source>
          <target state="translated">41</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Attributes</source>
          <target state="translated">특성</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Attributes<ept id="p1">](#attributes)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>특성<ept id="p1">](#attributes)</ept></target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The CLS only allows a subset of the encodings of custom attributes.</source>
          <target state="translated">CLS에서는 사용자 지정 특성 인코딩의 하위 집합만을 허용합니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The only types that shall appear in these encodings are (see Partition IV): <bpt id="p1">[</bpt>System.Type<ept id="p1">](xref:System.Type)</ept>, <bpt id="p2">[</bpt>System.String<ept id="p2">](xref:System.String)</ept>, <bpt id="p3">[</bpt>System.Char<ept id="p3">](xref:System.Char)</ept>, <bpt id="p4">[</bpt>System.Boolean<ept id="p4">](xref:System.Boolean)</ept>, <bpt id="p5">[</bpt>System.Byte<ept id="p5">](xref:System.Byte)</ept>, <bpt id="p6">[</bpt>System.Int16<ept id="p6">](xref:System.Int16)</ept>, <bpt id="p7">[</bpt>System.Int32<ept id="p7">](xref:System.Int32)</ept>, <bpt id="p8">[</bpt>System.Int64<ept id="p8">](xref:System.Int64)</ept>, <bpt id="p9">[</bpt>System.Single<ept id="p9">](xref:System.Single)</ept>, <bpt id="p10">[</bpt>System.Double<ept id="p10">](xref:System.Double)</ept>, and any enumeration type based on a CLS-compliant base integer type.</source>
          <target state="translated">이러한 인코딩에 표시되는 형식은(Partition IV 참조) <bpt id="p1">[</bpt>System.Type<ept id="p1">](xref:System.Type)</ept>, <bpt id="p2">[</bpt>System.String<ept id="p2">](xref:System.String)</ept>, <bpt id="p3">[</bpt>System.Char<ept id="p3">](xref:System.Char)</ept>, <bpt id="p4">[</bpt>System.Boolean<ept id="p4">](xref:System.Boolean)</ept>, <bpt id="p5">[</bpt>System.Byte<ept id="p5">](xref:System.Byte)</ept>, <bpt id="p6">[</bpt>System.Int16<ept id="p6">](xref:System.Int16)</ept>, <bpt id="p7">[</bpt>System.Int32<ept id="p7">](xref:System.Int32)</ept>, <bpt id="p8">[</bpt>System.Int64<ept id="p8">](xref:System.Int64)</ept>, <bpt id="p9">[</bpt>System.Single<ept id="p9">](xref:System.Single)</ept>, <bpt id="p10">[</bpt>System.Double<ept id="p10">](xref:System.Double)</ept> 및 CLS 규격 기본 정수 형식을 기반으로 하는 열거형 형식뿐입니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>34</source>
          <target state="translated">34</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Attributes</source>
          <target state="translated">특성</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Attributes<ept id="p1">](#attributes)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>특성<ept id="p1">](#attributes)</ept></target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The CLS does not allow publicly visible required modifiers (<ph id="ph1">`modreq`</ph>, see Partition II), but does allow optional modifiers (<ph id="ph2">`modopt`</ph>, see Partition II) it does not understand.</source>
          <target state="translated">CLS에서는 공개적으로 표시되는 필수 한정자(<ph id="ph1">`modreq`</ph>)를 허용하지 않지만, CLS에서 인식할 수 없는 선택적 한정자(<ph id="ph2">`modopt`</ph>, Partition II 참조)는 허용합니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>35</source>
          <target state="translated">35</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Constructors</source>
          <target state="translated">생성자</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Constructors<ept id="p1">](#constructors)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>생성자<ept id="p1">](#constructors)</ept></target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>An object constructor shall call some instance constructor of its base class before any access occurs to inherited instance data.</source>
          <target state="translated">개체 생성자는 상속된 인스턴스 데이터에 액세스하기 전에 기본 클래스의 일부 인스턴스 생성자를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>(This does not apply to value types, which need not have constructors.)</source>
          <target state="translated">(생성자가 필요하지 않은 값 형식에는 적용되지 않습니다.)</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>21</source>
          <target state="translated">21</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Constructors</source>
          <target state="translated">생성자</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Constructors<ept id="p1">](#constructors)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>생성자<ept id="p1">](#constructors)</ept></target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>An object constructor shall not be called except as part of the creation of an object, and an object shall not be initialized twice.</source>
          <target state="translated">개체 생성자는 개체 만들기 작업의 일부로 호출되는 것을 제외하고 호출되어서는 안 되며 개체는 두 번 초기화해서는 안 됩니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>22</source>
          <target state="translated">22</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Enumerations</source>
          <target state="translated">열거형</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Enumerations<ept id="p1">](#enumerations)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>열거형<ept id="p1">](#enumerations)</ept></target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The underlying type of an enum shall be a built-in CLS integer type, the name of the field shall be "value__", and that field shall be marked <ph id="ph1">`RTSpecialName`</ph>.</source>
          <target state="translated">열거형의 기본 형식은 기본 제공 CLS 정수 형식이고, 필드의 이름은 "value__"이며, 해당 필드는 <ph id="ph1">`RTSpecialName`</ph>으로 표시되어야 합니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>7</source>
          <target state="translated">7</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Enumerations</source>
          <target state="translated">열거형</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Enumerations<ept id="p1">](#enumerations)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>열거형<ept id="p1">](#enumerations)</ept></target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>There are two distinct kinds of enums, indicated by the presence or absence of the <bpt id="p1">[</bpt>System.FlagsAttribute<ept id="p1">](xref:System.FlagsAttribute)</ept> (see Partition IV Library) custom attribute.</source>
          <target state="translated"><bpt id="p1">[</bpt>System.FlagsAttribute<ept id="p1">](xref:System.FlagsAttribute)</ept>(Partition IV 라이브러리 참조) 사용자 지정 특성의 존재 여부에 따라 지정되는 두 가지 종류의 열거형이 있습니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>One represents named integer values; the other represents named bit flags that can be combined to generate an unnamed value.</source>
          <target state="translated">하나는 명명된 정수 값을 나타내며, 다른 하나는 명명되지 않은 값을 생성하도록 결합될 수 있는 명명된 비트 플래그를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The value of an <ph id="ph1">`enum`</ph> is not limited to the specified values.</source>
          <target state="translated"><ph id="ph1">`enum`</ph>의 값은 지정된 값으로 제한되지 않습니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>8</source>
          <target state="translated">9</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Enumerations</source>
          <target state="translated">열거형</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Enumerations<ept id="p1">](#enumerations)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>열거형<ept id="p1">](#enumerations)</ept></target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Literal static fields of an enum shall have the type of the enum itself.</source>
          <target state="translated">열거형의 리터럴 정적 필드는 그 자체가 열거형 형식을 갖습니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>9</source>
          <target state="translated">10</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Events</source>
          <target state="translated">이벤트</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Events<ept id="p1">](#events)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>이벤트<ept id="p1">](#events)</ept></target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The methods that implement an event shall be marked <ph id="ph1">`SpecialName`</ph> in the metadata.</source>
          <target state="translated">이벤트를 구현하는 메서드는 메타데이터에서 <ph id="ph1">`SpecialName`</ph>으로 표시됩니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>29</source>
          <target state="translated">29</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Events</source>
          <target state="translated">이벤트</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Events<ept id="p1">](#events)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>이벤트<ept id="p1">](#events)</ept></target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The accessibility of an event and of its accessors shall be identical.</source>
          <target state="translated">이벤트와 접근자의 액세스 가능성이 동일해야 합니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>30</source>
          <target state="translated">30</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Events</source>
          <target state="translated">이벤트</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Events<ept id="p1">](#events)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>이벤트<ept id="p1">](#events)</ept></target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`add`</ph> and <ph id="ph2">`remove`</ph> methods for an event shall both either be present or absent.</source>
          <target state="translated">이벤트에 대한 <ph id="ph1">`add`</ph> 및 <ph id="ph2">`remove`</ph> 메서드는 모두 있거나 모두 없어야 합니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>31</source>
          <target state="translated">31</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Events</source>
          <target state="translated">이벤트</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Events<ept id="p1">](#events)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>이벤트<ept id="p1">](#events)</ept></target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`add`</ph>and <ph id="ph2">`remove`</ph> methods for an event shall each take one parameter whose type defines the type of the event and that shall be derived from <bpt id="p1">[</bpt>System.Delegate<ept id="p1">](xref:System.Delegate)</ept>.</source>
          <target state="translated">이벤트에 대한 <ph id="ph1">`add`</ph> 및 <ph id="ph2">`remove`</ph> 메서드는 이벤트 유형 정의 형식을 갖는 하나의 매개 변수를 각각 사용하며, 해당 형식은 <bpt id="p1">[</bpt>System.Delegate<ept id="p1">](xref:System.Delegate)</ept>에서 파생됩니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>32</source>
          <target state="translated">32</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Events</source>
          <target state="translated">이벤트</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Events<ept id="p1">](#events)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>이벤트<ept id="p1">](#events)</ept></target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Events shall adhere to a specific naming pattern.</source>
          <target state="translated">이벤트는 특정 이름 지정 패턴을 따라야 합니다.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The SpecialName attribute referred to in CLS rule 29 shall be ignored in appropriate name comparisons and shall adhere to identifier rules.</source>
          <target state="translated">CLS 규칙 29에서 참조되는 SpecialName 특성은 적절한 이름 비교에서 무시되고 식별자 규칙을 따릅니다.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>33</source>
          <target state="translated">33</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Exceptions</source>
          <target state="translated">예외</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Exceptions<ept id="p1">](#exceptions)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>예외<ept id="p1">](#exceptions)</ept></target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Objects that are thrown shall be of type <bpt id="p1">[</bpt>System.Exception<ept id="p1">](xref:System.Exception)</ept> or a type inheriting from it.</source>
          <target state="translated">throw되는 개체는 <bpt id="p1">[</bpt>System.Exception<ept id="p1">](xref:System.Exception)</ept> 형식 또는 이 형식에서 상속받는 형식입니다.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Nonetheless, CLS-compliant methods are not required to block the propagation of other types of exceptions.</source>
          <target state="translated">그렇더라도 다른 형식의 예외 전파를 차단하는 데 CLS 규격 메서드는 필요하지 않습니다.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>40</source>
          <target state="translated">40</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>General</source>
          <target state="translated">일반</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CLS compliance rules<ept id="p1">](#cls-compliance-rules)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>CLS 준수 규칙<ept id="p1">](#cls-compliance-rules)</ept></target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>CLS rules apply only to those parts of a type that are accessible or visible outsideof the defining assembly.</source>
          <target state="translated">CLS 규칙은 정의 어셈블리 외부에서 액세스하거나 볼 수 있는 형식의 해당 부분에만 적용됩니다.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>1</source>
          <target state="translated">1</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>General</source>
          <target state="translated">일반</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CLS compliance rules<ept id="p1">](#cls-compliance-rules)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>CLS 준수 규칙<ept id="p1">](#cls-compliance-rules)</ept></target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Members of non-CLS compliant types shall not be marked CLS-compliant.</source>
          <target state="translated">CLS 규격 형식이 아닌 멤버를 CLS 규격으로 표시해서는 안 됩니다.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>2</source>
          <target state="translated">2</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Generics</source>
          <target state="translated">제네릭</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Generic types and members<ept id="p1">](#generic-types-and-members)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>제네릭 형식 및 멤버<ept id="p1">](#generic-types-and-members)</ept></target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Nested types shall have at least as many generic parameters as the enclosing type.</source>
          <target state="translated">중첩 형식에는 적어도 바깥쪽 형식과 같은 수의 제네릭 매개 변수가 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Generic parameters in a nested type correspond by position to the generic parameters in its enclosing type.</source>
          <target state="translated">중첩 형식의 제네릭 매개 변수는 바깥쪽 형식의 제네릭 매개 변수와 위치가 같습니다.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>42</source>
          <target state="translated">42</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Generics</source>
          <target state="translated">제네릭</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Generic types and members<ept id="p1">](#generic-types-and-members)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>제네릭 형식 및 멤버<ept id="p1">](#generic-types-and-members)</ept></target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>The name of a generic type shall encode the number of type parameters declared on the non-nested type, or newly introduced to the type if nested, according to the rules defined above.</source>
          <target state="translated">제네릭 형식의 이름은 중첩되지 않은 형식이나 중첩된 경우 앞에서 정의된 규칙에 따라 새롭게 도입된 형식으로 선언된 형식 매개 변수의 개수를 인코딩합니다.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>43</source>
          <target state="translated">43</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Generics</source>
          <target state="translated">제네릭</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Generic types and members<ept id="p1">](#generic-types-and-members)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>제네릭 형식 및 멤버<ept id="p1">](#generic-types-and-members)</ept></target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>A generic type shall redeclare sufficient constraints to guarantee that any constraints on the base type, or interfaces would be satisfied by the generic type constraints.</source>
          <target state="translated">제네릭 형식에서는 제네릭 형식 제약 조건이 기본 형식이나 인터페이스에 대한 모든 제약 조건을 만족할 수 있도록 충분한 제약 조건을 다시 선언해야 합니다.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>44</source>
          <target state="translated">44</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Generics</source>
          <target state="translated">제네릭</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Generic types and members<ept id="p1">](#generic-types-and-members)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>제네릭 형식 및 멤버<ept id="p1">](#generic-types-and-members)</ept></target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Types used as constraints on generic parameters shall themselves be CLS-compliant.</source>
          <target state="translated">제네릭 매개 변수에 대한 제약 조건으로 사용되는 형식 자체는 CLS 규격이어야 합니다.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>45</source>
          <target state="translated">45</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Generics</source>
          <target state="translated">제네릭</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Generic types and members<ept id="p1">](#generic-types-and-members)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>제네릭 형식 및 멤버<ept id="p1">](#generic-types-and-members)</ept></target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>The visibility and accessibility of members (including nested types) in an instantiated generic type shall be considered to be scoped to the specific instantiation rather than the generic type declaration as a whole.</source>
          <target state="translated">인스턴스화된 제네릭 형식에서 중첩 형식을 포함한 멤버의 표시 여부와 액세스 가능성의 범위는 전체 제네릭 형식이 아닌 특정 인스턴스로 제한됩니다.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Assuming this, the visibility and accessibility rules of CLS rule 12 still apply.</source>
          <target state="translated">이러한 가정 하에 CLS 규칙 12의 표시 유형 및 액세스 가능성 규칙이 계속 적용됩니다.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>46</source>
          <target state="translated">46</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Generics</source>
          <target state="translated">제네릭</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Generic types and members<ept id="p1">](#generic-types-and-members)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>제네릭 형식 및 멤버<ept id="p1">](#generic-types-and-members)</ept></target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>For each abstract or virtual generic method, there shall be a default concrete (nonabstract) implementation</source>
          <target state="translated">각 추상 또는 가상 제네릭 메서드마다 구체적인(비추상) 기본 구현이 있습니다.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>47</source>
          <target state="translated">47</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Interfaces</source>
          <target state="translated">인터페이스</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Interfaces<ept id="p1">](#interfaces)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>인터페이스<ept id="p1">](#interfaces)</ept></target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>CLS-compliant interfaces shall not require the definition of non-CLS compliantmethods in order to implement them.</source>
          <target state="translated">CLS 규격 인터페이스는 구현을 위해 CLS 규격이 아닌 메서드의 정의가 필요하지 않습니다.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>18</source>
          <target state="translated">18</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Interfaces</source>
          <target state="translated">인터페이스</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Interfaces<ept id="p1">](#interfaces)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>인터페이스<ept id="p1">](#interfaces)</ept></target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>CLS-compliant interfaces shall not define static methods, nor shall they define fields.</source>
          <target state="translated">CLS 규격 인터페이스에서는 정적 메서드나 필드를 정의할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>19</source>
          <target state="translated">19</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Members</source>
          <target state="translated">멤버</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Type members in general<ept id="p1">](#type-members-in-general)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>형식 멤버 일반 사항<ept id="p1">](#type-members-in-general)</ept></target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Global static fields and methods are not CLS-compliant.</source>
          <target state="translated">전역 정적 필드 및 메서드는 CLS 규격입니다.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>36</source>
          <target state="translated">36</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Members</source>
          <target state="translated">멤버</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>The value of a literal static is specified through the use of field initialization metadata.</source>
          <target state="translated">리터럴 정적 값은 필드 초기화 메타데이터를 사용하여 지정됩니다.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>A CLS-compliant literal must have a value specified in field initialization metadata that is of exactly the same type as the literal (or of the underlying type, if that literal is an <ph id="ph1">`enum`</ph>).</source>
          <target state="translated">CLS 규격 리터럴에는 리터럴(또는 해당 리터럴이 <ph id="ph1">`enum`</ph>인 경우 기본 형식)과 정확히 같은 형식인 필드 초기화 메타데이터에 지정된 값이 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>13</source>
          <target state="translated">13</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Members</source>
          <target state="translated">멤버</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Type members in general<ept id="p1">](#type-members-in-general)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>형식 멤버 일반 사항<ept id="p1">](#type-members-in-general)</ept></target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>The vararg constraint is not part of the CLS, and the only calling convention supported by the CLS is the standard managed calling convention.</source>
          <target state="translated">vararg 제약 조건은 CLS의 일부가 아니며, CLS에서는 관리되는 표준 호출 규칙만 지원합니다.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>15</source>
          <target state="translated">15</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Naming conventions</source>
          <target state="translated">명명 규칙</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Naming conventions<ept id="p1">](#naming-conventions)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>명명 규칙<ept id="p1">](#naming-conventions)</ept></target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Assemblies shall follow Annex 7 of Technical Report 15 of the Unicode Standard3.0 governing the set of characters permitted to start and be included in identifiers, available online at <bpt id="p1">[</bpt>Unicode Normalization Forms<ept id="p1">](http://www.unicode.org/unicode/reports/tr15/tr15-18.html)</ept>.</source>
          <target state="translated">어셈블리는 시작하고 식별자에 포함할 수 있는 문자 집합을 규정하는 유니코드 표준 3.0 기술 보고서 15의 부록 7을 준수합니다. <bpt id="p1">[</bpt>Unicode Normalization Forms<ept id="p1">](http://www.unicode.org/unicode/reports/tr15/tr15-18.html)</ept>에서 온라인으로 확인할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Identifiers shall be in the canonical format defined by Unicode Normalization Form C. For CLS purposes, two identifiersare the same if their lowercase mappings (as specified by the Unicode locale-insensitive, one-to-one lowercase mappings) are the same.</source>
          <target state="translated">식별자는 유니코드 정규화 형식 C에서 정의된 정규 형식입니다. CLS에서 소문자 매핑(유니코드 로캘 비구분으로 지정된, 일 대 일 소문자 매핑)이 같은 두 개의 식별자는 서로 같습니다.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>That is, for two identifiers to be considered different under the CLS they shall differ in more than simply their case.</source>
          <target state="translated">즉, 두 식별자가 CLS에서 서로 다른 것으로 간주되는 경우 단순히 대/소문자 이상의 차이가 있습니다.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>However, in order to override an inherited definition the CLI requires the precise encoding of the original declaration be used.</source>
          <target state="translated">그러나 상속된 정의를 재정의하기 위해서는 CLI가 원래 선언에 정확한 인코딩을 사용해야 합니다.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>4</source>
          <target state="translated">4</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Overloading</source>
          <target state="translated">오버로딩</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Naming conventions<ept id="p1">](#naming-conventions)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>명명 규칙<ept id="p1">](#naming-conventions)</ept></target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>All names introduced in a CLS-compliant scope shall be distinct independent of kind, except where the names are identical and resolved via overloading.</source>
          <target state="translated">CLS 규격 범위에 소개된 모든 이름은 이름이 동일한 경우를 제외하고는 종류가 독립적이고 고유한 이름이어야 하며 오버로드를 통해 확인됩니다.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>That is, while the CTS allows a single type to use the same name for a method and a field, the CLS does not.</source>
          <target state="translated">즉, CTS에서는 메서드 및 필드에 동일한 이름을 사용하는 단일 형식이 허용되지만 CLS에서는 그렇지 않습니다.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>5</source>
          <target state="translated">5</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Overloading</source>
          <target state="translated">오버로딩</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Naming conventions<ept id="p1">](#naming-conventions)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>명명 규칙<ept id="p1">](#naming-conventions)</ept></target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Fields and nested types shall be distinct by identifier comparison alone, eventhough the CTS allows distinct signatures to be distinguished.</source>
          <target state="translated">CTS로 고유 시그니처가 구분될 수 있지만 필드 및 중첩 형식은 식별자 비교만으로 구분됩니다.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Methods, properties, and events that have the same name (by identifier comparison) shall differ by more than just the return type,except as specified in CLS Rule 39</source>
          <target state="translated">식별자를 비교했을 때 CLS 규칙 39에 지정된 경우를 제외하고 동일한 이름을 갖는 메서드, 속성 및 이벤트는 반환 형식 이상의 차이가 있습니다.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>6</source>
          <target state="translated">6</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Overloading</source>
          <target state="translated">오버로딩</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Overloads<ept id="p1">](#overloads)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>오버로드<ept id="p1">](#overloads)</ept></target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Only properties and methods can be overloaded.</source>
          <target state="translated">속성 및 메서드만 오버로드될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>37</source>
          <target state="translated">37</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Overloading</source>
          <target state="translated">오버로딩</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Overloads<ept id="p1">](#overloads)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>오버로드<ept id="p1">](#overloads)</ept></target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Properties and methods can be overloaded based only on the number and types of their parameters, except the conversion operators named <ph id="ph1">`op_Implicit`</ph> and <ph id="ph2">`op_Explicit`</ph>, which can also be overloaded based on their return type.</source>
          <target state="translated">반환 형식에 따라서도 오버로드될 수 있는 이름이 <ph id="ph1">`op_Implicit`</ph> 및 <ph id="ph2">`op_Explicit`</ph>인 변환 연산자를 제외하고, 속성 및 메서드는 매개 변수의 형식과 수에 따라서만 오버로드될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>38</source>
          <target state="translated">38</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Overloading</source>
          <target state="translated">오버로딩</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>If two or more CLS-compliant methods declared in a type have the same nameand, for a specific set of type instantiations, they have the same parameter and return types, then all these methods shall be semantically equivalent at those type instantiations.</source>
          <target state="translated">한 형식에서 선언된 둘 이상의 CLS 규격 메서드의 이름이 같고 형식 인스턴스화의 특정 집합에 대해 매개 변수와 반환 형식이 같다면 이러한 모든 메서드는 해당 형식 인스턴스화에서 의미상 동일합니다.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>48</source>
          <target state="translated">48</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Properties</source>
          <target state="translated">속성</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Properties<ept id="p1">](#properties)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>속성<ept id="p1">](#properties)</ept></target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>The methods that implement the getter and setter methods of a property shall be marked <ph id="ph1">`SpecialName`</ph> in the metadata.</source>
          <target state="translated">속성의 getter 및 setter 메서드를 구현하는 메서드는 메타데이터에서 <ph id="ph1">`SpecialName`</ph>으로 표시됩니다.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>24</source>
          <target state="translated">24</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Properties</source>
          <target state="translated">속성</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Properties<ept id="p1">](#properties)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>속성<ept id="p1">](#properties)</ept></target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>A property’s accessors shall all be static, all be virtual, or all be instance.</source>
          <target state="translated">속성의 접근자는 모두 static이거나 모두 virtual이거나 또는 모두 instance여야 합니다.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>26</source>
          <target state="translated">26</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Properties</source>
          <target state="translated">속성</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Properties<ept id="p1">](#properties)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>속성<ept id="p1">](#properties)</ept></target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>The type of a property shall be the return type of the getter and the type of the last argument of the setter.</source>
          <target state="translated">속성의 형식은 getter의 반환 형식이며 setter의 마지막 인수의 형식이어야 합니다.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>The types of the parameters of the property shall be the types of the parameters to the getter and the types of all but the final parameter of the setter.</source>
          <target state="translated">속성의 매개 변수 형식은 getter의 매개 변수 형식 및 setter의 마지막 매개 변수 형식을 제외한 모든 형식이어야 합니다.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>All of these types shall be CLS-compliant, and shall not be managed pointers (i.e., shall not be passed by reference).</source>
          <target state="translated">이들 형식은 모두 CLS 규격이어야 하며 관리되는 포인터일 수 없습니다. 즉, 참조로 전달될 수 없습니다.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>27</source>
          <target state="translated">27</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>Properties</source>
          <target state="translated">속성</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Properties<ept id="p1">](#properties)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>속성<ept id="p1">](#properties)</ept></target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Properties shall adhere to a specific naming pattern.</source>
          <target state="translated">속성은 특정 이름 지정 패턴을 따라야 합니다.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`SpecialName`</ph> attribute referred to in CLS rule 24 shall be ignored in appropriate name comparisons and shall adhere to identifier rules.</source>
          <target state="translated">CLS 규칙 24에서 참조되는 <ph id="ph1">`SpecialName`</ph> 특성은 적절한 이름 비교에서 무시되고 식별자 규칙을 따릅니다.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>A property shall have a getter method, a setter method, or both.</source>
          <target state="translated">속성에는 getter 메서드, setter 메서드 또는 둘 모두가 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>28</source>
          <target state="translated">28</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Type conversion</source>
          <target state="translated">형식 변환</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Type conversion<ept id="p1">](#type-conversion)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>형식 변환<ept id="p1">](#type-conversion)</ept></target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>If either op_Implicit or op_Explicit is provided, an alternate means of providing the coercion shall be provided.</source>
          <target state="translated">op_Implicit 또는 op_Explicit가 제공되는 경우 강제 변환을 제공하는 대체 방법이 제공됩니다.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>39</source>
          <target state="translated">39</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Types</source>
          <target state="translated">유형</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Types and type member signatures<ept id="p1">](#types-and-type-member-signatures)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>형식 및 형식 멤버 시그니처<ept id="p1">](#types-and-type-member-signatures)</ept></target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Boxed value types are not CLS-compliant.</source>
          <target state="translated">boxed 값 형식은 CLS 규격이 아닙니다.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>3</source>
          <target state="translated">3</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Types</source>
          <target state="translated">유형</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Types and type member signatures<ept id="p1">](#types-and-type-member-signatures)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>형식 및 형식 멤버 시그니처<ept id="p1">](#types-and-type-member-signatures)</ept></target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>All types appearing in a signature shall be CLS-compliant.</source>
          <target state="translated">시그니처에 나타나는 모든 형식은 CLS 규격이어야 합니다.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>All types composing an instantiated generic type shall be CLS-compliant.</source>
          <target state="translated">인스턴스화된 제네릭 형식을 구성하는 모든 형식은 CLS 규격이어야 합니다.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>11</source>
          <target state="translated">11</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Types</source>
          <target state="translated">유형</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Types and type member signatures<ept id="p1">](#types-and-type-member-signatures)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>형식 및 형식 멤버 시그니처<ept id="p1">](#types-and-type-member-signatures)</ept></target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Typed references are not CLS-compliant.</source>
          <target state="translated">형식화된 참조는 CLS 규격이 아닙니다.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>14</source>
          <target state="translated">14</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>Types</source>
          <target state="translated">유형</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Types and type member signatures<ept id="p1">](#types-and-type-member-signatures)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>형식 및 형식 멤버 시그니처<ept id="p1">](#types-and-type-member-signatures)</ept></target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Unmanaged pointer types are not CLS-compliant.</source>
          <target state="translated">관리되지 않는 포인터 형식은 CLS 규격이 아닙니다.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>17</source>
          <target state="translated">17</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Types</source>
          <target state="translated">유형</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Types and type member signatures<ept id="p1">](#types-and-type-member-signatures)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>형식 및 형식 멤버 시그니처<ept id="p1">](#types-and-type-member-signatures)</ept></target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>CLS-compliant classes, value types, and interfaces shall not require the implementation of non-CLS-compliant members</source>
          <target state="translated">CLS 규격 클래스, 값 형식 및 인터페이스에는 CLS 규격이 아닌 멤버 구현이 필요하지 않습니다.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>20</source>
          <target state="translated">20</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>Types</source>
          <target state="translated">유형</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Types and type member signatures<ept id="p1">](#types-and-type-member-signatures)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>형식 및 형식 멤버 시그니처<ept id="p1">](#types-and-type-member-signatures)</ept></target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.Object<ept id="p1">](xref:System.Object)</ept> is CLS-compliant.</source>
          <target state="translated"><bpt id="p1">[</bpt>System.Object<ept id="p1">](xref:System.Object)</ept>는 CLS 규격입니다.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>Any other CLS-compliant class shall inherit from a CLS-compliant class.</source>
          <target state="translated">다른 CLS 규격 클래스는 모두 CLS 규격 클래스에서 상속해야 합니다.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>23</source>
          <target state="translated">23</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>Types and type member signatures</source>
          <target state="translated">형식 및 형식 멤버 시그니처</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>System.Object<ept id="p1">](xref:System.Object)</ept> type is CLS-compliant and is the base type of all object types in the .NET Framework type system.</source>
          <target state="translated"><bpt id="p1">[</bpt>System.Object<ept id="p1">](xref:System.Object)</ept> 형식은 CLS 규격이고 .NET Framework 형식 시스템의 모든 개체 형식의 기본 형식입니다.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>Inheritance in the .NET Framework is either implicit (for example, the <bpt id="p1">[</bpt>String<ept id="p1">](xref:System.String)</ept> class implicitly inherits from the <ph id="ph1">`Object`</ph> class) or explicit (for example, the <bpt id="p2">[</bpt>CultureNotFoundException<ept id="p2">](xref:System.Globalization.CultureNotFoundException)</ept> class explicitly inherits from the <bpt id="p3">[</bpt>ArgumentException<ept id="p3">](xref:System.ArgumentException)</ept> class, which explicitly inherits from the <bpt id="p4">[</bpt>Exception<ept id="p4">](xref:System.Exception)</ept> class.</source>
          <target state="translated">.NET Framework의 상속은 암시적(예: <bpt id="p1">[</bpt>String<ept id="p1">](xref:System.String)</ept> 클래스는 <ph id="ph1">`Object`</ph> 클래스에서 암시적으로 상속받음)이거나 명시적(예: <bpt id="p2">[</bpt>CultureNotFoundException<ept id="p2">](xref:System.Globalization.CultureNotFoundException)</ept> 클래스는 <bpt id="p3">[</bpt>ArgumentException<ept id="p3">](xref:System.ArgumentException)</ept> 클래스에서 명시적으로 상속받고, 이 클래스는 다시 <bpt id="p4">[</bpt>Exception<ept id="p4">](xref:System.Exception)</ept> 클래스에서 명시적으로 상속받음)입니다.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>For a derived type to be CLS compliant, its base type must also be CLS-compliant.</source>
          <target state="translated">파생된 형식은 CLS 규격이어야 하며, 그 기본 형식도 CLS 규격이어야 합니다.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>The following example shows a derived type whose base type is not CLS-compliant.</source>
          <target state="translated">다음 예제에서는 기본 형식이 CLS 규격이 아닌 파생 형식을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>It defines a base <ph id="ph1">`Counter`</ph> class that uses an unsigned 32-bit integer as a counter.</source>
          <target state="translated">부호 없는 32비트 정수를 카운터로 사용하는 기본 <ph id="ph1">`Counter`</ph> 클래스를 정의합니다.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>Because the class provides counter functionality by wrapping an unsigned integer, the class is marked as non-CLS-compliant.</source>
          <target state="translated">이 클래스는 부호 없는 정수를 래핑하여 카운터 기능을 제공하므로 CLS 비규격으로 표시됩니다.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>As a result, a derived class, <ph id="ph1">`NonZeroCounter`</ph>, is also not CLS-compliant.</source>
          <target state="translated">따라서 파생된 클래스인 <ph id="ph1">`NonZeroCounter`</ph>도 CLS 규격이 아닙니다.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>All types that appear in member signatures, including a method's return type or a property type, must be CLS-compliant.</source>
          <target state="translated">메서드의 반환 형식 또는 속성 형식을 포함하여 멤버 시그니처에 나타나는 모든 형식은 CLS 규격이어야 합니다.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>In addition, for generic types:</source>
          <target state="translated">또한 제네릭 형식의 경우,</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>All types that compose an instantiated generic type must be CLS-compliant.</source>
          <target state="translated">인스턴스화된 제네릭 형식을 구성하는 모든 형식은 CLS 규격이어야 합니다.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>All types used as constraints on generic parameters must be CLS-compliant.</source>
          <target state="translated">제네릭 매개 변수에 대한 제약 조건으로 사용되는 모든 형식은 CLS 규격이어야 합니다.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>The .NET <bpt id="p1">[</bpt>common type system<ept id="p1">](common-type-system.md)</ept> includes a number of built-in types that are supported directly by the common language runtime and are specially encoded in an assembly's metadata.</source>
          <target state="translated">.NET <bpt id="p1">[</bpt>공용 형식 시스템<ept id="p1">](common-type-system.md)</ept>은 공용 언어 런타임에 의해 직접 지원되고 어셈블리의 메타데이터에서 특수 인코드되는 여러 기본 형식을 포함합니다.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>Of these intrinsic types, the types listed in the following table are CLS-compliant.</source>
          <target state="translated">이러한 내장 형식 중에서 다음 표에 나열된 형식은 CLS 규격입니다.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>CLS-compliant type</source>
          <target state="translated">CLS 규격 형식</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">설명</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Byte<ept id="p1">](xref:System.Byte)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Byte<ept id="p1">](xref:System.Byte)</ept></target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>8-bit unsigned integer</source>
          <target state="translated">8비트 부호 없는 정수</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Int16<ept id="p1">](xref:System.Int16)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Int16<ept id="p1">](xref:System.Int16)</ept></target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>16-bit signed integer</source>
          <target state="translated">16비트 부호 있는 정수</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Int32<ept id="p1">](xref:System.Int32)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Int32<ept id="p1">](xref:System.Int32)</ept></target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>32-bit signed integer</source>
          <target state="translated">32비트 부호 있는 정수</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Int64<ept id="p1">](xref:System.Int64)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Int64<ept id="p1">](xref:System.Int64)</ept></target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>64-bit signed integer</source>
          <target state="translated">64비트 부호 있는 정수</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Single<ept id="p1">](xref:System.Single)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Single<ept id="p1">](xref:System.Single)</ept></target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>Single-precision floating-point value</source>
          <target state="translated">단정밀도 부동 소수점 값</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Double<ept id="p1">](xref:System.Double)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Double<ept id="p1">](xref:System.Double)</ept></target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>Double-precision floating-point value</source>
          <target state="translated">배정밀도 부동 소수점 값</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Boolean<ept id="p1">](xref:System.Boolean)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Boolean<ept id="p1">](xref:System.Boolean)</ept></target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>true or false value type</source>
          <target state="translated">true 또는 false 값 형식</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Char<ept id="p1">](xref:System.Char)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Char<ept id="p1">](xref:System.Char)</ept></target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>UTF-16 encoded code unit</source>
          <target state="translated">UTF-16으로 인코딩된 코드 단위</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Decimal<ept id="p1">](xref:System.Decimal)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Decimal<ept id="p1">](xref:System.Decimal)</ept></target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>Non-floating-point decimal number</source>
          <target state="translated">비 부동 소수점 10진수</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>IntPtr<ept id="p1">](xref:System.IntPtr)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>IntPtr<ept id="p1">](xref:System.IntPtr)</ept></target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>Pointer or handle of a platform-defined size</source>
          <target state="translated">플랫폼 정의 크기의 포인터 또는 핸들</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>String<ept id="p1">](xref:System.String)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>String<ept id="p1">](xref:System.String)</ept></target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>Collection of zero, one, or more Char objects</source>
          <target state="translated">0개 또는 하나 이상의 Char 개체 컬렉션</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>The intrinsic types listed in the following table are not CLS-Compliant.</source>
          <target state="translated">다음 표에 나열된 내장 형식은 CLS 규격이 아닙니다.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>Non-compliant type</source>
          <target state="translated">비규격 형식</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">설명</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>CLS-compliant alternative</source>
          <target state="translated">CLS 규격 대체 항목</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>SByte<ept id="p1">](xref:System.SByte)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>SByte<ept id="p1">](xref:System.SByte)</ept></target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>8-bit signed integer data type</source>
          <target state="translated">8비트 부호 있는 정수 데이터 형식</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Int16<ept id="p1">](xref:System.Int16)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Int16<ept id="p1">](xref:System.Int16)</ept></target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>UInt16<ept id="p1">](xref:System.UInt16)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>UInt16<ept id="p1">](xref:System.UInt16)</ept></target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>16-bit unsigned integer</source>
          <target state="translated">16비트 부호 없는 정수</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Int32<ept id="p1">](xref:System.Int32)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Int32<ept id="p1">](xref:System.Int32)</ept></target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>UInt32<ept id="p1">](xref:System.UInt32)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>UInt32<ept id="p1">](xref:System.UInt32)</ept></target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>32-bit unsigned integer</source>
          <target state="translated">32비트 부호 없는 정수</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Int64<ept id="p1">](xref:System.Int64)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Int64<ept id="p1">](xref:System.Int64)</ept></target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>UInt64<ept id="p1">](xref:System.UInt64)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>UInt64<ept id="p1">](xref:System.UInt64)</ept></target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>64-bit unsigned integer</source>
          <target state="translated">64비트 부호 없는 정수</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Int64<ept id="p1">](xref:System.Int64)</ept> (may overflow), <bpt id="p2">[</bpt>BigInteger<ept id="p2">](xref:System.Numerics.BigInteger)</ept>, or <bpt id="p3">[</bpt>Double<ept id="p3">](xref:System.Double)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Int64<ept id="p1">](xref:System.Int64)</ept>(오버플로될 수 있음), <bpt id="p2">[</bpt>BigInteger<ept id="p2">](xref:System.Numerics.BigInteger)</ept> 또는 <bpt id="p3">[</bpt>Double<ept id="p3">](xref:System.Double)</ept></target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>UIntPtr<ept id="p1">](xref:System.UIntPtr)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>UIntPtr<ept id="p1">](xref:System.UIntPtr)</ept></target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>Unsigned pointer or handle</source>
          <target state="translated">부호 없는 포인터 또는 핸들</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>IntPtr<ept id="p1">](xref:System.IntPtr)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>IntPtr<ept id="p1">](xref:System.IntPtr)</ept></target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>The .NET Framework Class Library or any other class library may include other types that aren't CLS-compliant; for example:</source>
          <target state="translated">.NET Framework 클래스 라이브러리 또는 기타 다른 클래스 라이브러리는 다음 예시와 같은 CLS 규격이 아닌 기타 형식을 포함할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>Boxed value types.</source>
          <target state="translated">boxed 값 형식.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>The following C# example creates a class that has a public property of type <ph id="ph1">`int`</ph><bpt id="p1">*</bpt> named <ph id="ph2">`Value`</ph>. Because an <ph id="ph3">`int`</ph><ept id="p1">*</ept> is a boxed value type, the compiler flags it as non-CLS-compliant.</source>
          <target state="translated">다음 C# 예제에서는 이름이 <ph id="ph2">`Value`</ph>인 <ph id="ph1">`int`</ph><bpt id="p1">*</bpt> 형식의 public 속성이 있는 클래스를 만듭니다. <ph id="ph3">`int`</ph><ept id="p1">*</ept>는 boxed 값 형식이므로 컴파일러에서 CLS 비규격으로 플래그를 지정합니다.</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>Typed references, which are special constructs that contain a reference to an object and a reference to a type.</source>
          <target state="translated">형식화된 참조란 개체에 대한 참조 및 형식에 대한 참조를 포함하는 특수 생성자로서,</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>If a type is not CLS-compliant, you should apply the <bpt id="p1">[</bpt>CLSCompliantAttribute<ept id="p1">](xref:System.CLSCompliantAttribute)</ept> attribute with an <bpt id="p2">*</bpt>isCompliant<ept id="p2">*</ept> parameter with a value of <ph id="ph1">`false`</ph> to it.</source>
          <target state="translated">형식이 CLS 규격이 아닌 경우 <bpt id="p2">*</bpt>isCompliant<ept id="p2">*</ept> 매개 변수를 <ph id="ph1">`false`</ph> 값으로 지정하여 <bpt id="p1">[</bpt>CLSCompliantAttribute<ept id="p1">](xref:System.CLSCompliantAttribute)</ept> 특성을 적용해야 합니다.</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>CLSCompliantAttribute attribute<ept id="p1">](#the-clscompliantattribute-attribute)</ept> section.</source>
          <target state="translated">자세한 내용은 <bpt id="p1">[</bpt>CLSCompliantAttribute 특성<ept id="p1">](#the-clscompliantattribute-attribute)</ept> 섹션을 참조하세요.</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>The following example illustrates the problem of CLS compliance in a method signature and in generic type instantiation.</source>
          <target state="translated">다음 예제에서는 메서드 시그니처와 제네릭 형식 인스턴스화의 CLS 규격 문제를 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>It defines an <ph id="ph1">`InvoiceItem`</ph> class with a property of type <bpt id="p1">[</bpt>UInt32<ept id="p1">](xref:System.UInt32)</ept>, a property of type <bpt id="p2">[</bpt>Nullable(Of UInt32)<ept id="p2">](xref:System.Nullable%601)</ept>, and a constructor with parameters of type <ph id="ph2">`UInt32`</ph> and <ph id="ph3">`Nullable(Of UInt32)`</ph>.</source>
          <target state="translated"><ph id="ph1">`InvoiceItem`</ph> 클래스를 <bpt id="p1">[</bpt>UInt32<ept id="p1">](xref:System.UInt32)</ept> 형식의 속성, <bpt id="p2">[</bpt>Nullable(Of UInt32)<ept id="p2">](xref:System.Nullable%601)</ept> 형식의 속성, <ph id="ph2">`UInt32`</ph> 및 <ph id="ph3">`Nullable(Of UInt32)`</ph> 형식의 매개 변수가 있는 생성자로 정의합니다.</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>You get four compiler warnings when you try to compile this example.</source>
          <target state="translated">이 예제를 컴파일하려고 할 때 4개의 컴파일러 경고가 표시됩니다.</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>To eliminate the compiler warnings, replace the non-CLS-compliant types in the <ph id="ph1">`InvoiceItem`</ph> public interface with compliant types:</source>
          <target state="translated">컴파일러 경고를 없애려면 <ph id="ph1">`InvoiceItem`</ph> 공용 인터페이스의 CLS 규격이 아닌 형식을 CLS 규격 형식으로 대체합니다.</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>In addition to the specific types listed, some categories of types are not CLS compliant.</source>
          <target state="translated">나열된 특정 형식 외에도 일부 형식 범주가 CLS 규격이 아닙니다.</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>These include unmanaged pointer types and function pointer types.</source>
          <target state="translated">여기에는 관리되지 않는 포인터 형식 및 함수 포인터 형식이 포함됩니다.</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>The following example generates a compiler warning because it uses a pointer to an integer to create an array of integers.</source>
          <target state="translated">다음 예제에서는 정수에 대한 포인터를 사용하여 정수 배열을 만들기 때문에 컴파일러 경고가 발생합니다.</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>For CLS-compliant abstract classes (that is, classes marked as <ph id="ph1">`abstract`</ph> in C#), all members of the class must also be CLS-compliant.</source>
          <target state="translated">CLS 규격인 추상 클래스(C#에서 <ph id="ph1">`abstract`</ph>로 표시된 클래스)의 경우 이 클래스의 모든 멤버 역시 CLS 규격이어야 합니다.</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>Naming conventions</source>
          <target state="translated">명명 규칙</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>Because some programming languages are case-insensitive, identifiers (such as the names of namespaces, types, and members) must differ by more than case.</source>
          <target state="translated">일부 프로그래밍 언어에서는 대/소문자를 구분하기 때문에 식별자(네임스페이스, 형식 및 멤버 이름 등)는 대/소문자 그 이상의 차이가 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>Two identifiers are considered equivalent if their lowercase mappings are the same.</source>
          <target state="translated">소문자 매핑이 같은 두 개의 식별자는 서로 동일한 것으로 간주됩니다.</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>The following C# example defines two public classes, <ph id="ph1">`Person`</ph> and <ph id="ph2">`person`</ph>.</source>
          <target state="translated">다음 C# 예제에서는 <ph id="ph1">`Person`</ph> 및 <ph id="ph2">`person`</ph>이라는 두 가지 공용 클래스를 정의합니다.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>Because they differ only by case, the C# compiler flags them as not CLS-compliant.</source>
          <target state="translated">이들 클래스는 대/소문자만 다르므로 C# 컴파일러는 CLS 규격이 아니라는 플래그를 지정합니다.</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>Programming language identifiers, such as the names of namespaces, types, and members, must conform to the <bpt id="p1">[</bpt>Unicode Standard 3.0, Technical Report 15, Annex 7<ept id="p1">](http://www.unicode.org/reports/tr15/tr15-18.html)</ept>.</source>
          <target state="translated">네임스페이스, 형식 및 멤버의 이름과 같은 언어 식별자 프로그래밍은 <bpt id="p1">[</bpt>유니코드 표준 3.0, 기술 보고서 15, 부록 7<ept id="p1">](http://www.unicode.org/reports/tr15/tr15-18.html)</ept>을 준수해야 합니다.</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>This means that:</source>
          <target state="translated">이는 다음을 의미합니다.</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>The first character of an identifier can be any Unicode uppercase letter, lowercase letter, title case letter, modifier letter, other letter, or letter number.</source>
          <target state="translated">식별자의 첫 문자로는 유니코드 대문자, 소문자, 제목 대/소문자, 한정자 문자, 기타 문자 또는 문자 숫자가 올 수 있습니다.</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>For information on Unicode character categories, see the <bpt id="p1">[</bpt>System.Globalization.UnicodeCategory<ept id="p1">](xref:System.Globalization.UnicodeCategory)</ept> enumeration.</source>
          <target state="translated">유니코드 문자 범주에 대한 자세한 내용은 <bpt id="p1">[</bpt>System.Globalization.UnicodeCategory<ept id="p1">](xref:System.Globalization.UnicodeCategory)</ept> 열거형을 참조하세요.</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>Subsequent characters can be from any of the categories as the first character, and can also include non-spacing marks, spacing combining marks, decimal numbers, connector punctuations, and formatting codes.</source>
          <target state="translated">연속되는 문자는 첫 번째 문자로서 가능한 모든 범주의 문자가 올 수 있으며 간격 없음 표시, 간격 결합 기호, 10진수, 연결 문장 부호 및 형식 지정 코드를 포함할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>Before you compare identifiers, you should filter out formatting codes and convert the identifiers to Unicode Normalization Form C, because a single character can be represented by multiple UTF-16-encoded code units.</source>
          <target state="translated">단일 문자를 다중 UTF-16 인코딩 코드 단위로 표시할 수 있으므로 식별자를 비교하기 전에 형식 지정 코드를 필터링하고 식별자를 유니코드 정규화 형식 C로 변환해야 합니다.</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>Character sequences that produce the same code units in Unicode Normalization Form C are not CLS-compliant.</source>
          <target state="translated">유니코드 정규화 형식 C에서 동일한 코드 단위를 만드는 문자 시퀀스는 CLS 규격이 아닙니다.</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>The following example defines a property named <ph id="ph1">`Å`</ph>, which consists of the character ANGSTROM SIGN (U+212B), and a second property named <ph id="ph2">`Å`</ph> which consists of the character LATIN CAPITAL LETTER A WITH RING ABOVE (U+00C5).</source>
          <target state="translated">다음 예제에서는 ANGSTROM SIGN(U+212B) 문자로 구성된 <ph id="ph1">`Å`</ph>라는 속성과 LATIN CAPITAL LETTER A WITH RING ABOVE(U+00C5) 문자로 구성된 두 번째 <ph id="ph2">`Å`</ph>라는 속성을 정의합니다.</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>The C# compiler flags the source code as non-CLS-compliant.</source>
          <target state="translated">C# 컴파일러는 소스 코드에 CLS 비규격으로 플래그를 지정합니다.</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>Member names within a particular scope (such as the namespaces within an assembly, the types within a namespace, or the members within a type) must be unique except for names that are resolved through overloading.</source>
          <target state="translated">오버로드를 통해 확인되는 이름을 제외한 특정 범위 내의 멤버 이름(예: 어셈블리 내 네임스페이스, 네임스페이스 내 형식 또는 형식 내 멤버)은 고유해야 합니다.</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>This requirement is more stringent than that of the common type system, which allows multiple members within a scope to have identical names as long as they are different kinds of members (for example, one is a method and one is a field).</source>
          <target state="translated">이 요구 사항은 한 범위 내의 여러 멤버가 다른 종류의 멤버인 경우(예를 들어 하나는 메서드이고 하나는 필드인 경우) 고유한 이름을 사용할 수 있는 공용 형식 시스템의 요구 사항보다 더 엄격합니다.</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>In particular, for type members:</source>
          <target state="translated">특히, 형식 멤버가</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>Fields and nested types are distinguished by name alone.</source>
          <target state="translated">필드 및 중첩된 형식인 경우 이름으로만 구분됩니다.</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>Methods, properties, and events that have the same name must differ by more than just return type.</source>
          <target state="translated">이름이 같은 메서드, 속성 및 이벤트인 경우 반환 형식 이외의 차이점이 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>The following example illustrates the requirement that member names must be unique within their scope.</source>
          <target state="translated">다음 예제에서는 멤버 이름이 해당 범위 내에서 고유해야 한다는 요구 사항을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>It defines a class named <ph id="ph1">`Converter`</ph> that includes four members named <ph id="ph2">`Conversion`</ph>.</source>
          <target state="translated"><ph id="ph1">`Converter`</ph>이라는 4개 멤버를 포함하는 <ph id="ph2">`Conversion`</ph>라는 클래스를 정의합니다.</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>Three are methods, and one is a property.</source>
          <target state="translated">세 가지는 메서드이고 한 가지는 속성입니다.</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>The method that includes an <ph id="ph1">`Int64`</ph> parameter is uniquely named, but the two methods with an <ph id="ph2">`Int32`</ph> parameter are not, because return value is not considered a part of a member's signature.</source>
          <target state="translated"><ph id="ph1">`Int64`</ph> 매개 변수가 포함된 메서드의 이름은 고유하지만, <ph id="ph2">`Int32`</ph> 매개 변수가 포함된 두 메서드의 이름은 반환 값이 멤버 시그니처의 일부로 간주되지 않으므로 고유하지 않습니다.</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Conversion`</ph> property also violates this requirement, because properties cannot have the same name as overloaded methods.</source>
          <target state="translated">속성은 오버로드된 메서드와 동일한 이름을 가질 수 없으므로 <ph id="ph1">`Conversion`</ph> 속성 또한 이 요구 사항을 위반합니다.</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>Individual languages include unique keywords, so languages that target the common language runtime must also provide some mechanism for referencing identifiers (such as type names) that coincide with keywords.</source>
          <target state="translated">개별 언어는 고유 키워드를 포함하기 때문에 공용 언어 런타임을 대상으로 하는 언어는 키워드와 일치하는 식별자(예: 형식 이름)를 참조하기 위한 일부 메커니즘도 제공해야 합니다.</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`case`</ph> is a keyword in both C# and Visual Basic.</source>
          <target state="translated">예를 들어, <ph id="ph1">`case`</ph>는 C# 및 Visual Basic 모두의 키워드입니다.</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>However, the following Visual Basic example is able to disambiguate a class named <ph id="ph1">`case`</ph> from the <ph id="ph2">`case`</ph> keyword by using opening and closing braces.</source>
          <target state="translated">그러나 다음 Visual Basic 예제에서는 열고 닫는 중괄호를 사용하여 <ph id="ph1">`case`</ph> 키워드에서 <ph id="ph2">`case`</ph>라는 이름의 클래스를 구분할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>Otherwise, the example would produce the error message, "Keyword is not valid as an identifier," and fail to compile.</source>
          <target state="translated">중괄호가 없다면 이 예제에서는 "키워드를 식별자로 사용할 수 없습니다."와 같은 오류 메시지가 발생하고 컴파일되지 않습니다.</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>The following C# example is able to instantiate the <ph id="ph1">`case`</ph> class by using the <ph id="ph2">@</ph> symbol to disambiguate the identifier from the language keyword.</source>
          <target state="translated">다음 C# 예제에서는 <ph id="ph1">`case`</ph> 기호를 사용하여 언어 키워드에서 식별자를 구분하여 <ph id="ph2">@</ph> 클래스를 인스턴스화할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>Without it, the C# compiler would display two error messages, "Type expected" and "Invalid expression term 'case'."</source>
          <target state="translated">이 기호가 없으면 C# 컴파일러에서는 "형식이 필요합니다" 및 "식의 'case' 항이 잘못되었습니다"라는 두 개의 오류 메시지가 표시됩니다.</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>Type conversion</source>
          <target state="translated">형식 변환</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>The Common Language Specification defines two conversion operators:</source>
          <target state="translated">공용 언어 사양은 다음과 같은 두 변환 연산자를 정의합니다.</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`op_Implicit`</ph>, which is used for widening conversions that do not result in loss of data or precision.</source>
          <target state="translated"><ph id="ph1">`op_Implicit`</ph>는 데이터 또는 정밀도가 손실되지 않는 확대 변환에 사용됩니다.</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>For example, the <bpt id="p1">[</bpt>Decimal<ept id="p1">](xref:System.Decimal)</ept> structure includes an overloaded <ph id="ph1">`op_Implicit`</ph> operator to convert values of integral types and <bpt id="p2">[</bpt>Char<ept id="p2">](xref:System.Char)</ept> values to <ph id="ph2">`Decimal`</ph> values.</source>
          <target state="translated">예를 들어 <bpt id="p1">[</bpt>Decimal<ept id="p1">](xref:System.Decimal)</ept> 구조체에 오버로드된 <ph id="ph1">`op_Implicit`</ph> 연산자를 포함하여 정수 형식의 값과 <bpt id="p2">[</bpt>Char<ept id="p2">](xref:System.Char)</ept> 값을 <ph id="ph2">`Decimal`</ph> 값으로 변환합니다.</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`op_Explicit`</ph>, which is used for narrowing conversions that can result in loss of magnitude (a value is converted to a value that has a smaller range) or precision.</source>
          <target state="translated"><ph id="ph1">`op_Explicit`</ph>는 크기 손실(보다 작은 범위의 값으로 변환) 또는 정밀도 손실이 발생할 수 있는 축소 변환에 사용됩니다.</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">`Decimal`</ph> structure includes an overloaded <ph id="ph2">`op_Explicit`</ph> operator to convert <bpt id="p1">[</bpt>Double<ept id="p1">](xref:System.Double)</ept> and <bpt id="p2">[</bpt>Single<ept id="p2">](xref:System.Single)</ept> values to <ph id="ph3">`Decimal`</ph> and to convert <ph id="ph4">`Decimal`</ph> values to integral values, <ph id="ph5">`Double`</ph>, <ph id="ph6">`Single`</ph>, and <ph id="ph7">`Char`</ph>.</source>
          <target state="translated">예를 들어 <ph id="ph1">`Decimal`</ph> 구조체에 오버로드된 <ph id="ph2">`op_Explicit`</ph>연산자를 포함하여 <bpt id="p1">[</bpt>Double<ept id="p1">](xref:System.Double)</ept> 및 <bpt id="p2">[</bpt>Single<ept id="p2">](xref:System.Single)</ept> 값을 <ph id="ph3">`Decimal`</ph> 값으로 변환하고, <ph id="ph4">`Decimal`</ph> 값을 정수 값, <ph id="ph5">`Double`</ph>, <ph id="ph6">`Single`</ph> 및 <ph id="ph7">`Char`</ph>로 변환합니다.</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>However, not all languages support operator overloading or the definition of custom operators.</source>
          <target state="translated">그러나 모든 언어가 연산자 오버로드 또는 사용자 지정 연산자 정의를 지원하는 것은 아닙니다.</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>If you choose to implement these conversion operators, you should also provide an alternate way to perform the conversion.</source>
          <target state="translated">이러한 변환 연산자를 구현하도록 선택한 경우, 변환을 수행하기 위한 다른 방법도 제공해야 합니다.</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>We recommend that you provide <ph id="ph1">`From`</ph>Xxx and <ph id="ph2">`To`</ph>Xxx methods.</source>
          <target state="translated"><ph id="ph1">`From`</ph>Xxx 및 <ph id="ph2">`To`</ph>Xxx 메서드를 제공하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>The following example defines CLS-compliant implicit and explicit conversions.</source>
          <target state="translated">다음 예제에서는 CLS 규격의 암시적 및 명시적 변환을 정의합니다.</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>It creates a <ph id="ph1">`UDouble`</ph>class that represents an signed double-precision, floating-point number.</source>
          <target state="translated">부호 있는 배정밀도, 부동 소수점 숫자를 나타내는 <ph id="ph1">`UDouble`</ph> 클래스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>It provides for implicit conversions from <ph id="ph1">`UDouble`</ph> to <ph id="ph2">`Double`</ph> and for explicit conversions from <ph id="ph3">`UDouble`</ph> to <ph id="ph4">`Single`</ph>, <ph id="ph5">`Double`</ph> to <ph id="ph6">`UDouble`</ph>, and <ph id="ph7">`Single`</ph> to <ph id="ph8">`UDouble`</ph>.</source>
          <target state="translated"><ph id="ph1">`UDouble`</ph>에서 <ph id="ph2">`Double`</ph>로의 암시적 변환 및 <ph id="ph3">`UDouble`</ph>에서 <ph id="ph4">`Single`</ph>로, <ph id="ph5">`Double`</ph>에서 <ph id="ph6">`UDouble`</ph>로, <ph id="ph7">`Single`</ph>에서 <ph id="ph8">`UDouble`</ph>로의 명시적 변환이 제공됩니다.</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>It also defines a <ph id="ph1">`ToDouble`</ph> method as an alternative to the implicit conversion operator and the <ph id="ph2">`ToSingle`</ph>, <ph id="ph3">`FromDouble`</ph>, and <ph id="ph4">`FromSingle`</ph> methods as alternatives to the explicit conversion operators.</source>
          <target state="translated">또한 <ph id="ph1">`ToDouble`</ph> 메서드를 암시적 변환 연산자에 대한 대안으로 정의하고 <ph id="ph2">`ToSingle`</ph>, <ph id="ph3">`FromDouble`</ph> 및 <ph id="ph4">`FromSingle`</ph> 메서드를 명시적 변환 연산자에 대한 대안으로 정의합니다.</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>Arrays</source>
          <target state="translated">배열</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>CLS-compliant arrays conform to the following rules:</source>
          <target state="translated">CLS 규격 배열은 다음 규칙을 따릅니다.</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>All dimensions of an array must have a lower bound of zero.</source>
          <target state="translated">배열의 모든 크기는 하한이 0이어야 합니다.</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>The following example creates a non-CLS-compliant array with a lower bound of one.</source>
          <target state="translated">다음 예제에서는 하한이 1인 CLS 비규격 배열을 만듭니다.</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>Note that, despite the presence of the <bpt id="p1">[</bpt>CLSCompliantAttribute<ept id="p1">](xref:System.CLSCompliantAttribute)</ept> attribute, the compiler does not detect that the array returned by the <ph id="ph1">`Numbers.GetTenPrimes`</ph> method is not CLS-compliant.</source>
          <target state="translated"><bpt id="p1">[</bpt>CLSCompliantAttribute<ept id="p1">](xref:System.CLSCompliantAttribute)</ept> 특성이 있음에도 불구하고 <ph id="ph1">`Numbers.GetTenPrimes`</ph> 메서드에서 반환된 배열이 CLS 규격이 아님을 컴파일러에서 감지하지 못합니다.</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>All array elements must consist of CLS-compliant types.</source>
          <target state="translated">모든 배열 요소는 CLS 규격 형식으로 구성되어야 합니다.</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>The following example defines two methods that return non-CLS-compliant arrays.</source>
          <target state="translated">다음 예제에서는 CLS 비규격 배열을 반환하는 두 개의 메서드를 정의합니다.</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>The first returns an array of <bpt id="p1">[</bpt>UInt32<ept id="p1">](xref:System.UInt32)</ept> values.</source>
          <target state="translated">첫 번째는 <bpt id="p1">[</bpt>UInt32<ept id="p1">](xref:System.UInt32)</ept> 값의 배열을 반환합니다.</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>The second returns an <bpt id="p1">[</bpt>Object<ept id="p1">](xref:System.Object)</ept> array that includes <bpt id="p2">[</bpt>Int32<ept id="p2">](xref:System.Int32)</ept> and <ph id="ph1">`UInt32`</ph> values.</source>
          <target state="translated">두 번째는 <bpt id="p2">[</bpt>Int32<ept id="p2">](xref:System.Int32)</ept> 및 <ph id="ph1">`UInt32`</ph> 값이 포함된 <bpt id="p1">[</bpt>Object<ept id="p1">](xref:System.Object)</ept> 배열을 반환합니다.</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>Although the compiler identifies the first array as non-compliant because of its <ph id="ph1">`UInt32`</ph> type, it fails to recognize that the second array includes non-CLS-compliant elements.</source>
          <target state="translated">컴파일러는 <ph id="ph1">`UInt32`</ph> 형식 때문에 첫 번째 배열을 비규격으로 식별하지만 두 번째 배열이 CLS 비규격 요소를 포함하는지 인식하지 못합니다.</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>Overload resolution for methods that have array parameters is based on the fact that they are arrays and on their element type.</source>
          <target state="translated">배열 매개 변수가 있는 메서드에 대한 오버로드 확인은 이들이 배열인지 여부와 해당 요소 형식을 기반으로 합니다.</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>For this reason, the following definition of an overloaded <ph id="ph1">`GetSquares`</ph> method is CLS-compliant.</source>
          <target state="translated">따라서 오버로드된 <ph id="ph1">`GetSquares`</ph> 메서드의 다음 정의는 CLS 규격입니다.</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>Interfaces</source>
          <target state="translated">인터페이스</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>CLS-compliant interfaces can define properties, events, and virtual methods (methods with no implementation).</source>
          <target state="translated">CLS 규격 인터페이스는 속성, 이벤트 및 가상 메서드를 정의할 수 있습니다(구현이 없는 메서드).</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>A CLS-compliant interface cannot have any of the following:</source>
          <target state="translated">CLS 규격 인터페이스에는 다음이 포함될 수 없습니다.</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>Static methods or static fields.</source>
          <target state="translated">정적 메서드 또는 정적 필드.</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>The C# compiler generatse compiler errors if you define a static member in an interface.</source>
          <target state="translated">인터페이스에서 정적 멤버를 정의할 경우 C# 컴파일러에서 컴파일러 오류가 발생합니다.</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>Fields.</source>
          <target state="translated">필드.</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>The C# acompiler generates compiler errors if you define a field in an interface.</source>
          <target state="translated">인터페이스에서 필드를 정의할 경우 C# 컴파일러에서 컴파일러 오류가 발생합니다.</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>Methods that are not CLS-compliant.</source>
          <target state="translated">CLS 규격이 아닌 메서드.</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>For example, the following interface definition includes a method, <ph id="ph1">`INumber.GetUnsigned`</ph>, that is marked as non-CLS-compliant.</source>
          <target state="translated">예를 들어 다음 인터페이스 정의에는 CLS 비규격으로 표시된 <ph id="ph1">`INumber.GetUnsigned`</ph> 메서드가 포함되어 있습니다.</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>This example generates a compiler warning.</source>
          <target state="translated">이 예제에서는 컴파일러 경고가 발생합니다.</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>Because of this rule, CLS-compliant types are not required to implement non-CLS-compliant members.</source>
          <target state="translated">이 규칙 때문에 CLS 규격이 아닌 멤버를 구현하는 데에는 CLS 규격 형식이 필요하지 않습니다.</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>If a CLS-compliant framework does expose a class that implements a non-CLS compliant interface, it should also provide concrete implementations of all non-CLS-compliant members.</source>
          <target state="translated">CLS 규격 프레임워크에서 CLS 비규격 인터페이스를 구현하는 클래스를 노출하는 경우, 모든 CLS 비규격 멤버의 구체적 구현도 제공해야 합니다.</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>CLS-compliant language compilers must also allow a class to provide separate implementations of members that have the same name and signature in multiple interfaces.</source>
          <target state="translated">CLS 규격 언어 컴파일러를 사용하면 클래스는 다중 인터페이스에서 동일한 이름과 시그니처를 가진 멤버를 개별적으로 구현할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>C# supports explicit interface implementations to provide different implementations of identically named methods.</source>
          <target state="translated">C#에서는 명시적 인터페이스 구현을 지원하여 동일한 이름의 메서드를 다르게 구현할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>The following example illustrates this scenario by defining a <ph id="ph1">`Temperature`</ph> class that implements the <ph id="ph2">`ICelsius`</ph> and <ph id="ph3">`IFahrenheit`</ph> interfaces as explicit interface implementations.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">`Temperature`</ph> 및 <ph id="ph2">`ICelsius`</ph> 인터페이스를 명시적 인터페이스 구현으로 구현하는 <ph id="ph3">`IFahrenheit`</ph> 클래스를 정의하여 이 시나리오를 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>Enumerations</source>
          <target state="translated">열거형</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>CLS-compliant enumerations must follow these rules:</source>
          <target state="translated">CLS 규격 열거형은 다음 규칙을 따라야 합니다.</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>The underlying type of the enumeration must be an intrinsic CLS-compliant integer (<bpt id="p1">[</bpt>Byte<ept id="p1">](xref:System.Byte)</ept>, <bpt id="p2">[</bpt>Int16<ept id="p2">](xref:System.Int16)</ept>, <bpt id="p3">[</bpt>Int32<ept id="p3">](xref:System.Int32)</ept>, or <bpt id="p4">[</bpt>Int64<ept id="p4">](xref:System.Int64)</ept>).</source>
          <target state="translated">열거형의 기본 형식은 내장 CLS 규격 정수(<bpt id="p1">[</bpt>Byte<ept id="p1">](xref:System.Byte)</ept>, <bpt id="p2">[</bpt>Int16<ept id="p2">](xref:System.Int16)</ept>, <bpt id="p3">[</bpt>Int32<ept id="p3">](xref:System.Int32)</ept> 또는 <bpt id="p4">[</bpt>Int64<ept id="p4">](xref:System.Int64)</ept>)여야 합니다.</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>For example, the following code tries to define an enumeration whose underlying type is <bpt id="p1">[</bpt>UInt32<ept id="p1">](xref:System.UInt32)</ept> and generates a compiler warning.</source>
          <target state="translated">예를 들어 다음 코드에서는 기본 형식이 <bpt id="p1">[</bpt>UInt32<ept id="p1">](xref:System.UInt32)</ept>이고 컴파일러 경고를 발생시키는 열거형을 정의하려 합니다.</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>An enumeration type must have a single instance field named <ph id="ph1">`Value__`</ph> that is marked with the <ph id="ph2">`FieldAttributes.RTSpecialName`</ph> attribute.</source>
          <target state="translated">열거형 형식에는 <ph id="ph1">`Value__`</ph> 특성으로 표시되는 <ph id="ph2">`FieldAttributes.RTSpecialName`</ph>라는 단일 인스턴스 필드가 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source>This enables you to reference the field value implicitly.</source>
          <target state="translated">이를 통해 필드 값을 암시적으로 참조할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>An enumeration includes literal static fields whose types match the type of the enumeration itself.</source>
          <target state="translated">열거형에는 형식이 해당 열거형의 형식과 일치하는 리터럴 정적 필드가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>For example, if you define a <ph id="ph1">`State`</ph> enumeration with values of <ph id="ph2">`State.On`</ph> and <ph id="ph3">`State.Off`</ph>, <ph id="ph4">`State.On`</ph> and <ph id="ph5">`State.Off`</ph> are both literal static fields whose type is <ph id="ph6">`State`</ph>.</source>
          <target state="translated">예를 들어 <ph id="ph1">`State`</ph> 및 <ph id="ph2">`State.On`</ph>의 값으로 <ph id="ph3">`State.Off`</ph> 열거형을 정의하는 경우, <ph id="ph4">`State.On`</ph> 및 <ph id="ph5">`State.Off`</ph>는 모두 <ph id="ph6">`State`</ph> 형식 리터럴 정적 필드입니다.</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>There are two kinds of enumerations:</source>
          <target state="translated">열거형에는 다음 두 가지 종류가 있습니다.</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>An enumeration that represents a set of mutually exclusive, named integer values.</source>
          <target state="translated">상호 배타적인 명명된 정수 값 집합을 나타내는 열거형.</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>This type of enumeration is indicated by the absence of the <bpt id="p1">[</bpt>System.FlagsAttribute<ept id="p1">](xref:System.FlagsAttribute)</ept> custom attribute.</source>
          <target state="translated">이러한 유형의 열거형은 <bpt id="p1">[</bpt>System.FlagsAttribute<ept id="p1">](xref:System.FlagsAttribute)</ept> 사용자 지정 특성이 없는 것으로 표시됩니다.</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>An enumeration that represents a set of bit flags that can combine to generate an unnamed value.</source>
          <target state="translated">결합하여 명명되지 않은 값을 생성할 수 있는 비트 플래그 집합을 나타내는 열거형.</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>This type of enumeration is indicated by the presence of the <bpt id="p1">[</bpt>System.FlagsAttribute<ept id="p1">](xref:System.FlagsAttribute)</ept> custom attribute.</source>
          <target state="translated">이러한 유형의 열거형은 <bpt id="p1">[</bpt>System.FlagsAttribute<ept id="p1">](xref:System.FlagsAttribute)</ept> 사용자 지정 특성이 있는 것으로 표시됩니다.</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source>For more information, see the documentation for the <bpt id="p1">[</bpt>Enum<ept id="p1">](xref:System.Enum)</ept> structure.</source>
          <target state="translated">자세한 내용은 <bpt id="p1">[</bpt>Enum<ept id="p1">](xref:System.Enum)</ept> 구조체에 대한 설명서를 참조하세요.</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>The value of an enumeration is not limited to the range of its specified values.</source>
          <target state="translated">열거형의 값은 지정된 값의 범위로 제한되지 않습니다.</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>In other words, the range of values in an enumeration is the range of its underlying value.</source>
          <target state="translated">즉, 열거형의 값 범위는 기본 값의 범위입니다.</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">`Enum.IsDefined`</ph> method to determine whether a specified value is a member of an enumeration.</source>
          <target state="translated"><ph id="ph1">`Enum.IsDefined`</ph> 메서드를 사용하여 지정된 값이 열거형 멤버인지 여부를 확인할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>Type members in general</source>
          <target state="translated">형식 멤버 일반 사항</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>The Common Language Specification requires all fields and methods to be accessed as members of a particular class.</source>
          <target state="translated">공용 언어 사양에서는 모든 필드와 메서드가 특정 클래스의 멤버로 액세스할 수 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>Therefore, global static fields and methods (that is, static fields or methods that are defined apart from a type) are not CLS-compliant.</source>
          <target state="translated">따라서 전역 정적 필드와 메서드(즉, 형식과 별도로 정의된 정적 필드 또는 메서드)는 CLS 규격이 아닙니다.</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>If you try to include a global field or method in your source code, the C# compiler generates a compiler error.</source>
          <target state="translated">소스 코드에 전역 필드 또는 메서드를 포함하려고 하면 C# 컴파일러에서 컴파일러 오류가 발생합니다.</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>The Common Language Specification supports only the standard managed calling convention.</source>
          <target state="translated">공용 언어 사양은 관리되는 표준 호출 규칙만 지원합니다.</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>It doesn't support unmanaged calling conventions and methods with variable argument lists marked with the <ph id="ph1">`varargs`</ph> keyword.</source>
          <target state="translated"><ph id="ph1">`varargs`</ph> 키워드로 표시된 가변 인수 목록을 사용하여 관리되지 않는 호출 규칙 및 메서드를 지원하지 않습니다.</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source>For variable argument lists that are compatible with the standard managed calling convention, use the <bpt id="p1">[</bpt>ParamArrayAttribute<ept id="p1">](xref:System.ParamArrayAttribute)</ept> attribute or the individual language's implementation, such as the <ph id="ph1">`params`</ph> keyword in C# and the <ph id="ph2">`ParamArray`</ph> keyword in Visual Basic.</source>
          <target state="translated">관리되는 표준 호출 규칙과 호환되는 가변 인수 목록을 얻으려면 <bpt id="p1">[</bpt>ParamArrayAttribute<ept id="p1">](xref:System.ParamArrayAttribute)</ept> 특성 또는 C#의 <ph id="ph1">`params`</ph> 키워드와 Visual Basic의 <ph id="ph2">`ParamArray`</ph> 키워드와 같은 개별 언어의 구현을 이용합니다.</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>Member accessibility</source>
          <target state="translated">멤버 접근성</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>Overriding an inherited member cannot change the accessibility of that member.</source>
          <target state="translated">상속된 멤버를 재정의하면 해당 멤버의 액세스 가능성을 변경할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>For example, a public method in a base class cannot be overridden by a private method in a derived class.</source>
          <target state="translated">예를 들어 파생된 클래스의 private 메서드가 기본 클래스의 public 메서드를 재정의할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>There is one exception: a <ph id="ph1">`protected internal`</ph> (in C#) or <ph id="ph2">`Protected Friend`</ph> (in Visual Basic) member in one assembly that is overridden by a type in a different assembly.</source>
          <target state="translated">한 가지 예외는 다른 어셈블리의 형식으로 재정의된 한 어셈블리에 있는 <ph id="ph1">`protected internal`</ph>(C#의 경우) 또는 <ph id="ph2">`Protected Friend`</ph>(Visual Basic의 경우) 멤버입니다.</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>In that case, the accessibility of the override is <ph id="ph1">`Protected`</ph>.</source>
          <target state="translated">이 경우, 재정의에 대한 액세스 가능성은 <ph id="ph1">`Protected`</ph>입니다.</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>The following example illustrates the error that is generated when the <bpt id="p1">[</bpt>CLSCompliantAttribute<ept id="p1">](xref:System.CLSCompliantAttribute)</ept> attribute is set to <ph id="ph1">`true`</ph>, and <ph id="ph2">`Person`</ph>, which is a class derived from <ph id="ph3">`Animal`</ph>, tries to change the accessibility of the <ph id="ph4">`Species`</ph> property from public to private.</source>
          <target state="translated">다음 예제에서는 <bpt id="p1">[</bpt>CLSCompliantAttribute<ept id="p1">](xref:System.CLSCompliantAttribute)</ept> 특성이 <ph id="ph1">`true`</ph>로 설정되고 <ph id="ph3">`Animal`</ph>에서 파생된 <ph id="ph2">`Person`</ph> 클래스가 <ph id="ph4">`Species`</ph> 속성의 접근성을 public에서 private으로 변경하려고 할 때 생성되는 오류를 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>The example compiles successfully if its accessibility is changed to public.</source>
          <target state="translated">이 예제는 해당 액세스 가능성이 public으로 변경되는 경우 성공적으로 컴파일됩니다.</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>Types in the signature of a member must be accessible whenever that member is accessible.</source>
          <target state="translated">멤버 시그니처의 형식은 해당 멤버를 액세스할 수 있는 경우 항상 액세스할 수 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source>For example, this means that a public member cannot include a parameter whose type is private, protected, or internal.</source>
          <target state="translated">예를 들어 public 멤버는 형식이 private, protected 또는 internal인 매개 변수를 포함할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>The following example illustrates the compiler error that results when a <ph id="ph1">`StringWrapper`</ph> class constructor exposes an internal <ph id="ph2">`StringOperationType`</ph> enumeration value that determines how a string value should be wrapped.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">`StringWrapper`</ph> 클래스 생성자가 문자열 값을 래핑하는 방법을 결정하는 internal <ph id="ph2">`StringOperationType`</ph> 열거형 값을 노출할 때 결과로 발생하는 컴파일러 오류를 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>Generic types and members</source>
          <target state="translated">제네릭 형식 및 멤버</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source>Nested types always have at least as many generic parameters as their enclosing type.</source>
          <target state="translated">중첩 형식에는 적어도 바깥쪽 형식과 같은 수의 제네릭 매개 변수가 항상 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>These correspond by position to the generic parameters in the enclosing type.</source>
          <target state="translated">이러한 값은 바깥쪽 형식의 제네릭 매개 변수와 위치가 같습니다.</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>The generic type can also include new generic parameters.</source>
          <target state="translated">제네릭 형식은 새 제네릭 매개 변수를 포함할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>The relationship between the generic type parameters of a containing type and its nested types may be hidden by the syntax of individual languages.</source>
          <target state="translated">포함 형식의 제네릭 형식 매개 변수와 중첩 형식 사이의 관계는 개별 언어의 구문에 의해 숨겨질 수 있습니다.</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>In the following example, a generic type <ph id="ph1">`Outer&lt;T&gt;`</ph> contains two nested classes, <ph id="ph2">`Inner1A`</ph> and <ph id="ph3">`Inner1B&lt;U&gt;`</ph>.</source>
          <target state="translated">다음 예제에서 제네릭 형식 <ph id="ph1">`Outer&lt;T&gt;`</ph>에는 두 개의 중첩된 클래스인 <ph id="ph2">`Inner1A`</ph> 및 <ph id="ph3">`Inner1B&lt;U&gt;`</ph>가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>The calls to the <ph id="ph1">`ToString`</ph> method, which each class inherits from <ph id="ph2">`Object.ToString`</ph>, show that each nested class includes the type parameters of its containing class.</source>
          <target state="translated"><ph id="ph2">`Object.ToString`</ph>에서 각 클래스가 상속받는 <ph id="ph1">`ToString`</ph> 메서드 호출은 포함하는 클래스의 형식 매개 변수가 각 중첩 클래스에 포함되는 것을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>Generic type names are encoded in the form <bpt id="p1">*</bpt>name<ept id="p1">*</ept>'<bpt id="p2">*</bpt>n<ept id="p2">*</ept>, where <bpt id="p3">*</bpt>name<ept id="p3">*</ept> is the type name, <bpt id="p4">*</bpt><ph id="ph1">`</ph><ept id="p4">*</ept> is a character literal, and <bpt id="p5">*</bpt>n<ept id="p5">*</ept> is the number of parameters declared on the type, or, for nested generic types, the number of newly introduced type parameters.</source>
          <target state="translated">제네릭 형식 이름을 <bpt id="p1">*</bpt>name<ept id="p1">*</ept>'<bpt id="p2">*</bpt>n<ept id="p2">*</ept> 형식으로 인코드합니다. 여기서 <bpt id="p3">*</bpt>name<ept id="p3">*</ept>은 형식 이름, <bpt id="p4">*</bpt><ph id="ph1">`</ph><ept id="p4">*</ept>은 문자 리터럴, <bpt id="p5">*</bpt>n<ept id="p5">*</ept>은 이 형식에서 선언된 매개 변수 개수 또는 중첩된 제네릭 형식의 경우 새로 도입된 형식 매개 변수 개수입니다.</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>This encoding of generic type names is primarily of interest to developers who use reflection to access CLS-complaint generic types in a library.</source>
          <target state="translated">제네릭 형식 이름의 이러한 인코딩은 라이브러리에서 CLS 규격 제네릭 형식에 액세스하기 위해 리플렉션을 사용하는 개발자들에게 주로 유용합니다.</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source>If constraints are applied to a generic type, any types used as constraints must also be CLS-compliant.</source>
          <target state="translated">제약 조건이 제네릭 형식에 적용될 경우 제약 조건으로 사용되는 모든 형식도 CLS 규격이어야 합니다.</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source>The following example defines a class named <ph id="ph1">`BaseClass`</ph> that is not CLS-compliant and a generic class named <ph id="ph2">`BaseCollection`</ph> whose type parameter must derive from <ph id="ph3">`BaseClass`</ph>.</source>
          <target state="translated">다음 예제에서는 CLS 규격 및 <ph id="ph1">`BaseClass`</ph> 제네릭 클래스가 아닌 이름이 <ph id="ph2">`BaseCollection`</ph>인 클래스를 정의합니다. 해당 형식 매개 변수는 <ph id="ph3">`BaseClass`</ph>에서 파생되어야 합니다.</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>But because <ph id="ph1">`BaseClass`</ph>is not CLS-compliant, the compiler emits a warning.</source>
          <target state="translated">하지만 <ph id="ph1">`BaseClass`</ph>는 CLS 규격이 아니므로 컴파일러에서 경고가 발생합니다.</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source>If a generic type is derived from a generic base type, it must redeclare any constraints so that it can guarantee that constraints on the base type are also satisfied.</source>
          <target state="translated">제네릭 형식이 제네릭 기본 형식에서 파생되는 경우 기본 형식에 대한 제약 조건이 충족됨을 보장할 수 있도록 모든 제약 조건을 다시 선언해야 합니다.</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source>The following example defines a <ph id="ph1">`Number&lt;T&gt;`</ph> that can represent any numeric type.</source>
          <target state="translated">다음 예제에서는 임의의 숫자 형식을 나타낼 수 있는 <ph id="ph1">`Number&lt;T&gt;`</ph>를 정의합니다.</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source>It also defines a <ph id="ph1">`FloatingPoint&lt;T&gt;`</ph> class that represents a floating point value.</source>
          <target state="translated">또한 부동 소수점 값을 나타내는 <ph id="ph1">`FloatingPoint&lt;T&gt;`</ph> 클래스도 정의합니다.</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source>However, the source code fails to compile, because it does not apply the constraint on <ph id="ph1">`Number&lt;T&gt;`</ph> (that T must be a value type) to <ph id="ph2">`FloatingPoint&lt;T&gt;`</ph>.</source>
          <target state="translated">하지만 이 소스 코드는 <ph id="ph1">`Number&lt;T&gt;`</ph>(여기서 T는 값 형식이어야 함)에 대한 제약 조건을 <ph id="ph2">`FloatingPoint&lt;T&gt;`</ph>에 적용하지 못하므로 컴파일되지 못합니다.</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source>The example compiles successfully if the constraint is added to the <ph id="ph1">`FloatingPoint&lt;T&gt;`</ph> class.</source>
          <target state="translated">이 예제는 제약 조건이 <ph id="ph1">`FloatingPoint&lt;T&gt;`</ph> 클래스에 추가되는 경우 성공적으로 컴파일됩니다.</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source>The Common Language Specification imposes a conservative per-instantiation model for nested types and protected members.</source>
          <target state="translated">공용 언어 사양에서는 중첩된 형식 및 protected 멤버에 대해 보수적인 인스턴스화별 모델을 적용합니다.</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>Open generic types cannot expose fields or members with signatures that contain a specific instantiation of a nested, protected generic type.</source>
          <target state="translated">개방형 제네릭 형식은 protected 중첩 제네릭 형식의 특정 인스턴스화를 포함하는 시그니처로 필드 또는 멤버를 노출할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>Non-generic types that extend a specific instantiation of a generic base class or interface cannot expose fields or members with signatures that contain a different instantiation of a nested, protected generic type.</source>
          <target state="translated">제네릭 기본 클래스나 인터페이스의 특정 인스턴스화를 확장하는 제네릭이 아닌 형식은 protected 중첩 제네릭 형식의 다른 인스턴스화를 포함하는 서명이 있는 필드나 멤버를 노출할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>The following example defines a generic type, <ph id="ph1">`C1&lt;T&gt;`</ph>, and a protected class, <ph id="ph2">`C1&lt;T&gt;.N`</ph>.</source>
          <target state="translated">다음 예제에서는 제네릭 형식 <ph id="ph1">`C1&lt;T&gt;`</ph>와 protected 클래스 <ph id="ph2">`C1&lt;T&gt;.N`</ph>을 정의합니다.</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`C1&lt;T&gt;`</ph> has two methods, <ph id="ph2">`M1`</ph> and <ph id="ph3">`M2`</ph>.</source>
          <target state="translated"><ph id="ph1">`C1&lt;T&gt;`</ph>에는 <ph id="ph2">`M1`</ph> 및 <ph id="ph3">`M2`</ph>의 두 메서드가 있습니다.</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>However, <ph id="ph1">`M1`</ph> is not CLS-compliant because it tries to return a <ph id="ph2">`C1&lt;int&gt;.N`</ph> object from <ph id="ph3">`C1&lt;T&gt;`</ph>.</source>
          <target state="translated">하지만 <ph id="ph1">`M1`</ph>은 <ph id="ph3">`C1&lt;T&gt;`</ph>에서 <ph id="ph2">`C1&lt;int&gt;.N`</ph> 개체를 반환하려고 하므로 CLS 규격이 아닙니다.</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source>A second class, <ph id="ph1">`C2`</ph>, is derived from <ph id="ph2">`C1&lt;long&gt;`</ph>.</source>
          <target state="translated">두 번째 클래스인 <ph id="ph1">`C2`</ph>는 <ph id="ph2">`C1&lt;long&gt;`</ph>에서 파생됩니다.</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source>It has two methods, <ph id="ph1">`M3`</ph> and <ph id="ph2">`M4`</ph>.</source>
          <target state="translated">여기에는 <ph id="ph1">`M3`</ph> 및 <ph id="ph2">`M4`</ph>의 두 메서드가 있습니다.</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`M3`</ph> is not CLS-compliant because it tries to return a <ph id="ph2">`C1&lt;int&gt;.N`</ph> object from a subclass of <ph id="ph3">`C1&lt;long&gt;`</ph>.</source>
          <target state="translated"><ph id="ph1">`M3`</ph>는 <ph id="ph3">`C1&lt;long&gt;`</ph>의 하위 클래스에서 <ph id="ph2">`C1&lt;int&gt;.N`</ph> 개체를 반환하려고 하므로 CLS 규격이 아닙니다.</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source>Note that language compilers can be even more restrictive.</source>
          <target state="translated">언어 컴파일러는 훨씬 더 제한적일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source>In this example, Visual Basic displays an error when it tries to compile <ph id="ph1">`M4`</ph>.</source>
          <target state="translated">이 예제에서는 Visual Basic에서 <ph id="ph1">`M4`</ph>를 컴파일하려고 하면 오류를 표시합니다.</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source>Constructors</source>
          <target state="translated">생성자</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source>Constructors in CLS-compliant classes and structures must follow these rules:</source>
          <target state="translated">CLS 규격 클래스의 생성자와 구조체는 다음 규칙을 따라야 합니다.</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source>A constructor of a derived class must call the instance constructor of its base class before it accesses inherited instance data.</source>
          <target state="translated">파생된 클래스의 생성자는 상속된 인스턴스 데이터에 액세스하기 전에 기본 클래스의 인스턴스 생성자를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source>This requirement is due to the fact that base class constructors are not inherited by their derived classes.</source>
          <target state="translated">이 요구 사항은 파생된 클래스에서 기본 클래스 생성자가 상속되지 않기 때문입니다.</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve">
          <source>This rule does not apply to structures, which do not support direct inheritance.</source>
          <target state="translated">이 규칙은 직접 상속을 지원하지 않는 구조체에는 적용되지 않습니다.</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve">
          <source>Typically, compilers enforce this rule independently of CLS compliance, as the following example shows.</source>
          <target state="translated">일반적으로 컴파일러는 다음 예제에서처럼 CLS 규격 여부와는 독립적으로 이 규칙을 적용합니다.</target>       </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve">
          <source>It creates a <ph id="ph1">`Doctor`</ph> class that is derived from a <ph id="ph2">`Person`</ph> class, but the <ph id="ph3">`Doctor`</ph>class fails to call the <ph id="ph4">`Person`</ph> class constructor to initialize inherited instance fields.</source>
          <target state="translated">이 예제에서는 <ph id="ph2">`Person`</ph> 클래스에서 파생된 <ph id="ph1">`Doctor`</ph> 클래스를 만들지만 <ph id="ph3">`Doctor`</ph> 클래스는 <ph id="ph4">`Person`</ph> 클래스 생성자를 호출하여 상속된 인스턴스 필드를 초기화하지 못합니다.</target>       </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve">
          <source>An object constructor cannot be called except to create an object.</source>
          <target state="translated">개체 생성자는 개체를 만드는 경우를 제외하고는 호출할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve">
          <source>In addition, an object cannot be initialized twice.</source>
          <target state="translated">또한 개체는 두 번 초기화할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve">
          <source>For example, this means that <ph id="ph1">`Object.MemberwiseClone`</ph> must not call constructors.</source>
          <target state="translated">예를 들어 <ph id="ph1">`Object.MemberwiseClone`</ph>은 생성자를 호출해서는 안 됩니다.</target>       </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve">
          <source>Properties</source>
          <target state="translated">속성</target>       </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve">
          <source>Properties in CLS-compliant types must follow these rules:</source>
          <target state="translated">CLS 규격 형식의 속성은 다음 규칙을 따라야 합니다.</target>       </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source>A property must have a setter, a getter, or both.</source>
          <target state="translated">속성에는 setter, getter 또는 둘 모두가 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source>In an assembly, these are implemented as special methods, which means that they will appear as separate methods (the getter is named <ph id="ph1">`get`</ph><ph id="ph2">\_</ph><bpt id="p1">*</bpt>propertyname<ept id="p1">*</ept> and the setter is <ph id="ph3">`set*\_*propertyname*) marked as `</ph>SpecialName` in the assembly's metadata.</source>
          <target state="translated">어셈블리에서 이러한 메서드는 특수 메서드로 구현됩니다. 즉, 어셈블리의 메타데이터에서 ‘SpecialName’으로 표시되는 별도 메서드(이름이 getter는 <ph id="ph1">`get`</ph><ph id="ph2">\_</ph><bpt id="p1">*</bpt>propertyname<ept id="p1">*</ept>, setter는 <ph id="ph3">`set*\_*propertyname*) marked as `</ph>임)로 나타납니다.</target>       </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve">
          <source>The C# compiler enforces this rule automatically without the need to apply the <bpt id="p1">[</bpt>CLSCompliantAttribute<ept id="p1">](xref:System.CLSCompliantAttribute)</ept> attribute.</source>
          <target state="translated">C# 컴파일러에서는 <bpt id="p1">[</bpt>CLSCompliantAttribute<ept id="p1">](xref:System.CLSCompliantAttribute)</ept> 특성을 적용할 필요 없이 자동으로 이 규칙이 적용됩니다.</target>       </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve">
          <source>A property's type is the return type of the property getter and the last argument of the setter.</source>
          <target state="translated">속성의 형식은 속성 getter의 반환 형식이며 setter의 마지막 인수입니다.</target>       </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source>These types must be CLS compliant, and arguments cannot be assigned to the property by reference (that is, they cannot be managed pointers).</source>
          <target state="translated">이러한 형식은 CLS 규격이어야 하며 인수는 참조로 속성에 할당할 수 없습니다. 즉, 관리되는 포인터일 수 없습니다.</target>       </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source>If a property has both a getter and a setter, they must both be virtual, both static, or both instance.</source>
          <target state="translated">속성에 getter와 setter가 모두 있는 경우, 둘 다 virtual이거나 static이거나 instance여야 합니다.</target>       </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source>The C# compiler automatically enforces this rule through property definition syntax.</source>
          <target state="translated">C# 컴파일러에서는 속성 정의 구문을 통해 이 규칙을 자동으로 적용합니다.</target>       </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source>Events</source>
          <target state="translated">이벤트</target>       </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source>An event is defined by its name and its type.</source>
          <target state="translated">이벤트는 이름 및 해당 형식으로 정의됩니다.</target>       </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve">
          <source>The event type is a delegate that is used to indicate the event.</source>
          <target state="translated">이벤트 유형은 이벤트를 나타내는 데 사용되는 대리자입니다.</target>       </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">`DbConnection.StateChange`</ph> event is of type <ph id="ph2">`StateChangeEventHandler`</ph>.</source>
          <target state="translated">예를 들어 <ph id="ph1">`DbConnection.StateChange`</ph> 이벤트는 <ph id="ph2">`StateChangeEventHandler`</ph> 형식입니다.</target>       </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source>In addition to the event itself, three methods with names based on the event name provide the event's implementation and are marked as <ph id="ph1">`SpecialName`</ph> in the assembly's metadata:</source>
          <target state="translated">해당 이벤트에 추가로 이 이벤트 이름을 기반으로 한 이름의 다음 세 가지 메서드가 이벤트를 구현하고 어셈블리의 메타데이터에 <ph id="ph1">`SpecialName`</ph>으로 표시됩니다.</target>       </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve">
          <source>A method for adding an event handler, named <ph id="ph1">`add`</ph>_<bpt id="p1">*</bpt>EventName<ept id="p1">*</ept>.</source>
          <target state="translated">이벤트 처리기를 추가하는 <ph id="ph1">`add`</ph>_<bpt id="p1">*</bpt>EventName<ept id="p1">*</ept> 메서드.</target>       </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source>For example, the event subscription method for the <ph id="ph1">`DbConnection.StateChange`</ph> event is named <ph id="ph2">`add_StateChange`</ph>.</source>
          <target state="translated">예를 들어 <ph id="ph1">`DbConnection.StateChange`</ph> 이벤트의 이벤트 구독 메서드 이름은 <ph id="ph2">`add_StateChange`</ph>입니다.</target>       </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source>A method for removing an event handler, named <ph id="ph1">`remove`</ph>_<bpt id="p1">*</bpt>EventName<ept id="p1">*</ept>.</source>
          <target state="translated">이벤트 처리기를 제거하는 <ph id="ph1">`remove`</ph>_<bpt id="p1">*</bpt>EventName<ept id="p1">*</ept> 메서드.</target>       </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source>For example, the removal method for the <ph id="ph1">`DbConnection.StateChange`</ph> event is named <ph id="ph2">`remove_StateChange`</ph>.</source>
          <target state="translated">예를 들어 <ph id="ph1">`DbConnection.StateChange`</ph> 이벤트의 제거 메서드 이름은 <ph id="ph2">`remove_StateChange`</ph>입니다.</target>       </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source>A method for indicating that the event has occurred, named <ph id="ph1">`raise`</ph>_<bpt id="p1">*</bpt>EventName<ept id="p1">*</ept>.</source>
          <target state="translated">이벤트가 발생했음을 나타내는 <ph id="ph1">`raise`</ph>_<bpt id="p1">*</bpt>EventName<ept id="p1">*</ept> 메서드</target>       </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source>Most of the Common Language Specification's rules regarding events are implemented by language compilers and are transparent to component developers.</source>
          <target state="translated">이벤트에 관련된 대부분의 공용 언어 사양 규칙은 언어 컴파일러에서 구현되며 구성 요소 개발자에게 투명하게 공개됩니다.</target>       </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source>The methods for adding, removing, and raising the event must have the same accessibility.</source>
          <target state="translated">이벤트를 추가, 제거 또는 발생시키는 메서드의 액세스 가능성은 모두 동일해야 합니다.</target>       </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source>They must also all be static, instance, or virtual.</source>
          <target state="translated">또한 모두 동일하게 static, instance 또는 virtual이어야 합니다.</target>       </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve">
          <source>The methods for adding and removing an event have one parameter whose type is the event delegate type.</source>
          <target state="translated">이벤트를 추가하고 제거하는 메서드에는 이벤트 대리자 형식의 매개 변수가 하나 있습니다.</target>       </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source>The add and remove methods must both be present or both be absent.</source>
          <target state="translated">추가 메서드와 제거 메서드는 모두 있거나 모두 없어야 합니다.</target>       </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve">
          <source>The following example defines a CLS-compliant class named <ph id="ph1">`Temperature`</ph> that raises a <ph id="ph2">`TemperatureChanged`</ph> event if the change in temperature between two readings equals or exceeds a threshold value.</source>
          <target state="translated">다음 예제에서는 두 계측값 사이의 온도 변화가 임계값과 같거나 이를 넘어설 때 <ph id="ph1">`Temperature`</ph> 이벤트를 발생시키는 CLS 규격 클래스 <ph id="ph2">`TemperatureChanged`</ph>를 정의합니다.</target>       </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Temperature`</ph> class explicitly defines a <ph id="ph2">`raise_TemperatureChanged`</ph> method so that it can selectively execute event handlers.</source>
          <target state="translated"><ph id="ph1">`Temperature`</ph> 클래스는 이벤트 처리기를 선택적으로 실행할 수 있도록 <ph id="ph2">`raise_TemperatureChanged`</ph> 메서드를 명시적으로 정의합니다.</target>       </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve">
          <source>Overloads</source>
          <target state="translated">Overloads</target>       </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve">
          <source>The Common Language Specification imposes the following requirements on overloaded members:</source>
          <target state="translated">공용 언어 사양에서는 오버로드된 멤버에 대해 다음과 같은 요구 사항을 적용합니다.</target>       </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve">
          <source>Members can be overloaded based on the number of parameters and the type of any parameter.</source>
          <target state="translated">매개 변수 개수와 매개 변수 형식에 따라 멤버를 오버로드할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve">
          <source>Calling convention, return type, custom modifiers applied to the method or its parameter, and whether parameters are passed by value or by reference are not considered when differentiating between overloads.</source>
          <target state="translated">호출 규칙, 반환 형식, 사용자 지정 한정자는 메서드 또는 해당 매개 변수에 적용되며, 오버로드 간에 구별하는 경우 매개 변수가 값으로 전달되는지 또는 참조로 전달되는지 여부는 고려되지 않습니다.</target>       </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve">
          <source>For an example, see the code for the requirement that names must be unique within a scope in the <bpt id="p1">[</bpt>Naming conventions<ept id="p1">](#naming-conventions)</ept> section.</source>
          <target state="translated">예를 들어 이름이 <bpt id="p1">[</bpt>명명 규칙<ept id="p1">](#naming-conventions)</ept> 섹션의 적용 범위 내에서 고유해야 한다는 요구 사항에 대한 코드를 참조하세요.</target>       </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve">
          <source>Only properties and methods can be overloaded.</source>
          <target state="translated">속성 및 메서드만 오버로드될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve">
          <source>Fields and events cannot be overloaded.</source>
          <target state="translated">필드 및 이벤트는 오버로드할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve">
          <source>Generic methods can be overloaded based on the number of their generic parameters.</source>
          <target state="translated">제네릭 메서드는 제네릭 매개 변수의 개수에 따라 오버로드될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`op_Explicit`</ph> and <ph id="ph2">`op_Implicit`</ph> operators are exceptions to the rule that return value is not considered part of a method signature for overload resolution.</source>
          <target state="translated"><ph id="ph1">`op_Explicit`</ph> 연산자와 <ph id="ph2">`op_Implicit`</ph> 연산자는 반환 값은 오버로드 확인을 위한 메서드 시그니처의 일부로 고려되지 않는다는 규칙의 예외입니다.</target>       </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve">
          <source>These two operators can be overloaded based on both their parameters and their return value.</source>
          <target state="translated">이러한 두 연산자는 매개 변수 및 해당 반환 값에 따라 오버로드될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve">
          <source>Exceptions</source>
          <target state="translated">예외</target>       </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve">
          <source>Exception objects must derive from <bpt id="p1">[</bpt>System.Exception<ept id="p1">](xref:System.Exception)</ept> or from another type derived from <ph id="ph1">`System.Exception`</ph>.</source>
          <target state="translated">예외 개체는 <bpt id="p1">[</bpt>System.Exception<ept id="p1">](xref:System.Exception)</ept>에서 파생되거나 <ph id="ph1">`System.Exception`</ph>에서 파생된 또 다른 형식에서 파생되어야 합니다.</target>       </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve">
          <source>The following example illustrates the compiler error that results when a custom class named <ph id="ph1">`ErrorClass`</ph> is used for exception handling.</source>
          <target state="translated">다음 예제에서는 사용자 지정 클래스 <ph id="ph1">`ErrorClass`</ph>가 예외 처리에 사용될 때 결과로 발생하는 컴파일러 오류를 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve">
          <source>To correct this error, the <ph id="ph1">`ErrorClass`</ph> class must inherit from <ph id="ph2">`System.Exception`</ph>.</source>
          <target state="translated">이 오류를 수정하려면 <ph id="ph1">`ErrorClass`</ph> 클래스는 <ph id="ph2">`System.Exception`</ph>에서 상속해야 합니다.</target>       </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve">
          <source>In addition, the Message property must be overridden.</source>
          <target state="translated">또한 Message 속성을 재정의해야 합니다.</target>       </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve">
          <source>The following example corrects these errors to define an <ph id="ph1">`ErrorClass`</ph> class that is CLS-compliant.</source>
          <target state="translated">다음 예제에서는 이러한 오류를 해결하여 CLS 규격 <ph id="ph1">`ErrorClass`</ph> 클래스를 정의합니다.</target>       </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve">
          <source>Attributes</source>
          <target state="translated">특성</target>       </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve">
          <source>In.NET Framework assemblies, custom attributes provide an extensible mechanism for storing custom attributes and retrieving metadata about programming objects, such as assemblies, types, members, and method parameters.</source>
          <target state="translated">.NET Framework 어셈블리에서 사용자 지정 특성은 확장 가능한 메커니즘을 제공하여 사용자 지정 특성을 저장하고 어셈블리, 형식, 멤버, 메서드 매개 변수 등의 개체 프로그래밍에 대한 메타데이터를 검색할 수 있도록 합니다.</target>       </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve">
          <source>Custom attributes must derive from <bpt id="p1">[</bpt>System.Attribute<ept id="p1">](xref:System.Attribute)</ept> or from a type derived from <ph id="ph1">`System.Attribute`</ph>.</source>
          <target state="translated">사용자 지정 특성은 <bpt id="p1">[</bpt>System.Attribute<ept id="p1">](xref:System.Attribute)</ept>에서 파생되거나 <ph id="ph1">`System.Attribute`</ph>에서 파생된 형식에서 파생되어야 합니다.</target>       </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve">
          <source>The following example violates this rule.</source>
          <target state="translated">다음은 이 규칙을 위반하는 예제입니다.</target>       </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve">
          <source>It defines a <ph id="ph1">`NumericAttribute`</ph> class that does not derive from <ph id="ph2">`System.Attribute`</ph>.</source>
          <target state="translated">이 예제에서는 <ph id="ph1">`NumericAttribute`</ph>에서 파생되지 않은 <ph id="ph2">`System.Attribute`</ph> 클래스를 정의합니다.</target>       </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve">
          <source>Note that a compiler error results only when the non-CLS-compliant attribute is applied, not when the class is defined.</source>
          <target state="translated">컴파일러 오류는 클래스를 정의하지 않은 경우가 아닌 CLS 규격이 아닌 특성이 적용되는 경우에만 발생합니다.</target>       </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve">
          <source>The constructor or the properties of a CLS-compliant attribute can expose only the following types:</source>
          <target state="translated">CLS 규격 특성의 속성 또는 생성자는 다음과 같은 형식만 노출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Boolean<ept id="p1">](xref:System.Boolean)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Boolean<ept id="p1">](xref:System.Boolean)</ept></target>       </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Byte<ept id="p1">](xref:System.Byte)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Byte<ept id="p1">](xref:System.Byte)</ept></target>       </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Char<ept id="p1">](xref:System.Char)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Char<ept id="p1">](xref:System.Char)</ept></target>       </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Double<ept id="p1">](xref:System.Double)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Double<ept id="p1">](xref:System.Double)</ept></target>       </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Int16<ept id="p1">](xref:System.Int16)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Int16<ept id="p1">](xref:System.Int16)</ept></target>       </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Int32<ept id="p1">](xref:System.Int32)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Int32<ept id="p1">](xref:System.Int32)</ept></target>       </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Int64<ept id="p1">](xref:System.Int64)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Int64<ept id="p1">](xref:System.Int64)</ept></target>       </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Single<ept id="p1">](xref:System.Single)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Single<ept id="p1">](xref:System.Single)</ept></target>       </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>String<ept id="p1">](xref:System.String)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>String<ept id="p1">](xref:System.String)</ept></target>       </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Type<ept id="p1">](xref:System.Type)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Type<ept id="p1">](xref:System.Type)</ept></target>       </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve">
          <source>Any enumeration type whose underlying type is <ph id="ph1">`Byte`</ph>, <ph id="ph2">`Int16`</ph>, <ph id="ph3">`Int32`</ph>, or <ph id="ph4">`Int64`</ph>.</source>
          <target state="translated">기본 형식이 <ph id="ph1">`Byte`</ph>, <ph id="ph2">`Int16`</ph>, <ph id="ph3">`Int32`</ph> 또는 <ph id="ph4">`Int64`</ph>인 열거형 형식입니다.</target>       </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve">
          <source>The following example defines a <ph id="ph1">`DescriptionAttribute`</ph> class that derives from <bpt id="p1">[</bpt>Attribute<ept id="p1">](xref:System.Attribute)</ept>.</source>
          <target state="translated">다음 예제에서는 <bpt id="p1">[</bpt>Attribute<ept id="p1">](xref:System.Attribute)</ept>에서 파생된 <ph id="ph1">`DescriptionAttribute`</ph> 클래스를 정의합니다.</target>       </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve">
          <source>The class constructor has a parameter of type <ph id="ph1">`Descriptor`</ph>, so the class is not CLS-compliant.</source>
          <target state="translated">클래스 생성자에 <ph id="ph1">`Descriptor`</ph> 형식의 매개 변수가 있으므로 이 클래스는 CLS 규격이 아닙니다.</target>       </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve">
          <source>Note that the C# compiler emits a warning but compiles successfully.</source>
          <target state="translated">C# 컴파일러에서 경고를 표시하지만 성공적으로 컴파일됩니다.</target>       </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve">
          <source>The CLSCompliantAttribute attribute</source>
          <target state="translated">CLSCompliantAttribute 특성</target>       </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>CLSCompliantAttribute<ept id="p1">](xref:System.CLSCompliantAttribute)</ept> attribute is used to indicate whether a program element complies with the Common Language Specification.</source>
          <target state="translated"><bpt id="p1">[</bpt>CLSCompliantAttribute<ept id="p1">](xref:System.CLSCompliantAttribute)</ept> 특성은 프로그램 요소가 공용 언어 사양을 준수하는지 여부를 나타내는 데 사용됩니다.</target>       </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CLSCompliantAttribute.CLSCompliantAttribute(Boolean)`</ph> constructor includes a single required parameter, <bpt id="p1">*</bpt>isCompliant<ept id="p1">*</ept>, that indicates whether the program element is CLS-compliant.</source>
          <target state="translated"><ph id="ph1">`CLSCompliantAttribute.CLSCompliantAttribute(Boolean)`</ph> 생성자에는 프로그램 요소가 CLS 규격인지 여부를 나타내는 단일 필수 매개 변수 <bpt id="p1">*</bpt>isCompliant<ept id="p1">*</ept>가 포함되어 있습니다.</target>       </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve">
          <source>At compile time, the compiler detects non-compliant elements that are presumed to be CLS-compliant and emits a warning.</source>
          <target state="translated">컴파일 타임에 컴파일러는 CLS 규격으로 우선 간주되었던 비규격 요소를 검색하고 경고를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve">
          <source>The compiler does not emit warnings for types or members that are explicitly declared to be non-compliant.</source>
          <target state="translated">컴파일러는 비규격으로 명시적 선언된 형식 또는 멤버에 대해서는 경고를 발생시키지 않습니다.</target>       </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve">
          <source>Component developers can use the <ph id="ph1">`CLSCompliantAttribute`</ph> attribute in two ways:</source>
          <target state="translated">구성 요소 개발자는 다음 두 가지 방식으로 <ph id="ph1">`CLSCompliantAttribute`</ph> 특성을 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve">
          <source>To define the parts of the public interface exposed by a component that are CLS-compliant and the parts that are not CLS-compliant.</source>
          <target state="translated">CLS 규격인 구성 요소에서 노출된 공용 인터페이스 부분과 CLS 규격이 아닌 부분을 정의합니다.</target>       </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve">
          <source>When the attribute is used to mark particular program elements as CLS-compliant, its use guarantees that those elements are accessible from all languages and tools that target the .NET Framework.</source>
          <target state="translated">특정 프로그램 요소를 CLS 규격으로 표시하도록 특성을 사용하면, 해당 요소는 .NET Framework를 대상으로 하는 모든 언어 및 도구에서 액세스 가능성이 보장됩니다.</target>       </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve">
          <source>To ensure that the component library's public interface exposes only program elements that are CLS-compliant.</source>
          <target state="translated">구성 요소 라이브러리의 공용 인터페이스에서 CLS 규격인 프로그램 요소만을 노출시키도록 합니다.</target>       </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve">
          <source>If elements are not CLS-compliant, compilers will generally issue a warning.</source>
          <target state="translated">요소가 CLS 규격이 아닌 경우, 일반적으로 컴파일러에서 경고가 발생합니다.</target>       </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve">
          <source>In some cases, language compilers enforce CLS-compliant rules regardless of whether the <ph id="ph1">`CLSCompliantAttribute`</ph> attribute is used.</source>
          <target state="translated">경우에 따라 언어 컴파일러는 <ph id="ph1">`CLSCompliantAttribute`</ph> 특성 사용 여부에 관계없이 CLS 규격 규칙을 적용합니다.</target>       </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve">
          <source>For example, defining a <ph id="ph1">`*static`</ph> member in an interface violates a CLS rule.</source>
          <target state="translated">예를 들어 인터페이스에서 <ph id="ph1">`*static`</ph> 멤버를 정의하면 CLS 규칙에 위반됩니다.</target>       </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve">
          <source>However, if you define a <ph id="ph1">`*static`</ph> member in an interface, the C# compiler displays an error message and fails to compile the app.</source>
          <target state="translated">하지만 인터페이스에서 <ph id="ph1">`*static`</ph> 멤버를 정의하는 경우 C# 컴파일러에서 오류 메시지가 표시되고 응용 프로그램이 컴파일되지 않습니다.</target>       </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CLSCompliantAttribute`</ph> attribute is marked with an <bpt id="p1">[</bpt>AttributeUsageAttribute<ept id="p1">](xref:System.AttributeUsageAttribute)</ept> attribute that has a value of <ph id="ph2">`AttributeTargets.All`</ph>.</source>
          <target state="translated"><ph id="ph1">`CLSCompliantAttribute`</ph> 특성은 값이 <ph id="ph2">`AttributeTargets.All`</ph>인 <bpt id="p1">[</bpt>AttributeUsageAttribute<ept id="p1">](xref:System.AttributeUsageAttribute)</ept> 특성으로 표시됩니다.</target>       </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve">
          <source>This value allows you to apply the <ph id="ph1">`CLSCompliantAttribute`</ph> attribute to any program element, including assemblies, modules, types (classes, structures, enumerations, interfaces, and delegates), type members (constructors, methods, properties, fields, and events), parameters, generic parameters, and return values.</source>
          <target state="translated">이 값을 사용하면 <ph id="ph1">`CLSCompliantAttribute`</ph> 특성을 어셈블리, 모듈, 형식(클래스, 구조체, 열거형, 인터페이스 및 대리자), 형식 멤버(생성자, 메서드, 속성, 필드 및 이벤트), 매개 변수, 제네릭 매개 변수 및 반환 값 등 어떤 프로그램 요소에도 적용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve">
          <source>However, in practice, you should apply the attribute only to assemblies, types, and type members.</source>
          <target state="translated">그러나 실제로는 어셈블리, 형식 및 형식 멤버에만 이 특성을 적용해야 합니다.</target>       </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve">
          <source>Otherwise, compilers ignore the attribute and continue to generate compiler warnings whenever they encounter a non-compliant parameter, generic parameter, or return value in your library's public interface.</source>
          <target state="translated">그러지 않으면 컴파일러는 특성을 무시하고 라이브러리의 공용 인터페이스에서 비규격 매개 변수, 제네릭 매개 변수 또는 반환 값이 발생할 때마다 컴파일러 경고를 계속해서 생성합니다.</target>       </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve">
          <source>The value of the <ph id="ph1">`CLSCompliantAttribute`</ph> attribute is inherited by contained program elements.</source>
          <target state="translated"><ph id="ph1">`CLSCompliantAttribute`</ph> 특성의 값은 포함된 프로그램 요소에 의해 상속됩니다.</target>       </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve">
          <source>For example, if an assembly is marked as CLS-compliant, its types are also CLS-compliant.</source>
          <target state="translated">예를 들어, 어셈블리가 CLS 규격으로 표시되어 있으면 해당 형식도 CLS 규격입니다.</target>       </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve">
          <source>If a type is marked as CLS-compliant, its nested types and members are also CLS-compliant.</source>
          <target state="translated">또한 형식이 CLS 규격으로 표시되어 있으면 해당 중첩 형식 및 멤버도 CLS 규격입니다.</target>       </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve">
          <source>You can explicitly override the inherited compliance by applying the <ph id="ph1">`CLSCompliantAttribute`</ph> attribute to a contained program element.</source>
          <target state="translated">포함된 프로그램 요소에 <ph id="ph1">`CLSCompliantAttribute`</ph> 특성을 적용하여 상속된 규격을 명시적으로 재정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve">
          <source>For example, you can use the <ph id="ph1">`CLSCompliantAttribute`</ph> attribute with an <bpt id="p1">*</bpt>isCompliant<ept id="p1">*</ept> value of <ph id="ph2">`false`</ph> to define a non-compliant type in a compliant assembly, and you can use the attribute with an <bpt id="p2">*</bpt>isComplian<ept id="p2">*</ept> value of <ph id="ph3">`true`</ph> to define a compliant type in a non-compliant assembly.</source>
          <target state="translated">예를 들어 <bpt id="p1">*</bpt>isCompliant<ept id="p1">*</ept> 값을 <ph id="ph2">`false`</ph>로 지정하여 <ph id="ph1">`CLSCompliantAttribute`</ph> 특성을 사용하면 규격 어셈블리에서 비규격 형식을 정의할 수 있고, <bpt id="p2">*</bpt>isCompliant<ept id="p2">*</ept> 값을 <ph id="ph3">`true`</ph>로 지정하여 해당 특성을 사용하면 비규격 어셈블리에서 규격 형식을 정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve">
          <source>You can also define non-compliant members in a compliant type.</source>
          <target state="translated">또한 규격 형식으로 비규격 멤버를 정의할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve">
          <source>However, a non-compliant type cannot have compliant members, so you cannot use the attribute with an <bpt id="p1">*</bpt>isCompliant<ept id="p1">*</ept> value of <ph id="ph1">`true`</ph> to override inheritance from a non-compliant type.</source>
          <target state="translated">하지만 비규격 형식은 규격 멤버를 가질 수 없기 때문에 비규격 형식의 상속을 재정의하기 위해 <bpt id="p1">*</bpt>isCompliant<ept id="p1">*</ept> 값을 <ph id="ph1">`true`</ph>로 지정해서 이 특성을 사용할 수는 없습니다.</target>       </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve">
          <source>When you are developing components, you should always use the <ph id="ph1">`CLSCompliantAttribute`</ph> attribute to indicate whether your assembly, its types, and its members are CLS-compliant.</source>
          <target state="translated">구성 요소를 개발하는 경우 어셈블리 및 해당 형식과 멤버가 CLS 규격인지 여부를 나타내는 <ph id="ph1">`CLSCompliantAttribute`</ph> 특성을 반드시 사용해야 합니다.</target>       </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve">
          <source>To create CLS-compliant components:</source>
          <target state="translated">CLS 규격 구성 요소를 만들려면</target>       </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`CLSCompliantAttribute`</ph> to mark you assembly as CLS-compliant.</source>
          <target state="translated"><ph id="ph1">`CLSCompliantAttribute`</ph>를 사용하여 어셈블리를 CLS 규격으로 표시합니다.</target>       </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve">
          <source>Mark any publicly exposed types in the assembly that are not CLS-compliant as non-compliant.</source>
          <target state="translated">CLS 규격이 아닌 어셈블리의 공개적으로 노출되는 모든 형식을 비규격으로 표시합니다.</target>       </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve">
          <source>Mark any publicly exposed members in CLS-compliant types as non-compliant.</source>
          <target state="translated">CLS 규격 형식의 공개적으로 노출되는 모든 멤버를 비규격으로 표시합니다.</target>       </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve">
          <source>Provide a CLS-compliant alternative for non-CLS-compliant members.</source>
          <target state="translated">CLS 규격이 아닌 멤버에 대해 CLS 규격 대체 멤버를 제공합니다.</target>       </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve">
          <source>If you've successfully marked all your non-compliant types and members, your compiler should not emit any non-compliance warnings.</source>
          <target state="translated">모든 비규격 형식 및 멤버를 성공적으로 표시한 경우 컴파일러에서 미준수 경고가 발생하지 않아야 합니다.</target>       </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve">
          <source>However, you should indicate which members are not CLS-compliant and list their CLS-compliant alternatives in your product documentation.</source>
          <target state="translated">그러나 제품 설명서에 CLS 규격이 아닌 멤버를 표시하고 이들의 CLS 규격 대체 멤버를 명시해야 합니다.</target>       </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve">
          <source>The following example uses the <ph id="ph1">`CLSCompliantAttribute`</ph> attribute to define a CLS-compliant assembly and a type, <ph id="ph2">`CharacterUtilities`</ph>, that has two non-CLS-compliant members.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">`CLSCompliantAttribute`</ph> 특성을 사용하여 CLS 규격 어셈블리와 CLS 규격이 아닌 멤버 두 개가 포함된 <ph id="ph2">`CharacterUtilities`</ph> 형식을 정의합니다.</target>       </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve">
          <source>Because both members are tagged with the <ph id="ph1">`CLSCompliant(false)`</ph> attribute, the compiler produces no warnings.</source>
          <target state="translated">두 멤버 모두 <ph id="ph1">`CLSCompliant(false)`</ph> 특성으로 태그가 지정되어 있으므로 컴파일러에서 경고를 생성하지 않습니다.</target>       </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve">
          <source>The class also provides a CLS-compliant alternative for both methods.</source>
          <target state="translated">또한 이 클래스는 두 메서드 모두에 대해 CLS 규격 대체 메서드를 제공합니다.</target>       </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve">
          <source>Ordinarily, we would just add two overloads to the <ph id="ph1">`ToUTF16`</ph> method to provide CLS-compliant alternatives.</source>
          <target state="translated">일반적으로 두 오버로드를 <ph id="ph1">`ToUTF16`</ph> 메서드에 추가하여 CLS 규격 대체 메서드를 제공할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve">
          <source>However, because methods cannot be overloaded based on return value, the names of the CLS-compliant methods are different from the names of the non-compliant methods.</source>
          <target state="translated">하지만 메서드는 반환 값을 기반으로 오버로드될 수 없기 때문에, CLS 규격 메서드의 이름은 비규격 메서드의 이름과는 다릅니다.</target>       </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve">
          <source>If you are developing an app rather than a library (that is, if you aren't exposing types or members that can be consumed by other app developers), the CLS compliance of the program elements that your app consumes are of interest only if your language does not support them.</source>
          <target state="translated">라이브러리가 아닌 응용 프로그램을 개발하는 경우(다른 응용 프로그램 개발자가 사용할 수 있는 형식 또는 멤버를 노출하지 않으려는 경우) 응용 프로그램이 사용하는 프로그램 요소의 CLS 규격은 해당 언어가 지원하지 않는 경우에만 관련됩니다.</target>       </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve">
          <source>In that case, your language compiler will generate an error when you try to use a non-CLS-compliant element.</source>
          <target state="translated">이 경우에 CLS 규격이 아닌 요소를 사용하려고 하면 언어 컴파일러에서 오류가 발생합니다.</target>       </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve">
          <source>Cross-Language Interoperability</source>
          <target state="translated">언어 간 상호 운용성</target>       </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve">
          <source>Language independence has a number of possible meanings.</source>
          <target state="translated">언어 독립성은 여러 가지 의미를 가질 수 있습니다.</target>       </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve">
          <source>One meaning involves seamlessly consuming types written in one language from an app written in another language.</source>
          <target state="translated">한 가지 의미는 한 언어로 작성된 형식을 다른 언어로 작성된 앱에서 원활하게 사용할 수 있다는 것입니다.</target>       </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve">
          <source>A second meaning, which is the focus of this article, involves combining code written in multiple languages into a single .NET Framework assembly.</source>
          <target state="translated">이 문서의 핵심이기도 한 두 번째 의미는 여러 언어로 작성된 코드를 단일 .NET Framework 어셈블리로 결합하는 것입니다.</target>       </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve">
          <source>The following example illustrates cross-language interoperability by creating a class library named Utilities.dll that includes two classes, <ph id="ph1">`NumericLib`</ph> and <ph id="ph2">`StringLib`</ph>.</source>
          <target state="translated">다음 예제에서는 두 클래스 <ph id="ph1">`NumericLib`</ph> 및 <ph id="ph2">`StringLib`</ph>를 포함하는 Utilities.dll이라는 클래스 라이브러리를 만들어 언어 간 상호 운용성을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`NumericLib`</ph> class is written in C#, and the <ph id="ph2">`StringLib`</ph> class is written in Visual Basic.</source>
          <target state="translated"><ph id="ph1">`NumericLib`</ph> 클래스는 C#으로 작성되었고 <ph id="ph2">`StringLib`</ph> 클래스는 Visual Basic으로 작성되었습니다.</target>       </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve">
          <source>Here's the source code for <ph id="ph1">`StringUtil.vb`</ph>, which includes a single member, <ph id="ph2">`ToTitleCase`</ph>, in its <ph id="ph3">`StringLib`</ph> class.</source>
          <target state="translated">다음은 단일 멤버 <ph id="ph2">`ToTitleCase`</ph>를 해당 <ph id="ph3">`StringLib`</ph> 클래스에 포함하는 <ph id="ph1">`StringUtil.vb`</ph>용 소스 코드입니다.</target>       </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve">
          <source>Here's the source code for NumberUtil.cs, which defines a <ph id="ph1">`NumericLib`</ph> class that has two members, <ph id="ph2">`IsEven`</ph> and <ph id="ph3">`NearZero`</ph>.</source>
          <target state="translated">다음은 <ph id="ph1">`NumericLib`</ph> 및 <ph id="ph2">`IsEven`</ph>라는 두 가지 멤버를 가진 <ph id="ph3">`NearZero`</ph> 클래스를 정의하는 NumberUtil.cs용 소스 코드입니다.</target>       </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve">
          <source>To package the two classes in a single assembly, you must compile them into modules.</source>
          <target state="translated">두 클래스를 단일 어셈블리로 패키징하려면 모듈로 컴파일해야 합니다.</target>       </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve">
          <source>To compile the Visual Basic source code file into a module, use this command:</source>
          <target state="translated">Visual Basic 소스 코드 파일을 모듈로 컴파일하려면 다음 명령을 사용합니다.</target>       </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve">
          <source>To compile the C# source code file into a module, use this command:</source>
          <target state="translated">C# 소스 코드 파일을 모듈로 컴파일하려면 다음 명령을 사용합니다.</target>       </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve">
          <source>You then use the Link tool (Link.exe) to compile the two modules into an assembly:</source>
          <target state="translated">그런 다음 링크 도구(Link.exe)를 사용하여 두 모듈을 하나의 어셈블리로 컴파일합니다.</target>       </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve">
          <source>The following example then calls the <ph id="ph1">`NumericLib.NearZero`</ph> and <ph id="ph2">`StringLib.ToTitleCase`</ph> methods.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">`NumericLib.NearZero`</ph> 및 <ph id="ph2">`StringLib.ToTitleCase`</ph> 메서드를 호출합니다.</target>       </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve">
          <source>Note that both the Visual Basic code and the C# code are able to access the methods in both classes.</source>
          <target state="translated">Visual Basic 코드와 C# 코드 둘 다 두 클래스의 메서드에 액세스할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve">
          <source>To compile the Visual Basic code, use this command:</source>
          <target state="translated">Visual Basic 코드를 컴파일하려면 다음 명령을 사용합니다.</target>       </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve">
          <source>To compile with C#, change the name of the compiler from vbc to csc, and change the file extension from .vb to .cs:</source>
          <target state="translated">C#으로 컴파일하려면 vbc에서 csc로 컴파일러의 이름을 변경하고 .vb에서 .cs로 파일 확장명을 변경합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>