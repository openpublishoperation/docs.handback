<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-eac019f" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3f26670dc9f4c6b6608599793352445d5665cf64</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\base-types\parsing-other.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p2</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1ded539f02c64a78271d65c58911186c9db97319</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">46821dafcc77df8e08b52398a576072a085e6bfc</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Parsing other strings in .NET</source>
          <target state="translated">.NET에서 기타 문자열 구문 분석</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Parsing other strings in .NET</source>
          <target state="translated">.NET에서 기타 문자열 구문 분석</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Parsing other strings in .NET</source>
          <target state="translated">.NET에서 기타 문자열 구문 분석</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In addition to numeric and <bpt id="p1">[</bpt>DateTime<ept id="p1">](xref:System.DateTime)</ept> strings, you can also parse strings that represent the types <bpt id="p2">[</bpt>Char<ept id="p2">](xref:System.Char)</ept>, <bpt id="p3">[</bpt>Boolean<ept id="p3">](xref:System.Boolean)</ept>, and <bpt id="p4">[</bpt>Enum<ept id="p4">](xref:System.Enum)</ept> into data types.</source>
          <target state="translated">숫자 및 <bpt id="p1">[</bpt>DateTime<ept id="p1">](xref:System.DateTime)</ept> 문자열 외에도 <bpt id="p2">[</bpt>Char<ept id="p2">](xref:System.Char)</ept>, <bpt id="p3">[</bpt>부울<ept id="p3">](xref:System.Boolean)</ept>, 및 <bpt id="p4">[</bpt>Enum<ept id="p4">](xref:System.Enum)</ept> 형식을 나타내는 문자열을 데이터 형식으로 구문 분석할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Char</source>
          <target state="translated">Char</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The static parse method associated with the <bpt id="p1">[</bpt>Char<ept id="p1">](xref:System.Char)</ept> data type is useful for converting a string that contains a single character into its Unicode value.</source>
          <target state="translated"><bpt id="p1">[</bpt>Char<ept id="p1">](xref:System.Char)</ept> 데이터 형식과 연결된 고정 구문 분석 메서드는 단일 문자를 포함하는 문자열을 해당 유니코드 값으로 변환하는 데 유용합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The following code example parses a string into a Unicode character.</source>
          <target state="translated">다음 코드 예제에서는 문자열을 유니코드 문자로 구문 분석합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Boolean</source>
          <target state="translated">부울</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Boolean<ept id="p1">](xref:System.Boolean)</ept> data type contains a <bpt id="p2">[</bpt>Parse<ept id="p2">](xref:System.Boolean.Parse(System.String))</ept> method that you can use to convert a string that represents a <ph id="ph1">`Boolean`</ph> value into an actual <ph id="ph2">`Boolean`</ph> type.</source>
          <target state="translated"><bpt id="p1">[</bpt>부울<ept id="p1">](xref:System.Boolean)</ept> 데이터 형식은 <ph id="ph1">`Boolean`</ph> 값을 나타내는 문자열을 실제 <ph id="ph2">`Boolean`</ph> 유형으로 변환하는 데 사용할 수 있는 <bpt id="p2">[</bpt>Parse<ept id="p2">](xref:System.Boolean.Parse(System.String))</ept> 메서드를 포함합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This method is not case-sensitive and can successfully parse a string containing "True" or "False."</source>
          <target state="translated">이 메서드는 대/소문자를 구분하지 않으며 "True" 또는 "False"를 포함하는 문자열을 성공적으로 구문 분석할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Parse`</ph> method associated with the <ph id="ph2">`Boolean`</ph> type can also parse strings that are surrounded by white spaces.</source>
          <target state="translated"><ph id="ph2">`Boolean`</ph> 형식과 연결된 <ph id="ph1">`Parse`</ph> 메서드는 공백으로 둘러싸인 문자열을 구문 분석할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If any other string is passed, a <bpt id="p1">[</bpt>FormatException<ept id="p1">](xref:System.FormatException)</ept> is thrown.</source>
          <target state="translated">다른 문자열을 전달하면 <bpt id="p1">[</bpt>FormatException<ept id="p1">](xref:System.FormatException)</ept>이 throw됩니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The following code example uses the <ph id="ph1">`Parse`</ph> method to convert a string into a <ph id="ph2">`Boolean`</ph> value.</source>
          <target state="translated">다음 코드 예제에서는 문자열을 <ph id="ph2">`Boolean`</ph> 값으로 변환하는 <ph id="ph1">`Parse`</ph> 메서드를 사용합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Enumeration</source>
          <target state="translated">열거형</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You can use the static <bpt id="p1">[</bpt>Parse<ept id="p1">](xref:System.Enum.Parse(System.Type,System.String))</ept> method to initialize an enumeration type to the value of a string.</source>
          <target state="translated">고정 <bpt id="p1">[</bpt>Parse<ept id="p1">](xref:System.Enum.Parse(System.Type,System.String))</ept> 메서드를 사용하여 문자열 값에 대한 열거형 형식을 초기화할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This method accepts the enumeration type you are parsing, the string to parse, and an optional <ph id="ph1">`Boolean`</ph> flag indicating whether or not the parse is case-sensitive.</source>
          <target state="translated">이 메서드는 구문 분석하는 열거형 형식, 구문 분석할 문자열 및 구문 분석이 대/소문자를 구분하는지를 나타내는 선택적 <ph id="ph1">`Boolean`</ph> 플래그를 허용합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The string you are parsing can contain several values separated by commas, which can be preceded or followed by one or more empty spaces (also called white spaces).</source>
          <target state="translated">구문 분석하는 문자열은 쉼표로 구분된 여러 값을 포함할 수 있으며 앞이나 뒤에는 하나 이상의 빈 공간(공백이라고도 함)이 있을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>When the string contains multiple values, the value of the returned object is the value of all specified values combined with a bitwise OR operation.</source>
          <target state="translated">문자열에 여러 값이 포함된 경우 반환된 개체의 값은 비트 OR 연산과 함께 결합된 모든 지정된 값과 같습니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The following example uses the <ph id="ph1">`Parse`</ph> method to convert a string representation into an enumeration value.</source>
          <target state="translated">다음 예제에서는 문자열 표현을 열거형 값으로 변환하는 <ph id="ph1">`Parse`</ph> 메서드를 사용합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>DayOfWeek<ept id="p1">](xref:System.DayOfWeek)</ept> enumeration is initialized to Thursday from a string.</source>
          <target state="translated"><bpt id="p1">[</bpt>DayOfWeek<ept id="p1">](xref:System.DayOfWeek)</ept> 열거형은 문자열에서 목요일로 초기화됩니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">참고 항목</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Parsing strings in .NET<ept id="p1">](parsing-strings.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>.NET에서 문자열 구문 분석<ept id="p1">](parsing-strings.md)</ept></target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Formatting types in .NET<ept id="p1">](formatting-types.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>.NET의 서식 지정 형식<ept id="p1">](formatting-types.md)</ept></target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Type conversion in .NET<ept id="p1">](type-conversion.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>.NET에서 형식 변환<ept id="p1">](type-conversion.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>