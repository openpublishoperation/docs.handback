<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-eac019f" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f00fedb70bddc184e5c6ea71213b2beb78594792</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\collections\selecting-a-collection-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p2</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0dc1ad3a0e05b61d3b6ef8af4585c831881fbfc6</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">73a76d79ed0c93db0cc1098d72609bc267204033</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Selecting a Collection Class</source>
          <target state="translated">Collection 클래스 선택</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Selecting a Collection Class</source>
          <target state="translated">Collection 클래스 선택</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Selecting a Collection Class</source>
          <target state="translated">Collection 클래스 선택</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Be sure to choose your collection class carefully.</source>
          <target state="translated">컬렉션 클래스를 신중하게 선택해야 합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Using the wrong type can restrict your use of the collection.</source>
          <target state="translated">잘못된 형식을 사용하면 컬렉션 사용이 제한될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The generic and concurrent versions of the collections are to be preferred because of their greater type safety and other improvements.</source>
          <target state="translated">형식 안전성이 더 크고 기타 향상된 기능이 있는 제네릭 버전과 동시 버전의 컬렉션을 사용하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In general, avoid using the types in the System.Collections namespace unless you are specifically targeting .NET Framework version 1.1.</source>
          <target state="translated">일반적으로, .NET Framework 버전 1.1을 대상으로 하지 않는 한 System.Collections 네임스페이스의 형식을 사용하지 마세요.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Consider the following questions:</source>
          <target state="translated">다음 질문을 살펴보세요.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Do you need a sequential list where the element is typically discarded after its value is retrieved?</source>
          <target state="translated">값을 검색한 후 요소가 일반적으로 삭제되는 순차적 목록이 필요한가요?</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If yes, consider using the <bpt id="p1">[</bpt>System.Collections.Generic.Queue<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph><ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.Queue-1)</ept> generic class if you need first-in, first-out (FIFO) behavior.</source>
          <target state="translated">예인 경우 FIFO(선입선출) 동작이 필요하면 <bpt id="p1">[</bpt>System.Collections.Generic.Queue<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph><ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.Queue-1)</ept> 제네릭 클래스를 사용합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Consider using the <bpt id="p1">[</bpt>System.Collections.Generic.Stack<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph><ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.Stack-1)</ept> generic class if you need last-in, first-out (LIFO) behavior.</source>
          <target state="translated">LIFO(후입선출) 동작이 필요하면 <bpt id="p1">[</bpt>System.Collections.Generic.Stack<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph><ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.Stack-1)</ept> 제네릭 클래스를 사용합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For safe access from multiple threads, use the concurrent versions <bpt id="p1">[</bpt>System.Collections.Concurrent.ConcurrentQueue<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph><ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Concurrent.ConcurrentQueue-1)</ept> and <bpt id="p2">[</bpt>System.Collections.Concurrent.ConcurrentStack<ph id="ph3">&amp;lt;</ph>T<ph id="ph4">&amp;gt;</ph><ept id="p2">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Concurrent.ConcurrentStack-1)</ept>.</source>
          <target state="translated">여러 스레드에서 안전하게 액세스하려면 동시 버전 <bpt id="p1">[</bpt>System.Collections.Concurrent.ConcurrentQueue<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph><ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Concurrent.ConcurrentQueue-1)</ept> 및 <bpt id="p2">[</bpt>System.Collections.Concurrent.ConcurrentStack<ph id="ph3">&amp;lt;</ph>T<ph id="ph4">&amp;gt;</ph><ept id="p2">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Concurrent.ConcurrentStack-1)</ept>을 사용합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If not, consider using the other collections.</source>
          <target state="translated">그러지 않은 경우 다른 컬렉션을 사용합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Do you need to access the elements in a certain order, such as FIFO, LIFO, or random?</source>
          <target state="translated">FIFO, LIFO, 무작위와 같은 특정 순서대로 요소에 액세스해야 하나요?</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>System.Collections.Generic.Queue<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph><ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.Queue-1)</ept> or <bpt id="p2">[</bpt>System.Collections.Concurrent.ConcurrentQueue<ph id="ph3">&amp;lt;</ph>T<ph id="ph4">&amp;gt;</ph><ept id="p2">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Concurrent.ConcurrentQueue-1)</ept> generic class offer FIFO access.</source>
          <target state="translated"><bpt id="p1">[</bpt>System.Collections.Generic.Queue<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph><ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.Queue-1)</ept> 또는 <bpt id="p2">[</bpt>System.Collections.Concurrent.ConcurrentQueue<ph id="ph3">&amp;lt;</ph>T<ph id="ph4">&amp;gt;</ph><ept id="p2">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Concurrent.ConcurrentQueue-1)</ept> 제네릭 클래스는 FIFO 액세스를 제공합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>When to Use a Thread-Safe Collection<ept id="p1">](threadsafe/when-to-use-a-thread-safe-collection.md)</ept>.</source>
          <target state="translated">자세한 내용은 <bpt id="p1">[</bpt>스레드로부터 안전한 컬렉션 사용 시기<ept id="p1">](threadsafe/when-to-use-a-thread-safe-collection.md)</ept>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>System.Collections.Generic.Stack<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph><ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.Stack-1)</ept> or<bpt id="p2">[</bpt>System.Collections.Concurrent.ConcurrentStack<ph id="ph3">&amp;lt;</ph>T<ph id="ph4">&amp;gt;</ph><ept id="p2">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Concurrent.ConcurrentStack-1)</ept> generic class offer LIFO access.</source>
          <target state="translated"><bpt id="p1">[</bpt>System.Collections.Generic.Stack<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph><ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.Stack-1)</ept> 또는 <bpt id="p2">[</bpt>System.Collections.Concurrent.ConcurrentStack<ph id="ph3">&amp;lt;</ph>T<ph id="ph4">&amp;gt;</ph><ept id="p2">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Concurrent.ConcurrentStack-1)</ept> 제네릭 클래스는 LIFO 액세스를 제공합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>When to Use a Thread-Safe Collection<ept id="p1">](threadsafe/when-to-use-a-thread-safe-collection.md)</ept>.</source>
          <target state="translated">자세한 내용은 <bpt id="p1">[</bpt>스레드로부터 안전한 컬렉션 사용 시기<ept id="p1">](threadsafe/when-to-use-a-thread-safe-collection.md)</ept>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>System.Collections.Generic.LinkedList<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph><ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.LinkedList-1)</ept> generic class allows sequential access either from the head to the tail, or from the tail to the head.</source>
          <target state="translated"><bpt id="p1">[</bpt>System.Collections.Generic.LinkedList<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph><ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.LinkedList-1)</ept> 제네릭 클래스는 헤드에서 테일로 또는 테일에서 헤드로 순차적 액세스를 허용합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Do you need to access each element by index?</source>
          <target state="translated">인덱스를 기준으로 각 요소에 액세스해야 하나요?</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>System.Collections.Specialized.StringCollection<ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Specialized.StringCollection)</ept> class and the <bpt id="p2">[</bpt>System.Collections.Generic.List<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph><ept id="p2">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.List-1)</ept> generic class offer access to their elements by the zero-based index of the element.</source>
          <target state="translated"><bpt id="p1">[</bpt>System.Collections.Specialized.StringCollection<ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Specialized.StringCollection)</ept> 클래스 및 <bpt id="p2">[</bpt>System.Collections.Generic.List<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph><ept id="p2">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.List-1)</ept> 제네릭 클래스는 요소의 0 기반 인덱스를 기준으로 해당 요소에 액세스를 제공합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>System.Collections.Specialized.ListDictionary<ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Specialized.ListDictionary)</ept> and <bpt id="p2">[</bpt>System.Collections.Specialized.StringDictionary<ept id="p2">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Specialized.StringDictionary)</ept> classes, and the <bpt id="p3">[</bpt>System.Collections.Generic.Dictionary<ph id="ph1">&amp;lt;</ph>TKey, TValue<ph id="ph2">&amp;gt;</ph><ept id="p3">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.Dictionary-2)</ept> and <bpt id="p4">[</bpt>System.Collections.Generic.SortedDictionary<ph id="ph3">&amp;lt;</ph>TKey, TValue<ph id="ph4">&amp;gt;</ph><ept id="p4">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.SortedDictionary-2)</ept> generic classes offer access to their elements by the key of the element.</source>
          <target state="translated"><bpt id="p1">[</bpt>System.Collections.Specialized.ListDictionary<ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Specialized.ListDictionary)</ept> 및 <bpt id="p2">[</bpt>System.Collections.Specialized.StringDictionary<ept id="p2">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Specialized.StringDictionary)</ept> 클래스와 <bpt id="p3">[</bpt>System.Collections.Generic.Dictionary<ph id="ph1">&amp;lt;</ph>TKey, TValue<ph id="ph2">&amp;gt;</ph><ept id="p3">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.Dictionary-2)</ept> 및 <bpt id="p4">[</bpt>System.Collections.Generic.SortedDictionary<ph id="ph3">&amp;lt;</ph>TKey, TValue<ph id="ph4">&amp;gt;</ph><ept id="p4">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.SortedDictionary-2)</ept> 제네릭 클래스는 요소의 키를 기준으로 해당 요소에 대한 액세스를 제공합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>System.Collections.Specialized.NameObjectCollectionBase<ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Specialized.NameObjectCollectionBase)</ept> and <bpt id="p2">[</bpt>System.Collections.Specialized.NameValueCollection<ept id="p2">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Specialized.NameValueCollection)</ept> classes, and the <bpt id="p3">[</bpt>System.Collections.ObjectModel.KeyedCollection<ph id="ph1">&amp;lt;</ph>TKey, TValue<ph id="ph2">&amp;gt;</ph><ept id="p3">](https://docs.microsoft.com/dotnet/core/api/System.Collections.ObjectModel.KeyedCollection-2)</ept> and <bpt id="p4">[</bpt>System.Collections.Generic.SortedList<ph id="ph3">&amp;lt;</ph>TKey, TValue<ph id="ph4">&amp;gt;</ph><ept id="p4">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.SortedList-2)</ept> generic classes offer access to their elements by either the zero-based index or the key of the element.</source>
          <target state="translated"><bpt id="p1">[</bpt>System.Collections.Specialized.NameObjectCollectionBase<ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Specialized.NameObjectCollectionBase)</ept> 및 <bpt id="p2">[</bpt>System.Collections.Specialized.NameValueCollection<ept id="p2">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Specialized.NameValueCollection)</ept> 클래스와 <bpt id="p3">[</bpt>System.Collections.ObjectModel.KeyedCollection<ph id="ph1">&amp;lt;</ph>TKey, TValue<ph id="ph2">&amp;gt;</ph><ept id="p3">](https://docs.microsoft.com/dotnet/core/api/System.Collections.ObjectModel.KeyedCollection-2)</ept> 및 <bpt id="p4">[</bpt>System.Collections.Generic.SortedList<ph id="ph3">&amp;lt;</ph>TKey, TValue<ph id="ph4">&amp;gt;</ph><ept id="p4">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.SortedList-2)</ept> 제네릭 클래스는 0 기반 인덱스 또는 요소의 키를 기준으로 해당 요소에 대한 액세스를 제공합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Will each element contain one value, a combination of one key and one value, or a combination of one key and multiple values?</source>
          <target state="translated">각 요소에 값 한 개, 키 한 개와 값 한 개의 조합 또는 키 한 개와 여러 값의 조합이 포함되나요?</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>One value: Use any of the collections based on the <bpt id="p1">[</bpt>System.Collections.Generic.IList<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph><ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.IList-1)</ept> generic interface.</source>
          <target state="translated">값 한 개: <bpt id="p1">[</bpt>System.Collections.Generic.IList<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph><ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.IList-1)</ept> 제네릭 인터페이스를 기반으로 컬렉션을 사용합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>One key and one value: Use any of the collections based on the <bpt id="p1">[</bpt>System.Collections.Generic.IDictionary<ph id="ph1">&amp;lt;</ph>TKey, TValue<ph id="ph2">&amp;gt;</ph><ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.IDictionary-2)</ept> generic interface.</source>
          <target state="translated">키 한 개와 값 한 개: <bpt id="p1">[</bpt>System.Collections.Generic.IDictionary<ph id="ph1">&amp;lt;</ph>TKey, TValue<ph id="ph2">&amp;gt;</ph><ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.IDictionary-2)</ept> 제네릭 인터페이스를 기반으로 컬렉션을 사용합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>One value with embedded key: Use the <bpt id="p1">[</bpt>System.Collections.ObjectModel.KeyedCollection<ph id="ph1">&amp;lt;</ph>TKey, TValue<ph id="ph2">&amp;gt;</ph><ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.ObjectModel.KeyedCollection-2)</ept> generic class.</source>
          <target state="translated">포함된 키가 있는 값 한 개: <bpt id="p1">[</bpt>System.Collections.ObjectModel.KeyedCollection<ph id="ph1">&amp;lt;</ph>TKey, TValue<ph id="ph2">&amp;gt;</ph><ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.ObjectModel.KeyedCollection-2)</ept> 제네릭 클래스를 사용합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>One key and multiple values: Use the <bpt id="p1">[</bpt>System.Collections.Specialized.NameValueCollection<ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Specialized.NameValueCollection)</ept> class.</source>
          <target state="translated">키 한 개와 다중 값: <bpt id="p1">[</bpt>System.Collections.Specialized.NameValueCollection<ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Specialized.NameValueCollection)</ept> 클래스를 사용입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Do you need to sort the elements differently from how they were entered?</source>
          <target state="translated">입력된 순서와 다르게 요소를 정렬해야 하나요?</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>System.Collections.Hashtable<ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Hashtable)</ept> class sorts its elements by their hash codes.</source>
          <target state="translated"><bpt id="p1">[</bpt>System.Collections.Hashtable<ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Hashtable)</ept> 클래스는 해시 코드를 기준으로 해당 요소를 정렬합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>System.Collections.Generic.SortedDictionary<ph id="ph1">&amp;lt;</ph>TKey, TValue<ph id="ph2">&amp;gt;</ph><ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.SortedDictionary-2)</ept> and <bpt id="p2">[</bpt>System.Collections.Generic.SortedList<ph id="ph3">&amp;lt;</ph>TKey, TValue<ph id="ph4">&amp;gt;</ph><ept id="p2">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.SortedList-2)</ept> generic classes sort their elements by the key, based on implementations of the <bpt id="p3">[</bpt>System.Collections.IComparer<ept id="p3">](https://docs.microsoft.com/dotnet/core/api/System.Collections.IComparer)</ept> interface and the <bpt id="p4">[</bpt>System.Collections.Generic.IComparer<ph id="ph5">&amp;lt;</ph>T<ph id="ph6">&amp;gt;</ph><ept id="p4">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.IComparer-1)</ept> generic interface.</source>
          <target state="translated"><bpt id="p1">[</bpt>System.Collections.Generic.SortedDictionary<ph id="ph1">&amp;lt;</ph>TKey, TValue<ph id="ph2">&amp;gt;</ph><ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.SortedDictionary-2)</ept> 및 <bpt id="p2">[</bpt>System.Collections.Generic.SortedList<ph id="ph3">&amp;lt;</ph>TKey, TValue<ph id="ph4">&amp;gt;</ph><ept id="p2">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.SortedList-2)</ept> 제네릭 클래스는 <bpt id="p3">[</bpt>System.Collections.IComparer<ept id="p3">](https://docs.microsoft.com/dotnet/core/api/System.Collections.IComparer)</ept> 인터페이스 및 <bpt id="p4">[</bpt>System.Collections.Generic.IComparer<ph id="ph5">&amp;lt;</ph>T<ph id="ph6">&amp;gt;</ph><ept id="p4">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.IComparer-1)</ept> 제네릭 인터페이스의 구현을 기반으로 키에서 해당 요소를 정렬합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.Collections.Generic.List<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph><ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.List-1)</ept> generic class, provides a <ph id="ph3">`Sort`</ph> method that takes an implementation of the <ph id="ph4">`IComparer&lt;T&gt;`</ph> generic interface as a parameter.</source>
          <target state="translated"><bpt id="p1">[</bpt>System.Collections.Generic.List<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph><ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.List-1)</ept> 제네릭 클래스는 <ph id="ph4">`IComparer&lt;T&gt;`</ph> 제네릭 인터페이스의 구현을 매개 변수로 사용하는 <ph id="ph3">`Sort`</ph> 메서드를 제공합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Do you need collections that accept only strings?</source>
          <target state="translated">문자열만 수락하는 컬렉션이 필요한가요?</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>StringCollection<ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Specialized.StringCollection)</ept> (based on <bpt id="p2">[</bpt>System.Collections.IList<ept id="p2">](https://docs.microsoft.com/dotnet/core/api/System.Collections.IList)</ept>) and <bpt id="p3">[</bpt>StringDictionary<ept id="p3">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Specialized.StringDictionary)</ept> (based on <bpt id="p4">[</bpt>System.Collections.IDictionary<ept id="p4">](https://docs.microsoft.com/dotnet/core/api/System.Collections.IDictionary)</ept>) are in the <bpt id="p5">[</bpt>System.Collections.Specialized<ept id="p5">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Specialized)</ept> namespace.</source>
          <target state="translated"><bpt id="p1">[</bpt>StringCollection<ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Specialized.StringCollection)</ept>(<bpt id="p2">[</bpt>System.Collections.IList<ept id="p2">](https://docs.microsoft.com/dotnet/core/api/System.Collections.IList)</ept> 기반) 및 <bpt id="p3">[</bpt>StringDictionary<ept id="p3">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Specialized.StringDictionary)</ept>(<bpt id="p4">[</bpt>System.Collections.IDictionary<ept id="p4">](https://docs.microsoft.com/dotnet/core/api/System.Collections.IDictionary)</ept> 기반)는 <bpt id="p5">[</bpt>System.Collections.Specialized<ept id="p5">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Specialized)</ept> 네임스페이스에 위치합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>In addition, you can use any of the generic collection classes in the <bpt id="p1">[</bpt>System.Collections.Generic<ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic)</ept> namespace as strongly typed string collections by specifying the <ph id="ph1">`String`</ph> class for their generic type arguments.</source>
          <target state="translated">또한 제네릭 형식 인수에 대해 <ph id="ph1">`String`</ph> 클래스를 지정하여 <bpt id="p1">[</bpt>System.Collections.Generic<ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic)</ept> 네임스페이스의 제네릭 컬렉션 클래스 중 하나를 강력한 형식의 문자열 컬렉션으로 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>LINQ to Objects</source>
          <target state="translated">LINQ to Objects</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>LINQ to Objects enables developers to use LINQ queries to access in-memory objects as long as the object type implements <bpt id="p1">[</bpt>System.Collections.IEnumerable<ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.IEnumerable)</ept> or <bpt id="p2">[</bpt>System.Collections.Generic.IEnumerable<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph><ept id="p2">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.IEnumerable-1)</ept>.</source>
          <target state="translated">개발자가 LINQ to Objects를 사용하면 개체 형식이 <bpt id="p1">[</bpt>System.Collections.IEnumerable<ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.IEnumerable)</ept> 또는 <bpt id="p2">[</bpt>System.Collections.Generic.IEnumerable<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph><ept id="p2">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.IEnumerable-1)</ept>을 구현하는 경우 LINQ 쿼리를 통해 메모리 내 개체에 액세스할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>LINQ queries provide a common pattern for accessing data, are typically more concise and readable than standard foreach loops, and provide filtering, ordering, and grouping capabilities.</source>
          <target state="translated">LINQ 쿼리는 데이터 액세스를 위한 일반 패턴을 제공하고, 일반적으로 표준 foreach 루프에 비해 간결하고 쉽게 읽을 수 있으며, 필터링, 순서 지정 및 그룹화 기능을 제공합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Language Integrated Query (LINQ)<ept id="p1">](../../csharp/linq.md)</ept>.</source>
          <target state="translated">자세한 내용은 <bpt id="p1">[</bpt>LINQ(언어 통합 쿼리)<ept id="p1">](../../csharp/linq.md)</ept>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">참고 항목</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.Collections<ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>System.Collections<ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections)</ept></target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.Collections.Specialized<ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Specialized)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>System.Collections.Specialized<ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Specialized)</ept></target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.Collections.Generic<ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>System.Collections.Generic<ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic)</ept></target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Thread-Safe Collections<ept id="p1">](threadsafe/index.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>스레드로부터 안전한 컬렉션<ept id="p1">](threadsafe/index.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>