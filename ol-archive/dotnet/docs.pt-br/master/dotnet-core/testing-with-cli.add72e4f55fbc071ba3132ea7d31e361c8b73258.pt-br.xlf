<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b5c25fc" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3f401907a59d5427cbcfaa0b785931a7ed82110f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\tutorials\testing-with-cli.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4af27309b045a224784d963636f1b8c06081ee83</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4544c9bee6e7f3b4d36cd122ee22e1224393eec4</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Organizing and testing projects with the .NET Core command line | Microsoft Docs</source>
          <target state="translated">Organizando e testando projetos com a linha de comando do .NET Core | Microsoft Docs</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This tutorial explains how to organize and test .NET Core projects from the command line.</source>
          <target state="translated">Este tutorial explica como organizar e testar projetos do .NET Core por meio da linha de comando.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Organizing and testing projects with the .NET Core command line</source>
          <target state="translated">Organizando e testando projetos com a linha de comando do .NET Core</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This tutorial follows <bpt id="p1">[</bpt>Getting started with .NET Core on Windows/Linux/macOS using the command line<ept id="p1">](./using-with-xplat-cli.md)</ept> to show how to go beyond simple "hello world" scenarios and pave the way for more advanced and well-organized applications.</source>
          <target state="translated">Este tutorial segue a <bpt id="p1">[</bpt>Introdução ao .NET Core no Windows/Linux/macOS usando a linha de comando<ept id="p1">](./using-with-xplat-cli.md)</ept> para mostrar como ir além dos simples cenários “olá, mundo” e preparar o caminho para aplicativos mais avançados e bem organizados.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Using folders to organize code</source>
          <target state="translated">Usar pastas para organizar o código</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Say you wanted to introduce some new types to do work on.</source>
          <target state="translated">Digamos que você deseja apresentar alguns novos tipos para trabalhar.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You can do this by adding more files and making sure to give them namespaces you can include in your <bpt id="p1">*</bpt>Program.cs<ept id="p1">*</ept> file.</source>
          <target state="translated">É possível fazer isso adicionando mais arquivos e verificando se eles receberam namespaces que podem ser incluídos no arquivo <bpt id="p1">*</bpt>Program.cs<ept id="p1">*</ept>.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This works great when the size of your project is relatively small.</source>
          <target state="translated">Isso funciona muito bem quando o tamanho do projeto é relativamente pequeno.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>However if you have a larger app with many different data types and potentially multiple layers, you may wish to organize things logically.</source>
          <target state="translated">No entanto, se você tiver um aplicativo maior com vários tipos de dados diferentes e possivelmente várias camadas, será recomendável organizar as coisas de maneira lógica.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This is where folders come into play.</source>
          <target state="translated">É nesse momento que as pastas entram em cena.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You can either follow along with <bpt id="p1">[</bpt>the NewTypes sample project<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/console-apps/NewTypesMsBuild)</ept> that this guide covers, or create your own files and folders.</source>
          <target state="translated">Você pode acompanhar <bpt id="p1">[</bpt>o projeto de exemplo NewTypes<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/console-apps/NewTypesMsBuild)</ept> que este guia aborda ou criar seus próprios arquivos e pastas.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>To begin, create a new folder under the root of your project.</source>
          <target state="translated">Para começar, crie uma nova pasta na raiz do seu projeto.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`/Model`</ph> is chosen here.</source>
          <target state="translated"><ph id="ph1">`/Model`</ph> é escolhido aqui.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Now add some new types to the folder:</source>
          <target state="translated">Agora adicione alguns novos tipos à pasta:</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Now, just as if they were files in the same directory, give them all the same namespace so you can include them in your <ph id="ph1">`Program.cs`</ph>.</source>
          <target state="translated">Agora, da mesma forma que faria com arquivos no mesmo diretório, conceda a todos eles o mesmo namespace para que você possa incluí-los no seu <ph id="ph1">`Program.cs`</ph>.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Example: Pet Types</source>
          <target state="translated">Exemplo: Tipos de animais de estimação</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This example creates two new types, <ph id="ph1">`Dog`</ph> and <ph id="ph2">`Cat`</ph>, and has them implement a common interface, <ph id="ph3">`IPet`</ph>.</source>
          <target state="translated">Esse exemplo cria dois novos tipos, <ph id="ph1">`Dog`</ph> e <ph id="ph2">`Cat`</ph>, e faz com que eles implementem uma interface comum, <ph id="ph3">`IPet`</ph>.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Folder Structure:</source>
          <target state="translated">Estrutura de Pastas:</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`IPet.cs`</ph>:</source>
          <target state="translated"><ph id="ph1">`IPet.cs`</ph>:</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Dog.cs`</ph>:</source>
          <target state="translated"><ph id="ph1">`Dog.cs`</ph>:</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Cat.cs`</ph>:</source>
          <target state="translated"><ph id="ph1">`Cat.cs`</ph>:</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Program.cs`</ph>:</source>
          <target state="translated"><ph id="ph1">`Program.cs`</ph>:</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`NewTypes.csproj`</ph>:</source>
          <target state="translated"><ph id="ph1">`NewTypes.csproj`</ph>:</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>And if you run this:</source>
          <target state="translated">E se você executar isso:</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>New pet types can be added (such as a <ph id="ph1">`Bird`</ph>), extending this project.</source>
          <target state="translated">É possível adicionar novos tipos de animais de estimação (como um <ph id="ph1">`Bird`</ph>), estendendo esse projeto.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Testing your Console App</source>
          <target state="translated">Testando seu Aplicativo de Console</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You'll probably be wanting to test your projects at some point.</source>
          <target state="translated">Você provavelmente vai querer testar seus projetos em algum momento.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Here's a good way to do it:</source>
          <target state="translated">Aqui está uma boa maneira de fazer isso:</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Move any source of your existing project into a new <ph id="ph1">`src`</ph> folder.</source>
          <target state="translated">Mova o código-fonte do seu projeto existente para uma nova pasta <ph id="ph1">`src`</ph>.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Create a <ph id="ph1">`/test`</ph> directory, then <ph id="ph2">`cd`</ph> into it.</source>
          <target state="translated">Crie um diretório <ph id="ph1">`/test`</ph> e <ph id="ph2">`cd`</ph> dentro dele.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Initialize the directory with a <ph id="ph1">`dotnet new xunit`</ph> command.</source>
          <target state="translated">Inicialize o diretório com um comando <ph id="ph1">`dotnet new xunit`</ph>.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This assumes xUnit, but you can also use MSTest by replacing <ph id="ph1">`xunit`</ph> with <ph id="ph2">`mstest`</ph>.</source>
          <target state="translated">Isso pressupõe o xUnit, mas você também pode usar o MSTest substituindo <ph id="ph1">`xunit`</ph> por <ph id="ph2">`mstest`</ph>.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Example: Extending the NewTypes project</source>
          <target state="translated">Exemplo: Estendendo o projeto NewTypes</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Now that the project system is in place, you can create your test project and start writing tests!</source>
          <target state="translated">Agora que o sistema do projeto está em vigor, você pode criar seu projeto de teste e começar a escrever testes.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>From here on out, this guide will use and extend <bpt id="p1">[</bpt>the sample Types project<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/console-apps/NewTypesMsBuild)</ept>.</source>
          <target state="translated">A partir daqui, este guia usará e estenderá <bpt id="p1">[</bpt>o projeto Types de exemplo<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/console-apps/NewTypesMsBuild)</ept>.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Additionally, it will use the <bpt id="p1">[</bpt>Xunit<ept id="p1">](https://xunit.github.io/)</ept> test framework.</source>
          <target state="translated">Além disso, ele usará a estrutura de teste do <bpt id="p1">[</bpt>Xunit<ept id="p1">](https://xunit.github.io/)</ept>.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Feel free to follow along or create your own multi-project system with tests.</source>
          <target state="translated">Fique à vontade para acompanhá-lo ou criar seu próprio sistema multiprojeto com testes.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The whole project structure should look like this:</source>
          <target state="translated">A estrutura de todo o projeto deve assemelhar-se a:</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>There are two new things to make sure you have in your test project:</source>
          <target state="translated">Há duas coisas que você precisa ter no seu projeto de teste:</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>A correct <bpt id="p1">*</bpt>NewTypesTests.csproj<ept id="p1">*</ept> file with the following:</source>
          <target state="translated">Um arquivo <bpt id="p1">*</bpt>NewTypesTests.csproj<ept id="p1">*</ept> correto com o seguinte:</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>A reference to <ph id="ph1">`xunit`</ph></source>
          <target state="translated">Uma referência a <ph id="ph1">`xunit`</ph></target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A reference to <ph id="ph1">`dotnet-test-xunit`</ph></source>
          <target state="translated">Uma referência a <ph id="ph1">`dotnet-test-xunit`</ph></target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>A reference to the namespace corresponding to the code under test</source>
          <target state="translated">Uma referência para o namespace correspondente ao código em teste</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This can be built by typing <ph id="ph1">`dotnet new xunit`</ph> at a command prompt in the <bpt id="p1">*</bpt>NewTypesTests<ept id="p1">*</ept> directory, then adding a project reference to the <ph id="ph2">`NewTypes`</ph> project.</source>
          <target state="translated">Isso pode ser criado digitando <ph id="ph1">`dotnet new xunit`</ph> em um prompt de comando no diretório <bpt id="p1">*</bpt>NewTypesTests<ept id="p1">*</ept> e adicionando uma referência de projeto ao projeto <ph id="ph2">`NewTypes`</ph>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`NewTypesTests/NewTypesTests.csproj`</ph>:</source>
          <target state="translated"><ph id="ph1">`NewTypesTests/NewTypesTests.csproj`</ph>:</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>An xUnit test class.</source>
          <target state="translated">Uma classe de teste xUnit.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`PetTests.cs`</ph>:</source>
          <target state="translated"><ph id="ph1">`PetTests.cs`</ph>:</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Now you can run tests!</source>
          <target state="translated">Agora você pode executar testes.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><ph id="ph1">`dotnet test`</ph><ept id="p1">](../tools/dotnet-test.md)</ept> command runs the test runner you have specified in your project.</source>
          <target state="translated">O comando <bpt id="p1">[</bpt><ph id="ph1">`dotnet test`</ph><ept id="p1">](../tools/dotnet-test.md)</ept> executa o executor de teste que você especificou no seu projeto.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Make sure you start at the top-level directory.</source>
          <target state="translated">Lembre-se de iniciar pelo diretório de nível superior.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Output should look like this:</source>
          <target state="translated">A saída deve ser semelhante a esta:</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>