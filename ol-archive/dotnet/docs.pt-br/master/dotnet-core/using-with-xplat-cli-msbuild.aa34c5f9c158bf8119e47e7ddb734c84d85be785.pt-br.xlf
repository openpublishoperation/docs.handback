<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-f0362aa" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4c17da61f492e17edf4d69d79be430ead3dd0cc6</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\preview3\tutorials\using-with-xplat-cli-msbuild.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bcbfbf9c4088dc5a89fe219799654631a705b1e1</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">53eec76e487f494b2b5aa4b5c1366e39a90e382d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Getting started with .NET Core on Windows/Linux/macOS using the command line (.NET Core Tools RC4) | Microsoft Docs</source>
          <target state="translated">Introdução ao .NET Core no Windows/Linux/macOS usando a linha de comando (Ferramentas do .NET Core RC4) | Microsoft Docs</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Getting started with .NET Core on Windows, Linux, or macOS using the .NET Core command line interface (CLI)</source>
          <target state="translated">Introdução ao .NET Core no Windows, Linux ou macOS usando a CLI (Interface de Linha de Comando) do .NET Core</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Getting started with .NET Core on Windows/Linux/macOS using the command line (.NET Core Tools RC4)</source>
          <target state="translated">Introdução ao .NET Core no Windows/Linux/macOS usando a linha de comando (Ferramentas do .NET Core RC4)</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This topic applies to .NET Core Tools RC4.</source>
          <target state="translated">Este tópico se aplica às Ferramentas do .NET Core RC4.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For the .NET Core Tools Preview 2 version, see the <bpt id="p1">[</bpt>Getting started with .NET Core on Windows/Linux/macOS using the command line<ept id="p1">](../../tutorials/using-with-xplat-cli.md)</ept> topic.</source>
          <target state="translated">Para a versão de Visualização 2 das Ferramentas do .NET Core, consulte o tópico <bpt id="p1">[</bpt>Introdução ao .NET Core no Windows/Linux/macOS usando a linha de comando<ept id="p1">](../../tutorials/using-with-xplat-cli.md)</ept>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This guide will show you how to use the .NET Core CLI tooling to build cross-platform console apps.</source>
          <target state="translated">Este guia mostrará como usar as ferramentas de CLI do .NET Core para criar aplicativos de console de plataforma cruzada.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>It will start with the most basic console app and eventually span multiple projects, including testing.</source>
          <target state="translated">Ele começará com o aplicativo de console mais básico e eventualmente abrangerá vários projetos, incluindo testes.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You'll add these features step-by-step, building on what you've already seen and built.</source>
          <target state="translated">Você adicionará esses recursos passo a passo, avançando com base no que você já viu e criou.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If you're unfamiliar with the .NET Core CLI toolset, read <bpt id="p1">[</bpt>the .NET Core SDK overview<ept id="p1">](../tools/dotnet.md)</ept>.</source>
          <target state="translated">Se você não estiver familiarizado com o conjunto de ferramentas da CLI do .NET Core, leia a <bpt id="p1">[</bpt>Visão geral do SDK do .NET Core<ept id="p1">](../tools/dotnet.md)</ept>.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
          <target state="translated">Pré-requisitos</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Before you begin, ensure you have <bpt id="p1">[</bpt>.NET Core CLI tooling RC4 or later<ept id="p1">](https://github.com/dotnet/core/blob/master/release-notes/preview3-download.md)</ept>.</source>
          <target state="translated">Antes de começar, verifique se você tem as <bpt id="p1">[</bpt>ferramentas da CLI do .NET Core do RC4 ou posterior<ept id="p1">](https://github.com/dotnet/core/blob/master/release-notes/preview3-download.md)</ept>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You'll also need a text editor.</source>
          <target state="translated">Você também precisará de um editor de texto.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Hello, Console App!</source>
          <target state="translated">Olá, Aplicativo de Console.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>First, navigate to or create a new folder with a name you like.</source>
          <target state="translated">Primeiro, procure ou crie uma nova pasta com o nome desejado.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>"Hello" is the name chosen for the sample code, which can be found <bpt id="p1">[</bpt>here<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/console-apps/HelloMsBuild)</ept>.</source>
          <target state="translated">“Hello” é o nome escolhido para o código de exemplo, que pode ser encontrado <bpt id="p1">[</bpt>aqui<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/console-apps/HelloMsBuild)</ept>.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Open up a command prompt and type the following:</source>
          <target state="translated">Abra um prompt de comando e digite o seguinte:</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Let's do a quick walkthrough:</source>
          <target state="translated">Vejamos um breve passo a passo:</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">`dotnet new`</ph><ept id="p1">](../tools/dotnet-new.md)</ept> creates an up-to-date <ph id="ph2">`Hello.csproj`</ph> project file with the dependencies necessary to build a console app.</source>
          <target state="translated"><bpt id="p1">[</bpt><ph id="ph1">`dotnet new`</ph><ept id="p1">](../tools/dotnet-new.md)</ept> cria um arquivo de projeto <ph id="ph2">`Hello.csproj`</ph> atualizado com as dependências necessárias para criar um aplicativo de console.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>It also creates a <ph id="ph1">`Program.cs`</ph>, a basic file containing the entry point for the application.</source>
          <target state="translated">Ele também cria um <ph id="ph1">`Program.cs`</ph>, um arquivo básico que contém o ponto de entrada para o aplicativo.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Hello.csproj`</ph>:</source>
          <target state="translated"><ph id="ph1">`Hello.csproj`</ph>:</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The project file specifies everything that's needed to restore dependencies and build the program.</source>
          <target state="translated">O arquivo de projeto especifica tudo o que é necessário para restaurar as dependências e compilar o programa.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Import`</ph> tag brings in some properties that are common to all .NET Core projects.</source>
          <target state="translated">A marca <ph id="ph1">`Import`</ph> traz algumas propriedades que são comuns a todos os projetos do .NET Core.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`OutputType`</ph> tag specifies that we're building an executable, in other words a console application.</source>
          <target state="translated">A marca <ph id="ph1">`OutputType`</ph> especifica que estamos copilando um executável, em outras palavras, um aplicativo de console.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`TargetFramework`</ph> tag specifies what .NET runtime we're targeting.</source>
          <target state="translated">A marca <ph id="ph1">`TargetFramework`</ph> especifica o tempo de execução do .NET que estamos direcionando.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In an advance scenario, you can specify multiple target frameworks and build to all those in a single operation.</source>
          <target state="translated">Em um cenário avançado, você pode especificar várias estruturas de destino e compilar todos eles em uma única operação.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In this tutorial, we'll stick to building only for .NET Core 1.0.</source>
          <target state="translated">Neste tutorial, veremos apenas a compilação para .NET Core 1.0.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Compile`</ph> tag tells the compiler to build all the files in the current directory and all its subdirectories that have the <ph id="ph2">`.cs`</ph> file extension, in other words all the C# files in the project.</source>
          <target state="translated">A marca <ph id="ph1">`Compile`</ph> informa ao compilador que ele deve compilar todos os arquivos no diretório atual e todos os seus subdiretórios que têm a extensão de arquivo <ph id="ph2">`.cs`</ph>, em outras palavras, todas os arquivos C# no projeto.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In advanced scenarios, it is possible to exclude files, but in this tutorial, and in most simple scenarios, this line can be left unchanged.</source>
          <target state="translated">Em cenários avançados, é possível excluir arquivos, mas neste tutorial e na maioria dos cenários simples, essa linha pode ser deixada inalterada.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`EmbeddedResource`</ph> tag instructs the build system to embed localization files with the extension <ph id="ph2">`.resx`</ph> into the compiled executable.</source>
          <target state="translated">A marca <ph id="ph1">`EmbeddedResource`</ph> instrui o sistema de build a inserir arquivos de localização com a extensão <ph id="ph2">`.resx`</ph> para o executável compilado.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>We won't use that feature in this tutorial.</source>
          <target state="translated">Não usaremos esse recurso neste tutorial.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`PackageReference`</ph> tags specify what dependency packages must be restored and included when building the application.</source>
          <target state="translated">As marcas <ph id="ph1">`PackageReference`</ph> especificam quais pacotes de dependência devem ser restaurados e incluídos ao compilar o aplicativo.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Each package reference specifies the name of the package under the <ph id="ph1">`Include`</ph> attribute, and a version number.</source>
          <target state="translated">Cada referência de pacote especifica o nome do pacote sob o atributo <ph id="ph1">`Include`</ph> e um número de versão.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>In most advanced scenarios, you'll add more package references.</source>
          <target state="translated">Em cenários mais avançados, é possível adicionar mais referências de pacote.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>It is also possible to reference other projects on disk.</source>
          <target state="translated">Também é possível fazer referência a outros projetos no disco.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Program.cs`</ph>:</source>
          <target state="translated"><ph id="ph1">`Program.cs`</ph>:</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The program starts by <ph id="ph1">`using System`</ph>, which means "bring everything in the <ph id="ph2">`System`</ph> namespace into scope for this file".</source>
          <target state="translated">O programa é iniciado pelo <ph id="ph1">`using System`</ph>, que significa "colocar tudo no namespace <ph id="ph2">`System`</ph> no escopo para este arquivo".</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`System`</ph> namespace includes basic constructs such as <ph id="ph2">`string`</ph>, or numeric types.</source>
          <target state="translated">O namespace <ph id="ph1">`System`</ph> inclui construções básicas, como <ph id="ph2">`string`</ph> ou tipos numéricos.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>We then define a namespace called "ConsoleApplication".</source>
          <target state="translated">Em seguida, define-se um namespace chamado "ConsoleApplication".</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>You can change this to anything you want.</source>
          <target state="translated">Você pode alterar isso de acordo com a sua vontade.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>A class named "Program" is defined within that namespace, with a <ph id="ph1">`Main`</ph> method that takes an array of strings as its argument.</source>
          <target state="translated">Uma classe chamada "Programa" é definida dentro desse namespace, com um método <ph id="ph1">`Main`</ph> que usa uma matriz de cadeias de caracteres como argumento.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This array will contain the list of arguments passed in when the compiled program will be called.</source>
          <target state="translated">Essa matriz conterá a lista de argumentos passados quando o programa compilado for chamado.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>As it is, this array is not used: all the program is doing is to write "Hello World!"</source>
          <target state="translated">Assim, essa matriz não será usada: o que o programa faz é gravar: "Hello World!"</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>to the console.</source>
          <target state="translated">no console.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>We can make things a little more interesting by changing the <ph id="ph1">`Console.WriteLine`</ph> into the following code.</source>
          <target state="translated">Podemos tornar as coisas um pouco mais interessantes alterando o <ph id="ph1">`Console.WriteLine`</ph> para o código a seguir.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">`dotnet restore`</ph><ept id="p1">](../tools/dotnet-restore.md)</ept> calls into <bpt id="p2">[</bpt>NuGet<ept id="p2">](http://nuget.org)</ept> (.NET's package manager) to restore the tree of dependencies.</source>
          <target state="translated"><bpt id="p1">[</bpt><ph id="ph1">`dotnet restore`</ph><ept id="p1">](../tools/dotnet-restore.md)</ept> chama o <bpt id="p2">[</bpt>NuGet<ept id="p2">](http://nuget.org)</ept> para restaurar a árvore de dependências.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>NuGet analyzes the <ph id="ph1">`Hello.csproj`</ph> file, downloads the dependencies stated in the file (or grabs them from a cache on your machine), and writes the <ph id="ph2">`obj/project.assets.json`</ph> file.</source>
          <target state="translated">O NuGet analisa o arquivo <ph id="ph1">`Hello.csproj`</ph>, baixa as dependências declaradas no arquivo (ou captura-as de um cache em seu computador) e grava o arquivo <ph id="ph2">`obj/project.assets.json`</ph>.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`project.assets.json`</ph> file is necessary to be able to compile and run.</source>
          <target state="translated">O arquivo <ph id="ph1">`project.assets.json`</ph> é necessário para compilação e execução.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`project.assets.json`</ph> file is a persisted and complete set of the graph of NuGet dependencies and other information describing an app.</source>
          <target state="translated">O arquivo <ph id="ph1">`project.assets.json`</ph> é um conjunto completo e persistente do gráfico de dependências do NuGet e outras informações que descrevem um aplicativo.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>This file is read by other tools, such as <ph id="ph1">`dotnet build`</ph> and <ph id="ph2">`dotnet run`</ph>, enabling them to process the source code with a correct set of NuGet dependencies and binding resolutions.</source>
          <target state="translated">Esse arquivo é lido por outras ferramentas, tal como <ph id="ph1">`dotnet build`</ph> e <ph id="ph2">`dotnet run`</ph>, permitindo que elas processem o código-fonte com um conjunto correto das dependências do NuGet e resoluções de associação.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">`dotnet run`</ph><ept id="p1">](../tools/dotnet-run.md)</ept> calls <ph id="ph2">`dotnet build`</ph> to ensure that the build targets have been built, and then calls <ph id="ph3">`dotnet &lt;assembly.dll&gt;`</ph> to run the target application.</source>
          <target state="translated"><bpt id="p1">[</bpt><ph id="ph1">`dotnet run`</ph><ept id="p1">](../tools/dotnet-run.md)</ept> chama <ph id="ph2">`dotnet build`</ph> para garantir que os destinos de build foram criados e então chama <ph id="ph3">`dotnet &lt;assembly.dll&gt;`</ph> para executar o aplicativo de destino.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Alternatively, you can also execute <bpt id="p1">[</bpt><ph id="ph1">`dotnet build`</ph><ept id="p1">](../tools/dotnet-build.md)</ept> to compile the code without running the build console applications.</source>
          <target state="translated">Como alternativa, também é possível pode executar <bpt id="p1">[</bpt><ph id="ph1">`dotnet build`</ph><ept id="p1">](../tools/dotnet-build.md)</ept> para compilar o código sem executar os aplicativos de console de compilação.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>This results in a <ph id="ph1">`bin/Debug/netcoreapp1.0/Hello.dll`</ph> compiled application that can be run with <ph id="ph2">`dotnet bin\Debug\netcoreapp1.0\Hello.dll`</ph> on Windows, and <ph id="ph3">`dotnet bin/Debug/netcoreapp1.0/Hello.dll`</ph> on other systems.</source>
          <target state="translated">Isso resulta em um aplicativo compilado <ph id="ph1">`bin/Debug/netcoreapp1.0/Hello.dll`</ph> que pode ser executado com <ph id="ph2">`dotnet bin\Debug\netcoreapp1.0\Hello.dll`</ph> no Windows e com <ph id="ph3">`dotnet bin/Debug/netcoreapp1.0/Hello.dll`</ph> em outros sistemas.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>You may specify an additional parameter on the command-line (assuming you are on Windows):</source>
          <target state="translated">É possível especificar um parâmetro adicional na linha de comando (supondo que você está no Windows):</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>As an advanced scenario, it's possible to build the application as a self-contained set of platform-specific files that can be deployed and run to a machine that doesn't necessarily have .NET Core installed.</source>
          <target state="translated">Como um cenário avançado, é possível compilar o aplicativo como um conjunto independente de arquivos específicos de plataforma que pode ser implantado e executado em um computador que não tem necessariamente o .NET Core instalado.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>.NET Core Application Deployment<ept id="p1">](../deploying/index.md)</ept> for details.</source>
          <target state="translated">Consulte <bpt id="p1">[</bpt>Implantação do .NET Core Application<ept id="p1">](../deploying/index.md)</ept> para obter mais informações.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Augmenting the program</source>
          <target state="translated">Ampliando o programa</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Let's change the file just a little bit.</source>
          <target state="translated">Vamos alterar o arquivo um pouco.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Fibonacci numbers are fun, so let's try that out:</source>
          <target state="translated">Números Fibonacci são divertidos, por isso, vamos experimentá-los:</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Program.cs`</ph>:</source>
          <target state="translated"><ph id="ph1">`Program.cs`</ph>:</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>And running the program (assuming you're on Windows, and have changed the project directory name to Fibonacci):</source>
          <target state="translated">E executar o programa (supondo que você está no Windows e alterou o nome do diretório de projeto para Fibonacci):</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>And that's it!</source>
          <target state="translated">E pronto.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>You can augment <ph id="ph1">`Program.cs`</ph> any way you like.</source>
          <target state="translated">Você pode ampliar <ph id="ph1">`Program.cs`</ph> como desejar.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Adding some new files</source>
          <target state="translated">Adicionando alguns arquivos novos</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Single files are fine for simple one-off programs, but chances are you're going to want to break things out into multiple files if you're building anything which has multiple components.</source>
          <target state="translated">Arquivos individuais são adequados para programas únicos simples, porém você provavelmente vai dividir as coisas em vários arquivos se estiver criando qualquer coisa com vários componentes.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Multiple files are a way to do that.</source>
          <target state="translated">Uma maneira de fazer isso é usar vários arquivos.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Create a new file and give it a unique namespace:</source>
          <target state="translated">Crie um novo arquivo e dê a ele um namespace exclusivo:</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Next, include it in your <ph id="ph1">`Program.cs`</ph> file:</source>
          <target state="translated">Em seguida, inclua-o no seu arquivo <ph id="ph1">`Program.cs`</ph>:</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>And finally, you can build it:</source>
          <target state="translated">E, por fim, você pode compilar:</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Now the fun part: making the new file do something!</source>
          <target state="translated">Agora vem a parte divertida: fazer com que o novo arquivo faça alguma coisa!</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Example: A Fibonacci Sequence Generator</source>
          <target state="translated">Exemplo: um gerador de sequência de Fibonacci</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Let's say you want to build off of the previous Fibonacci example by caching some Fibonacci values and add some recursive flair.</source>
          <target state="translated">Digamos que você deseja expandir o exemplo de Fibonacci anterior armazenando em cache alguns valores de Fibonacci e adicionando um toque recursivo.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Your code for a <bpt id="p1">[</bpt>better Fibonacci example<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/console-apps/FibonacciBetterMsBuild)</ept> might use a new <ph id="ph1">`FibonacciGenerator.cs`</ph> file with the following code.</source>
          <target state="translated">Seu código para um <bpt id="p1">[</bpt>exemplo melhor de Fibonacci<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/console-apps/FibonacciBetterMsBuild)</ept> pode usar um novo arquivo <ph id="ph1">`FibonacciGenerator.cs`</ph> pelo código a seguir.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Now adjust the <ph id="ph1">`Main()`</ph> method in your <ph id="ph2">`Program.cs`</ph> file as shown below.</source>
          <target state="translated">Agora, ajuste o método <ph id="ph1">`Main()`</ph> no seu arquivo <ph id="ph2">`Program.cs`</ph> conforme mostrado abaixo.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Finally, run it!</source>
          <target state="translated">Por fim, execute-o.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>And that's it!</source>
          <target state="translated">E pronto.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Conclusion</source>
          <target state="translated">Conclusão</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Hopefully this guide has helped you learn how to create a .NET Core console app, from the basics all the way up to a multi-project system with unit tests.</source>
          <target state="translated">Esperamos que esse guia tenha ajudado você a aprender como criar um aplicativo de console .NET Core, desde os princípios básicos até um sistema multiprojeto com testes de unidade.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The next step is to create awesome console apps of your own!</source>
          <target state="translated">A próxima etapa é criar seus próprios aplicativos de console incríveis.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>If a more advanced example of a console app interests you, check out the next tutorial: <bpt id="p1">[</bpt>Organizing and testing projects with the .NET Core command line (.NET Core Tools RC4)<ept id="p1">](using-with-xplat-cli-msbuild-folders.md)</ept>.</source>
          <target state="translated">Se um exemplo mais avançado de um aplicativo de console lhe interessar, confira o próximo tutorial: <bpt id="p1">[</bpt>Organizar e testar projetos com a linha de comando do .NET Core (Ferramentas do .NET Core RC4)<ept id="p1">](using-with-xplat-cli-msbuild-folders.md)</ept>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>