<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-6a73dd2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7e9bb11db4b3586639a0447737db9cd376898325</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\delegates-lambdas.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p2</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">aae9cbbba18c773bfb2aa397d05cf92d27a78319</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">49dc69e4e91139bbca55aa335f4dc86d6899dfa7</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Delegates and lambdas</source>
          <target state="translated">Delegados e lambdas</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Delegates and lambdas</source>
          <target state="translated">Delegados e lambdas</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Delegates and lambdas</source>
          <target state="translated">Delegados e lambdas</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Delegates define a type, which specify a particular method signature.</source>
          <target state="translated">Os delegados definem um tipo, que especifica uma assinatura de método específica.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>A method (static or instance) that satisfies this signature can be assigned to a variable of that type, then called directly (with the appropriate arguments) or passed as an argument itself to another method and then called.</source>
          <target state="translated">Um método (estático ou instância) que satisfaz essa assinatura pode ser atribuído a uma variável desse tipo, que então é chamada diretamente (com os argumentos apropriados) ou passada como um argumento para outro método e, então, chamada.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The following example demonstrates delegate use.</source>
          <target state="translated">O exemplo a seguir demonstra o uso de um delegado.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>On line 4 we create a delegate type of a certain signature, in this case a method that takes a string parameter and then returns a string parameter.</source>
          <target state="translated">Na linha 4, criamos um tipo de delegado de uma determinada assinatura, nesse caso um método que usa um parâmetro de cadeia de caracteres e retorna um parâmetro de cadeia de caracteres.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>On line 6, we define the implementation of the delegate by providing a method that has the exact same signature.</source>
          <target state="translated">Na linha 6, definimos a implementação do delegado fornecendo um método que tem exatamente a mesma assinatura.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>On line 13, the method is assigned to a type that conforms to the <ph id="ph1">`Reverse`</ph> delegate.</source>
          <target state="translated">Na linha 13, o método é atribuído a um tipo que está de acordo com o delegado <ph id="ph1">`Reverse`</ph>.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Finally, on line 15 we invoke the delegate passing a string to be reversed.</source>
          <target state="translated">Por fim, na linha 15 invocamos o delegado passando uma cadeia de caracteres a ser revertida.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In order to streamline the development process, .NET includes a set of delegate types that programmers can reuse and not have to create new types.</source>
          <target state="translated">Para simplificar o processo de desenvolvimento, o .NET inclui um conjunto de tipos de delegados que os programadores podem reutilizar, sem precisar criar novos tipos.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>These are <ph id="ph1">`Func&lt;&gt;`</ph>, <ph id="ph2">`Action&lt;&gt;`</ph> and <ph id="ph3">`Predicate&lt;&gt;`</ph>, and they can be used in various places throughout the .NET APIs without the need to define new delegate types.</source>
          <target state="translated">Eles são <ph id="ph1">`Func&lt;&gt;`</ph>, <ph id="ph2">`Action&lt;&gt;`</ph> e <ph id="ph3">`Predicate&lt;&gt;`</ph>, e podem ser usados em vários locais das APIs .NET sem a necessidade de definir novos tipos de delegado.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Of course, there are some differences between the three as you will see in their signatures which mostly have to do with the way they were meant to be used:</source>
          <target state="translated">Obviamente, há algumas diferenças entre os três, que você verá em suas assinaturas e que geralmente têm a ver com a maneira como eles deveriam ser usados:</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Action&lt;&gt;`</ph> is used when there is a need to perform an action using the arguments of the delegate.</source>
          <target state="translated"><ph id="ph1">`Action&lt;&gt;`</ph> é usado quando é necessário executar uma ação usando os argumentos do delegado.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Func&lt;&gt;`</ph> is used usually when you have a transformation on hand, that is, you need to transform the arguments of the delegate into a different result.</source>
          <target state="translated"><ph id="ph1">`Func&lt;&gt;`</ph> é normalmente é usado quando você tem uma transformação à mão, ou seja, quando é necessário transformar os argumentos do delegado em um resultado diferente.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Projections are a prime example of this.</source>
          <target state="translated">As projeções são um excelente exemplo disso.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Predicate&lt;&gt;`</ph> is used when you need to determine if the argument satisfies the condition of the delegate.</source>
          <target state="translated"><ph id="ph1">`Predicate&lt;&gt;`</ph> é usado quando você precisa determinar se o argumento satisfaz a condição do delegado.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>It can also be written as a <ph id="ph1">`Func&lt;T, bool&gt;`</ph>.</source>
          <target state="translated">Ele também pode ser escrito como um <ph id="ph1">`Func&lt;T, bool&gt;`</ph>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>We can now take our example above and rewrite it using the <ph id="ph1">`Func&lt;&gt;`</ph> delegate instead of a custom type.</source>
          <target state="translated">Agora, podemos pegar nosso exemplo acima e reescrevê-lo usando o delegado <ph id="ph1">`Func&lt;&gt;`</ph> em vez de um tipo personalizado.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The program will continue running exactly the same.</source>
          <target state="translated">O programa continuará sendo executado exatamente da mesma forma.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For this simple example, having a method defined outside of the Main() method seems a bit superfluous.</source>
          <target state="translated">Para este exemplo simples, ter um método definido fora do método Main() parece um pouco supérfluo.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>It is because of this that .NET Framework 2.0 introduced the concept of <bpt id="p1">**</bpt>anonymous delegates<ept id="p1">**</ept>.</source>
          <target state="translated">É por isso que o .NET Framework 2.0 introduziu o conceito de <bpt id="p1">**</bpt>delegados anônimos<ept id="p1">**</ept>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>With their support you are able to create “inline” delegates without having to specify any additional type or method.</source>
          <target state="translated">Com suporte deles, você pode criar delegados "embutidos" sem precisar especificar tipos ou métodos adicionais.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>You simply inline the definition of the delegate where you need it.</source>
          <target state="translated">Você simplesmente embute a definição do delegado onde precisar dela.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For an example, we are going to switch it up and use our anonymous delegate to filter out a list of only even numbers and then print them to the console.</source>
          <target state="translated">Para dar um exemplo, vamos trocá-lo e usar nosso delegado anônimo para filtrar uma lista com apenas os números pares e, em seguida, imprimi-los no console.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Notice the highlighted lines.</source>
          <target state="translated">Observe as linhas realçadas.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>As you can see, the body of the delegate is just a set of expressions, as any other delegate.</source>
          <target state="translated">Como você pode ver, o corpo do delegado é apenas um conjunto de expressões, como aconteceria com qualquer outro delegado.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>But instead of it being a separate definition, we’ve introduced it <bpt id="p1">_</bpt>ad hoc<ept id="p1">_</ept> in our call to the <ph id="ph1">`FindAll()`</ph> method of the <ph id="ph2">`List&lt;T&gt;`</ph> type.</source>
          <target state="translated">Mas em vez dele ser uma definição separada, nós o introduzimos <bpt id="p1">_</bpt>ad hoc<ept id="p1">_</ept> em nossa chamada para o método <ph id="ph1">`FindAll()`</ph> do tipo <ph id="ph2">`List&lt;T&gt;`</ph>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>However, even with this approach, there is still much code that we can throw away.</source>
          <target state="translated">No entanto, mesmo com essa abordagem, ainda há muito código que podemos descartar.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This is where <bpt id="p1">**</bpt>lambda expressions<ept id="p1">**</ept> come into play.</source>
          <target state="translated">É aí que as <bpt id="p1">**</bpt>expressões lambda<ept id="p1">**</ept> entram em cena.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Lambda expressions, or just “lambdas” for short, were introduced first in C# 3.0, as one of the core building blocks of Language Integrated Query (LINQ).</source>
          <target state="translated">As expressões lambda ou apenas "lambdas" para abreviar, foram introduzidas pela primeira vez no C# 3.0 como um dos principais elementos de construção do LINQ (Consulta Integrada à Linguagem).</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>They are just a more convenient syntax for using delegates.</source>
          <target state="translated">Elas são apenas uma sintaxe mais conveniente para usar delegados.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>They declare a signature and a method body, but don’t have an formal identity of their own, unless they are assigned to a delegate.</source>
          <target state="translated">Elas declaram uma assinatura e um corpo de método, mas não têm uma identidade formal própria, a menos que sejam atribuídas a um delegado.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Unlike delegates, they can be directly assigned as the left-hand side of event registration or in various Linq clauses and methods.</source>
          <target state="translated">Diferente dos delegados, elas podem ser atribuídas diretamente como o lado esquerdo do registro de eventos ou em várias cláusulas e métodos Linq.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Since a lambda expression is just another way of specifying a delegate, we should be able to rewrite the above sample to use a lambda expression instead of an anonymous delegate.</source>
          <target state="translated">Como uma expressão lambda é apenas outra maneira de especificar um delegado, nós podemos reescrever o exemplo acima para usar uma expressão lambda em vez de um delegado anônimo.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If you take a look at the highlighted lines, you can see how a lambda expression looks like.</source>
          <target state="translated">Se observar as linhas realçadas, você pode ver qual é a aparência de uma expressão lambda.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Again, it is just a <bpt id="p1">**</bpt>very<ept id="p1">**</ept> convenient syntax for using delegates, so what happens under the covers is similar to what happens with the anonymous delegate.</source>
          <target state="translated">Mais uma vez, trata-se apenas de uma sintaxe <bpt id="p1">**</bpt>muito<ept id="p1">**</ept> conveniente para usar delegados, de modo que o que acontece nos bastidores é semelhante ao que acontece com o delegado anônimo.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Again, lambdas are just delegates, which means that they can be used as an event handler without any problems, as the following code snippet illustrates.</source>
          <target state="translated">Novamente, as lambdas são apenas delegados, o que significa que podem ser usadas como um manipulador de eventos sem problemas, como o trecho de código a seguir ilustra.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Further reading and resources</source>
          <target state="translated">Recursos e leituras adicionais</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Delegates<ept id="p1">](https://msdn.microsoft.com/library/ms173171.aspx)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Delegados<ept id="p1">](https://msdn.microsoft.com/library/ms173171.aspx)</ept></target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Anonymous Functions<ept id="p1">](https://msdn.microsoft.com/library/bb882516.aspx)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Funções Anônimas<ept id="p1">](https://msdn.microsoft.com/library/bb882516.aspx)</ept></target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Lambda expressions<ept id="p1">](https://msdn.microsoft.com/library/bb397687.aspx)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Expressões lambda<ept id="p1">](https://msdn.microsoft.com/library/bb397687.aspx)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>