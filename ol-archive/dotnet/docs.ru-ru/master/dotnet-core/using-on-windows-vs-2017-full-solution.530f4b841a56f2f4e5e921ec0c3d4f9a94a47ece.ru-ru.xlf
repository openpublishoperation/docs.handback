<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-f0362aa" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04f5264eaaa16be299e0d72f587ee232a5e61ca9</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\preview3\tutorials\using-on-windows-vs-2017-full-solution.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ca3dfabc0202886544007b80f97e5267ae5f1c77</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5c60fc66c013cba2ce80176c0b3a23f9a21f6062</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Building a complete .NET Core solution on Windows, using Visual Studio 2017 | Microsoft Docs</source>
          <target state="translated">Создание полного решения на .NET Core в Windows при помощи Visual Studio 2017 | Microsoft Docs</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Building a complete .NET Core solution on Windows, using Visual Studio 2017</source>
          <target state="translated">Building a complete .NET Core solution on Windows, using Visual Studio 2017 (Создание полного решения .NET Core в Windows с помощью Visual Studio 2017)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Building a complete .NET Core solution on Windows, using Visual Studio 2017 (.NET Core Tools RC4)</source>
          <target state="translated">Создание полного решения .NET Core в Windows с помощью Visual Studio 2017 (версия-кандидат 4 средств .NET Core)</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This topic applies to .NET Core Tools RC4.</source>
          <target state="translated">Эта статья применима к версии-кандидату 4 средств .NET Core.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For the .NET Core Tools Preview 2 version, see the <bpt id="p1">[</bpt>Getting started with .NET Core on Windows, using Visual Studio 2015<ept id="p1">](../../tutorials/using-on-windows.md)</ept> topic.</source>
          <target state="translated">Версия этой статьи об инструментах .NET Core (предварительная версия 2): <bpt id="p1">[</bpt>Начало работы с .NET Core в Windows с помощью Visual Studio 2015<ept id="p1">](../../tutorials/using-on-windows.md)</ept>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Visual Studio 2017 provides a full-featured development environment for developing .NET Core applications.</source>
          <target state="translated">Visual Studio 2017 предоставляет полнофункциональную среду для разработки приложений .NET Core.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The procedures in this document describe the steps necessary to build a typical .NET Core solution that includes reusable libraries, testing, and using third-party libraries.</source>
          <target state="translated">Процедуры в этом документе описывают шаги, необходимые для построения стандартного решения .NET Core, которое включает повторно используемые библиотеки, тестирование и использование сторонних библиотек.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
          <target state="translated">Предварительные требования</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Follow the instructions on <bpt id="p1">[</bpt>our prerequisites page<ept id="p1">](../windows-prerequisites.md)</ept> to update your environment.</source>
          <target state="translated">Чтобы обновить среду, выполните инструкции на <bpt id="p1">[</bpt>странице с описанием предварительных требований<ept id="p1">](../windows-prerequisites.md)</ept>.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>A solution using only .NET Core projects</source>
          <target state="translated">Решение на основе только проектов .NET Core</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Writing the library</source>
          <target state="translated">Написание библиотеки</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In Visual Studio, choose <bpt id="p1">**</bpt>File<ept id="p1">**</ept>, <bpt id="p2">**</bpt>New<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Project<ept id="p3">**</ept>.</source>
          <target state="translated">В Visual Studio последовательно щелкните <bpt id="p1">**</bpt>Файл<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Создать<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Проект<ept id="p3">**</ept>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>New Project<ept id="p1">**</ept> dialog, expand the <bpt id="p2">**</bpt>Visual C#<ept id="p2">**</ept> node and choose the <bpt id="p3">**</bpt>.NET Core<ept id="p3">**</ept> node, and then choose <bpt id="p4">**</bpt>Class Library (.NET Standard)<ept id="p4">**</ept>.</source>
          <target state="translated">В диалоговом окне <bpt id="p1">**</bpt>Новый проект<ept id="p1">**</ept> разверните узел <bpt id="p2">**</bpt>Visual C#<ept id="p2">**</ept>, выберите узел <bpt id="p3">**</bpt>.NET Core<ept id="p3">**</ept>, а затем выберите шаблон <bpt id="p4">**</bpt>Библиотека классов (.NET Standard)<ept id="p4">**</ept>.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Name the project "Library" and the solution "Golden".</source>
          <target state="translated">Присвойте проекту имя Library, а решению — имя Golden.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Leave <bpt id="p1">**</bpt>Create directory for solution<ept id="p1">**</ept> checked.</source>
          <target state="translated">Оставьте флажок <bpt id="p1">**</bpt>Создать каталог для решения<ept id="p1">**</ept> установленным.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>OK<ept id="p1">**</ept>.</source>
          <target state="translated">Нажмите кнопку <bpt id="p1">**</bpt>ОК<ept id="p1">**</ept>.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In Solution Explorer, open the context menu for the <bpt id="p1">**</bpt>Dependencies<ept id="p1">**</ept> node and choose <bpt id="p2">**</bpt>Manage NuGet Packages<ept id="p2">**</ept>.</source>
          <target state="translated">В обозревателе решений откройте контекстное меню узла <bpt id="p1">**</bpt>Зависимости<ept id="p1">**</ept> и выберите пункт <bpt id="p2">**</bpt>Управление пакетами NuGet<ept id="p2">**</ept>.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Choose "nuget.org" as the <bpt id="p1">**</bpt>Package source<ept id="p1">**</ept>, and choose the <bpt id="p2">**</bpt>Browse<ept id="p2">**</ept> tab.</source>
          <target state="translated">Выберите nuget.org в качестве <bpt id="p1">**</bpt>источника пакета<ept id="p1">**</ept> и перейдите на вкладку <bpt id="p2">**</bpt>Обзор<ept id="p2">**</ept>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Browse for <bpt id="p1">**</bpt>Newtonsoft.Json<ept id="p1">**</ept>.</source>
          <target state="translated">Найдите файл <bpt id="p1">**</bpt>Newtonsoft.Json<ept id="p1">**</ept>.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Install<ept id="p1">**</ept>, and accept the license agreement.</source>
          <target state="translated">Нажмите кнопку <bpt id="p1">**</bpt>Установить<ept id="p1">**</ept> и примите условия лицензионного соглашения.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The package should now appear under <bpt id="p1">**</bpt>Dependencies/NuGet<ept id="p1">**</ept> and be automatically restored.</source>
          <target state="translated">Пакет должен появиться в разделе <bpt id="p1">**</bpt>Зависимости/NuGet<ept id="p1">**</ept> и автоматически восстановиться.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Rename the <ph id="ph1">`Class1.cs`</ph> file to <ph id="ph2">`Thing.cs`</ph>.</source>
          <target state="translated">Переименуйте файл <ph id="ph1">`Class1.cs`</ph> в <ph id="ph2">`Thing.cs`</ph>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Accept the rename of the class.</source>
          <target state="translated">Подтвердите переименование класса.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Add a method: <ph id="ph1">`public int Get(int number) =&gt; Newtonsoft.Json.JsonConvert.DeserializeObject&lt;int&gt;($"{number}");`</ph></source>
          <target state="translated">Добавьте метод: <ph id="ph1">`public int Get(int number) =&gt; Newtonsoft.Json.JsonConvert.DeserializeObject&lt;int&gt;($"{number}");`</ph></target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>Build<ept id="p1">**</ept> menu, choose <bpt id="p2">**</bpt>Build Solution<ept id="p2">**</ept>.</source>
          <target state="translated">В меню <bpt id="p1">**</bpt>Построение<ept id="p1">**</ept> выберите <bpt id="p2">**</bpt>Построить решение<ept id="p2">**</ept>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The solution should build without error.</source>
          <target state="translated">Решение должно быть собрано без ошибок.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Writing the test project</source>
          <target state="translated">Написание тестового проекта</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In Solution Explorer, open the context menu for the <bpt id="p1">**</bpt>Solution<ept id="p1">**</ept> node and choose <bpt id="p2">**</bpt>Add<ept id="p2">**</ept>, <bpt id="p3">**</bpt>New Project<ept id="p3">**</ept>.</source>
          <target state="translated">В обозревателе решений в контекстном меню узла <bpt id="p1">**</bpt>Решение<ept id="p1">**</ept> выберите <bpt id="p2">**</bpt>Добавить<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Новый проект<ept id="p3">**</ept>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>New Project<ept id="p1">**</ept> dialog, under <bpt id="p2">**</bpt>Visual C# / .NET Core<ept id="p2">**</ept>, choose <bpt id="p3">**</bpt>Unit Test Project (.NET Core)<ept id="p3">**</ept>.</source>
          <target state="translated">В диалоговом окне <bpt id="p1">**</bpt>Новый проект<ept id="p1">**</ept> в разделе <bpt id="p2">**</bpt>Visual C#/.NET Core<ept id="p2">**</ept> выберите <bpt id="p3">**</bpt>Проект модульного теста (.NET Core)<ept id="p3">**</ept>.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Name it "TestLibrary" and click OK.</source>
          <target state="translated">Назовите его TestLibrary и нажмите кнопку "ОК".</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>TestLibrary<ept id="p1">**</ept> project, open the context menu for the <bpt id="p2">**</bpt>Dependencies<ept id="p2">**</ept> node and choose <bpt id="p3">**</bpt>Add Reference<ept id="p3">**</ept>.</source>
          <target state="translated">В проекте <bpt id="p1">**</bpt>TestLibrary<ept id="p1">**</ept> откройте контекстное меню узла <bpt id="p2">**</bpt>Зависимости<ept id="p2">**</ept> и выберите пункт <bpt id="p3">**</bpt>Добавить ссылку<ept id="p3">**</ept>.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Projects<ept id="p1">**</ept>, then check the Library project and click OK.</source>
          <target state="translated">Щелкните <bpt id="p1">**</bpt>Проекты<ept id="p1">**</ept>, затем проверьте проект библиотеки и нажмите кнопку "ОК".</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This adds a reference to your library from the test project.</source>
          <target state="translated">После этого в библиотеку будет добавлена ссылка из тестового проекта.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Rename the <ph id="ph1">`UnitTest1.cs`</ph> file to <ph id="ph2">`LibraryTests.cs`</ph> and accept the class rename.</source>
          <target state="translated">Переименуйте файл <ph id="ph1">`UnitTest1.cs`</ph> в <ph id="ph2">`LibraryTests.cs`</ph> и примите переименование класса.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Add <ph id="ph1">`using Library;`</ph> to the top of the file, and replace the <ph id="ph2">`TestMethod1`</ph> method with the following code:</source>
          <target state="translated">Добавьте <ph id="ph1">`using Library;`</ph> в верхнюю часть файла и замените метод <ph id="ph2">`TestMethod1`</ph> следующим кодом:</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You should now be able to build the solution.</source>
          <target state="translated">Теперь вы можете выполнить сборку решения.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>Test<ept id="p1">**</ept> menu, choose <bpt id="p2">**</bpt>Windows<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Test Explorer<ept id="p3">**</ept> in order to get the test explorer window into your workspace.</source>
          <target state="translated">В меню <bpt id="p1">**</bpt>Тестирование<ept id="p1">**</ept> выберите <bpt id="p2">**</bpt>Окна<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Обозреватель тестов<ept id="p3">**</ept>, чтобы открыть окно обозревателя тестов в рабочей области.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>After a few seconds, the <ph id="ph1">`ThingGetsObjectValFromNumber`</ph> test should appear in the test explorer.</source>
          <target state="translated">Через несколько секунд тест <ph id="ph1">`ThingGetsObjectValFromNumber`</ph> появится в обозревателе тестов.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Choose <bpt id="p1">**</bpt>Run All<ept id="p1">**</ept>.</source>
          <target state="translated">Выберите <bpt id="p1">**</bpt>Запустить все<ept id="p1">**</ept>.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The test should pass.</source>
          <target state="translated">Тест должен быть пройден успешно.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Writing the console app</source>
          <target state="translated">Написание консольного приложения</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>In Solution Explorer, open the context menu for the solution, and add a new <bpt id="p1">**</bpt>Console App (.NET Core)<ept id="p1">**</ept> project.</source>
          <target state="translated">В обозревателе решений откройте контекстное меню решения и добавьте новый проект <bpt id="p1">**</bpt>Консольное приложение (.NET Core)<ept id="p1">**</ept>.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Name it "App".</source>
          <target state="translated">Назовите его "App".</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>App<ept id="p1">**</ept> project, open the context menu for the <bpt id="p2">**</bpt>Dependencies<ept id="p2">**</ept> node and choose <bpt id="p3">**</bpt>Add<ept id="p3">**</ept>,  <bpt id="p4">**</bpt>Reference<ept id="p4">**</ept>.</source>
          <target state="translated">В проекте <bpt id="p1">**</bpt>App<ept id="p1">**</ept> откройте контекстное меню узла <bpt id="p2">**</bpt>Зависимости<ept id="p2">**</ept> и выберите пункты <bpt id="p3">**</bpt>Добавить<ept id="p3">**</ept>, <bpt id="p4">**</bpt>Ссылка<ept id="p4">**</ept>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Reference Manager<ept id="p1">**</ept> dialog, check <bpt id="p2">**</bpt>Library<ept id="p2">**</ept> under the <bpt id="p3">**</bpt>Projects<ept id="p3">**</ept>, <bpt id="p4">**</bpt>Solution<ept id="p4">**</ept> node, and then click <bpt id="p5">**</bpt>OK<ept id="p5">**</ept></source>
          <target state="translated">В диалоговом окне <bpt id="p1">**</bpt>Диспетчер ссылок<ept id="p1">**</ept> установите флажок <bpt id="p2">**</bpt>Библиотека<ept id="p2">**</ept> в узле <bpt id="p3">**</bpt>Проекты<ept id="p3">**</ept>, <bpt id="p4">**</bpt>Решение<ept id="p4">**</ept>, а затем нажмите кнопку <bpt id="p5">**</bpt>ОК<ept id="p5">**</ept>.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Open the context menu for the <bpt id="p1">**</bpt>App<ept id="p1">**</ept> node and choose <bpt id="p2">**</bpt>Set as StartUp Project<ept id="p2">**</ept>.</source>
          <target state="translated">Откройте контекстное меню узла <bpt id="p1">**</bpt>App<ept id="p1">**</ept> и выберите пункт <bpt id="p2">**</bpt>Назначить запускаемым проектом<ept id="p2">**</ept>.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>This ensures that hitting F5 or CTRL+F5 will start the console app.</source>
          <target state="translated">Теперь при нажатии клавиши F5 или сочетания клавиш CTRL+F5 будет открываться консольное приложение.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Open the <ph id="ph1">`Program.cs`</ph> file, add a <ph id="ph2">`using Library;`</ph> directive to the top of the file, and then add <ph id="ph3">`Console.WriteLine($"The answer is {new Thing().Get(42)}.");`</ph> to the <ph id="ph4">`Main`</ph> method.</source>
          <target state="translated">Откройте файл <ph id="ph1">`Program.cs`</ph>, добавьте директиву <ph id="ph2">`using Library;`</ph> в начало файла, а затем добавьте строку <ph id="ph3">`Console.WriteLine($"The answer is {new Thing().Get(42)}.");`</ph> в метод <ph id="ph4">`Main`</ph>.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Set a breakpoint after the line that you just added.</source>
          <target state="translated">Установите точку останова после только что добавленной строки.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Press F5 to run the application..</source>
          <target state="translated">Нажмите клавишу F5 для запуска приложения.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The application should build without error, and should hit the breakpoint.</source>
          <target state="translated">Сборка приложения должна быть выполнена без ошибок, и должна быть достигнута точка останова.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>You should also be able to check that the application output "The answer is 42.".</source>
          <target state="translated">Вы также можете проверить, выдает ли приложение результат The answer is 42.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>