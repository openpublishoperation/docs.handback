<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-4a95368" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e84012937be6ede9170dde7ff88575d2f4fa1052</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\preview3\tutorials\using-with-xplat-cli-msbuild.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fe69f6ce5230af24d0ba355c430f1008cc470710</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f19b6664b43b2daa42b5df3c9238a96516955e11</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Getting started with .NET Core on Windows/Linux/macOS using the command line (SDK Preview 4) | Microsoft Docs</source>
          <target state="translated">Начало работы с .NET Core в Windows, Linux или Mac OS из командной строки (пакет SDK — предварительная версия 4) | Microsoft Docs</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Getting started with .NET Core on Windows, Linux, or macOS using the .NET Core command line interface (CLI)</source>
          <target state="translated">Начало работы с .NET Core в Windows, Linux или Mac OS с помощью интерфейса командной строки (CLI) .NET Core</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Getting started with .NET Core on Windows/Linux/macOS using the command line (Tooling Preview 4)</source>
          <target state="translated">Начало работы с .NET Core в Windows, Linux или Mac OS из командной строки (предварительная версия 4 инструментов)</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This topic applies to Visual Studio 2017 RC - .NET Core Tools Preview 4.</source>
          <target state="translated">Эта статья применима к инструментам .NET Core (предварительная версия 4) для версии-кандидата Visual Studio 2017.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For the .NET Core Tools Preview 2 version, see the <bpt id="p1">[</bpt>Getting started with .NET Core on Windows/Linux/macOS using the command line<ept id="p1">](../../tutorials/using-with-xplat-cli.md)</ept> topic.</source>
          <target state="translated">Версия этой статьи об инструментах .NET Core (предварительная версия 2): <bpt id="p1">[</bpt>Начало работы с .NET Core в Windows, Linux и Mac OS из командной строки<ept id="p1">](../../tutorials/using-with-xplat-cli.md)</ept>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This guide will show you how to use the .NET Core CLI tooling to build cross-platform console apps.</source>
          <target state="translated">В этом руководстве показано, как с помощью средств командной строки в .NET Core создавать кроссплатформенные консольные приложения.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>It will start with the most basic console app and eventually span multiple projects, including testing.</source>
          <target state="translated">Мы начнем с самого простого консольного приложения, а затем охватим несколько проектов, включая тестирование.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You'll add these features step-by-step, building on what you've already seen and built.</source>
          <target state="translated">Возможности будут добавляться поэтапно на основе того, что вы уже узнали и создали.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If you're unfamiliar with the .NET Core CLI toolset, read <bpt id="p1">[</bpt>the .NET Core SDK overview<ept id="p1">](../tools/dotnet.md)</ept>.</source>
          <target state="translated">Если вы не знакомы с набором средств CLI .NET Core, прочитайте <bpt id="p1">[</bpt>обзор пакета SDK для .NET Core<ept id="p1">](../tools/dotnet.md)</ept>.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
          <target state="translated">Предварительные требования</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Before you begin, ensure you have <bpt id="p1">[</bpt>.NET Core CLI tooling Preview 4 or later<ept id="p1">](https://github.com/dotnet/core/blob/master/release-notes/preview3-download.md)</ept>.</source>
          <target state="translated">Прежде чем начинать работу, убедитесь, что у вас есть <bpt id="p1">[</bpt>предварительная версия 4 или более поздняя версия инструментов CLI .NET Core<ept id="p1">](https://github.com/dotnet/core/blob/master/release-notes/preview3-download.md)</ept>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You'll also need a text editor.</source>
          <target state="translated">Вам также потребуется текстовый редактор.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Hello, Console App!</source>
          <target state="translated">Первое консольное приложение</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>First, navigate to or create a new folder with a name you like.</source>
          <target state="translated">Сначала перейдите к существующей папке или создайте папку с любым именем на свое усмотрение.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>"Hello" is the name chosen for the sample code, which can be found <bpt id="p1">[</bpt>here<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/console-apps/HelloMsBuild)</ept>.</source>
          <target state="translated">Для образца кода, который можно найти <bpt id="p1">[</bpt>здесь<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/console-apps/HelloMsBuild)</ept>, выбрано имя Hello.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Open up a command prompt and type the following:</source>
          <target state="translated">Откройте окно командной строки и введите следующее:</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Let's do a quick walkthrough:</source>
          <target state="translated">Вкратце рассмотрим эти команды.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">`dotnet new`</ph><ept id="p1">](../tools/dotnet-new.md)</ept> creates an up-to-date <ph id="ph2">`Hello.csproj`</ph> project file with the dependencies necessary to build a console app.</source>
          <target state="translated"><bpt id="p1">[</bpt><ph id="ph1">`dotnet new`</ph><ept id="p1">](../tools/dotnet-new.md)</ept> создает актуальный файл проекта <ph id="ph2">`Hello.csproj`</ph> с зависимостями, необходимыми для создания консольного приложения.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>It also creates a <ph id="ph1">`Program.cs`</ph>, a basic file containing the entry point for the application.</source>
          <target state="translated">Эта команда также создает <ph id="ph1">`Program.cs`</ph> — простой файл, содержащий точку входа для приложения.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Hello.csproj`</ph>:</source>
          <target state="translated"><ph id="ph1">`Hello.csproj`</ph>:</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The project file specifies everything that's needed to restore dependencies and build the program.</source>
          <target state="translated">В файле проекта указываются все данные, необходимые для восстановления зависимостей и создания программы.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Import`</ph> tag brings in some properties that are common to all .NET Core projects.</source>
          <target state="translated">Тег <ph id="ph1">`Import`</ph> добавляет определенные свойства, которые являются общими для всех проектов .NET Core.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`OutputType`</ph> tag specifies that we're building an executable, in other words a console application.</source>
          <target state="translated">Тег <ph id="ph1">`OutputType`</ph> указывает, что мы создаем исполняемый файл — другими словами, консольное приложение.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`TargetFramework`</ph> tag specifies what .NET runtime we're targeting.</source>
          <target state="translated">Тег <ph id="ph1">`TargetFramework`</ph> указывает, какая среда выполнения .NET является нашей целью.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In an advance scenario, you can specify multiple target frameworks and build to all those in a single operation.</source>
          <target state="translated">В расширенном сценарии обработки можно указать несколько целевых платформ и выполнить сборку во всех средах за одну операцию.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In this tutorial, we'll stick to building only for .NET Core 1.0.</source>
          <target state="translated">В этом руководстве рассматривается сборка только для платформы .NET Core 1.0.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Compile`</ph> tag tells the compiler to build all the files in the current directory and all its subdirectories that have the <ph id="ph2">`.cs`</ph> file extension, in other words all the C# files in the project.</source>
          <target state="translated">Тег <ph id="ph1">`Compile`</ph> указывает компилятору собирать все файлы в текущем каталоге и всех его подкаталогах, имеющих расширение файла <ph id="ph2">`.cs`</ph>, — другими словами, все файлы C# в проекте.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In advanced scenarios, it is possible to exclude files, but in this tutorial, and in most simple scenarios, this line can be left unchanged.</source>
          <target state="translated">В расширенных сценариях можно исключать файлы, но в этом руководстве и в большинстве простых сценариев эту строку можно оставить без изменений.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`EmbeddedResource`</ph> tag instructs the build system to embed localization files with the extension <ph id="ph2">`.resx`</ph> into the compiled executable.</source>
          <target state="translated">Тег <ph id="ph1">`EmbeddedResource`</ph> предписывает системе сборки внедрить файлы локализации с расширением <ph id="ph2">`.resx`</ph> в скомпилированный исполняемый файл.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>We won't use that feature in this tutorial.</source>
          <target state="translated">Мы не будем использовать эту функцию в данном руководстве.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`PackageReference`</ph> tags specify what dependency packages must be restored and included when building the application.</source>
          <target state="translated">Теги <ph id="ph1">`PackageReference`</ph> определяют, какие пакеты зависимостей следует восстановить и включить при сборке приложения.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Each package reference specifies the name of the package under the <ph id="ph1">`Include`</ph> attribute, and a version number.</source>
          <target state="translated">В ссылке на каждый пакет указано имя пакета в атрибуте <ph id="ph1">`Include`</ph> и номер версии.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>In most advanced scenarios, you'll add more package references.</source>
          <target state="translated">В наиболее расширенных сценариях вам предстоит добавлять дополнительные ссылки на пакеты.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>It is also possible to reference other projects on disk.</source>
          <target state="translated">Можно также ссылаться на другие проекты на диске.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Program.cs`</ph>:</source>
          <target state="translated"><ph id="ph1">`Program.cs`</ph>:</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The program starts by <ph id="ph1">`using System`</ph>, which means "bring everything in the <ph id="ph2">`System`</ph> namespace into scope for this file".</source>
          <target state="translated">Программа начинается с команды <ph id="ph1">`using System`</ph>, что означает "добавить все данные пространства имен <ph id="ph2">`System`</ph> в область видимости для этого файла".</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`System`</ph> namespace includes basic constructs such as <ph id="ph2">`string`</ph>, or numeric types.</source>
          <target state="translated">Пространство имен <ph id="ph1">`System`</ph> содержит основные конструкции, такие как <ph id="ph2">`string`</ph>, или числовые типы.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>We then define a namespace called "ConsoleApplication".</source>
          <target state="translated">Затем мы определим пространство имен с именем ConsoleApplication.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>You can change this to anything you want.</source>
          <target state="translated">Вы можете сменить это имя на любое другое.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>A class named "Program" is defined within that namespace, with a <ph id="ph1">`Main`</ph> method that takes an array of strings as its argument.</source>
          <target state="translated">Класс Program определяется в этом пространстве имен с использованием метода <ph id="ph1">`Main`</ph>, который принимает массив строк в качестве аргумента.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This array will contain the list of arguments passed in when the compiled program will be called.</source>
          <target state="translated">Этот массив будет содержать список передаваемых аргументов, когда будет вызвана скомпилированная программа.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>As it is, this array is not used: all the program is doing is to write "Hello World!"</source>
          <target state="translated">В такой форме программа не использует этот массив. Единственное ее действие — вывод надписи "Hello World!"</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>to the console.</source>
          <target state="translated">"Hello World!".</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>We can make things a little more interesting by changing the <ph id="ph1">`Console.WriteLine`</ph> into the following code.</source>
          <target state="translated">Мы можем добавить разнообразия, заменив <ph id="ph1">`Console.WriteLine`</ph> следующим кодом.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">`dotnet restore`</ph><ept id="p1">](../tools/dotnet-restore.md)</ept> calls into <bpt id="p2">[</bpt>NuGet<ept id="p2">](http://nuget.org)</ept> (.NET's package manager) to restore the tree of dependencies.</source>
          <target state="translated"><bpt id="p1">[</bpt><ph id="ph1">`dotnet restore`</ph><ept id="p1">](../tools/dotnet-restore.md)</ept> вызывает <bpt id="p2">[</bpt>NuGet<ept id="p2">](http://nuget.org)</ept> (диспетчер пакетов .NET) для восстановления дерева зависимостей.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>NuGet analyzes the <ph id="ph1">`Hello.csproj`</ph> file, downloads the dependencies stated in the file (or grabs them from a cache on your machine), and writes the <ph id="ph2">`obj/project.assets.json`</ph> file.</source>
          <target state="translated">NuGet анализирует файл <ph id="ph1">`Hello.csproj`</ph>, скачивает указанные в нем зависимости (или извлекает их из кэша на вашем компьютере) и записывает файл <ph id="ph2">`obj/project.assets.json`</ph>.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`project.assets.json`</ph> file is necessary to be able to compile and run.</source>
          <target state="translated">Файл <ph id="ph1">`project.assets.json`</ph> необходим для компиляции и запуска.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`project.assets.json`</ph> file is a persisted and complete set of the graph of NuGet dependencies and other information describing an app.</source>
          <target state="translated">Файл <ph id="ph1">`project.assets.json`</ph> содержит сохраняемую полную схему зависимостей NuGet и другие сведения, описывающие приложение.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>This file is read by other tools, such as <ph id="ph1">`dotnet build`</ph> and <ph id="ph2">`dotnet run`</ph>, enabling them to process the source code with a correct set of NuGet dependencies and binding resolutions.</source>
          <target state="translated">Этот файл считывается другими средствами, такими как <ph id="ph1">`dotnet build`</ph> и <ph id="ph2">`dotnet run`</ph>, что позволяет им обрабатывать исходный код с правильным набором зависимостей NuGet и разрешений привязки.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">`dotnet run`</ph><ept id="p1">](../tools/dotnet-run.md)</ept> calls <ph id="ph2">`dotnet build`</ph> to ensure that the build targets have been built, and then calls <ph id="ph3">`dotnet &lt;assembly.dll&gt;`</ph> to run the target application.</source>
          <target state="translated"><bpt id="p1">[</bpt><ph id="ph1">`dotnet run`</ph><ept id="p1">](../tools/dotnet-run.md)</ept> вызывает <ph id="ph2">`dotnet build`</ph> для проверки того, выполнена ли сборка целевых объектов, а затем вызывает <ph id="ph3">`dotnet &lt;assembly.dll&gt;`</ph> для запуска целевого приложения.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Alternatively, you can also execute <bpt id="p1">[</bpt><ph id="ph1">`dotnet build`</ph><ept id="p1">](../tools/dotnet-build.md)</ept> to compile the code without running the build console applications.</source>
          <target state="translated">Кроме того, вы можете выполнить <bpt id="p1">[</bpt><ph id="ph1">`dotnet build`</ph><ept id="p1">](../tools/dotnet-build.md)</ept>, чтобы скомпилировать код, не запуская консольные приложения сборки.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>This results in a <ph id="ph1">`bin/Debug/netcoreapp1.0/Hello.dll`</ph> compiled application that can be run with <ph id="ph2">`dotnet bin\Debug\netcoreapp1.0\Hello.dll`</ph> on Windows, and <ph id="ph3">`dotnet bin/Debug/netcoreapp1.0/Hello.dll`</ph> on other systems.</source>
          <target state="translated">В результате мы получаем скомпилированное приложение <ph id="ph1">`bin/Debug/netcoreapp1.0/Hello.dll`</ph>, которое можно выполнить при помощи <ph id="ph2">`dotnet bin\Debug\netcoreapp1.0\Hello.dll`</ph> в Windows и <ph id="ph3">`dotnet bin/Debug/netcoreapp1.0/Hello.dll`</ph> других операционных системах.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>You may specify an additional parameter on the command-line (assuming you are on Windows):</source>
          <target state="translated">Можно указать дополнительный параметр в командной строке (если используется ОС Windows):</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>As an advanced scenario, it's possible to build the application as a self-contained set of platform-specific files that can be deployed and run to a machine that doesn't necessarily have .NET Core installed.</source>
          <target state="translated">В расширенном сценарии можно собрать приложение в качестве автономного набора файлов для определенной платформы, которые можно развернуть и запустить на компьютере без .NET Core.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>.NET Core Application Deployment<ept id="p1">](../deploying/index.md)</ept> for details.</source>
          <target state="translated">Чтобы получить подробные сведения, см. статью <bpt id="p1">[</bpt>.NET Core Application Deployment<ept id="p1">](../deploying/index.md)</ept> (Развертывание приложений .NET Core).</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Augmenting the program</source>
          <target state="translated">Расширение программы</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Let's change the file just a little bit.</source>
          <target state="translated">Давайте немного изменим файл.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Fibonacci numbers are fun, so let's try that out:</source>
          <target state="translated">С числами Фибоначчи интересно работать, поэтому давайте попробуем сделать следующее:</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Program.cs`</ph>:</source>
          <target state="translated"><ph id="ph1">`Program.cs`</ph>:</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>And running the program (assuming you're on Windows, and have changed the project directory name to Fibonacci):</source>
          <target state="translated">Затем запустим программу (необходимо использовать компьютер с Windows и изменить имя каталога проекта на Fibonacci):</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>And that's it!</source>
          <target state="translated">Вот и все!</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>You can augment <ph id="ph1">`Program.cs`</ph> any way you like.</source>
          <target state="translated">Вы можете расширять файл <ph id="ph1">`Program.cs`</ph> по своему усмотрению.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Adding some new files</source>
          <target state="translated">Добавление новых файлов</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Single files are fine for simple one-off programs, but chances are you're going to want to break things out into multiple files if you're building anything which has multiple components.</source>
          <target state="translated">Программы на основе одного файла подходят для решения простых одиночных задач, однако, если вы создаете программу, состоящую из нескольких компонентов, скорее всего, вам потребуется разделить ее на несколько файлов.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Multiple files are a way to do that.</source>
          <target state="translated">Это упростит работу.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Create a new file and give it a unique namespace:</source>
          <target state="translated">Создайте файл и назначьте ему уникальное пространство имен:</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Next, include it in your <ph id="ph1">`Program.cs`</ph> file:</source>
          <target state="translated">Далее включите его в файл <ph id="ph1">`Program.cs`</ph>:</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>And finally, you can build it:</source>
          <target state="translated">Наконец, можно выполнить сборку:</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Now the fun part: making the new file do something!</source>
          <target state="translated">После этого наступает самое интересное — реализация задач, выполняемых файлом.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Example: A Fibonacci Sequence Generator</source>
          <target state="translated">Пример. Генератор последовательностей Фибоначчи</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Let's say you want to build off of the previous Fibonacci example by caching some Fibonacci values and add some recursive flair.</source>
          <target state="translated">Предположим, что вы хотите использовать в качестве основы предыдущий пример, реализовав в нем кэширование значений Фибоначчи и рекурсию.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Your code for a <bpt id="p1">[</bpt>better Fibonacci example<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/console-apps/FibonacciBetterMsBuild)</ept> might use a new <ph id="ph1">`FibonacciGenerator.cs`</ph> file with the following code.</source>
          <target state="translated">Код для <bpt id="p1">[</bpt>лучшего примера чисел Фибоначчи<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/console-apps/FibonacciBetterMsBuild)</ept> может использовать новый файл <ph id="ph1">`FibonacciGenerator.cs`</ph> со следующим кодом.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Now adjust the <ph id="ph1">`Main()`</ph> method in your <ph id="ph2">`Program.cs`</ph> file as shown below.</source>
          <target state="translated">Теперь измените метод <ph id="ph1">`Main()`</ph> в файле <ph id="ph2">`Program.cs`</ph>, как показано ниже.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Finally, run it!</source>
          <target state="translated">Наконец, запустите программу.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>And that's it!</source>
          <target state="translated">Вот и все!</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Conclusion</source>
          <target state="translated">Заключение</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Hopefully this guide has helped you learn how to create a .NET Core console app, from the basics all the way up to a multi-project system with unit tests.</source>
          <target state="translated">Надеемся, это руководство помогло вам понять, как создавать консольные приложения .NET разного уровня сложности: от самых простых до многопроектных систем с модульными тестами.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The next step is to create awesome console apps of your own!</source>
          <target state="translated">Ваш следующий шаг — создание собственного консольного приложения.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>If a more advanced example of a console app interests you, check out the next tutorial: <bpt id="p1">[</bpt>Organizing and testing projects with the .NET Core command line (SDK Preview 4)<ept id="p1">](using-with-xplat-cli-msbuild-folders.md)</ept>.</source>
          <target state="translated">Если вас интересует более сложный пример консольного приложения, просмотрите руководство <bpt id="p1">[</bpt>Организация и тестирование проектов с использованием командной строки .NET Core (пакет SDK — предварительная версия 4)<ept id="p1">](using-with-xplat-cli-msbuild-folders.md)</ept>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>