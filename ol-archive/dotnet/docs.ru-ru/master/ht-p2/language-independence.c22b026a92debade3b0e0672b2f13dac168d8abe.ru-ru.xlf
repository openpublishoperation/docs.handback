<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-eac019f" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">47a407d1c1e768a027aaca63ee7a668e992467b2</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\language-independence.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p2</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2cd82917b5829a18453fc14cb36b156bb7d01cb4</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">53915650050c83efbb1f9ca1a95efbb9f2ee476c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Language independence and language-independent components</source>
          <target state="translated">Независимость от языка и независимые от языка компоненты</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Language independence and language-independent components</source>
          <target state="translated">Независимость от языка и независимые от языка компоненты</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Language independence and language-independent components</source>
          <target state="translated">Независимость от языка и независимые от языка компоненты</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The .NET platform is language independent.</source>
          <target state="translated">Платформа .NET является независимой от языка.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This means that, as a developer, you can develop in one of the many languages that target the .NET platform, such as C#, F#, and Visual Basic.</source>
          <target state="translated">Это означает, что вести разработку можно на одном из множества языков, предназначенных для платформы .NET, например C#, F # и Visual Basic.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You can access the types and members of class libraries developed for the .NET platform without having to know the language in which they were originally written and without having to follow any of the original language's conventions.</source>
          <target state="translated">Чтобы использовать типы и члены библиотек классов, разработанных для платформы .NET, не требуется знать их исходный язык и следовать его правилам.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>If you are a component developer, your component can be accessed by any .NET app regardless of its language.</source>
          <target state="translated">Если вы разрабатываете компоненты, они будут доступны всем приложениям .NET вне зависимости от используемого вами языка.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This first part of this article discusses creating language-independent components - that is, components that can be consumed by apps that are written in any language.</source>
          <target state="translated">В первой части этой статьи рассматривается, как создать компоненты, независимые от языка, чтобы использовать их в приложениях, написанных на любом языке.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You can also create a single component or app from source code written in multiple languages; see <bpt id="p1">[</bpt>Cross-Language Interoperability<ept id="p1">](#cross-language-interoperability)</ept> in the second part of this article.</source>
          <target state="translated">Кроме того, компонент и приложение могут состоять из фрагментов кода на разных языках. См. раздел <bpt id="p1">[</bpt>Взаимная совместимость кодов на разных языках<ept id="p1">](#cross-language-interoperability)</ept> во второй части этой статьи.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>To fully interact with other objects written in any language, objects must expose to callers only those features that are common to all languages.</source>
          <target state="translated">Чтобы обеспечить полное взаимодействие между объектами вне зависимости от их языка, объекты должны предоставлять вызывающим объектам возможности, общие для всех языков.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This common set of features is defined by the Common Language Specification (CLS), which is a set of rules that apply to generated assemblies.</source>
          <target state="translated">Этот общий набор компонентов определяется общеязыковой спецификацией (спецификацией CLS) — рядом правил, который применяется к создаваемым сборкам.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The Common Language Specification is defined in Partition I, Clauses 7 through 11 of the <bpt id="p1">[</bpt>ECMA-335 Standard: Common Language Infrastructure<ept id="p1">](http://www.ecma-international.org/publications/standards/Ecma-335.htm)</ept>.</source>
          <target state="translated">Спецификация CLS определяется в документе <bpt id="p1">[</bpt>Стандарт ECMA-335: общеязыковая инфраструктура (CLI)<ept id="p1">](http://www.ecma-international.org/publications/standards/Ecma-335.htm)</ept> (пункты 7–11 раздела I).</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If your component conforms to the Common Language Specification, it is guaranteed to be CLS-compliant and can be accessed from code in assemblies written in any programming language that supports the CLS.</source>
          <target state="translated">Если компонент соответствует спецификации CLS, к нему можно обращаться из кода сборок, написанных на любом языке программирования, поддерживающем CLS.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You can determine whether your component conforms to the Common Language Specification at compile time by applying the <bpt id="p1">[</bpt>CLSCompliantAttribute<ept id="p1">](xref:System.CLSCompliantAttribute)</ept> attribute to your source code.</source>
          <target state="translated">Чтобы проверить, является ли компонент CLS-совместимым, примените к исходному коду атрибут <bpt id="p1">[</bpt>CLSCompliantAttribute<ept id="p1">](xref:System.CLSCompliantAttribute)</ept> во время компиляции.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For more information, see The <bpt id="p1">[</bpt>CLSCompliantAttribute attribute<ept id="p1">](#the-clscompliantattribute-attribute)</ept>.</source>
          <target state="translated">Дополнительные сведения см. в разделе <bpt id="p1">[</bpt>Атрибут CLSCompliantAttribute<ept id="p1">](#the-clscompliantattribute-attribute)</ept>.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In this article:</source>
          <target state="translated">Содержание этой статьи</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CLS compliance rules<ept id="p1">](#cls-compliance-rules)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Правила CLS-совместимости<ept id="p1">](#cls-compliance-rules)</ept></target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Types and type member signatures<ept id="p1">](#types-and-type-member-signatures)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Сигнатуры типов и членов типов<ept id="p1">](#types-and-type-member-signatures)</ept></target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Naming conventions<ept id="p1">](#naming-conventions)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Соглашения об именовании<ept id="p1">](#naming-conventions)</ept></target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Type conversion<ept id="p1">](#type-conversion)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Преобразование типов<ept id="p1">](#type-conversion)</ept></target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Arrays<ept id="p1">](#arrays)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Массивы<ept id="p1">](#arrays)</ept></target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Interfaces<ept id="p1">](#interfaces)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Интерфейсы<ept id="p1">](#interfaces)</ept></target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Enumerations<ept id="p1">](#enumerations)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Перечисления<ept id="p1">](#enumerations)</ept></target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Type members in general<ept id="p1">](#type-members-in-general)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Обзор членов типов<ept id="p1">](#type-members-in-general)</ept></target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Member accessibility<ept id="p1">](#member-accessibility)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Доступность членов<ept id="p1">](#member-accessibility)</ept></target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Generic types and members<ept id="p1">](#generic-types-and-members)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Универсальные типы и члены<ept id="p1">](#generic-types-and-members)</ept></target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Constructors<ept id="p1">](#constructors)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Конструкторы<ept id="p1">](#constructors)</ept></target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Properties<ept id="p1">](#properties)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Свойства<ept id="p1">](#properties)</ept></target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Events<ept id="p1">](#events)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>События<ept id="p1">](#events)</ept></target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Overloads<ept id="p1">](#overloads)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Перегрузки<ept id="p1">](#overloads)</ept></target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Exceptions<ept id="p1">](#exceptions)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Исключения<ept id="p1">](#exceptions)</ept></target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Attributes<ept id="p1">](#attributes)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Атрибуты<ept id="p1">](#attributes)</ept></target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CLSCompliantAttribute attribute<ept id="p1">](#the-clscompliantattribute-attribute)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Атрибут CLSCompliantAttribute<ept id="p1">](#the-clscompliantattribute-attribute)</ept></target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Cross-Language Interoperability<ept id="p1">](#cross-language-interoperability)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Взаимная совместимость кодов на разных языках<ept id="p1">](#cross-language-interoperability)</ept></target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>CLS compliance rules</source>
          <target state="translated">Правила CLS-совместимости</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This section discusses the rules for creating a CLS-compliant component.</source>
          <target state="translated">В этом разделе рассматриваются правила создания CLS-совместимого компонента.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>For a complete list of rules, see Partition I, Clause 11 of the <bpt id="p1">[</bpt>ECMA-335 Standard: Common Language Infrastructure<ept id="p1">](http://www.ecma-international.org/publications/standards/Ecma-335.htm)</ept>.</source>
          <target state="translated">Полный список правил см. в документе <bpt id="p1">[</bpt>Стандарт ECMA-335: общеязыковая инфраструктура (CLI)<ept id="p1">](http://www.ecma-international.org/publications/standards/Ecma-335.htm)</ept> (пункт 11 раздела I).</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The Common Language Specification discusses each rule for CLS compliance as it applies to consumers (developers who are programmatically accessing a component that is CLS-compliant), frameworks (developers who are using a language compiler to create CLS-compliant libraries), and extenders (developers who are creating a tool such as a language compiler or a code parser that creates CLS-compliant components).</source>
          <target state="translated">Каждое правило CLS-совместимости спецификации CLS определяет требования к потребителям (разработчикам, которые программным образом обращаются к CLS-совместимому компоненту), платформам (разработчикам, которые используют компилятор языка для создания CLS-совместимых библиотек) и расширителям (разработчикам инструментов — например, компиляторов языка или синтаксических анализаторов кода, создающих CLS-совместимые компоненты).</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This article focuses on the rules as they apply to frameworks.</source>
          <target state="translated">В этой статье описываются требования к платформам.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Note, though, that some of the rules that apply to extenders may also apply to assemblies that are created using <bpt id="p1">[</bpt>Reflection.Emit<ept id="p1">](xref:System.Reflection.Emit)</ept>.</source>
          <target state="translated">Однако следует принимать во внимание, что некоторые правила в отношении расширителей могут также применяться к сборкам, создаваемым с помощью <bpt id="p1">[</bpt>Reflection.Emit<ept id="p1">](xref:System.Reflection.Emit)</ept>.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>To design a component that is language independent, you only need to apply the rules for CLS compliance to your component's public interface.</source>
          <target state="translated">Чтобы создать компонент, независимый от языка, достаточно применить правила CLS-совместимости к открытому интерфейсу компонента.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Your private implementation does not have to conform to the specification.</source>
          <target state="translated">Закрытая реализация может не соответствовать спецификации.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The rules for CLS compliance apply only to a component's public interface, not to its private implementation.</source>
          <target state="translated">Правила CLS-совместимости применяются только к открытому интерфейсу компонента и не применяются к закрытой реализации.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>For example, unsigned integers other than <bpt id="p1">[</bpt>Byte<ept id="p1">](xref:System.Byte)</ept> are not CLS-compliant.</source>
          <target state="translated">Например, за исключением чисел типа <bpt id="p1">[</bpt>Byte<ept id="p1">](xref:System.Byte)</ept> целые числа без знака не являются CLS-совместимыми.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Because the <ph id="ph1">`Person`</ph> class in the following example exposes an <ph id="ph2">`Age`</ph> property of type <bpt id="p1">[</bpt>UInt16<ept id="p1">](xref:System.UInt16)</ept>, the following code displays a compiler warning.</source>
          <target state="translated">В следующем примере класс <ph id="ph1">`Person`</ph> предоставляет свойство <ph id="ph2">`Age`</ph>, имеющее тип <bpt id="p1">[</bpt>UInt16<ept id="p1">](xref:System.UInt16)</ept>, поэтому в коде отображается предупреждение компилятора.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>You can make the Person class CLS-compliant by changing the type of <ph id="ph1">`Age`</ph> property from <ph id="ph2">`UInt16`</ph> to <bpt id="p1">[</bpt>Int16<ept id="p1">](xref:System.Int16)</ept>, which is a CLS-compliant, 16-bit signed integer.</source>
          <target state="translated">Чтобы класс Person удовлетворял требованиям CLS, можно изменить тип свойства <ph id="ph1">`Age`</ph> с <ph id="ph2">`UInt16`</ph> на <bpt id="p1">[</bpt>Int16<ept id="p1">](xref:System.Int16)</ept> — 16-битное целое число со знаком, которое является CLS-совместимым.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>You do not have to change the type of the private <ph id="ph1">`personAge`</ph> field.</source>
          <target state="translated">Тип закрытого поля <ph id="ph1">`personAge`</ph> изменять не требуется.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>A library's public interface consists of the following:</source>
          <target state="translated">Публичный интерфейс библиотеки состоит из:</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Definitions of public classes.</source>
          <target state="translated">определений открытых классов;</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Definitions of the public members of public classes, and definitions of members accessible to derived classes (that is, protected members).</source>
          <target state="translated">определений открытых членов открытых классов и определений членов, доступных производным классам (т. е. защищенных членов);</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Parameters and return types of public methods of public classes, and parameters and return types of methods accessible to derived classes.</source>
          <target state="translated">параметров и возвращаемых типов открытых методов открытых классов, а также параметров и возвращаемых типов методов, доступных производным классам.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The rules for CLS compliance are listed in the following table.</source>
          <target state="translated">В следующей таблице представлены правила CLS-совместимости.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The text of the rules is taken verbatim from the <bpt id="p1">[</bpt>ECMA-335 Standard: Common Language Infrastructure<ept id="p1">](http://www.ecma-international.org/publications/standards/Ecma-335.htm)</ept>, which is Copyright 2012 by Ecma International.</source>
          <target state="translated">Это дословные выдержки из документа <bpt id="p1">[</bpt>Стандарт ECMA-335: общеязыковая инфраструктура (CLI)<ept id="p1">](http://www.ecma-international.org/publications/standards/Ecma-335.htm)</ept> © Ecma International, 2012.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>More detailed information about these rules is found in the following sections.</source>
          <target state="translated">Дополнительные сведения об этих правилах вы найдете в следующих разделах.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Category</source>
          <target state="translated">Категория</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>See</source>
          <target state="translated">См.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Rule</source>
          <target state="translated">Правило</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Rule Number</source>
          <target state="translated">Номер правила</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Accessibility</source>
          <target state="translated">Специальные возможности</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Member accessibility<ept id="p1">](#member-accessibility)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Доступность членов<ept id="p1">](#member-accessibility)</ept></target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Accessibility shall not be changed when overriding inherited methods, except when overriding a method inherited from a different assembly with accessibility <ph id="ph1">`family-or-assembly`</ph>.</source>
          <target state="translated">При переопределении унаследованных методов не должна изменяться доступность. Исключение составляют методы, унаследованные из другой сборки с доступностью <ph id="ph1">`family-or-assembly`</ph>.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>In this case, the override shall have accessibility <ph id="ph1">`family`</ph>.</source>
          <target state="translated">В таких случаях переопределенный метод должен иметь доступность <ph id="ph1">`family`</ph>.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>10</source>
          <target state="translated">10</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Accessibility</source>
          <target state="translated">Специальные возможности</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Member accessibility<ept id="p1">](#member-accessibility)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Доступность членов<ept id="p1">](#member-accessibility)</ept></target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The visibility and accessibility of types and members shall be such that types in the signature of any member shall be visible and accessible whenever the member itself is visible and accessible.</source>
          <target state="translated">Видимость и доступность типов и членов должна быть такой, чтобы типы в сигнатуре любого члена были видимы и доступны всегда, когда видим или доступен сам член.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>For example, a public method that is visible outside its assembly shall not have an argument whose type is visible only within the assembly.</source>
          <target state="translated">Например, открытый метод, видимый за пределами его сборки, не должен иметь аргументов, типы которых видимы только в пределах сборки.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The visibility and accessibility of types composing an instantiated generic type used in the signature of any member shall be visible and accessible whenever the member itself is visible and accessible.</source>
          <target state="translated">Видимость и доступность типов, составляющих экземпляры универсального типа, используемого в сигнатуре любого члена, должна быть такой, чтобы типы в сигнатуре любого члена были видимы и доступны всегда, когда видим или доступен сам член.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>For example, an instantiated generic type present in the signature of a member that is visible outside its assembly shall not have a generic argument whose type is visible only within the assembly.</source>
          <target state="translated">Например, экземпляр универсального типа в сигнатуре члена, видимого вне его сборки, не должен иметь универсальных аргументов, тип которых видимы только в пределах сборки.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>12</source>
          <target state="translated">12</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Arrays</source>
          <target state="translated">Массивы</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Arrays<ept id="p1">](#arrays)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Массивы<ept id="p1">](#arrays)</ept></target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Arrays shall have elements with a CLS-compliant type, and all dimensions of the array shall have lower bounds of zero.</source>
          <target state="translated">Элементы массива должны быть CLS-совместимого типа, а измерения массива — иметь нижнюю границу, равную нулю.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Only the fact that an item is an array and the element type of the array shall be required to distinguish between overloads.</source>
          <target state="translated">Для различения перегрузок достаточно, чтобы элемент был массивом и у него был задан тип элементов.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>When overloading is based on two or more array types the element types shall be named types.</source>
          <target state="translated">Если перегрузка основана на нескольких типах массивов, типы элементов должны быть именованными.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>16</source>
          <target state="translated">16</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Attributes</source>
          <target state="translated">Атрибуты</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Attributes<ept id="p1">](#attributes)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Атрибуты<ept id="p1">](#attributes)</ept></target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Attributes shall be of type <bpt id="p1">[</bpt>System.Attribute<ept id="p1">](xref:System.Attribute)</ept>, or a type inheriting from it.</source>
          <target state="translated">Атрибуты должны иметь тип <bpt id="p1">[</bpt>System.Attribute<ept id="p1">](xref:System.Attribute)</ept> или унаследованный от него.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>41</source>
          <target state="translated">41</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Attributes</source>
          <target state="translated">Атрибуты</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Attributes<ept id="p1">](#attributes)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Атрибуты<ept id="p1">](#attributes)</ept></target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The CLS only allows a subset of the encodings of custom attributes.</source>
          <target state="translated">В спецификации CLS разрешено только подмножество кодировок настраиваемых атрибутов.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The only types that shall appear in these encodings are (see Partition IV): <bpt id="p1">[</bpt>System.Type<ept id="p1">](xref:System.Type)</ept>, <bpt id="p2">[</bpt>System.String<ept id="p2">](xref:System.String)</ept>, <bpt id="p3">[</bpt>System.Char<ept id="p3">](xref:System.Char)</ept>, <bpt id="p4">[</bpt>System.Boolean<ept id="p4">](xref:System.Boolean)</ept>, <bpt id="p5">[</bpt>System.Byte<ept id="p5">](xref:System.Byte)</ept>, <bpt id="p6">[</bpt>System.Int16<ept id="p6">](xref:System.Int16)</ept>, <bpt id="p7">[</bpt>System.Int32<ept id="p7">](xref:System.Int32)</ept>, <bpt id="p8">[</bpt>System.Int64<ept id="p8">](xref:System.Int64)</ept>, <bpt id="p9">[</bpt>System.Single<ept id="p9">](xref:System.Single)</ept>, <bpt id="p10">[</bpt>System.Double<ept id="p10">](xref:System.Double)</ept>, and any enumeration type based on a CLS-compliant base integer type.</source>
          <target state="translated">Единственными типами, которые должны иметь эти кодировки, являются (см. раздел IV): <bpt id="p1">[</bpt>System.Type<ept id="p1">](xref:System.Type)</ept>, <bpt id="p2">[</bpt>System.String<ept id="p2">](xref:System.String)</ept>, <bpt id="p3">[</bpt>System.Char<ept id="p3">](xref:System.Char)</ept>, <bpt id="p4">[</bpt>System.Boolean<ept id="p4">](xref:System.Boolean)</ept>, <bpt id="p5">[</bpt>System.Byte<ept id="p5">](xref:System.Byte)</ept>, <bpt id="p6">[</bpt>System.Int16<ept id="p6">](xref:System.Int16)</ept>, <bpt id="p7">[</bpt>System.Int32<ept id="p7">](xref:System.Int32)</ept>, <bpt id="p8">[</bpt>System.Int64<ept id="p8">](xref:System.Int64)</ept>, <bpt id="p9">[</bpt>System.Single<ept id="p9">](xref:System.Single)</ept>, <bpt id="p10">[</bpt>System.Double<ept id="p10">](xref:System.Double)</ept> и любой тип перечисления на основе CLS-совместимого базового целочисленного типа.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>34</source>
          <target state="translated">34</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Attributes</source>
          <target state="translated">Атрибуты</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Attributes<ept id="p1">](#attributes)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Атрибуты<ept id="p1">](#attributes)</ept></target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The CLS does not allow publicly visible required modifiers (<ph id="ph1">`modreq`</ph>, see Partition II), but does allow optional modifiers (<ph id="ph2">`modopt`</ph>, see Partition II) it does not understand.</source>
          <target state="translated">В спецификации CLS запрещены публично видимые обязательные модификаторы (<ph id="ph1">`modreq`</ph>, см. раздел II), но разрешены необязательные модификаторы (<ph id="ph2">`modopt`</ph>, см. раздел II), которые не распознаются.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>35</source>
          <target state="translated">35</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Constructors</source>
          <target state="translated">Конструкторы</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Constructors<ept id="p1">](#constructors)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Конструкторы<ept id="p1">](#constructors)</ept></target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>An object constructor shall call some instance constructor of its base class before any access occurs to inherited instance data.</source>
          <target state="translated">Доступ к данным унаследованного экземпляра возможен после того, как конструктор объекта вызвал какой-либо конструктор экземпляра базового класса.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>(This does not apply to value types, which need not have constructors.)</source>
          <target state="translated">(Правило не относится к типам значений, которым не требуются конструкторы).</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>21</source>
          <target state="translated">21</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Constructors</source>
          <target state="translated">Конструкторы</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Constructors<ept id="p1">](#constructors)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Конструкторы<ept id="p1">](#constructors)</ept></target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>An object constructor shall not be called except as part of the creation of an object, and an object shall not be initialized twice.</source>
          <target state="translated">Конструктор объекта должен вызываться только в ходе создания объекта и объекты не должны инициализироваться дважды.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>22</source>
          <target state="translated">22</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Enumerations</source>
          <target state="translated">Перечисления</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Enumerations<ept id="p1">](#enumerations)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Перечисления<ept id="p1">](#enumerations)</ept></target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The underlying type of an enum shall be a built-in CLS integer type, the name of the field shall be "value__", and that field shall be marked <ph id="ph1">`RTSpecialName`</ph>.</source>
          <target state="translated">Базовый тип перечисления должен быть встроенным целочисленным типом CLS, имя поля должно быть"value__" и это поле должно быть отмечено атрибутом <ph id="ph1">`RTSpecialName`</ph>.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>7</source>
          <target state="translated">7</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Enumerations</source>
          <target state="translated">Перечисления</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Enumerations<ept id="p1">](#enumerations)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Перечисления<ept id="p1">](#enumerations)</ept></target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>There are two distinct kinds of enums, indicated by the presence or absence of the <bpt id="p1">[</bpt>System.FlagsAttribute<ept id="p1">](xref:System.FlagsAttribute)</ept> (see Partition IV Library) custom attribute.</source>
          <target state="translated">Существует два вида перечислений, которые различаются наличием/отсутствием настраиваемого атрибута <bpt id="p1">[</bpt>System.FlagsAttribute<ept id="p1">](xref:System.FlagsAttribute)</ept> (см. раздел IV библиотеки).</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>One represents named integer values; the other represents named bit flags that can be combined to generate an unnamed value.</source>
          <target state="translated">Одно представляет именованные целочисленные значения, другое — именованные битовые флаги, сочетая которые, можно создавать значения без имени.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The value of an <ph id="ph1">`enum`</ph> is not limited to the specified values.</source>
          <target state="translated">Перечисление <ph id="ph1">`enum`</ph> может принимать и другие значения.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>8</source>
          <target state="translated">8</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Enumerations</source>
          <target state="translated">Перечисления</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Enumerations<ept id="p1">](#enumerations)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Перечисления<ept id="p1">](#enumerations)</ept></target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Literal static fields of an enum shall have the type of the enum itself.</source>
          <target state="translated">Статические поля литералов перечисления должны иметь тип перечисления.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>9</source>
          <target state="translated">9</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Events</source>
          <target state="translated">события</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Events<ept id="p1">](#events)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>События<ept id="p1">](#events)</ept></target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The methods that implement an event shall be marked <ph id="ph1">`SpecialName`</ph> in the metadata.</source>
          <target state="translated">Реализующие событие методы должны быть отмечены в метаданных атрибутом <ph id="ph1">`SpecialName`</ph>.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>29</source>
          <target state="translated">29</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Events</source>
          <target state="translated">события</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Events<ept id="p1">](#events)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>События<ept id="p1">](#events)</ept></target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The accessibility of an event and of its accessors shall be identical.</source>
          <target state="translated">Событие и его методы доступа должны иметь одинаковую доступность.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>30</source>
          <target state="translated">30</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Events</source>
          <target state="translated">события</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Events<ept id="p1">](#events)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>События<ept id="p1">](#events)</ept></target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`add`</ph> and <ph id="ph2">`remove`</ph> methods for an event shall both either be present or absent.</source>
          <target state="translated">У события должны либо присутствовать, либо отсутствовать оба метода <ph id="ph1">`add`</ph> и <ph id="ph2">`remove`</ph>.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>31</source>
          <target state="translated">31</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Events</source>
          <target state="translated">события</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Events<ept id="p1">](#events)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>События<ept id="p1">](#events)</ept></target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`add`</ph>and <ph id="ph2">`remove`</ph> methods for an event shall each take one parameter whose type defines the type of the event and that shall be derived from <bpt id="p1">[</bpt>System.Delegate<ept id="p1">](xref:System.Delegate)</ept>.</source>
          <target state="translated">Методы <ph id="ph1">`add`</ph> и <ph id="ph2">`remove`</ph> события должны иметь один параметр, тип которого определяет тип события. Тип параметра должен быть производным от <bpt id="p1">[</bpt>System.Delegate<ept id="p1">](xref:System.Delegate)</ept>.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>32</source>
          <target state="translated">32</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Events</source>
          <target state="translated">события</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Events<ept id="p1">](#events)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>События<ept id="p1">](#events)</ept></target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Events shall adhere to a specific naming pattern.</source>
          <target state="translated">События должны следовать определенному шаблону именования.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The SpecialName attribute referred to in CLS rule 29 shall be ignored in appropriate name comparisons and shall adhere to identifier rules.</source>
          <target state="translated">Атрибут SpecialName, упоминаемый в правиле 29 спецификации CLS, должен игнорироваться в конкретных сравнениях имен и соответствовать правилам в отношении идентификаторов.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>33</source>
          <target state="translated">33</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Exceptions</source>
          <target state="translated">Исключения</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Exceptions<ept id="p1">](#exceptions)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Исключения<ept id="p1">](#exceptions)</ept></target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Objects that are thrown shall be of type <bpt id="p1">[</bpt>System.Exception<ept id="p1">](xref:System.Exception)</ept> or a type inheriting from it.</source>
          <target state="translated">Объекты исключений должны иметь тип <bpt id="p1">[</bpt>System.Exception<ept id="p1">](xref:System.Exception)</ept> или унаследованный от него тип.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Nonetheless, CLS-compliant methods are not required to block the propagation of other types of exceptions.</source>
          <target state="translated">Однако не требуется, чтобы CLS-совместимые методы блокировали распространение других типов исключений.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>40</source>
          <target state="translated">40</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>General</source>
          <target state="translated">Общие правила</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CLS compliance rules<ept id="p1">](#cls-compliance-rules)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Правила CLS-совместимости<ept id="p1">](#cls-compliance-rules)</ept></target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>CLS rules apply only to those parts of a type that are accessible or visible outsideof the defining assembly.</source>
          <target state="translated">Правила CLS-совместимости применяются только к тем составляющим типа, которые доступны или видны за пределами определяющей сборки.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>1</source>
          <target state="translated">1</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>General</source>
          <target state="translated">Общие правила</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CLS compliance rules<ept id="p1">](#cls-compliance-rules)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Правила CLS-совместимости<ept id="p1">](#cls-compliance-rules)</ept></target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Members of non-CLS compliant types shall not be marked CLS-compliant.</source>
          <target state="translated">Члены типов, не соответствующих правилам CLS-совместимости, не должны быть отмечены как CLS-совместимые.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>2</source>
          <target state="translated">2</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Generics</source>
          <target state="translated">Универсальные шаблоны</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Generic types and members<ept id="p1">](#generic-types-and-members)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Универсальные типы и члены<ept id="p1">](#generic-types-and-members)</ept></target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Nested types shall have at least as many generic parameters as the enclosing type.</source>
          <target state="translated">У вложенного типа должно не меньше универсальных параметров, чем у включающего его типа.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Generic parameters in a nested type correspond by position to the generic parameters in its enclosing type.</source>
          <target state="translated">Универсальные параметры вложенного типа соответствуют по позиции универсальным параметрам включающего типа.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>42</source>
          <target state="translated">42</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Generics</source>
          <target state="translated">Универсальные шаблоны</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Generic types and members<ept id="p1">](#generic-types-and-members)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Универсальные типы и члены<ept id="p1">](#generic-types-and-members)</ept></target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>The name of a generic type shall encode the number of type parameters declared on the non-nested type, or newly introduced to the type if nested, according to the rules defined above.</source>
          <target state="translated">В имени универсального типа должны кодироваться все параметры типа, объявленные в невложенном типе или введенные во вложенном типе, в соответствии с определенными выше правилами.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>43</source>
          <target state="translated">43</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Generics</source>
          <target state="translated">Универсальные шаблоны</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Generic types and members<ept id="p1">](#generic-types-and-members)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Универсальные типы и члены<ept id="p1">](#generic-types-and-members)</ept></target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>A generic type shall redeclare sufficient constraints to guarantee that any constraints on the base type, or interfaces would be satisfied by the generic type constraints.</source>
          <target state="translated">В универсальном типе должны повторно объявляться ограничения, обеспечивающие соответствие всем ограничениям базового типа и интерфейсов.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>44</source>
          <target state="translated">44</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Generics</source>
          <target state="translated">Универсальные шаблоны</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Generic types and members<ept id="p1">](#generic-types-and-members)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Универсальные типы и члены<ept id="p1">](#generic-types-and-members)</ept></target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Types used as constraints on generic parameters shall themselves be CLS-compliant.</source>
          <target state="translated">Типы, используемые в качестве ограничений универсальных параметров, должны быть CLS-совместимыми.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>45</source>
          <target state="translated">45</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Generics</source>
          <target state="translated">Универсальные шаблоны</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Generic types and members<ept id="p1">](#generic-types-and-members)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Универсальные типы и члены<ept id="p1">](#generic-types-and-members)</ept></target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>The visibility and accessibility of members (including nested types) in an instantiated generic type shall be considered to be scoped to the specific instantiation rather than the generic type declaration as a whole.</source>
          <target state="translated">Реализация видимости и доступности членов (включая вложенные типы) в экземплярах универсального типа должна ограничиваться областью конкретного экземпляра, а не объявлением универсального типа.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Assuming this, the visibility and accessibility rules of CLS rule 12 still apply.</source>
          <target state="translated">С учетом этого также применяется правило 12 CLS-совместимости, касающееся видимости и доступности.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>46</source>
          <target state="translated">46</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Generics</source>
          <target state="translated">Универсальные шаблоны</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Generic types and members<ept id="p1">](#generic-types-and-members)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Универсальные типы и члены<ept id="p1">](#generic-types-and-members)</ept></target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>For each abstract or virtual generic method, there shall be a default concrete (nonabstract) implementation</source>
          <target state="translated">Каждый абстрактный или виртуальный универсальный метод должен иметь конкретную (не абстрактную) реализацию по умолчанию.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>47</source>
          <target state="translated">47</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Interfaces</source>
          <target state="translated">Интерфейсы</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Interfaces<ept id="p1">](#interfaces)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Интерфейсы<ept id="p1">](#interfaces)</ept></target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>CLS-compliant interfaces shall not require the definition of non-CLS compliantmethods in order to implement them.</source>
          <target state="translated">CLS-совместимые интерфейсы должны реализовываться без методов, не соответствующих правилам CLS-совместимости.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>18</source>
          <target state="translated">18</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Interfaces</source>
          <target state="translated">Интерфейсы</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Interfaces<ept id="p1">](#interfaces)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Интерфейсы<ept id="p1">](#interfaces)</ept></target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>CLS-compliant interfaces shall not define static methods, nor shall they define fields.</source>
          <target state="translated">CLS-совместимые интерфейсы не могут определять статические методы и поля.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>19</source>
          <target state="translated">19</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Members</source>
          <target state="translated">Члены</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Type members in general<ept id="p1">](#type-members-in-general)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Обзор членов типов<ept id="p1">](#type-members-in-general)</ept></target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Global static fields and methods are not CLS-compliant.</source>
          <target state="translated">Глобальные статические (static) поля и методы не совместимы с CLS.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>36</source>
          <target state="translated">36</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Members</source>
          <target state="translated">Участники</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>The value of a literal static is specified through the use of field initialization metadata.</source>
          <target state="translated">Значение статического поля литерала задается с помощью метаданных инициализации поля.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>A CLS-compliant literal must have a value specified in field initialization metadata that is of exactly the same type as the literal (or of the underlying type, if that literal is an <ph id="ph1">`enum`</ph>).</source>
          <target state="translated">У CLS-совместимого литерала тип значения должен совпадать с типом литерала (или базовым типом, если литерал — перечисление <ph id="ph1">`enum`</ph>).</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>13</source>
          <target state="translated">13</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Members</source>
          <target state="translated">Члены</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Type members in general<ept id="p1">](#type-members-in-general)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Обзор членов типов<ept id="p1">](#type-members-in-general)</ept></target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>The vararg constraint is not part of the CLS, and the only calling convention supported by the CLS is the standard managed calling convention.</source>
          <target state="translated">Ограничение vararg не входит в спецификацию CLS. В спецификации поддерживается только стандартное соглашение об управляемых вызовах.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>15</source>
          <target state="translated">15</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Naming conventions</source>
          <target state="translated">Соглашения об именах</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Naming conventions<ept id="p1">](#naming-conventions)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Соглашения об именовании<ept id="p1">](#naming-conventions)</ept></target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Assemblies shall follow Annex 7 of Technical Report 15 of the Unicode Standard3.0 governing the set of characters permitted to start and be included in identifiers, available online at <bpt id="p1">[</bpt>Unicode Normalization Forms<ept id="p1">](http://www.unicode.org/unicode/reports/tr15/tr15-18.html)</ept>.</source>
          <target state="translated">Допустимые в сборках открывающие и внутренние символы идентификаторов указаны в приложении 7 технического отчета 15 стандарта Юникода версии 3.0. См. <bpt id="p1">[</bpt>формы нормализации Юникода<ept id="p1">](http://www.unicode.org/unicode/reports/tr15/tr15-18.html)</ept>.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Identifiers shall be in the canonical format defined by Unicode Normalization Form C. For CLS purposes, two identifiersare the same if their lowercase mappings (as specified by the Unicode locale-insensitive, one-to-one lowercase mappings) are the same.</source>
          <target state="translated">Идентификаторы должны иметь канонический формат, описанный в форме нормализации Юникода C. В рамках спецификации CLS два идентификатора считаются одинаковыми, если их записи в нижнем регистре совпадают (т. е. при взаимно-однозначном сопоставлении символов Юникода нижнего регистра без учета языкового стандарта).</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>That is, for two identifiers to be considered different under the CLS they shall differ in more than simply their case.</source>
          <target state="translated">Таким образом, в рамках спецификации CLS отличия регистра недостаточно для различения идентификаторов.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>However, in order to override an inherited definition the CLI requires the precise encoding of the original declaration be used.</source>
          <target state="translated">Однако чтобы переопределить наследуемое определение, требуется использовать точную кодировку исходного объявления.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>4</source>
          <target state="translated">4</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Overloading</source>
          <target state="translated">Перегрузка</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Naming conventions<ept id="p1">](#naming-conventions)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Соглашения об именовании<ept id="p1">](#naming-conventions)</ept></target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>All names introduced in a CLS-compliant scope shall be distinct independent of kind, except where the names are identical and resolved via overloading.</source>
          <target state="translated">Все имена, которые вводятся в CLS-совместимой области, должны быть различными независимо от типа, кроме случаев, когда имена одинаковы и разрешаются посредством перегрузки.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>That is, while the CTS allows a single type to use the same name for a method and a field, the CLS does not.</source>
          <target state="translated">Другими словами, в системе общих типов CTS разрешено давать одинаковое имя методу и полю, а в спецификации CLS — нет.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>5</source>
          <target state="translated">5</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Overloading</source>
          <target state="translated">Перегрузка</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Naming conventions<ept id="p1">](#naming-conventions)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Соглашения об именовании<ept id="p1">](#naming-conventions)</ept></target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Fields and nested types shall be distinct by identifier comparison alone, eventhough the CTS allows distinct signatures to be distinguished.</source>
          <target state="translated">Поля и вложенные типы должны отличаться только идентификаторами, хотя в системе общих типов CTS могут отличаться сигнатуры.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Methods, properties, and events that have the same name (by identifier comparison) shall differ by more than just the return type,except as specified in CLS Rule 39</source>
          <target state="translated">Методы, свойства и события с одинаковыми именами (при сравнении идентификаторов) должны отличаться не только типом возвращаемого значения, за исключением случаев из правила 39 спецификации CLS.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>6</source>
          <target state="translated">6</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Overloading</source>
          <target state="translated">Перегрузка</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Overloads<ept id="p1">](#overloads)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Перегрузки<ept id="p1">](#overloads)</ept></target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Only properties and methods can be overloaded.</source>
          <target state="translated">Перегружать можно только свойства и методы.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>37</source>
          <target state="translated">37</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Overloading</source>
          <target state="translated">Перегрузка</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Overloads<ept id="p1">](#overloads)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Перегрузки<ept id="p1">](#overloads)</ept></target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Properties and methods can be overloaded based only on the number and types of their parameters, except the conversion operators named <ph id="ph1">`op_Implicit`</ph> and <ph id="ph2">`op_Explicit`</ph>, which can also be overloaded based on their return type.</source>
          <target state="translated">Свойства и методы могут перегружаться только на основе количества и типов их параметров, за исключением операторов преобразования <ph id="ph1">`op_Implicit`</ph> и <ph id="ph2">`op_Explicit`</ph>, которые также могут перегружаться на основе возвращаемого типа.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>38</source>
          <target state="translated">38</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Overloading</source>
          <target state="translated">Перегрузка</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>If two or more CLS-compliant methods declared in a type have the same nameand, for a specific set of type instantiations, they have the same parameter and return types, then all these methods shall be semantically equivalent at those type instantiations.</source>
          <target state="translated">Если в типе объявлены несколько CLS-совместимых методов с одним и тем же именем и они создают набор экземпляров типа с одинаковыми параметрами и возвращаемыми типами, эти методы должны быть семантически эквивалентны в экземплярах типа.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>48</source>
          <target state="translated">48</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Properties</source>
          <target state="translated">Свойства</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Properties<ept id="p1">](#properties)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Свойства<ept id="p1">](#properties)</ept></target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>The methods that implement the getter and setter methods of a property shall be marked <ph id="ph1">`SpecialName`</ph> in the metadata.</source>
          <target state="translated">Методы, которые реализуют получение и задание значения, должны быть отмечены в метаданных атрибутом <ph id="ph1">`SpecialName`</ph>.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>24</source>
          <target state="translated">24</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Properties</source>
          <target state="translated">Свойства</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Properties<ept id="p1">](#properties)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Свойства<ept id="p1">](#properties)</ept></target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>A property’s accessors shall all be static, all be virtual, or all be instance.</source>
          <target state="translated">Все методы доступа свойства должны быть либо одновременно статическими, либо виртуальными, либо экземплярами.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>26</source>
          <target state="translated">26</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Properties</source>
          <target state="translated">Свойства</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Properties<ept id="p1">](#properties)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Свойства<ept id="p1">](#properties)</ept></target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>The type of a property shall be the return type of the getter and the type of the last argument of the setter.</source>
          <target state="translated">Тип свойства, тип возвращаемого значения метода получения значения и тип последнего аргумента метода задания значения должны совпадать.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>The types of the parameters of the property shall be the types of the parameters to the getter and the types of all but the final parameter of the setter.</source>
          <target state="translated">Типы параметров свойства, типы параметров метода получения значения и типы параметров метода задания значения (за исключением его последнего параметра) должны совпадать.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>All of these types shall be CLS-compliant, and shall not be managed pointers (i.e., shall not be passed by reference).</source>
          <target state="translated">Все типы должны быть CLS-совместимыми и не могут быть управляемыми указателями (т. е. не могут передаваться по ссылке).</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>27</source>
          <target state="translated">27</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>Properties</source>
          <target state="translated">Свойства</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Properties<ept id="p1">](#properties)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Свойства<ept id="p1">](#properties)</ept></target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Properties shall adhere to a specific naming pattern.</source>
          <target state="translated">Свойства должны следовать определенному шаблону именования.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`SpecialName`</ph> attribute referred to in CLS rule 24 shall be ignored in appropriate name comparisons and shall adhere to identifier rules.</source>
          <target state="translated">Атрибут <ph id="ph1">`SpecialName`</ph>, упоминаемый в правиле 24 спецификации CLS, должен игнорироваться в соответствующих сравнениях имен и соответствовать правилам в отношении идентификаторов.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>A property shall have a getter method, a setter method, or both.</source>
          <target state="translated">Свойство должно иметь метод получения и/или задания значения.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>28</source>
          <target state="translated">28</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Type conversion</source>
          <target state="translated">Преобразование типов</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Type conversion<ept id="p1">](#type-conversion)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Преобразование типов<ept id="p1">](#type-conversion)</ept></target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>If either op_Implicit or op_Explicit is provided, an alternate means of providing the coercion shall be provided.</source>
          <target state="translated">При наличии оператора преобразования op_Implicit или op_Explicit необходимо предоставить альтернативный способ приведения.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>39</source>
          <target state="translated">39</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Types</source>
          <target state="translated">Типы</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Types and type member signatures<ept id="p1">](#types-and-type-member-signatures)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Сигнатуры типов и членов типов<ept id="p1">](#types-and-type-member-signatures)</ept></target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Boxed value types are not CLS-compliant.</source>
          <target state="translated">Упакованные типы значений не являются CLS-совместимыми.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>3</source>
          <target state="translated">3</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Types</source>
          <target state="translated">Типы</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Types and type member signatures<ept id="p1">](#types-and-type-member-signatures)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Сигнатуры типов и членов типов<ept id="p1">](#types-and-type-member-signatures)</ept></target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>All types appearing in a signature shall be CLS-compliant.</source>
          <target state="translated">Все типы сигнатуры должны быть CLS-совместимыми.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>All types composing an instantiated generic type shall be CLS-compliant.</source>
          <target state="translated">Все типы, составляющие экземпляры универсального типа, должны быть CLS-совместимыми.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>11</source>
          <target state="translated">11</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Types</source>
          <target state="translated">Типы</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Types and type member signatures<ept id="p1">](#types-and-type-member-signatures)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Сигнатуры типов и членов типов<ept id="p1">](#types-and-type-member-signatures)</ept></target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Typed references are not CLS-compliant.</source>
          <target state="translated">Типизированные ссылки несовместимы с CLS.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>14</source>
          <target state="translated">14</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>Types</source>
          <target state="translated">Типы</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Types and type member signatures<ept id="p1">](#types-and-type-member-signatures)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Сигнатуры типов и членов типов<ept id="p1">](#types-and-type-member-signatures)</ept></target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Unmanaged pointer types are not CLS-compliant.</source>
          <target state="translated">Типы неуправляемых указателей не являются CLS-совместимыми.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>17</source>
          <target state="translated">17</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Types</source>
          <target state="translated">Типы</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Types and type member signatures<ept id="p1">](#types-and-type-member-signatures)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Сигнатуры типов и членов типов<ept id="p1">](#types-and-type-member-signatures)</ept></target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>CLS-compliant classes, value types, and interfaces shall not require the implementation of non-CLS-compliant members</source>
          <target state="translated">CLS-совместимые классы, типы значений и интерфейсы должны реализовываться без членов, не соответствующих правилам CLS-совместимости.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>20</source>
          <target state="translated">20</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>Types</source>
          <target state="translated">Типы</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Types and type member signatures<ept id="p1">](#types-and-type-member-signatures)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Сигнатуры типов и членов типов<ept id="p1">](#types-and-type-member-signatures)</ept></target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.Object<ept id="p1">](xref:System.Object)</ept> is CLS-compliant.</source>
          <target state="translated"><bpt id="p1">[</bpt>System.Object<ept id="p1">](xref:System.Object)</ept> является CLS-совместимым.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>Any other CLS-compliant class shall inherit from a CLS-compliant class.</source>
          <target state="translated">Все другие CLS-совместимые классы должны наследоваться от CLS-совместимого класса.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>23</source>
          <target state="translated">23</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>Types and type member signatures</source>
          <target state="translated">Сигнатуры типов и членов типов</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>System.Object<ept id="p1">](xref:System.Object)</ept> type is CLS-compliant and is the base type of all object types in the .NET Framework type system.</source>
          <target state="translated">Тип <bpt id="p1">[</bpt>System.Object<ept id="p1">](xref:System.Object)</ept> является CLS-совместимым. Это базовый тип всех типов объектов в системе типов .NET Framework.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>Inheritance in the .NET Framework is either implicit (for example, the <bpt id="p1">[</bpt>String<ept id="p1">](xref:System.String)</ept> class implicitly inherits from the <ph id="ph1">`Object`</ph> class) or explicit (for example, the <bpt id="p2">[</bpt>CultureNotFoundException<ept id="p2">](xref:System.Globalization.CultureNotFoundException)</ept> class explicitly inherits from the <bpt id="p3">[</bpt>ArgumentException<ept id="p3">](xref:System.ArgumentException)</ept> class, which explicitly inherits from the <bpt id="p4">[</bpt>Exception<ept id="p4">](xref:System.Exception)</ept> class.</source>
          <target state="translated">В платформе .NET Framework существует два вида наследования: неявное (например, класс <bpt id="p1">[</bpt>String<ept id="p1">](xref:System.String)</ept> неявно наследуется от класса <ph id="ph1">`Object`</ph>) или явное (например, класс <bpt id="p2">[</bpt>CultureNotFoundException<ept id="p2">](xref:System.Globalization.CultureNotFoundException)</ept> явно наследуется от класса <bpt id="p3">[</bpt>ArgumentException<ept id="p3">](xref:System.ArgumentException)</ept>, который явно наследуется от класса <bpt id="p4">[</bpt>Exception<ept id="p4">](xref:System.Exception)</ept>).</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>For a derived type to be CLS compliant, its base type must also be CLS-compliant.</source>
          <target state="translated">Чтобы производный тип был CLS-совместимым, его базовый тип должен быть CLS-совместимыми.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>The following example shows a derived type whose base type is not CLS-compliant.</source>
          <target state="translated">В следующем примере рассматривается производный тип, базовый тип которого не является CLS-совместимым.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>It defines a base <ph id="ph1">`Counter`</ph> class that uses an unsigned 32-bit integer as a counter.</source>
          <target state="translated">Базовый класс <ph id="ph1">`Counter`</ph> использует 32-битное целое число без знака в качестве счетчика.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>Because the class provides counter functionality by wrapping an unsigned integer, the class is marked as non-CLS-compliant.</source>
          <target state="translated">Поскольку этот класс реализует функцию счетчика с помощью переноса целого числа без знака, он помечается как не соответствующий правилам CLS-совместимости.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>As a result, a derived class, <ph id="ph1">`NonZeroCounter`</ph>, is also not CLS-compliant.</source>
          <target state="translated">Поэтому производный класс <ph id="ph1">`NonZeroCounter`</ph> также не является CLS-совместимым.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>All types that appear in member signatures, including a method's return type or a property type, must be CLS-compliant.</source>
          <target state="translated">Все типы в сигнатурах членов, в том числе тип свойства и тип возвращаемого значения метода, должны быть CLS-совместимыми.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>In addition, for generic types:</source>
          <target state="translated">Кроме того, в отношении универсальных типов применяются следующие правила:</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>All types that compose an instantiated generic type must be CLS-compliant.</source>
          <target state="translated">все типы, составляющие экземпляры универсального типа, должны быть CLS-совместимыми;</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>All types used as constraints on generic parameters must be CLS-compliant.</source>
          <target state="translated">все типы, используемые в качестве ограничений универсальных параметров, должны быть CLS-совместимыми.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>The .NET <bpt id="p1">[</bpt>common type system<ept id="p1">](common-type-system.md)</ept> includes a number of built-in types that are supported directly by the common language runtime and are specially encoded in an assembly's metadata.</source>
          <target state="translated"><bpt id="p1">[</bpt>Система общих типов CTS<ept id="p1">](common-type-system.md)</ept> платформы .NET имеет ряд встроенных типов, которые поддерживаются непосредственно средой CLR и особым образом кодируются в метаданных сборки.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>Of these intrinsic types, the types listed in the following table are CLS-compliant.</source>
          <target state="translated">В следующей таблице приводятся встроенные типы, которые являются CLS-совместимыми.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>CLS-compliant type</source>
          <target state="translated">CLS-совместимый тип</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Описание</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Byte<ept id="p1">](xref:System.Byte)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Byte<ept id="p1">](xref:System.Byte)</ept></target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>8-bit unsigned integer</source>
          <target state="translated">8-битное целое число без знака</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Int16<ept id="p1">](xref:System.Int16)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Int16<ept id="p1">](xref:System.Int16)</ept></target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>16-bit signed integer</source>
          <target state="translated">16-битное целое число со знаком</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Int32<ept id="p1">](xref:System.Int32)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Int32<ept id="p1">](xref:System.Int32)</ept></target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>32-bit signed integer</source>
          <target state="translated">32-битное целое число со знаком</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Int64<ept id="p1">](xref:System.Int64)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Int64<ept id="p1">](xref:System.Int64)</ept></target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>64-bit signed integer</source>
          <target state="translated">64-битное целое число со знаком</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Single<ept id="p1">](xref:System.Single)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Single<ept id="p1">](xref:System.Single)</ept></target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>Single-precision floating-point value</source>
          <target state="translated">Число одинарной точности с плавающей запятой</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Double<ept id="p1">](xref:System.Double)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Double<ept id="p1">](xref:System.Double)</ept></target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>Double-precision floating-point value</source>
          <target state="translated">Число двойной точности с плавающей запятой</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Boolean<ept id="p1">](xref:System.Boolean)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Boolean<ept id="p1">](xref:System.Boolean)</ept></target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>true or false value type</source>
          <target state="translated">Тип значения true или false</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Char<ept id="p1">](xref:System.Char)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Char<ept id="p1">](xref:System.Char)</ept></target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>UTF-16 encoded code unit</source>
          <target state="translated">Единица кода в кодировке UTF-16</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Decimal<ept id="p1">](xref:System.Decimal)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Decimal<ept id="p1">](xref:System.Decimal)</ept></target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>Non-floating-point decimal number</source>
          <target state="translated">Десятичное число без плавающей запятой</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>IntPtr<ept id="p1">](xref:System.IntPtr)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>IntPtr<ept id="p1">](xref:System.IntPtr)</ept></target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>Pointer or handle of a platform-defined size</source>
          <target state="translated">Указатель или дескриптор определяемого платформой размера</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>String<ept id="p1">](xref:System.String)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>String<ept id="p1">](xref:System.String)</ept></target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>Collection of zero, one, or more Char objects</source>
          <target state="translated">Коллекция любого, в том числе нулевого, числа объектов Char</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>The intrinsic types listed in the following table are not CLS-Compliant.</source>
          <target state="translated">В следующей таблице приводятся встроенные типы, которые не являются CLS-совместимыми.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>Non-compliant type</source>
          <target state="translated">Тип, не являющийся CLS-совместимым</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Описание</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>CLS-compliant alternative</source>
          <target state="translated">Альтернативный CLS-совместимый тип</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>SByte<ept id="p1">](xref:System.SByte)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>SByte<ept id="p1">](xref:System.SByte)</ept></target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>8-bit signed integer data type</source>
          <target state="translated">Тип данных — 8-битное целое число со знаком</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Int16<ept id="p1">](xref:System.Int16)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Int16<ept id="p1">](xref:System.Int16)</ept></target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>UInt16<ept id="p1">](xref:System.UInt16)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>UInt16<ept id="p1">](xref:System.UInt16)</ept></target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>16-bit unsigned integer</source>
          <target state="translated">16-битное целое число без знака</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Int32<ept id="p1">](xref:System.Int32)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Int32<ept id="p1">](xref:System.Int32)</ept></target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>UInt32<ept id="p1">](xref:System.UInt32)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>UInt32<ept id="p1">](xref:System.UInt32)</ept></target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>32-bit unsigned integer</source>
          <target state="translated">32-битное целое число без знака</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Int64<ept id="p1">](xref:System.Int64)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Int64<ept id="p1">](xref:System.Int64)</ept></target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>UInt64<ept id="p1">](xref:System.UInt64)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>UInt64<ept id="p1">](xref:System.UInt64)</ept></target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>64-bit unsigned integer</source>
          <target state="translated">64-битное целое число без знака</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Int64<ept id="p1">](xref:System.Int64)</ept> (may overflow), <bpt id="p2">[</bpt>BigInteger<ept id="p2">](xref:System.Numerics.BigInteger)</ept>, or <bpt id="p3">[</bpt>Double<ept id="p3">](xref:System.Double)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Int64<ept id="p1">](xref:System.Int64)</ept> (возможно переполнение), <bpt id="p2">[</bpt>BigInteger<ept id="p2">](xref:System.Numerics.BigInteger)</ept> или <bpt id="p3">[</bpt>Double<ept id="p3">](xref:System.Double)</ept></target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>UIntPtr<ept id="p1">](xref:System.UIntPtr)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>UIntPtr<ept id="p1">](xref:System.UIntPtr)</ept></target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>Unsigned pointer or handle</source>
          <target state="translated">Дескриптор или указатель без знака</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>IntPtr<ept id="p1">](xref:System.IntPtr)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>IntPtr<ept id="p1">](xref:System.IntPtr)</ept></target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>The .NET Framework Class Library or any other class library may include other types that aren't CLS-compliant; for example:</source>
          <target state="translated">В библиотеке классов .NET Framework и других библиотеках классов могут встречаться другие типы, не являющиеся CLS-совместимыми. Например:</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>Boxed value types.</source>
          <target state="translated">Упакованные типы значений.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>The following C# example creates a class that has a public property of type <ph id="ph1">`int`</ph><bpt id="p1">*</bpt> named <ph id="ph2">`Value`</ph>. Because an <ph id="ph3">`int`</ph><ept id="p1">*</ept> is a boxed value type, the compiler flags it as non-CLS-compliant.</source>
          <target state="translated">Следующий пример кода на C# создает класс с открытым свойством <ph id="ph2">`Value`</ph> типа <ph id="ph1">`int`</ph><bpt id="p1">*</bpt>. Поскольку <ph id="ph3">`int`</ph><ept id="p1">*</ept> — это упакованный тип значений, компилятор помечает, что он не соответствует правилам CLS-совместимости.</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>Typed references, which are special constructs that contain a reference to an object and a reference to a type.</source>
          <target state="translated">Типизированные ссылки — особые конструкции, содержащие ссылку на объект и ссылку на тип.</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>If a type is not CLS-compliant, you should apply the <bpt id="p1">[</bpt>CLSCompliantAttribute<ept id="p1">](xref:System.CLSCompliantAttribute)</ept> attribute with an <bpt id="p2">*</bpt>isCompliant<ept id="p2">*</ept> parameter with a value of <ph id="ph1">`false`</ph> to it.</source>
          <target state="translated">Если тип не является CLS-совместимым, необходимо применить к нему атрибут <bpt id="p1">[</bpt>CLSCompliantAttribute<ept id="p1">](xref:System.CLSCompliantAttribute)</ept> с параметром <bpt id="p2">*</bpt>isCompliant<ept id="p2">*</ept>, имеющим значение <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>CLSCompliantAttribute attribute<ept id="p1">](#the-clscompliantattribute-attribute)</ept> section.</source>
          <target state="translated">Дополнительные сведения см. в разделе <bpt id="p1">[</bpt>Атрибут CLSCompliantAttribute<ept id="p1">](#the-clscompliantattribute-attribute)</ept>.</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>The following example illustrates the problem of CLS compliance in a method signature and in generic type instantiation.</source>
          <target state="translated">В следующем примере сигнатура метода и экземпляр универсального типа не являются CLS-совместимыми.</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>It defines an <ph id="ph1">`InvoiceItem`</ph> class with a property of type <bpt id="p1">[</bpt>UInt32<ept id="p1">](xref:System.UInt32)</ept>, a property of type <bpt id="p2">[</bpt>Nullable(Of UInt32)<ept id="p2">](xref:System.Nullable%601)</ept>, and a constructor with parameters of type <ph id="ph2">`UInt32`</ph> and <ph id="ph3">`Nullable(Of UInt32)`</ph>.</source>
          <target state="translated">Мы определяем класс <ph id="ph1">`InvoiceItem`</ph>, имеющий свойство типа <bpt id="p1">[</bpt>UInt32<ept id="p1">](xref:System.UInt32)</ept>, свойство типа <bpt id="p2">[</bpt>Nullable(Of UInt32)<ept id="p2">](xref:System.Nullable%601)</ept> и конструктор с параметрами типа <ph id="ph2">`UInt32`</ph> и <ph id="ph3">`Nullable(Of UInt32)`</ph>.</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>You get four compiler warnings when you try to compile this example.</source>
          <target state="translated">При компиляции появляются четыре предупреждения.</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>To eliminate the compiler warnings, replace the non-CLS-compliant types in the <ph id="ph1">`InvoiceItem`</ph> public interface with compliant types:</source>
          <target state="translated">Они не будут отображаться, если заменить в открытом интерфейсе <ph id="ph1">`InvoiceItem`</ph> типы, не соответствующие правилам CLS-совместимости, CLS-совместимыми типами:</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>In addition to the specific types listed, some categories of types are not CLS compliant.</source>
          <target state="translated">Помимо перечисленных типов существуют и другие категории типов, не являющихся CLS-совместимыми.</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>These include unmanaged pointer types and function pointer types.</source>
          <target state="translated">К ним относятся типы неуправляемых указателей и типы указателей функций.</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>The following example generates a compiler warning because it uses a pointer to an integer to create an array of integers.</source>
          <target state="translated">В следующем примере предупреждение компилятора отображается потому, что для создания массива целых чисел используется указатель на целое число.</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>For CLS-compliant abstract classes (that is, classes marked as <ph id="ph1">`abstract`</ph> in C#), all members of the class must also be CLS-compliant.</source>
          <target state="translated">Все члены CLS-совместимых абстрактных классов (т. е. классов, отмеченных атрибутом <ph id="ph1">`abstract`</ph> в C#) также должны быть CLS-совместимыми.</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>Naming conventions</source>
          <target state="translated">Соглашения об именах</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>Because some programming languages are case-insensitive, identifiers (such as the names of namespaces, types, and members) must differ by more than case.</source>
          <target state="translated">В некоторых языках программирования не учитывается регистр, поэтому идентификаторы (имена пространств имен, типов и членов) должны отличаться не только регистром.</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>Two identifiers are considered equivalent if their lowercase mappings are the same.</source>
          <target state="translated">Два идентификатора считаются одинаковыми, если их записи в нижнем регистре совпадают.</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>The following C# example defines two public classes, <ph id="ph1">`Person`</ph> and <ph id="ph2">`person`</ph>.</source>
          <target state="translated">В следующем примере C# определяются два публичных класса: <ph id="ph1">`Person`</ph> и <ph id="ph2">`person`</ph>.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>Because they differ only by case, the C# compiler flags them as not CLS-compliant.</source>
          <target state="translated">Они отличаются только регистром, поэтому компилятор C# помечает, что они не соответствуют правилам CLS-совместимости.</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>Programming language identifiers, such as the names of namespaces, types, and members, must conform to the <bpt id="p1">[</bpt>Unicode Standard 3.0, Technical Report 15, Annex 7<ept id="p1">](http://www.unicode.org/reports/tr15/tr15-18.html)</ept>.</source>
          <target state="translated">Идентификаторы языка программирования — имена пространств имен, типов и членов — должны соответствовать <bpt id="p1">[</bpt>стандарту Юникода версии 3.0 (технический отчет 15, приложение 7)<ept id="p1">](http://www.unicode.org/reports/tr15/tr15-18.html)</ept>.</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>This means that:</source>
          <target state="translated">Это означает следующее.</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>The first character of an identifier can be any Unicode uppercase letter, lowercase letter, title case letter, modifier letter, other letter, or letter number.</source>
          <target state="translated">В качестве первого символа идентификатора можно использовать любой символ верхнего или нижнего регистра, символ заголовка, модификатора, букву или цифру Юникода.</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>For information on Unicode character categories, see the <bpt id="p1">[</bpt>System.Globalization.UnicodeCategory<ept id="p1">](xref:System.Globalization.UnicodeCategory)</ept> enumeration.</source>
          <target state="translated">Категории символов Юникода приводятся в описании перечисления <bpt id="p1">[</bpt>System.Globalization.UnicodeCategory<ept id="p1">](xref:System.Globalization.UnicodeCategory)</ept>.</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>Subsequent characters can be from any of the categories as the first character, and can also include non-spacing marks, spacing combining marks, decimal numbers, connector punctuations, and formatting codes.</source>
          <target state="translated">Допустимые последующие символы — символы тех же категорий, что и первый, а также несамостоятельные знаки, комбинированные самостоятельные знаки, десятичные числа, соединительные знаки пунктуации и коды форматирования.</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>Before you compare identifiers, you should filter out formatting codes and convert the identifiers to Unicode Normalization Form C, because a single character can be represented by multiple UTF-16-encoded code units.</source>
          <target state="translated">Перед сравнением идентификаторов необходимо отфильтровать коды форматирования и преобразовать идентификаторы в форму нормализации Юникода C, поскольку один символ может быть представлен несколькими единицами кода в кодировке UTF-16.</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>Character sequences that produce the same code units in Unicode Normalization Form C are not CLS-compliant.</source>
          <target state="translated">Последовательности символов, соответствующие одним и тем же единицам кода в форме нормализации Юникода C, не являются CLS-совместимыми.</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>The following example defines a property named <ph id="ph1">`Å`</ph>, which consists of the character ANGSTROM SIGN (U+212B), and a second property named <ph id="ph2">`Å`</ph> which consists of the character LATIN CAPITAL LETTER A WITH RING ABOVE (U+00C5).</source>
          <target state="translated">В примере ниже определяется свойство с именем <ph id="ph1">`Å`</ph>, представляющим собой символ ангстрема (U+212B), и свойство с именем <ph id="ph2">`Å`</ph>, представляющим собой заглавную латинскую букву А с надстрочным кружком (U+00C5).</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>The C# compiler flags the source code as non-CLS-compliant.</source>
          <target state="translated">Компилятор C# помечает, что исходный код не соответствует правилам CLS-совместимости.</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>Member names within a particular scope (such as the namespaces within an assembly, the types within a namespace, or the members within a type) must be unique except for names that are resolved through overloading.</source>
          <target state="translated">Имена членов в определенной области (например, имена пространств имен в сборке, типов в пространстве имен или членов типа) должны быть уникальными, за исключением имен, разрешаемых через перегрузку.</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>This requirement is more stringent than that of the common type system, which allows multiple members within a scope to have identical names as long as they are different kinds of members (for example, one is a method and one is a field).</source>
          <target state="translated">Это правило более строгое, чем требования системы общих типов CTS, где члены разных типов (например, метод и поле) могут иметь одинаковые имена в области.</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>In particular, for type members:</source>
          <target state="translated">В частности у членов типов:</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>Fields and nested types are distinguished by name alone.</source>
          <target state="translated">поля и вложенные типы различаются только по имени;</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>Methods, properties, and events that have the same name must differ by more than just return type.</source>
          <target state="translated">методы, свойства и события с одинаковым именем должны отличаться не только возвращаемым типом.</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>The following example illustrates the requirement that member names must be unique within their scope.</source>
          <target state="translated">Следующий пример иллюстрирует это правило.</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>It defines a class named <ph id="ph1">`Converter`</ph> that includes four members named <ph id="ph2">`Conversion`</ph>.</source>
          <target state="translated">В нем определяется класс <ph id="ph1">`Converter`</ph>, содержащий 4 члена с именем <ph id="ph2">`Conversion`</ph>.</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>Three are methods, and one is a property.</source>
          <target state="translated">Три из них — методы, один — свойство.</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>The method that includes an <ph id="ph1">`Int64`</ph> parameter is uniquely named, but the two methods with an <ph id="ph2">`Int32`</ph> parameter are not, because return value is not considered a part of a member's signature.</source>
          <target state="translated">Метод с параметром <ph id="ph1">`Int64`</ph> имеет уникальное имя, а два метода с параметром <ph id="ph2">`Int32`</ph> — нет, потому что возвращаемое значение не рассматривается как часть сигнатуры члена.</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Conversion`</ph> property also violates this requirement, because properties cannot have the same name as overloaded methods.</source>
          <target state="translated">Свойство <ph id="ph1">`Conversion`</ph> также нарушает правило, поскольку имеет то же имя, что и перегруженные методы.</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>Individual languages include unique keywords, so languages that target the common language runtime must also provide some mechanism for referencing identifiers (such as type names) that coincide with keywords.</source>
          <target state="translated">В некоторых языках есть уникальные ключевые слова. В языках, поддерживаемых средой CLR, должен существовать механизм обозначения идентификаторов (например, имен типов), совпадающих с ключевыми словами.</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`case`</ph> is a keyword in both C# and Visual Basic.</source>
          <target state="translated">Например, <ph id="ph1">`case`</ph> — ключевое слово как в C#, так и в Visual Basic.</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>However, the following Visual Basic example is able to disambiguate a class named <ph id="ph1">`case`</ph> from the <ph id="ph2">`case`</ph> keyword by using opening and closing braces.</source>
          <target state="translated">В примере кода на Visual Basic неоднозначность между классом с именем <ph id="ph1">`case`</ph> и ключевым словом <ph id="ph2">`case`</ph> устраняется с помощью парных фигурных скобок.</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>Otherwise, the example would produce the error message, "Keyword is not valid as an identifier," and fail to compile.</source>
          <target state="translated">Иначе бы код не скомпилировался и появилось бы сообщение об ошибке "Ключевое слово не может использоваться как идентификатор".</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>The following C# example is able to instantiate the <ph id="ph1">`case`</ph> class by using the <ph id="ph2">@</ph> symbol to disambiguate the identifier from the language keyword.</source>
          <target state="translated">В примере кода на C#, где создается экземпляр класса <ph id="ph1">`case`</ph>, неоднозначность между ключевым словом и идентификатором разрешается с помощью символа <ph id="ph2">@</ph>.</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>Without it, the C# compiler would display two error messages, "Type expected" and "Invalid expression term 'case'."</source>
          <target state="translated">Без этого символа компилятор C# выдал бы два сообщения об ошибке: "Требуется тип" и "Недопустимый элемент case".</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>Type conversion</source>
          <target state="translated">Преобразование типов</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>The Common Language Specification defines two conversion operators:</source>
          <target state="translated">В спецификации CLS определены два оператора преобразования.</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`op_Implicit`</ph>, which is used for widening conversions that do not result in loss of data or precision.</source>
          <target state="translated">Для расширяющих преобразований, которые не приводят к потере данных или потере точности, используется оператор <ph id="ph1">`op_Implicit`</ph>.</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>For example, the <bpt id="p1">[</bpt>Decimal<ept id="p1">](xref:System.Decimal)</ept> structure includes an overloaded <ph id="ph1">`op_Implicit`</ph> operator to convert values of integral types and <bpt id="p2">[</bpt>Char<ept id="p2">](xref:System.Char)</ept> values to <ph id="ph2">`Decimal`</ph> values.</source>
          <target state="translated">Например, структура <bpt id="p1">[</bpt>Decimal<ept id="p1">](xref:System.Decimal)</ept> включает перегруженный оператор <ph id="ph1">`op_Implicit`</ph>, который преобразует значения целочисленных типов и значения <bpt id="p2">[</bpt>Char<ept id="p2">](xref:System.Char)</ept> в значения <ph id="ph2">`Decimal`</ph>.</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`op_Explicit`</ph>, which is used for narrowing conversions that can result in loss of magnitude (a value is converted to a value that has a smaller range) or precision.</source>
          <target state="translated">Для сужающих преобразований, которые могут привести к потере порядка (преобразование в значение с меньшим диапазоном) или потере точности, используется оператор <ph id="ph1">`op_Explicit`</ph>.</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">`Decimal`</ph> structure includes an overloaded <ph id="ph2">`op_Explicit`</ph> operator to convert <bpt id="p1">[</bpt>Double<ept id="p1">](xref:System.Double)</ept> and <bpt id="p2">[</bpt>Single<ept id="p2">](xref:System.Single)</ept> values to <ph id="ph3">`Decimal`</ph> and to convert <ph id="ph4">`Decimal`</ph> values to integral values, <ph id="ph5">`Double`</ph>, <ph id="ph6">`Single`</ph>, and <ph id="ph7">`Char`</ph>.</source>
          <target state="translated">Например, структура <ph id="ph1">`Decimal`</ph> включает перегруженный оператор <ph id="ph2">`op_Explicit`</ph>, который преобразует значения <bpt id="p1">[</bpt>Double<ept id="p1">](xref:System.Double)</ept> и <bpt id="p2">[</bpt>Single<ept id="p2">](xref:System.Single)</ept> в значения <ph id="ph3">`Decimal`</ph>, а также значения <ph id="ph4">`Decimal`</ph> в целочисленные значения и значения <ph id="ph5">`Double`</ph>, <ph id="ph6">`Single`</ph> и <ph id="ph7">`Char`</ph>.</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>However, not all languages support operator overloading or the definition of custom operators.</source>
          <target state="translated">Однако перегружать операторы и определять пользовательские операторы можно не во всех языках.</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>If you choose to implement these conversion operators, you should also provide an alternate way to perform the conversion.</source>
          <target state="translated">При реализации этих операторов преобразования необходимо предоставить альтернативный способ преобразования.</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>We recommend that you provide <ph id="ph1">`From`</ph>Xxx and <ph id="ph2">`To`</ph>Xxx methods.</source>
          <target state="translated">Рекомендуется использовать методы <ph id="ph1">`From`</ph>Xxx и <ph id="ph2">`To`</ph>Xxx.</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>The following example defines CLS-compliant implicit and explicit conversions.</source>
          <target state="translated">Следующий пример иллюстрирует неявное и явное преобразования, которые являются CLS-совместимыми.</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>It creates a <ph id="ph1">`UDouble`</ph>class that represents an signed double-precision, floating-point number.</source>
          <target state="translated">В нем создается класс <ph id="ph1">`UDouble`</ph>, который представляет число двойной точности с плавающей запятой со знаком.</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>It provides for implicit conversions from <ph id="ph1">`UDouble`</ph> to <ph id="ph2">`Double`</ph> and for explicit conversions from <ph id="ph3">`UDouble`</ph> to <ph id="ph4">`Single`</ph>, <ph id="ph5">`Double`</ph> to <ph id="ph6">`UDouble`</ph>, and <ph id="ph7">`Single`</ph> to <ph id="ph8">`UDouble`</ph>.</source>
          <target state="translated">В нем предусмотрены неявные преобразования <ph id="ph1">`UDouble`</ph> в <ph id="ph2">`Double`</ph> и явные преобразования <ph id="ph3">`UDouble`</ph> в <ph id="ph4">`Single`</ph>, <ph id="ph5">`Double`</ph> в <ph id="ph6">`UDouble`</ph> и <ph id="ph7">`Single`</ph> в <ph id="ph8">`UDouble`</ph>.</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>It also defines a <ph id="ph1">`ToDouble`</ph> method as an alternative to the implicit conversion operator and the <ph id="ph2">`ToSingle`</ph>, <ph id="ph3">`FromDouble`</ph>, and <ph id="ph4">`FromSingle`</ph> methods as alternatives to the explicit conversion operators.</source>
          <target state="translated">В нем также определен метод <ph id="ph1">`ToDouble`</ph> — альтернативный вариант неявного преобразования и методы <ph id="ph2">`ToSingle`</ph>, <ph id="ph3">`FromDouble`</ph> и <ph id="ph4">`FromSingle`</ph> — альтернативные варианты явного преобразования.</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>Arrays</source>
          <target state="translated">Массивы</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>CLS-compliant arrays conform to the following rules:</source>
          <target state="translated">Правила CLS-совместимости для массивов:</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>All dimensions of an array must have a lower bound of zero.</source>
          <target state="translated">Нижняя граница всех измерений массива должна быть равна нулю.</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>The following example creates a non-CLS-compliant array with a lower bound of one.</source>
          <target state="translated">В следующем примере создается массив с нижней границей равной единице, т. е. он не соответствует правилам CLS-совместимости.</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>Note that, despite the presence of the <bpt id="p1">[</bpt>CLSCompliantAttribute<ept id="p1">](xref:System.CLSCompliantAttribute)</ept> attribute, the compiler does not detect that the array returned by the <ph id="ph1">`Numbers.GetTenPrimes`</ph> method is not CLS-compliant.</source>
          <target state="translated">Обратите внимание: несмотря на наличие атрибута <bpt id="p1">[</bpt>CLSCompliantAttribute<ept id="p1">](xref:System.CLSCompliantAttribute)</ept>, компилятор не обнаруживает, что возвращаемый методом <ph id="ph1">`Numbers.GetTenPrimes`</ph> массив не является CLS-совместимым.</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>All array elements must consist of CLS-compliant types.</source>
          <target state="translated">Все элементы массива должны состоять из CLS-совместимых типов.</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>The following example defines two methods that return non-CLS-compliant arrays.</source>
          <target state="translated">В следующем примере определяются два метода, которые возвращают массивы, не являющиеся CLS-совместимыми.</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>The first returns an array of <bpt id="p1">[</bpt>UInt32<ept id="p1">](xref:System.UInt32)</ept> values.</source>
          <target state="translated">Первый возвращает массив значений <bpt id="p1">[</bpt>UInt32<ept id="p1">](xref:System.UInt32)</ept>.</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>The second returns an <bpt id="p1">[</bpt>Object<ept id="p1">](xref:System.Object)</ept> array that includes <bpt id="p2">[</bpt>Int32<ept id="p2">](xref:System.Int32)</ept> and <ph id="ph1">`UInt32`</ph> values.</source>
          <target state="translated">Второй возвращает массив <bpt id="p1">[</bpt>Object<ept id="p1">](xref:System.Object)</ept>, содержащий значения <bpt id="p2">[</bpt>Int32<ept id="p2">](xref:System.Int32)</ept> и <ph id="ph1">`UInt32`</ph>.</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>Although the compiler identifies the first array as non-compliant because of its <ph id="ph1">`UInt32`</ph> type, it fails to recognize that the second array includes non-CLS-compliant elements.</source>
          <target state="translated">Поскольку тип первого массива — <ph id="ph1">`UInt32`</ph>, компилятор сообщает, что он не является CLS-совместимым. Однако он не распознает, что элементы второго массива не являются CLS-совместимыми.</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>Overload resolution for methods that have array parameters is based on the fact that they are arrays and on their element type.</source>
          <target state="translated">Перегрузка методов, параметры которых являются массивами, разрешается исходя из предпосылки, что это массивы, и с учетом типа их элементов.</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>For this reason, the following definition of an overloaded <ph id="ph1">`GetSquares`</ph> method is CLS-compliant.</source>
          <target state="translated">Поэтому следующий перегруженный метод <ph id="ph1">`GetSquares`</ph> является CLS-совместимым.</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>Interfaces</source>
          <target state="translated">Интерфейсы</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>CLS-compliant interfaces can define properties, events, and virtual methods (methods with no implementation).</source>
          <target state="translated">CLS-совместимый интерфейс может определять свойства, события и виртуальные методы (методы без реализации).</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>A CLS-compliant interface cannot have any of the following:</source>
          <target state="translated">Он не может содержать:</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>Static methods or static fields.</source>
          <target state="translated">Статические методы или статические поля.</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>The C# compiler generatse compiler errors if you define a static member in an interface.</source>
          <target state="translated">Компилятор C# выдает ошибки, если в интерфейсе определяется статический член.</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>Fields.</source>
          <target state="translated">Поля.</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>The C# acompiler generates compiler errors if you define a field in an interface.</source>
          <target state="translated">Компилятор C# выдает ошибки, если в интерфейсе определяется поле.</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>Methods that are not CLS-compliant.</source>
          <target state="translated">Методы, которые не являются CLS-совместимыми.</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>For example, the following interface definition includes a method, <ph id="ph1">`INumber.GetUnsigned`</ph>, that is marked as non-CLS-compliant.</source>
          <target state="translated">Например, в следующем определении интерфейса есть метод <ph id="ph1">`INumber.GetUnsigned`</ph>.</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>This example generates a compiler warning.</source>
          <target state="translated">Компилятор выдает предупреждение о том, что он не является CLS-совместимым.</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>Because of this rule, CLS-compliant types are not required to implement non-CLS-compliant members.</source>
          <target state="translated">Вследствие этого правила не требуется, чтобы CLS-совместимые типы реализовывали члены, которые не являются CLS-совместимыми.</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>If a CLS-compliant framework does expose a class that implements a non-CLS compliant interface, it should also provide concrete implementations of all non-CLS-compliant members.</source>
          <target state="translated">Если CLS-совместимая платформа предоставляет класс, реализующий интерфейс, который не является CLS-совместимым, в ней должны быть определены конкретные реализации всех членов, которые не являются CLS-совместимыми.</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>CLS-compliant language compilers must also allow a class to provide separate implementations of members that have the same name and signature in multiple interfaces.</source>
          <target state="translated">Кроме того, CLS-совместимые языковые компиляторы должны разрешать классам иметь отдельные реализации членов с одинаковыми именами и сигнатурами в нескольких интерфейсах.</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>C# supports explicit interface implementations to provide different implementations of identically named methods.</source>
          <target state="translated">Язык C# поддерживает явные реализации интерфейса, с помощью которых можно определить разные реализации методов с одинаковыми именами.</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>The following example illustrates this scenario by defining a <ph id="ph1">`Temperature`</ph> class that implements the <ph id="ph2">`ICelsius`</ph> and <ph id="ph3">`IFahrenheit`</ph> interfaces as explicit interface implementations.</source>
          <target state="translated">Этот сценарий представлен в следующем примере, где определяется класс <ph id="ph1">`Temperature`</ph>, который явно реализует интерфейсы <ph id="ph2">`ICelsius`</ph> и <ph id="ph3">`IFahrenheit`</ph>.</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>Enumerations</source>
          <target state="translated">Перечисления</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>CLS-compliant enumerations must follow these rules:</source>
          <target state="translated">Правила CLS-совместимости для перечислений:</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>The underlying type of the enumeration must be an intrinsic CLS-compliant integer (<bpt id="p1">[</bpt>Byte<ept id="p1">](xref:System.Byte)</ept>, <bpt id="p2">[</bpt>Int16<ept id="p2">](xref:System.Int16)</ept>, <bpt id="p3">[</bpt>Int32<ept id="p3">](xref:System.Int32)</ept>, or <bpt id="p4">[</bpt>Int64<ept id="p4">](xref:System.Int64)</ept>).</source>
          <target state="translated">Базовый тип перечисления должен быть CLS-совместимым встроенным целочисленным типом (<bpt id="p1">[</bpt>Byte<ept id="p1">](xref:System.Byte)</ept>, <bpt id="p2">[</bpt>Int16<ept id="p2">](xref:System.Int16)</ept>, <bpt id="p3">[</bpt>Int32<ept id="p3">](xref:System.Int32)</ept> или <bpt id="p4">[</bpt>Int64<ept id="p4">](xref:System.Int64)</ept>).</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>For example, the following code tries to define an enumeration whose underlying type is <bpt id="p1">[</bpt>UInt32<ept id="p1">](xref:System.UInt32)</ept> and generates a compiler warning.</source>
          <target state="translated">Например, при определении перечисления с базовым типом <bpt id="p1">[</bpt>UInt32<ept id="p1">](xref:System.UInt32)</ept> компилятор выдает предупреждение.</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>An enumeration type must have a single instance field named <ph id="ph1">`Value__`</ph> that is marked with the <ph id="ph2">`FieldAttributes.RTSpecialName`</ph> attribute.</source>
          <target state="translated">Тип перечисления должен иметь поле <ph id="ph1">`Value__`</ph> с одним экземпляром, отмеченное атрибутом <ph id="ph2">`FieldAttributes.RTSpecialName`</ph>.</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source>This enables you to reference the field value implicitly.</source>
          <target state="translated">Это позволяет неявно ссылаться на значение поля.</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>An enumeration includes literal static fields whose types match the type of the enumeration itself.</source>
          <target state="translated">Статические поля литералов перечисления должны иметь тот же тип, что и перечисление.</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>For example, if you define a <ph id="ph1">`State`</ph> enumeration with values of <ph id="ph2">`State.On`</ph> and <ph id="ph3">`State.Off`</ph>, <ph id="ph4">`State.On`</ph> and <ph id="ph5">`State.Off`</ph> are both literal static fields whose type is <ph id="ph6">`State`</ph>.</source>
          <target state="translated">Например, если определить перечисление <ph id="ph1">`State`</ph> со значениями <ph id="ph2">`State.On`</ph> и <ph id="ph3">`State.Off`</ph>, <ph id="ph4">`State.On`</ph> и <ph id="ph5">`State.Off`</ph> будут статическими полями литералов типа <ph id="ph6">`State`</ph>.</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>There are two kinds of enumerations:</source>
          <target state="translated">Существует два вида перечислений:</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>An enumeration that represents a set of mutually exclusive, named integer values.</source>
          <target state="translated">Первый вид представляет набор взаимно исключающих именованных целочисленных значений</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>This type of enumeration is indicated by the absence of the <bpt id="p1">[</bpt>System.FlagsAttribute<ept id="p1">](xref:System.FlagsAttribute)</ept> custom attribute.</source>
          <target state="translated">и не имеет настраиваемого атрибута <bpt id="p1">[</bpt>System.FlagsAttribute<ept id="p1">](xref:System.FlagsAttribute)</ept>.</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>An enumeration that represents a set of bit flags that can combine to generate an unnamed value.</source>
          <target state="translated">Второй вид представляет набор битовых флагов, сочетая которые, можно создавать значения без имени.</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>This type of enumeration is indicated by the presence of the <bpt id="p1">[</bpt>System.FlagsAttribute<ept id="p1">](xref:System.FlagsAttribute)</ept> custom attribute.</source>
          <target state="translated">Такие перечисления имеют настраиваемый атрибут <bpt id="p1">[</bpt>System.FlagsAttribute<ept id="p1">](xref:System.FlagsAttribute)</ept>.</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source>For more information, see the documentation for the <bpt id="p1">[</bpt>Enum<ept id="p1">](xref:System.Enum)</ept> structure.</source>
          <target state="translated">Дополнительные сведения см. в документации по структуре <bpt id="p1">[</bpt>Enum<ept id="p1">](xref:System.Enum)</ept>.</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>The value of an enumeration is not limited to the range of its specified values.</source>
          <target state="translated">Значение перечисления не ограничивается диапазоном указанных значений.</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>In other words, the range of values in an enumeration is the range of its underlying value.</source>
          <target state="translated">Другими словами, диапазон значений в перечислении — это диапазон базового значения.</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">`Enum.IsDefined`</ph> method to determine whether a specified value is a member of an enumeration.</source>
          <target state="translated">Метод <ph id="ph1">`Enum.IsDefined`</ph> позволяет определить, является ли указанное значение членом перечисления.</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>Type members in general</source>
          <target state="translated">Обзор членов типов</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>The Common Language Specification requires all fields and methods to be accessed as members of a particular class.</source>
          <target state="translated">В соответствии со спецификацией CLS доступ ко всем полям и методам должен осуществляться как к членам определенного класса.</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>Therefore, global static fields and methods (that is, static fields or methods that are defined apart from a type) are not CLS-compliant.</source>
          <target state="translated">Поэтому глобальные статические поля и методы (статические поля и методы, определенные отдельно от типа) не являются CLS-совместимыми.</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>If you try to include a global field or method in your source code, the C# compiler generates a compiler error.</source>
          <target state="translated">Если такие поля или методы присутствуют в коде, компилятор C# выдает ошибку.</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>The Common Language Specification supports only the standard managed calling convention.</source>
          <target state="translated">В спецификации CLS поддерживается только стандартное соглашение об управляемых вызовах.</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>It doesn't support unmanaged calling conventions and methods with variable argument lists marked with the <ph id="ph1">`varargs`</ph> keyword.</source>
          <target state="translated">Соглашения о неуправляемых вызовах и методы со списками аргументов переменной длины, отмеченные ключевым словом <ph id="ph1">`varargs`</ph>, не поддерживаются.</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source>For variable argument lists that are compatible with the standard managed calling convention, use the <bpt id="p1">[</bpt>ParamArrayAttribute<ept id="p1">](xref:System.ParamArrayAttribute)</ept> attribute or the individual language's implementation, such as the <ph id="ph1">`params`</ph> keyword in C# and the <ph id="ph2">`ParamArray`</ph> keyword in Visual Basic.</source>
          <target state="translated">Для переменных списков аргументов, совместимых со стандартным соглашением об управляемых вызовах, следует использовать атрибут <bpt id="p1">[</bpt>ParamArrayAttribute<ept id="p1">](xref:System.ParamArrayAttribute)</ept> или индивидуальную реализацию языка, например ключевое слово <ph id="ph1">`params`</ph> в C# или ключевое слово <ph id="ph2">`ParamArray`</ph> в Visual Basic.</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>Member accessibility</source>
          <target state="translated">Доступность членов</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>Overriding an inherited member cannot change the accessibility of that member.</source>
          <target state="translated">Переопределение наследуемого члена не влияет на его доступность.</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>For example, a public method in a base class cannot be overridden by a private method in a derived class.</source>
          <target state="translated">Например, открытый метод базового класса невозможно переопределить с помощью закрытого метода производного класса.</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>There is one exception: a <ph id="ph1">`protected internal`</ph> (in C#) or <ph id="ph2">`Protected Friend`</ph> (in Visual Basic) member in one assembly that is overridden by a type in a different assembly.</source>
          <target state="translated">Существует одно исключение: член <ph id="ph1">`protected internal`</ph> (в C#) или член <ph id="ph2">`Protected Friend`</ph> (в Visual Basic) в одной сборке может переопределяться типом в другой сборке.</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>In that case, the accessibility of the override is <ph id="ph1">`Protected`</ph>.</source>
          <target state="translated">Тогда переопределенный член будет иметь доступность <ph id="ph1">`Protected`</ph>.</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>The following example illustrates the error that is generated when the <bpt id="p1">[</bpt>CLSCompliantAttribute<ept id="p1">](xref:System.CLSCompliantAttribute)</ept> attribute is set to <ph id="ph1">`true`</ph>, and <ph id="ph2">`Person`</ph>, which is a class derived from <ph id="ph3">`Animal`</ph>, tries to change the accessibility of the <ph id="ph4">`Species`</ph> property from public to private.</source>
          <target state="translated">Рассмотрим следующий пример. Атрибут <bpt id="p1">[</bpt>CLSCompliantAttribute<ept id="p1">](xref:System.CLSCompliantAttribute)</ept> имеет значение <ph id="ph1">`true`</ph>. Когда класс <ph id="ph2">`Person`</ph>, производный от класса <ph id="ph3">`Animal`</ph>, изменяет доступность свойства <ph id="ph4">`Species`</ph> с открытой на закрытую, компилятор выдает ошибку.</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>The example compiles successfully if its accessibility is changed to public.</source>
          <target state="translated">Однако если доступность меняется на открытую, ошибки не возникает.</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>Types in the signature of a member must be accessible whenever that member is accessible.</source>
          <target state="translated">Типы в сигнатуре члена должны быть доступны всегда, когда доступен член.</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source>For example, this means that a public member cannot include a parameter whose type is private, protected, or internal.</source>
          <target state="translated">В частности, открытый член не может иметь параметр закрытого, защищенного или внутреннего типа.</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>The following example illustrates the compiler error that results when a <ph id="ph1">`StringWrapper`</ph> class constructor exposes an internal <ph id="ph2">`StringOperationType`</ph> enumeration value that determines how a string value should be wrapped.</source>
          <target state="translated">В следующем примере, когда конструктор класса <ph id="ph1">`StringWrapper`</ph> предоставляет внутреннее значение перечисления <ph id="ph2">`StringOperationType`</ph>, которое определяет, как переносится строка, компилятор выдает ошибку.</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>Generic types and members</source>
          <target state="translated">Универсальные типы и члены</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source>Nested types always have at least as many generic parameters as their enclosing type.</source>
          <target state="translated">У вложенного типа должно быть не меньше универсальных параметров, чем у включающего типа.</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>These correspond by position to the generic parameters in the enclosing type.</source>
          <target state="translated">Они соответствуют по позиции универсальным параметрам включающего типа.</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>The generic type can also include new generic parameters.</source>
          <target state="translated">Универсальный тип может также содержать новые универсальные параметры.</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>The relationship between the generic type parameters of a containing type and its nested types may be hidden by the syntax of individual languages.</source>
          <target state="translated">Связь между параметрами универсального типа содержащего типа и вложенных типов может скрываться синтаксисом отдельных языков.</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>In the following example, a generic type <ph id="ph1">`Outer&lt;T&gt;`</ph> contains two nested classes, <ph id="ph2">`Inner1A`</ph> and <ph id="ph3">`Inner1B&lt;U&gt;`</ph>.</source>
          <target state="translated">В следующем примере универсальный тип <ph id="ph1">`Outer&lt;T&gt;`</ph> содержит два вложенных класса — <ph id="ph2">`Inner1A`</ph> и <ph id="ph3">`Inner1B&lt;U&gt;`</ph>.</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>The calls to the <ph id="ph1">`ToString`</ph> method, which each class inherits from <ph id="ph2">`Object.ToString`</ph>, show that each nested class includes the type parameters of its containing class.</source>
          <target state="translated">При вызове метода <ph id="ph1">`ToString`</ph>, наследуемого от класса <ph id="ph2">`Object.ToString`</ph>, видно, что каждый вложенный класс включает параметры типа содержащего его класса.</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>Generic type names are encoded in the form <bpt id="p1">*</bpt>name<ept id="p1">*</ept>'<bpt id="p2">*</bpt>n<ept id="p2">*</ept>, where <bpt id="p3">*</bpt>name<ept id="p3">*</ept> is the type name, <bpt id="p4">*</bpt><ph id="ph1">`</ph><ept id="p4">*</ept> is a character literal, and <bpt id="p5">*</bpt>n<ept id="p5">*</ept> is the number of parameters declared on the type, or, for nested generic types, the number of newly introduced type parameters.</source>
          <target state="translated">Имена универсальных типов кодируются в виде <bpt id="p1">*</bpt>имя<ept id="p1">*</ept>'<bpt id="p2">*</bpt>n<ept id="p2">*</ept>, где <bpt id="p3">*</bpt>имя<ept id="p3">*</ept> — имя типа, <bpt id="p4">*</bpt><ph id="ph1">`</ph><ept id="p4">*</ept> — символьный литерал, а <bpt id="p5">*</bpt>n<ept id="p5">*</ept> — количество параметров, объявленных в типе (у вложенных универсальных типов — количество новых параметров типа).</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>This encoding of generic type names is primarily of interest to developers who use reflection to access CLS-complaint generic types in a library.</source>
          <target state="translated">Эта запись имен универсальных типов в первую очередь пригодится разработчикам, использующим отражение для доступа к универсальным CLS-совместимым типам в библиотеке.</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source>If constraints are applied to a generic type, any types used as constraints must also be CLS-compliant.</source>
          <target state="translated">Если к универсальному типу применяются ограничения, то типы, используемые в качестве ограничений, должны быть CLS-совместимыми.</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source>The following example defines a class named <ph id="ph1">`BaseClass`</ph> that is not CLS-compliant and a generic class named <ph id="ph2">`BaseCollection`</ph> whose type parameter must derive from <ph id="ph3">`BaseClass`</ph>.</source>
          <target state="translated">В следующем примере определяется класс <ph id="ph1">`BaseClass`</ph>, который не является CLS-совместимым, и универсальный класс <ph id="ph2">`BaseCollection`</ph>, у которого параметр типа должен быть производным от класса <ph id="ph3">`BaseClass`</ph>.</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>But because <ph id="ph1">`BaseClass`</ph>is not CLS-compliant, the compiler emits a warning.</source>
          <target state="translated">Поскольку <ph id="ph1">`BaseClass`</ph> не является CLS-совместимым, компилятор выдает предупреждение.</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source>If a generic type is derived from a generic base type, it must redeclare any constraints so that it can guarantee that constraints on the base type are also satisfied.</source>
          <target state="translated">В универсальном типе, производном от универсального базового типа, должны повторно объявляться ограничения, обеспечивающие соответствие всем ограничениям базового типа.</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source>The following example defines a <ph id="ph1">`Number&lt;T&gt;`</ph> that can represent any numeric type.</source>
          <target state="translated">В следующем примере определяется <ph id="ph1">`Number&lt;T&gt;`</ph>, который может представлять любой числовой тип.</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source>It also defines a <ph id="ph1">`FloatingPoint&lt;T&gt;`</ph> class that represents a floating point value.</source>
          <target state="translated">В нем также определяется класс <ph id="ph1">`FloatingPoint&lt;T&gt;`</ph>, представляющий значение с плавающей запятой.</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source>However, the source code fails to compile, because it does not apply the constraint on <ph id="ph1">`Number&lt;T&gt;`</ph> (that T must be a value type) to <ph id="ph2">`FloatingPoint&lt;T&gt;`</ph>.</source>
          <target state="translated">Однако поскольку ограничения <ph id="ph1">`Number&lt;T&gt;`</ph> (T должен быть типом значения) не применяются к <ph id="ph2">`FloatingPoint&lt;T&gt;`</ph>, код не компилируется.</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source>The example compiles successfully if the constraint is added to the <ph id="ph1">`FloatingPoint&lt;T&gt;`</ph> class.</source>
          <target state="translated">Если в класс <ph id="ph1">`FloatingPoint&lt;T&gt;`</ph> добавить ограничение, код компилируется.</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source>The Common Language Specification imposes a conservative per-instantiation model for nested types and protected members.</source>
          <target state="translated">Спецификация CLS предполагает консервативную модель создания экземпляров вложенных типов и защищенных членов.</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>Open generic types cannot expose fields or members with signatures that contain a specific instantiation of a nested, protected generic type.</source>
          <target state="translated">Открытые универсальные типы не могут предоставлять поля и члены с сигнатурами, содержащими определенный экземпляр вложенного защищенного универсального типа.</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>Non-generic types that extend a specific instantiation of a generic base class or interface cannot expose fields or members with signatures that contain a different instantiation of a nested, protected generic type.</source>
          <target state="translated">Неуниверсальные типы, расширяющие определенный экземпляр универсального базового класса или интерфейса, не могут предоставлять поля и члены с сигнатурами, содержащими другой экземпляр вложенного защищенного универсального типа.</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>The following example defines a generic type, <ph id="ph1">`C1&lt;T&gt;`</ph>, and a protected class, <ph id="ph2">`C1&lt;T&gt;.N`</ph>.</source>
          <target state="translated">В следующем примере определяется универсальный тип <ph id="ph1">`C1&lt;T&gt;`</ph> и защищенный класс <ph id="ph2">`C1&lt;T&gt;.N`</ph>.</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`C1&lt;T&gt;`</ph> has two methods, <ph id="ph2">`M1`</ph> and <ph id="ph3">`M2`</ph>.</source>
          <target state="translated">Объект <ph id="ph1">`C1&lt;T&gt;`</ph> имеет два метода: <ph id="ph2">`M1`</ph> и <ph id="ph3">`M2`</ph>.</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>However, <ph id="ph1">`M1`</ph> is not CLS-compliant because it tries to return a <ph id="ph2">`C1&lt;int&gt;.N`</ph> object from <ph id="ph3">`C1&lt;T&gt;`</ph>.</source>
          <target state="translated">Однако <ph id="ph1">`M1`</ph> не является CLS-совместимым, поскольку он возвращает объект <ph id="ph2">`C1&lt;int&gt;.N`</ph> из <ph id="ph3">`C1&lt;T&gt;`</ph>.</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source>A second class, <ph id="ph1">`C2`</ph>, is derived from <ph id="ph2">`C1&lt;long&gt;`</ph>.</source>
          <target state="translated">Второй класс <ph id="ph1">`C2`</ph> является производным от <ph id="ph2">`C1&lt;long&gt;`</ph>.</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source>It has two methods, <ph id="ph1">`M3`</ph> and <ph id="ph2">`M4`</ph>.</source>
          <target state="translated">Он имеет два метода: <ph id="ph1">`M3`</ph> и <ph id="ph2">`M4`</ph>.</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`M3`</ph> is not CLS-compliant because it tries to return a <ph id="ph2">`C1&lt;int&gt;.N`</ph> object from a subclass of <ph id="ph3">`C1&lt;long&gt;`</ph>.</source>
          <target state="translated"><ph id="ph1">`M3`</ph> не является CLS-совместимым, поскольку он возвращает объект <ph id="ph2">`C1&lt;int&gt;.N`</ph> из подкласса <ph id="ph3">`C1&lt;long&gt;`</ph>.</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source>Note that language compilers can be even more restrictive.</source>
          <target state="translated">Обратите внимание, что языковые компиляторы могут накладывать даже более строгие ограничения.</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source>In this example, Visual Basic displays an error when it tries to compile <ph id="ph1">`M4`</ph>.</source>
          <target state="translated">В этом примере на языке Visual Basic при компиляции <ph id="ph1">`M4`</ph> возникает ошибка.</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source>Constructors</source>
          <target state="translated">Конструкторы</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source>Constructors in CLS-compliant classes and structures must follow these rules:</source>
          <target state="translated">Правила для конструкторов CLS-совместимых классов и структур:</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source>A constructor of a derived class must call the instance constructor of its base class before it accesses inherited instance data.</source>
          <target state="translated">Перед обращением к данным унаследованного экземпляра конструктор производного класса должен вызвать конструктор экземпляра базового класса,</target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source>This requirement is due to the fact that base class constructors are not inherited by their derived classes.</source>
          <target state="translated">поскольку конструкторы базовых классов не наследуются производными классами.</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve">
          <source>This rule does not apply to structures, which do not support direct inheritance.</source>
          <target state="translated">Это правило не применяется к структурам, не поддерживающим прямое наследование.</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve">
          <source>Typically, compilers enforce this rule independently of CLS compliance, as the following example shows.</source>
          <target state="translated">Обычно компиляторы применяют это правило вне зависимости от требований CLS-совместимости. Это иллюстрирует следующий пример.</target>       </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve">
          <source>It creates a <ph id="ph1">`Doctor`</ph> class that is derived from a <ph id="ph2">`Person`</ph> class, but the <ph id="ph3">`Doctor`</ph>class fails to call the <ph id="ph4">`Person`</ph> class constructor to initialize inherited instance fields.</source>
          <target state="translated">Класс <ph id="ph1">`Doctor`</ph> является производным от класса <ph id="ph2">`Person`</ph>, однако класс <ph id="ph3">`Doctor`</ph> не может вызывать конструктор класса <ph id="ph4">`Person`</ph> для инициализации наследуемых полей экземпляра.</target>       </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve">
          <source>An object constructor cannot be called except to create an object.</source>
          <target state="translated">Конструктор объекта можно вызывать только для создания объекта.</target>       </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve">
          <source>In addition, an object cannot be initialized twice.</source>
          <target state="translated">Объект невозможно инициализировать дважды.</target>       </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve">
          <source>For example, this means that <ph id="ph1">`Object.MemberwiseClone`</ph> must not call constructors.</source>
          <target state="translated">В частности, это означает, что метод <ph id="ph1">`Object.MemberwiseClone`</ph> не должен вызывать конструкторы.</target>       </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve">
          <source>Properties</source>
          <target state="translated">Свойства</target>       </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve">
          <source>Properties in CLS-compliant types must follow these rules:</source>
          <target state="translated">Правила для свойств CLS-совместимых типов:</target>       </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source>A property must have a setter, a getter, or both.</source>
          <target state="translated">Свойство должно иметь метод задания значения, метод получения значения или оба эти метода.</target>       </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source>In an assembly, these are implemented as special methods, which means that they will appear as separate methods (the getter is named <ph id="ph1">`get`</ph><ph id="ph2">\_</ph><bpt id="p1">*</bpt>propertyname<ept id="p1">*</ept> and the setter is <ph id="ph3">`set*\_*propertyname*) marked as `</ph>SpecialName` in the assembly's metadata.</source>
          <target state="translated">В сборке они реализованы в виде специальных методов, т. е. отображаются как отдельные методы (метод получения значения имеет имя <ph id="ph1">`get`</ph><ph id="ph2">\_</ph><bpt id="p1">*</bpt>propertyname<ept id="p1">*</ept>, а метод задания значения — <ph id="ph3">`set*\_*propertyname*) marked as `</ph>SpecialName` в метаданных сборки).</target>       </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve">
          <source>The C# compiler enforces this rule automatically without the need to apply the <bpt id="p1">[</bpt>CLSCompliantAttribute<ept id="p1">](xref:System.CLSCompliantAttribute)</ept> attribute.</source>
          <target state="translated">Компилятор C# обеспечивает соблюдение этого правила, поэтому применять атрибут <bpt id="p1">[</bpt>CLSCompliantAttribute<ept id="p1">](xref:System.CLSCompliantAttribute)</ept> не требуется.</target>       </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve">
          <source>A property's type is the return type of the property getter and the last argument of the setter.</source>
          <target state="translated">Тип свойства, тип возвращаемого значения метода получения значения свойства и тип последнего аргумента метода задания значения должны совпадать.</target>       </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source>These types must be CLS compliant, and arguments cannot be assigned to the property by reference (that is, they cannot be managed pointers).</source>
          <target state="translated">Все эти типы должны быть CLS-совместимыми, и аргументы не могут присваиваться свойству по ссылке (т. е. не могут быть управляемыми указателями).</target>       </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source>If a property has both a getter and a setter, they must both be virtual, both static, or both instance.</source>
          <target state="translated">Если свойство имеет и метод получения, и метод задания значения, оба эти метода должны быть либо виртуальными, либо статическими, либо экземплярами.</target>       </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source>The C# compiler automatically enforces this rule through property definition syntax.</source>
          <target state="translated">Компилятор C# обеспечивает соблюдение этого правила с помощью синтаксиса определения свойств.</target>       </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source>Events</source>
          <target state="translated">События</target>       </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source>An event is defined by its name and its type.</source>
          <target state="translated">Событие определяется именем и типом.</target>       </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve">
          <source>The event type is a delegate that is used to indicate the event.</source>
          <target state="translated">Тип события является делегатом, который используется для обозначения события.</target>       </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">`DbConnection.StateChange`</ph> event is of type <ph id="ph2">`StateChangeEventHandler`</ph>.</source>
          <target state="translated">Например, событие <ph id="ph1">`DbConnection.StateChange`</ph> имеет тип <ph id="ph2">`StateChangeEventHandler`</ph>.</target>       </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source>In addition to the event itself, three methods with names based on the event name provide the event's implementation and are marked as <ph id="ph1">`SpecialName`</ph> in the assembly's metadata:</source>
          <target state="translated">Помимо события также определяются три метода с именами, производными от имени события, которые обеспечивают реализацию события и имеют в метаданных сборки атрибут <ph id="ph1">`SpecialName`</ph>:</target>       </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve">
          <source>A method for adding an event handler, named <ph id="ph1">`add`</ph>_<bpt id="p1">*</bpt>EventName<ept id="p1">*</ept>.</source>
          <target state="translated">Метод добавления обработчика событий с именем <ph id="ph1">`add`</ph>_<bpt id="p1">*</bpt>EventName<ept id="p1">*</ept>.</target>       </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source>For example, the event subscription method for the <ph id="ph1">`DbConnection.StateChange`</ph> event is named <ph id="ph2">`add_StateChange`</ph>.</source>
          <target state="translated">Например, метод подписки для события <ph id="ph1">`DbConnection.StateChange`</ph> называется <ph id="ph2">`add_StateChange`</ph>.</target>       </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source>A method for removing an event handler, named <ph id="ph1">`remove`</ph>_<bpt id="p1">*</bpt>EventName<ept id="p1">*</ept>.</source>
          <target state="translated">Метод удаления обработчика событий с именем <ph id="ph1">`remove`</ph>_<bpt id="p1">*</bpt>EventName<ept id="p1">*</ept>.</target>       </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source>For example, the removal method for the <ph id="ph1">`DbConnection.StateChange`</ph> event is named <ph id="ph2">`remove_StateChange`</ph>.</source>
          <target state="translated">Например, метод удаления для события <ph id="ph1">`DbConnection.StateChange`</ph> называется <ph id="ph2">`remove_StateChange`</ph>.</target>       </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source>A method for indicating that the event has occurred, named <ph id="ph1">`raise`</ph>_<bpt id="p1">*</bpt>EventName<ept id="p1">*</ept>.</source>
          <target state="translated">Метод, который указывает, что возникло событие, с именем <ph id="ph1">`raise`</ph>_<bpt id="p1">*</bpt>EventName<ept id="p1">*</ept>.</target>       </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source>Most of the Common Language Specification's rules regarding events are implemented by language compilers and are transparent to component developers.</source>
          <target state="translated">Большинство правил спецификации CLS, связанных с событиями, реализуется языковыми компиляторами и являются прозрачными для разработчиков компонентов.</target>       </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source>The methods for adding, removing, and raising the event must have the same accessibility.</source>
          <target state="translated">Методы добавления, удаления и вызова события должны иметь одинаковую доступность</target>       </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source>They must also all be static, instance, or virtual.</source>
          <target state="translated">и быть либо одновременно статическими, либо виртуальными, либо экземплярами.</target>       </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve">
          <source>The methods for adding and removing an event have one parameter whose type is the event delegate type.</source>
          <target state="translated">Методы добавления и удаления события имеют один параметр, тип которого является типом делегата события.</target>       </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source>The add and remove methods must both be present or both be absent.</source>
          <target state="translated">Методы добавления и удаления должны либо оба присутствовать, либо оба отсутствовать.</target>       </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve">
          <source>The following example defines a CLS-compliant class named <ph id="ph1">`Temperature`</ph> that raises a <ph id="ph2">`TemperatureChanged`</ph> event if the change in temperature between two readings equals or exceeds a threshold value.</source>
          <target state="translated">В следующем примере определяется CLS-совместимый класс <ph id="ph1">`Temperature`</ph>, который создает событие <ph id="ph2">`TemperatureChanged`</ph>, если перепад температуры между двумя показаниями равен пороговому значению или превышает его.</target>       </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Temperature`</ph> class explicitly defines a <ph id="ph2">`raise_TemperatureChanged`</ph> method so that it can selectively execute event handlers.</source>
          <target state="translated">Класс <ph id="ph1">`Temperature`</ph> явно определяет метод <ph id="ph2">`raise_TemperatureChanged`</ph>, чтобы он мог выборочно выполнять обработчики событий.</target>       </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve">
          <source>Overloads</source>
          <target state="translated">Overloads</target>       </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve">
          <source>The Common Language Specification imposes the following requirements on overloaded members:</source>
          <target state="translated">Спецификация CLS налагает следующие требования на перегруженные члены:</target>       </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve">
          <source>Members can be overloaded based on the number of parameters and the type of any parameter.</source>
          <target state="translated">Члены могут перегружаться на основе количества и типов параметров.</target>       </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve">
          <source>Calling convention, return type, custom modifiers applied to the method or its parameter, and whether parameters are passed by value or by reference are not considered when differentiating between overloads.</source>
          <target state="translated">Соглашение о вызовах, тип возвращаемого значения, пользовательские модификаторы, применяемые к методу или его параметру, и способ передачи параметров (по значению или по ссылке) не учитываются при различении перегрузок.</target>       </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve">
          <source>For an example, see the code for the requirement that names must be unique within a scope in the <bpt id="p1">[</bpt>Naming conventions<ept id="p1">](#naming-conventions)</ept> section.</source>
          <target state="translated">См. пример, иллюстрирующий требование уникальности имен в пределах области в разделе <bpt id="p1">[</bpt>Соглашения об именовании<ept id="p1">](#naming-conventions)</ept>.</target>       </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve">
          <source>Only properties and methods can be overloaded.</source>
          <target state="translated">Перегружать можно только свойства и методы.</target>       </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve">
          <source>Fields and events cannot be overloaded.</source>
          <target state="translated">Поля и события невозможно перегружать.</target>       </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve">
          <source>Generic methods can be overloaded based on the number of their generic parameters.</source>
          <target state="translated">Универсальные методы могут перегружаться на основе количества универсальных параметров.</target>       </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`op_Explicit`</ph> and <ph id="ph2">`op_Implicit`</ph> operators are exceptions to the rule that return value is not considered part of a method signature for overload resolution.</source>
          <target state="translated">Правило о том, что возвращаемое значение не считается частью сигнатуры метода для разрешения перегрузки не распространяется на операторы <ph id="ph1">`op_Explicit`</ph> и <ph id="ph2">`op_Implicit`</ph>.</target>       </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve">
          <source>These two operators can be overloaded based on both their parameters and their return value.</source>
          <target state="translated">Их можно перегружать и на основе параметров, и на основе возвращаемого значения.</target>       </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve">
          <source>Exceptions</source>
          <target state="translated">Исключения</target>       </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve">
          <source>Exception objects must derive from <bpt id="p1">[</bpt>System.Exception<ept id="p1">](xref:System.Exception)</ept> or from another type derived from <ph id="ph1">`System.Exception`</ph>.</source>
          <target state="translated">Объекты исключений должны наследоваться от <bpt id="p1">[</bpt>System.Exception<ept id="p1">](xref:System.Exception)</ept> или типа, производного от <ph id="ph1">`System.Exception`</ph>.</target>       </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve">
          <source>The following example illustrates the compiler error that results when a custom class named <ph id="ph1">`ErrorClass`</ph> is used for exception handling.</source>
          <target state="translated">В следующем примере, когда пользовательский класс <ph id="ph1">`ErrorClass`</ph> используется для обработки исключения, компилятор выдает ошибку.</target>       </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve">
          <source>To correct this error, the <ph id="ph1">`ErrorClass`</ph> class must inherit from <ph id="ph2">`System.Exception`</ph>.</source>
          <target state="translated">Чтобы она не возникала, класс <ph id="ph1">`ErrorClass`</ph> должен наследоваться от <ph id="ph2">`System.Exception`</ph>.</target>       </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve">
          <source>In addition, the Message property must be overridden.</source>
          <target state="translated">Кроме того, необходимо переопределить свойство Message.</target>       </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve">
          <source>The following example corrects these errors to define an <ph id="ph1">`ErrorClass`</ph> class that is CLS-compliant.</source>
          <target state="translated">Эти ошибки устранены в следующем примере, где определяется CLS-совместимый класс <ph id="ph1">`ErrorClass`</ph>.</target>       </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve">
          <source>Attributes</source>
          <target state="translated">Атрибуты</target>       </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve">
          <source>In.NET Framework assemblies, custom attributes provide an extensible mechanism for storing custom attributes and retrieving metadata about programming objects, such as assemblies, types, members, and method parameters.</source>
          <target state="translated">В сборках .NET Framework настраиваемые атрибуты предоставляют расширяемый механизм хранения настраиваемых атрибутов и извлечения метаданных об объектах программирования (например, о сборках, типах, членах и параметрах методов).</target>       </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve">
          <source>Custom attributes must derive from <bpt id="p1">[</bpt>System.Attribute<ept id="p1">](xref:System.Attribute)</ept> or from a type derived from <ph id="ph1">`System.Attribute`</ph>.</source>
          <target state="translated">Настраиваемые атрибуты должны наследоваться от <bpt id="p1">[</bpt>System.Attribute<ept id="p1">](xref:System.Attribute)</ept> или типа, производного от <ph id="ph1">`System.Attribute`</ph>.</target>       </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve">
          <source>The following example violates this rule.</source>
          <target state="translated">Это правило не выполняется в следующем примере.</target>       </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve">
          <source>It defines a <ph id="ph1">`NumericAttribute`</ph> class that does not derive from <ph id="ph2">`System.Attribute`</ph>.</source>
          <target state="translated">В нем определяется класс <ph id="ph1">`NumericAttribute`</ph>, который не является производным от <ph id="ph2">`System.Attribute`</ph>.</target>       </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve">
          <source>Note that a compiler error results only when the non-CLS-compliant attribute is applied, not when the class is defined.</source>
          <target state="translated">Обратите внимание, что компилятор выдает ошибку не при определении класса, а когда используется атрибут, который не является CLS-совместимым.</target>       </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve">
          <source>The constructor or the properties of a CLS-compliant attribute can expose only the following types:</source>
          <target state="translated">Конструктор и свойства CLS-совместимого атрибута могут предоставлять только следующие типы:</target>       </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Boolean<ept id="p1">](xref:System.Boolean)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Boolean<ept id="p1">](xref:System.Boolean)</ept></target>       </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Byte<ept id="p1">](xref:System.Byte)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Byte<ept id="p1">](xref:System.Byte)</ept></target>       </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Char<ept id="p1">](xref:System.Char)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Char<ept id="p1">](xref:System.Char)</ept></target>       </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Double<ept id="p1">](xref:System.Double)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Double<ept id="p1">](xref:System.Double)</ept></target>       </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Int16<ept id="p1">](xref:System.Int16)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Int16<ept id="p1">](xref:System.Int16)</ept></target>       </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Int32<ept id="p1">](xref:System.Int32)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Int32<ept id="p1">](xref:System.Int32)</ept></target>       </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Int64<ept id="p1">](xref:System.Int64)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Int64<ept id="p1">](xref:System.Int64)</ept></target>       </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Single<ept id="p1">](xref:System.Single)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Single<ept id="p1">](xref:System.Single)</ept></target>       </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>String<ept id="p1">](xref:System.String)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>String<ept id="p1">](xref:System.String)</ept></target>       </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Type<ept id="p1">](xref:System.Type)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Тип<ept id="p1">](xref:System.Type)</ept></target>       </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve">
          <source>Any enumeration type whose underlying type is <ph id="ph1">`Byte`</ph>, <ph id="ph2">`Int16`</ph>, <ph id="ph3">`Int32`</ph>, or <ph id="ph4">`Int64`</ph>.</source>
          <target state="translated">Любой тип перечисления с базовым типом <ph id="ph1">`Byte`</ph>, <ph id="ph2">`Int16`</ph>, <ph id="ph3">`Int32`</ph> или <ph id="ph4">`Int64`</ph>.</target>       </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve">
          <source>The following example defines a <ph id="ph1">`DescriptionAttribute`</ph> class that derives from <bpt id="p1">[</bpt>Attribute<ept id="p1">](xref:System.Attribute)</ept>.</source>
          <target state="translated">В следующем примере определяется класс <ph id="ph1">`DescriptionAttribute`</ph>, производный от <bpt id="p1">[</bpt>Attribute<ept id="p1">](xref:System.Attribute)</ept>.</target>       </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve">
          <source>The class constructor has a parameter of type <ph id="ph1">`Descriptor`</ph>, so the class is not CLS-compliant.</source>
          <target state="translated">Конструктор класса имеет параметр типа <ph id="ph1">`Descriptor`</ph>, поэтому класс не является CLS-совместимым.</target>       </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve">
          <source>Note that the C# compiler emits a warning but compiles successfully.</source>
          <target state="translated">Обратите внимание, что компилятор C# выдает предупреждение, но при этом успешно завершает компиляцию.</target>       </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve">
          <source>The CLSCompliantAttribute attribute</source>
          <target state="translated">Атрибут CLSCompliantAttribute</target>       </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>CLSCompliantAttribute<ept id="p1">](xref:System.CLSCompliantAttribute)</ept> attribute is used to indicate whether a program element complies with the Common Language Specification.</source>
          <target state="translated">Атрибут <bpt id="p1">[</bpt>CLSCompliantAttribute<ept id="p1">](xref:System.CLSCompliantAttribute)</ept> указывает, соответствует ли элемент правилам спецификации CLS.</target>       </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CLSCompliantAttribute.CLSCompliantAttribute(Boolean)`</ph> constructor includes a single required parameter, <bpt id="p1">*</bpt>isCompliant<ept id="p1">*</ept>, that indicates whether the program element is CLS-compliant.</source>
          <target state="translated">Конструктор <ph id="ph1">`CLSCompliantAttribute.CLSCompliantAttribute(Boolean)`</ph> имеет один обязательный параметр <bpt id="p1">*</bpt>isCompliant<ept id="p1">*</ept>, определяющий, является ли элемент программы CLS-совместимым.</target>       </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve">
          <source>At compile time, the compiler detects non-compliant elements that are presumed to be CLS-compliant and emits a warning.</source>
          <target state="translated">Компилятор определяет элементы, которые предположительно являются CLS-совместимыми, однако не соответствуют правилам спецификации CLS, и выдает предупреждение.</target>       </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve">
          <source>The compiler does not emit warnings for types or members that are explicitly declared to be non-compliant.</source>
          <target state="translated">Он пропускает типы и члены, которые явно объявлены как не соответствующие правилам спецификации CLS.</target>       </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve">
          <source>Component developers can use the <ph id="ph1">`CLSCompliantAttribute`</ph> attribute in two ways:</source>
          <target state="translated">Разработчики компонентов могут использовать атрибут <ph id="ph1">`CLSCompliantAttribute`</ph> двумя способами:</target>       </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve">
          <source>To define the parts of the public interface exposed by a component that are CLS-compliant and the parts that are not CLS-compliant.</source>
          <target state="translated">Определять части открытого интерфейса, предоставляемые компонентом, которые являются или не являются CLS-совместимыми.</target>       </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve">
          <source>When the attribute is used to mark particular program elements as CLS-compliant, its use guarantees that those elements are accessible from all languages and tools that target the .NET Framework.</source>
          <target state="translated">Если с помощью этого атрибута пометить определенные элементы программы как CLS-совместимые, они будут доступны во всех языках и инструментах, ориентированных на .NET Framework.</target>       </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve">
          <source>To ensure that the component library's public interface exposes only program elements that are CLS-compliant.</source>
          <target state="translated">С его помощью обеспечить, чтобы открытый интерфейс библиотеки компонентов предоставлял только CLS-совместимые элементы программы.</target>       </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve">
          <source>If elements are not CLS-compliant, compilers will generally issue a warning.</source>
          <target state="translated">Если элементы не являются CLS-совместимыми, компиляторы обычно выдают предупреждение.</target>       </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve">
          <source>In some cases, language compilers enforce CLS-compliant rules regardless of whether the <ph id="ph1">`CLSCompliantAttribute`</ph> attribute is used.</source>
          <target state="translated">В некоторых случаях языковые компиляторы применяют правила CLS-совместимости вне зависимости от того, используется ли атрибут <ph id="ph1">`CLSCompliantAttribute`</ph>.</target>       </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve">
          <source>For example, defining a <ph id="ph1">`*static`</ph> member in an interface violates a CLS rule.</source>
          <target state="translated">Например, когда в интерфейсе определяется член <ph id="ph1">`*static`</ph>, нарушается правило CLS-совместимости.</target>       </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve">
          <source>However, if you define a <ph id="ph1">`*static`</ph> member in an interface, the C# compiler displays an error message and fails to compile the app.</source>
          <target state="translated">Однако если определить в интерфейсе член <ph id="ph1">`*static`</ph>, компилятор C# выдает сообщение об ошибке и не компилирует приложение.</target>       </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CLSCompliantAttribute`</ph> attribute is marked with an <bpt id="p1">[</bpt>AttributeUsageAttribute<ept id="p1">](xref:System.AttributeUsageAttribute)</ept> attribute that has a value of <ph id="ph2">`AttributeTargets.All`</ph>.</source>
          <target state="translated">Атрибут <ph id="ph1">`CLSCompliantAttribute`</ph> отмечен атрибутом <bpt id="p1">[</bpt>AttributeUsageAttribute<ept id="p1">](xref:System.AttributeUsageAttribute)</ept> со значением <ph id="ph2">`AttributeTargets.All`</ph>.</target>       </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve">
          <source>This value allows you to apply the <ph id="ph1">`CLSCompliantAttribute`</ph> attribute to any program element, including assemblies, modules, types (classes, structures, enumerations, interfaces, and delegates), type members (constructors, methods, properties, fields, and events), parameters, generic parameters, and return values.</source>
          <target state="translated">Это значение позволяет применять атрибут <ph id="ph1">`CLSCompliantAttribute`</ph> к любым элементам программы: сборкам, модулям, типам (классам, структурам, перечислениям, интерфейсам и делегатам), членам типов (конструкторам, методам, свойствам, полям и событиям), параметрам, универсальным параметрам и возвращаемым значениям.</target>       </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve">
          <source>However, in practice, you should apply the attribute only to assemblies, types, and type members.</source>
          <target state="translated">Однако на практике атрибут рекомендуется применять только к сборкам, типам и членам типов.</target>       </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve">
          <source>Otherwise, compilers ignore the attribute and continue to generate compiler warnings whenever they encounter a non-compliant parameter, generic parameter, or return value in your library's public interface.</source>
          <target state="translated">В противном случае компиляторы игнорируют атрибут и создают предупреждения для всех параметров, универсальных параметров и возвращаемых значений открытого интерфейса библиотеки, которые не являются CLS-совместимыми.</target>       </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve">
          <source>The value of the <ph id="ph1">`CLSCompliantAttribute`</ph> attribute is inherited by contained program elements.</source>
          <target state="translated">Значение атрибута <ph id="ph1">`CLSCompliantAttribute`</ph> наследуется вложенными элементами программы.</target>       </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve">
          <source>For example, if an assembly is marked as CLS-compliant, its types are also CLS-compliant.</source>
          <target state="translated">Например, если сборка отмечена как CLS-совместимая, ее типы также являются CLS-совместимыми.</target>       </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve">
          <source>If a type is marked as CLS-compliant, its nested types and members are also CLS-compliant.</source>
          <target state="translated">Если тип отмечен как CLS-совместимый, его вложенные типы и члены также являются CLS-совместимыми.</target>       </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve">
          <source>You can explicitly override the inherited compliance by applying the <ph id="ph1">`CLSCompliantAttribute`</ph> attribute to a contained program element.</source>
          <target state="translated">Можно явно переопределить наследуемую совместимость, применив к вложенному элементу программы атрибут <ph id="ph1">`CLSCompliantAttribute`</ph>.</target>       </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve">
          <source>For example, you can use the <ph id="ph1">`CLSCompliantAttribute`</ph> attribute with an <bpt id="p1">*</bpt>isCompliant<ept id="p1">*</ept> value of <ph id="ph2">`false`</ph> to define a non-compliant type in a compliant assembly, and you can use the attribute with an <bpt id="p2">*</bpt>isComplian<ept id="p2">*</ept> value of <ph id="ph3">`true`</ph> to define a compliant type in a non-compliant assembly.</source>
          <target state="translated">Например, используя атрибут <ph id="ph1">`CLSCompliantAttribute`</ph> с параметром <ph id="ph2">`false`</ph>, равным <bpt id="p1">*</bpt>isCompliant<ept id="p1">*</ept>, можно определить в совместимой сборке несовместимый тип, а используя его с параметром <ph id="ph3">`true`</ph>, равным <bpt id="p2">*</bpt>isComplian<ept id="p2">*</ept>, — определить в несовместимой сборке совместимый тип.</target>       </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve">
          <source>You can also define non-compliant members in a compliant type.</source>
          <target state="translated">Кроме того, можно определять несовместимые члены в совместимом типе.</target>       </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve">
          <source>However, a non-compliant type cannot have compliant members, so you cannot use the attribute with an <bpt id="p1">*</bpt>isCompliant<ept id="p1">*</ept> value of <ph id="ph1">`true`</ph> to override inheritance from a non-compliant type.</source>
          <target state="translated">Однако несовместимый тип не может иметь совместимые члены, поэтому наследование от несовместимого типа невозможно переопределить с помощью параметра <ph id="ph1">`true`</ph> со значением <bpt id="p1">*</bpt>isCompliant<ept id="p1">*</ept>.</target>       </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve">
          <source>When you are developing components, you should always use the <ph id="ph1">`CLSCompliantAttribute`</ph> attribute to indicate whether your assembly, its types, and its members are CLS-compliant.</source>
          <target state="translated">При разработке компонентов следует всегда указывать, что сборка, ее типы и члены являются CLS-совместимыми с помощью атрибута <ph id="ph1">`CLSCompliantAttribute`</ph>.</target>       </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve">
          <source>To create CLS-compliant components:</source>
          <target state="translated">Создание CLS-совместимых компонентов</target>       </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`CLSCompliantAttribute`</ph> to mark you assembly as CLS-compliant.</source>
          <target state="translated">Пометьте сборку как CLS-совместимую с помощью атрибута <ph id="ph1">`CLSCompliantAttribute`</ph>.</target>       </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve">
          <source>Mark any publicly exposed types in the assembly that are not CLS-compliant as non-compliant.</source>
          <target state="translated">Пометьте все открытые типы в сборке, которые не являются CLS-совместимыми, как несовместимые.</target>       </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve">
          <source>Mark any publicly exposed members in CLS-compliant types as non-compliant.</source>
          <target state="translated">Пометьте все открытые члены в CLS-совместимых типах как несовместимые.</target>       </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve">
          <source>Provide a CLS-compliant alternative for non-CLS-compliant members.</source>
          <target state="translated">Предоставьте CLS-совместимую альтернативу членам, которые не являются CLS-совместимыми.</target>       </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve">
          <source>If you've successfully marked all your non-compliant types and members, your compiler should not emit any non-compliance warnings.</source>
          <target state="translated">Если все несовместимые типы и члены отмечены, компилятор не выдает предупреждений о несовместимости.</target>       </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve">
          <source>However, you should indicate which members are not CLS-compliant and list their CLS-compliant alternatives in your product documentation.</source>
          <target state="translated">Однако следует указать, какие члены не являются CLS-совместимым, и определить CLS-совместимые альтернативы в документации продукта.</target>       </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve">
          <source>The following example uses the <ph id="ph1">`CLSCompliantAttribute`</ph> attribute to define a CLS-compliant assembly and a type, <ph id="ph2">`CharacterUtilities`</ph>, that has two non-CLS-compliant members.</source>
          <target state="translated">В следующем примере с помощью атрибута <ph id="ph1">`CLSCompliantAttribute`</ph> определяется CLS-совместимая сборка и тип <ph id="ph2">`CharacterUtilities`</ph>, который имеет два члена, не являющихся CLS-совместимыми.</target>       </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve">
          <source>Because both members are tagged with the <ph id="ph1">`CLSCompliant(false)`</ph> attribute, the compiler produces no warnings.</source>
          <target state="translated">Поскольку оба члена отмечены атрибутом <ph id="ph1">`CLSCompliant(false)`</ph>, компилятор не выдает предупреждения.</target>       </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve">
          <source>The class also provides a CLS-compliant alternative for both methods.</source>
          <target state="translated">Класс также предоставляет CLS-совместимую альтернативу для обоих методов.</target>       </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve">
          <source>Ordinarily, we would just add two overloads to the <ph id="ph1">`ToUTF16`</ph> method to provide CLS-compliant alternatives.</source>
          <target state="translated">В обычном случае мы бы добавили две перегрузки для метода <ph id="ph1">`ToUTF16`</ph>, чтобы предоставить CLS-совместимые альтернативы.</target>       </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve">
          <source>However, because methods cannot be overloaded based on return value, the names of the CLS-compliant methods are different from the names of the non-compliant methods.</source>
          <target state="translated">Однако методы не перегружаются на основе возвращаемого значения, поэтому CLS-совместимые и несовместимые методы имеют разные имена.</target>       </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve">
          <source>If you are developing an app rather than a library (that is, if you aren't exposing types or members that can be consumed by other app developers), the CLS compliance of the program elements that your app consumes are of interest only if your language does not support them.</source>
          <target state="translated">При разработке приложений (а не библиотек, где предоставляются типы и члены, которые могут использоваться другими разработчиками) вы столкнетесь с вопросами CLS-совместимости программных элементов, которые использует приложение, только если их не поддерживает язык, на котором вы работаете.</target>       </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve">
          <source>In that case, your language compiler will generate an error when you try to use a non-CLS-compliant element.</source>
          <target state="translated">И если вы попытаетесь использовать элементы, которые не являются CLS-совместимыми, языковой компилятор выдаст предупреждение.</target>       </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve">
          <source>Cross-Language Interoperability</source>
          <target state="translated">Взаимная совместимость кодов на разных язык</target>       </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve">
          <source>Language independence has a number of possible meanings.</source>
          <target state="translated">Независимость от языка имеет несколько возможных значений.</target>       </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve">
          <source>One meaning involves seamlessly consuming types written in one language from an app written in another language.</source>
          <target state="translated">Первое значение подразумевает беспроблемное использование типов, созданных на одном языке, приложением, написанным на другом языке.</target>       </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve">
          <source>A second meaning, which is the focus of this article, involves combining code written in multiple languages into a single .NET Framework assembly.</source>
          <target state="translated">Второе значение, которое рассматривается в этой статье, — это объединение кода, написанного на нескольких языках, в единую сборку .NET Framework.</target>       </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve">
          <source>The following example illustrates cross-language interoperability by creating a class library named Utilities.dll that includes two classes, <ph id="ph1">`NumericLib`</ph> and <ph id="ph2">`StringLib`</ph>.</source>
          <target state="translated">В следующем примере показана организация межъязыкового взаимодействия путем создания библиотеки классов с именем "Utilities.dll", которая содержит два класса: <ph id="ph1">`NumericLib`</ph> и <ph id="ph2">`StringLib`</ph>.</target>       </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`NumericLib`</ph> class is written in C#, and the <ph id="ph2">`StringLib`</ph> class is written in Visual Basic.</source>
          <target state="translated">Класс <ph id="ph1">`NumericLib`</ph> написан на C#, а класс <ph id="ph2">`StringLib`</ph> — на Visual Basic.</target>       </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve">
          <source>Here's the source code for <ph id="ph1">`StringUtil.vb`</ph>, which includes a single member, <ph id="ph2">`ToTitleCase`</ph>, in its <ph id="ph3">`StringLib`</ph> class.</source>
          <target state="translated">Ниже приведен исходный код для <ph id="ph1">`StringUtil.vb`</ph>, который содержит один член — <ph id="ph2">`ToTitleCase`</ph> — в своем классе <ph id="ph3">`StringLib`</ph>.</target>       </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve">
          <source>Here's the source code for NumberUtil.cs, which defines a <ph id="ph1">`NumericLib`</ph> class that has two members, <ph id="ph2">`IsEven`</ph> and <ph id="ph3">`NearZero`</ph>.</source>
          <target state="translated">Ниже приведен исходный код для "NumberUtil.cs", определяющий класс <ph id="ph1">`NumericLib`</ph> с двумя членами: <ph id="ph2">`IsEven`</ph> и <ph id="ph3">`NearZero`</ph>.</target>       </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve">
          <source>To package the two classes in a single assembly, you must compile them into modules.</source>
          <target state="translated">Чтобы упаковать оба класса в одну сборку, необходимо скомпилировать их в модули.</target>       </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve">
          <source>To compile the Visual Basic source code file into a module, use this command:</source>
          <target state="translated">Чтобы скомпилировать файл исходного кода на Visual Basic в модуль, используйте следующую команду.</target>       </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve">
          <source>To compile the C# source code file into a module, use this command:</source>
          <target state="translated">Чтобы скомпилировать файл исходного кода на C# в модуль, используйте следующую команду.</target>       </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve">
          <source>You then use the Link tool (Link.exe) to compile the two modules into an assembly:</source>
          <target state="translated">Затем вызовите компоновщик (Link.exe), чтобы скомпилировать оба модуля в сборку.</target>       </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve">
          <source>The following example then calls the <ph id="ph1">`NumericLib.NearZero`</ph> and <ph id="ph2">`StringLib.ToTitleCase`</ph> methods.</source>
          <target state="translated">В следующем примере показаны вызовы методов <ph id="ph1">`NumericLib.NearZero`</ph> и <ph id="ph2">`StringLib.ToTitleCase`</ph>.</target>       </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve">
          <source>Note that both the Visual Basic code and the C# code are able to access the methods in both classes.</source>
          <target state="translated">Обратите внимание, что и код Visual Basic, и код C#, могут обращаться к методам в обоих классах.</target>       </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve">
          <source>To compile the Visual Basic code, use this command:</source>
          <target state="translated">Чтобы скомпилировать код Visual Basic, используйте следующую команду.</target>       </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve">
          <source>To compile with C#, change the name of the compiler from vbc to csc, and change the file extension from .vb to .cs:</source>
          <target state="translated">Чтобы скомпилировать C#, измените имя компилятора с vbc на csc и расширение файла на с VB на CS.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>