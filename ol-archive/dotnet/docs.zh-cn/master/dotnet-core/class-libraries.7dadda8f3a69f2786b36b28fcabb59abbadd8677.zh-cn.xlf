<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0ca64c3" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">028fd4961c97e31ea9f213b832c723b2ce2cf27c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\class-libraries.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">92e33f28118649674ef0d7d1a61b4e06ee5a3a4a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">831754c1a672c75f630705e685461e8923725eca</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>.NET Class Libraries</source>
          <target state="translated">.NET 类库</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>.NET Class Libraries</source>
          <target state="translated">.NET 类库</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET、.NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>.NET Class Libraries</source>
          <target state="translated">.NET 类库</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Class libraries are the <bpt id="p1">[</bpt>shared library<ept id="p1">](http://en.wikipedia.org/wiki/Library_%28computing%29#Shared_libraries)</ept> concept for .NET.</source>
          <target state="translated">类库是 .NET 的<bpt id="p1">[</bpt>共享库<ept id="p1">](http://en.wikipedia.org/wiki/Library_%28computing%29#Shared_libraries)</ept>概念。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>They enable you to componentize useful functionality into modules that can be used by multiple applications.</source>
          <target state="translated">通过类库可将实用功能组件化为可供多个应用程序使用的模块。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>They can also be used as a means of loading functionality that is not needed or not known at application startup.</source>
          <target state="translated">还可使用类库加载应用程序启动时不需要或未知的功能。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Class libraries are described using the <bpt id="p1">[</bpt>.NET Assembly file format<ept id="p1">](assembly-format.md)</ept>.</source>
          <target state="translated">类库通过 <bpt id="p1">[</bpt>.NET 程序集文件格式<ept id="p1">](assembly-format.md)</ept>进行描述。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>There are three types of class libraries that you can use:</source>
          <target state="translated">有三种类型的类库可供使用：</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Platform-specific<ept id="p1">**</ept> class libraries have access to all the APIs in a given platform (for example, .NET Framework, Xamarin iOS), but can only be used by apps and libraries that target that platform.</source>
          <target state="translated"><bpt id="p1">**</bpt>平台特定<ept id="p1">**</ept>的类库可访问给定平台（例如，.NET Framework、Xamarin、iOS）中的所有 API，但只有面向该平台的应用和库可使用该类库。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Portable<ept id="p1">**</ept> class libraries have access to a subset of APIs, and can be used by apps and libraries that target multiple platforms.</source>
          <target state="translated"><bpt id="p1">**</bpt>可移植<ept id="p1">**</ept>类库可访问 API 的子集，并且可供面向多个平台的应用和库使用。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>.NET Core<ept id="p1">**</ept> class libraries are a merger of the platform-specific and portable library concept into a single model that provides the best of both.</source>
          <target state="translated"><bpt id="p1">**</bpt>.NET Core<ept id="p1">**</ept> 类库将平台特定的库和可移植库概念整合到单个模型中，从而做到了两全其美。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Platform-specific Class Libraries</source>
          <target state="translated">平台特定的类库</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Platform-specific libraries are bound to a single .NET platform (for example, .NET Framework on Windows) and can therefore take significant dependencies on a known execution environment.</source>
          <target state="translated">平台特定的类库绑定到单个 .NET 平台（例如，Windows 上的 .NET Framework），因此它可以在已知的执行环境上接收重要的依赖项。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Such an environment will expose a known set of APIs (.NET and OS APIs) and will maintain and expose expected state (for example, Windows registry).</source>
          <target state="translated">此类环境会公开一组已知 API（.NET 和 OS API），维护并公开预期状态（例如，Windows 注册表）。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Developers who create platform specific libraries can fully exploit the underlying platform.</source>
          <target state="translated">创建平台特定的库的开发人员可充分利用基础平台。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The libraries will only ever run on that given platform, making platform checks or other forms of conditional code unnecessary (modulo single sourcing code for multiple platforms).</source>
          <target state="translated">该库只会在给定平台上运行，因此不需要平台检查和其他形式的条件代码（针对多个平台取模单个源代码）。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Platform-specific libraries have been the primary class library type for the .NET Framework.</source>
          <target state="translated">平台特定的库一直是 .NET Framework 的主要类库类型。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Even as other .NET platforms emerged, platform-specific libraries remained the dominant library type.</source>
          <target state="translated">即使出现了其他 .NET 平台，平台特定的库也仍然是最主要的类库类型。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Portable Class Libraries</source>
          <target state="translated">可移植类库</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Portable libraries are supported on multiple .NET platforms.</source>
          <target state="translated">可移植库支持多个 .NET 平台。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>They can still take dependencies on a known execution environment, however, the environment is a synthetic one that is generated by the intersection of a set of concrete .NET platforms.</source>
          <target state="translated">该库仍可在已知执行环境上接收依赖项，不过该环境是一种合成环境，由一组具体 .NET 平台的交集生成。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This means that exposed APIs and platform assumptions are a subset of what would be available to a platform-specific library.</source>
          <target state="translated">这意味着，公开的 API 和平台假设是平台特定的库可用的子集。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>You choose a platform configuration when you create a portable library.</source>
          <target state="translated">创建可移植库时，需选择平台配置。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>These are the set of platforms that you need to support (for example, .NET Framework 4.5+, Windows Phone 8.0+).</source>
          <target state="translated">这些是需要支持的各个平台（例如，.NET Framework 4.5+、Windows Phone 8.0+）。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The more platforms you opt to support, the fewer APIs and fewer platform assumptions you can make, the lowest common denominator.</source>
          <target state="translated">要支持的平台越多，可生成的 API 和平台假设就越少，公分母越小。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This characteristic can be confusing at first, since people often think “more is better”, but find that more supported platforms results in fewer available APIs.</source>
          <target state="translated">这一特性可能最初会令人感到疑惑，因为人们常认为“越多越好”，但却发现更多的支持平台总导致可用 API 更少。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Many library developers have switched from producing multiple platform-specific libraries from one source (using conditional compilation directives) to portable libraries.</source>
          <target state="translated">许多库开发人员已经从由一个源开发多个平台特定的库（使用条件编译指令）转向开发可移植库。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>There are <bpt id="p1">[</bpt>several approaches<ept id="p1">](http://blog.stephencleary.com/2012/11/portable-class-library-enlightenment.html)</ept> for accessing platform-specific functionality within portable libraries, with <bpt id="p2">[</bpt>bait-and-switch<ept id="p2">](http://log.paulbetts.org/the-bait-and-switch-pcl-trick/)</ept> being the most widely accepted technique at this point.</source>
          <target state="translated">有<bpt id="p1">[</bpt>多种方法<ept id="p1">](http://blog.stephencleary.com/2012/11/portable-class-library-enlightenment.html)</ept>可在可移植库中访问平台特定的功能，其中<bpt id="p2">[</bpt>诱饵替换<ept id="p2">](http://log.paulbetts.org/the-bait-and-switch-pcl-trick/)</ept>是目前最广为接受的方法。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>.NET Core Class Libraries</source>
          <target state="translated">.NET Core 类库</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>.NET Core libraries are a replacement of the platform-specific and portable libraries concepts.</source>
          <target state="translated">.NET Core 库是平台特定的库和可移植库概念的替代。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>They are platform-specific in the sense that they expose all functionality from the underlying platform (no synthetic platforms or platform intersections).</source>
          <target state="translated">.NET Core 库可从基础平台公开所有功能（无合成平台或平台交集），就此而言，它是平台特定的库。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>They are portable in the sense that they work on all supporting platforms.</source>
          <target state="translated">该库可在所有支持平台上运行，就此而言，它是可移植库。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>.NET Core exposes a set of library <bpt id="p1">_</bpt>contracts<ept id="p1">_</ept>.</source>
          <target state="translated">.NET Core 公开一组库协定。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>.NET platforms must support each contract fully or not at all.</source>
          <target state="translated">.NET 平台必须完全支持每个协定，否则就全都不支持。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Each platform, therefore, supports a set of .NET Core contracts.</source>
          <target state="translated">因此，每个平台都支持一组 .NET Core 协定。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The corollary is that each .NET Core class library is supported on the platforms that support it’s contract dependencies.</source>
          <target state="translated">得出的必然结果是，.NET Core 类库在支持其协定依赖项的平台上受到支持。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>.NET Core contracts do not expose the entire functionality of the .NET Framework (nor is that a goal), however, they do expose many more APIs than Portable Class Libraries.</source>
          <target state="translated">.NET Core 协定不公开整个 .NET Framework 的功能（也不将此作为目标），但相比可移植类库，其公开的 API 更多。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>More APIs will be added over time.</source>
          <target state="translated">随着时间推移，将添加更多的 API。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The following platforms support .NET Core class libraries:</source>
          <target state="translated">下列平台支持 .NET Core 类库：</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>.NET Core</source>
          <target state="translated">.NET Core</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>ASP.NET Core</source>
          <target state="translated">ASP.NET Core</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>.NET Framework 4.5+</source>
          <target state="translated">.NET Framework 4.5+</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Windows Store Apps</source>
          <target state="translated">Windows 应用商店应用</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Windows Phone 8+</source>
          <target state="translated">Windows Phone 8+</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Mono Class Libraries</source>
          <target state="translated">Mono 类库</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Class libraries are supported on Mono, including the three types of libraries described above.</source>
          <target state="translated">Mono 支持多种类库，包括上述三种类型的库。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Mono has often been seen (correctly) as a cross-platform implementation of the Microsoft .NET Framework.</source>
          <target state="translated">Mono 常被视为（正确地）Microsoft .NET Framework 的跨平台实现。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>In part, this was because platform-specific .NET Framework libraries could run on the Mono runtime without modification or recompilation.</source>
          <target state="translated">部分原因是，平台特定的 .NET Framework 库可在 Mono 运行时上运行，而无需修改或重新编译。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>This characteristic was in place before the creation of portable class libraries, so was an obvious choice to enable binary portability between the .NET Framework and Mono (although it only worked in one direction).</source>
          <target state="translated">创建可移植库之前，此特性就已存在，因此在 .NET Framework 和 Mono 之间启用二进制可移植性是显而易见的选择（虽然它只能单向运行）。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>
