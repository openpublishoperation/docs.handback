<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-47f9650" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">793b5bc4b26967104459fa2559c6127bb82f3a9d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\base-types\creating-new.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">91ddf33b3f9152a3c9e607edb5dbea5b1bbf34f9</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e6a2166e248abe21ce57893ed1983ee85e7f629b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Creating new strings</source>
          <target state="translated">创建新字符串</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Creating new strings</source>
          <target state="translated">创建新字符串</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Creating new strings</source>
          <target state="translated">创建新字符串</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>.NET  allows strings to be created using simple assignment, and also overloads a class constructor to support string creation using a number of different parameters.</source>
          <target state="translated">.NET 允许通过简单赋值创建字符串，并且还重载一个类构造函数，以支持使用一些不同参数来创建字符串。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>.NET also provides several methods in the <bpt id="p1">[</bpt>System.String<ept id="p1">](xref:System.String)</ept> class that create new string objects by combining several strings, arrays of strings, or objects.</source>
          <target state="translated">.NET 还在 <bpt id="p1">[</bpt>System.String<ept id="p1">](xref:System.String)</ept> 类中提供了几个方法，这些方法通过合并多个字符串、字符串数组或对象来创建新的字符串对象。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Creating Strings Using Assignment</source>
          <target state="translated">通过赋值创建字符串</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The easiest way to create a new <bpt id="p1">[</bpt>String<ept id="p1">](xref:System.String)</ept> object is simply to assign a string literal to a <bpt id="p2">[</bpt>String<ept id="p2">](xref:System.String)</ept> object.</source>
          <target state="translated">创建新 <bpt id="p1">[</bpt>String<ept id="p1">](xref:System.String)</ept> 对象的最简单方法是将一个字符串赋给 <bpt id="p2">[</bpt>String<ept id="p2">](xref:System.String)</ept> 对象。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Creating Strings Using a Class Constructor</source>
          <target state="translated">使用类构造函数创建字符串</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You can use overloads of the <bpt id="p1">[</bpt>String<ept id="p1">](xref:System.String)</ept> class constructor to create strings from character arrays.</source>
          <target state="translated">可以使用 <bpt id="p1">[</bpt>String<ept id="p1">](xref:System.String)</ept> 类构造函数的重载从字符数组创建字符串。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You can also create a new string by duplicating a particular character a specified number of times.</source>
          <target state="translated">还可以通过将特定字符重复指定次数来创建新字符串。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Methods that Return Strings</source>
          <target state="translated">返回字符串的方法</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The following table lists several useful methods that return new string objects.</source>
          <target state="translated">下表列出了返回新字符串对象的几个有用方法。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Method name</source>
          <target state="translated">方法名称</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Use</source>
          <target state="translated">使用</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>String.Format<ept id="p1">](xref:System.String.Format(System.String,System.Object))</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>String.Format<ept id="p1">](xref:System.String.Format(System.String,System.Object))</ept></target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Builds a formatted string from a set of input objects.</source>
          <target state="translated">从一组输入对象生成格式化的字符串。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>String.Concat<ept id="p1">](xref:System.String.Concat(System.String,System.String))</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>String.Concat<ept id="p1">](xref:System.String.Concat(System.String,System.String))</ept></target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Builds strings from two or more strings.</source>
          <target state="translated">从两个或更多个字符串生成字符串。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>String.Join<ept id="p1">](xref:System.String.Join(System.String,System.String[]))</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>String.Join<ept id="p1">](xref:System.String.Join(System.String,System.String[]))</ept></target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Builds a new string by combining an array of strings.</source>
          <target state="translated">通过合并字符串数组生成新字符串。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>String.Insert<ept id="p1">](xref:System.String.Insert(System.Int32,System.String))</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>String.Insert<ept id="p1">](xref:System.String.Insert(System.Int32,System.String))</ept></target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Builds a new string by inserting a string into the specified index of an existing string.</source>
          <target state="translated">通过将一个字符串插入现有字符串的指定索引处生成新字符串。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>String.CopyTo<ept id="p1">](xref:System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32))</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>String.CopyTo<ept id="p1">](xref:System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32))</ept></target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Copies specified characters in a string into a specified position in an array of characters.</source>
          <target state="translated">将一个字符串中的指定字符复制到一个字符数组中的指定位置。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Format</source>
          <target state="translated">格式</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">`String.Format`</ph> method to create formatted strings and concatenate strings representing multiple objects.</source>
          <target state="translated">可以使用 <ph id="ph1">`String.Format`</ph> 方法创建格式化字符串和连接表示多个对象的字符串。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This method automatically converts any passed object into a string.</source>
          <target state="translated">此方法自动将传递给它的任何对象转换为字符串。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For example, if your application must display an <bpt id="p1">[</bpt>Int32<ept id="p1">](xref:System.Int32)</ept> value and a <bpt id="p2">[</bpt>DateTime<ept id="p2">](xref:System.DateTime)</ept> value to the user, you can easily construct a string to represent these values using the <ph id="ph1">`Format`</ph> method.</source>
          <target state="translated">例如，如果应用程序必须向用户显示 <bpt id="p1">[</bpt>Int32<ept id="p1">](xref:System.Int32)</ept> 值和 <bpt id="p2">[</bpt>DateTime<ept id="p2">](xref:System.DateTime)</ept> 值，则可以很方便地使用 <ph id="ph1">`Format`</ph> 方法来构造表示这些值的字符串。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For information about formatting conventions used with this method, see the section on <bpt id="p1">[</bpt>composite formatting<ept id="p1">](composite-format.md)</ept>.</source>
          <target state="translated">有关此方法使用的格式化约定的信息，请参阅有关<bpt id="p1">[</bpt>复合格式化<ept id="p1">](composite-format.md)</ept>的部分。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The following example uses the <ph id="ph1">`Format`</ph> method to create a string that uses an integer variable.</source>
          <target state="translated">下面的示例使用 <ph id="ph1">`Format`</ph> 方法创建一个使用整数变量的字符串。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>In this example, <bpt id="p1">[</bpt>DateTime.Now<ept id="p1">](xref:System.DateTime.Now)</ept> displays the current date and time in a manner specified by the culture associated with the current thread.</source>
          <target state="translated">在此示例中，<bpt id="p1">[</bpt>DateTime.Now<ept id="p1">](xref:System.DateTime.Now)</ept> 按照与当前线程关联的区域性所指定的方式来显示当前日期和时间。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Concat</source>
          <target state="translated">Concat</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`String.Concat`</ph> method can be used to easily create a new string object from two or more existing objects.</source>
          <target state="translated"><ph id="ph1">`String.Concat`</ph> 方法可用来方便地从两个或更多个现有对象创建新的字符串对象。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>It provides a language-independent way to concatenate strings.</source>
          <target state="translated">它提供了一种与语言无关的方法来连接字符串。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This method accepts any class that derives from <ph id="ph1">`System.Object`</ph>.</source>
          <target state="translated">此方法接受派生自 <ph id="ph1">`System.Object`</ph> 的任何类。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The following example creates a string from two existing string objects and a separating character.</source>
          <target state="translated">下面的示例使用两个现有字符串对象和一个分隔符创建一个字符串。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Join</source>
          <target state="translated">联接</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`String.Join`</ph> method creates a new string from an array of strings and a separator string.</source>
          <target state="translated"><ph id="ph1">`String.Join`</ph> 方法通过一个字符串数组和一个分隔符串创建新字符串。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This method is useful if you want to concatenate multiple strings together, making a list perhaps separated by a comma.</source>
          <target state="translated">如果想要将多个字符串连接在一起，构成一个可能由逗号分隔的列表，则此方法非常有用。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The following example uses a space to bind a string array.</source>
          <target state="translated">下面的示例使用空格来连接字符串数组。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Insert</source>
          <target state="translated">Insert</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`String.Insert`</ph> method creates a new string by inserting a string into a specified position in another string.</source>
          <target state="translated"><ph id="ph1">`String.Insert`</ph> 方法通过将一个字符串插入另一个字符串中的指定位置来创建新字符串。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>This method uses a zero-based index.</source>
          <target state="translated">此方法使用从零开始的索引。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The following example inserts a string into the fifth index position of <ph id="ph1">`MyString`</ph> and creates a new string with this value.</source>
          <target state="translated">下面的示例将一个字符串插入 <ph id="ph1">`MyString`</ph> 的第五个索引位置，并用此值创建新字符串。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>CopyTo</source>
          <target state="translated">CopyTo</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`String.CopyTo`</ph> method copies portions of a string into an array of characters.</source>
          <target state="translated"><ph id="ph1">`String.CopyTo`</ph> 方法将字符串的某些部分复制到字符数组中。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>You can specify both the beginning index of the string and the number of characters to be copied.</source>
          <target state="translated">可以同时指定字符串的开始索引和要复制的字符数。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This method takes the source index, an array of characters, the destination index, and the number of characters to copy.</source>
          <target state="translated">此方法采用源索引、字符数组、目标索引和要复制的字符数。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>All indexes are zero-based.</source>
          <target state="translated">所有索引都从零开始。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The following example uses the <ph id="ph1">`CopyTo`</ph> method to copy the characters of the word "Hello" from a string object to the first index position of an array of characters.</source>
          <target state="translated">下面的示例使用 <ph id="ph1">`CopyTo`</ph> 方法将单词“Hello”的字符从字符串对象复制到字符数组的第一个索引位置。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">另请参阅</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Basic string operations<ept id="p1">](basic-string-operations.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>基本字符串操作<ept id="p1">](basic-string-operations.md)</ept></target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Composite formatting<ept id="p1">](composite-format.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>复合格式设置<ept id="p1">](composite-format.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>