<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-47f9650" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">017ee2b6feb87841f31660fe6cb76ccbefd5c83b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\base-types\custom-numeric.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">edc8e1a409fb5b32f2ab5ecba05528f4b0413738</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9f6177e15ce0e26bf509a91d66d188c9e20083da</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Custom numeric format strings</source>
          <target state="translated">自定义数字格式字符串</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Custom numeric format strings</source>
          <target state="translated">自定义数字格式字符串</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Custom numeric format strings</source>
          <target state="translated">自定义数字格式字符串</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You can create a custom numeric format string, which consists of one or more custom numeric specifiers, to define how to format numeric data.</source>
          <target state="translated">你可以创建自定义数字格式字符串，这种字符串由一个或多个自定义数字说明符组成，用于定义设置数值数据格式的方式。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>A custom numeric format string is any format string that is not a <bpt id="p1">[</bpt>standard numeric format string<ept id="p1">](standard-numeric.md)</ept>.</source>
          <target state="translated">自定义数字格式字符串是任何不属于<bpt id="p1">[</bpt>标准数字格式字符串<ept id="p1">](standard-numeric.md)</ept>的格式字符串。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Custom numeric format strings are supported by some overloads of the <ph id="ph1">`ToString`</ph> method of all numeric types.</source>
          <target state="translated">所有数字类型的 <ph id="ph1">`ToString`</ph> 方法的某些重载支持自定义数字格式字符串。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For example, you can supply a numeric format string to the <bpt id="p1">[</bpt>ToString(String)<ept id="p1">](xref:System.Int32.ToString(System.String))</ept> and <bpt id="p2">[</bpt>ToString(String, IFormatProvider)<ept id="p2">](xref:System.Int32.ToString(System.String,System.IFormatProvider))</ept> methods of the <bpt id="p3">[</bpt>Int32<ept id="p3">](xref:System.Int32)</ept> type.</source>
          <target state="translated">例如，可将数字格式字符串提供给 <bpt id="p3">[</bpt>Int32<ept id="p3">](xref:System.Int32)</ept> 类型的 <bpt id="p1">[</bpt>ToString(String)<ept id="p1">](xref:System.Int32.ToString(System.String))</ept> 和 <bpt id="p2">[</bpt>ToString(String, IFormatProvider)<ept id="p2">](xref:System.Int32.ToString(System.String,System.IFormatProvider))</ept> 方法。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Custom numeric format strings are also supported by the .NET Framework <bpt id="p1">[</bpt>composite formatting<ept id="p1">](composite-format.md)</ept> feature, which is used by some <ph id="ph1">`Write`</ph> and <ph id="ph2">`WriteLine`</ph> methods of the <bpt id="p2">[</bpt>Console<ept id="p2">](xref:System.Console)</ept> and <bpt id="p3">[</bpt>StreamWriter<ept id="p3">](xref:System.IO.StreamWriter)</ept> classes, the <bpt id="p4">[</bpt>String.Format<ept id="p4">](xref:System.String.Format(System.IFormatProvider,System.String,System.Object))</ept> method, and the <bpt id="p5">[</bpt>StringBuilder.AppendFormat<ept id="p5">](xref:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object))</ept> method.</source>
          <target state="translated">.NET <bpt id="p1">[</bpt>复合格式化<ept id="p1">](composite-format.md)</ept>功能也支持自定义数字格式字符串，该功能由 <bpt id="p2">[</bpt>Console<ept id="p2">](xref:System.Console)</ept> 和 <bpt id="p3">[</bpt>StreamWriter<ept id="p3">](xref:System.IO.StreamWriter)</ept> 类的某些 <ph id="ph1">`Write`</ph> 和 <ph id="ph2">`WriteLine`</ph> 方法、<bpt id="p4">[</bpt>String.Format<ept id="p4">](xref:System.String.Format(System.IFormatProvider,System.String,System.Object))</ept> 方法以及 <bpt id="p5">[</bpt>StringBuilder.AppendFormat<ept id="p5">](xref:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object))</ept> 方法使用。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The following table describes the custom numeric format specifiers and displays sample output produced by each format specifier.</source>
          <target state="translated">下表描述自定义数字格式说明符并显示由每个格式说明符产生的示例输出。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>See the <bpt id="p1">[</bpt>Notes<ept id="p1">](#notes)</ept> section for additional information about using custom numeric format strings, and the <bpt id="p2">[</bpt>Example<ept id="p2">](#example)</ept> section for a comprehensive illustration of their use.</source>
          <target state="translated">有关使用自定义数字格式字符串的其他信息，请参阅<bpt id="p1">[</bpt>说明<ept id="p1">](#notes)</ept>部分，有关使用方法的完整演示，请参阅<bpt id="p2">[</bpt>示例<ept id="p2">](#example)</ept>部分。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Format specifier</source>
          <target state="translated">格式说明符</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Name</source>
          <target state="translated">名称</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">描述</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">示例</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>"0"</source>
          <target state="translated">“0”</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Zero placeholder</source>
          <target state="translated">零占位符</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Replaces the zero with the corresponding digit if one is present; otherwise, zero appears in the result string.</source>
          <target state="translated">用对应的数字（如果存在）替换零；否则，将在结果字符串中显示零。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`1234.5678 ("00000") -&gt; 01235`</ph>; <ph id="ph2">`0.45678 ("0.00", en-US) -&gt; 0.46`</ph>; <ph id="ph3">`0.45678 ("0.00", fr-FR) -&gt; 0,46`</ph></source>
          <target state="translated"><ph id="ph1">`1234.5678 ("00000") -&gt; 01235`</ph>; <ph id="ph2">`0.45678 ("0.00", en-US) -&gt; 0.46`</ph>; <ph id="ph3">`0.45678 ("0.00", fr-FR) -&gt; 0,46`</ph></target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>"#"</source>
          <target state="translated">"#"</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Digit placeholder</source>
          <target state="translated">数字占位符</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Replaces the "#" symbol with the corresponding digit if one is present; otherwise, no digit appears in the result string.</source>
          <target state="translated">用对应的数字（如果存在）替换“#”符号；否则，不会在结果字符串中显示任何数字。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Note that no digit appears in the result string if the corresponding digit in the input string is a non-significant 0.</source>
          <target state="translated">请注意，如果输入字符串中的相应数字是无意义的 0，则在结果字符串中不会出现任何数字。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For example, 0003 ("####") -&gt; 3.</source>
          <target state="translated">例如，0003 ("####") -&gt; 3。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`1234.5678 ("#####") -&gt; 1235`</ph>; <ph id="ph2">`0.45678 ("#.##", en-US) -&gt; .46`</ph>; <ph id="ph3">`0.45678 ("#.##", fr-FR) -&gt; ,46`</ph></source>
          <target state="translated"><ph id="ph1">`1234.5678 ("#####") -&gt; 1235`</ph>; <ph id="ph2">`0.45678 ("#.##", en-US) -&gt; .46`</ph>; <ph id="ph3">`0.45678 ("#.##", fr-FR) -&gt; ,46`</ph></target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>"."</source>
          <target state="translated">"."</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Decimal point</source>
          <target state="translated">小数点</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Determines the location of the decimal separator in the result string.</source>
          <target state="translated">确定小数点分隔符在结果字符串中的位置。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`0.45678 ("0.00", en-US) -&gt; 0.46`</ph>; <ph id="ph2">`0.45678 ("0.00", fr-FR) -&gt; 0,46`</ph></source>
          <target state="translated"><ph id="ph1">`0.45678 ("0.00", en-US) -&gt; 0.46`</ph>; <ph id="ph2">`0.45678 ("0.00", fr-FR) -&gt; 0,46`</ph></target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>","</source>
          <target state="translated">","</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Group separator and number scaling</source>
          <target state="translated">组分隔符和数字比例换算</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Serves as both a group separator and a number scaling specifier.</source>
          <target state="translated">用作组分隔符和数字比例换算说明符。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>As a group separator, it inserts a localized group separator character between each group.</source>
          <target state="translated">作为组分隔符时，它在各个组之间插入本地化的组分隔符字符。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>As a number scaling specifier, it divides a number by 1000 for each comma specified.</source>
          <target state="translated">作为数字比例换算说明符，对于每个指定的逗号，它将数字除以 1000。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Group separator specifier: <ph id="ph1">`2147483647 ("##,#", en-US) -&gt; 2,147,483,647`</ph>; <ph id="ph2">`2147483647 ("##,#", es-ES) -&gt; 2.147.483.647`</ph>.</source>
          <target state="translated">组分隔符说明符： <ph id="ph1">`2147483647 ("##,#", en-US) -&gt; 2,147,483,647`</ph>; <ph id="ph2">`2147483647 ("##,#", es-ES) -&gt; 2.147.483.647`</ph>。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Scaling specifier: <ph id="ph1">`2147483647 ("#,#,,", en-US) -&gt; 2,147`</ph>; <ph id="ph2">`2147483647 ("#,#,,", es-ES) -&gt; 2.147`</ph></source>
          <target state="translated">比例换算说明符：<ph id="ph1">`2147483647 ("#,#,,", en-US) -&gt; 2,147`</ph>；<ph id="ph2">`2147483647 ("#,#,,", es-ES) -&gt; 2.147`</ph></target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>"%"</source>
          <target state="translated">"%"</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Percentage placeholder</source>
          <target state="translated">百分比占位符</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Multiplies a number by 100 and inserts a localized percentage symbol in the result string.</source>
          <target state="translated">将数字乘以 100，并在结果字符串中插入本地化的百分比符号。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`0.3697 ("%#0.00", en-US) -&gt; %36.97`</ph>; <ph id="ph2">`0.3697 ("%#0.00", el-GR) -&gt; %36,97`</ph>; <ph id="ph3">`0.3697 ("##.0 %", en-US) -&gt; 37.0 %`</ph>; <ph id="ph4">`0.3697 ("##.0 %", el-GR) -&gt; 37,0 %`</ph></source>
          <target state="translated"><ph id="ph1">`0.3697 ("%#0.00", en-US) -&gt; %36.97`</ph>; <ph id="ph2">`0.3697 ("%#0.00", el-GR) -&gt; %36,97`</ph>; <ph id="ph3">`0.3697 ("##.0 %", en-US) -&gt; 37.0 %`</ph>; <ph id="ph4">`0.3697 ("##.0 %", el-GR) -&gt; 37,0 %`</ph></target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>"‰"</source>
          <target state="translated">"‰"</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Per mille placeholder</source>
          <target state="translated">千分比占位符</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Multiplies a number by 1000 and inserts a localized per mille symbol in the result string.</source>
          <target state="translated">将数字乘以 1000，并在结果字符串中插入本地化的千分比符号。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`0.03697 ("#0.00‰", en-US) -&gt; 36.97‰`</ph>; <ph id="ph2">`0.03697 ("#0.00‰", ru-RU) -&gt; 36,97‰`</ph></source>
          <target state="translated"><ph id="ph1">`0.03697 ("#0.00‰", en-US) -&gt; 36.97‰`</ph>; <ph id="ph2">`0.03697 ("#0.00‰", ru-RU) -&gt; 36,97‰`</ph></target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>"E0", "E+0", "E-0", "e0", "e+0", "e-0"</source>
          <target state="translated">"E0"、"E+0"、"E-0"、"e0"、"e+0"、"e-0"</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Exponential notation</source>
          <target state="translated">指数表示法</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>If followed by at least one 0 (zero), formats the result using exponential notation.</source>
          <target state="translated">如果后跟至少一个 0（零），则使用指数表示法设置结果格式。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The case of "E" or "e" indicates the case of the exponent symbol in the result string.</source>
          <target state="translated">“E”或“e”指示指数符号在结果字符串中是大写还是小写。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The number of zeros following the "E" or "e" character determines the minimum number of digits in the exponent.</source>
          <target state="translated">跟在“E”或“e”字符后面的零的数目确定指数中的最小位数。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>A plus sign (+) indicates that a sign character always precedes the exponent.</source>
          <target state="translated">加号 (+) 指示符号字符总是置于指数前面。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>A minus sign (-) indicates that a sign character precedes only negative exponents.</source>
          <target state="translated">减号 (-) 指示符号字符仅置于负指数前面。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`987654 ("#0.0e0") -&gt; 98.8e4`</ph>; <ph id="ph2">`1503.92311 ("0.0##e+00") -&gt; 1.504e+03`</ph>; <ph id="ph3">`1.8901385E-16 ("0.0e+00") -&gt; 1.9e-16`</ph></source>
          <target state="translated"><ph id="ph1">`987654 ("#0.0e0") -&gt; 98.8e4`</ph>; <ph id="ph2">`1503.92311 ("0.0##e+00") -&gt; 1.504e+03`</ph>; <ph id="ph3">`1.8901385E-16 ("0.0e+00") -&gt; 1.9e-16`</ph></target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Escape character</source>
          <target state="translated">转义字符</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Causes the next character to be interpreted as a literal rather than as a custom format specifier.</source>
          <target state="translated">使下一个字符被解释为文本而不是自定义格式说明符。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>'string', "string"</source>
          <target state="translated">'string'、"string"</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Literal string delimiter</source>
          <target state="translated">文本字符串分隔符</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Indicates that the enclosed characters should be copied to the result string unchanged.</source>
          <target state="translated">指示应复制到未更改的结果字符串的封闭字符。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>;</source>
          <target state="translated">;</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Section separator</source>
          <target state="translated">部分分隔符</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Defines sections with separate format strings for positive, negative, and zero numbers.</source>
          <target state="translated">通过分隔格式字符串定义正数、负数和零各部分。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`12.345 ("#0.0#;(#0.0#);-\0-") -&gt; 12.35`</ph>; <ph id="ph2">`0 ("#0.0#;(#0.0#);-\0-") -&gt; -0-`</ph>; <ph id="ph3">`-12.345 ("#0.0#;(#0.0#);-\0-") -&gt; (12.35)`</ph>; <ph id="ph4">`12.345 ("#0.0#;(#0.0#)") -&gt; 12.35`</ph>; <ph id="ph5">`0 ("#0.0#;(#0.0#)") -&gt; 0.0 ; -12.345 ("#0.0#;(#0.0#)") -&gt; (12.35)`</ph></source>
          <target state="translated"><ph id="ph1">`12.345 ("#0.0#;(#0.0#);-\0-") -&gt; 12.35`</ph>; <ph id="ph2">`0 ("#0.0#;(#0.0#);-\0-") -&gt; -0-`</ph>; <ph id="ph3">`-12.345 ("#0.0#;(#0.0#);-\0-") -&gt; (12.35)`</ph>; <ph id="ph4">`12.345 ("#0.0#;(#0.0#)") -&gt; 12.35`</ph>; <ph id="ph5">`0 ("#0.0#;(#0.0#)") -&gt; 0.0 ; -12.345 ("#0.0#;(#0.0#)") -&gt; (12.35)`</ph></target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Other</source>
          <target state="translated">其他</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>All other characters</source>
          <target state="translated">所有其他字符</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The character is copied to the result string unchanged.</source>
          <target state="translated">字符将复制到未更改的结果字符串。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The following sections provide detailed information about each of the custom numeric format specifiers.</source>
          <target state="translated">以下各节提供有关每个自定义数字格式说明符的详细信息。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The "0" Custom Specifier</source>
          <target state="translated">“0”自定义说明符</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The "0" custom format specifier serves as a zero-placeholder symbol.</source>
          <target state="translated">“0”自定义格式说明符用作零占位符符号。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>If the value that is being formatted has a digit in the position where the zero appears in the format string, that digit is copied to the result string; otherwise, a zero appears in the result string.</source>
          <target state="translated">如果要设置格式的值在格式字符串中出现零的位置有一个数字，则将此数字复制到结果字符串中；否则，在结果字符串中显示零。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The position of the leftmost zero before the decimal point and the rightmost zero after the decimal point determines the range of digits that are always present in the result string.</source>
          <target state="translated">小数点前最左边的零的位置和小数点后最右边的零的位置确定总在结果字符串中出现的数字范围。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The "00" specifier causes the value to be rounded to the nearest digit preceding the decimal, where rounding away from zero is always used.</source>
          <target state="translated">“00”说明符使得值被舍入到小数点前最近的数字，其中零位总被舍去。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>For example, formatting 34.5 with "00" would result in the value 35.</source>
          <target state="translated">例如，用“00”格式化 34.5 将得到值 35。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The following example displays several values that are formatted by using custom format strings that include zero placeholders.</source>
          <target state="translated">下面的示例显示几个使用包含零占位符的自定义格式字符串设置格式的值。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The "#" Custom Specifier</source>
          <target state="translated">“#”自定义说明符</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The "#" custom format specifier serves as a digit-placeholder symbol.</source>
          <target state="translated">“#”自定义格式说明符用作数字占位符符号。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>If the value that is being formatted has a digit in the position where the "#" symbol appears in the format string, that digit is copied to the result string.</source>
          <target state="translated">如果设置了格式的值在格式字符串中显示"#"符号的位置有一个数字，则此数字被复制到结果字符串中。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Otherwise, nothing is stored in that position in the result string.</source>
          <target state="translated">否则，结果字符串中的此位置不存储任何值。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Note that this specifier never displays a zero that is not a significant digit, even if zero is the only digit in the string.</source>
          <target state="translated">请注意，如果零不是有效数字，此说明符永不显示零，即使零是字符串中的唯一数字也是如此。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>It will display zero only if it is a significant digit in the number that is being displayed.</source>
          <target state="translated">仅当零是所显示的数字中的有效数字时，才会显示零。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The "##" format string causes the value to be rounded to the nearest digit preceding the decimal, where rounding away from zero is always used.</source>
          <target state="translated">“##”格式字符串使得值被舍入到小数点前最近的数字，其中零总被舍去。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>For example, formatting 34.5 with "##" would result in the value 35.</source>
          <target state="translated">例如，用“##”格式化 34.5 将得到值 35。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The following example displays several values that are formatted by using custom format strings that include digit placeholders.</source>
          <target state="translated">下面的示例显示几个使用包含数字占位符的自定义格式字符串设置格式的值。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>To return a result string in which absent digits or leading zeroes are replaced by spaces, use the <bpt id="p1">[</bpt>composite formatting<ept id="p1">](composite-format.md)</ept> feature and specify a field width, as the following example illustrates.</source>
          <target state="translated">若要返回空缺数字或前导零替换为空格的结果字符串，请使用<bpt id="p1">[</bpt>复合格式功能<ept id="p1">](composite-format.md)</ept>并指定字段宽度，如下面的示例所示。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The "." Custom Specifier</source>
          <target state="translated">“.”自定义说明符</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The "." custom format specifier inserts a localized decimal separator into the result string.</source>
          <target state="translated">"."自定义格式说明符在结果字符串中插入本地化的小数分隔符。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The first period in the format string determines the location of the decimal separator in the formatted value; any additional periods are ignored.</source>
          <target state="translated">格式字符串中的第一个小数点确定设置了格式的值中的小数分隔符的位置；任何其他小数点会被忽略。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The character that is used as the decimal separator in the result string is not always a period; it is determined by the <bpt id="p1">[</bpt>NumberDecimalSeparator<ept id="p1">](xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator)</ept> property of the <bpt id="p2">[</bpt>NumberFormatInfo<ept id="p2">](xref:System.Globalization.NumberFormatInfo)</ept> object that controls formatting.</source>
          <target state="translated">在结果字符串中用作小数分隔符的字符并非总是小数点；它由控制格式设置的 <bpt id="p2">[</bpt>NumberFormatInfo<ept id="p2">](xref:System.Globalization.NumberFormatInfo)</ept> 对象的 <bpt id="p1">[</bpt>NumberDecimalSeparator<ept id="p1">](xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator)</ept> 属性确定。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The following example uses the "." format specifier to define the location of the decimal point in several result strings.</source>
          <target state="translated">下面的示例使用"."格式说明符定义几个结果字符串中的小数点的位置。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The "," Custom Specifier</source>
          <target state="translated">“,”自定义说明符</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The "," character serves as both a group separator and a number scaling specifier.</source>
          <target state="translated">“,”字符用作组分隔符和数字比例换算说明符。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Group separator: If one or more commas are specified between two digit placeholders (0 or #) that format the integral digits of a number, a group separator character is inserted between each number group in the integral part of the output.</source>
          <target state="translated">组分隔符：如果在两个设置数字的整数位格式的数字占位符（0 或 #）之间指定一个或多个逗号，则在输出的整数部分中的每个数字组之间插入一个组分隔符字符。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>NumberGroupSeparator<ept id="p1">](xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator)</ept> and <bpt id="p2">[</bpt>NumberGroupSizes<ept id="p2">](xref:System.Globalization.NumberFormatInfo.NumberGroupSizes)</ept> properties of the current <bpt id="p3">[</bpt>NumberFormatInfo<ept id="p3">](xref:System.Globalization.NumberFormatInfo)</ept> object determine the character used as the number group separator and the size of each number group.</source>
          <target state="translated">当前 <bpt id="p3">[</bpt>NumberFormatInfo<ept id="p3">](xref:System.Globalization.NumberFormatInfo)</ept> 对象的 <bpt id="p1">[</bpt>NumberGroupSeparator<ept id="p1">](xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator)</ept> 和 <bpt id="p2">[</bpt>NumberGroupSizes<ept id="p2">](xref:System.Globalization.NumberFormatInfo.NumberGroupSizes)</ept> 属性将确定用作数字组分隔符的字符以及每个数字组的大小。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>For example, if the string "#,#" and the invariant culture are used to format the number 1000, the output is "1,000".</source>
          <target state="translated">例如，如果使用字符串“#,#”和固定区域性对数字 1000 进行格式化，则输出为“1,000”。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Number scaling specifier: If one or more commas are specified immediately to the left of the explicit or implicit decimal point, the number to be formatted is divided by 1000 for each comma.</source>
          <target state="translated">数字比例换算说明符：如果在紧邻显式或隐式小数点的左侧指定一个或多个逗号，则对于每个逗号，将要设置格式的数字除以 1000。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>For example, if the string "0,," is used to format the number 100 million, the output is "100".</source>
          <target state="translated">例如，如果使用字符串“0,,”对数字 100000000 进行格式化，则输出为“100”。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>You can use group separator and number scaling specifiers in the same format string.</source>
          <target state="translated">可以在同一格式字符串中使用组分隔符和数字比例换算说明符。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>For example, if the string "#,0,," and the invariant culture are used to format the number one billion, the output is "1,000".</source>
          <target state="translated">例如，如果使用字符串“#,0,,”和固定区域性对数字&amp;10000;00000 进行格式化，则输出为“1,000”。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The following example illustrates the use of the comma as a group separator.</source>
          <target state="translated">下面的示例演示如何使用逗号作为组分隔符。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The following example illustrates the use of the comma as a specifier for number scaling.</source>
          <target state="translated">下面的示例演示如何使用逗号作为数字比例换算说明符。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The "%" Custom Specifier</source>
          <target state="translated">“%”自定义说明符</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>A percent sign (%) in a format string causes a number to be multiplied by 100 before it is formatted.</source>
          <target state="translated">格式字符串中的百分号 (%) 将使数字在设置格式之前乘以 100。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The localized percent symbol is inserted in the number at the location where the % appears in the format string.</source>
          <target state="translated">本地化的百分比符号插入到数字在格式字符串中出现 % 的位置。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The percent character used is defined by the <bpt id="p1">[</bpt>PercentSymbol<ept id="p1">](xref:System.Globalization.NumberFormatInfo.PercentSymbol)</ept> property of the current <bpt id="p2">[</bpt>NumberFormatInfo<ept id="p2">](xref:System.Globalization.NumberFormatInfo)</ept> object.</source>
          <target state="translated">使用的百分比字符由当前 <bpt id="p2">[</bpt>NumberFormatInfo<ept id="p2">](xref:System.Globalization.NumberFormatInfo)</ept> 对象的 <bpt id="p1">[</bpt>PercentSymbol<ept id="p1">](xref:System.Globalization.NumberFormatInfo.PercentSymbol)</ept> 属性定义。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The following example defines several custom format strings that include the "%" custom specifier.</source>
          <target state="translated">下面的示例定义几个包含“%”自定义说明符的自定义格式字符串。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The "‰" Custom Specifier</source>
          <target state="translated">“‰”自定义说明符</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>A per mille character (‰ or \u2030) in a format string causes a number to be multiplied by 1000 before it is formatted.</source>
          <target state="translated">格式字符串中的千分比字符（‰ 或 \u2030）将使数字在设置格式之前乘以 1000。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The appropriate per mille symbol is inserted in the returned string at the location where the ‰ symbol appears in the format string.</source>
          <target state="translated">在返回的字符串中，相应的千分比符号插在格式字符串中出现 ‰ 符号的位置。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The per mille character used is defined by the <bpt id="p1">[</bpt>NumberFormatInfo.PerMilleSymbol<ept id="p1">](xref:System.Globalization.NumberFormatInfo.PerMilleSymbol)</ept> property of the object that provides culture-specific formatting information.</source>
          <target state="translated">所用的千分比字符由提供特定于区域性的格式设置信息的对象的 <bpt id="p1">[</bpt>NumberFormatInfo.PerMilleSymbol<ept id="p1">](xref:System.Globalization.NumberFormatInfo.PerMilleSymbol)</ept> 属性定义。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The following example defines a custom format string that includes the "‰" custom specifier.</source>
          <target state="translated">下面的示例定义一个包含“‰”自定义说明符的自定义格式字符串。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The "E" and "e" Custom Specifiers</source>
          <target state="translated">“E”和“e”自定义说明符</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>If any of the strings "E", "E+", "E-", "e", "e+", or "e-" are present in the format string and are followed immediately by at least one zero, the number is formatted by using scientific notation with an "E" or "e" inserted between the number and the exponent.</source>
          <target state="translated">如果“E”、“E+”、“E-”、“e”、“e+”或“e-”中的任何一个字符串出现在格式字符串中，而且后面紧跟至少一个零，则数字用科学记数法来设置格式，在数字和指数之间插入“E”或“e”。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The number of zeros following the scientific notation indicator determines the minimum number of digits to output for the exponent.</source>
          <target state="translated">跟在科学记数法指示符后面的零的数目确定指数输出的最小位数。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The "E+" and "e+" formats indicate that a plus sign or minus sign should always precede the exponent.</source>
          <target state="translated">“E+”和“e+”格式指示加号或减号应总是置于指数前面。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The "E", "E-", "e", or "e-" formats indicate that a sign character should precede only negative exponents.</source>
          <target state="translated">“E”、“E-”、“e”或“e-”格式指示符号字符应仅置于负指数前面。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The following example formats several numeric values using the specifiers for scientific notation.</source>
          <target state="translated">下面的示例使用科学记数法说明符设置几个数值的格式。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The "<ph id="ph1">\"</ph> Escape Character</source>
          <target state="translated">"<ph id="ph1">\"</ph> 转义字符</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The "#", "0", ".", ",", "%", and "‰" symbols in a format string are interpreted as format specifiers rather than as literal characters.</source>
          <target state="translated">格式字符串中的“#”、“0”、“.”、“,”、“%”和“‰”符号被解释为格式说明符而不是文本字符。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Depending on their position in a custom format string, the uppercase and lowercase "E" as well as the + and - symbols may also be interpreted as format specifiers.</source>
          <target state="translated">大写和小写“E”以及 + 和 - 符号也可能被解释为格式说明符，具体取决于它们在自定义格式字符串中的位置。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>To prevent a character from being interpreted as a format specifier, you can precede it with a backslash, which is the escape character.</source>
          <target state="translated">若要防止某个字符被解释为格式说明符，你可以在该字符前面加上反斜杠（即转义字符）。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The escape character signifies that the following character is a character literal that should be included in the result string unchanged.</source>
          <target state="translated">转义字符表示以下字符为应包含在未更改的结果字符串中的字符文本。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>To include a backslash in a result string, you must escape it with another backslash (<ph id="ph1">\\</ph>).</source>
          <target state="translated">若在要结果字符串中包括反斜杠，必须使用另一个反斜杠 (<ph id="ph1">\\</ph>) 对其转义。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Some compilers, such as the C# compiler, may also interpret a single backslash character as an escape character.</source>
          <target state="translated">一些编译器（如 C# 编译器）也可能会将单个反斜杠字符解释为转义字符。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>To ensure that a string is interpreted correctly when formatting, you can use the verbatim string literal character (the @ character) before the string in C#, or add another backslash character before each backslash.</source>
          <target state="translated">若要确保在设置格式时正确解释字符串，在 C# 中，可以在字符串之前使用原义字符串文本字符（@ 字符），或者在每个反斜杠之前另外添加一个反斜杠字符。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The following C# example illustrates both approaches.</source>
          <target state="translated">下面的 C# 示例阐释了这两种方法。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The following example uses the escape character to prevent the formatting operation from interpreting the "#", "0", and "<ph id="ph1">\"</ph> characters as either escape characters or format specifiers.</source>
          <target state="translated">下面的示例使用转义字符，以防止格式设置操作将“#”、“0”和“<ph id="ph1">\"</ph>”字符解释为转义字符或格式说明符。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The example uses an additional backslash to ensure that a backslash is interpreted as a literal character.</source>
          <target state="translated">本示例使用附加的反斜杠以确保将原反斜杠解释为文本字符。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The ";" Section Separator</source>
          <target state="translated">“;”部分分隔符</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The semicolon (;) is a conditional format specifier that applies different formatting to a number depending on whether its value is positive, negative, or zero.</source>
          <target state="translated">分号 (;) 是条件格式说明符，它可以对数字应用不同的格式设置，具体取决于值为正、为负还是为零。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>To produce this behavior, a custom format string can contain up to three sections separated by semicolons.</source>
          <target state="translated">为产生这种行为，自定义格式字符串可以包含最多三个用分号分隔的部分。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>These sections are described in the following table.</source>
          <target state="translated">下表描述了这些部分。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Number of sections</source>
          <target state="translated">部分数目</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">描述</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>One section</source>
          <target state="translated">一个部分</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The format string applies to all values.</source>
          <target state="translated">格式字符串应用于所有值。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Two sections</source>
          <target state="translated">两个部分</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The first section applies to positive values and zeros, and the second section applies to negative values.</source>
          <target state="translated">第一部分应用于正值和零，第二部分应用于负值。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>If the number to be formatted is negative, but becomes zero after rounding according to the format in the second section, the resulting zero is formatted according to the first section.</source>
          <target state="translated">如果要设置格式的数字为负，但根据第二部分中的格式舍入后为零，则最终的零根据第一部分进行格式设置。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Three sections</source>
          <target state="translated">三个部分</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The first section applies to positive values, the second section applies to negative values, and the third section applies to zeros.</source>
          <target state="translated">第一部分应用于正值，第二部分应用于负值，第三部分应用于零。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>The second section can be left empty (by having nothing between the semicolons), in which case the first section applies to all nonzero values.</source>
          <target state="translated">第二部分可以留空（分号间没有任何内容），在这种情况下，第一部分应用于所有非零值。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>If the number to be formatted is nonzero, but becomes zero after rounding according to the format in the first or second section, the resulting zero is formatted according to the third section.</source>
          <target state="translated">如果要设置格式的数字为非零值，但根据第一部分或第二部分中的格式舍入后为零，则最终的零根据第三部分进行格式设置。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Section separators ignore any preexisting formatting associated with a number when the final value is formatted.</source>
          <target state="translated">格式化最终值时，部分分隔符忽略所有先前存在的与数字关联的格式设置。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>For example, negative values are always displayed without a minus sign when section separators are used.</source>
          <target state="translated">例如，使用部分分隔符时，显示的负值永远不带负号。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>If you want the final formatted value to have a minus sign, you should explicitly include the minus sign as part of the custom format specifier.</source>
          <target state="translated">如果你希望格式化后的最终值带有负号，则应明确包含负号，让它作为自定义格式说明符的组成部分。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The following example uses the ";" format specifier to format positive, negative, and zero numbers differently.</source>
          <target state="translated">下面的示例使用“;”格式说明符来分别设置正数、负数和零的格式。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Notes</source>
          <target state="translated">备注</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Floating-Point Infinities and NaN</source>
          <target state="translated">浮点型无穷大和 NaN</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Regardless of the format string, if the value of a <bpt id="p1">[</bpt>Single<ept id="p1">](xref:System.Single)</ept> or <bpt id="p2">[</bpt>Double<ept id="p2">](xref:System.Double)</ept> floating-point type is positive infinity, negative infinity, or not a number (NaN), the formatted string is the value of the respective <bpt id="p3">[</bpt>PositiveInfinitySymbol<ept id="p3">](xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol)</ept>, <bpt id="p4">[</bpt>NegativeInfinitySymbol<ept id="p4">](xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol)</ept>, or <bpt id="p5">[</bpt>NaNSymbol<ept id="p5">](xref:System.Globalization.NumberFormatInfo.NaNSymbol)</ept> property that is specified by the currently applicable <bpt id="p6">[</bpt>NumberFormatInfo<ept id="p6">](xref:System.Globalization.NumberFormatInfo)</ept> object.</source>
          <target state="translated">无论格式字符串原来是什么值，只要 <bpt id="p1">[</bpt>Single<ept id="p1">](xref:System.Single)</ept> 或 <bpt id="p2">[</bpt>Double<ept id="p2">](xref:System.Double)</ept> 浮点类型的值为正无穷大、负无穷大或非数值 (NaN)，格式字符串就分别是当前适用的 <bpt id="p6">[</bpt>NumberFormatInfo<ept id="p6">](xref:System.Globalization.NumberFormatInfo)</ept> 对象指定的 <bpt id="p3">[</bpt>PositiveInfinitySymbol<ept id="p3">](xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol)</ept>、<bpt id="p4">[</bpt>NegativeInfinitySymbol<ept id="p4">](xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol)</ept> 或 <bpt id="p5">[</bpt>NaNSymbol<ept id="p5">](xref:System.Globalization.NumberFormatInfo.NaNSymbol)</ept> 属性的值。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Rounding and Fixed-Point Format Strings</source>
          <target state="translated">舍入和定点格式字符串</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>For fixed-point format strings (that is, format strings that do not contain scientific notation format characters), numbers are rounded to as many decimal places as there are digit placeholders to the right of the decimal point.</source>
          <target state="translated">对于固定点格式字符串（即不包含科学记数法格式字符的格式字符串），数字被舍入为与小数点右边的数字占位符数目相同的小数位数。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>If the format string does not contain a decimal point, the number is rounded to the nearest integer.</source>
          <target state="translated">如果格式字符串不包含小数点，数字被舍入为最接近的整数。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>If the number has more digits than there are digit placeholders to the left of the decimal point, the extra digits are copied to the result string immediately before the first digit placeholder.</source>
          <target state="translated">如果数字位数多于小数点左边数字占位符的个数，多余的数字被复制到结果字符串中紧挨着第一个数字占位符的前面。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">示例</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The following example demonstrates two custom numeric format strings.</source>
          <target state="translated">下面的示例演示两个自定义数字格式字符串。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>In both cases, the digit placeholder (#) displays the numeric data, and all other characters are copied to the result string.</source>
          <target state="translated">在这两个示例中，数字占位符 (#) 显示数值数据，且所有其他字符被复制到结果字符串。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">另请参阅</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.Globalization.NumberFormatInfo<ept id="p1">](xref:System.Globalization.NumberFormatInfo)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>System.Globalization.NumberFormatInfo<ept id="p1">](xref:System.Globalization.NumberFormatInfo)</ept></target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Formatting types<ept id="p1">](formatting-types.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>格式设置类型<ept id="p1">](formatting-types.md)</ept></target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Standard numeric format strings<ept id="p1">](standard-numeric.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>标准数字格式字符串<ept id="p1">](standard-numeric.md)</ept></target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: pad a number with leading zeros<ept id="p1">](pad-number.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>如何：用前导零填充数字<ept id="p1">](pad-number.md)</ept></target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Composite formatting<ept id="p1">](composite-format.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>复合格式设置<ept id="p1">](composite-format.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>