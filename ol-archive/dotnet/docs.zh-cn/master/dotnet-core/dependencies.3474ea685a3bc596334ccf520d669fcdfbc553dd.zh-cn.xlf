<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-f0362aa" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cef45d986eb9c4a84a03ee942c29a327c23cabf3</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\preview3\tools\dependencies.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">44e819cc8e6c8f456b5d49afcbc312aeb0996e5a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">19c02b54e780dce912e321d93502f5fe1c1899a8</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Managing dependencies in .NET Core tooling | Microsoft Docs</source>
          <target state="translated">在 .NET Core 工具中管理依赖项 | Microsoft 文档</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Explains how to manage your dependencies with the .NET Core tools.</source>
          <target state="translated">介绍如何使用 .NET Core 工具管理依赖项。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>CLI, extensibility, custom commands, .NET Core</source>
          <target state="translated">CLI, 扩展性, 自定义命令, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Managing dependencies in .NET Core RC4 tooling</source>
          <target state="translated">在 .NET Core RC4 工具中管理依赖项</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>With the move of .NET Core projects from project.json to csproj and MSBuild, a significant investment also happened that resulted in unification of the project file and assets that allow tracking of depenencies.</source>
          <target state="translated">在 .NET Core 项目从 project.json 移动到 csproj 和 MSBuild 的同时，还投入了大笔资金将项目文件和资产统一，以便跟踪依赖项。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For .NET Core projects this is similar to what project.json did.</source>
          <target state="translated">对于 .NET Core 项目，这与 project.json 的做法类似。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>There is no separate JSON or XML file that tracks NuGet dependencies.</source>
          <target state="translated">没有单独的 JSON 或 XML 文件来跟踪 NuGet 依赖项。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>With this change, we've also introduced another type of <bpt id="p1">*</bpt>reference<ept id="p1">*</ept> into the csproj syntax called the <ph id="ph1">`&lt;PackageReference&gt;`</ph>.</source>
          <target state="translated">通过这种改变，我们还在名为 <ph id="ph1">`&lt;PackageReference&gt;`</ph> 的 csproj 语法中引入了另一种类型的引用。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This document describes the new reference type.</source>
          <target state="translated">本文档介绍了新的引用类型。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>It also shows how to add a package dependency using this new reference type to your project.</source>
          <target state="translated">它还演示了如何使用此新引用类型将包依赖项添加到项目。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The new <ph id="ph1">&lt;PackageReference&gt;</ph> element</source>
          <target state="translated">新的 <ph id="ph1">&lt;PackageReference&gt;</ph> 元素</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`&lt;PackageReference&gt;`</ph> has the following basic structure:</source>
          <target state="translated"><ph id="ph1">`&lt;PackageReference&gt;`</ph> 具有下列基本结构：</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If you are familiar with MSBuild, it will look familiar to the other reference types that already exist.</source>
          <target state="translated">如果你熟悉 MSBuild，则它看起来和已有的引用类型很相似。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The key is the <ph id="ph1">`Include`</ph> statement which specifies the package id that you wish to add to the project.</source>
          <target state="translated">关键是 <ph id="ph1">`Include`</ph> 语句，它指定要添加到项目的包 ID。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`&lt;Version&gt;`</ph> child element specifies the version to get.</source>
          <target state="translated"><ph id="ph1">`&lt;Version&gt;`</ph> 子元素指定要获取的版本。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The versions are specified as per <bpt id="p1">[</bpt>NuGet version rules<ept id="p1">](https://docs.microsoft.com/nuget/create-packages/dependency-versions#version-ranges)</ept>.</source>
          <target state="translated">根据 <bpt id="p1">[</bpt>NuGet 版本规则<ept id="p1">](https://docs.microsoft.com/nuget/create-packages/dependency-versions#version-ranges)</ept>指定版本。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If you are not familiar with the overall <ph id="ph1">`csproj`</ph> syntax, see the <bpt id="p1">[</bpt>MSBuild project reference<ept id="p1">](https://docs.microsoft.com/visualstudio/msbuild/msbuild-project-file-schema-reference)</ept> documentation for more information.</source>
          <target state="translated">如果不熟悉整体 <ph id="ph1">`csproj`</ph> 语法，可参阅 <bpt id="p1">[</bpt>MSBuild 项目参考<ept id="p1">](https://docs.microsoft.com/visualstudio/msbuild/msbuild-project-file-schema-reference)</ept>文档了解详细信息。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Adding a dependency that is available only in a specific target is done using conditions like in the following example:</source>
          <target state="translated">使用类似以下示例中的条件添加仅在特定目标中可用的依赖项：</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The above means that the dependency will only be valid if the build is happening for that given target.</source>
          <target state="translated">上面的意思是，依赖项只有在对给定目标生成时才有效。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`$(TargetFramework)`</ph> in the condition is a MSBuild property that is being set in the project.</source>
          <target state="translated">条件中的 <ph id="ph1">`$(TargetFramework)`</ph> 是将在项目中设置的 MSBuild 属性。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For most common .NET Core applications, you will not need to do this.</source>
          <target state="translated">对于大多数常见的 .NET Core 应用程序，无需这样做。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Adding a dependency to your project</source>
          <target state="translated">向项目添加依赖项</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Adding a dependency to your project is straightforward.</source>
          <target state="translated">向项目添加依赖项非常简单。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Here is an example of how to add Json.NET version <ph id="ph1">`9.0.1`</ph> to your project.</source>
          <target state="translated">下面是如何向项目添加 Json.NET 版本 <ph id="ph1">`9.0.1`</ph> 的示例。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Of course, it is applicable to any other NuGet dependency.</source>
          <target state="translated">当然，它也适用于其他任意 NuGet 依赖项。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>When you open your project file, you will see two or more <ph id="ph1">`&lt;ItemGroup&gt;`</ph> nodes.</source>
          <target state="translated">打开项目文件时，将看到两个或多个 <ph id="ph1">`&lt;ItemGroup&gt;`</ph> 节点。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>You will notice that one of the nodes already has <ph id="ph1">`&lt;PackageReference&gt;`</ph> elements in it.</source>
          <target state="translated">你会注意到其中一个节点已有 <ph id="ph1">`&lt;PackageReference&gt;`</ph> 元素。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You can add your new dependency to this node, or create a new one; it is completely up to you as the result will be the same.</source>
          <target state="translated">可以向此节点添加新的依赖项，或创建一个新的依赖项；这完全取决于你，因为其结果将是一样的。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In this example we will use the default template that is dropped by <ph id="ph1">`dotnet new`</ph>.</source>
          <target state="translated">在本示例中，将使用被 <ph id="ph1">`dotnet new`</ph> 删除的默认模板。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This is a simple console application.</source>
          <target state="translated">这是一个简单的控制台应用程序。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>When we open up the project, we first find the <ph id="ph1">`&lt;ItemGroup&gt;`</ph> with already existing <ph id="ph2">`&lt;PackageReference&gt;`</ph> in it.</source>
          <target state="translated">打开项目时，首先找到 <ph id="ph1">`&lt;ItemGroup&gt;`</ph>，其中包含已存在的 <ph id="ph2">`&lt;PackageReference&gt;`</ph>。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>We then add the following to it:</source>
          <target state="translated">然后将下列内容添加进去：</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>After this, we save the project and run the <ph id="ph1">`dotnet restore`</ph> command to install the dependency.</source>
          <target state="translated">之后，保存项目并运行 <ph id="ph1">`dotnet restore`</ph> 命令以安装依赖项。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The full project looks like this:</source>
          <target state="translated">完整项目如下所示：</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Removing a dependency from the project</source>
          <target state="translated">从项目中删除依赖项</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Removing a dependency from the project file involves simply removing the <ph id="ph1">`&lt;PackageReference&gt;`</ph> from the project file.</source>
          <target state="translated">从项目文件中删除依赖项仅包含从项目文件中删除 <ph id="ph1">`&lt;PackageReference&gt;`</ph>。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>
