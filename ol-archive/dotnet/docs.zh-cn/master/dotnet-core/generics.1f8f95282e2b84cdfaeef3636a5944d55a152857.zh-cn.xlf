<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-47f9650" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9827f9f37ce198b23bfd4e5fbca41cd86d5885a4</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\generics.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">871b5996904650ac7acaf2a1327f2a39905f68c8</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1d28dd0577194dcbfe32efffe44899f9c319f2c5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Generic Types (Generics) Overview</source>
          <target state="translated">泛型类型（泛型）概述</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Generic Types (Generics) Overview</source>
          <target state="translated">泛型类型（泛型）概述</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Generic Types (Generics) Overview</source>
          <target state="translated">泛型类型（泛型）概述</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>We use generics all the time in C#, whether implicitly or explicitly.</source>
          <target state="translated">在 C# 中，我们随时会使用泛型，有时隐式使用，有时显式使用。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>When you use LINQ in C#, did you ever notice that you are working with IEnumerable<ph id="ph1">&lt;T&gt;</ph>?</source>
          <target state="translated">在 C# 中使用 LINQ 时，你是否曾经注意到，使用的正是 IEnumerable<ph id="ph1">&lt;T&gt;</ph>？</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Or if you ever saw an online sample of a “generic repository” for talking to databases using Entity Framework, did you see that most methods return IQueryable<ph id="ph1">&lt;T&gt;</ph>?</source>
          <target state="translated">或者，你是否曾经看到过有关使用实体框架来与数据库通信的“泛型存储库”在线示例，其中的大多数方法返回 IQueryable<ph id="ph1">&lt;T&gt;</ph>？</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You may have wondered what the <bpt id="p1">**</bpt>T<ept id="p1">**</ept> is in these examples and why is it in there?</source>
          <target state="translated">你可能很想知道，这些示例中的 <bpt id="p1">**</bpt>T<ept id="p1">**</ept> 是什么意思，为什么要使用它？</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>First introduced to the .NET Framework 2.0, generics involved changes to both the C# language and the Common Language Runtime (CLR).</source>
          <target state="translated">泛型最初在 .NET Framework 2.0 中引入，涉及到对 C# 语言和公共语言运行时 (CLR) 的更改。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Generics<ept id="p1">**</ept> are essentially a “code template” that allows developers to define <bpt id="p2">[</bpt>type-safe<ept id="p2">](https://msdn.microsoft.com/library/hbzz1a9a.aspx)</ept> data structures without committing to an actual data type.</source>
          <target state="translated"><bpt id="p1">**</bpt>泛型<ept id="p1">**</ept>本质上是一个“代码模板”，可让开发人员定义<bpt id="p2">[</bpt>类型安全<ept id="p2">](https://msdn.microsoft.com/library/hbzz1a9a.aspx)</ept>数据结构，无需处理实际数据类型。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`List&lt;T&gt;`</ph> is a <bpt id="p1">[</bpt>Generic Collection<ept id="p1">](https://msdn.microsoft.com/library/System.Collections.Generic.aspx)</ept> that can be declared and used with any type: <ph id="ph2">`List&lt;int&gt;`</ph>, <ph id="ph3">`List&lt;string&gt;`</ph>, <ph id="ph4">`List&lt;Person&gt;`</ph>, etc.</source>
          <target state="translated">例如，<ph id="ph1">`List&lt;T&gt;`</ph> 是一个可以声明的<bpt id="p1">[</bpt>泛型集合<ept id="p1">](https://msdn.microsoft.com/library/System.Collections.Generic.aspx)</ept>，可与 <ph id="ph2">`List&lt;int&gt;`</ph>、<ph id="ph3">`List&lt;string&gt;`</ph>、<ph id="ph4">`List&lt;Person&gt;`</ph> 等任何类型结合使用。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>So, what’s the point?</source>
          <target state="translated">那么，泛型到底是什么？</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Why are generics useful?</source>
          <target state="translated">它又有什么作用？</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In order to understand this, we need to take a look at a specific class before and after adding generics.</source>
          <target state="translated">为方便理解，让我们看看添加泛型之前和之后的某个特定类。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Let’s look at the <ph id="ph1">`ArrayList`</ph>.</source>
          <target state="translated">先看一下 <ph id="ph1">`ArrayList`</ph>。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In C# 1.0, the <ph id="ph1">`ArrayList`</ph> elements were of type <ph id="ph2">`object`</ph>.</source>
          <target state="translated">在 C# 1.0 中，<ph id="ph1">`ArrayList`</ph> 元素的类型为 <ph id="ph2">`object`</ph>。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This meant that any element that was added was silently converted into an <ph id="ph1">`object`</ph>; same thing happens on reading the elements from the list (this process is known as <bpt id="p1">[</bpt>boxing<ept id="p1">](https://msdn.microsoft.com/library/yz2be5wk.aspx)</ept> and unboxing respectively).</source>
          <target state="translated">这意味着，添加的任何元素都将以静默方式转换为 <ph id="ph1">`object`</ph>；从列表中读取元素时也会发生相同的情况（此过程分别称为<bpt id="p1">[</bpt>装箱<ept id="p1">](https://msdn.microsoft.com/library/yz2be5wk.aspx)</ept>和取消装箱）。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Boxing and unboxing have an impact of performance.</source>
          <target state="translated">装箱和取消装箱会给性能造成影响。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>More than that, however, there is no way to tell at compile time what is the actual type of the data in the list.</source>
          <target state="translated">不仅如此，在编译时无法知道列表中的实际数据类型是什么。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This makes for some fragile code.</source>
          <target state="translated">这就使得某些代码不太可靠。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Generics solve this problem by providing additional information the type of data each instance of list will contain.</source>
          <target state="translated">泛型解决了此问题，它可以提供有关每个列表实例将要包含的数据类型的附加信息。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Put simply, you can only add integers to <ph id="ph1">`List&lt;int&gt;`</ph> and only add Persons to <ph id="ph2">`List&lt;Person&gt;`</ph>, etc.</source>
          <target state="translated">简单而言，只能将整数添加到 <ph id="ph1">`List&lt;int&gt;`</ph>，只能将人员添加到 <ph id="ph2">`List&lt;Person&gt;`</ph>，等等。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Generics are also available at runtime, or <bpt id="p1">**</bpt>reified<ept id="p1">**</ept>.</source>
          <target state="translated">泛型还可以在运行时使用，称为<bpt id="p1">**</bpt>具体化<ept id="p1">**</ept>。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This means the runtime knows what type of data structure you are using and can store it in memory more efficiently.</source>
          <target state="translated">这意味着，运行时知道你要使用的数据结构类型，并可以更高效地将数据结构存储在内存中。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Here is a small program that illustrates the efficiency of knowing the data structure type at runtime:</source>
          <target state="translated">下面这个小程序演示了在运行时如何有效地了解数据结构类型：</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This program yields the following output:</source>
          <target state="translated">此程序生成以下输出：</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The first thing you notice here is that sorting the generic list is significantly faster than for the non-generic list.</source>
          <target state="translated">在此处可以看到的第一个优点是，泛型列表的排序比非泛型列表要快得多。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You might also notice that the type for the generic list is distinct ([System.Int32]) whereas the type for the non-generic list is generalized.</source>
          <target state="translated">还可以看到，泛型列表的类型是不同的 ([System.Int32])，而非泛型列表的类型已通用化。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Because the runtime knows the generic <ph id="ph1">`List&lt;int&gt;`</ph> is of type int, it can store the list elements in an underlying integer array in memory while the non-generic <ph id="ph2">`ArrayList`</ph> has to cast each list element as an object as stored in an object array in memory.</source>
          <target state="translated">由于运行时知道泛型 <ph id="ph1">`List&lt;int&gt;`</ph> 的类型是 int，因此可以将列表元素存储在内存中的基础整数数组内；而非泛型 <ph id="ph2">`ArrayList`</ph> 必须将每个列表元素强制转换为对象并将其存储在内存中的对象数组内。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>As shown through this example, the extra castings take up time and slow down the list sort.</source>
          <target state="translated">如本示例中所示，多余的强制转换会占用时间，降低列表排序的速度。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The last useful thing about the runtime knowing the type of your generic is a better debugging experience.</source>
          <target state="translated">运行时知道泛型类型的最后一个优点是可以改善调试体验。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>When you are debugging a generic in C#, you know what type each element is in your data structure.</source>
          <target state="translated">在 C# 中调试泛型时，可以知道数据结构中每个元素的类型。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Without generics, you would have no idea what type each element was.</source>
          <target state="translated">如果不使用泛型，则无从知道每个元素的类型是什么。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Further reading and resources</source>
          <target state="translated">其他阅读材料和资源</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>An Introduction to C# Generics<ept id="p1">](https://msdn.microsoft.com/library/ms379564.aspx)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>C# 泛型简介<ept id="p1">](https://msdn.microsoft.com/library/ms379564.aspx)</ept></target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide - Generics<ept id="p1">](https://msdn.microsoft.com/library/512aeb7t.aspx)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>C# 编程指南 - 泛型<ept id="p1">](https://msdn.microsoft.com/library/512aeb7t.aspx)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>