<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-188fee3" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4646a7e8c75315bb1a13bc5fddecd77888f6ae69</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\garbagecollection\index.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c31895eb739a07eca459ee17e73e007e0b8b60f1</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0de90e11c1682329a1938222cf9ff14e32a3742a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Garbage Collection</source>
          <target state="translated">垃圾回收</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Garbage Collection</source>
          <target state="translated">垃圾回收</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET、.NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Garbage collection</source>
          <target state="translated">垃圾回收</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Garbage collection is one of most important features of the .NET managed code platform.</source>
          <target state="translated">垃圾回收功能是 .NET 托管代码平台最重要的功能之一。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The garbage collector (GC) manages allocating and releasing memory for you.</source>
          <target state="translated">垃圾回收器 (GC) 负责分配和释放内存。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You do not need to how to allocate and release memory or manage the lifetime of the objects that use that memory.</source>
          <target state="translated">无需了解如何分配和释放内存，也无需管理使用该内存的对象的生命周期。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>An allocation is made any time you <bpt id="p1">_</bpt>new<ept id="p1">_</ept> an object or a value type is boxed.</source>
          <target state="translated">新建对象或对值类型进行装箱时，即生成分配。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Allocations are typically very fast.</source>
          <target state="translated">分配通常非常迅速。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>When there isn’t enough memory to allocate an object, the GC must collect and dispose of garbage memory to make memory available for new allocations.</source>
          <target state="translated">当没有足够内存来分配对象时，GC 必须收集并释放垃圾内存，使得新分配能够使用内存。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This process is called “garbage collection”.</source>
          <target state="translated">此过程称为“垃圾回收”。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The garbage collector serves as an automatic memory manager.</source>
          <target state="translated">垃圾回收器用作自动内存管理器。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>It provides the following benefits:</source>
          <target state="translated">它提供如下优点：</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Enables you to develop your application without having to free memory.</source>
          <target state="translated">使你可以在开发应用程序时不必释放内存。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Allocates objects on the managed heap efficiently.</source>
          <target state="translated">有效分配托管堆上的对象。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Reclaims objects that are no longer being used, clears their memory, and keeps the memory available for future allocations.</source>
          <target state="translated">回收不再使用的对象，清除它们的内存，并保留内存以用于将来分配。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Managed objects automatically get clean content to start with, so their constructors do not have to initialize every data field.</source>
          <target state="translated">托管对象会自动获取干净的内容来开始，因此，它们的构造函数不必对每个数据字段进行初始化。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Provides memory safety by making sure that an object cannot use the content of another object.</source>
          <target state="translated">通过确保对象不能使用另一个对象的内容来提供内存安全。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The .NET GC is generational and has 3 generations.</source>
          <target state="translated">.NET GC 分为 3 代。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Each generation has its own heap that it uses for storage of allocated objects.</source>
          <target state="translated">每一代各有其用于存储所分配对象的堆。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>There is a basic principle that most objects are either short lived or long lived.</source>
          <target state="translated">基本原则是，大多数对象不是短期存在就是长期存在的。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Generation 0 is where objects are first allocated.</source>
          <target state="translated">首先在第 0 代分配对象。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Objects often don’t live past the first generation, since they are no longer in use (out of scope) by the time the next garbage collection occurs.</source>
          <target state="translated">对象存在的时间通常不超过第 1 代，因为下一次垃圾回收时已不再使用这些对象（超出使用范围）。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Generation 0 is quick to collect because its associated heap is small.</source>
          <target state="translated">第 0 代回收垃圾速度很快，因为与其关联的堆很小。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Generation 1 is really a second chance space.</source>
          <target state="translated">第 1 代实际上是第二次机会空间。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Objects that are short lived but survive the generation 0 collection (often based on coincidental timing) go to generation 1<ph id="ph1">\.</ph> Generation 1 collections are also quick because its associated heap is also small.</source>
          <target state="translated">短期存在而（通常由于时机巧合）被第 0 代回收保留的对象进入第 1 代<ph id="ph1">\.</ph>。第 1 代回收的速度也很快，因为与其关联的堆也很小。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The first two heaps remain small because objects are either collected or are promoted to the next generation heap.</source>
          <target state="translated">前两个对较小是因为它们只收集对象会或将对象提升到下一代的堆。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Generation 2 is where all long lived objects are.</source>
          <target state="translated">所有长期存在的对象都处于第 2 代。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The generation 2 heap can grow to be very large, since the objects it contains can survive a long time and there is no generation 3 heap to further promote objects.</source>
          <target state="translated">第 2 代的堆可以变得非常庞大，因为它包含的对象可能在很长时间内存在，并且不存在第 3 代堆来进一步提升对象。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The GC has an additional heap for large objects called the Large Object Heap (LOH).</source>
          <target state="translated">GC 具有用于大型对象的附加堆，称为大型对象堆 (LOH)。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>It is reserved for objects that are 85,000 bytes or greater.</source>
          <target state="translated">该堆保留用于收集 85,000 字节或更大的对象。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>A byte array (Byte[]) with 85k elements would be an example of a large object.</source>
          <target state="translated">含有 85,000 个元素的字节数组 (Byte[]) 是大型对象的一个示例。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Large objects are not allocated to the generational heaps but are allocated directly to the LOH.</source>
          <target state="translated">大型对象不会分配到各代的堆，而是直接分配到 LOH。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Generation 2 and LOH collections can take noticeable time for programs that have run for a long time or operate over large amounts of data.</source>
          <target state="translated">对于运行了较长时间或对大量数据进行操作的程序，第 2 代和 LOH 回收可能花费较长时间。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Large server programs are known to have heaps in the 10s of GBs.</source>
          <target state="translated">已知大型服务器程序拥有数十 GB 的堆。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The GC employs a variety of techniques to reduce the amount of time that it blocks program execution.</source>
          <target state="translated">GC 会运用各种技术，缩短其阻止程序运行的时间。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The primary approach is to do as much garbage collection work as possible on a background thread in a way that does not interfere with program execution.</source>
          <target state="translated">主要方法是通过后台线程，以不干扰程序执行的方式进行尽可能多的垃圾回收工作。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The GC also exposes a few ways for developers to influence its behavior, which can be quite useful to improve performance.</source>
          <target state="translated">GC 向开发人员提供了几种可影响其行为的方法，对于提高性能十分有用。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Related Topics</source>
          <target state="translated">相关主题</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Title</source>
          <target state="translated">标题</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">描述</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Automatic memory management and garbage collection<ept id="p1">](gc.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>自动内存管理和垃圾回收<ept id="p1">](gc.md)</ept></target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Introduces the basic concepts of memory management in .NET</source>
          <target state="translated">介绍 .NET 中内存管理的基本概念</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Fundamentals of garbage collection<ept id="p1">](fundamentals.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>垃圾回收的基本知识<ept id="p1">](fundamentals.md)</ept></target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Describes how garbage collection works, how objects are allocated on the managed heap, and other core concepts.</source>
          <target state="translated">描述垃圾回收的工作原理、如何在托管堆上分配对象，以及其他核心概念。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Induced collections<ept id="p1">](induced.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>已引发回收<ept id="p1">](induced.md)</ept></target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Describes how to make a garbage collection occur.</source>
          <target state="translated">描述如何完成垃圾回收。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Latency modes<ept id="p1">](latency.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>延迟模式<ept id="p1">](latency.md)</ept></target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Describes the modes that determine the intrusiveness of garbage collection.</source>
          <target state="translated">描述确定垃圾回收侵入性的模式。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Weak references<ept id="p1">](weak-references.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>弱引用<ept id="p1">](weak-references.md)</ept></target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Describes features that permit the garbage collector to collect an object while still allowing the application to access that object.</source>
          <target state="translated">描述允许应用程序访问对象的同时也允许垃圾回收器收集相应对象的功能。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Reference</source>
          <target state="translated">参考</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.GC<ept id="p1">](xref:System.GC)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>System.GC<ept id="p1">](xref:System.GC)</ept></target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.GCCollectionMode<ept id="p1">](xref:System.GCCollectionMode)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>System.GCCollectionMode<ept id="p1">](xref:System.GCCollectionMode)</ept></target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.Runtime.GCLatencyMode<ept id="p1">](xref:System.Runtime.GCLatencyMode)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>System.Runtime.GCLatencyMode<ept id="p1">](xref:System.Runtime.GCLatencyMode)</ept></target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.Runtime.GCSettings<ept id="p1">](xref:System.Runtime.GCSettings)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>System.Runtime.GCSettings<ept id="p1">](xref:System.Runtime.GCSettings)</ept></target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>GCSettings.LargeObjectHeapCompactionMode<ept id="p1">](xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>GCSettings.LargeObjectHeapCompactionMode<ept id="p1">](xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode)</ept></target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Object.Finalize<ept id="p1">](xref:System.Object.Finalize)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Object.Finalize<ept id="p1">](xref:System.Object.Finalize)</ept></target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.IDisposable<ept id="p1">](xref:System.IDisposable)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>System.IDisposable<ept id="p1">](xref:System.IDisposable)</ept></target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">另请参阅</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Cleaning up unmanaged resources<ept id="p1">](unmanaged.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>清理未托管资源<ept id="p1">](unmanaged.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>
