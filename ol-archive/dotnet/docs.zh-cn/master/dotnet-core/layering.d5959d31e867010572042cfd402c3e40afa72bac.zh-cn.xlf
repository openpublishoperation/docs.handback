<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-f0362aa" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">305d046c698ca9f7ebb5ac56387cfef00145393e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\preview3\tools\layering.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">82d8d7f230ca69b496d3d3ea0e1bd7f81395ae6d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1d4fe1b39ca865269209218de945f037cf090095</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>.NET Core Command Line Tools RC4 Architecture | Microsoft Docs</source>
          <target state="translated">.NET Core 命令行工具 RC4 体系结构 | Microsoft 文档</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>RC4 brings about certain changes to the way the overall .NET Core tools are layered.</source>
          <target state="translated">RC4 对整体 .NET Core 工具的分层方式进行了一些更改。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>CLI, extensibility, custom commands, .NET Core</source>
          <target state="translated">CLI, 扩展性, 自定义命令, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>High-level overview of changes in CLI RC4</source>
          <target state="translated">CLI RC4 变更的简要概述</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This document will describe in high-level the changes that moving from <ph id="ph1">`project.json`</ph> to MSBuild and <ph id="ph2">`csproj`</ph> project system bring.</source>
          <target state="translated">本文档详细介绍了从 <ph id="ph1">`project.json`</ph> 移动到 MSBuild 和 <ph id="ph2">`csproj`</ph> 项目系统带来的更改。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>It will outline the new way the tooling is layered all-up and which new pieces are available and what is their place in the overall picture.</source>
          <target state="translated">本文将概括介绍工具分层的新方式、提供了哪些新的部分以及新部分在整体结构中的位置。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>After reading this article, you should have a better understanding of all of the pieces that make up .NET Core tooling after moving to MSBuild and <ph id="ph1">`csproj`</ph>.</source>
          <target state="translated">阅读本文后，应该更深入地了解移动到 MSBuild 和 <ph id="ph1">`csproj`</ph> 后所有构成 .NET Core 工具的所有部分。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Moving away from project.json</source>
          <target state="translated">弃用 project.json</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The biggest change in the RC4 tooling for .NET Core is certainly the <bpt id="p1">[</bpt>move away from project.json to csproj<ept id="p1">](https://blogs.msdn.microsoft.com/dotnet/2016/05/23/changes-to-project-json/)</ept> as the project system.</source>
          <target state="translated">.NET Core RC4 工具的最大变更无疑是<bpt id="p1">[</bpt>弃用 project.json，改用 csproj<ept id="p1">](https://blogs.msdn.microsoft.com/dotnet/2016/05/23/changes-to-project-json/)</ept> 作为项目系统。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>RC4version of the command line tools is the first release of .NET Core command line tooling that does not contain any support for project.json.</source>
          <target state="translated">RC4 版本的命令行工具是首版不支持 project.json 的 .NET Core 命令行工具。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>That means that it cannot be used to build, run or publish project.json based applications and libraries.</source>
          <target state="translated">这意味着它不能用于生成、运行或发布基于 project.json 的应用程序和库。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In order to use this version of the tools, you will need to migrate your existing projects or start new ones.</source>
          <target state="translated">若要使用此版本的工具，需要迁移现有项目或启动新的项目。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>As part of this move, the custom build engine that was developed to build project.json projects was replaced with a mature and fully capable build engine called <bpt id="p1">[</bpt>MSBuild<ept id="p1">](https://github.com/Microsoft/msbuild)</ept>.</source>
          <target state="translated">作为此次移动的一部分，开发用于生成 project.json 项目的自定义生成引擎被替换为一个功能完整的成熟生成引擎，即 <bpt id="p1">[</bpt>MSBuild<ept id="p1">](https://github.com/Microsoft/msbuild)</ept>。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>MSBuild is a well-known engine in the .NET community, since it has been a key technology since the platform's first release.</source>
          <target state="translated">MSBuild 是.NET 社区中的知名引擎，因为自该平台首个版本以来，它一直作为一项关键技术。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Of course, because it needs to build .NET Core applications, MSBuild has been ported to .NET Core and can be used on any platform that .NET Core runs on.</source>
          <target state="translated">当然，因为它需要生成 .NET Core 应用程序，所以 MSBuild 已经移植到 .NET Core，并可在 .NET Core 运行的任何平台上使用。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>One of the main promises of .NET Core is that of a cross-platform development stack, and we have made sure that this move does not break that promise.</source>
          <target state="translated">.NET Core 的一个主要的好处是跨平台开发堆栈，我们已确保本次迁移不会破坏此好处。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If you are new to MSBuild and would like to learn more about it, you can start by reading the <bpt id="p1">[</bpt>MSBuild Concepts<ept id="p1">](https://docs.microsoft.com/visualstudio/msbuild/msbuild-concepts)</ept> article.</source>
          <target state="translated">如果还不熟悉 MSBuild，并且想要了解相关详细信息，可参阅 <bpt id="p1">[</bpt>MSBuild 概念<ept id="p1">](https://docs.microsoft.com/visualstudio/msbuild/msbuild-concepts)</ept>一文。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The tooling layers</source>
          <target state="translated">工具层</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>With the move away from the existing project system as well as with building engine switches, the question that naturally follows is do any of these changes change the overall "layering" of the whole .NET Core tooling ecosystem?</source>
          <target state="translated">随着弃用现有项目系统以及改换生成引擎，自然会出现一个疑问：这些更改会改变整体 .NET Core 工具生态系统的整体“分层”吗？</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Are there new bits and components?</source>
          <target state="translated">是否有新的位和组件？</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Let's start with a quick refresher on Preview 2 layering as shown in the following picture:</source>
          <target state="translated">首先来简要介绍下预览版 2 分层，如下图所示：</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Preview 2 tools high-level architecture</source>
          <target state="translated">预览版 2 工具高级体系结构</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The layering of the tools is quite simple.</source>
          <target state="translated">这些工具的分层非常简单。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>At the bottom we have the .NET Core Command Line tools as a foundation.</source>
          <target state="translated">在底部，我们将 .NET Core 命令行工具作为基础。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>All other, higher-level tools such as Visual Studio or VS Code, depend and rely on the CLI to build projects, restore dependencies and so on.</source>
          <target state="translated">所有其他高级工具（例如 Visual Studio 或 VS Code）依靠 CLI 来生成项目、还原依赖关系以及完成其他操作。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This meant that, for example, if Visual Studio wanted to perform a restore operation, it would call into <ph id="ph1">`dotnet restore`</ph> command in the CLI.</source>
          <target state="translated">这意味着，例如，如果 Visual Studio 要执行还原操作，它会在 CLI 中调入 <ph id="ph1">`dotnet restore`</ph> 命令。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>With the move to the new project system, the previous diagram changes:</source>
          <target state="translated">随着迁移到新的项目系统，之前的图表会更改：</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>RC4 tools high-level architecture</source>
          <target state="translated">RC4 工具简要体系结构</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The main difference is that the CLI is not the foundational layer anymore; this role is now filled by the "shared SDK component".</source>
          <target state="translated">主要区别在于 CLI 不再作为基础层；现由“共享 SDK 组件”充当此角色。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This shared SDK component is a set of targets and associated tasks that are responsible for compiling your code, publishing it, packing NuGet packages etc. The SDK itself is open-source and is available on GitHub on the <bpt id="p1">[</bpt>SDK repo<ept id="p1">](https://github.com/dotnet/sdk)</ept>.</source>
          <target state="translated">共享 SDK 组件是一组负责编译代码、发布代码、打包 NuGet 包等操作的目标和关联任务。SDK 本身是一个开源代码，可在 GitHub 上的 <bpt id="p1">[</bpt>SDK 存储库<ept id="p1">](https://github.com/dotnet/sdk)</ept>中获得。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>A "target" is a MSBuild term that indicates a named operation that MSBuild can invoke.</source>
          <target state="translated">“目标”是一个表示 MSBuild 可调用的已命名操作的 MSBuild 术语。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>It is usually coupled with one or more tasks that execute some logic that the target is supposed to do.</source>
          <target state="translated">其通常伴随着执行此目标应执行的某个逻辑的一个或多个任务。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>MSBuild supports many ready-made targets such as <ph id="ph1">`Copy`</ph> or <ph id="ph2">`Execute`</ph>; it also allows users to write their own tasks using managed code and define targets to execute those tasks.</source>
          <target state="translated">MSBuild 支持多个现成的目标，如 <ph id="ph1">`Copy`</ph> 或 <ph id="ph2">`Execute`</ph>；它还允许用户使用托管代码编写自己的任务，并定义要执行这些任务的目标。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>MSBuild tasks<ept id="p1">](https://docs.microsoft.com/visualstudio/msbuild/msbuild-tasks)</ept>.</source>
          <target state="translated">有关详细信息，请参阅 <bpt id="p1">[</bpt>MSBuild 任务<ept id="p1">](https://docs.microsoft.com/visualstudio/msbuild/msbuild-tasks)</ept>。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>All the toolsets now consume the shared SDK component and its targets, CLI included.</source>
          <target state="translated">现在所有工具集使用共享 SDK 组件及其目标，包括 CLI。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For example, the next version of Visual Studio will not call into <ph id="ph1">`dotnet restore`</ph> command to restore dependencies for .NET Core projects, it will use the "Restore" target directly.</source>
          <target state="translated">例如，下个版本的 Visual Studio 不会调用到 <ph id="ph1">`dotnet restore`</ph> 命令来还原 .NET Core 项目的依赖关系，它会直接使用“还原”目标。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Since these are MSBuild targets, you can also use raw MSBuild to execute them using the <bpt id="p1">[</bpt>dotnet msbuild<ept id="p1">](dotnet-msbuild.md)</ept> command.</source>
          <target state="translated">由于这些皆是 MSBuild 目标，因此你也可通过 <bpt id="p1">[</bpt>dotnet msbuild<ept id="p1">](dotnet-msbuild.md)</ept> 命令使用原始 MSBuild 来执行。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>RC4 CLI commands</source>
          <target state="translated">RC4 CLI 命令</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The shared SDK component means that the majority of existing CLI commands have been re-implemented as MSBuild tasks and targets.</source>
          <target state="translated">共享 SDK 组件意味着大部分现有 CLI 命令已重新实现为 MSBuild 任务和目标。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>What does this mean for the CLI commands and your usage of the toolset?</source>
          <target state="translated">这对 CLI 命令和工具集的使用意味着什么？</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>From an usage perspective, it doesn't change the way you use the CLI.</source>
          <target state="translated">从使用角度而言，它不会更改使用 CLI 的方式。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The CLI still has the core commands that exist in Preview 2 release:</source>
          <target state="translated">CLI 仍具有预览 2 版本中存在的核心命令：</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>These commands still do what you expect them to do (new up a project, build it, publish it, pack it and so on).</source>
          <target state="translated">这些命令的作用没有发生改变（仍可新建项目、生成项目、发布项目、打包项目等等）。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Majority of the options are not changed, and are still there, and you can consult either the commands' help screens (using <ph id="ph1">`dotent &lt;command&gt; --help`</ph>) or RC4 documentation on this site to get familiar with any changes.</source>
          <target state="translated">大部分选项并未更改，仍和以前一样。可以使用 <ph id="ph1">`dotent &lt;command&gt; --help`</ph> 查看相应命令的帮助屏幕，也可以参阅此网站上的 RC4 文档来熟悉所有更改。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>From an execution perspective, the CLI commands will take their parameters and construct a call to "raw" MSBuild that will set the needed properties and run the desired target.</source>
          <target state="translated">从执行角度而言，CLI 命令会采用其参数并构造对“原始”MSBuild 的调用，从而设置所需属性和运行所需目标。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>To better illustrate this, consider the following command:</source>
          <target state="translated">为更好的说明这点，请参考下面的命令：</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This command is publishing an application into a <ph id="ph1">`pub`</ph> folder using the "Release" configuration.</source>
          <target state="translated">此命令会使用“发布”配置将应用程序发布到 <ph id="ph1">`pub`</ph> 文件夹。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Internally, this command gets translated into the following MSBuild invocation:</source>
          <target state="translated">在内部，此命令会转换成下面的 MSBuild 调用：</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The notable exception to this rule are <ph id="ph1">`new`</ph> and <ph id="ph2">`run`</ph> commands, as they have not been implemented as MSBuild targets.</source>
          <target state="translated">此规则值得注意的例外是 <ph id="ph1">`new`</ph> 和 <ph id="ph2">`run`</ph> 命令，因为它们未实现为 MSBuild 目标。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Conclusion</source>
          <target state="translated">结束语</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>This document outlined at a high-level the changes that are happening to the overall CLI tooling architecture and functioning that are coming with RC4.</source>
          <target state="translated">本文档简要概述了整体 CLI 工具体系结构的变更，以及即将与 RC4 一起发布的功能。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>It has introduced the notion of the shared SDK component as well as explained how the CLI commands function, from a technical perspective, in RC4.</source>
          <target state="translated">不仅引入了共享 SDK 组件的概念，还从技术角度说明了 CLI 命令在 RC4 中的工作原理。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>