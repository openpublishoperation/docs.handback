<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-47f9650" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">28d5024f759b3a7474aef1fa344d39f9933b6322</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\collections\sorted-collection-types.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6313220f67d494783cd800aef94bce6d5b196dc8</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3c1f078246e8fca1a2597120d0c88910135ccd8e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Sorted Collection Types</source>
          <target state="translated">已排序的集合类型</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Sorted Collection Types</source>
          <target state="translated">已排序的集合类型</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET、.NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Sorted Collection Types</source>
          <target state="translated">已排序的集合类型</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>System.Collections.SortedList<ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.SortedList)</ept> class, the <bpt id="p2">[</bpt>System.Collections.Generic.SortedList<ph id="ph1">&amp;lt;</ph>TKey, TValue<ph id="ph2">&amp;gt;</ph><ept id="p2">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.SortedList-2)</ept> generic class, and the <bpt id="p3">[</bpt>System.Collections.Generic.SortedDictionary<ph id="ph3">&amp;lt;</ph>TKey, TValue<ph id="ph4">&amp;gt;</ph><ept id="p3">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.SortedDictionary-2)</ept> generic class are similar to the <bpt id="p4">[</bpt>Hashtable<ept id="p4">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Hashtable)</ept> class and the <bpt id="p5">[</bpt>Dictionary<ph id="ph5">&amp;lt;</ph>TKey, TValue<ph id="ph6">&amp;gt;</ph><ept id="p5">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.Dictionary-2)</ept> generic class in that they implement the <bpt id="p6">[</bpt>IDictionary<ept id="p6">](https://docs.microsoft.com/dotnet/core/api/System.Collections.IDictionary)</ept> interface, but they maintain their elements in sort order by key, and they do not have the O(1) insertion and retrieval characteristic of hash tables.</source>
          <target state="translated"><bpt id="p1">[</bpt>System.Collections.SortedList<ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.SortedList)</ept> 类、<bpt id="p2">[</bpt>System.Collections.Generic.SortedList<ph id="ph1">&amp;lt;</ph>TKey, TValue<ph id="ph2">&amp;gt;</ph><ept id="p2">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.SortedList-2)</ept> 泛型类和 <bpt id="p3">[</bpt>System.Collections.Generic.SortedDictionary<ph id="ph3">&amp;lt;</ph>TKey, TValue<ph id="ph4">&amp;gt;</ph><ept id="p3">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.SortedDictionary-2)</ept> 泛型类类似于 <bpt id="p4">[</bpt>Hashtable<ept id="p4">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Hashtable)</ept> 类和 <bpt id="p5">[</bpt>Dictionary<ph id="ph5">&amp;lt;</ph>TKey, TValue<ph id="ph6">&amp;gt;</ph><ept id="p5">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.Dictionary-2)</ept> 泛型类，因为它们也实现 <bpt id="p6">[</bpt>IDictionary<ept id="p6">](https://docs.microsoft.com/dotnet/core/api/System.Collections.IDictionary)</ept> 接口，但是会根据键的排序顺序维护元素，并且没有哈希表的 O(1) 插入和检索特性。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The three classes have several features in common:</source>
          <target state="translated">这三个类具有若干共性：</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>All three classes implement the <bpt id="p1">[</bpt>System.Collections.IDictionary<ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.IDictionary)</ept> interface.</source>
          <target state="translated">三个类都实现 <bpt id="p1">[</bpt>System.Collections.IDictionary<ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.IDictionary)</ept> 接口。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The two generic classes also implement the <bpt id="p1">[</bpt>System.Collections.Generic.IDictionary<ph id="ph1">&amp;lt;</ph>TKey, TValue<ph id="ph2">&amp;gt;</ph><ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.IDictionary-2)</ept> generic interface.</source>
          <target state="translated">两个泛型类还实现 <bpt id="p1">[</bpt>System.Collections.Generic.IDictionary<ph id="ph1">&amp;lt;</ph>TKey, TValue<ph id="ph2">&amp;gt;</ph><ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.IDictionary-2)</ept> 泛型接口。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Each element is a key/value pair for enumeration purposes.</source>
          <target state="translated">每个元素都是用于枚举的键/值对。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The nongeneric <bpt id="p1">[</bpt>SortedList<ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.SortedList)</ept> class returns <bpt id="p2">[</bpt>DictionaryEntry<ept id="p2">](https://docs.microsoft.com/dotnet/core/api/System.Collections.DictionaryEntry)</ept> objects when enumerated, although the two generic types return <bpt id="p3">[</bpt>KeyValuePair<ph id="ph1">&amp;lt;</ph>TKey, TValue<ph id="ph2">&amp;gt;</ph><ept id="p3">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.KeyValuePair-2)</ept> objects.</source>
          <target state="translated">非泛型 <bpt id="p1">[</bpt>SortedList<ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.SortedList)</ept> 类在被枚举时返回 <bpt id="p2">[</bpt>DictionaryEntry<ept id="p2">](https://docs.microsoft.com/dotnet/core/api/System.Collections.DictionaryEntry)</ept> 对象，而两个泛型类型返回 <bpt id="p3">[</bpt>KeyValuePair<ph id="ph1">&amp;lt;</ph>TKey, TValue<ph id="ph2">&amp;gt;</ph><ept id="p3">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.KeyValuePair-2)</ept> 对象。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Elements are sorted according to a <bpt id="p1">[</bpt>System.Collections.IComparer<ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.IComparer)</ept> implementation (for nongeneric <ph id="ph1">`SortedList`</ph>) or a <bpt id="p2">[</bpt>System.Collections.Generic.IComparer<ph id="ph2">&amp;lt;</ph>T<ph id="ph3">&amp;gt;</ph><ept id="p2">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.IComparer-1)</ept> implementation (for the two generic classes).</source>
          <target state="translated">元素按照 <bpt id="p1">[</bpt>System.Collections.IComparer<ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.IComparer)</ept> 实现（对于非泛型 <ph id="ph1">`SortedList`</ph>）或 <bpt id="p2">[</bpt>System.Collections.Generic.IComparer<ph id="ph2">&amp;lt;</ph>T<ph id="ph3">&amp;gt;</ph><ept id="p2">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.IComparer-1)</ept> 实现（对于两个泛型类）排序。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Each class provides properties that return collections containing only the keys or only the values.</source>
          <target state="translated">每个类提供了返回仅包含键或仅包含值的集合的属性。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The following table lists some of the differences between the two sorted list classes and the <bpt id="p1">[</bpt>SortedDictionary&lt;TKey, TValue&gt;<ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.SortedDictionary-2)</ept> class.</source>
          <target state="translated">下表列举两个排序的列表类与 <bpt id="p1">[</bpt>SortedDictionary&lt;TKey, TValue&gt;<ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.SortedDictionary-2)</ept> 类之间的一些区别。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`SortedList`</ph> nongeneric class and <ph id="ph2">`SortedList&lt;TKey, TValue&gt;`</ph> generic class</source>
          <target state="translated"><ph id="ph1">`SortedList`</ph> 非泛型类和 <ph id="ph2">`SortedList&lt;TKey, TValue&gt;`</ph> 泛型类</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`SortedDictionary&lt;TKey, TValue&gt;`</ph> generic class</source>
          <target state="translated"><ph id="ph1">`SortedDictionary&lt;TKey, TValue&gt;`</ph> 泛型类</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The properties that return keys and values are indexed, allowing efficient indexed retrieval.</source>
          <target state="translated">返回键和值的属性是有索引的，从而允许高效的索引检索。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>No indexed retrieval.</source>
          <target state="translated">无索引的检索。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Retrieval is O(log n).</source>
          <target state="translated">检索的运算复杂度为 O(log n)。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Retrieval is O(log n).</source>
          <target state="translated">检索的运算复杂度为 O(log n)。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Insertion and removal are generally O(n); however, insertion is O(1) for data that are already in sort order, so that each element is added to the end of the list.</source>
          <target state="translated">插入和移除的运算复杂度一般为 O(n)；但是，对于已经在排序顺序中的数据，插入操作的运算复杂度为 O(1)，因此每个元素都被添加到列表的末尾。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>(This assumes that a resize is not required.)</source>
          <target state="translated">（这假设不需要调整大小。）</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Insertion and removal are O(log n).</source>
          <target state="translated">插入和移除的运算复杂度为 O(log n)。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Uses less memory than a <ph id="ph1">`SortedDictionary&lt;TKey, TValue&gt;`</ph>.</source>
          <target state="translated">比 <ph id="ph1">`SortedDictionary&lt;TKey, TValue&gt;`</ph> 使用更少的内存。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Uses more memory than the <ph id="ph1">`SortedList`</ph> nongeneric class and the <ph id="ph2">`SortedList&lt;TKey, TValue&gt;`</ph> generic class.</source>
          <target state="translated">比 <ph id="ph1">`SortedList`</ph> 非泛型类和 <ph id="ph2">`SortedList&lt;TKey, TValue&gt;`</ph> 泛型类使用更多内存。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For sorted lists or dictionaries that must be accessible concurrently from multiple threads, you can add sorting logic to a class that derives from <bpt id="p1">[</bpt>ConcurrentDictionary<ph id="ph1">&amp;lt;</ph>TKey, TValue<ph id="ph2">&amp;gt;</ph><ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Concurrent.ConcurrentDictionary-2)</ept>.</source>
          <target state="translated">对于必须可从多个线程并发访问的已排序列表或字典，可以向派生自 <bpt id="p1">[</bpt>ConcurrentDictionary<ph id="ph1">&amp;lt;</ph>TKey, TValue<ph id="ph2">&amp;gt;</ph><ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Concurrent.ConcurrentDictionary-2)</ept> 的类添加排序逻辑。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For values that contain their own keys (for example, employee records that contain an employee ID number), you can create a keyed collection that has some characteristics of a list and some characteristics of a dictionary by deriving from the <bpt id="p1">[</bpt>KeyedCollection<ph id="ph1">&amp;lt;</ph>TKey, TItem<ph id="ph2">&amp;gt;</ph><ept id="p1">]()</ept> generic class.</source>
          <target state="translated">对于包含自己的键的值（例如，包含雇员 ID 编号的雇员记录），可以通过从 <bpt id="p1">[</bpt>KeyedCollection<ph id="ph1">&amp;lt;</ph>TKey, TItem<ph id="ph2">&amp;gt;</ph><ept id="p1">]()</ept> 泛型类进行派生来创建带键的集合，该集合具有列表和字典的某些特征。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>SortedSet<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph><ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.SortedSet-1)</ept> class provides a self-balancing tree that maintains data in sorted order after insertions, deletions, and searches.</source>
          <target state="translated"><bpt id="p1">[</bpt>SortedSet<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph><ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.SortedSet-1)</ept> 类提供在执行插入、删除和搜索操作之后维护排序顺序中的数据的自平衡树。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This class and the <bpt id="p1">[</bpt>HashSet<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph><ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.HashSet-1)</ept> class implement the <bpt id="p2">[</bpt>ISet<ph id="ph3">&amp;lt;</ph>T<ph id="ph4">&amp;gt;</ph><ept id="p2">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.ISet-1)</ept> interface.</source>
          <target state="translated">此类和 <bpt id="p1">[</bpt>HashSet<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph><ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.HashSet-1)</ept> 类实现 <bpt id="p2">[</bpt>ISet<ph id="ph3">&amp;lt;</ph>T<ph id="ph4">&amp;gt;</ph><ept id="p2">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.ISet-1)</ept> 接口。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">另请参阅</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.Collections.IDictionary<ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.IDictionary)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>System.Collections.IDictionary<ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.IDictionary)</ept></target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.Collections.Generic.IDictionary<ph id="ph1">&amp;lt;</ph>TKey, TValue<ph id="ph2">&amp;gt;</ph><ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.IDictionary-2)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>System.Collections.Generic.IDictionary<ph id="ph1">&amp;lt;</ph>TKey, TValue<ph id="ph2">&amp;gt;</ph><ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.IDictionary-2)</ept></target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ConcurrentDictionary<ph id="ph1">&amp;lt;</ph>TKey, TValue<ph id="ph2">&amp;gt;</ph><ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Concurrent.ConcurrentDictionary-2)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>ConcurrentDictionary<ph id="ph1">&amp;lt;</ph>TKey, TValue<ph id="ph2">&amp;gt;</ph><ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Concurrent.ConcurrentDictionary-2)</ept></target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Commonly Used Collection Types<ept id="p1">](commonly-used-collection-types.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>常用的集合类型<ept id="p1">](commonly-used-collection-types.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>