<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-f0362aa" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4c17da61f492e17edf4d69d79be430ead3dd0cc6</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\preview3\tutorials\using-with-xplat-cli-msbuild.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bcbfbf9c4088dc5a89fe219799654631a705b1e1</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">53eec76e487f494b2b5aa4b5c1366e39a90e382d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Getting started with .NET Core on Windows/Linux/macOS using the command line (.NET Core Tools RC4) | Microsoft Docs</source>
          <target state="translated">使用命令行在 Windows/Linux/macOS 上开始使用 .NET Core（.NET Core 工具 RC4）| Microsoft 文档</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Getting started with .NET Core on Windows, Linux, or macOS using the .NET Core command line interface (CLI)</source>
          <target state="translated">使用命令行接口 (CLI) 在 Windows、Linux 或 macOS 上入门 .NET Core</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET、.NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Getting started with .NET Core on Windows/Linux/macOS using the command line (.NET Core Tools RC4)</source>
          <target state="translated">使用命令行在 Windows/Linux/macOS 上开始使用 .NET Core（.NET Core 工具 RC4）</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This topic applies to .NET Core Tools RC4.</source>
          <target state="translated">本主题适用于 .NET Core 工具 RC4。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For the .NET Core Tools Preview 2 version, see the <bpt id="p1">[</bpt>Getting started with .NET Core on Windows/Linux/macOS using the command line<ept id="p1">](../../tutorials/using-with-xplat-cli.md)</ept> topic.</source>
          <target state="translated">对于 .NET Core 工具预览版 2，请参阅<bpt id="p1">[</bpt>使用命令行在 Windows/Linux/macOS 上实现 .NET Core 入门<ept id="p1">](../../tutorials/using-with-xplat-cli.md)</ept>主题。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This guide will show you how to use the .NET Core CLI tooling to build cross-platform console apps.</source>
          <target state="translated">本指南介绍如何使用 .NET Core CLI 工具生成跨平台控制台应用。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>It will start with the most basic console app and eventually span multiple projects, including testing.</source>
          <target state="translated">将从最基本的控制台应用开始介绍，最终涵盖包括测试在内的多个项目。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You'll add these features step-by-step, building on what you've already seen and built.</source>
          <target state="translated">基于已经了解和生成的应用，逐步添加这些功能。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If you're unfamiliar with the .NET Core CLI toolset, read <bpt id="p1">[</bpt>the .NET Core SDK overview<ept id="p1">](../tools/dotnet.md)</ept>.</source>
          <target state="translated">如果熟悉 .NET Core CLI 工具集，请阅读 <bpt id="p1">[</bpt>.NET Core SDK 概述<ept id="p1">](../tools/dotnet.md)</ept>。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
          <target state="translated">先决条件</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Before you begin, ensure you have <bpt id="p1">[</bpt>.NET Core CLI tooling RC4 or later<ept id="p1">](https://github.com/dotnet/core/blob/master/release-notes/preview3-download.md)</ept>.</source>
          <target state="translated">开始之前，请确保已安装 <bpt id="p1">[</bpt>.NET Core CLI 工具 RC4 或更高版本<ept id="p1">](https://github.com/dotnet/core/blob/master/release-notes/preview3-download.md)</ept>。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You'll also need a text editor.</source>
          <target state="translated">还需要一个文本编辑器。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Hello, Console App!</source>
          <target state="translated">Hello，控制台应用！</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>First, navigate to or create a new folder with a name you like.</source>
          <target state="translated">首先，导航到一个文件夹或使用喜欢的名称新建一个文件夹。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>"Hello" is the name chosen for the sample code, which can be found <bpt id="p1">[</bpt>here<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/console-apps/HelloMsBuild)</ept>.</source>
          <target state="translated">“Hello”是为示例代码选择的名称，可在<bpt id="p1">[</bpt>此处<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/console-apps/HelloMsBuild)</ept>找到它。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Open up a command prompt and type the following:</source>
          <target state="translated">打开命令提示符，键入下列命令：</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Let's do a quick walkthrough:</source>
          <target state="translated">让我们进行快速演练：</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">`dotnet new`</ph><ept id="p1">](../tools/dotnet-new.md)</ept> creates an up-to-date <ph id="ph2">`Hello.csproj`</ph> project file with the dependencies necessary to build a console app.</source>
          <target state="translated"><bpt id="p1">[</bpt><ph id="ph1">`dotnet new`</ph><ept id="p1">](../tools/dotnet-new.md)</ept> 会创建一个最新的 <ph id="ph2">`Hello.csproj`</ph> 项目文件，其中包含生成控制台应用所必需的依赖项。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>It also creates a <ph id="ph1">`Program.cs`</ph>, a basic file containing the entry point for the application.</source>
          <target state="translated">它还将创建 <ph id="ph1">`Program.cs`</ph>，这是包含应用程序的入口点的基本文件。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Hello.csproj`</ph>:</source>
          <target state="translated"><ph id="ph1">`Hello.csproj`</ph>：</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The project file specifies everything that's needed to restore dependencies and build the program.</source>
          <target state="translated">项目文件指定还原依赖项和生成程序所需的一切。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Import`</ph> tag brings in some properties that are common to all .NET Core projects.</source>
          <target state="translated"><ph id="ph1">`Import`</ph> 标记引入了一些对所有 .NET Core 项目都通用的属性。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`OutputType`</ph> tag specifies that we're building an executable, in other words a console application.</source>
          <target state="translated"><ph id="ph1">`OutputType`</ph> 标记指定我们要生成的可执行文件，即控制台应用程序。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`TargetFramework`</ph> tag specifies what .NET runtime we're targeting.</source>
          <target state="translated"><ph id="ph1">`TargetFramework`</ph> 标记指定我们面向的 .NET 运行时。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In an advance scenario, you can specify multiple target frameworks and build to all those in a single operation.</source>
          <target state="translated">在高级方案中，可以指定多个目标框架，并在单个操作中生成所有目标框架。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In this tutorial, we'll stick to building only for .NET Core 1.0.</source>
          <target state="translated">在本教程中，我们将仅针对 .NET Core 1.0 进行生成。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Compile`</ph> tag tells the compiler to build all the files in the current directory and all its subdirectories that have the <ph id="ph2">`.cs`</ph> file extension, in other words all the C# files in the project.</source>
          <target state="translated"><ph id="ph1">`Compile`</ph> 标记告诉编译器生成当前目录及所有具有 <ph id="ph2">`.cs`</ph> 文件扩展名的子目录（即项目中的所有 C# 文件）中的所有文件。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In advanced scenarios, it is possible to exclude files, but in this tutorial, and in most simple scenarios, this line can be left unchanged.</source>
          <target state="translated">在高级方案中可以排除文件，但在本教程中，且在大多数简单方案中，此行可以保持不变。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`EmbeddedResource`</ph> tag instructs the build system to embed localization files with the extension <ph id="ph2">`.resx`</ph> into the compiled executable.</source>
          <target state="translated"><ph id="ph1">`EmbeddedResource`</ph> 标记指示生成系统将扩展名 <ph id="ph2">`.resx`</ph> 的本地化文件嵌入到编译的可执行文件。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>We won't use that feature in this tutorial.</source>
          <target state="translated">在本教程中，我们不会使用该功能。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`PackageReference`</ph> tags specify what dependency packages must be restored and included when building the application.</source>
          <target state="translated"><ph id="ph1">`PackageReference`</ph> 标记指定在生成应用程序时必须还原和包括哪些依赖项包。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Each package reference specifies the name of the package under the <ph id="ph1">`Include`</ph> attribute, and a version number.</source>
          <target state="translated">每个包引用指定 <ph id="ph1">`Include`</ph> 属性下包的名称和版本号。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>In most advanced scenarios, you'll add more package references.</source>
          <target state="translated">在最高级方案下，你将添加多个包引用。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>It is also possible to reference other projects on disk.</source>
          <target state="translated">也可以引用磁盘上的其他项目。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Program.cs`</ph>:</source>
          <target state="translated"><ph id="ph1">`Program.cs`</ph>：</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The program starts by <ph id="ph1">`using System`</ph>, which means "bring everything in the <ph id="ph2">`System`</ph> namespace into scope for this file".</source>
          <target state="translated">该程序从 <ph id="ph1">`using System`</ph> 开始，这意味着“将 <ph id="ph2">`System`</ph> 命名空间中的所有内容都纳入此文件的作用域”。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`System`</ph> namespace includes basic constructs such as <ph id="ph2">`string`</ph>, or numeric types.</source>
          <target state="translated"><ph id="ph1">`System`</ph> 命名空间包括基本结构，如 <ph id="ph2">`string`</ph> 或数值类型。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>We then define a namespace called "ConsoleApplication".</source>
          <target state="translated">然后我们定义一个名为“ConsoleApplication”的命名空间。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>You can change this to anything you want.</source>
          <target state="translated">你可以将其更改为任何你喜欢的名称。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>A class named "Program" is defined within that namespace, with a <ph id="ph1">`Main`</ph> method that takes an array of strings as its argument.</source>
          <target state="translated">在该命名空间中定义了一个名为“Program”的类，其中 <ph id="ph1">`Main`</ph> 方法将字符串数组作为其参数。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This array will contain the list of arguments passed in when the compiled program will be called.</source>
          <target state="translated">此数组将包含在调用编译的程序时所传递的参数列表。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>As it is, this array is not used: all the program is doing is to write "Hello World!"</source>
          <target state="translated">按照这样，不使用此数组：程序所进行的全部操作就是编写“Hello World!”</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>to the console.</source>
          <target state="translated">“Hello World!”。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>We can make things a little more interesting by changing the <ph id="ph1">`Console.WriteLine`</ph> into the following code.</source>
          <target state="translated">可以通过将 <ph id="ph1">`Console.WriteLine`</ph> 更改为以下代码来使事情更有趣。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">`dotnet restore`</ph><ept id="p1">](../tools/dotnet-restore.md)</ept> calls into <bpt id="p2">[</bpt>NuGet<ept id="p2">](http://nuget.org)</ept> (.NET's package manager) to restore the tree of dependencies.</source>
          <target state="translated"><bpt id="p1">[</bpt><ph id="ph1">`dotnet restore`</ph><ept id="p1">](../tools/dotnet-restore.md)</ept> 调用到 <bpt id="p2">[</bpt>NuGet<ept id="p2">](http://nuget.org)</ept>（.NET 的包管理器）以还原依赖项树。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>NuGet analyzes the <ph id="ph1">`Hello.csproj`</ph> file, downloads the dependencies stated in the file (or grabs them from a cache on your machine), and writes the <ph id="ph2">`obj/project.assets.json`</ph> file.</source>
          <target state="translated">NuGet 分析 <ph id="ph1">`Hello.csproj`</ph> 文件、下载文件中所述的依赖项（或从计算机缓存中获取）并编写 <ph id="ph2">`obj/project.assets.json`</ph> 文件。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`project.assets.json`</ph> file is necessary to be able to compile and run.</source>
          <target state="translated">需要 <ph id="ph1">`project.assets.json`</ph> 文件才可进行编译和运行。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`project.assets.json`</ph> file is a persisted and complete set of the graph of NuGet dependencies and other information describing an app.</source>
          <target state="translated"><ph id="ph1">`project.assets.json`</ph> 文件是 NuGet 依赖项和其他描述应用的信息的持久化完整图片集。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>This file is read by other tools, such as <ph id="ph1">`dotnet build`</ph> and <ph id="ph2">`dotnet run`</ph>, enabling them to process the source code with a correct set of NuGet dependencies and binding resolutions.</source>
          <target state="translated">此文件由其他工具（如 <ph id="ph1">`dotnet build`</ph> 和 <ph id="ph2">`dotnet run`</ph>）读取，让它们可以使用正确的 NuGet 依赖项和绑定解决方法集处理源代码。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">`dotnet run`</ph><ept id="p1">](../tools/dotnet-run.md)</ept> calls <ph id="ph2">`dotnet build`</ph> to ensure that the build targets have been built, and then calls <ph id="ph3">`dotnet &lt;assembly.dll&gt;`</ph> to run the target application.</source>
          <target state="translated"><bpt id="p1">[</bpt><ph id="ph1">`dotnet run`</ph><ept id="p1">](../tools/dotnet-run.md)</ept> 调用 <ph id="ph2">`dotnet build`</ph> 来确保已生成要生成的目标，然后调用 <ph id="ph3">`dotnet &lt;assembly.dll&gt;`</ph> 运行目标应用程序。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Alternatively, you can also execute <bpt id="p1">[</bpt><ph id="ph1">`dotnet build`</ph><ept id="p1">](../tools/dotnet-build.md)</ept> to compile the code without running the build console applications.</source>
          <target state="translated">或者，还可以执行 <bpt id="p1">[</bpt><ph id="ph1">`dotnet build`</ph><ept id="p1">](../tools/dotnet-build.md)</ept> 来编译代码，无需运行已生成的控制台应用程序。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>This results in a <ph id="ph1">`bin/Debug/netcoreapp1.0/Hello.dll`</ph> compiled application that can be run with <ph id="ph2">`dotnet bin\Debug\netcoreapp1.0\Hello.dll`</ph> on Windows, and <ph id="ph3">`dotnet bin/Debug/netcoreapp1.0/Hello.dll`</ph> on other systems.</source>
          <target state="translated">这使得 <ph id="ph1">`bin/Debug/netcoreapp1.0/Hello.dll`</ph> 编译的应用程序可以在 Windows 上使用 <ph id="ph2">`dotnet bin\Debug\netcoreapp1.0\Hello.dll`</ph> 运行，在其他系统上使用 <ph id="ph3">`dotnet bin/Debug/netcoreapp1.0/Hello.dll`</ph> 运行。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>You may specify an additional parameter on the command-line (assuming you are on Windows):</source>
          <target state="translated">可以在命令行上指定一个附加参数（假设在 Windows 上）：</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>As an advanced scenario, it's possible to build the application as a self-contained set of platform-specific files that can be deployed and run to a machine that doesn't necessarily have .NET Core installed.</source>
          <target state="translated">在高级方案中，可以将应用程序作为独立的特定于平台的文件集生成，该应用程序可以在未安装 .NET Core 的计算机上部署或运行。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>.NET Core Application Deployment<ept id="p1">](../deploying/index.md)</ept> for details.</source>
          <target state="translated">请参阅 <bpt id="p1">[</bpt>.NET Core 应用程序部署<ept id="p1">](../deploying/index.md)</ept>了解详细信息。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Augmenting the program</source>
          <target state="translated">扩充程序</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Let's change the file just a little bit.</source>
          <target state="translated">让我们对此文件进行些微更改。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Fibonacci numbers are fun, so let's try that out:</source>
          <target state="translated">斐波那契数字很有意思，我们来尝试一下：</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Program.cs`</ph>:</source>
          <target state="translated"><ph id="ph1">`Program.cs`</ph>：</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>And running the program (assuming you're on Windows, and have changed the project directory name to Fibonacci):</source>
          <target state="translated">运行程序（假设在 Windows 上并已将项目目录名称更改为 Fibonacci）：</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>And that's it!</source>
          <target state="translated">就是这么简单！</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>You can augment <ph id="ph1">`Program.cs`</ph> any way you like.</source>
          <target state="translated">可以按任意喜欢的方式扩充 <ph id="ph1">`Program.cs`</ph>。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Adding some new files</source>
          <target state="translated">添加一些新文件</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Single files are fine for simple one-off programs, but chances are you're going to want to break things out into multiple files if you're building anything which has multiple components.</source>
          <target state="translated">对于简单的一次性程序，单个文件即可，但如果要生成含有多个组件的内容，则可能需要将内容拆分为多个文件。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Multiple files are a way to do that.</source>
          <target state="translated">多个文件是一种方法。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Create a new file and give it a unique namespace:</source>
          <target state="translated">新建一个文件，并为其提供唯一的命名空间：</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Next, include it in your <ph id="ph1">`Program.cs`</ph> file:</source>
          <target state="translated">接下来，将其包含在 <ph id="ph1">`Program.cs`</ph> 文件中：</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>And finally, you can build it:</source>
          <target state="translated">最后，可生成它：</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Now the fun part: making the new file do something!</source>
          <target state="translated">现在才是有趣的部分：让新文件执行一些操作！</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Example: A Fibonacci Sequence Generator</source>
          <target state="translated">示例：Fibonacci 序列生成器</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Let's say you want to build off of the previous Fibonacci example by caching some Fibonacci values and add some recursive flair.</source>
          <target state="translated">假设希望通过缓存一些斐波那契值，基于之前的斐波那契示例进行生成，并添加一些递归特性。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Your code for a <bpt id="p1">[</bpt>better Fibonacci example<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/console-apps/FibonacciBetterMsBuild)</ept> might use a new <ph id="ph1">`FibonacciGenerator.cs`</ph> file with the following code.</source>
          <target state="translated"><bpt id="p1">[</bpt>更好的斐波那契示例<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/console-apps/FibonacciBetterMsBuild)</ept>的代码可能会使用具有以下代码的新 <ph id="ph1">`FibonacciGenerator.cs`</ph> 文件。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Now adjust the <ph id="ph1">`Main()`</ph> method in your <ph id="ph2">`Program.cs`</ph> file as shown below.</source>
          <target state="translated">现在，只需如下所示调整 <ph id="ph2">`Program.cs`</ph> 文件中的 <ph id="ph1">`Main()`</ph> 方法。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Finally, run it!</source>
          <target state="translated">最后，运行它！</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>And that's it!</source>
          <target state="translated">就是这么简单！</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Conclusion</source>
          <target state="translated">结束语</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Hopefully this guide has helped you learn how to create a .NET Core console app, from the basics all the way up to a multi-project system with unit tests.</source>
          <target state="translated">希望本指南可帮助你了解如何创建 .NET Core 控制台应用（从基本知识一直到含单元测试的多项目系统）。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The next step is to create awesome console apps of your own!</source>
          <target state="translated">下一步就是创建属于自己的出色控制台应用！</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>If a more advanced example of a console app interests you, check out the next tutorial: <bpt id="p1">[</bpt>Organizing and testing projects with the .NET Core command line (.NET Core Tools RC4)<ept id="p1">](using-with-xplat-cli-msbuild-folders.md)</ept>.</source>
          <target state="translated">如果对更高级的控制台应用程序示例感兴趣，请学习下一教程：<bpt id="p1">[</bpt>使用 .NET Core 命令行组织和测试项目（.NET Core 工具 RC4）<ept id="p1">](using-with-xplat-cli-msbuild-folders.md)</ept>。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>