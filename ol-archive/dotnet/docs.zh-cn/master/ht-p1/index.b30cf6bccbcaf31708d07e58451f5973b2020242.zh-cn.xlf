<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-eac019f" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3db91c84c887645bd3054fab70841657aa045c54</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\versions\index.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p1</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b5037624484e633a5262969056c30933f776febf</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8e62319558ef464d7765b1d064f043eb03cb9f39</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>.NET Core Versioning</source>
          <target state="translated">.NET Core 版本控制</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>.NET Core Versioning</source>
          <target state="translated">.NET Core 版本控制</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>.NET Core Versioning</source>
          <target state="translated">.NET Core 版本控制</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>.NET Core is a platform of <bpt id="p1">[</bpt>NuGet packages<ept id="p1">](../packages.md)</ept>, of frameworks and distributed as a unit.</source>
          <target state="translated">.NET Core 是 <bpt id="p1">[</bpt>NuGet 包<ept id="p1">](../packages.md)</ept>和框架的平台，作为单元分布。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Each of these platform layers can be versioned separately for product agility and to accurately describe product changes.</source>
          <target state="translated">每个平台层都可单独进行版本控制，以实现产品敏捷性并准确描述产品更改。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>While there is significant versioning flexibility, there is a desire to version the platform as a unit to make the product easier to understand.</source>
          <target state="translated">虽然有巨大的版本控制灵活性，但需要将平台作为单元进行版本控制以使产品更易于理解。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The product is in some respects unique, being described and delivered via a package manager (NuGet) as packages.</source>
          <target state="translated">通过包管理器 (NuGet) 进行描述并交付为包，产品在某些方面具有唯一性。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>While you typically acquire .NET Core as a standalone SDK, the SDK is largely a convenience experience over NuGet packages and therefore not distinct from packages.</source>
          <target state="translated">虽然通常将 .NET Core 作为独立的 SDK获取，SDK 在很大程度上是比 NuGet 包更方便的体验，因此与包没有不同之处。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>As a result, versioning is first and foremost in terms of packages and other versioning experiences follow from there.</source>
          <target state="translated">因此，版本控制对包而言是首要且最重要的，其他版本控制体验以此为基础。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Semantic Versioning</source>
          <target state="translated">语义版本控制</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>.NET Core uses <bpt id="p1">[</bpt>Semantic Versioning (SemVer)<ept id="p1">](http://semver.org/)</ept>, adopting the use of major.minor.patch versioning, using the various parts of the version number to describe the degree and kind of change.</source>
          <target state="translated">.NET Core 使用<bpt id="p1">[</bpt>语义版本控制 (SemVer)<ept id="p1">](http://semver.org/)</ept>，采用 major.minor.patch 版本控制，通过版本号的各部分来描述更改程度和类型。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The following versioning template is generally applied to .NET Core.</source>
          <target state="translated">以下版本控制模板通常适用于 .NET Core。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>There are cases where it has been adapted to fit with existing versioning.</source>
          <target state="translated">在一些情况下，已通过调整来适应现有版本控制。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>These cases are described later in this document.</source>
          <target state="translated">本文档稍后会介绍此类情况。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For example, frameworks are only intended to represent platform and API capabilities, which aligns with major/minor versioning.</source>
          <target state="translated">例如，框架仅用于表示平台和 API 功能，这符合主要/次要版本控制。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Versioning Form</source>
          <target state="translated">版本控制窗体</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>MAJOR.MINOR.PATCH[-PRERELEASE-BUILDNUMBER]</source>
          <target state="translated">MAJOR.MINOR.PATCH[-PRERELEASE-BUILDNUMBER]</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Decision Tree</source>
          <target state="translated">决策树</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>MAJOR when:</source>
          <target state="translated">以下情况为 MAJOR：</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>drop support for a platform</source>
          <target state="translated">放弃对平台的支持</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>adopt a newer MAJOR version of an existing dependency</source>
          <target state="translated">采用现有依赖项的较新 MAJOR 版本</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>disable a compatibility quirk off by default</source>
          <target state="translated">默认情况下禁用兼容性</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>MINOR when:</source>
          <target state="translated">以下情况为 MINOR：</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>add public API surface area</source>
          <target state="translated">添加公共 API 外围应用</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>add new behavior</source>
          <target state="translated">添加新行为</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>adopt a newer MINOR version of an existing dependency</source>
          <target state="translated">采用现有依赖项的较新 MINOR 版本</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>introduce a new dependency</source>
          <target state="translated">引入新依赖项</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>PATCH when:</source>
          <target state="translated">以下情况为 PATCH：</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>make bug fixes</source>
          <target state="translated">修复 bug</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>add support for a newer platform</source>
          <target state="translated">添加对较新平台的支持</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>adopt a newer PATCH version of an existing dependency</source>
          <target state="translated">采用现有依赖项的较新 PATCH 版本</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>any other change (not otherwise captured)</source>
          <target state="translated">任何其他更改（未通过其他方式捕获）</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>When determining what to increment when there are multiple changes, choose the highest kind of change.</source>
          <target state="translated">确定增加内容时若有多个更改，请选择最高类型的更改。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Versioning Scheme</source>
          <target state="translated">版本控制方案</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>.NET Core can be defined as and will version in the following way:</source>
          <target state="translated">.NET Core 将通过以下方式定义并进行版本控制：</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>A runtime and framework implementation, distributed as packages.</source>
          <target state="translated">以包的形式分发的运行时和框架实现。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Each package is versioned independently, particularly for patch versioning.</source>
          <target state="translated">对每个包进行独立的版本控制，特别是对于修补程序版本控制。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>A set of metapackages that reference fine-grained packages as a versioned unit.</source>
          <target state="translated">将细粒度包作为版本控制单元引用的一组元包。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Metapackages are versioned separately from packages.</source>
          <target state="translated">从包单独对元包进行版本控制。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>A set of frameworks (for example, <ph id="ph1">`netstandard`</ph>) that represent a progressively larger API set, described in a set of versioned snapshots.</source>
          <target state="translated">表示逐渐变大的 API 集的一组框架（如 <ph id="ph1">`netstandard`</ph>），如一组版本控制快照中所述。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Packages</source>
          <target state="translated">包</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Library packages evolve and version independently.</source>
          <target state="translated">库包单独发展，并单独进行版本控制。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Packages that overlap with .NET Framework System.<ph id="ph1">\*</ph></source>
          <target state="translated">与 .NET Framework 系统重叠的包。<ph id="ph1">\*</ph></target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>assemblies typically use 4.x versions, aligning with the .NET Framework 4.x versioning (a historical choice).</source>
          <target state="translated">程序集通常使用 4.x 版本控制，这符合 .NET Framework 4.x 版本控制（历史选择）。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Packages that do not overlap with the .NET Framework libraries (for example, <bpt id="p1">[</bpt>System.Reflection.Metadata<ept id="p1">](https://www.nuget.org/packages/System.Reflection.Metadata)</ept>) typically start at 1.0 and increment from there.</source>
          <target state="translated">不与 .NET Framework 库重叠的包（如 <bpt id="p1">[</bpt>System.Reflection.Metadata<ept id="p1">](https://www.nuget.org/packages/System.Reflection.Metadata)</ept>）通常从 1.0 开始并由此增加。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The packages described by <bpt id="p1">[</bpt>NETStandard.Library<ept id="p1">](https://www.nuget.org/packages/NETStandard.Library)</ept> are treated specially due to being at the base of the platform.</source>
          <target state="translated">由于处于平台的基底，由 <bpt id="p1">[</bpt>NETStandard.Library<ept id="p1">](https://www.nuget.org/packages/NETStandard.Library)</ept> 描述的包将被特殊处理。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>NETStandard.Library packages will typically version as a set, since they have implementation-level dependencies between them.</source>
          <target state="translated">NETStandard.Library 包通常作为集进行版本控制，因为其之间具有实现级依赖项。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>APIs will only be added to NETStandard.Library packages as part of major or minor .NET Core releases, since doing so would require adding a new <ph id="ph1">`netstandard`</ph> version.</source>
          <target state="translated">API 将仅作为主要或次要 .NET Core 版本的一部分添加到 NETStandard.Library 包，因为这样做需要添加新的 <ph id="ph1">`netstandard`</ph> 版本。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>This is in addition to SemVer requirements.</source>
          <target state="translated">这是 SemVer 要求之外的要求。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Metapackages</source>
          <target state="translated">元包</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Versioning for .NET Core metapackages is based on the framework that they map to.</source>
          <target state="translated">.NET Core 元包的版本控制基于其映射的框架。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The metapackages adopt the highest version number of the framework (for example, netstandard1.6) it maps to in its package closure.</source>
          <target state="translated">元包采用在包关闭中其映射框架的最高版本号（如 netstandard1.6）。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The patch version for the metapackage is used to represent updates to the metapackage to reference updated packages.</source>
          <target state="translated">元包的修补程序版本用于表示对元包的更新以引用更新的包。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Patch versions will never include an updated framework version.</source>
          <target state="translated">修补程序版本绝不会包含更新的框架版本。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>As a result, the metapackages are not strictly SemVer compliant because their versioning scheme doesn't represent the degree of change in the underlying packages, but primarily the API level.</source>
          <target state="translated">因此，元包不严格符合 SemVer，因为其版本控制方案不表示基础包中的更改程度，而是主要表示 API 级别。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>There are two primary metapackages for .NET Core.</source>
          <target state="translated">.NET Core 有两种主要的元包。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>NETStandard.Library<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>NETStandard.Library<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>v1.6 as of .NET Core 1.0 (these versions won't typically or intentionally match).</source>
          <target state="translated">自 .NET Core 1.0 的 v1.6 开始（这些版本通常不匹配或不特意匹配）。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Maps to the <ph id="ph1">`netstandard`</ph> framework.</source>
          <target state="translated">映射到 <ph id="ph1">`netstandard`</ph> 框架。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Describes the packages that are considered required for modern app development and that .NET platforms must implement to be considered a <bpt id="p1">[</bpt>.NET Standard<ept id="p1">](../../standard/library.md)</ept> platform.</source>
          <target state="translated">描述被视为新式应用开发所需，且 .NET 平台必须实现以被视为 <bpt id="p1">[</bpt>.NET Standard<ept id="p1">](../../standard/library.md)</ept> 平台的包。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Microsoft.NETCore.App<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>Microsoft.NETCore.App<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>v1.0 as of .NET Core 1.0 (these versions will match).</source>
          <target state="translated">自 .NET Core 1.0 的 v1.0 开始（这些版本将匹配）。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Maps to the <ph id="ph1">`netcoreapp`</ph> framework.</source>
          <target state="translated">映射到 <ph id="ph1">`netcoreapp`</ph> 框架。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Describes the packages in the .NET Core distribution.</source>
          <target state="translated">描述 .NET Core 分发中的包。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Note: <bpt id="p1">[</bpt><ph id="ph1">`Microsoft.NETCore.Portable.Compatibility`</ph><ept id="p1">](https://www.nuget.org/packages/Microsoft.NETCore.Portable.Compatibility)</ept> is another .NET Core metapackage.</source>
          <target state="translated">注意：<bpt id="p1">[</bpt><ph id="ph1">`Microsoft.NETCore.Portable.Compatibility`</ph><ept id="p1">](https://www.nuget.org/packages/Microsoft.NETCore.Portable.Compatibility)</ept> 是另一个 .NET Core 元包。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>It doesn't map to a particular framework, so versions like a package.</source>
          <target state="translated">它不映射到特殊框架，因此其版本控制与包相同。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Frameworks</source>
          <target state="translated">框架</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Framework versions are updated when new APIs are added.</source>
          <target state="translated">添加新 API 时，会更新框架版本。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>They have no concept of patch version, since they represent API shape and not implementation concerns.</source>
          <target state="translated">它们没有修补程序版本的概念，因为其表示 API 形状，不表示实现问题。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Major and minor versioning will follow the SemVer rules specified earlier.</source>
          <target state="translated">主要和次要版本控制将按照之前指定的 SemVer 规则进行。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`netcoreapp`</ph> framework is tied to the .NET Core distribution.</source>
          <target state="translated"><ph id="ph1">`netcoreapp`</ph> 框架已关联到 .NET Core 分发。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>It will follow the version numbers used by .NET Core.</source>
          <target state="translated">它将遵循由 .NET Core 使用的版本号。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>For example, when .NET Core 2.0 is released, it will target <ph id="ph1">`netcoreapp2.0`</ph>.</source>
          <target state="translated">例如，发布 .NET Core 2.0 时，它将面向 <ph id="ph1">`netcoreapp2.0`</ph>。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`netstandard`</ph> framework will not match the versioning scheme of any .NET runtime, given that it is equally applicable to all of them.</source>
          <target state="translated">考虑到其对所有 .NET 运行时均同样适用，<ph id="ph1">`netstandard`</ph> 框架不匹配任何 .NET 运行时的版本控制方案。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Versioning in Practice</source>
          <target state="translated">版本控制实践</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>There are commits and PRs on .NET Core repos on GitHub on a daily basis, resulting in new builds of many libraries.</source>
          <target state="translated">每天，在 GitHub 上的 .NET Core 存储库中都有提交和 PR，因此会新生成许多库。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>It is not practical to create new public versions of .NET Core for every change.</source>
          <target state="translated">为每个更改创建 .NET Core 的新公共版本是不切实际的。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Instead, changes will be aggregated over some loosely-defined period of time (for example, weeks or months) before making a new public stable .NET Core version.</source>
          <target state="translated">在制作新的公共稳定 .NET Core 版本前，将在一些松散定义的时期（如周或月）聚合更改。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>A new version of .NET Core could mean several things:</source>
          <target state="translated">新版本的 .NET Core 可能意味着以下内容：</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>New versions of packages and metapackages.</source>
          <target state="translated">包和元包的新版本。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>New versions of various frameworks, assuming the addition of new APIs.</source>
          <target state="translated">各种框架的新版本，假定添加新 API。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>New version of the .NET Core distribution.</source>
          <target state="translated">.NET Core 分发的新版本。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Shipping a patch release</source>
          <target state="translated">传送修补程序版本</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>After shipping a .NET Core v1.0.0 stable version, patch-level changes (no new APIs) are made to .NET Core libraries to fix bugs and improve performance and reliability.</source>
          <target state="translated">传送 .NET Core v1.0.0 稳定版本后，对 .NET Core 库进行修补程序级别更改以修复 bug 并改进性能和可靠性。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The various metapackages are updated to reference the updated .NET Core library packages.</source>
          <target state="translated">更新各种元包以引用更新的 .NET Core 库包。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The metapackages are versioned as patch updates (x.y.z).</source>
          <target state="translated">将元包作为修补程序更新 (x.y.z) 进行版本控制。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Frameworks are not updated.</source>
          <target state="translated">不更新框架。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>A new .NET Core distribution is released with a matching version number to the <ph id="ph1">`Microsoft.NETCore.App`</ph> metapackage.</source>
          <target state="translated">发布新的 .NET Core 分发，其具有与 <ph id="ph1">`Microsoft.NETCore.App`</ph> 元包匹配的版本号。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>You can see patch updates demonstrated in the project.json examples below.</source>
          <target state="translated">可在以下 project.json 示例中看到修补程序更新。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Shipping a minor release</source>
          <target state="translated">传送次要发布</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>After shipping a .NET Core v1.0.0 stable version, new APIs are added to .NET Core libraries to enable new scenarios.</source>
          <target state="translated">传送 .NET Core v1.0.0 稳定版本后，将新的 API 添加到 .NET Core 库以启用新方案。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The various metapackages are updated to reference the updated .NET Core library packages.</source>
          <target state="translated">更新各种元包以引用更新的 .NET Core 库包。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The metapackages are versioned as patch updates (x.y) to match the higher framework version.</source>
          <target state="translated">将元包作为修补程序更新 (x.y) 进行版本控制，以匹配更高的框架版本。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The various frameworks are updated to describe the new APIs.</source>
          <target state="translated">更新各种框架以描述新的 API。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>A new .NET Core distribution is released with a matching version number to the <ph id="ph1">`Microsoft.NETCore.App`</ph> metapackage.</source>
          <target state="translated">发布新的 .NET Core 分发，其具有与 <ph id="ph1">`Microsoft.NETCore.App`</ph> 元包匹配的版本号。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>You can see minor updates demonstrated in the project.json examples below.</source>
          <target state="translated">可在以下 project.json 示例中看到显示的次要更新。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Shipping a major release</source>
          <target state="translated">传送主要发布</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Given a .NET Core v1.y.z stable version, new APIs are added to .NET Core libraries to enable major new scenarios.</source>
          <target state="translated">给定 .NET Core v1.y.z 稳定版本，将新的 API 添加到 .NET Core 库以启用主要新方案。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Perhaps, support is dropped for a platform.</source>
          <target state="translated">也许，已放弃对平台的支持。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The various metapackages are updated to reference the updated .NET Core library packages.</source>
          <target state="translated">更新各种元包以引用更新的 .NET Core 库包。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Microsoft.NETCore.App`</ph> metapackage and the <ph id="ph2">`netcore`</ph> framework are versioned as a major update (x.).</source>
          <target state="translated"><ph id="ph1">`Microsoft.NETCore.App`</ph> 元包和 <ph id="ph2">`netcore`</ph> 框架作为主要更新 (x.) 进行版本控制。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`NETStandard.Library`</ph> metapackage is likely  versioned as a minor update (x.y) since it applies to multiple .NET implementations.</source>
          <target state="translated"><ph id="ph1">`NETStandard.Library`</ph> 元包可能作为次要更新 (x.y) 进行版本控制，因为其适用于多个 .NET 实现。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>A new .NET Core distribution would be released with a matching version number to the <ph id="ph1">`Microsoft.NETCore.App`</ph> metapackage.</source>
          <target state="translated">将发布新的 .NET Core 分发，其具有与 <ph id="ph1">`Microsoft.NETCore.App`</ph> 元包匹配的版本号。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>You can see major updates demonstrated in the project.json metapackage reference in the example below.</source>
          <target state="translated">可在以下示例的 project.json 元包引用中查看显示的主要更新。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>