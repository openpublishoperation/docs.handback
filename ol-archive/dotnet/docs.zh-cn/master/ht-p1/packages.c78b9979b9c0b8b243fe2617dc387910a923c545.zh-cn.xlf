<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-eac019f" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">af6c83755068cc311b59c1a337898c177cc6d537</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\packages.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p1</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dc12600ed25965a42bb459f1f4190c64dc6a50ca</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">546541aa0efec2c3da5b6688c9e4f799c2c90ec5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Packages, Metapackages and Frameworks</source>
          <target state="translated">包、元包和框架</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Packages, Metapackages and Frameworks</source>
          <target state="translated">包、元包和框架</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Packages, Metapackages and Frameworks</source>
          <target state="translated">包、元包和框架</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>.NET Core is a platform made of NuGet packages.</source>
          <target state="translated">.NET Core 是一种由 NuGet 包组成的平台。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Some product experiences benefit from fine-grained definition of packages while others from coarse-grained.</source>
          <target state="translated">有些产品体验受益于包的细粒度定义，而另一些受益于粗粒度的定义。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>To accommodate this duality, the product is distributed as a fine-grained set of packages and then described in coarser chunks with a package type informally called a "metapackage".</source>
          <target state="translated">为了适应这种二元定义，一款好的产品应该作为一组细粒度的包发布，然后在更粗的粒度组块中进行描述，单个包的正式的名字叫做“元包”。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Each of the .NET Core packages support being run on multiple .NET runtimes, represented as frameworks.</source>
          <target state="translated">每个 .Net Core 包都支持运行于多种 .Net 运行时中，这些运行时被称为“框架”。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Some of those frameworks are traditional frameworks, like <ph id="ph1">`net46`</ph>, representing the .NET Framework.</source>
          <target state="translated">其中有些框架是传统框架，例如表示 .NET Framework 的 <ph id="ph1">`net46`</ph>。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Another set is new frameworks that can be thought of as "package-based frameworks", which establish a new model for defining frameworks.</source>
          <target state="translated">而另一些则是新框架，可视为是“基于包的框架”，这种是框架的另外一种新的定义模型。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>These package-based frameworks are entirely formed and defined as packages, forming a strong relationship between packages and frameworks.</source>
          <target state="translated">这些基于包的框架整个都是由包组成的，它们自身也被定义成包，这就在包与框架之间形成了一种比较密切的关系。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Packages</source>
          <target state="translated">包</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>.NET Core is split into a set of packages, which provide primitives, higher-level data types, app composition types and common utilities.</source>
          <target state="translated">.NET Core 被分成一组包，它们提供了基元类型，以及更高层的数据类型，应用组合类型和通用实用工具。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Each of these packages represent a single assembly of the same name.</source>
          <target state="translated">每一个包都代表着单独的同名程序集。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For example, <bpt id="p1">[</bpt>System.Runtime<ept id="p1">](https://www.nuget.org/packages/System.Runtime)</ept> contains System.Runtime.dll.</source>
          <target state="translated">例如，<bpt id="p1">[</bpt>System.Runtime<ept id="p1">](https://www.nuget.org/packages/System.Runtime)</ept> 这个包就包含了 System.Runtime.dll 程序集。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>There are advantages to defining packages in a fine-grained manner:</source>
          <target state="translated">以细粒度方式定义这些包具有以下好处：</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Fine-grained packages can ship on their own schedule with relatively limited testing of other packages.</source>
          <target state="translated">细粒度的包可以在它自己的计划内交付，只需完成仅对相关的其他有限的包进行测试即可。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Fine-grained packages can provide differing OS and CPU support.</source>
          <target state="translated">细粒度的包可以提供不同的 OS 和 CPU 支持。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Fine-grained packages can have dependencies specific to only one library.</source>
          <target state="translated">细粒度的包可以单独依赖于某一个库。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Apps are smaller because unreferenced packages don't become part of the app distribution.</source>
          <target state="translated">应用可以变得更小，因为没有引用的包不会变成应用发行的一部分。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Some of these benefits are only used in certain circumstances.</source>
          <target state="translated">上述某些好处只适用于某些特定场合。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For example, NET Core packages will typically ship on the same schedule with the same platform support.</source>
          <target state="translated">例如，.NET Core 的所有包通常都会在同一计划内提供对同一平台的支持。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In the case of servicing, fixes can be distributed and installed as small single package updates.</source>
          <target state="translated">在这种情况下，补丁与更新会以小的单独包的形式发布和安装。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Due to the narrow scope of change, the validation and time to make a fix available is limited to what is needed for a single library.</source>
          <target state="translated">由于这种小范围的变化，补丁的验证与时间花费，都可以限制到单个库的需求范围中。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The following is a list of the key NuGet packages for .NET Core:</source>
          <target state="translated">以下是 .NET Core 重要的 NuGet 包列表：</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.Runtime<ept id="p1">](https://www.nuget.org/packages/System.Runtime)</ept> - The most fundamental .NET Core package, including <bpt id="p2">[</bpt>Object<ept id="p2">](http://docs.microsoft.com/dotnet/core/api/System.Object)</ept>, <bpt id="p3">[</bpt>String<ept id="p3">](http://docs.microsoft.com/dotnet/core/api/System.String)</ept>, <bpt id="p4">[</bpt>Array<ept id="p4">](http://docs.microsoft.com/dotnet/core/api/System.Array)</ept>, <bpt id="p5">[</bpt>Action<ept id="p5">](http://docs.microsoft.com/dotnet/core/api/System.Action)</ept> and <bpt id="p6">[</bpt>IList<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph><ept id="p6">](http://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.IList-1)</ept>.</source>
          <target state="translated"><bpt id="p1">[</bpt>System.Runtime<ept id="p1">](https://www.nuget.org/packages/System.Runtime)</ept> - 最基础的 .NET Core 包，包括 <bpt id="p2">[</bpt>Object<ept id="p2">](http://docs.microsoft.com/dotnet/core/api/System.Object)</ept>、<bpt id="p3">[</bpt>String<ept id="p3">](http://docs.microsoft.com/dotnet/core/api/System.String)</ept>、<bpt id="p4">[</bpt>Array<ept id="p4">](http://docs.microsoft.com/dotnet/core/api/System.Array)</ept>、<bpt id="p5">[</bpt>Action<ept id="p5">](http://docs.microsoft.com/dotnet/core/api/System.Action)</ept> 和 <bpt id="p6">[</bpt>IList<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph><ept id="p6">](http://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.IList-1)</ept>。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.Collections<ept id="p1">](https://www.nuget.org/packages/System.Collections)</ept> - A set of (primarily) generic collections, including <bpt id="p2">[</bpt>List<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph><ept id="p2">](http://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.List-1)</ept> and <bpt id="p3">[</bpt>Dictionary<ph id="ph3">&amp;lt;</ph>K,V<ph id="ph4">&amp;gt;</ph><ept id="p3">](http://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.Dictionary-2)</ept>.</source>
          <target state="translated"><bpt id="p1">[</bpt>System.Collections<ept id="p1">](https://www.nuget.org/packages/System.Collections)</ept> - 一组（主要）泛型集合，包括 <bpt id="p2">[</bpt>List<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph><ept id="p2">](http://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.List-1)</ept> 和 <bpt id="p3">[</bpt>Dictionary<ph id="ph3">&amp;lt;</ph>K,V<ph id="ph4">&amp;gt;</ph><ept id="p3">](http://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.Dictionary-2)</ept>。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.Net.Http<ept id="p1">](https://www.nuget.org/packages/System.Net.Http)</ept> - A set of types for HTTP network communication, including <bpt id="p2">[</bpt>HttpClient<ept id="p2">](http://docs.microsoft.com/dotnet/core/api/System.Net.Http.HttpClient)</ept> and <bpt id="p3">[</bpt>HttpResponseMessage<ept id="p3">](http://docs.microsoft.com/dotnet/core/api/System.Net.Http.HttpResponseMessage)</ept>.</source>
          <target state="translated"><bpt id="p1">[</bpt>System.Net.Http<ept id="p1">](https://www.nuget.org/packages/System.Net.Http)</ept> - 一组 HTTP 网络通信类型，包括 <bpt id="p2">[</bpt>HttpClient<ept id="p2">](http://docs.microsoft.com/dotnet/core/api/System.Net.Http.HttpClient)</ept> 和 <bpt id="p3">[</bpt>HttpResponseMessage<ept id="p3">](http://docs.microsoft.com/dotnet/core/api/System.Net.Http.HttpResponseMessage)</ept>。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.IO.FileSystem<ept id="p1">](https://www.nuget.org/packages/System.IO.FileSystem)</ept> - A set of types for reading and writing to local or networked disk-based storage, including <bpt id="p2">[</bpt>File<ept id="p2">](http://docs.microsoft.com/dotnet/core/api/System.IO.File)</ept> and <bpt id="p3">[</bpt>Directory<ept id="p3">](http://docs.microsoft.com/dotnet/core/api/System.IO.Directory)</ept>.</source>
          <target state="translated"><bpt id="p1">[</bpt>System.IO.FileSystem<ept id="p1">](https://www.nuget.org/packages/System.IO.FileSystem)</ept> - 一组用于读写到本地或网络磁盘存储的类型，包括 <bpt id="p2">[</bpt>File<ept id="p2">](http://docs.microsoft.com/dotnet/core/api/System.IO.File)</ept> 和 <bpt id="p3">[</bpt>Directory<ept id="p3">](http://docs.microsoft.com/dotnet/core/api/System.IO.Directory)</ept>。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.Linq<ept id="p1">](https://www.nuget.org/packages/System.Linq)</ept> - A set of types for querying objects, including Enumerable and <bpt id="p2">[</bpt>ILookup<ph id="ph1">&amp;lt;</ph>TKey, TElement<ph id="ph2">&amp;gt;</ph><ept id="p2">](http://docs.microsoft.com/dotnet/core/api/System.Linq.ILookup-2)</ept>.</source>
          <target state="translated"><bpt id="p1">[</bpt>System.Linq<ept id="p1">](https://www.nuget.org/packages/System.Linq)</ept> - 一组对象查询类型，包括 Enumerable 和 <bpt id="p2">[</bpt>ILookup<ph id="ph1">&amp;lt;</ph>TKey, TElement<ph id="ph2">&amp;gt;</ph><ept id="p2">](http://docs.microsoft.com/dotnet/core/api/System.Linq.ILookup-2)</ept>。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.Reflection<ept id="p1">](https://www.nuget.org/packages/System.Reflection)</ept> - A set of types for loading, inspecting and activating types, including <bpt id="p2">[</bpt>Assembly<ept id="p2">](http://docs.microsoft.com/dotnet/core/api/System.Reflection.Assembly)</ept>, <bpt id="p3">[</bpt>TypeInfo<ept id="p3">](http://docs.microsoft.com/dotnet/core/api/System.Reflection.TypeInfo)</ept> and <bpt id="p4">[</bpt>MethodInfo<ept id="p4">](http://docs.microsoft.com/dotnet/core/api/System.Reflection.MethodInfo)</ept>.</source>
          <target state="translated"><bpt id="p1">[</bpt>System.Reflection<ept id="p1">](https://www.nuget.org/packages/System.Reflection)</ept> - 一组用于类型加载、检查与激活的类型，包括 <bpt id="p2">[</bpt>Assembly<ept id="p2">](http://docs.microsoft.com/dotnet/core/api/System.Reflection.Assembly)</ept>、<bpt id="p3">[</bpt>TypeInfo<ept id="p3">](http://docs.microsoft.com/dotnet/core/api/System.Reflection.TypeInfo)</ept> 和 <bpt id="p4">[</bpt>MethodInfo<ept id="p4">](http://docs.microsoft.com/dotnet/core/api/System.Reflection.MethodInfo)</ept>。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Packages are referenced in project.json.</source>
          <target state="translated">包在 project.json 中引用。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>In the example below, the <bpt id="p1">[</bpt>System.Runtime<ept id="p1">](https://www.nuget.org/packages/System.Runtime/)</ept> package is referenced.</source>
          <target state="translated">在以下示例中，引用的是 <bpt id="p1">[</bpt>System.Runtime<ept id="p1">](https://www.nuget.org/packages/System.Runtime/)</ept> 包。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>In most cases, you will not reference the lower-level .NET Core packages directly since you'll end up with too many packages to manage.</source>
          <target state="translated">在大部分情况下，你可能不需要直接引用较低级别的 .Net Core 包，因为引用的包太多了管理起来会让你抓狂。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Instead, you'll reference a metapackage.</source>
          <target state="translated">所以你只需引用元包。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Metapackages</source>
          <target state="translated">元包</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Metapackages are a NuGet package convention for describing a set of packages that are meaningful together.</source>
          <target state="translated">元包就是一个 NuGet 包约定，描述了一组意义相关的包。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>They represent this set of packages by making them dependencies.</source>
          <target state="translated">开发团队利用依赖项来描述这一组包。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>They can optionally establish a framework for this set of packages by specifying a framework.</source>
          <target state="translated">他们通过这一组包来描述一个框架，然后有选择地发布出去。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>By referencing a metapackage, you are, in effect, adding a reference to each of its dependent packages as a single gesture.</source>
          <target state="translated">通过引用一个元包，实际上是添加了对元包中每一个独立包的引用依赖。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>That means that all of the libraries in those packages (refs or libs) are available for IntelliSense (or similar experience) and for publishing (libs only) your app.</source>
          <target state="translated">这意味着这些包中所有的库（ref 或者 lib）都会在 IntelliSense（或类似体验）中可用，同时也会发布（仅 lib）到你的应用中。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Note: The 'lib' and 'ref' terms refer to folders in NuGet packages.</source>
          <target state="translated">注意：术语“lib”和“ref”指代 NuGet 包中的相应文件夹。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>'ref' folders describe the public API of a package via assembly metadata.</source>
          <target state="translated">“ref”文件夹描述的是以程序集元数据表示的公共 API 包。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>'lib' folders contain the implementation of that public API for a given framework.</source>
          <target state="translated">“lib”文件夹包含了这个公共 API 的在给定框架下的实现。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>There are advantages to using metapackages:</source>
          <target state="translated">使用元包具有以下好处：</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Provides a convenient user experience to reference a large set of fine-grained packages.</source>
          <target state="translated">在引用大量细粒度包方面，提供了一种方便的用户体验。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Defines a set of packages (including specific versions) that are tested and work well together.</source>
          <target state="translated">定义了一组经过充分测试且运行良好的包（包括指定的各种版本）。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The .NET Standard Library metapackage:</source>
          <target state="translated">.NET 标准库元包：</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>NETStandard.Library<ept id="p1">](https://www.nuget.org/packages/NETStandard.Library)</ept> - Describes the libraries that are part of the ".NET Standard Library".</source>
          <target state="translated"><bpt id="p1">[</bpt>NETStandard.Library<ept id="p1">](https://www.nuget.org/packages/NETStandard.Library)</ept> - 描述了属于“.Net 标准库”一部分的各种库。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Applies to all .NET implementations (for example, .NET Framework, .NET Core and Mono) that support the .NET Standard Library.</source>
          <target state="translated">适用于所有支持 .NET 标准库的 .NET 实现（例如，.NET Framework、.NET Core 和 Mono）。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Establishes the 'netstandard' framework.</source>
          <target state="translated">也就是“netstandard”框架。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>These are the key .NET Core metapackages:</source>
          <target state="translated">以下是重要的 .NET Core 元包：</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Microsoft.NETCore.App<ept id="p1">](https://www.nuget.org/packages/Microsoft.NETCore.App)</ept> - Describes the libraries that are part of the .NET Core distribution.</source>
          <target state="translated"><bpt id="p1">[</bpt>Microsoft.NETCore.App<ept id="p1">](https://www.nuget.org/packages/Microsoft.NETCore.App)</ept> - 描述了属于 .NET Core 发行版的部分库。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Establishes the <bpt id="p1">[</bpt><ph id="ph1">`.NETCoreApp`</ph> framework<ept id="p1">](https://github.com/dotnet/core-setup/blob/master/pkg/projects/Microsoft.NETCore.App/Microsoft.NETCore.App.pkgproj)</ept>.</source>
          <target state="translated">也就是 <bpt id="p1">[</bpt><ph id="ph1">`.NETCoreApp`</ph> 框架<ept id="p1">](https://github.com/dotnet/core-setup/blob/master/pkg/projects/Microsoft.NETCore.App/Microsoft.NETCore.App.pkgproj)</ept>。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Depends on the smaller <ph id="ph1">`NETStandard.Library`</ph>.</source>
          <target state="translated">它依赖于更小的 <ph id="ph1">`NETStandard.Library`</ph>。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Microsoft.NETCore.Portable.Compatibility<ept id="p1">](https://www.nuget.org/packages/Microsoft.NETCore.Portable.Compatibility)</ept> - A set of compatibility facades that enable mscorlib-based Portable Class Libraries (PCLs) to run on .NET Core.</source>
          <target state="translated"><bpt id="p1">[</bpt>Microsoft.NETCore.Portable.Compatibility<ept id="p1">](https://www.nuget.org/packages/Microsoft.NETCore.Portable.Compatibility)</ept> - 一组兼容外观，使基于 mscorlib 的可移植类库(PCL) 得以在 .Net Core上运行。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Metapackages are referenced just like any other NuGet package in project.json.</source>
          <target state="translated">元包的引用方法就像普通的 NuGet 包一样，在 project.json 中定义。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>In the following example, the <ph id="ph1">`NETStandard.Library`</ph> meta package is referenced, which is used for creating libraries that are portable across .NET runtimes.</source>
          <target state="translated">在下面的示例中，引用了 <ph id="ph1">`NETStandard.Library`</ph> 元包，用于创建一个基于 .Net 运行时的可移植库。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>In the following example, the <ph id="ph1">`Microsoft.NETCore.App`</ph> metapackage is referenced, which is used for creating apps and libraries that are intended to run on and take full advantage of .NET Core.</source>
          <target state="translated">在下面的示例中，引用了 <ph id="ph1">`Microsoft.NETCore.App`</ph> 元包，用于创建应用或库，运行于 .Net Core 之上，并充分使用 .Net Core 所有功能。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>It provides access to a larger set of libraries than are provided by <ph id="ph1">`NETStandard.Library`</ph>.</source>
          <target state="translated">它提供的库访问范围要比 <ph id="ph1">`NETStandard.Library`</ph> 大。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Frameworks</source>
          <target state="translated">框架</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>.NET Core packages each support a set of frameworks, declared with framework folders (within the lib and ref folders mentioned earlier).</source>
          <target state="translated">每个 .NET Core 包都支持一组框架，在框架文件夹中进行声明（就在前面所说的 lib 与 ref 文件夹中）。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Frameworks describe an available API set (and potentially other characteristics) that you can rely on when you target a given framework.</source>
          <target state="translated">框架描述了一组可用的 API（以及潜在的其他特性），所以你可以在指定一个目标框架时使用这些功能。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>They are versioned as new APIs are added.</source>
          <target state="translated">添加新的 API 时，它们就会进入版本控制流程。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>For example, <bpt id="p1">[</bpt>System.IO.FileSystem<ept id="p1">](https://www.nuget.org/packages/System.IO.FileSystem)</ept> supports the following frameworks:</source>
          <target state="translated">例如，<bpt id="p1">[</bpt>System.IO.FileSystem<ept id="p1">](https://www.nuget.org/packages/System.IO.FileSystem)</ept> 支持以下框架：</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>.NETFramework,Version=4.6</source>
          <target state="translated">.NETFramework,Version=4.6</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>.NETStandard,Version=1.3</source>
          <target state="translated">.NETStandard,Version=1.3</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>6 Xamarin platforms (for example, xamarinios10)</source>
          <target state="translated">6 种 Xamarin 平台（例如，xamarinios10）</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>It is useful to contrast the first two of these frameworks, since they are examples of the two different ways that frameworks are defined.</source>
          <target state="translated">将前两个框架进行对比很有帮助，因为它们各自代表了一种不同的框架定义方式。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`.NETFramework,Version=4.6`</ph> framework represents the available APIs in the .NET Framework 4.6.</source>
          <target state="translated"><ph id="ph1">`.NETFramework,Version=4.6`</ph> 框架表示 .NET Framework 4.6 中可用的 API。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>You can produce libraries  compiled with the .NET Framework 4.6 reference assemblies and then distribute those libraries in NuGet packages in a net46 lib folder.</source>
          <target state="translated">你可以生成使用 .NET Framework 4.6 引用程序集编译的库，并以NuGet 包的方式在 net46 lib 文件夹中发布这些库。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>It will be used for apps that target the .NET Framework 4.6 or that are compatible with it.</source>
          <target state="translated">这样，你的库就会被那些基于或者兼容 .Net Framework 4.6 的应用所使用。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>This is how all frameworks have traditionally worked.</source>
          <target state="translated">这是所有框架的传统工作原理。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`.NETStandard,Version=1.3`</ph> framework is a package-based framework.</source>
          <target state="translated"><ph id="ph1">`.NETStandard,Version=1.3`</ph> 框架是一个基于包的框架。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>It relies on packages that target the framework to define and expose APIs in terms of the framework.</source>
          <target state="translated">它依赖基于框架的包，来定义和公开与框架有关的 API。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Package-based Frameworks</source>
          <target state="translated">基于包的框架</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>There is a two-way relationship between frameworks and packages.</source>
          <target state="translated">框架和包之间是一种双向关系。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The first part is defining the APIs available for a given framework, for example <ph id="ph1">`netstandard1.3`</ph>.</source>
          <target state="translated">首先是为一个给定的框架定义了 API，例如 <ph id="ph1">`netstandard1.3`</ph>。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Packages that target <ph id="ph1">`netstandard1.3`</ph> (or compatible frameworks, like <ph id="ph2">`netstandard1.0`</ph>) define the APIs available for <ph id="ph3">`netstandard1.3`</ph>.</source>
          <target state="translated">以 <ph id="ph1">`netstandard1.3`</ph> 为目标的包（或兼容的框架，如 <ph id="ph2">`netstandard1.0`</ph>）定义了适用于 <ph id="ph3">`netstandard1.3`</ph> 的 API。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>That may sound like a circular definition, but it isn't.</source>
          <target state="translated">听起来像是循环定义，然而并不是。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>By virtue of being "package-based", the API definition for the framework comes from packages.</source>
          <target state="translated">从“基于包的”这个词本身的角度来讲，框架的 API 定义是来自于包的。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The framework itself doesn't define any APIs.</source>
          <target state="translated">框架本身并不定义任何 API。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The second part of the relationship is asset selection.</source>
          <target state="translated">其次，是这个双向关系中的资产选择。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Packages can contain assets for multiple frameworks.</source>
          <target state="translated">包可以包含多个框架的资产。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Given a reference to a set of packages and/or metapackages, the framework is needed to determine which asset should be selected, for example <ph id="ph1">`net46`</ph> or <ph id="ph2">`netstandard1.3`</ph>.</source>
          <target state="translated">对于一组包和/或元包的引用，框架需要决定它应选择哪些资产，例如，是 <ph id="ph1">`net46`</ph> 还是 <ph id="ph2">`netstandard1.3`</ph>。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>It is important to select the correct asset.</source>
          <target state="translated">选择正确的资产很重要。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>For example, a <ph id="ph1">`net46`</ph> asset is not likely to be compatible with .NET Framework 4.0 or .NET Core 1.0.</source>
          <target state="translated">例如，<ph id="ph1">`net46`</ph> 资产可能并不与 .NET Framework 4.0 或 .NET Core 1.0 兼容。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Package-based Framework Composition</source>
          <target state="translated">基于包的框架组合</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>You can see this relationship in the image above.</source>
          <target state="translated">可以在上图中看到这种关系。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>API<ept id="p1">*</ept> targets and defines the <bpt id="p2">*</bpt>framework<ept id="p2">*</ept>.</source>
          <target state="translated"><bpt id="p1">*</bpt>API<ept id="p1">*</ept> 选择框架作为目标并定义了框架。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>framework<ept id="p1">*</ept> is used for <bpt id="p2">*</bpt>asset selection<ept id="p2">*</ept>.</source>
          <target state="translated">而<bpt id="p1">*</bpt>框架<ept id="p1">*</ept>用于<bpt id="p2">*</bpt>资产选择<ept id="p2">*</ept>。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>asset<ept id="p1">*</ept> gives you the API.</source>
          <target state="translated"><bpt id="p1">*</bpt>资产<ept id="p1">*</ept>实现了 API。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>It is an interesting question of where a package-based framework's definition ends and where consumption of that definition starts.</source>
          <target state="translated">这里出现了一个有趣的问题：基于包的框架定义的结束之处，正是消费定义开始的地方。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>One can consider your view of the framework as a function of a given project.json file.</source>
          <target state="translated">用户可以将框架视为给定 project.json 文件的一个功能。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Your dependencies create your view of the framework, independent of the publisher(s) of those dependencies.</source>
          <target state="translated">依赖项创建了实际上的框架，该框架独立于这些依赖项的发布服务器。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The two primary package-based frameworks used with .NET Core are:</source>
          <target state="translated">在 .Net Core 基础之上，基于包的框架主要有两个：</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>.NET Standard</source>
          <target state="translated">.NET Standard</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The .NET Standard (TFM: <ph id="ph1">`netstandard`</ph>) framework represents the APIs defined by and built on top of the <bpt id="p1">[</bpt>.NET Standard Library<ept id="p1">](../standard/library.md)</ept>.</source>
          <target state="translated">.NET 标准 (TFM: <ph id="ph1">`netstandard`</ph>) 框架是指基于 <bpt id="p1">[</bpt>.NET 标准库<ept id="p1">](../standard/library.md)</ept>所定义和构建的 API。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Libraries that are intended to run on multiple runtimes should target this framework.</source>
          <target state="translated">如果构建的库将用于在多个运行时上运行，就应将此框架作为目标。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>They will be supported on any .NET Standard compliant runtime, such as .NET Core, .NET Framework and Mono/Xamarin.</source>
          <target state="translated">这样便可在任何一种兼容 .NET 标准的运行时上受支持，例如 .NET Core、.NET Framework 和 Mono/Xamarin。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Each of these runtimes supports a set of .NET Standard versions, depending on which APIs they implement.</source>
          <target state="translated">每个运行时都支持一组 .NET Standard 版本，具体取决于实现的 API。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`NETStandard.Library`</ph> metapackage targets the <ph id="ph2">`netstandard`</ph> framework.</source>
          <target state="translated"><ph id="ph1">`NETStandard.Library`</ph> 元包的目标框架是 <ph id="ph2">`netstandard`</ph>。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The most common way to target <ph id="ph1">`netstandard`</ph> is by referencing this metapackage.</source>
          <target state="translated">要以 <ph id="ph1">`netstandard`</ph> 为目标框架，最常见的方法是引用该元包。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>It describes and provides access to the ~40 .NET  libraries and associated APIs that define the .NET Standard Library.</source>
          <target state="translated">它描述并提供了约 40 个 .NET 库并与 .Net 标准库所定义的 API 相关联。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>You can reference additional packages that target <ph id="ph1">`netstandard`</ph> to get access to additional APIs.</source>
          <target state="translated">可以引用以 <ph id="ph1">`netstandard`</ph> 为目标的其他包来使用其他 API。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>A given <bpt id="p1">[</bpt>NETStandard.Library version<ept id="p1">](versions/index.md)</ept> matches the highest <ph id="ph1">`netstandard`</ph> version it exposed (via its closure).</source>
          <target state="translated">一个给定的 <bpt id="p1">[</bpt>NETStandard.Library 版本<ept id="p1">](versions/index.md)</ept>总是与 <ph id="ph1">`netstandard`</ph> 所公开的最高版本匹配。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The framework reference in project.json is used to select the correct assets from the underlying packages.</source>
          <target state="translated">project.json 中对于框架的引用主要是用于从基础包选择正确的资产。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">`netstandard1.6`</ph> assets are required, as opposed to <ph id="ph2">`netstandard1.4`</ph> or <ph id="ph3">`net46`</ph>, for example.</source>
          <target state="translated">例如，此示例中就需要 <ph id="ph1">`netstandard1.6`</ph> 资产，而不是 <ph id="ph2">`netstandard1.4`</ph> 或 <ph id="ph3">`net46`</ph>。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The framework and metapackage references in project.json do not need to match.</source>
          <target state="translated">project.json 中引用的框架和元包不需要进行匹配。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>For example, the following project.json is valid.</source>
          <target state="translated">例如，以下 project.json 是有效的。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>It may seem strange to target <ph id="ph1">`netstandard1.3`</ph> but use the 1.6.0 version of <ph id="ph2">`NETStandard.Library`</ph>.</source>
          <target state="translated">面向 <ph id="ph1">`netstandard1.3`</ph> 却使用 <ph id="ph2">`NETStandard.Library`</ph> 1.6.0 版本，这一点很奇怪。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>It is a valid use-case, since the metapackage maintains support for older <ph id="ph1">`netstandard`</ph> versions.</source>
          <target state="translated">然而，这是一个有效的用例，因为元包支持更旧的 <ph id="ph1">`netstandard`</ph> 版本。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>It could be the case you've standardized on the 1.6.0 version of the metapackage and use it for all your libraries, which target a variety of <ph id="ph1">`netstandard`</ph> versions.</source>
          <target state="translated">可能恰好你已将 1.6.0 版的元包进行了标准化，然后将其用于所有库，而这些库可以面向各种 <ph id="ph1">`netstandard`</ph> 版本。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>With this approach, you only need to restore <ph id="ph1">`NETStandard.Library`</ph> 1.6.0 and not earlier versions.</source>
          <target state="translated">使用此方法，只需还原 <ph id="ph1">`NETStandard.Library`</ph> 1.6.0，无需加载早期版本。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The reverse would not be valid: targeting <ph id="ph1">`netstandard1.6`</ph> with the 1.3.0 version of <ph id="ph2">`NETStandard.Library`</ph>.</source>
          <target state="translated">反之，把 <ph id="ph1">`netstandard1.6`</ph> 设为目标，却使用 1.3.0 版的 <ph id="ph2">`NETStandard.Library`</ph> 也是无效的。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>You cannot target a higher framework with a lower metapackage, since the lower version metapackage will not expose any assets for that higher framework.</source>
          <target state="translated">你不能把更高版本的框架设为目标，却使用更低版本的元包，因为更低版本的元包不会公开任何更高版本框架的资产。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The [versioning scheme] for metapackages asserts that metapackages match the highest version of the framework they describe.</source>
          <target state="translated">元包资产的[版本控制方案]与框架定义最高版本匹配。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>By virtue of the versioning scheme, the first version of <ph id="ph1">`NETStandard.Library`</ph> is v1.6.0 given that it contains <ph id="ph2">`netstandard1.6`</ph> assets.</source>
          <target state="translated">借助于版本控制方案，<ph id="ph1">`NETStandard.Library`</ph> 的第一个版本是 v1.6.0，因为它包含 <ph id="ph2">`netstandard1.6`</ph> 资产。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>v1.3.0 is used in the example above, for symmetry with the example above, but does not actually exist.</source>
          <target state="translated">而上例中的 v1.3.0 版本，只是为了举例方便，实际上并不存在。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>.NET Core Application</source>
          <target state="translated">.NET Core 应用程序</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The .NET Core Application (TFM: <ph id="ph1">`netcoreapp`</ph>) framework represents the packages and associated APIs that come with the .NET Core distribution and the console application model that it provides.</source>
          <target state="translated">.NET Core 应用程序 (TFM: <ph id="ph1">`netcoreapp`</ph>) 框架表示 .NET Core 发行版及其提供的控制台应用程序模型附带的包和相关 API。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>.NET Core apps must use this framework, due to targeting the console application model, as should libraries that intended to run only on .NET Core.</source>
          <target state="translated">.NET Core 必须使用此框架，因为必须要使用其中的控制台应用程序模型。同时只运行于 .Net Core 平台的库也应使用此模型。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Using this framework restricts apps and libraries to running only on .NET Core.</source>
          <target state="translated">使用此框架后，所有应用和库将只能够在 .Net Core 上运行。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Microsoft.NETCore.App`</ph> metapackage targets the <ph id="ph2">`netcoreapp`</ph> framework.</source>
          <target state="translated"><ph id="ph1">`Microsoft.NETCore.App`</ph> 元包的目标框架是 <ph id="ph2">`netcoreapp`</ph>。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>It provides access to ~60 libraries, ~40 provided by the <ph id="ph1">`NETStandard.Library`</ph> package and ~20 more in addition.</source>
          <target state="translated">它提供了约 60 个库的访问权限，其中约 40 个由 <ph id="ph1">`NETStandard.Library`</ph> 包提供，还有另外 20 个库。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>You can reference additional libraries that target <ph id="ph1">`netcoreapp`</ph> or compatible frameworks, such as <ph id="ph2">`netstandard`</ph>, to get access to additional APIs.</source>
          <target state="translated">可以引用目标框架为 <ph id="ph1">`netcoreapp`</ph> 或与框架（如 <ph id="ph2">`netstandard`</ph>）兼容的库获得对其他 API 的访问权限。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Most of the additional libraries provided by <ph id="ph1">`Microsoft.NETCore.App`</ph> also target <ph id="ph2">`netstandard`</ph> given that their dependencies are satisfied by other <ph id="ph3">`netstandard`</ph> libraries.</source>
          <target state="translated">由 <ph id="ph1">`Microsoft.NETCore.App`</ph> 提供的大部分其他库还可以使用 <ph id="ph2">`netstandard`</ph> 作为目标，如果其他 <ph id="ph3">`netstandard`</ph> 库满足这些框架的依赖项的话。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>That means that <ph id="ph1">`netstandard`</ph> libraries can also reference those packages as dependencies.</source>
          <target state="translated">这意味着，<ph id="ph1">`netstandard`</ph> 库也可以引用这些包作为依赖项。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>