<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-eac019f" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3e75ad86a42b9c8ecc23fe1303830b463a24c3bf</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\porting\third-party-deps.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p1</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ae8a17177cbb1139a7720686f7c39bf3f83fdc59</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">986a48552cf98913d9a6b7a6baf5836c8e63bebb</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Porting to .NET Core - Analyzing your Third-Party Party Dependencies</source>
          <target state="translated">移植到 .NET Core - 分析第三方依赖项</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Porting to .NET Core - Analyzing your Third-Party Dependencies</source>
          <target state="translated">移植到 .NET Core - 分析第三方依赖项</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Porting to .NET Core - Analyzing your Third-Party Party Dependencies</source>
          <target state="translated">移植到 .NET Core - 分析第三方依赖项</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The first step in the porting process is to understand your third party dependencies.</source>
          <target state="translated">移植过程的第一步是了解第三方依赖项。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You need to figure out which of them, if any, don't yet run on .NET Core, and develop a contingency plan for those which don't run on .NET Core.</source>
          <target state="translated">需要找出尚未在 .NET Core 上运行的依赖项（如果有），并为这些没有在 .Net Core 上运行的依赖项制定应变计划。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
          <target state="translated">先决条件</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This article will assume you are using Windows and Visual Studio, and that you have code which runs on the .NET Framework today.</source>
          <target state="translated">今天，本文假定使用 Windows 和 Visual Studio，并拥有在 .NET Framework 上运行的代码。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Analyzing NuGet Packages</source>
          <target state="translated">分析 NuGet 包</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Analyzing NuGet packages for portability is very easy.</source>
          <target state="translated">分析 NuGet 包的可移植性非常简单。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Because a NuGet package is itself a set of folders which contain platform-specific assemblies, all you have to do is check to see if there is a folder which contains a .NET Core assembly.</source>
          <target state="translated">因为 NuGet 包本身是一组包含特定于平台的程序集的文件夹，因此仅需检查确认是否存在包含 .NET Core 程序集的文件夹即可。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Inspecting NuGet Package folders is easiest with the <bpt id="p1">[</bpt>NuGet Package Explorer<ept id="p1">](https://github.com/NuGetPackageExplorer/NuGetPackageExplorer)</ept> tool.</source>
          <target state="translated">检查 NuGet 包文件夹最简单的方法是使用 <bpt id="p1">[</bpt>NuGet Package Explorer<ept id="p1">](https://github.com/NuGetPackageExplorer/NuGetPackageExplorer)</ept> 工具。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Here's how to do it.</source>
          <target state="translated">以下是使用方法。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Download and open the NuGet Package Explorer.</source>
          <target state="translated">下载并打开 NuGet Package Explorer。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Click "Open package from online feed".</source>
          <target state="translated">单击“从在线源打开包”。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Search for the name of the package.</source>
          <target state="translated">搜索包的名称。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Expand the "lib" folder on the right-hand side and look at folder names.</source>
          <target state="translated">展开右侧的“lib”文件夹并查看文件夹名称。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You can also see what a package supports on <bpt id="p1">[</bpt>nuget.org<ept id="p1">](https://www.nuget.org/)</ept> under the <bpt id="p2">**</bpt>Dependencies<ept id="p2">**</ept> section of the page for that package.</source>
          <target state="translated">还可以在该包页面的“依赖项”部分下的 <bpt id="p1">[</bpt>nuget.org<ept id="p1">](https://www.nuget.org/)</ept> 上查看包所支持的内容。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In either case, you'll need to look for a folder or entry on <bpt id="p1">[</bpt>nuget.org<ept id="p1">](https://www.nuget.org/)</ept> with any of the following names:</source>
          <target state="translated">无论哪种情况都需要在 <bpt id="p1">[</bpt>nuget.org<ept id="p1">](https://www.nuget.org/)</ept> 上查找具有以下任何名称的文件夹或项：</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>These are the Target Framework Monikers (TFM) which map to versions of <bpt id="p1">[</bpt>The .NET Standard Library<ept id="p1">](../../standard/library.md)</ept> and traditional Portable Class Library (PCL) profiles which are compatible with .NET Core.</source>
          <target state="translated">这些是映射到 <bpt id="p1">[</bpt>.NET 标准库<ept id="p1">](../../standard/library.md)</ept>版本的目标框架名字对象 (TFM) 以及与 .NET Core 兼容的传统可移植类库 (PCL) 配置文件。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Note that <ph id="ph1">`netcoreapp1.0`</ph>, while compatible, is for applications and not libraries.</source>
          <target state="translated">请注意，兼容的 <ph id="ph1">`netcoreapp1.0`</ph> 适用于应用程序，而非库。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Although there's nothing wrong with using a library which is <ph id="ph1">`netcoreapp1.0`</ph>-based, that library may not be intended for anything <bpt id="p1">*</bpt>other<ept id="p1">*</ept> than consumption by other <ph id="ph2">`netcoreapp1.0`</ph> applications.</source>
          <target state="translated">尽管使用基于 <ph id="ph1">`netcoreapp1.0`</ph> 的库没有任何不妥，但该库可能不适用于<bpt id="p1">*</bpt>不是<ept id="p1">*</ept>由其他 <ph id="ph2">`netcoreapp1.0`</ph> 应用程序所使用的任何内容。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>There are also some legacy TFMs used in pre-release versions of .NET Core that may also be compatible:</source>
          <target state="translated">.NET Core 预发行版本中使用的某些旧 TFM 也可能兼容：</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>While these will likely work with your code, there is no guarantee of compatibility<ept id="p1">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>尽管这些可能适用于代码，但不保证其兼容性<ept id="p1">**</ept>。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Packages with these TFMs were built with pre-release .NET Core packages.</source>
          <target state="translated">使用预发行的 .NET Core 包生成内含这些 TFM 的包。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Take note of when (or if) packages like this are updated to be <ph id="ph1">`netstandard`</ph>-based.</source>
          <target state="translated">请注意此类包更新为基于 <ph id="ph1">`netstandard`</ph> 的包的情况。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>To use a package targeting a traditional PCL or pre-release .NET Core target, you must use the <ph id="ph1">`imports`</ph> directive in your <ph id="ph2">`project.json`</ph> file.</source>
          <target state="translated">若要使用以传统 PCL 或预发行的 .NET Core 目标为目标的包，必须使用 <ph id="ph2">`project.json`</ph> 文件中的 <ph id="ph1">`imports`</ph> 指令。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>What to do when your NuGet package dependency doesn't run on .NET Core</source>
          <target state="translated">NuGet 包依赖项未在.NET Core 上运行时应执行的操作</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>There are a few things you can do if a NuGet package you depend on won't run on .NET Core.</source>
          <target state="translated">如果所依赖的 NuGet 包无法在 .NET Core 上运行，可以执行以下几项操作。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If the project is open source and hosted somewhere like GitHub, you can engage the developer(s) directly.</source>
          <target state="translated">如果项目是开放源代码并托管在诸如 GitHub 中，则可以直接与开发人员交流。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You can contact the author directly on <bpt id="p1">[</bpt>nuget.org<ept id="p1">](https://www.nuget.org/)</ept> by searching for the package and clicking "Contact Owners" on the left hand side of the package's page.</source>
          <target state="translated">可以通过搜索包并单击该包页面左侧的“联系所有者”即可直接在 <bpt id="p1">[</bpt>nuget.org<ept id="p1">](https://www.nuget.org/)</ept> 上与作者取得联系。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You can look for another package that runs on .NET Core which accomplishes the same task as the package you were using.</source>
          <target state="translated">可以查找在.NET Core 上运行的其他包，这些包与所使用的包进行的是相同的任务。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You can attempt to write the code the package was doing yourself.</source>
          <target state="translated">可以尝试自己编写包所执行的代码。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>You could eliminate the dependency on the package by changing the functionality of your app, at least until a compatible version of the package becomes available.</source>
          <target state="translated">可以通过更改应用的功能来清除对包的依赖性，至少在该包有可用的兼容性版本之前都能这样做。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Please remember that open source project maintainers and NuGet package publishers are often volunteers who contribute because they care about a given domain, do it for free, and often have a different daytime job.</source>
          <target state="translated">请记住，开放源代码项目维护者和 NuGet 包发布者通常是因对给定域感兴趣且拥有不同的正常工作而免费参与的志愿者。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If you do reach out, you might start with a positive statement about the library before asking about .NET Core support.</source>
          <target state="translated">如果确实要参与，可能首先需要写一份关于库的积极声明，然后才能咨询有关 .NET Core 支持团队的内容。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If you're unable to resolve your issue with any of the above, you may have to port to .NET Core at a later date.</source>
          <target state="translated">如果采取上述任何操作都无法解决问题，则可能需要移植到最近版本的 .NET Core。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The .NET Team would like to know which libraries are the most important to support next with .NET Core.</source>
          <target state="translated">.NET 团队需要了解下次使用.NET Core 时哪些是需要支持的最重要的库。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>You can also send us mail at <ph id="ph1">dotnet@microsoft.com</ph> about the libraries you'd like to use.</source>
          <target state="translated">还可发送邮件到 <ph id="ph1">dotnet@microsoft.com</ph>，告知我们希望使用的库。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Analyzing Dependencies which aren't NuGet Packages</source>
          <target state="translated">分析不是 NuGet 包的依赖项</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>You may have a dependency that isn't a NuGet package, such as a DLL in the filesystem.</source>
          <target state="translated">用户可能拥有不是 NuGet 包的依赖项，如文件系统中的 DLL。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The only way to determine the portability of that dependency is to run the <bpt id="p1">[</bpt>ApiPort tool<ept id="p1">](https://github.com/Microsoft/dotnet-apiport/blob/master/docs/HowTo/)</ept>.</source>
          <target state="translated">因此确定依赖项是否可移植的唯一方法是运行 <bpt id="p1">[</bpt>ApiPort 工具<ept id="p1">](https://github.com/Microsoft/dotnet-apiport/blob/master/docs/HowTo/)</ept>。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Next steps</source>
          <target state="translated">后续步骤</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If you're porting a library, check out <bpt id="p1">[</bpt>Porting your Libraries<ept id="p1">](libraries.md)</ept>.</source>
          <target state="translated">若要移植库，请参阅 <bpt id="p1">[</bpt>Porting your Libraries<ept id="p1">](libraries.md)</ept>（移植库）。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>