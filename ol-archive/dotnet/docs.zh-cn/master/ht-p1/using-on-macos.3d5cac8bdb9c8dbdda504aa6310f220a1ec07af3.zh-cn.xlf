<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-eac019f" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">12b7bed380db53aad04f0615c6efa6152b3035b7</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\tutorials\using-on-macos.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p1</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">54b17be3e66c9a0cef717b259886343f14b0d49b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cd294cec33ec90246f4d7099eef0577b9101b347</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Getting started with .NET Core on macOS</source>
          <target state="translated">在 macOS 上入门 .NET Core</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Getting started with .NET Core on macOS, using Visual Studio Code</source>
          <target state="translated">使用 Visual Studio Code 在 macOS 上入门 .NET Core</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Getting started with .NET Core on macOS, using Visual Studio Code</source>
          <target state="translated">使用 Visual Studio Code 在 macOS 上入门 .NET Core</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>by <bpt id="p1">[</bpt>Bertrand Le Roy<ept id="p1">](https://github.com/bleroy)</ept>,  <bpt id="p2">[</bpt>Phillip Carter<ept id="p2">](https://github.com/cartermp)</ept>, <bpt id="p3">[</bpt>Bill Wagner<ept id="p3">](https://github.com/billwagner)</ept></source>
          <target state="translated">作者：<bpt id="p1">[</bpt>Bertrand Le Roy<ept id="p1">](https://github.com/bleroy)</ept>、<bpt id="p2">[</bpt>Phillip Carter<ept id="p2">](https://github.com/cartermp)</ept>、<bpt id="p3">[</bpt>Bill Wagner<ept id="p3">](https://github.com/billwagner)</ept></target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Contributions by <bpt id="p1">[</bpt>Toni Solarin-Sodara<ept id="p1">](https://github.com/tsolarin)</ept></source>
          <target state="translated">供稿人： <bpt id="p1">[</bpt>Toni Solarin-Sodara<ept id="p1">](https://github.com/tsolarin)</ept></target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This document provides a tour of the steps and workflow to create a .NET Core Solution using <bpt id="p1">[</bpt>Visual Studio Code<ept id="p1">](http://code.visualstudio.com)</ept>.</source>
          <target state="translated">本文档提供使用 <bpt id="p1">[</bpt>Visual Studio Code<ept id="p1">](http://code.visualstudio.com)</ept> 创建 .NET Core 解决方案的步骤和工作流概述。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You'll learn how to create projects, create unit tests, use the debugging tools, and incorporate third-party libraries via <bpt id="p1">[</bpt>NuGet<ept id="p1">](http://nuget.org)</ept>.</source>
          <target state="translated">将了解到如何通过 <bpt id="p1">[</bpt>NuGet<ept id="p1">](http://nuget.org)</ept> 创建项目、创建单元测试、使用调试工具和合并第三方库。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This article uses Visual Studio Code on Mac OS.</source>
          <target state="translated">本文在 Mac OS 上使用 Visual Studio Code。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Where there are differences, it points out the differences for the Windows platform.</source>
          <target state="translated">不同之处在于，本文指出了与 Windows 平台的区别。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
          <target state="translated">先决条件</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Before starting, you'll need to install the <bpt id="p1">[</bpt>.NET Core SDK<ept id="p1">](https://www.microsoft.com/net/core)</ept>, currently in a preview release.</source>
          <target state="translated">在开始之前，需要安装当前以预览版提供的 <bpt id="p1">[</bpt>.NET Core SDK<ept id="p1">](https://www.microsoft.com/net/core)</ept>。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The .NET Core SDK includes the latest release of the .NET Core framework and runtime.</source>
          <target state="translated">.NET Core SDK 包括最新版本的 .NET Core 框架和运行时。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You'll also need to install <bpt id="p1">[</bpt>Visual Studio Code<ept id="p1">](http://code.visualstudio.com)</ept>.</source>
          <target state="translated">还需要安装 <bpt id="p1">[</bpt>Visual Studio Code<ept id="p1">](http://code.visualstudio.com)</ept>。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>During the course of this article, you'll also install extensions that will improve the .NET Core development experience.</source>
          <target state="translated">在本文进行的过程中，也会安装改进 .NET Core 开发体验的扩展。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You can find the links to all of these at the <bpt id="p1">[</bpt>.NET home page<ept id="p1">](http://dot.net)</ept>.</source>
          <target state="translated">可在 <bpt id="p1">[</bpt>.NET 主页<ept id="p1">](http://dot.net)</ept>找到所有这些内容的链接。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Getting Started</source>
          <target state="translated">入门</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The source for this tutorial is available on <bpt id="p1">[</bpt>GitHub<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/getting-started/golden)</ept>.</source>
          <target state="translated"><bpt id="p1">[</bpt>GitHub<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/getting-started/golden)</ept> 上提供此教程的源。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Start Visual Studio Code.</source>
          <target state="translated">启动 Visual Studio Code。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Press Ctrl + '<ph id="ph1">\`</ph>' (the back-quote character) to open an embedded terminal in VS Code.</source>
          <target state="translated">按 Ctrl+“<ph id="ph1">\`</ph>”（反引号字符），打开 VS Code 中嵌入的终端。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>(Alternatively, you can use a separate terminal window, if you prefer).</source>
          <target state="translated">（或者，如果需要，可以使用单独的终端窗口）。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>By the time we're done, you'll create three projects: a library project, tests for that library project, and a console application that makes use of the library.</source>
          <target state="translated">完成后，将创建三个项目：库项目、对该库项目的测试和使用该库的控制台应用程序。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You'll follow a standard folder structure for the three projects.</source>
          <target state="translated">对于这三个项目，遵循标准文件夹结构。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Following this standard folder structure means that the .NET Core SDK tools understand the relationship between your production code projects and your test code projects.</source>
          <target state="translated">遵循此标准文件夹结构意味着 .NET Core SDK 工具了解生产代码项目和测试代码项目之间的关系。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>That makes your development experience more productive.</source>
          <target state="translated">这可提高开发体验的工作效率。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Let's start by creating those folders.</source>
          <target state="translated">首先，创建这些文件夹。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In the terminal, create a 'golden' directory.</source>
          <target state="translated">在终端中，创建“golden”目录。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Under that directory create <ph id="ph1">`src`</ph> and <ph id="ph2">`test`</ph> directories.</source>
          <target state="translated">在该目录下创建 <ph id="ph1">`src`</ph> 和 <ph id="ph2">`test`</ph> 目录。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Under <ph id="ph1">`src`</ph> create <ph id="ph2">`app`</ph> and <ph id="ph3">`library`</ph> directories.</source>
          <target state="translated">在 <ph id="ph1">`src`</ph> 下创建 <ph id="ph2">`app`</ph> 和 <ph id="ph3">`library`</ph> 目录。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">`test`</ph> create a <ph id="ph2">`test-library`</ph> directory.</source>
          <target state="translated">在 <ph id="ph1">`test`</ph> 中创建 <ph id="ph2">`test-library`</ph> 目录。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You can do this either using the terminal in VS code, or by clicking on the parent folder in VS Code and selecting the "New Folder" icon.</source>
          <target state="translated">可使用 VS Code 中的终端或通过单击 VS Code 中的父文件夹并选择“新建文件夹”图标，来执行此操作。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>In VS Code, open the 'golden' directory.</source>
          <target state="translated">在 VS Code 中，打开“golden”目录。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This directory is the root of your solution.</source>
          <target state="translated">此目录是解决方案的根目录。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Next, create a <ph id="ph1">`global.json`</ph> file in the root directory for your solution.</source>
          <target state="translated">接下来，在根目录中为解决方案创建 <ph id="ph1">`global.json`</ph> 文件。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The contents of <ph id="ph1">`global.json`</ph> are:</source>
          <target state="translated"><ph id="ph1">`global.json`</ph> 的内容是：</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>At this point, your directory tree should look like this:</source>
          <target state="translated">此时，目录树应如下所示：</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Writing the library</source>
          <target state="translated">编写库</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Your next task is to create the library.</source>
          <target state="translated">下一个任务是创建库。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>In the terminal window (either the embedded terminal in VS code, or another terminal), cd to <ph id="ph1">`golden/src/library`</ph> and type the command <ph id="ph2">`dotnet new -t lib`</ph>.</source>
          <target state="translated">在终端窗口（VS Code 中嵌入的终端或其他终端）中，使用 cd 命令定位到 <ph id="ph1">`golden/src/library`</ph> 并键入命令 <ph id="ph2">`dotnet new -t lib`</ph>。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This creates a library project, with two files: <ph id="ph1">`project.json`</ph> and <ph id="ph2">`Library.cs`</ph>.</source>
          <target state="translated">这将创建库项目，包含两个文件：<ph id="ph1">`project.json`</ph> 和 <ph id="ph2">`Library.cs`</ph>。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`project.json`</ph> contains the following information:</source>
          <target state="translated"><ph id="ph1">`project.json`</ph> 包含下列信息：</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This library project will make use of JSON representation of objects, so you'll want to add a reference to the <ph id="ph1">`Newtonsoft.Json`</ph> NuGet package.</source>
          <target state="translated">此库项目将使用对象的 JSON 表示形式，因此需要添加对 <ph id="ph1">`Newtonsoft.Json`</ph> NuGet 包的引用。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>In<ph id="ph1">`project.json`</ph> add the latest pre-release version of the package as a dependency:</source>
          <target state="translated">在 <ph id="ph1">`project.json`</ph> 中，添加包的最新预发布版本作为依赖项：</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>After you've finished adding those dependencies, you need to install those packages into workspace.</source>
          <target state="translated">添加这些依赖项后，需要将这些包安装到工作区。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Run the <ph id="ph1">`dotnet restore`</ph> command to updates all dependencies, and write a <ph id="ph2">`project.lock.json`</ph> file in the project directory.</source>
          <target state="translated">运行 <ph id="ph1">`dotnet restore`</ph> 命令以更新所有依赖项，并在项目目录中编写 <ph id="ph2">`project.lock.json`</ph> 文件。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>This file contains the full dependency tree of all the dependencies in your project.</source>
          <target state="translated">此文件包含项目中所有依赖项的完整依赖关系树。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>You don't need to read this file, it's used by tools in the .NET Core SDK.</source>
          <target state="translated">无需读取此文件，它由 .NET Core SDK 中的工具使用。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Now, let's update the C# code.</source>
          <target state="translated">现在，让我们更新 C# 代码。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Let's create a <ph id="ph1">`Thing`</ph> class that contains one public method.</source>
          <target state="translated">让我们创建包含一个公共方法的 <ph id="ph1">`Thing`</ph> 类。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>This method will return the sum of two numbers, but will do so by converting that number to a JSON string, and then deserializing it.</source>
          <target state="translated">此方法将返回两个数字之和，但会通过将数字转换为 JSON 字符串，再将其反序列化来执行此操作。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Rename the file <ph id="ph1">`Library.cs`</ph> to <ph id="ph2">`Thing.cs`</ph>.</source>
          <target state="translated">将文件 <ph id="ph1">`Library.cs`</ph> 重命名为 <ph id="ph2">`Thing.cs`</ph>。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Then, replace the existing code (for the template-generated Class1) with the following:</source>
          <target state="translated">然后，使用以下代码替换现有代码（对于模板生成的 Class1）：</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>This makes use of a number of modern C# features, such as static usings, expression bodied members, and interpolated strings, that you can learn about in the <bpt id="p1">[</bpt>Learn C#<ept id="p1">](../../csharp/index.md)</ept> section.</source>
          <target state="translated">这将使用大量现代 C# 功能，例如静态 using、表达式体成员和内插字符串。可在<bpt id="p1">[</bpt>了解 C#<ept id="p1">](../../csharp/index.md)</ept> 部分了解相关信息。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Now that you've updated the code, you can build the library using <ph id="ph1">`dotnet build`</ph>.</source>
          <target state="translated">现已更新代码，可以使用 <ph id="ph1">`dotnet build`</ph> 生成库。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>You now have a built <ph id="ph1">`library.dll`</ph> file under <ph id="ph2">`golden/src/library/bin/Debug/netstandard1.6`</ph>.</source>
          <target state="translated">现在， <ph id="ph2">`golden/src/library/bin/Debug/netstandard1.6`</ph> 下有了一个生成的 <ph id="ph1">`library.dll`</ph> 文件。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Writing the test project</source>
          <target state="translated">编写测试项目</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Let's build a test project for this library that you've build.</source>
          <target state="translated">让我们为已生成的库生成测试项目。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Cd into the <ph id="ph1">`test/test-library`</ph> directory.</source>
          <target state="translated">使用 Cd 命令定位到 <ph id="ph1">`test/test-library`</ph> 目录。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Run <ph id="ph1">`dotnet new -t xunittest`</ph> to create a new test project.</source>
          <target state="translated">运行 <ph id="ph1">`dotnet new -t xunittest`</ph> 创建新测试项目。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>You'll need to add a dependency node for the library you wrote in the steps above.</source>
          <target state="translated">将需要为上述步骤中编写的库添加依赖项节点。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Open <ph id="ph1">`project.json`</ph> and update the dependencies section to the following (including the <ph id="ph2">`library`</ph> node, which is the last node below):</source>
          <target state="translated">打开 <ph id="ph1">`project.json`</ph> 并将依赖项部分更新为以下代码（包括以下最后一个 <ph id="ph2">`library`</ph> 节点）：</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`library`</ph> node specifies that this dependency should resolve to a project in the current workspace.</source>
          <target state="translated"><ph id="ph1">`library`</ph> 节点指定此依赖项应解析到当前工作区中的项目。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Without explicitly specifying this, it's possible that the test project would build against a NuGet package of the same name.</source>
          <target state="translated">在未对此显式指定的情况下，测试项目可能会针对相同名称的 NuGet 包进行生成。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Now that the dependencies have been properly configured, let's create the tests for your library.</source>
          <target state="translated">现已正确配置依赖项，可以开始创建库的测试。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Open <ph id="ph1">`Tests.cs`</ph> and replace its contents with the following code:</source>
          <target state="translated">打开 <ph id="ph1">`Tests.cs`</ph>，用以下代码替代其内容：</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Now, run <ph id="ph1">`dotnet restore`</ph>, <ph id="ph2">`dotnet build`</ph> and <ph id="ph3">`dotnet test`</ph>.</source>
          <target state="translated">现在，运行 <ph id="ph1">`dotnet restore`</ph>、<ph id="ph2">`dotnet build`</ph> 和 <ph id="ph3">`dotnet test`</ph>。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The xUnit console test runner will run the one test, and report that it is passing.</source>
          <target state="translated">xUnit 控制台测试运行程序将运行一个测试并报告其正在传递。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Writing the console app</source>
          <target state="translated">编写控制台应用</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>In your terminal, cd to the <ph id="ph1">`golden/src/app`</ph> directory.</source>
          <target state="translated">在终端中，使用 cd 命令定位到 <ph id="ph1">`golden/src/app`</ph> 目录。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Run <ph id="ph1">`dotnet new`</ph> to create a new console application.</source>
          <target state="translated">运行 <ph id="ph1">`dotnet new`</ph> 新建控制台应用程序。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Your console application depends on the library you built and tested in the previous steps.</source>
          <target state="translated">控制台应用程序取决于在前面的步骤中生成和测试的库。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>You need to indicate that by editing <ph id="ph1">`project.json`</ph> to add this dependency.</source>
          <target state="translated">需要编辑 <ph id="ph1">`project.json`</ph> 添加此依赖项来进行指示。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">`dependencies`</ph> node, add the <ph id="ph2">`library`</ph> node as follows:</source>
          <target state="translated">在 <ph id="ph1">`dependencies`</ph> 节点中，添加 <ph id="ph2">`library`</ph> 节点，如下所示：</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`project`</ph> node is important here, as it was in the test library.</source>
          <target state="translated"><ph id="ph1">`project`</ph> 节点在此处很重要，因为它处于测试库中。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>It indicates that this is a project in the current solution, and not a NuGet package.</source>
          <target state="translated">它指示这是当前解决方案中的项目，而不是 NuGet 包。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Run <ph id="ph1">`dotnet restore`</ph> to restore all dependencies.</source>
          <target state="translated">运行 <ph id="ph1">`dotnet restore`</ph> 恢复所有依赖项。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Open <ph id="ph1">`program.cs`</ph> and replace the contents of the <ph id="ph2">`Main`</ph> method with this line:</source>
          <target state="translated">打开 <ph id="ph1">`program.cs`</ph> 并使用此行替换 <ph id="ph2">`Main`</ph> 方法中的内容：</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>You'll need to add a couple <ph id="ph1">`using`</ph> directives to the top of the file:</source>
          <target state="translated">需要将两条 <ph id="ph1">`using`</ph> 指令添加到文件顶部：</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Then, run <ph id="ph1">`dotnet build`</ph>.</source>
          <target state="translated">然后，运行 <ph id="ph1">`dotnet build`</ph>。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>That creates the assemblies, and you can type <ph id="ph1">`dotnet run`</ph> to run the executable.</source>
          <target state="translated">这将创建程序集，可键入 <ph id="ph1">`dotnet run`</ph> 运行可执行文件。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Debugging your application</source>
          <target state="translated">调试应用程序</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>You can debug your code in VS Code using the C# extension.</source>
          <target state="translated">可使用 C# 扩展在 VS Code 中调试代码。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>You install this extension by pressing <ph id="ph1">`F1`</ph> to open the VS Code palette.</source>
          <target state="translated">通过按 <ph id="ph1">`F1`</ph> 打开 VS Code 面板来安装此扩展。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Type <ph id="ph1">`ext install`</ph> to see the list of extensions.</source>
          <target state="translated">键入 <ph id="ph1">`ext install`</ph> 查看扩展列表。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Select the C# extension.</source>
          <target state="translated">选择 C# 扩展。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>(More details are available on the <bpt id="p1">[</bpt>Visual Studio Code C# Extension documentation<ept id="p1">](https://github.com/OmniSharp/omnisharp-vscode/blob/master/debugger.md)</ept> page.)</source>
          <target state="translated">（<bpt id="p1">[</bpt>Visual Studio Code C# 扩展文档<ept id="p1">](https://github.com/OmniSharp/omnisharp-vscode/blob/master/debugger.md)</ept> 页面提供详细信息。）</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>After you install the extension, VS Code will ask that you restart the application to load the new extension.</source>
          <target state="translated">安装扩展后，VS Code 将请求重启应用程序以加载新扩展。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Once the extension is installed, you can open the debugger tab (see figure).</source>
          <target state="translated">安装扩展后，可打开调试器选项卡（见图）。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>VS Code Debugger</source>
          <target state="translated">VS Code 调试器</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>When you start the debugger, VS Code will instruct you to configure the debugger.</source>
          <target state="translated">启动调试器时，VS Code 将指导你配置调试器。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>When you do, it creates a <ph id="ph1">`.vscode`</ph> directory with two files: <ph id="ph2">`tasks.json`</ph> and <ph id="ph3">`launch.json`</ph>.</source>
          <target state="translated">执行此操作时，将创建 <ph id="ph1">`.vscode`</ph> 目录，包含两个文件：<ph id="ph2">`tasks.json`</ph> 和 <ph id="ph3">`launch.json`</ph>。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>These two files control the debugger configuration.</source>
          <target state="translated">这两个文件可控制调试器配置。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>In most projects, this directory is not included in source control.</source>
          <target state="translated">在大多数项目中，此目录不包含在源控件中。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>It is included in the sample associated with this walk through so you can see the edits you need to make.</source>
          <target state="translated">它包含在与此演练关联的示例中，所以可查看需要进行的编辑。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Your solution contains multiple projects, so you'll want to modify each of these files to perform the correct commands.</source>
          <target state="translated">解决方案包含多个项目，因此需要修改每个文件以执行正确命令。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>First, open <ph id="ph1">`tasks.json`</ph>.</source>
          <target state="translated">首先，打开 <ph id="ph1">`tasks.json`</ph>。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The default build task runs <ph id="ph1">`dotnet build`</ph> in the workspace source directory.</source>
          <target state="translated">默认生成任务在工作区源目录中运行 <ph id="ph1">`dotnet build`</ph>。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Instead, you want to run it in the <ph id="ph1">`src/app`</ph> directory.</source>
          <target state="translated">但需要在 <ph id="ph1">`src/app`</ph> 目录中运行它。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>You need to add a <ph id="ph1">`options`</ph> node to set the current working directory to that:</source>
          <target state="translated">因此需要添加 <ph id="ph1">`options`</ph> 节点，将当前工作目录设置为上述目录：</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Next, you'll need to open <ph id="ph1">`launch.json`</ph> and update the program path.</source>
          <target state="translated">接下来，需要打开 <ph id="ph1">`launch.json`</ph> 并更新程序路径。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>You'll see a node under "configurations" that describes the program.</source>
          <target state="translated">将在描述程序的“配置”下看到一个节点。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>You'll see:</source>
          <target state="translated">将看到：</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>You'll change this to:</source>
          <target state="translated">将它更改为：</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>If you are running on Windows, you'll need to update the Application's <ph id="ph1">`project.json`</ph> (in the <ph id="ph2">`src/app`</ph> directory) to generate portable PDB files (this happens by default on Mac OSX and Linux).</source>
          <target state="translated">如果在 Windows 上运行，需要更新应用程序的 <ph id="ph1">`project.json`</ph>（位于 <ph id="ph2">`src/app`</ph> 目录中），以生成可移植 PDB 文件（在 Mac OSX 和 Linux 上，默认发生此情况）。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Add the <ph id="ph1">`debugType`</ph> node inside <ph id="ph2">`buildOptions`</ph>.</source>
          <target state="translated">在 <ph id="ph2">`buildOptions`</ph> 内添加 <ph id="ph1">`debugType`</ph> 节点。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>You'll need to add the <ph id="ph1">`debugType`</ph> node in <ph id="ph2">`project.json`</ph> for both the <ph id="ph3">`src/app`</ph> and <ph id="ph4">`src/library`</ph> folders.</source>
          <target state="translated">需要在 <ph id="ph2">`project.json`</ph> 中，为 <ph id="ph3">`src/app`</ph> 和 <ph id="ph4">`src/library`</ph> 文件夹添加 <ph id="ph1">`debugType`</ph> 节点。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Set a breakpoint at the <ph id="ph1">`WriteLine`</ph> statement in <ph id="ph2">`Main`</ph>.</source>
          <target state="translated">在 <ph id="ph2">`Main`</ph> 中的 <ph id="ph1">`WriteLine`</ph> 语句处设置一个断点。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>You do this by pressing the <ph id="ph1">`F9`</ph> key, or by clicking the mouse in the left margin on the line you want the breakpoint.</source>
          <target state="translated">通过按 <ph id="ph1">`F9`</ph> 键或在需要断点的行的左边距中单击鼠标，来执行此操作。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Open the debugger by pressing the debug icon on the left of the VS Code screen (see figure).</source>
          <target state="translated">通过按 VS Code 屏幕左侧的“调试”图标打开调试器（见图）。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Then, press the Play button to start the application under the debugger.</source>
          <target state="translated">然后，按“开始”按钮，在调试器下启动应用程序。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>You should hit the breakpoint.</source>
          <target state="translated">应命中断点。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Step into the <ph id="ph1">`Get`</ph> method and make sure that you have passed in the correct arguments.</source>
          <target state="translated">单步执行 <ph id="ph1">`Get`</ph> 方法，确保已传入正确的参数。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Make sure that the answer is actually 42.</source>
          <target state="translated">确保答案的确为 42。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>