<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-e631009" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0a3122a3c10838b74801bcc910070745cb9bf0d5</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\preview3\tutorials\using-with-xplat-cli-msbuild-folders.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p1</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5b10e9932383ddc8d90bd74738272d76459bdcdf</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e1b1945eb78c40052ee45746b4db06f6ad77d5cd</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Organizing and testing projects with the .NET Core command line (SDK Preview 3)</source>
          <target state="translated">使用.NET Core 命令行（SDK 预览版 3）组织和测试项目</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Organizing and testing projects with the .NET Core command line (SDK Preview 3)</source>
          <target state="translated">使用.NET Core 命令行（SDK 预览版 3）组织和测试项目</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Organizing and testing projects with the .NET Core command line (SDK Preview 3)</source>
          <target state="translated">使用.NET Core 命令行（SDK 预览版 3）组织和测试项目</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This tutorial follows <bpt id="p1">[</bpt>Getting started with .NET Core on Windows/Linux/macOS using the command line (SDK Preview 3)<ept id="p1">](./using-with-xplat-cli-msbuild.md)</ept> to show how to go beyond simple "hello world" scenarios and pave the way for more advanced and well-organized applications.</source>
          <target state="translated">本教程遵循<bpt id="p1">[</bpt>使用命令行（SDK 预览版 3）在 Windows/Linux/macOS 上实现 .NET Core 入门<ept id="p1">](./using-with-xplat-cli-msbuild.md)</ept>，演示如何超越简单的“hello world”方案，为更高级和组织更良好的应用程序做好铺垫。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Using folders to organize code</source>
          <target state="translated">使用文件夹组织代码</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Say you wanted to introduce some new types to do work on.</source>
          <target state="translated">假设希望引入一些新类型来执行工作。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You can do this by adding more files and making sure to give them namespaces you can include in your <ph id="ph1">`Program.cs`</ph> file.</source>
          <target state="translated">为此，可添加更多文件并确保向其提供可包含在 <ph id="ph1">`Program.cs`</ph> 文件中的命名空间。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This works great when the size of your project is relatively small.</source>
          <target state="translated">项目规模相对较小时，这非常有用。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>However, if you have a larger app with many different data types and potentially multiple layers, you may wish to organize things logically.</source>
          <target state="translated">但是，如果应用较大，具有许多不同的数据类型并且可能有多层，则你可能会想要进行逻辑组织。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This is where folders come into play.</source>
          <target state="translated">这时就该文件夹发挥作用了。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You can either follow along with <bpt id="p1">[</bpt>the NewTypes sample project<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/console-apps/NewTypesMsBuild)</ept> that this guide covers, or create your own files and folders.</source>
          <target state="translated">可按照本指南介绍的 <bpt id="p1">[</bpt>NewTypes 示例项目<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/console-apps/NewTypesMsBuild)</ept>执行操作，或创建自己的文件和文件夹。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>To begin, create a new folder under the root of your project.</source>
          <target state="translated">首先，在项目的根下创建一个新的文件夹。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`/Model`</ph> is chosen here.</source>
          <target state="translated">此处选择 <ph id="ph1">`/Model`</ph>。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Now add some new types to the folder:</source>
          <target state="translated">现在，将一些新类型添加到该文件夹：</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Now, just as if they were files in the same directory, give them all the same namespace so you can include them in your <ph id="ph1">`Program.cs`</ph>.</source>
          <target state="translated">现在，就像它们是同一目录中的文件一样，为其提供相同的命名空间，以便可以将其包含在 <ph id="ph1">`Program.cs`</ph> 中。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Example: Pet Types</source>
          <target state="translated">示例：宠物类型</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This example creates two new types, <ph id="ph1">`Dog`</ph> and <ph id="ph2">`Cat`</ph>, and has them implement a common interface, <ph id="ph3">`IPet`</ph>.</source>
          <target state="translated">此示例创建了两个新类型 <ph id="ph1">`Dog`</ph> 和 <ph id="ph2">`Cat`</ph>，并使它们实现一个公共接口 <ph id="ph3">`IPet`</ph>。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Folder Structure:</source>
          <target state="translated">文件夹结构：</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`IPet.cs`</ph>:</source>
          <target state="translated"><ph id="ph1">`IPet.cs`</ph>：</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Dog.cs`</ph>:</source>
          <target state="translated"><ph id="ph1">`Dog.cs`</ph>：</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Cat.cs`</ph>:</source>
          <target state="translated"><ph id="ph1">`Cat.cs`</ph>：</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Program.cs`</ph>:</source>
          <target state="translated"><ph id="ph1">`Program.cs`</ph>：</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`NewTypes.csproj`</ph>:</source>
          <target state="translated"><ph id="ph1">`NewTypes.csproj`</ph>：</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>And if you run this:</source>
          <target state="translated">如果运行，将出现以下结果：</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>New pet types can be added (such as a <ph id="ph1">`Bird`</ph>), extending this project.</source>
          <target state="translated">现在可以添加新宠物类型（例如 <ph id="ph1">`Bird`</ph>），扩展此项目。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Testing your Console App</source>
          <target state="translated">测试控制台应用</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You'll probably be wanting to test your projects at some point.</source>
          <target state="translated">可能需要在某些时候测试项目。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Here's a good way to do it:</source>
          <target state="translated">下面是一种执行此操作的好办法：</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Move any source of your existing project into a new <ph id="ph1">`src`</ph> folder.</source>
          <target state="translated">将现有项目的任何源移动到新的 <ph id="ph1">`src`</ph> 文件夹。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Create a <ph id="ph1">`/test`</ph> directory, then <ph id="ph2">`cd`</ph> into it.</source>
          <target state="translated">创建 <ph id="ph1">`/test`</ph> 目录，然后将 <ph id="ph2">`cd`</ph> 放入其中。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Initialize the directory with a <ph id="ph1">`dotnet new -t Xunittest`</ph> command.</source>
          <target state="translated">使用 <ph id="ph1">`dotnet new -t Xunittest`</ph> 命令初始化目录。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This assumes Xunit, but you can also use MS Test by replacing <ph id="ph1">`Xunittest`</ph> with <ph id="ph2">`Mstest`</ph>.</source>
          <target state="translated">这将假定 Xunit，但也可通过将 <ph id="ph1">`Xunittest`</ph> 替换为 <ph id="ph2">`Mstest`</ph> 来使用 MS 测试。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Example: Extending the NewTypes project</source>
          <target state="translated">示例：扩展 NewTypes 项目</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Now that the project system is in place, you can create your test project and start writing tests!</source>
          <target state="translated">现在项目系统已就绪，可创建测试项目并开始编写测试！</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>From here on out, this guide will use and extend <bpt id="p1">[</bpt>the sample Types project<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/console-apps/NewTypesMsBuild)</ept>.</source>
          <target state="translated">从现在开始，本指南将使用并扩展<bpt id="p1">[</bpt>示例 Types 项目<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/console-apps/NewTypesMsBuild)</ept>。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Additionally, it will use the <bpt id="p1">[</bpt>Xunit<ept id="p1">](https://xunit.github.io/)</ept> test framework.</source>
          <target state="translated">此外，还将使用 <bpt id="p1">[</bpt>Xunit<ept id="p1">](https://xunit.github.io/)</ept> 测试框架。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Feel free to follow along or create your own multi-project system with tests.</source>
          <target state="translated">可按照指南操作或创建自己的、含测试的多项目系统。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The whole project structure should look like this:</source>
          <target state="translated">整个项目结构应如下所示：</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>There are two new things to make sure you have in your test project:</source>
          <target state="translated">请确保测试项目中具有以下两项新内容：</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>A correct <ph id="ph1">`NewTypesTests.csproj`</ph> file with the following:</source>
          <target state="translated">具有以下内容的正确 <ph id="ph1">`NewTypesTests.csproj`</ph> 文件：</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>A reference to <ph id="ph1">`xunit`</ph></source>
          <target state="translated">对 <ph id="ph1">`xunit`</ph> 的引用</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A reference to <ph id="ph1">`dotnet-test-xunit`</ph></source>
          <target state="translated">对 <ph id="ph1">`dotnet-test-xunit`</ph> 的引用</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>A reference to the namespace corresponding to the code under test</source>
          <target state="translated">引用对应于测试下的代码的命名空间</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This can be built by simply doing <ph id="ph1">`dotnet new -t Xunittest`</ph> from the command-line in the <ph id="ph2">`NewTypesTests`</ph> directory, then adding a project reference to the <ph id="ph3">`NewTypes`</ph> project.</source>
          <target state="translated">这可以通过从 <ph id="ph2">`NewTypesTests`</ph> 目录中的命令行执行 <ph id="ph1">`dotnet new -t Xunittest`</ph>，然后向 <ph id="ph3">`NewTypes`</ph> 项目添加项目引用来轻松生成。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`NewTypesTests/NewTypesTests.csproj`</ph>:</source>
          <target state="translated"><ph id="ph1">`NewTypesTests/NewTypesTests.csproj`</ph>：</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>An Xunit test class.</source>
          <target state="translated">Xunit 测试类。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`PetTests.cs`</ph>:</source>
          <target state="translated"><ph id="ph1">`PetTests.cs`</ph>：</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Now you can run tests!</source>
          <target state="translated">现在可以运行测试！</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><ph id="ph1">`dotnet test`</ph><ept id="p1">](../tools/dotnet-test.md)</ept> command runs the test runner you have specified in your project.</source>
          <target state="translated"><bpt id="p1">[</bpt><ph id="ph1">`dotnet test`</ph><ept id="p1">](../tools/dotnet-test.md)</ept> 命令运行在项目中指定的测试运行程序。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Make sure you start at the top-level directory.</source>
          <target state="translated">确保从顶级目录开始。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Output should look like this:</source>
          <target state="translated">输出应如下所示：</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>