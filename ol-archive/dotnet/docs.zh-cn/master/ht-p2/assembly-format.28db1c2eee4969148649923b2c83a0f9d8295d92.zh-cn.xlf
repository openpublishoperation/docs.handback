<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-6a73dd2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e6212a63e74f2d1525e87480b092861be9f92379</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\assembly-format.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p2</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ede6c3854aab9b51f42f4e28a43b61926e492e83</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b8d15d44ca3191cc1e0e54fe0234341b0299397c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>.NET Assembly File Format</source>
          <target state="translated">.NET 程序集文件格式</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>.NET Assembly File Format</source>
          <target state="translated">.NET 程序集文件格式</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET、.NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>.NET Assembly File Format</source>
          <target state="translated">.NET 程序集文件格式</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The .NET platform defines a binary file format - “assembly” - that is used to fully-describe and contain .NET programs.</source>
          <target state="translated">.NET 平台可定义用于充分描述和包含 .NET 程序的二进制文件格式 -“程序集”。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Assemblies are used for the programs themselves as well as any dependent libraries.</source>
          <target state="translated">程序集用于程序本身以及所有依赖库。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>A .NET program can be executed as one of more assemblies, with no other required artifacts, beyond the appropriate .NET runtime.</source>
          <target state="translated">一个 .NET 程序可作为多个程序集中的其中一个运行，除了适当的运行时外，无需其他项目。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Native dependencies, including operating system APIs, are a separate concern and are not contained within the .NET assembly format, although are sometimes described with this format (for example, WinRT).</source>
          <target state="translated">本机依赖项（包括操作系统 API）是一个需要单独考虑的问题，虽然有时会使用 .NET 程序集格式来描述它，但并未将它包含在此格式内（例如，WinRT）。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Each CLI component carries the metadata for declarations, implementations, and references specific to that component.</source>
          <target state="translated">每个 CLI 组件都带有特定于该组件、用于声明、实现和引用的元数据。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Therefore, the component-specific metadata is referred to as component metadata, and the resulting component is said to be self-describing – from ECMA 335 I.9.1, Components and assemblies.</source>
          <target state="translated">因此，特定于组件的元数据被称为组件元数据，并且自 ECMA 335 I.9.1 生成的组件被认为是自描述组件和程序集。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The format is fully specified and standardized as ECMA 335.</source>
          <target state="translated">该格式完全被指定并标准化为 ECMA 335。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>All .NET compilers and runtimes use this format.</source>
          <target state="translated">所有 .NET 编译器和运行时都使用此格式。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The presence of a documented and infrequently updated binary format has been a major benefit (arguably a requirement) for interoperatibility.</source>
          <target state="translated">已编入文档、偶尔更新的二进制格式的出现对于互操作性而言是一个主要优势（也可以说是需求）。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The format was last updated in a substantive way in 2005 (.NET 2.0) to accommodate generics and processor architecture.</source>
          <target state="translated">该格式上一次进行实质更新是在 2005 年 (.NET 2.0)，目的是为了容纳泛型和处理器体系结构。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The format is CPU- and OS-agnostic.</source>
          <target state="translated">格式为 CPU 和 OS 不可知。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>It has been used as part of .NET runtimes that target many chips and CPUs.</source>
          <target state="translated">它被用作针对许多芯片和 CPU 的 .NET 运行时的一部分。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>While the format itself has Windows heritage, it is implementable on any operating system.</source>
          <target state="translated">虽然格式本身继承了 Windows，但它可用于所有操作系统。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>It’s arguably most significant choice for OS interoperability is that most values are stored in little-endian format.</source>
          <target state="translated">对于 OS 互操作性，这可以说是一项最重大的选择，因为大部分值存储在 Little-endian 格式中。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>It doesn’t have a specific affinity to machine pointer size (for example, 32-bit, 64-bit).</source>
          <target state="translated">它与计算机的指针大小没有特定关联（例如，32 位、64 位）。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The .NET assembly format is also very descriptive about the structure of a given program or library.</source>
          <target state="translated">.NET 程序集格式也详细介绍了给定程序和库的结构。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>It describes the internal components of an assembly, specifically: assembly references and types defined and their internal structure.</source>
          <target state="translated">专门介绍了程序集的内部组件：定义的程序集引用和类型及其内部结构。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Tools or APIs can read and process this information for display or to make programmatic decisions.</source>
          <target state="translated">工具或 API 可读取和处理此信息以进行显示或做出程序化决策。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Format</source>
          <target state="translated">格式</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The .NET binary format is based on the Windows <bpt id="p1">[</bpt>PE file<ept id="p1">](http://en.wikipedia.org/wiki/Portable_Executable)</ept> format.</source>
          <target state="translated">.NET 二进制格式以 Windows <bpt id="p1">[</bpt>PE 文件<ept id="p1">](http://en.wikipedia.org/wiki/Portable_Executable)</ept>格式为基础。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In fact, .NET class libraries are conformant Windows PEs, and appear on first glance to be Windows dynamic link libraries (DLLs) or application executables (EXEs).</source>
          <target state="translated">实际上，.NET 类库符合 Windows PE，咋看之下会显示为 Windows 动态链接库 (DLL) 或应用程序可执行文件 (EXE)。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This is a very useful characteristic on Windows, where they can masquerade as native executable binaries and get some of the same treatment (for example, OS load, PE tools).</source>
          <target state="translated">此特性在 Windows 上十分有用，它们可以伪装成本地可执行二进制文件，并获得相同的处理方式（例如，OS 加载，PE 工具）。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Assembly headers</source>
          <target state="translated">程序集头</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Assembly Headers from ECMA 335 II.25.1, Structure of the runtime file format.</source>
          <target state="translated">来自 ECMA 335 II.25.1 的程序集头，运行时文件格式结构。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Processing the Assemblies</source>
          <target state="translated">处理程序集</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>It is possible to write tools or APIs to process assemblies.</source>
          <target state="translated">可以编写工具或 API 来处理程序集。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Assembly information enables making programmatic decisions at runtime, re-writing assemblies, providing API IntelliSense in an editor and generating documentation.</source>
          <target state="translated">程序集信息能够在运行时做出程序化决策、重新编写程序集、在编辑器中提供 API IntelliSense 以及生成文档。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.Reflection<ept id="p1">](https://msdn.microsoft.com/library/system.reflection.aspx)</ept> and <bpt id="p2">[</bpt>Mono.Cecil<ept id="p2">](http://www.mono-project.com/docs/tools+libraries/libraries/Mono.Cecil/)</ept> are good examples of tools that are frequently used for this purpose.</source>
          <target state="translated"><bpt id="p1">[</bpt>System.Reflection<ept id="p1">](https://msdn.microsoft.com/library/system.reflection.aspx)</ept> 和 <bpt id="p2">[</bpt>Mono.Cecil<ept id="p2">](http://www.mono-project.com/docs/tools+libraries/libraries/Mono.Cecil/)</ept> 是常用于此目的的典型工具。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>