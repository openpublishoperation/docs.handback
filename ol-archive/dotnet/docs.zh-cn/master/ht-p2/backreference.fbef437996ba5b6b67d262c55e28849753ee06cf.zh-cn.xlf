<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-eac019f" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f55ea60d11abcfce4b5fb502e66c513646707bef</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\base-types\backreference.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p2</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">691d2bcc2a0c4c50077ae53c30668b5a43354d9d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">23fb9a7caca026521deb9b9604f4d568d9e3fb7a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Backreference constructs in regular expressions</source>
          <target state="translated">正则表达式中的反向引用构造</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Backreference constructs in regular expressions</source>
          <target state="translated">正则表达式中的反向引用构造</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Backreference constructs in regular expressions</source>
          <target state="translated">正则表达式中的反向引用构造</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Backreferences provide a convenient way to identify a repeated character or substring within a string.</source>
          <target state="translated">反向引用提供了标识字符串中的重复字符或子字符串的方便途径。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For example, if the input string contains multiple occurrences of an arbitrary substring, you can match the first occurrence with a capturing group, and then use a backreference to match subsequent occurrences of the substring.</source>
          <target state="translated">例如，如果输入字符串包含某任意子字符串的多个匹配项，可以使用捕获组匹配第一个出现的子字符串，然后使用反向引用匹配后面出现的子字符串。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>A separate syntax is used to refer to named and numbered capturing groups in replacement strings.</source>
          <target state="translated">单独语法用于引用替换字符串中命名的和带编号的捕获组。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Substitutions in regular expressions<ept id="p1">](substitutions.md)</ept>.</source>
          <target state="translated">有关更多信息，请参见<bpt id="p1">[</bpt>正则表达式中的替换<ept id="p1">](substitutions.md)</ept>。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>.NET defines separate language elements to refer to numbered and named capturing groups.</source>
          <target state="translated">.NET 定义引用编号和命名捕获组的单独语言元素。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For more information about capturing groups, see <bpt id="p1">[</bpt>Grouping constructs in regular expressions<ept id="p1">](grouping.md)</ept>.</source>
          <target state="translated">有关捕获组的详细信息，请参阅<bpt id="p1">[</bpt>正则表达式中的分组构造<ept id="p1">](grouping.md)</ept>。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Numbered Backreferences</source>
          <target state="translated">带编号的反向引用</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A numbered backreference uses the following syntax:</source>
          <target state="translated">带编号的反向引用使用以下语法：</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><ph id="ph1">*</ph><bpt id="p1">*</bpt><ph id="ph2">\*</ph><ept id="p1">*</ept><bpt id="p2">_</bpt>number<ept id="p2">_</ept></source>
          <target state="translated"><ph id="ph1">*</ph><bpt id="p1">*</bpt><ph id="ph2">\*</ph><ept id="p1">*</ept><bpt id="p2">_</bpt>number<ept id="p2">_</ept></target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>where <bpt id="p1">*</bpt>number<ept id="p1">*</ept> is the ordinal position of the capturing group in the regular expression.</source>
          <target state="translated">其中 <bpt id="p1">*</bpt>number<ept id="p1">*</ept> 是正则表达式中捕获组的序号位置。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`\4`</ph> matches the contents of the fourth capturing group.</source>
          <target state="translated">例如，<ph id="ph1">`\4`</ph> 匹配第四个捕获组的内容。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">*</bpt>number<ept id="p1">*</ept> is not defined in the regular expression pattern, a parsing error occurs, and the regular expression engine throws an <bpt id="p2">[</bpt>ArgumentException<ept id="p2">](xref:System.ArgumentException)</ept>.</source>
          <target state="translated">如果正则表达式模式中未定义 <bpt id="p1">*</bpt>number<ept id="p1">*</ept>，则会发生分析错误，并且正则表达式引擎会引发 <bpt id="p2">[</bpt>ArgumentException<ept id="p2">](xref:System.ArgumentException)</ept>。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For example, the regular expression <ph id="ph1">`\b(\w+)\s\1`</ph> is valid, because <ph id="ph2">`(\w+)`</ph> is the first and only capturing group in the expression.</source>
          <target state="translated">例如，正则表达式 <ph id="ph1">`\b(\w+)\s\1`</ph> 有效，因为 <ph id="ph2">`(\w+)`</ph> 是表达式中的第一个也是唯一一个捕获组。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>On the other hand, <ph id="ph1">`\b(\w+)\s\2`</ph> is invalid and throws an argument exception, because there is no capturing group numbered <ph id="ph2">`\2`</ph>.</source>
          <target state="translated"><ph id="ph1">`\b(\w+)\s\2`</ph> 无效，该表达式会因为没有捕获组编号 <ph id="ph2">`\2`</ph> 而引发自变量异常。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Note the ambiguity between octal escape codes (such as <ph id="ph1">`\16`</ph>) and *<bpt id="p1">*</bpt><ph id="ph2">\*</ph><ept id="p1">*</ept><bpt id="p2">_</bpt>number<ept id="p2">_</ept> backreferences that use the same notation.</source>
          <target state="translated">请注意八进制转义代码（如 <ph id="ph1">`\16`</ph>）和使用相同表示法的 *<bpt id="p1">*</bpt><ph id="ph2">\*</ph><ept id="p1">*</ept><bpt id="p2">_</bpt>number<ept id="p2">_</ept> 反向引用之间的多义性。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This ambiguity is resolved as follows:</source>
          <target state="translated">这种多义性可通过如下方式解决：</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The expressions <ph id="ph1">`\1`</ph> through <ph id="ph2">`\9`</ph> are always interpreted as backreferences, and not as octal codes.</source>
          <target state="translated">表达式 <ph id="ph1">`\1`</ph> 到 <ph id="ph2">`\9`</ph> 始终解释为反向应用，而不是八进制代码。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If the first digit of a multidigit expression is 8 or 9 (such as <ph id="ph1">`\80`</ph> or <ph id="ph2">`\91`</ph>), the expression as interpreted as a literal.</source>
          <target state="translated">如果多位表达式的第一个数字是 8 或 9（如 <ph id="ph1">`\80`</ph> 或 <ph id="ph2">`\91`</ph>），该表达式将解释为文本。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Expressions from <ph id="ph1">`\10`</ph> and greater are considered backreferences if there is a backreference corresponding to that number; otherwise, they are interpreted as octal codes.</source>
          <target state="translated">对于编号为 <ph id="ph1">`\10`</ph> 或更大值的表达式，如果存在与该编号对应的反向引用，则将该表达式视为反向引用；否则，将这些表达式解释为八进制代码。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If a regular expression contains a backreference to an undefined group number, a parsing error occurs, and the regular expression engine throws an <bpt id="p1">[</bpt>ArgumentException<ept id="p1">](xref:System.ArgumentException)</ept>.</source>
          <target state="translated">如果正则表达式包含对未定义的组成员的反向引用，则会发生分析错误，并且正则表达式引擎将引发 <bpt id="p1">[</bpt>ArgumentException<ept id="p1">](xref:System.ArgumentException)</ept>。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If the ambiguity is a problem, you can use the <bpt id="p1">**</bpt>\k&lt;<ept id="p1">**</ept><bpt id="p2">_</bpt>name<ept id="p2">_</ept><bpt id="p3">**</bpt><ph id="ph1">&gt;</ph><ept id="p3">**</ept> notation, which is unambiguous and cannot be confused with octal character codes.</source>
          <target state="translated">如果有多义性问题，可以使用 <bpt id="p1">**</bpt>\k&lt;<ept id="p1">**</ept><bpt id="p2">_</bpt>name<ept id="p2">_</ept><bpt id="p3">**</bpt><ph id="ph1">&gt;</ph><ept id="p3">**</ept> 表示法，该表示法是明确的，不会与八进制字符代码混淆。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Similarly, hexadecimal codes such as <ph id="ph1">`\xdd`</ph> are unambiguous and cannot be confused with backreferences.</source>
          <target state="translated">同样，诸如 <ph id="ph1">`\xdd`</ph> 的十六进制代码也是明确的，不会与反向引用混淆。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The following example finds doubled word characters in a string.</source>
          <target state="translated">下面的示例查找字符串中双写的单词字符。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>It defines a regular expression, <ph id="ph1">`(\w)\1,`</ph> which consists of the following elements.</source>
          <target state="translated">它定义一个由下列元素组成的正则表达式 <ph id="ph1">`(\w)\1,`</ph>。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Element</source>
          <target state="translated">元素</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">说明</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Match a word character and assign it to the first capturing group.</source>
          <target state="translated">匹配单词字符，并将其分配给第一个捕获组。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Match the next character that is the same as the value of the first capturing group.</source>
          <target state="translated">匹配值与第一捕获组相同的下一个字符。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Named Backreferences</source>
          <target state="translated">命名的反向引用</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>A named backreference is defined by using the following syntax:</source>
          <target state="translated">使用以下语法定义命名的反向引用：</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>\k&lt;<ept id="p1">**</ept><bpt id="p2">_</bpt>name<ept id="p2">_</ept><bpt id="p3">**</bpt><ph id="ph1">&gt;</ph><ept id="p3">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>\k&lt;<ept id="p1">**</ept><bpt id="p2">_</bpt>name<ept id="p2">_</ept><bpt id="p3">**</bpt><ph id="ph1">&gt;</ph><ept id="p3">**</ept></target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>or:</source>
          <target state="translated">或：</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>\k'<ept id="p1">**</ept><bpt id="p2">_</bpt>name<ept id="p2">_</ept><bpt id="p3">**</bpt>'<ept id="p3">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>\k'<ept id="p1">**</ept><bpt id="p2">_</bpt>name<ept id="p2">_</ept><bpt id="p3">**</bpt>'<ept id="p3">**</ept></target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>where <bpt id="p1">*</bpt>name<ept id="p1">*</ept> is the name of a capturing group defined in the regular expression pattern.</source>
          <target state="translated">其中，<bpt id="p1">*</bpt>name<ept id="p1">*</ept> 是正则表达式模式中定义的捕获组的名称。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">*</bpt>name<ept id="p1">*</ept> is not defined in the regular expression pattern, a parsing error occurs, and the regular expression engine throws an <bpt id="p2">[</bpt>ArgumentException<ept id="p2">](xref:System.ArgumentException)</ept>.</source>
          <target state="translated">如果正则表达式模式中未定义 <bpt id="p1">*</bpt>name<ept id="p1">*</ept>，则会发生分析错误，并且正则表达式引擎会引发 <bpt id="p2">[</bpt>ArgumentException<ept id="p2">](xref:System.ArgumentException)</ept>。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The following example finds doubled word characters in a string.</source>
          <target state="translated">下面的示例查找字符串中双写的单词字符。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>It defines a regular expression, <ph id="ph1">`(?&lt;char&gt;\w)\k&lt;char&gt;`</ph>, which consists of the following elements.</source>
          <target state="translated">它定义一个由下列元素组成的正则表达式 <ph id="ph1">`(?&lt;char&gt;\w)\k&lt;char&gt;`</ph>。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Element</source>
          <target state="translated">元素</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">描述</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Match a word character and assign it to a capturing group named char.</source>
          <target state="translated">匹配单词字符，并将其分配给名为 char 的捕获组。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Match the next character that is the same as the value of the char capturing group.</source>
          <target state="translated">匹配值与 char 捕获组相同的下一个字符。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Note that <bpt id="p1">*</bpt>name<ept id="p1">*</ept> can also be the string representation of a number.</source>
          <target state="translated">请注意，<bpt id="p1">*</bpt>name<ept id="p1">*</ept> 也可以是数字的字符串表示形式。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For example, the following example uses the regular expression <ph id="ph1">`(?&lt;2&gt;\w)\k&lt;2&gt;`</ph> to find doubled word characters in a string.</source>
          <target state="translated">例如，下面的示例使用正则表达式 <ph id="ph1">`(?&lt;2&gt;\w)\k&lt;2&gt;`</ph> 查找字符串中双写的单词字符。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>What Backreferences Match</source>
          <target state="translated">反向引用匹配什么内容</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>A backreference refers to the most recent definition of a group (the definition most immediately to the left, when matching left to right).</source>
          <target state="translated">反向引用引用组的最新定义（从左向右匹配时，最靠近左侧的定义）。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>When a group makes multiple captures, a backreference refers to the most recent capture.</source>
          <target state="translated">当组建立多个捕获时，反向引用会引用最新的捕获。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The following example includes a regular expression pattern, <ph id="ph1">`(?&lt;1&gt;a)(?&lt;1&gt;\1b)*`</ph>, which redefines the \1 named group.</source>
          <target state="translated">下面的示例包含正则表达式模式 <ph id="ph1">`(?&lt;1&gt;a)(?&lt;1&gt;\1b)*`</ph>，该模式重新定义 \1 命名组。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The following table describes each pattern in the regular expression.</source>
          <target state="translated">下表描述了正则表达式中的每个模式。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">模式</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">说明</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Match the character "a" and assign the result to the capturing group named 1.</source>
          <target state="translated">匹配字符“a”，并将结果分配到名为 1 的捕获组。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Match 0 or 1 occurrence of the group named 1 along with a "b", and assign the result to the capturing group named 1.</source>
          <target state="translated">将名为 1 的组的 0 或 1 匹配项与“b”匹配，并将结果分配到名为 1 的捕获组。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>In comparing the regular expression with the input string ("aababb"), the regular expression engine performs the following operations:</source>
          <target state="translated">在比较正则表达式与输入字符串（“aababb”）时，正则表达式引擎执行以下操作：</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>It starts at the beginning of the string, and successfully matches "a" with the expression <ph id="ph1">`(?&lt;1&gt;a)`</ph>.</source>
          <target state="translated">从该字符串的开头开始，成功将“a”与表达式 <ph id="ph1">`(?&lt;1&gt;a)`</ph> 匹配。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The value of the 1 group is now "a".</source>
          <target state="translated">现在 1 组的值为“a”。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>It advances to the second character, and successfully matches the string "ab" with the expression <ph id="ph1">`\1b`</ph>, or "ab".</source>
          <target state="translated">继续匹配第二个字符，成功将字符串“ab”与表达式 <ph id="ph1">`\1b`</ph> 或“ab”匹配。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>It then assigns the result, "ab" to <ph id="ph1">`\1`</ph>.</source>
          <target state="translated">然后，将结果“ab”分配到 <ph id="ph1">`\1`</ph>。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>It advances to the fourth character.</source>
          <target state="translated">继续匹配第四个字符。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The expression <ph id="ph1">`(?&lt;1&gt;\1b)`</ph> is to be matched zero or more times, so it successfully matches the string "abb" with the expression <ph id="ph2">`\1b`</ph>.</source>
          <target state="translated">表达式 <ph id="ph1">`(?&lt;1&gt;\1b)`</ph> 要匹配零次或多次，因此会成功将字符串“abb”与表达式 <ph id="ph2">`\1b`</ph> 匹配。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>It assigns the result, "abb", back to <ph id="ph1">`\1`</ph>.</source>
          <target state="translated">然后，将结果“abb”分配回到 <ph id="ph1">`\1`</ph>。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>In this example, <ph id="ph1">\*</ph> is a looping quantifier -- it is evaluated repeatedly until the regular expression engine cannot match the pattern it defines.</source>
          <target state="translated">在本示例中，<ph id="ph1">\*</ph> 是循环限定符 -- 它将被重复计算，直到正则表达式引擎不能与它定义的模式匹配为止。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Looping quantifiers do not clear group definitions.</source>
          <target state="translated">循环限定符不会清除组定义。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>If a group has not captured any substrings, a backreference to that group is undefined and never matches.</source>
          <target state="translated">如果某个组尚未捕获任何子字符串，则对该组的反向引用是不确定的，永远不会匹配。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>This is illustrated by the regular expression pattern <ph id="ph1">`\b(\p{Lu}{2})(\d{2})?(\p{Lu}{2})\b,`</ph> which is defined as follows:</source>
          <target state="translated">下面演示了正则表达式模式 <ph id="ph1">`\b(\p{Lu}{2})(\d{2})?(\p{Lu}{2})\b,`</ph> 的定义：</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">模式</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">描述</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Begin the match on a word boundary.</source>
          <target state="translated">在单词边界处开始匹配。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Match two uppercase letters.</source>
          <target state="translated">匹配两个大写字母。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>This is the first capturing group.</source>
          <target state="translated">这是第一个捕获组。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Match zero or one occurrence of two decimal digits.</source>
          <target state="translated">匹配两个十进制数的零个或一个匹配项。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>This is the second capturing group.</source>
          <target state="translated">这是第二个捕获组。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Match two uppercase letters.</source>
          <target state="translated">匹配两个大写字母。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>This is the third capturing group.</source>
          <target state="translated">这是第三个捕获组。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>End the match on a word boundary.</source>
          <target state="translated">在单词边界处结束匹配。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>An input string can match this regular expression even if the two decimal digits that are defined by the second capturing group are not present.</source>
          <target state="translated">输入字符串可以匹配此正则表达式，即使第二个捕获组定义的两个十进制数字都不存在。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The following example shows that even though the match is successful, an empty capturing group is found between two successful capturing groups.</source>
          <target state="translated">下面的示例显示了即使匹配成功，也仍会在两个成功的捕获组之间找到空捕获组。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">另请参阅</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Regular expression language - quick reference<ept id="p1">](quick-ref.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>正则表达式语言 - 快速参考<ept id="p1">](quick-ref.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>