<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-eac019f" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f05bd2e2344b4dd61d038278ad02e9c8f357b3a8</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\managed-code.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p2</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f4ae393f454b9e1aea64e24ebe4950b5c232fb9e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f34060472138ab3f41c5b7982e91bfce6e604af4</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>What is “managed code”?</source>
          <target state="translated">什么是“托管代码”？</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>What is “managed code”?</source>
          <target state="translated">什么是“托管代码”？</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>What is “managed code”?</source>
          <target state="translated">什么是“托管代码”？</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>When working with .NET Framework, you will often encounter the term “managed code”.</source>
          <target state="translated">在使用.NET Framework 的过程中，我们经常会看到“托管代码”这个术语。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This document will explain what this term means and additional information around it.</source>
          <target state="translated">本文档解释这个术语的含义及其更多相关信息。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>To put it very simply, managed code is just that: code whose execution is managed by a runtime.</source>
          <target state="translated">简而言之，托管代码就是执行过程交由运行时管理的代码。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In this case, the runtime in question is called the <bpt id="p1">**</bpt>Common Language Runtime<ept id="p1">**</ept> or CLR, regardless of the implementation (<bpt id="p2">[</bpt>Mono<ept id="p2">](http://www.mono-project.com/)</ept> or .NET Framework or .NET Core).</source>
          <target state="translated">在这种情况下，相关的运行时称为<bpt id="p1">**</bpt>公共语言运行时<ept id="p1">**</ept> (CLR)，不管使用的是哪种实现（<bpt id="p2">[</bpt>Mono<ept id="p2">](http://www.mono-project.com/)</ept>、.NET Framework 或.NET Core）。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>CLR is in charge of taking the managed code, compiling it into machine code and then executing it.</source>
          <target state="translated">CLR 负责提取托管代码、将其编译成机器代码，然后执行它。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>On top of that, runtime provides several important services such as automatic memory management, security boundaries, type safety etc.</source>
          <target state="translated">除此之外，运行时还提供多个重要服务，例如自动内存管理、安全边界、类型安全，等等。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Contrast this to the way you would run a C/C++ program, also called “unmanaged code”.</source>
          <target state="translated">相反，如果运行 C/C++ 程序，则运行的代码也称为“非托管代码”。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In the unmanaged world, the programmer is in charge of pretty much everything.</source>
          <target state="translated">在非托管环境中，程序员需要亲自负责处理相当多的事情。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The actual program is, essentially, a binary that the operating system (OS) loads into memory and starts.</source>
          <target state="translated">实际的程序在本质上是操作系统 (OS) 载入内存，然后启动的二进制代码。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Everything else, from memory management to security considerations are a burden of the programmer.</source>
          <target state="translated">其他任何工作 - 从内存管理到安全考虑因素 - 对于程序员来说是一个不小的负担。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Managed code is written in one of the high-level languages that can be run on top of the .NET platform, such as C#, Visual Basic, F# and others.</source>
          <target state="translated">托管代码是使用可在 .NET 平台顶层运行的一种高级语言（例如 C#、Visual Basic、F# 等等）编写的。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>When you compile code written in those languages with their respective compiler, you don’t get machine code.</source>
          <target state="translated">使用相应的编译器编译以这些语言编写的代码时，无法获得机器代码，</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You get <bpt id="p1">**</bpt>Intermediate Language<ept id="p1">**</ept> code which the runtime then compiles and executes.</source>
          <target state="translated">而是获得<bpt id="p1">**</bpt>中间语言<ept id="p1">**</ept>代码，然后运行时会对其进行编译并将其执行。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>C++ is the one exception to this rule, as it can also produce native, unmanaged binaries that run on Windows.</source>
          <target state="translated">C++ 是这条规则的一个例外，因为它也能够生成可在 Windows 上运行的本机非托管二进制代码。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Intermediate Language &amp; execution</source>
          <target state="translated">中间语言和执行</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>What is “Intermediate Language” (or IL for short)?</source>
          <target state="translated">什么是“中间语言”（简称 IL）？</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>It is a product of compilation of code written in high-level .NET languages.</source>
          <target state="translated">中间语言是编译使用高级 .NET 语言编写的代码后获得的结果。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Once you compile your code written in one of these languages, you will get a binary that is made out of IL.</source>
          <target state="translated">对使用其中一种语言编写的代码进行编译后，即可获得 IL 所生成的二进制代码。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>It is important to note that the IL is independent from any specific language that runs on top of the runtime; there is even a separate specification for it that you can read if you’re so inclined.</source>
          <target state="translated">必须注意，IL 独立于在运行时顶层运行的任何特定语言；行业甚至为它单独制定了规范，如果有需要，你可以阅读该规范。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Once you produce IL from your high-level code, you will most likely want to run it.</source>
          <target state="translated">从高级代码生成 IL 后，你很有可能想要运行它。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This is where the CLR takes over and starts the process of <bpt id="p1">**</bpt>Just-In-Time<ept id="p1">**</ept> compiling, or <bpt id="p2">**</bpt>JIT-ing<ept id="p2">**</ept> your code from IL to machine code that can actually be run on a CPU.</source>
          <target state="translated">CLR 此时将接管工作，启动<bpt id="p1">**</bpt>实时<ept id="p1">**</ept> (JIT) 编译过程，或者将代码从 IL <bpt id="p2">**</bpt>实时<ept id="p2">**</ept>编译成可以真正在 CPU 上运行的机器代码。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In this way, the CLR knows exactly what your code is doing and can effectivelly <bpt id="p1">_</bpt>manage<ept id="p1">_</ept> it.</source>
          <target state="translated">这样，CLR 就能确切地知道代码的作用，并可以有效地<bpt id="p1">_</bpt>管理<ept id="p1">_</ept>代码。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Intermediate Language is sometimes also called Common Intermediate Language (CIL) or Microsoft Intermediate Language (MSIL).</source>
          <target state="translated">中间语言有时也称为公共中间语言 (CIL) 或 Microsoft 中间语言 (MSIL)。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Unmanaged code interoperability</source>
          <target state="translated">托管代码互操作性</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Of course, the CLR allows passing the boundaries between managed and unmanaged world, and there is a lot of code that does that, even in the <bpt id="p1">[</bpt>Base Class Libraries<ept id="p1">](framework-libraries.md)</ept>.</source>
          <target state="translated">当然，CLR 允许越过托管与非托管环境之间的边界，同时，即使在<bpt id="p1">[</bpt>基类库<ept id="p1">](framework-libraries.md)</ept>中，也有很多代码可以做到这一点。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This is called <bpt id="p1">**</bpt>interoperability<ept id="p1">**</ept> or just <bpt id="p2">**</bpt>interop<ept id="p2">**</ept> for short.</source>
          <target state="translated">这称为<bpt id="p1">**</bpt>互操作性<ept id="p1">**</ept>，简称 <bpt id="p2">**</bpt>interop<ept id="p2">**</ept>。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>These provisions would allow you to, for example, wrap up an unmanaged library and call into it.</source>
          <target state="translated">例如，使用这些机制可以包装某个非托管库以及调用该库。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>However, it is important to note that once you do this, when the code passes the boundaries of the runtime, the actual management of the execution is again in the hand of unmanged code, and thus falls under the same restrictions.</source>
          <target state="translated">但是，请务必注意，如果采取这种方法，当代码越过运行时的边界时，实际的执行管理将再次交接到托管代码，因而需要遵守相同的限制。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Similar to this, C# is one language that allows you to use unmanaged constructs such as pointers directly in code by utilizing what is known as <bpt id="p1">**</bpt>unsafe context<ept id="p1">**</ept> which designates a piece of code for which the execution is not managed by the CLR.</source>
          <target state="translated">与此类似，C# 语言可让你利用所谓的<bpt id="p1">**</bpt>不安全上下文<ept id="p1">**</ept>（指定执行过程不由 CLR 管理的代码片段），在代码中直接使用非托管构造，例如指针。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>More resources</source>
          <target state="translated">更多资源</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>.NET Framework Conceptual Overview<ept id="p1">](https://msdn.microsoft.com/library/zw4w595w.aspx)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>.NET Framework 概念性概述<ept id="p1">](https://msdn.microsoft.com/library/zw4w595w.aspx)</ept></target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Unsafe Code and Pointers<ept id="p1">](https://msdn.microsoft.com/library/t2yzs44b.aspx)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>不安全代码和指针<ept id="p1">](https://msdn.microsoft.com/library/t2yzs44b.aspx)</ept></target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Interoperability (C# Programming guide)<ept id="p1">](https://msdn.microsoft.com/library/ms173184.aspx)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>互操作性（C# 编程指南）<ept id="p1">](https://msdn.microsoft.com/library/ms173184.aspx)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>