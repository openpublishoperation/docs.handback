<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-4a95368" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">227bdaabc88bddbf2014788d72ef87e75f956795</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\tools\dotnet-pack.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">097dcd13d501eebfeb39909d4416659f08ee1145</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4046d6387253100d9858f8cf0a64080aaf5fac0f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>dotnet-pack command | Microsoft Docs</source>
          <target state="translated">dotnet-pack 命令 | Microsoft Docs</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>The dotnet-pack command creates NuGet packages for your .NET Core project.</source>
          <target state="translated">dotnet-pack 命令會建立 .NET Core 專案的 NuGet 套件。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>dotnet-pack, CLI, CLI command, .NET Core</source>
          <target state="translated">dotnet-pack, CLI, CLI 命令, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>dotnet-pack</source>
          <target state="translated">dotnet-pack</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This topic applies to .NET Core Tools Preview 2.</source>
          <target state="translated">本主題適用於 .NET Core 工具 Preview 2。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For the  Visual Studio 2017 RC - .NET Core Tools Preview 4 version, see the <bpt id="p1">[</bpt>dotnet-pack (Tooling Preview 4)<ept id="p1">](../preview3/tools/dotnet-pack.md)</ept> topic.</source>
          <target state="translated">Visual Studio 2017 RC - .NET Core 工具 Preview 4 版本，請參閱 <bpt id="p1">[</bpt>dotnet-pack 命令 (工具 Preview 4)<ept id="p1">](../preview3/tools/dotnet-pack.md)</ept> 主題。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
          <target state="translated">名稱</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`dotnet-pack`</ph> - Packs the code into a NuGet package.</source>
          <target state="translated"><ph id="ph1">`dotnet-pack`</ph> - 將程式碼封裝到 NuGet 套件。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Synopsis</source>
          <target state="translated">概要</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">描述</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`dotnet pack`</ph> command builds the project and creates NuGet packages.</source>
          <target state="translated"><ph id="ph1">`dotnet pack`</ph> 命令會建置專案，並建立 NuGet 套件。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The result of this operation is two packages with the <ph id="ph1">`nupkg`</ph> extension.</source>
          <target state="translated">這項作業的結果是兩個具有 <ph id="ph1">`nupkg`</ph> 擴充功能的套件。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>One package contains the code and the other contains the debug symbols.</source>
          <target state="translated">其中一個套件包含程式碼，另一個套件則包含偵錯符號。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>NuGet dependencies of the project being packed are added to the nuspec file, so they are able to be resolved when the package is installed.</source>
          <target state="translated">正在封裝之專案的 NuGet 相依性會新增至 nuspec 檔案，因此可以在安裝套件時進行解析。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Project-to-project references are not packaged inside the project.</source>
          <target state="translated">專案對專案參考不會封裝到專案內。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Currently, you need to have a package per project if you have project-to-project dependencies.</source>
          <target state="translated">目前，如果您有專案對專案相依性，則一個專案需要有一個套件。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`dotnet pack`</ph> by default first builds the project.</source>
          <target state="translated"><ph id="ph1">`dotnet pack`</ph> 預設會先建置專案。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If you wish to avoid this, pass the <ph id="ph1">`--no-build`</ph> option.</source>
          <target state="translated">如果您想要避免這種情況，請傳遞 <ph id="ph1">`--no-build`</ph> 選項。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This can be useful in Continuous Integration (CI) build scenarios in which you know the code was just previously built, for example.</source>
          <target state="translated">例如，這可能適用於您知道先前剛建立程式碼的持續整合 (CI) 組建案例。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Options</source>
          <target state="translated">選項</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Prints out a short help for the command.</source>
          <target state="translated">印出命令的簡短說明。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The project to pack.</source>
          <target state="translated">要封裝的專案。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>It can be either a path to a <bpt id="p1">[</bpt>project.json<ept id="p1">](project-json.md)</ept> file or to a directory.</source>
          <target state="translated">它可以是 <bpt id="p1">[</bpt>project.json<ept id="p1">](project-json.md)</ept> 檔案或目錄的路徑。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If omitted, it will default to the current directory.</source>
          <target state="translated">省略時，將預設為目前的目錄。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Places the built packages in the directory specified.</source>
          <target state="translated">將已建置的套件放置在指定的目錄中。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Does not build the project before packing.</source>
          <target state="translated">請不要在封裝之前建置專案。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Places the temporary build artifacts in the specified directory.</source>
          <target state="translated">將暫存的組建成品放在指定的目錄中。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>By default, they go to the <ph id="ph1">`obj`</ph> directory in the current directory.</source>
          <target state="translated">它們預設會移至目前目錄中的 <ph id="ph1">`obj`</ph> 目錄。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Configuration to use when building the project.</source>
          <target state="translated">要在建置專案時使用的組態。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If not specified, will default to <ph id="ph1">`Debug`</ph>.</source>
          <target state="translated">如果未指定，將預設為 <ph id="ph1">`Debug`</ph>。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Updates the star in <ph id="ph1">`-*`</ph> package version suffix with a specified string.</source>
          <target state="translated">使用指定的字串，更新 <ph id="ph1">`-*`</ph> 套件版本尾碼中的星號。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">範例</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Pack the project in the current directory:</source>
          <target state="translated">封裝目前目錄中的專案：</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Pack the app1 project:</source>
          <target state="translated">封裝 app1 專案：</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Pack the project in the current directory and place the resulting packages into the specified folder:</source>
          <target state="translated">封裝目前目錄中的專案，並將產生的套件放置到指定的資料夾中：</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Pack the project in the current directory into the specified folder and skip the build step:</source>
          <target state="translated">將目前目錄中的專案封裝到指定的資料夾，並略過建置步驟︰</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Pack the current project and updates the resulting packages version with the given suffix.</source>
          <target state="translated">封裝目前的專案，並使用指定的尾碼來更新產生的套件版本。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>For example, version <ph id="ph1">`1.0.0-*`</ph> will be updated to <ph id="ph2">`1.0.0-ci-1234`</ph>.</source>
          <target state="translated">例如，版本 <ph id="ph1">`1.0.0-*`</ph> 將會更新為 <ph id="ph2">`1.0.0-ci-1234`</ph>。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>