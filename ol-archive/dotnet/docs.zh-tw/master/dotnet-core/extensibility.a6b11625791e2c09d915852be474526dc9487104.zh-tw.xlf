<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-4a95368" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">48f06f0af3768f7129e0a2b3a89bbdc7795959dc</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\tools\extensibility.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6da0eabec8c925ba8827103e5e2be4ed65535c79</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a6f160e1c3d4ab8e8aadf1c7b84fff5442447571</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>.NET Core CLI extensibility model | Microsoft Docs</source>
          <target state="translated">.NET Core CLI 擴充性模型 | Microsoft Docs</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>.NET Core CLI extensibility model</source>
          <target state="translated">.NET Core CLI 擴充性模型</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>CLI, extensibility, custom commands, .NET Core</source>
          <target state="translated">CLI, 擴充性, 自訂命令, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>.NET Core CLI extensibility model</source>
          <target state="translated">.NET Core CLI 擴充性模型</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This topic applies to .NET Core Tools Preview 2.</source>
          <target state="translated">本主題適用於 .NET Core 工具 Preview 2。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For the  Visual Studio 2017 RC - .NET Core Tools Preview 4 version, see the <bpt id="p1">[</bpt>.NET Core CLI extensibility model (Tooling Preview 4)<ept id="p1">](../preview3/tools/extensibility.md)</ept> topic.</source>
          <target state="translated">Visual Studio 2017 RC - .NET Core 工具 Preview 4 版本，請參閱 <bpt id="p1">[</bpt>.NET Core CLI 擴充性模型 (工具 Preview 4)<ept id="p1">](../preview3/tools/extensibility.md)</ept> 主題。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="translated">概觀</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This document will cover the main ways how to extend the CLI tools and explain the scenarios that drive each of them.</source>
          <target state="translated">本文件將涵蓋如何擴充 CLI 工具的主要方法，並說明驅動所有項目的案例。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>It will the outline how to consume the tools as well as provide short notes on how to build both types of tools.</source>
          <target state="translated">它將會概述如何使用這些工具，以及提供如何建置這兩種工具的簡短附註。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>How to extend CLI tools</source>
          <target state="translated">如何擴充 CLI 工具</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The CLI tools can be extended in two main ways:</source>
          <target state="translated">CLI 工具可以透過兩種主要方式進行擴充︰</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Via NuGet packages on a per-project basis</source>
          <target state="translated">透過個別專案的 NuGet 套件</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Via the system's PATH</source>
          <target state="translated">透過系統的 PATH</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The two extensibility mechanisms outlined above are not exclusive; you can use both or just one.</source>
          <target state="translated">上述這兩種擴充性機制都不是專用的；您可以使用兩者或其中一個。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Which one to pick depends largely on what is the goal you are trying to achieve with your extension.</source>
          <target state="translated">選擇哪一個主要取決於您嘗試使用擴充功能達成的目標。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Per-project based extensibility</source>
          <target state="translated">個別專案擴充性</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Per-project tools are <bpt id="p1">[</bpt>portable console applications<ept id="p1">](../deploying/index.md)</ept> that are distributed as NuGet packages.</source>
          <target state="translated">個別專案工具是散發為 NuGet 套件的<bpt id="p1">[</bpt>可攜式主控台應用程式<ept id="p1">](../deploying/index.md)</ept>。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Tools are only available in the context of the project that references them and for which they are restored; invocation outside of the context of the project (for example, outside of the directory that contains the project) will fail as the command will not be able to be found.</source>
          <target state="translated">工具僅適用於參考它們以及還原它們的專案內容；因為將會找不到命令，所以專案內容外部的叫用 (例如，包含專案的目錄外部) 會失敗。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>These tools are perfect for build servers as well, since nothing outside of <ph id="ph1">`project.json`</ph> is needed.</source>
          <target state="translated">因為不需要 <ph id="ph1">`project.json`</ph> 外部的任何項目，所以這些工具也非常適合組建伺服器。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The build process runs restore for the project it builds and tools will be available.</source>
          <target state="translated">建置流程會執行所建置專案的還原，並且可以使用這些工具。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Language projects, such as F#, are also in this category; after all, each project can only be written in one specific language.</source>
          <target state="translated">語言專案 (例如 F#) 也在這個分類中；畢竟，每個專案都只能以一種特定語言撰寫。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Finally, this extensibility model provides support for creation of tools that need access to the built output of the project.</source>
          <target state="translated">最後，這個擴充性模型支援建立存取專案的已建置輸出所需的工具。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For instance, various Razor view tools in <bpt id="p1">[</bpt>ASP.NET<ept id="p1">](https://www.asp.net/)</ept> MVC applications fall into this category.</source>
          <target state="translated">例如，<bpt id="p1">[</bpt>ASP.NET<ept id="p1">](https://www.asp.net/)</ept> MVC 應用程式中的各種 Razor 檢視工具都會落入這個分類。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Consuming per-project tools</source>
          <target state="translated">使用個別專案工具</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Consuming these tools requires you to add a <ph id="ph1">`tools`</ph> node to your <ph id="ph2">`project.json`</ph>.</source>
          <target state="translated">使用這些工具時，需要您將 <ph id="ph1">`tools`</ph> 節點新增至 <ph id="ph2">`project.json`</ph>。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Inside the <ph id="ph1">`tools`</ph> node, you reference the package in which the tool resides.</source>
          <target state="translated">在 <ph id="ph1">`tools`</ph> 節點內，您參考工具所在的套件。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>After running <ph id="ph1">`dotnet restore`</ph>, the tool and its dependencies are restored.</source>
          <target state="translated">執行 <ph id="ph1">`dotnet restore`</ph> 之後，會還原工具和其相依性。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For tools that need to load the build output of the project for execution, there is usually another dependency which is listed under the regular dependencies in the project file.</source>
          <target state="translated">針對需要載入專案建置輸出來執行的工具，通常在專案檔中的一般相依性下方會列出另一個相依性。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>This means that tools that load project's code have two components:</source>
          <target state="translated">這表示載入專案程式碼的工具有兩個元件︰</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The "tools" main invoker</source>
          <target state="translated">"tools" 主要叫用者</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Any number of other tools that contain the logic to work with</source>
          <target state="translated">包含要處理之邏輯的任意數目的其他工具</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Why two things?</source>
          <target state="translated">為什麼是兩件事呢？</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Tools that need to load the build output of a project need to have unified dependency graph with the project they are working.</source>
          <target state="translated">需要載入專案建置輸出的工具，需要具有含其正在處理之專案的整合相依性圖形。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>By adding the dependency bit, we enable NuGet to resolve these dependencies as a unified graph.</source>
          <target state="translated">透過新增相依性位元，可以讓 NuGet 將這些相依性解析為統一圖形。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The invoker is there because it needs to reason about the location as well as the frameworks of the dependency tool.</source>
          <target state="translated">叫用者的存在原因是需要推論位置以及相依性工具架構。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The invoker can accept all of the redirection arguments (<ph id="ph1">`-c`</ph>, <ph id="ph2">`-o`</ph>, <ph id="ph3">`-b`</ph>) that the user specifies and finds the dependency tool; it can also implement any policies for cases where multiple dependency tools exist for multiple frameworks (that is, does it run all of them, just one, etc.) In general, logic can be shared between these two tools any way that is needed.</source>
          <target state="translated">叫用者可以接受使用者所指定和尋找相依性工具的所有重新導向引數 (<ph id="ph1">`-c`</ph>、<ph id="ph2">`-o`</ph>、<ph id="ph3">`-b`</ph>)；它也可以在多個架構有多個相依性工具時實作任何原則 (亦即，全部執行、只執行一個等)。一般而言，需要時，這兩個工具可以共用邏輯。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Let's review an example of adding a simple tools-only tool to a simple project.</source>
          <target state="translated">讓我們檢閱在簡單專案中新增僅限簡單工具的工具的範例。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Given an example command called <ph id="ph1">`dotnet-api-search`</ph> that allows you to search through the NuGet packages for the specified API, here is a console application's <ph id="ph2">`project.json`</ph> file that uses that tool:</source>
          <target state="translated">如果具有稱為 <ph id="ph1">`dotnet-api-search`</ph> 的範例命令可讓您搜尋所指定 API 的 NuGet 套件，則以下是使用該工具的主控台應用程式 <ph id="ph2">`project.json`</ph> 檔案：</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`tools`</ph> node is structured in a similar way as the <ph id="ph2">`dependencies`</ph> node.</source>
          <target state="translated"><ph id="ph1">`tools`</ph> 節點的建構方式與 <ph id="ph2">`dependencies`</ph> 節點類似。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>It needs the package ID of the package containing the tool and its version at the very least.</source>
          <target state="translated">它需要最少包含工具和其版本的套件的套件識別項。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>In the example above, we can see that there is another statement, the <ph id="ph1">`imports`</ph> one.</source>
          <target state="translated">在上述範例中，我們可以看到有另一個陳述式 ( <ph id="ph1">`imports`</ph> 陳述式)。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This influences the tool's restore process and specifies that the tool is also compatible, in addition to any targeted frameworks the tools has, with <ph id="ph1">`dnxcore50`</ph> target.</source>
          <target state="translated">這會影響工具的還原程序，並且指定工具也與 <ph id="ph1">`dnxcore50`</ph> 目標相容 (除了工具所具有的任何目標架構之外)。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For more information you can consult the <bpt id="p1">[</bpt>project.json reference<ept id="p1">](project-json.md)</ept>.</source>
          <target state="translated">如需詳細資訊，您可以查閱 <bpt id="p1">[</bpt>project.json 參考<ept id="p1">](project-json.md)</ept>。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Building tools</source>
          <target state="translated">建置工具</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>As mentioned, tools are just portable console applications.</source>
          <target state="translated">如前所述，工具只是可攜式主控台應用程式。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>You would build one as you would build any console application.</source>
          <target state="translated">在建置任何主控台應用程式時會建立一個。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>After you build it, you would use <bpt id="p1">[</bpt><ph id="ph1">`dotnet pack`</ph><ept id="p1">](dotnet-pack.md)</ept> command to create a NuGet package (nupkg) that contains your code, information about its dependencies and so on.</source>
          <target state="translated">在您建立它之後，將使用 <bpt id="p1">[</bpt><ph id="ph1">`dotnet pack`</ph><ept id="p1">](dotnet-pack.md)</ept> 命令來建立包含您程式碼、其相依性相關資訊等的 NuGet 套件 (nupkg)。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The package name can be whatever the author wants, but the application inside, the actual tool binary, has to conform to the convention of <ph id="ph1">`dotnet-&lt;command&gt;`</ph> in order for <ph id="ph2">`dotnet`</ph> to be able to invoke it.</source>
          <target state="translated">套件名稱可以是作者想要的任何名稱，但在應用程式內，實際工具二進位檔必須符合 <ph id="ph1">`dotnet-&lt;command&gt;`</ph> 的慣例，<ph id="ph2">`dotnet`</ph> 才能叫用它。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Since tools are portable applications, the user consuming the tool has to have the version of the .NET Core libraries that the tool was built against in order to run the tool.</source>
          <target state="translated">因為工具是可攜式應用程式，所以使用工具的使用者必須具有用來建置工具的 .NET Core 程式庫版本，才能執行工具。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Any other dependency that the tool uses and that is not contained within the .NET Core libraries is restored and placed in the NuGet cache.</source>
          <target state="translated">工具所使用以及 .NET Core 程式庫內未包含的任何其他相依性都會進行還原並放到 NuGet 快取中。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The entire tool is, therefore, run using the assemblies from the .NET Core libraries as well as assemblies from the NuGet cache.</source>
          <target state="translated">因此，會使用 .NET Core 程式庫中的組件以及 NuGet 快取中的組件來執行整個工具。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>These kind of tools have a dependency graph that is completely separate from the dependency graph of the project that uses them.</source>
          <target state="translated">這類工具的相依性圖形必須與使用這些工具之專案的相依性圖形完全分開。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The restore process will first restore the project's dependencies, and will then restore each of the tools and their dependencies.</source>
          <target state="translated">還原程序會先還原專案的相依性，接著還原每個工具和其相依性。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>You can find richer examples and different combinations of this in the <bpt id="p1">[</bpt>.NET Core CLI repo<ept id="p1">](https://github.com/dotnet/cli/tree/rel/1.0.0-preview2/TestAssets/TestProjects)</ept>.</source>
          <target state="translated">您可以在 <bpt id="p1">[</bpt>.NET Core CLI 存放庫<ept id="p1">](https://github.com/dotnet/cli/tree/rel/1.0.0-preview2/TestAssets/TestProjects)</ept>中找到更多範例和這類不同的組合。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>You can also see the <bpt id="p1">[</bpt>implementation of tools used<ept id="p1">](https://github.com/dotnet/cli/tree/rel/1.0.0-preview2/TestAssets/TestPackages)</ept> in the same repo.</source>
          <target state="translated">您也可以在相同的存放庫中查看<bpt id="p1">[</bpt>所使用工具的實作<ept id="p1">](https://github.com/dotnet/cli/tree/rel/1.0.0-preview2/TestAssets/TestPackages)</ept>。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Building tools that load project's build outputs for execution is slightly different.</source>
          <target state="translated">載入專案建置輸出來執行的建置工具會有些許不同。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>As stated, for these kinds of tools there are two components:</source>
          <target state="translated">如所述，這類工具有兩個元件︰</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>A dispatcher tool that the user invokes</source>
          <target state="translated">使用者所叫用的發送器工具</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>A framework-specific dependency that contains the logic on how to find the build outputs and what to do with it</source>
          <target state="translated">架構特有相依性，內含如何尋找組建輸出和其處理方式的邏輯</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>A prime example of this are <bpt id="p1">[</bpt>Entity Framework (EF)<ept id="p1">](https://github.com/aspnet/EntityFramework)</ept> commands as well as the <bpt id="p2">[</bpt><ph id="ph1">`dotnet test`</ph><ept id="p2">](dotnet-test.md)</ept> command.</source>
          <target state="translated">這個的基本範例是 <bpt id="p1">[</bpt>Entity Framework (EF)<ept id="p1">](https://github.com/aspnet/EntityFramework)</ept> 命令和 <bpt id="p2">[</bpt><ph id="ph1">`dotnet test`</ph><ept id="p2">](dotnet-test.md)</ept> 命令。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>In both cases, there is a tool that is referenced in the <ph id="ph1">`tools`</ph> node of the <ph id="ph2">`project.json`</ph> and that is the main dispatcher.</source>
          <target state="translated">在這兩種情況下，於 <ph id="ph2">`project.json`</ph> 的 <ph id="ph1">`tools`</ph> 節點中會參考一種工具，而有一種工具是主要發送器。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The user invokes this tool on the command line.</source>
          <target state="translated">使用者會在命令列上叫用這個工具。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The second piece of the puzzle is the dependency that is given in the project's main dependencies (either root ones or framework-specific ones).</source>
          <target state="translated">第二個部分是專案主要相依性中指定的相依性 (根相依性或架構特有相依性)。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>This package contains the actual logic of the tool.</source>
          <target state="translated">這個套件包含工具的實際邏輯。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The package is a normal dependency, thus it will be restored as part of the restore process for the project.</source>
          <target state="translated">套件是標準相依性，因此它將會還原為專案還原程序的一部分。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Unlike the previous kind of tools, these tool are actually part of the graph of the project that consumes them.</source>
          <target state="translated">與前一類工具不同，這些工具實際上是使用它們之專案的圖形一部分。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>This is because they need access to the project's code and potentially all of its dependencies.</source>
          <target state="translated">原因是它們需要存取專案的程式碼，也可能需要存取其所有相依性。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>For instance, the EF tools need this because they need to scan the assemblies to find the code they need, such as migrations.</source>
          <target state="translated">例如，EF 工具需要這個項目的原因是需要掃描組件來找出所需的程式碼 (例如移轉)。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Another reason why this two-pronged solution exists is to allow a cleaner invocation model.</source>
          <target state="translated">另一個有這兩個尖端方案的原因是允許更乾淨的叫用模型。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Most CLI commands that drop certain artifacts on disk (for example, <ph id="ph1">`dotnet build`</ph>, <ph id="ph2">`dotnet publish`</ph>) allow users to redirect the outputs to a different path using the <ph id="ph3">`--output`</ph> argument or <ph id="ph4">`--build-base-path`</ph> argument or <ph id="ph5">`--configuration`</ph> argument.</source>
          <target state="translated">在磁碟上放置特定成品的大部分 CLI 命令 (例如，<ph id="ph1">`dotnet build`</ph>、<ph id="ph2">`dotnet publish`</ph>) 都允許使用者使用 <ph id="ph3">`--output`</ph> 引數、<ph id="ph4">`--build-base-path`</ph> 引數或 <ph id="ph5">`--configuration`</ph> 引數將輸出重新導向至不同路徑。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>For EF tools, for example, to be able to find the build output of your project, you would have to provide the same arguments with the same values to <bpt id="p1">*</bpt>both<ept id="p1">*</ept> <ph id="ph1">`dotnet`</ph> driver as well as the <ph id="ph2">`ef`</ph> command.</source>
          <target state="translated">例如，針對 EF 工具，若要能夠找到您專案的建置輸出，您必須提供 <bpt id="p1">*</bpt>兩個<ept id="p1">*</ept> <ph id="ph1">`dotnet`</ph> 驅動程式和 <ph id="ph2">`ef`</ph> 命令具有相同值的相同引數。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>With the invocation model, the users pass any arguments to the dispatcher tool which can then use that to find the needed binary that contains the logic in the output directories.</source>
          <target state="translated">使用者可以使用叫用模型將任何引數傳遞給發送器工具，然後使用該發送器工具，在輸出目錄中找到包含邏輯的所需二進位檔。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>A good example of this approach can be found in the <bpt id="p1">[</bpt>.NET Core CLI repo<ept id="p1">](https://github.com/dotnet/cli)</ept>:</source>
          <target state="translated">這種方式的不錯範例位於 <bpt id="p1">[</bpt>.NET Core CLI 存放庫<ept id="p1">](https://github.com/dotnet/cli)</ept>中：</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Sample project.json file<ept id="p1">](https://github.com/dotnet/cli/blob/rel/1.0.0-preview2/TestAssets/DesktopTestProjects/AppWithDirectDependencyDesktopAndPortable/project.json)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>範例 project.json 檔案<ept id="p1">](https://github.com/dotnet/cli/blob/rel/1.0.0-preview2/TestAssets/DesktopTestProjects/AppWithDirectDependencyDesktopAndPortable/project.json)</ept></target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Implementation of the dispatcher<ept id="p1">](https://github.com/dotnet/cli/tree/rel/1.0.0-preview2/TestAssets/TestPackages/dotnet-dependency-tool-invoker)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>發送器的實作<ept id="p1">](https://github.com/dotnet/cli/tree/rel/1.0.0-preview2/TestAssets/TestPackages/dotnet-dependency-tool-invoker)</ept></target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Implementation of the framework-specific dependency<ept id="p1">](https://github.com/dotnet/cli/tree/rel/1.0.0-preview2/TestAssets/TestPackages/dotnet-desktop-and-portable)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>架構特有相依性的實作<ept id="p1">](https://github.com/dotnet/cli/tree/rel/1.0.0-preview2/TestAssets/TestPackages/dotnet-desktop-and-portable)</ept></target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>PATH-based extensibility</source>
          <target state="translated">PATH 擴充性</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>PATH-based extensibility is usually used for development machines where you need a tool that conceptually covers more than a single project.</source>
          <target state="translated">PATH 擴充性通常用於開發電腦，而在開發電腦中，您需要有概念上涵蓋多個單一專案的工具。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The main drawback of this extensions mechanism is that it is tied to the machine where the tool exists.</source>
          <target state="translated">這個擴充功能機制的主要缺點是繫結至工具所在的電腦。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>If you need it on another machine, you would have to deploy it.</source>
          <target state="translated">如果您需要在另一部電腦上使用它，則必須部署它。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>This pattern of CLI toolset extensibility is very simple.</source>
          <target state="translated">這種模式的 CLI 工具組擴充性十分簡單。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>As covered in the <bpt id="p1">[</bpt>.NET Core CLI overview<ept id="p1">](index.md)</ept>, <ph id="ph1">`dotnet`</ph> driver can run any command that is named after the <ph id="ph2">`dotnet-&lt;command&gt;`</ph> convention.</source>
          <target state="translated">如 <bpt id="p1">[</bpt>.NET Core CLI 概觀<ept id="p1">](index.md)</ept>中所涵蓋，<ph id="ph1">`dotnet`</ph> 驅動程式可以執行任何在 <ph id="ph2">`dotnet-&lt;command&gt;`</ph> 慣例後面命名的命令。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The default resolution logic will first probe several locations and will finally fall to the system PATH.</source>
          <target state="translated">預設解析邏輯會先探查數個位置，最後再轉到系統 PATH。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>If the requested command exists in the system PATH and is a binary that can be invoked, <ph id="ph1">`dotnet`</ph> driver will invoke it.</source>
          <target state="translated">如果要求的命令存在於系統 PATH 中，而且是可叫用的二進位檔，<ph id="ph1">`dotnet`</ph> 驅動程式將會叫用它。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The binary can be pretty much anything that the operating system can execute.</source>
          <target state="translated">二進位檔幾乎是作業系統可以執行的任何項目。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>On Unix systems, this means anything that has the execute bit set via <ph id="ph1">`chmod +x`</ph>.</source>
          <target state="translated">在 Unix 系統上，這表示任何透過 <ph id="ph1">`chmod +x`</ph> 設定執行位元的項目。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>On Windows it means anything that Windows knows how to run.</source>
          <target state="translated">在 Windows 上，這表示 Windows 知道如何執行的任何項目。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>As an example, let's take a look at a very simple implementation of a <ph id="ph1">`dotnet clean`</ph> command.</source>
          <target state="translated">例如，讓我們查看十分簡單的 <ph id="ph1">`dotnet clean`</ph> 命令實作。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>We will use <ph id="ph1">`bash`</ph> to implement this command.</source>
          <target state="translated">我們將使用 <ph id="ph1">`bash`</ph> 來實作這個命令。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The command will simply delete the <ph id="ph1">`bin/`</ph> and <ph id="ph2">`obj/`</ph> directories in the current directory.</source>
          <target state="translated">這個命令只會刪除目前目錄中的 <ph id="ph1">`bin/`</ph> 和 <ph id="ph2">`obj/`</ph> 目錄。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`--lock`</ph> argument is passed to it, it will also delete <ph id="ph2">`project.lock.json`</ph> file.</source>
          <target state="translated">如果將 <ph id="ph1">`--lock`</ph> 引數傳遞給它，則也會刪除 <ph id="ph2">`project.lock.json`</ph> 檔案。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The entirety of the command is given below.</source>
          <target state="translated">這個命令的全部內容如下。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>On macOS, we can save this script as <ph id="ph1">`dotnet-clean`</ph> and set its executable bit with <ph id="ph2">`chmod +x dotnet-clean`</ph>.</source>
          <target state="translated">在 macOS 上，我們可以將這個指令碼儲存為 <ph id="ph1">`dotnet-clean`</ph>，並使用 <ph id="ph2">`chmod +x dotnet-clean`</ph> 設定其可執行位元。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>We can then create a symbolic link to it in <ph id="ph1">`/usr/local/bin`</ph> using the command <ph id="ph2">`ln -s dotnet-clean /usr/local/bin/`</ph>.</source>
          <target state="translated">我們接著可以使用 <ph id="ph2">`ln -s dotnet-clean /usr/local/bin/`</ph> 命令，以在 <ph id="ph1">`/usr/local/bin`</ph> 中建立其符號連結。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>This will make it possible to invoke the clean command using the <ph id="ph1">`dotnet clean`</ph> syntax.</source>
          <target state="translated">這可能會使用 <ph id="ph1">`dotnet clean`</ph> 語法來叫用 clean 命令。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>You can test this by creating an app, running <ph id="ph1">`dotnet build`</ph> on it and then running <ph id="ph2">`dotnet clean`</ph>.</source>
          <target state="translated">測試方式是建立應用程式，並在其上執行 <ph id="ph1">`dotnet build`</ph>，然後執行 <ph id="ph2">`dotnet clean`</ph>。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Conclusion</source>
          <target state="translated">結論</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The .NET Core CLI tools allow two main extensibility points.</source>
          <target state="translated">.NET Core CLI 工具允許兩個主要擴充點。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The per-project tools are contained within the project's context, but they allow easy installation through restoration.</source>
          <target state="translated">個別專案工具都包含在專案內容內，但允許透過還原輕鬆地進行安裝。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>PATH-based tools are good for general, cross-project tools that are usable on a single machine.</source>
          <target state="translated">PATH 工具適用於可在單一電腦上使用的一般跨專案工具。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>