<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-4a95368" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">261af1368f9966d8f485ab9ba252f15da31e05b2</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\preview3\tools\layering.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">01b6528b0db10cfeb5f021fa804defd805d58dcf</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7af36cc8dcb1608e61a134ae45e762b254a39789</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>.NET Core Command Line Tools Preview 4 Architecture | Microsoft Docs</source>
          <target state="translated">.NET Core 命令列工具 Preview 4 架構 | Microsoft Docs</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Preview 4 brings about certain changes to the way the overall .NET Core tools are layered.</source>
          <target state="translated">Preview 4 提供整體 .NET Core 工具分層方式的特定變更。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>CLI, extensibility, custom commands, .NET Core</source>
          <target state="translated">CLI, 擴充性, 自訂命令, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>High-level overview of changes in CLI Preview 4</source>
          <target state="translated">CLI Preview 4 中變更的高階概觀</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This document will describe in high-level the changes that moving from <ph id="ph1">`project.json`</ph> to MSBuild and <ph id="ph2">`csproj`</ph> project system bring.</source>
          <target state="translated">此文件將以高階方式說明從 <ph id="ph1">`project.json`</ph> 改為使用 MSBuild 和 <ph id="ph2">`csproj`</ph> 專案系統帶來的變更。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>It will outline the new way the tooling is layered all-up and which new pieces are available and what is their place in the overall picture.</source>
          <target state="translated">它將概述工具總分層的新方式，以及可以使用的新項目還有它們在整體狀況中的位置。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>After reading this article, you should have a better understanding of all of the pieces that make up .NET Core tooling after moving to MSBuild and <ph id="ph1">`csproj`</ph>.</source>
          <target state="translated">閱讀此文章後，您應該會對改為使用 MSBuild 和 <ph id="ph1">`csproj`</ph> 之後，組成 .NET Core 工具之所有項目有進一步了解。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Moving away from project.json</source>
          <target state="translated">從 project.json 移開</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The biggest change in the Preview 4 tooling for .NET Core is certainly the <bpt id="p1">[</bpt>move away from project.json to csproj<ept id="p1">](https://blogs.msdn.microsoft.com/dotnet/2016/05/23/changes-to-project-json/)</ept> as the project system.</source>
          <target state="translated">.NET Core 的 Preview 4 工具中最大的變更，絕對是將專案系統<bpt id="p1">[</bpt>從 project.json 移動到 csproj<ept id="p1">](https://blogs.msdn.microsoft.com/dotnet/2016/05/23/changes-to-project-json/)</ept>。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Preview 4version of the command line tools is the first release of .NET Core command line tooling that does not contain any support for project.json.</source>
          <target state="translated">命令列工具的 Preview 4 版本是 .NET Core 命令列工具的第一個版本，其中不包含 project.json 的任何支援。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>That means that it cannot be used to build, run or publish project.json based applications and libraries.</source>
          <target state="translated">這表示它無法用來建置、執行或發佈以 project.json 為基礎的應用程式與程式庫。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In order to use this version of the tools, you will need to migrate your existing projects or start new ones.</source>
          <target state="translated">若要使用此版本的工具，您必須移轉您現有的專案，或開始新的專案。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>As part of this move, the custom build engine that was developed to build project.json projects was replaced with a mature and fully capable build engine called <bpt id="p1">[</bpt>MSBuild<ept id="p1">](https://github.com/Microsoft/msbuild)</ept>.</source>
          <target state="translated">做為移動的一部分，開發用來建置 project.json 專案的自訂建置引擎會以成熟且功能完整、名稱為 <bpt id="p1">[</bpt>MSBuild<ept id="p1">](https://github.com/Microsoft/msbuild)</ept> 的建置引擎取代。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>MSBuild is a well-known engine in the .NET community, since it has been a key technology since the platform's first release.</source>
          <target state="translated">MSBuild 是 .NET 社群中眾所周知的引擎，因為它從該平台首次發行以來一直就是關鍵技術。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Of course, because it needs to build .NET Core applications, MSBuild has been ported to .NET Core and can be used on any platform that .NET Core runs on.</source>
          <target state="translated">當然，因為它需要建置 .NET Core 應用程式，MSBuild 已經移植到 .NET Core，且可以在執行 .NET Core 的任何平台上使用。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>One of the main promises of .NET Core is that of a cross-platform development stack, and we have made sure that this move does not break that promise.</source>
          <target state="translated">.NET Core 其中一個主要承諾就是跨平台開發堆疊，而我們也以確認此移動不會中斷該承諾。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If you are new to MSBuild and would like to learn more about it, you can start by reading the <bpt id="p1">[</bpt>MSBuild Concepts<ept id="p1">](https://docs.microsoft.com/visualstudio/msbuild/msbuild-concepts)</ept> article.</source>
          <target state="translated">如果您不熟悉 MSBuild 且希望深入了解它，您可以透過閱讀 <bpt id="p1">[</bpt>MSBuild 概念<ept id="p1">](https://docs.microsoft.com/visualstudio/msbuild/msbuild-concepts)</ept>一文開始。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The tooling layers</source>
          <target state="translated">工具分層</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>With the move away from the existing project system as well as with building engine switches, the question that naturally follows is do any of these changes change the overall "layering" of the whole .NET Core tooling ecosystem?</source>
          <target state="translated">離開現有的專案系統以及轉換建置引擎，接下來很自然的問題就是這些變更是否會變更完整 .NET Core 工具生態系統的整體「分層」呢？</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Are there new bits and components?</source>
          <target state="translated">有新的項目和元件嗎？</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Let's start with a quick refresher on Preview 2 layering as shown in the following picture:</source>
          <target state="translated">讓我們開始快速複習 Preview 2 分層，如下列圖片所示︰</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Preview 2 tools high-level architecture</source>
          <target state="translated">Preview 2 工具高階架構</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The layering of the tools is quite simple.</source>
          <target state="translated">這些工具的分層相當簡單。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>At the bottom we have the .NET Core Command Line tools as a foundation.</source>
          <target state="translated">在底部我們有 .NET Core 命令列工具做為基礎。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>All other, higher-level tools such as Visual Studio or VS Code, depend and rely on the CLI to build projects, restore dependencies and so on.</source>
          <target state="translated">所有其他的高階工具 (例如 Visual Studio 或 VS Code) 則依存並仰賴 CLI 來建置專案、還原相依性等。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This meant that, for example, if Visual Studio wanted to perform a restore operation, it would call into <ph id="ph1">`dotnet restore`</ph> command in the CLI.</source>
          <target state="translated">舉例來說，這表示如果 Visual Studio 希望執行還原作業，它會呼叫 CLI 中的 <ph id="ph1">`dotnet restore`</ph> 命令。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>With the move to the new project system, the previous diagram changes:</source>
          <target state="translated">隨著移動到新的專案系統，之前的圖表有所變更：</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Preview 4 tools high-level architecture</source>
          <target state="translated">Preview 4 工具高階架構</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The main difference is that the CLI is not the foundational layer anymore; this role is now filled by the "shared SDK component".</source>
          <target state="translated">主要差異就是 CLI 不再是基本層；此角色現在會填入「共用的 SDK 元件」。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This shared SDK component is a set of targets and associated tasks that are responsible for compiling your code, publishing it, packing NuGet packages etc. The SDK itself is open-source and is available on GitHub on the <bpt id="p1">[</bpt>SDK repo<ept id="p1">](https://github.com/dotnet/sdk)</ept>.</source>
          <target state="translated">共用的 SDK 元件是負責編譯您的程式碼、發行程式碼，封裝 NuGet 套件等的一組目標和關聯工作。SDK 本身是開放原始碼，而且您可以在 GitHub 的 <bpt id="p1">[</bpt>SDK 存放庫<ept id="p1">](https://github.com/dotnet/sdk)</ept>上找到它。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>A "target" is a MSBuild term that indicates a named operation that MSBuild can invoke.</source>
          <target state="translated">「目標」是表示 MSBuild 可叫用之具名作業的 MSBuild 詞彙。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>It is usually coupled with one or more tasks that execute some logic that the target is supposed to do.</source>
          <target state="translated">它通常會搭配執行目標應該要執行之某些邏輯的一或多個工作。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>MSBuild supports many ready-made targets such as <ph id="ph1">`Copy`</ph> or <ph id="ph2">`Execute`</ph>; it also allows users to write their own tasks using managed code and define targets to execute those tasks.</source>
          <target state="translated">MSBuild 支援許多現成的目標，例如 <ph id="ph1">`Copy`</ph> 或 <ph id="ph2">`Execute`</ph>；它也允許使用者使用受管理程式碼撰寫自己的工作，並定義目標以執行那些工作。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>MSBuild tasks<ept id="p1">](https://docs.microsoft.com/visualstudio/msbuild/msbuild-tasks)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱 <bpt id="p1">[</bpt>MSBuild 工作<ept id="p1">](https://docs.microsoft.com/visualstudio/msbuild/msbuild-tasks)</ept>。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>All the toolsets now consume the shared SDK component and its targets, CLI included.</source>
          <target state="translated">所有工具組現在使用共用的 SDK 元件及其目標，包含 CLI。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For example, the next version of Visual Studio will not call into <ph id="ph1">`dotnet restore`</ph> command to restore dependencies for .NET Core projects, it will use the "Restore" target directly.</source>
          <target state="translated">例如，下一版 Visual Studio 將不會呼叫 <ph id="ph1">`dotnet restore`</ph> 命令來還原 .NET Core 專案的相依性，它會直接使用「還原」目標。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Since these are MSBuild targets, you can also use raw MSBuild to execute them using the <bpt id="p1">[</bpt>dotnet msbuild<ept id="p1">](dotnet-msbuild.md)</ept> command.</source>
          <target state="translated">由於這些都是 MSBuild 目標，您也可以使用原始的 MSBuild 來使用 <bpt id="p1">[</bpt>dotnet msbuild<ept id="p1">](dotnet-msbuild.md)</ept> 命令執行它們。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Preview 4 CLI commands</source>
          <target state="translated">Preview 4 CLI 命令</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The shared SDK component means that the majority of existing CLI commands have been re-implemented as MSBuild tasks and targets.</source>
          <target state="translated">共用的 SDK 元件表示大部分現有的 CLI 命令已經重新實作為 MSBuild 工作和目標。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>What does this mean for the CLI commands and your usage of the toolset?</source>
          <target state="translated">這對 CLI 命令和您的工具組的使用方式有什麼意義？</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>From an usage perspective, it doesn't change the way you use the CLI.</source>
          <target state="translated">從使用方式觀點來看，它不會變更您使用 CLI 的方式。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The CLI still has the core commands that exist in Preview 2 release:</source>
          <target state="translated">CLI 仍然具備存在於 Preview 2 版本中的核心命令：</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>These commands still do what you expect them to do (new up a project, build it, publish it, pack it and so on).</source>
          <target state="translated">這些命令仍然可以執行您所期望的動作 (新建專案、建置專案、發行專案、封裝專案等)。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Majority of the options are not changed, and are still there, and you can consult either the commands' help screens (using <ph id="ph1">`dotent &lt;command&gt; --help`</ph>) or Preview 4 documentation on this site to get familiar with any changes.</source>
          <target state="translated">大部分的選項都沒有變更，且仍然存在，而您可以查閱命令的說明畫面 (使用 <ph id="ph1">`dotent &lt;command&gt; --help`</ph>) 或此網站上的 Preview 4 文件，以熟悉任何變更。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>From an execution perspective, the CLI commands will take their parameters and construct a call to "raw" MSBuild that will set the needed properties and run the desired target.</source>
          <target state="translated">從執行觀點而言，CLI 命令會接受輸入參數並建構對「原始」MSBuild 的呼叫，這會設定所需的屬性，並執行所需的目標。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>To better illustrate this, consider the following command:</source>
          <target state="translated">為進一步說明這一點，請考慮下列命令︰</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This command is publishing an application into a <ph id="ph1">`pub`</ph> folder using the "Release" configuration.</source>
          <target state="translated">此命令會使用「發行」組態，將應用程式發佈至 <ph id="ph1">`pub`</ph> 資料夾中。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Internally, this command gets translated into the following MSBuild invocation:</source>
          <target state="translated">就內部而言，此命令會轉譯成下列 MSBuild 引動過程︰</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The notable exception to this rule are <ph id="ph1">`new`</ph> and <ph id="ph2">`run`</ph> commands, as they have not been implemented as MSBuild targets.</source>
          <target state="translated">此規則值得注意的例外狀況為 <ph id="ph1">`new`</ph> 和 <ph id="ph2">`run`</ph> 命令，因為它們尚未實作為 MSBuild 目標。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Conclusion</source>
          <target state="translated">結論</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>This document outlined at a high-level the changes that are happening to the overall CLI tooling architecture and functioning that are coming with Preview 4.</source>
          <target state="translated">此文件概述 Preview 4 隨附之整體 CLI 工具架構以及運作所發生的高階變更。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>It has introduced the notion of the shared SDK component as well as explained how the CLI commands function, from a technical perspective, in Preview 4.</source>
          <target state="translated">它從技術觀點介紹了 Preview 4 中共用的 SDK 元件的概念，以及說明 CLI 功能運作的方式。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>