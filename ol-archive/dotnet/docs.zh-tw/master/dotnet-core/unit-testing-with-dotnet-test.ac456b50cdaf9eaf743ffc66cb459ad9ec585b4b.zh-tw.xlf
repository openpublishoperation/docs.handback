<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b5c25fc" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cd860241f5f20b6a4f1ccfec60e0c9cd5079152a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\testing\unit-testing-with-dotnet-test.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3c82dffc8e200be96467dc35105d3c832b0c5d39</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0e8f442ab61448a9951f2ca8b104f67b74b595a4</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Unit Testing in .NET Core using dotnet test | Microsoft Docs</source>
          <target state="translated">使用 DotNet 測試的 .NET Core 單元測試 | Microsoft Docs</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Unit Testing in .NET Core using dotnet test</source>
          <target state="translated">使用 DotNet 測試的 .NET Core 單元測試</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Unit Testing in .NET Core using dotnet test</source>
          <target state="translated">使用 DotNet 測試的 .NET Core 單元測試</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>By <bpt id="p1">[</bpt>Steve Smith<ept id="p1">](http://ardalis.com)</ept> and <bpt id="p2">[</bpt>Bill Wagner<ept id="p2">](https://github.com/BillWagner)</ept></source>
          <target state="translated">作者 <bpt id="p1">[</bpt>Steve Smith<ept id="p1">](http://ardalis.com)</ept> 和 <bpt id="p2">[</bpt>Bill Wagner<ept id="p2">](https://github.com/BillWagner)</ept></target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>View or download sample code<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/getting-started/unit-testing-using-dotnet-test)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>檢視或下載範例程式碼<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/getting-started/unit-testing-using-dotnet-test)</ept></target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Creating the Projects</source>
          <target state="translated">建立專案</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Writing Libraries with Cross Platform Tools<ept id="p1">](../tutorials/libraries.md)</ept> has information on organizing multi-project solutions for both the source and the tests.</source>
          <target state="translated">如需整理多專案方案的來源和測試資訊，可參閱<bpt id="p1">[</bpt>使用跨平台工具撰寫程式庫<ept id="p1">](../tutorials/libraries.md)</ept>。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This article follows those conventions.</source>
          <target state="translated">這篇文章會遵循其中的慣例。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The final project structure will be something like this:</source>
          <target state="translated">最終的專案結構會類似這樣：</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Creating the source project</source>
          <target state="translated">建立來源專案</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Start in the <ph id="ph1">`unit-testing-using-dotnet-test`</ph> directory, create the <ph id="ph2">`PrimeService`</ph> directory.</source>
          <target state="translated">從 <ph id="ph1">`unit-testing-using-dotnet-test`</ph> 目錄開始，建立 <ph id="ph2">`PrimeService`</ph> 目錄。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>CD into that directory, and run <ph id="ph1">`dotnet new classib`</ph> to create the source project.</source>
          <target state="translated">移至該目錄，然後執行 <ph id="ph1">`dotnet new classib`</ph> 以建立來源專案。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Rename <ph id="ph1">`Class1.cs`</ph> as <ph id="ph2">`PrimeService.cs`</ph>.</source>
          <target state="translated">將 <ph id="ph1">`Class1.cs`</ph> 重新命名為 <ph id="ph2">`PrimeService.cs`</ph>。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>To use test-driven development (TDD), you'll create a failing implementation of the <ph id="ph1">`PrimeService`</ph> class:</source>
          <target state="translated">為了使用測試導向開發 (TDD)，您必須建立 <ph id="ph1">`PrimeService`</ph> 類別的失敗實作：</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Creating the test project</source>
          <target state="translated">建立測試專案</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Next, cd back into the 'unit-testing-using-dotnet-test' directory, and create the <ph id="ph1">`PrimeServices.Tests`</ph> directory.</source>
          <target state="translated">接下來，回到 'unit-testing-using-dotnet-test' 目錄，並建立 <ph id="ph1">`PrimeServices.Tests`</ph> 目錄。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>CD into the <ph id="ph1">`PrimeService.Tests`</ph> directory and create a new project using <ph id="ph2">`dotnet new xunit`</ph>.</source>
          <target state="translated">移至 <ph id="ph1">`PrimeService.Tests`</ph> 目錄，並使用 <ph id="ph2">`dotnet new xunit`</ph> 建立新的專案。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`dotnet xunit`</ph> creates a test project that uses xUnit as the test library.</source>
          <target state="translated"><ph id="ph1">`dotnet xunit`</ph> 會建立將 xUnit 作為測試程式庫的測試專案。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The generated template configured the test runner in the PrimeServiceTests.csproj:</source>
          <target state="translated">產生的範本會在 PrimeServiceTests.csproj 中設定測試執行器：</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The test project requires other packages to create and run unit tests.</source>
          <target state="translated">測試專案需要其他套件來建立和執行單元測試。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`dotnet new`</ph> added xUnit, and the xUnit runner.</source>
          <target state="translated"><ph id="ph1">`dotnet new`</ph> 會新增 xUnit 和 xUnit 執行器。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You need to add the PrimeService package as another dependency to the project.</source>
          <target state="translated">您需要新增 PrimeService 套件以作為專案的另一個相依性。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>You can do that using the <ph id="ph1">`dotnet`</ph> CLI:</source>
          <target state="translated">您可以使用 <ph id="ph1">`dotnet`</ph> CLI 來完成：</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Or, you can directly edit the <ph id="ph1">`PrimeService.Tests.csproj`</ph> file.</source>
          <target state="translated">或者，您可以直接編輯 <ph id="ph1">`PrimeService.Tests.csproj`</ph> 檔案。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Directly under the first <ph id="ph1">`&lt;ItemGroup&gt;`</ph> node, add another <ph id="ph2">`&lt;ItemGroup&gt;`</ph> node with a reference to the library project:</source>
          <target state="translated">在第一個 <ph id="ph1">`&lt;ItemGroup&gt;`</ph> 節點的正下方，新增另一個參考至程式庫專案的 <ph id="ph2">`&lt;ItemGroup&gt;`</ph> 節點：</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>You can see the entire file in the <bpt id="p1">[</bpt>samples repository<ept id="p1">](https://github.com/dotnet/docs/blob/master/samples/core/getting-started/unit-testing-using-dotnet-test/PrimeService.Tests/PrimeService.Tests.csproj)</ept> on GitHub.</source>
          <target state="translated">您可以在 GitHub 的<bpt id="p1">[</bpt>範例存放庫<ept id="p1">](https://github.com/dotnet/docs/blob/master/samples/core/getting-started/unit-testing-using-dotnet-test/PrimeService.Tests/PrimeService.Tests.csproj)</ept>中看到完整檔案。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>After this initial structure is in place, you can write your first test.</source>
          <target state="translated">準備好這個初始結構之後，您即可撰寫第一個測試。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Once you verify that first unit test, everything is configured and should run smoothly as you add features and tests.</source>
          <target state="translated">只要您有好好確認第一個單元測試，所有項目就會妥善設定，並在您新增功能及進行測試時順利執行。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Creating the first test</source>
          <target state="translated">建立第一個測試</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Before building the library or the tests, you need to run <ph id="ph1">`dotnet restore`</ph> in both the <ph id="ph2">`PrimeService`</ph> and <ph id="ph3">`PrimeService.Tests`</ph> directories.</source>
          <target state="translated">建置程式庫或測試之前，您必須先在 <ph id="ph2">`PrimeService`</ph> 和 <ph id="ph3">`PrimeService.Tests`</ph> 目錄中執行 <ph id="ph1">`dotnet restore`</ph>。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This command restores all the necessary NuGet packages for each project.</source>
          <target state="translated">此命令會還原每個專案的所有必要 NuGet 套件。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The TDD approach calls for writing one failing test, then making it pass, then repeating the process.</source>
          <target state="translated">TDD 方法需要寫入一個失敗的測試，使其通過，然後重複此程序。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>So, let's write that one failing test.</source>
          <target state="translated">因此，我們就來撰寫這個失敗的測試。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Remove <ph id="ph1">`UnitTest1.cs`</ph> from the <ph id="ph2">`PrimeService.Tests`</ph> directory, and create a new C# file named <ph id="ph3">`PrimeService_IsPrimeShould.cs`</ph> with the following content:</source>
          <target state="translated">從 <ph id="ph2">`PrimeService.Tests`</ph> 目錄中移除 <ph id="ph1">`UnitTest1.cs`</ph>，並使用下列內容建立名為 <ph id="ph3">`PrimeService_IsPrimeShould.cs`</ph> 的新 C# 檔案：</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`[Fact]`</ph> attribute denotes a method as a single test.</source>
          <target state="translated"><ph id="ph1">`[Fact]`</ph> 屬性會將方法表示為單一測試。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Save this file, then run <ph id="ph1">`dotnet build`</ph> to build the test project.</source>
          <target state="translated">儲存此檔案，然後執行 <ph id="ph1">`dotnet build`</ph> 以建置測試專案。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If you have not already built the <ph id="ph1">`PrimeService`</ph> project, the build system will detect that and build it because it is a dependency of the test project.</source>
          <target state="translated">建置系統會偵測是否已建置 <ph id="ph1">`PrimeService`</ph> 專案並加以建置 (如果您尚未建置的話)，因為測試專案與其具有相依性。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Now, execute <ph id="ph1">`dotnet test`</ph> to run the tests from the console.</source>
          <target state="translated">現在，請執行 <ph id="ph1">`dotnet test`</ph> 以從主控台執行測試。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The xUnit test runner has the program entry point to run your tests from the Console.</source>
          <target state="translated">xUnit 測試執行器具有從主控台執行測試的程式進入點。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`dotnet test`</ph> starts the test runner, and provides a command line argument to the testrunner indicating the assembly that contains your tests.</source>
          <target state="translated"><ph id="ph1">`dotnet test`</ph> 會啟動測試執行器，並將命令列引數提供給測試執行器以指出測試中包含的組件。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Your test fails.</source>
          <target state="translated">您的測試失敗。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You haven't created the implementation yet.</source>
          <target state="translated">您尚未建立實作。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Write the simplest code to make this one test pass:</source>
          <target state="translated">撰寫最簡單的程式碼，使這一個測試順利通過：</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Adding More Features</source>
          <target state="translated">新增更多功能</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Now, that you've made one test pass, it's time to write more.</source>
          <target state="translated">現在，您已經讓一個測試順利通過，即可撰寫更多測試。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>There are a few other simple cases for prime numbers: 0, -1.</source>
          <target state="translated">還有一些其他適用於質數 0、-1 的簡單案例。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>You could add those as new tests, with the <ph id="ph1">`[Fact]`</ph> attribute, but that quickly becomes tedious.</source>
          <target state="translated">您可以使用 <ph id="ph1">`[Fact]`</ph> 屬性將這些項目新增為新測試，但很快就會單調乏味。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>There are other xUnit attributes that enable you to write a suite of similar tests.</source>
          <target state="translated">因此，還有其他 xUnit 屬性，可讓您撰寫類似的測試套件。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Theory`</ph> represents a suite of tests that execute the same code, but have different input arguments.</source>
          <target state="translated"><ph id="ph1">`Theory`</ph> 代表執行相同程式碼但有不同輸入引數的測試套件。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">`[InlineData]`</ph> attribute to specify values for those inputs.</source>
          <target state="translated">您可以使用 <ph id="ph1">`[InlineData]`</ph> 屬性來指定這些輸入值。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Instead of creating new tests, leverage these two attributes to create a single theory that tests some values less than 2, which is the lowest prime number:</source>
          <target state="translated">與其建立新的測試，您可以改用這兩個屬性來建立單一的理論，以測試一些小於 2 (其為最小質數) 的值：</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Sample_TestCode<ept id="p2">]</ept><bpt id="p3">(../../../samples/core/getting-started/unit-testing-using-dotnet-test/PrimeService.Tests/PrimeService_IsPrimeShould.cs#Sample_TestCode "</bpt>First tests<ept id="p3">")</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Sample_TestCode<ept id="p2">]</ept><bpt id="p3">(../../../samples/core/getting-started/unit-testing-using-dotnet-test/PrimeService.Tests/PrimeService_IsPrimeShould.cs#Sample_TestCode "</bpt>第一個測試<ept id="p3">")</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Now, these tests all pass.</source>
          <target state="translated">現在，這些測試都通過了。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>You continue to iterate by adding more tests, more theories, and more code in the main library.</source>
          <target state="translated">您可繼續在主要程式庫中新增更多測試、更多理論和更多程式碼，以反覆執行。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>You'll quickly end up with the <bpt id="p1">[</bpt>finished version of the tests<ept id="p1">](https://github.com/dotnet/docs/blob/master/samples/core/getting-started/unit-testing-using-dotnet-test/test/PrimeService.Tests/PrimeService_IsPrimeShould.cs)</ept> and the <bpt id="p2">[</bpt>complete implementation of the library<ept id="p2">](https://github.com/dotnet/docs/blob/master/samples/core/getting-started/unit-testing-using-dotnet-test/src/PrimeService/PrimeService.cs)</ept>.</source>
          <target state="translated">不久，您就可以得到<bpt id="p1">[</bpt>測試的完成版<ept id="p1">](https://github.com/dotnet/docs/blob/master/samples/core/getting-started/unit-testing-using-dotnet-test/test/PrimeService.Tests/PrimeService_IsPrimeShould.cs)</ept>和<bpt id="p2">[</bpt>程式庫的完整實作<ept id="p2">](https://github.com/dotnet/docs/blob/master/samples/core/getting-started/unit-testing-using-dotnet-test/src/PrimeService/PrimeService.cs)</ept>。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>You've built a small library and a set of unit tests for that library.</source>
          <target state="translated">您已建置好小型的程式庫和該程式庫的一組單元測試，</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>You've structured this solution so that adding new packages and tests will be seamless, and you can concentrate on the problem at hand.</source>
          <target state="translated">並已結構化這個方案，因此可以順暢地新增新套件和測試，專注地處理手邊的問題。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The tools will run automatically.</source>
          <target state="translated">這些工具皆可自動執行。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>