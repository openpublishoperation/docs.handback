<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-f0362aa" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bcb5ce9772ca2f3e35ebd7ec948d011ec04296e0</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\preview3\tutorials\using-with-xplat-cli-msbuild-folders.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2a0c627135d005d6ec7bf60563fdd3dc0e40215d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4bcf08f10e0a7cdc23ef3eaa37eb96aded44eadb</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Organizing and testing projects with the .NET Core command line (.NET Core Tools RC4) | Microsoft Docs</source>
          <target state="translated">使用 .NET Core 命令列組織和測試專案 (.NET Core 工具 RC4) | Microsoft Docs</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Organizing and testing projects with the .NET Core command line (.NET Core Tools RC4)</source>
          <target state="translated">使用 .NET Core 命令列組織和測試專案 (.NET Core 工具 RC4)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET、.NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Organizing and testing projects with the .NET Core command line (.NET Core Tools RC4)</source>
          <target state="translated">使用 .NET Core 命令列組織和測試專案 (.NET Core 工具 RC4)</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This topic applies to .NET Core Tools RC4.</source>
          <target state="translated">本主題適用於 .NET Core 工具 RC4。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For the .NET Core Tools Preview 2 version, see the <bpt id="p1">[</bpt>Getting started with .NET Core on Windows/Linux/macOS using the command line<ept id="p1">](../../tutorials/using-with-xplat-cli.md)</ept> topic.</source>
          <target state="translated">.NET Core 工具 Preview 2 版本，請參閱<bpt id="p1">[</bpt>使用命令列在 Windows/Linux/macOS 上開始使用 .NET Core<ept id="p1">](../../tutorials/using-with-xplat-cli.md)</ept> 主題。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This tutorial follows <bpt id="p1">[</bpt>Getting started with .NET Core on Windows/Linux/macOS using the command line (.NET Core Tools RC4)<ept id="p1">](./using-with-xplat-cli-msbuild.md)</ept> to show how to go beyond simple "hello world" scenarios and pave the way for more advanced and well-organized applications.</source>
          <target state="translated">本教學課程會遵循<bpt id="p1">[</bpt>使用命令列在 Windows/Linux/macOS 上開始使用 .NET Core (.NET Core 工具 RC4)<ept id="p1">](./using-with-xplat-cli-msbuild.md)</ept>，以示範如何超越簡單的 "hello world" 案例，並為更進階且井然有序的應用程式打好基礎。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Using folders to organize code</source>
          <target state="translated">使用資料夾來組織程式碼</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Say you wanted to introduce some new types to do work on.</source>
          <target state="translated">假設您想要引進一些新的類型來使用。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You can do this by adding more files and making sure to give them namespaces you can include in your <ph id="ph1">`Program.cs`</ph> file.</source>
          <target state="translated">您可以藉由新增更多檔案，並確定給予它們可包含在您 <ph id="ph1">`Program.cs`</ph> 檔案中的命名空間，來達到此目的。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This works great when the size of your project is relatively small.</source>
          <target state="translated">這很適合您的專案相當小的時候。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>However, if you have a larger app with many different data types and potentially multiple layers, you may wish to organize things logically.</source>
          <target state="translated">不過，如果您有較大的應用程式，並且使用許多不同的資料類型，且可能有多個層時，您可能會想以邏輯方式來組織項目。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This is where folders come into play.</source>
          <target state="translated">這就是資料夾派上用場的時刻。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You can either follow along with <bpt id="p1">[</bpt>the NewTypes sample project<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/console-apps/NewTypesMsBuild)</ept> that this guide covers, or create your own files and folders.</source>
          <target state="translated">您可以遵照本指南介紹的 <bpt id="p1">[</bpt>NewTypes 範例專案<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/console-apps/NewTypesMsBuild)</ept>，或建立自己的檔案和資料夾。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>To begin, create a new folder under the root of your project.</source>
          <target state="translated">若要開始，請在專案的根目錄下建立新的資料夾。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`/Model`</ph> is chosen here.</source>
          <target state="translated"><ph id="ph1">`/Model`</ph>在這裡選擇。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Now add some new types to the folder:</source>
          <target state="translated">現在，請新增一些新的類型到資料夾中︰</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Now, just as if they were files in the same directory, give them all the same namespace so you can include them in your <ph id="ph1">`Program.cs`</ph>.</source>
          <target state="translated">現在，就彷彿它們是相同目錄中的檔案，請給予它們相同的命名空間，然後您就可以將其包含在您的 <ph id="ph1">`Program.cs`</ph>。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Example: Pet Types</source>
          <target state="translated">範例︰寵物類型</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This example creates two new types, <ph id="ph1">`Dog`</ph> and <ph id="ph2">`Cat`</ph>, and has them implement a common interface, <ph id="ph3">`IPet`</ph>.</source>
          <target state="translated">這個範例會建立兩個新類型 (<ph id="ph1">`Dog`</ph> 和 <ph id="ph2">`Cat`</ph>)，並實作公用介面 <ph id="ph3">`IPet`</ph>。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Folder Structure:</source>
          <target state="translated">資料夾結構：</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`IPet.cs`</ph>:</source>
          <target state="translated"><ph id="ph1">`IPet.cs`</ph>:</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Dog.cs`</ph>:</source>
          <target state="translated"><ph id="ph1">`Dog.cs`</ph>:</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Cat.cs`</ph>:</source>
          <target state="translated"><ph id="ph1">`Cat.cs`</ph>:</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Program.cs`</ph>:</source>
          <target state="translated"><ph id="ph1">`Program.cs`</ph>:</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`NewTypes.csproj`</ph>:</source>
          <target state="translated"><ph id="ph1">`NewTypes.csproj`</ph>:</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>And if you run this:</source>
          <target state="translated">而且，如果您執行它︰</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>New pet types can be added (such as a <ph id="ph1">`Bird`</ph>), extending this project.</source>
          <target state="translated">可以新增新的寵物類型 (例如 <ph id="ph1">`Bird`</ph>)，擴充此專案。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Testing your Console App</source>
          <target state="translated">測試主控台應用程式</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>You'll probably be wanting to test your projects at some point.</source>
          <target state="translated">您可能會想要在某個時間點測試您的專案。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Here's a good way to do it:</source>
          <target state="translated">以下是很好的作法︰</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Move any source of your existing project into a new <ph id="ph1">`src`</ph> folder.</source>
          <target state="translated">將現有專案的任何來源移至新的 <ph id="ph1">`src`</ph> 資料夾。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Create a <ph id="ph1">`/test`</ph> directory, then <ph id="ph2">`cd`</ph> into it.</source>
          <target state="translated">建立 <ph id="ph1">`/test`</ph> 目錄，然後 <ph id="ph2">`cd`</ph> 到其中。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Initialize the directory with a <ph id="ph1">`dotnet new -t Xunittest`</ph> command.</source>
          <target state="translated">使用 <ph id="ph1">`dotnet new -t Xunittest`</ph> 命令初始化目錄。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This assumes Xunit, but you can also use MS Test by replacing <ph id="ph1">`Xunittest`</ph> with <ph id="ph2">`Mstest`</ph>.</source>
          <target state="translated">這假設的是 Xunit，但您也能夠藉由以 <ph id="ph2">`Mstest`</ph> 取代 <ph id="ph1">`Xunittest`</ph> 來使用 MS 測試。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Example: Extending the NewTypes project</source>
          <target state="translated">範例︰擴充 NewTypes 專案</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Now that the project system is in place, you can create your test project and start writing tests!</source>
          <target state="translated">現在，專案系統已就緒，您可以建立測試專案，並開始撰寫測試！</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>From here on out, this guide will use and extend <bpt id="p1">[</bpt>the sample Types project<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/console-apps/NewTypesMsBuild)</ept>.</source>
          <target state="translated">從現在開始，本指南會使用和擴充<bpt id="p1">[</bpt>範例 Types 專案<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/console-apps/NewTypesMsBuild)</ept>。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Additionally, it will use the <bpt id="p1">[</bpt>Xunit<ept id="p1">](https://xunit.github.io/)</ept> test framework.</source>
          <target state="translated">此外，它會使用 <bpt id="p1">[</bpt>Xunit<ept id="p1">](https://xunit.github.io/)</ept> 測試架構。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Feel free to follow along or create your own multi-project system with tests.</source>
          <target state="translated">請放心地依照指示進行，或建立自己的多專案系統與測試。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The whole project structure should look like this:</source>
          <target state="translated">整個專案結構看起來應該像這樣︰</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>There are two new things to make sure you have in your test project:</source>
          <target state="translated">您的測試專案中需要確定有兩樣新的項目︰</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A correct <ph id="ph1">`NewTypesTests.csproj`</ph> file with the following:</source>
          <target state="translated">正確的 <ph id="ph1">`NewTypesTests.csproj`</ph> 檔案，並具有下列各項：</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>A reference to <ph id="ph1">`xunit`</ph></source>
          <target state="translated">參考<ph id="ph1">`xunit`</ph></target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>A reference to <ph id="ph1">`dotnet-test-xunit`</ph></source>
          <target state="translated">參考<ph id="ph1">`dotnet-test-xunit`</ph></target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>A reference to the namespace corresponding to the code under test</source>
          <target state="translated">對應至測試中程式碼的命名空間參考</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This can be built by simply doing <ph id="ph1">`dotnet new -t Xunittest`</ph> from the command-line in the <ph id="ph2">`NewTypesTests`</ph> directory, then adding a project reference to the <ph id="ph3">`NewTypes`</ph> project.</source>
          <target state="translated">您只需在 <ph id="ph2">`NewTypesTests`</ph> 目錄中從命令列執行 <ph id="ph1">`dotnet new -t Xunittest`</ph>，然後將專案參考加入至 <ph id="ph3">`NewTypes`</ph> 專案，即可建置此項。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`NewTypesTests/NewTypesTests.csproj`</ph>:</source>
          <target state="translated"><ph id="ph1">`NewTypesTests/NewTypesTests.csproj`</ph>:</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>An Xunit test class.</source>
          <target state="translated">Xunit 測試類別。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`PetTests.cs`</ph>:</source>
          <target state="translated"><ph id="ph1">`PetTests.cs`</ph>:</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Now you can run tests!</source>
          <target state="translated">現在您可以執行測試了！</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><ph id="ph1">`dotnet test`</ph><ept id="p1">](../tools/dotnet-test.md)</ept> command runs the test runner you have specified in your project.</source>
          <target state="translated"><bpt id="p1">[</bpt><ph id="ph1">`dotnet test`</ph><ept id="p1">](../tools/dotnet-test.md)</ept> 命令會執行您的專案中所指定的測試執行器。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Make sure you start at the top-level directory.</source>
          <target state="translated">請確定您在最上層目錄啟動。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Output should look like this:</source>
          <target state="translated">輸出應該看起來像這樣︰</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>