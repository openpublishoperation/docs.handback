<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-6a73dd2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e04d5f3b08c7f6885ed9914a91fc308234e6ce3b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\preview3\tools\dependencies.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p1</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fc9d6ce3df104e95d7a86ace7cec5ce6b8035a20</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0d0e2fc93c7a1a6541f179cfebce1e46d8f0149b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Managing dependencies in .NET Core Preview 3 tooling</source>
          <target state="translated">管理 .NET Core Preview 3 工具中的相依性</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Preview 3 brings about changes to how dependencies are managed</source>
          <target state="translated">Preview 3 變更了相依性管理方式</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>CLI, extensibility, custom commands, .NET Core</source>
          <target state="translated">CLI, 擴充性, 自訂命令, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Managing dependencies in .NET Core Preview 3 tooling</source>
          <target state="translated">管理 .NET Core Preview 3 工具中的相依性</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="translated">概觀</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>With the move of .NET Core projects from project.json to csproj and MSBuild, a significant invesment also happened that resulted in unification of the project file and assets that allow tracking of depenencies.</source>
          <target state="translated">透過將 .NET Core 專案從 project.json 移動至 csproj 和 MSBuild，專案檔與資產的整合允許相依性的追蹤，而產生重要的投資。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For .NET Core projects this is similar to what project.json did.</source>
          <target state="translated">針對 .NET Core 專案，這類似於 project.json。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>There is no separate JSON or XML file that tracks NuGet dependencies.</source>
          <target state="translated">沒有會追蹤 NuGet 相依性的個別 JSON 或 XML 檔案。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>With this change, we've also introduced another type of <bpt id="p1">*</bpt>reference<ept id="p1">*</ept> into the csproj syntax called the <ph id="ph1">`&lt;PackageReference&gt;`</ph>.</source>
          <target state="translated">透過此變更，我們也將另一種型別的<bpt id="p1">*</bpt>參考<ept id="p1">*</ept>引進稱為 <ph id="ph1">`&lt;PackageReference&gt;`</ph> 的 csproj 語法中。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This document describes the new reference type.</source>
          <target state="translated">此文件說明新的參考型別。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>It also shows how to add a package dependency using this new reference type to your project.</source>
          <target state="translated">它也會說明如何使用這個新的參考型別，將套件相依性新增至您的專案。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The new <ph id="ph1">&lt;PackageReference&gt;</ph> element</source>
          <target state="translated">新 <ph id="ph1">&lt;PackageReference&gt;</ph> 元素</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`&lt;PackageReference&gt;`</ph> has the following basic structure:</source>
          <target state="translated"><ph id="ph1">`&lt;PackageReference&gt;`</ph> 具有下列基本結構︰</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If you are familiar with MSBuild, it will look familiar to the other <bpt id="p1">[</bpt>reference types<ept id="p1">]()</ept> that already exist.</source>
          <target state="translated">如果您熟悉 MSBuild，它看起來會類似其他已經存在的<bpt id="p1">[</bpt>參考型別<ept id="p1">]()</ept>。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The key is the <ph id="ph1">`Include`</ph> statement which specifies the package id that you wish to add to the project.</source>
          <target state="translated">索引鍵是 <ph id="ph1">`Include`</ph> 陳述式，它指定了您希望新增至專案的套件識別碼。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`&lt;Version&gt;`</ph> child element specified the version to get.</source>
          <target state="translated"><ph id="ph1">`&lt;Version&gt;`</ph> 子元素指定要取得的版本。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The versions are specified as per <bpt id="p1">[</bpt>NuGet version rules<ept id="p1">](https://docs.nuget.org/ndocs/create-packages/dependency-versions#version-ranges)</ept>.</source>
          <target state="translated">版本是依各 <bpt id="p1">[</bpt>NuGet 版本規則<ept id="p1">](https://docs.nuget.org/ndocs/create-packages/dependency-versions#version-ranges)</ept>指定。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note:<ept id="p1">**</ept> if you are not faimilar with the overall <ph id="ph1">`csproj`</ph> syntax, you can use the <bpt id="p2">[</bpt>MSBuild project reference documentation<ept id="p2">]()</ept> to get acquainted.</source>
          <target state="translated"><bpt id="p1">**</bpt>注意︰<ept id="p1">**</ept>如果您不熟悉整體的 <ph id="ph1">`csproj`</ph> 語法，您可以使用 <bpt id="p2">[</bpt>MSBuild 專案參考文件<ept id="p2">]()</ept>來了解。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Adding a dependency that is available only in a specific target is done using conditions:</source>
          <target state="translated">您可以使用條件來新增只能在特定目標中使用的相依性：</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The above means that the dependency will only be valid if the build is happening for that given target.</source>
          <target state="translated">上面的內容表示只有當建置是針對該給定目標產生時，相依性才有效。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`$(TargetFramework)`</ph> in the condition is a MSBuild property that is being set in the project.</source>
          <target state="translated">條件中的 <ph id="ph1">`$(TargetFramework)`</ph> 是要在專案中設定的 MSBuild 屬性。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For most common .NET Core applications, you will not need to do this.</source>
          <target state="translated">針對最常見的 .NET Core 應用程式，您將不需要執行此動作。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Adding a dependency to your project</source>
          <target state="translated">新增相依性至您的專案</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Adding a dependency to your project is straightforward.</source>
          <target state="translated">新增相依性至您的專案相當直覺化。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Here is an example of how to add <ph id="ph1">`JSON.net`</ph> version <ph id="ph2">`9.0.1`</ph> to your project.</source>
          <target state="translated">以下是如何將 <ph id="ph1">`JSON.net`</ph> 版本 <ph id="ph2">`9.0.1`</ph> 新增至您專案的方式。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Of course, it is applicable to any other NuGet dependency.</source>
          <target state="translated">當然，這適用於任何其他的 NuGet 相依性。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>When you open your project file, you will see two or more <ph id="ph1">`&lt;ItemGroup&gt;`</ph> nodes.</source>
          <target state="translated">當您開啟專案檔時，您會看到兩個或多個 <ph id="ph1">`&lt;ItemGroup&gt;`</ph> 節點。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You will notice that one of the nodes already has <ph id="ph1">`&lt;PackageReference&gt;`</ph> elements in it.</source>
          <target state="translated">您會發現其中一個節點已具備 <ph id="ph1">`&lt;PackageReference&gt;`</ph> 元素。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You can add your new dependency to this node, or create a new one; it is completely up to you as the result will be the same.</source>
          <target state="translated">您可以將新的相依性新增至此節點，或建立一個新的節點；結果將會完全相同。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In this example we will use the default template that is dropped by <ph id="ph1">`dotnet new`</ph>.</source>
          <target state="translated">在此範例中，我們將使用由 <ph id="ph1">`dotnet new`</ph> 置放的預設範本。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This is a simple console application.</source>
          <target state="translated">這是一個簡單的主控台應用程式。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>When we open up the project, we first find the <ph id="ph1">`&lt;ItemGroup&gt;`</ph> with already existing <ph id="ph2">`&lt;PackageReference&gt;`</ph> in it.</source>
          <target state="translated">當我們開啟專案時，我們首先會尋找 <ph id="ph1">`&lt;ItemGroup&gt;`</ph> (其中已經有 <ph id="ph2">`&lt;PackageReference&gt;`</ph> 存在)。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>We then add the following to it:</source>
          <target state="translated">然後，新增下列內容到其中：</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>After this, we save the project and run the <ph id="ph1">`dotnet restore`</ph> command to install the dependency.</source>
          <target state="translated">在此之後，儲存專案並執行 <ph id="ph1">`dotnet restore`</ph> 命令以安裝相依性。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The full project looks like this:</source>
          <target state="translated">完整的專案看起來像這樣︰</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Removing a dependency from the project</source>
          <target state="translated">從專案移除相依性</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Removing a dependency from the project file involves simply removing the <ph id="ph1">`&lt;PackageReference&gt;`</ph> from the project file.</source>
          <target state="translated">從專案檔移除相依性只牽涉到從專案檔移除 <ph id="ph1">`&lt;PackageReference&gt;`</ph>。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>