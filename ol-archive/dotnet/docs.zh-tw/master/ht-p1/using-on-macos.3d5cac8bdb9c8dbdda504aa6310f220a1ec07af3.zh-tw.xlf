<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-eac019f" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">12b7bed380db53aad04f0615c6efa6152b3035b7</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\tutorials\using-on-macos.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p1</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">54b17be3e66c9a0cef717b259886343f14b0d49b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cd294cec33ec90246f4d7099eef0577b9101b347</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Getting started with .NET Core on macOS</source>
          <target state="translated">在 macOS 上開始使用 .NET Core</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Getting started with .NET Core on macOS, using Visual Studio Code</source>
          <target state="translated">在 macOS 上開始使用 .NET Core, 使用 Visual Studio Code</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Getting started with .NET Core on macOS, using Visual Studio Code</source>
          <target state="translated">在 macOS 上開始使用 .NET Core, 使用 Visual Studio Code</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>by <bpt id="p1">[</bpt>Bertrand Le Roy<ept id="p1">](https://github.com/bleroy)</ept>,  <bpt id="p2">[</bpt>Phillip Carter<ept id="p2">](https://github.com/cartermp)</ept>, <bpt id="p3">[</bpt>Bill Wagner<ept id="p3">](https://github.com/billwagner)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Bertrand Le Roy<ept id="p1">](https://github.com/bleroy)</ept>、<bpt id="p2">[</bpt>Phillip Carter<ept id="p2">](https://github.com/cartermp)</ept>、<bpt id="p3">[</bpt>Bill Wagner<ept id="p3">](https://github.com/billwagner)</ept> 撰</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Contributions by <bpt id="p1">[</bpt>Toni Solarin-Sodara<ept id="p1">](https://github.com/tsolarin)</ept></source>
          <target state="translated">由 <bpt id="p1">[</bpt>Toni Solarin Sodara<ept id="p1">](https://github.com/tsolarin)</ept> 貢獻</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This document provides a tour of the steps and workflow to create a .NET Core Solution using <bpt id="p1">[</bpt>Visual Studio Code<ept id="p1">](http://code.visualstudio.com)</ept>.</source>
          <target state="translated">本文件提供使用 <bpt id="p1">[</bpt>Visual Studio Code<ept id="p1">](http://code.visualstudio.com)</ept> 建立 .NET Core 方案的步驟與工作流程導覽。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You'll learn how to create projects, create unit tests, use the debugging tools, and incorporate third-party libraries via <bpt id="p1">[</bpt>NuGet<ept id="p1">](http://nuget.org)</ept>.</source>
          <target state="translated">您將了解如何建立專案、建立單元測試、使用偵錯工具，以及透過 <bpt id="p1">[</bpt>NuGet<ept id="p1">](http://nuget.org)</ept> 納入協力廠商程式庫。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This article uses Visual Studio Code on Mac OS.</source>
          <target state="translated">這篇文章會在 Mac OS 上使用 Visual Studio Code。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Where there are differences, it points out the differences for the Windows platform.</source>
          <target state="translated">有差異之處，會指出 Windows 平台的差異。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
          <target state="translated">必要條件</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Before starting, you'll need to install the <bpt id="p1">[</bpt>.NET Core SDK<ept id="p1">](https://www.microsoft.com/net/core)</ept>, currently in a preview release.</source>
          <target state="translated">開始之前，您必須安裝 <bpt id="p1">[</bpt>.NET Core SDK<ept id="p1">](https://www.microsoft.com/net/core)</ept>，這目前在預覽版本。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The .NET Core SDK includes the latest release of the .NET Core framework and runtime.</source>
          <target state="translated">.NET Core SDK 包含 .NET Core 架構和執行階段的最新版本。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You'll also need to install <bpt id="p1">[</bpt>Visual Studio Code<ept id="p1">](http://code.visualstudio.com)</ept>.</source>
          <target state="translated">您也需要安裝 <bpt id="p1">[</bpt>Visual Studio Code<ept id="p1">](http://code.visualstudio.com)</ept>。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>During the course of this article, you'll also install extensions that will improve the .NET Core development experience.</source>
          <target state="translated">在這篇文章的過程中，您也將安裝延伸模組，改善 .NET Core 開發經驗。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You can find the links to all of these at the <bpt id="p1">[</bpt>.NET home page<ept id="p1">](http://dot.net)</ept>.</source>
          <target state="translated">您可以在 <bpt id="p1">[</bpt>.NET 首頁<ept id="p1">](http://dot.net)</ept>找到以上所有鏈結。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Getting Started</source>
          <target state="translated">快速入門</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The source for this tutorial is available on <bpt id="p1">[</bpt>GitHub<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/getting-started/golden)</ept>.</source>
          <target state="translated">本教學課程中的來源位於 <bpt id="p1">[</bpt>GitHub<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/getting-started/golden)</ept>。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Start Visual Studio Code.</source>
          <target state="translated">啟動 Visual Studio Code。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Press Ctrl + '<ph id="ph1">\`</ph>' (the back-quote character) to open an embedded terminal in VS Code.</source>
          <target state="translated">按 Ctrl + '<ph id="ph1">\`</ph>' (後引號字元)，在 VS Code 中開啟內嵌的終端機。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>(Alternatively, you can use a separate terminal window, if you prefer).</source>
          <target state="translated">(或者，您想要的話，可以使用不同的終端機視窗。)</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>By the time we're done, you'll create three projects: a library project, tests for that library project, and a console application that makes use of the library.</source>
          <target state="translated">在我們完成時，您將建立三個專案︰程式庫專案、該程式庫專案的測試，以及利用程式庫的主控台應用程式。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You'll follow a standard folder structure for the three projects.</source>
          <target state="translated">您將針對這三個專案遵循標準資料夾結構。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Following this standard folder structure means that the .NET Core SDK tools understand the relationship between your production code projects and your test code projects.</source>
          <target state="translated">遵循此標準的資料夾結構，表示 .NET Core SDK 工具了解您的實際執行程式碼專案與測試程式碼專案之間的關係。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>That makes your development experience more productive.</source>
          <target state="translated">這可讓您的開發經驗更具生產力。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Let's start by creating those folders.</source>
          <target state="translated">現在就開始建立這些資料夾。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In the terminal, create a 'golden' directory.</source>
          <target state="translated">在終端機中，建立 'golden' 目錄。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Under that directory create <ph id="ph1">`src`</ph> and <ph id="ph2">`test`</ph> directories.</source>
          <target state="translated">在該目錄下建立 <ph id="ph1">`src`</ph> 和 <ph id="ph2">`test`</ph> 目錄。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Under <ph id="ph1">`src`</ph> create <ph id="ph2">`app`</ph> and <ph id="ph3">`library`</ph> directories.</source>
          <target state="translated">在 <ph id="ph1">`src`</ph> 下建立 <ph id="ph2">`app`</ph> 和 <ph id="ph3">`library`</ph> 目錄。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">`test`</ph> create a <ph id="ph2">`test-library`</ph> directory.</source>
          <target state="translated">在 <ph id="ph1">`test`</ph> 中建立 <ph id="ph2">`test-library`</ph> 目錄。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You can do this either using the terminal in VS code, or by clicking on the parent folder in VS Code and selecting the "New Folder" icon.</source>
          <target state="translated">您可以在 VS Code 中使用終端機，或在 VS Code 中的父資料夾上按一下並選取 [新資料夾] 圖示，來完成此動作。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>In VS Code, open the 'golden' directory.</source>
          <target state="translated">在 VS Code 中，開啟 'golden' 目錄。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This directory is the root of your solution.</source>
          <target state="translated">這個目錄是您方案的根目錄。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Next, create a <ph id="ph1">`global.json`</ph> file in the root directory for your solution.</source>
          <target state="translated">接下來，在方案的根目錄中建立 <ph id="ph1">`global.json`</ph> 檔案。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The contents of <ph id="ph1">`global.json`</ph> are:</source>
          <target state="translated"><ph id="ph1">`global.json`</ph> 的內容為：</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>At this point, your directory tree should look like this:</source>
          <target state="translated">此時，您的目錄樹狀結構看起來如下所示︰</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Writing the library</source>
          <target state="translated">撰寫程式庫</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Your next task is to create the library.</source>
          <target state="translated">您的下一個工作是建立程式庫。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>In the terminal window (either the embedded terminal in VS code, or another terminal), cd to <ph id="ph1">`golden/src/library`</ph> and type the command <ph id="ph2">`dotnet new -t lib`</ph>.</source>
          <target state="translated">在終端機視窗 (VS Code 中的內嵌終端機，或另一個終端機) 中，切換至 <ph id="ph1">`golden/src/library`</ph>，然後輸入命令 <ph id="ph2">`dotnet new -t lib`</ph>。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This creates a library project, with two files: <ph id="ph1">`project.json`</ph> and <ph id="ph2">`Library.cs`</ph>.</source>
          <target state="translated">這會建立含有兩個檔案的程式庫專案︰<ph id="ph1">`project.json`</ph> 和 <ph id="ph2">`Library.cs`</ph>。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`project.json`</ph> contains the following information:</source>
          <target state="translated"><ph id="ph1">`project.json`</ph>包含下列資訊：</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This library project will make use of JSON representation of objects, so you'll want to add a reference to the <ph id="ph1">`Newtonsoft.Json`</ph> NuGet package.</source>
          <target state="translated">此程式庫專案將會利用物件的 JSON 表示法，因此請新增 <ph id="ph1">`Newtonsoft.Json`</ph> NuGet 套件的參考。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>In<ph id="ph1">`project.json`</ph> add the latest pre-release version of the package as a dependency:</source>
          <target state="translated">在 <ph id="ph1">`project.json`</ph> 中新增最新的套件發行前版本作為相依性︰</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>After you've finished adding those dependencies, you need to install those packages into workspace.</source>
          <target state="translated">完成新增這些相依性之後，您需要將這些套件安裝到工作區。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Run the <ph id="ph1">`dotnet restore`</ph> command to updates all dependencies, and write a <ph id="ph2">`project.lock.json`</ph> file in the project directory.</source>
          <target state="translated">執行 <ph id="ph1">`dotnet restore`</ph> 命令來更新所有相依性，並在專案目錄中寫入 <ph id="ph2">`project.lock.json`</ph> 檔案。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>This file contains the full dependency tree of all the dependencies in your project.</source>
          <target state="translated">這個檔案包含專案中所有相依性的完整相依性樹狀結構。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>You don't need to read this file, it's used by tools in the .NET Core SDK.</source>
          <target state="translated">您不需要讀取這個檔案，它是由 .NET Core SDK 中的工具所使用。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Now, let's update the C# code.</source>
          <target state="translated">現在，讓我們更新 C# 程式碼。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Let's create a <ph id="ph1">`Thing`</ph> class that contains one public method.</source>
          <target state="translated">讓我們建立 <ph id="ph1">`Thing`</ph> 類別，其中包含一個公用的方法。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>This method will return the sum of two numbers, but will do so by converting that number to a JSON string, and then deserializing it.</source>
          <target state="translated">這個方法會傳回兩個數字的總和，但其作法是將該數字轉換成 JSON 字串，然後再還原序列化。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Rename the file <ph id="ph1">`Library.cs`</ph> to <ph id="ph2">`Thing.cs`</ph>.</source>
          <target state="translated">將檔案 <ph id="ph1">`Library.cs`</ph> 重新命名為 <ph id="ph2">`Thing.cs`</ph>。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Then, replace the existing code (for the template-generated Class1) with the following:</source>
          <target state="translated">然後，使用下列內容取代現有的程式碼 (適用於範本產生的類別 1)：</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>This makes use of a number of modern C# features, such as static usings, expression bodied members, and interpolated strings, that you can learn about in the <bpt id="p1">[</bpt>Learn C#<ept id="p1">](../../csharp/index.md)</ept> section.</source>
          <target state="translated">這會利用許多現代 C# 功能，例如靜態 using、運算式主體成員和插補字串，您可以在<bpt id="p1">[</bpt>了解 C#<ept id="p1">](../../csharp/index.md)</ept> 一節中了解這些。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Now that you've updated the code, you can build the library using <ph id="ph1">`dotnet build`</ph>.</source>
          <target state="translated">既然您已更新程式碼，便可以使用 <ph id="ph1">`dotnet build`</ph> 建置程式庫。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>You now have a built <ph id="ph1">`library.dll`</ph> file under <ph id="ph2">`golden/src/library/bin/Debug/netstandard1.6`</ph>.</source>
          <target state="translated">您現在在 <ph id="ph2">`golden/src/library/bin/Debug/netstandard1.6`</ph> 下有已建置的 <ph id="ph1">`library.dll`</ph> 檔案。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Writing the test project</source>
          <target state="translated">撰寫測試專案</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Let's build a test project for this library that you've build.</source>
          <target state="translated">我們將為您已建置的這個程式庫建置測試專案。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Cd into the <ph id="ph1">`test/test-library`</ph> directory.</source>
          <target state="translated">切換至 <ph id="ph1">`test/test-library`</ph> 目錄。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Run <ph id="ph1">`dotnet new -t xunittest`</ph> to create a new test project.</source>
          <target state="translated">執行 <ph id="ph1">`dotnet new -t xunittest`</ph> 建立新的測試專案。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>You'll need to add a dependency node for the library you wrote in the steps above.</source>
          <target state="translated">您必須為上述步驟中所撰寫的程式庫新增相依性節點。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Open <ph id="ph1">`project.json`</ph> and update the dependencies section to the following (including the <ph id="ph2">`library`</ph> node, which is the last node below):</source>
          <target state="translated">開啟 <ph id="ph1">`project.json`</ph> 並更新相依性區段如下 (包括 <ph id="ph2">`library`</ph> 節點，也就是底下的最後一個節點)：</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`library`</ph> node specifies that this dependency should resolve to a project in the current workspace.</source>
          <target state="translated"><ph id="ph1">`library`</ph> 節點指定此相依性應該解析為目前工作區中的專案。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Without explicitly specifying this, it's possible that the test project would build against a NuGet package of the same name.</source>
          <target state="translated">如果未明確指定，有可能測試專案會針對具有相同名稱的 NuGet 套件建置。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Now that the dependencies have been properly configured, let's create the tests for your library.</source>
          <target state="translated">既然已正確設定相依性，就讓我們建立您的程式庫的測試。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Open <ph id="ph1">`Tests.cs`</ph> and replace its contents with the following code:</source>
          <target state="translated">開啟 <ph id="ph1">`Tests.cs`</ph> 並將其內容取代為下列程式碼：</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Now, run <ph id="ph1">`dotnet restore`</ph>, <ph id="ph2">`dotnet build`</ph> and <ph id="ph3">`dotnet test`</ph>.</source>
          <target state="translated">現在，執行 <ph id="ph1">`dotnet restore`</ph>、<ph id="ph2">`dotnet build`</ph> 和 <ph id="ph3">`dotnet test`</ph>。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The xUnit console test runner will run the one test, and report that it is passing.</source>
          <target state="translated">xUnit 主控台測試執行器會執行一項測試，並回報它通過。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Writing the console app</source>
          <target state="translated">撰寫主控台應用程式</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>In your terminal, cd to the <ph id="ph1">`golden/src/app`</ph> directory.</source>
          <target state="translated">在終端機中，切換至 <ph id="ph1">`golden/src/app`</ph> 目錄。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Run <ph id="ph1">`dotnet new`</ph> to create a new console application.</source>
          <target state="translated">執行 <ph id="ph1">`dotnet new`</ph> 以建立新的主控台應用程式。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Your console application depends on the library you built and tested in the previous steps.</source>
          <target state="translated">您的主控台應用程式會依賴您在先前步驟中建置和測試的程式庫。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>You need to indicate that by editing <ph id="ph1">`project.json`</ph> to add this dependency.</source>
          <target state="translated">您需要藉由編輯 <ph id="ph1">`project.json`</ph> 新增此相依性來表示這點。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">`dependencies`</ph> node, add the <ph id="ph2">`library`</ph> node as follows:</source>
          <target state="translated">在 <ph id="ph1">`dependencies`</ph> 節點中，新增 <ph id="ph2">`library`</ph> 節點，如下所示︰</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`project`</ph> node is important here, as it was in the test library.</source>
          <target state="translated"><ph id="ph1">`project`</ph> 節點在這裡很重要，因為它過去在測試程式庫中。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>It indicates that this is a project in the current solution, and not a NuGet package.</source>
          <target state="translated">它表示這是目前方案中的專案，而不是 NuGet 套件。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Run <ph id="ph1">`dotnet restore`</ph> to restore all dependencies.</source>
          <target state="translated">執行 <ph id="ph1">`dotnet restore`</ph> 還原所有相依性。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Open <ph id="ph1">`program.cs`</ph> and replace the contents of the <ph id="ph2">`Main`</ph> method with this line:</source>
          <target state="translated">開啟 <ph id="ph1">`program.cs`</ph> 並將 <ph id="ph2">`Main`</ph> 方法的內容取代為這一行︰</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>You'll need to add a couple <ph id="ph1">`using`</ph> directives to the top of the file:</source>
          <target state="translated">您必須將兩個 <ph id="ph1">`using`</ph> 指示詞新增到檔案的頂端︰</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Then, run <ph id="ph1">`dotnet build`</ph>.</source>
          <target state="translated">然後，執行 <ph id="ph1">`dotnet build`</ph>。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>That creates the assemblies, and you can type <ph id="ph1">`dotnet run`</ph> to run the executable.</source>
          <target state="translated">如此會建立組件，而您可以輸入 <ph id="ph1">`dotnet run`</ph> 來執行可執行檔。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Debugging your application</source>
          <target state="translated">偵錯應用程式</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>You can debug your code in VS Code using the C# extension.</source>
          <target state="translated">您可以在 VS Code 中使用 C# 延伸模組偵錯您的程式碼。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>You install this extension by pressing <ph id="ph1">`F1`</ph> to open the VS Code palette.</source>
          <target state="translated">按下 <ph id="ph1">`F1`</ph> 開啟 VS Code 調色盤以安裝此延伸模組。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Type <ph id="ph1">`ext install`</ph> to see the list of extensions.</source>
          <target state="translated">輸入 <ph id="ph1">`ext install`</ph> 查看延伸模組的清單。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Select the C# extension.</source>
          <target state="translated">選取 C# 延伸模組。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>(More details are available on the <bpt id="p1">[</bpt>Visual Studio Code C# Extension documentation<ept id="p1">](https://github.com/OmniSharp/omnisharp-vscode/blob/master/debugger.md)</ept> page.)</source>
          <target state="translated">(更多詳細資料位於 <bpt id="p1">[</bpt>Visual Studio Code C# 延伸模組文件<ept id="p1">](https://github.com/OmniSharp/omnisharp-vscode/blob/master/debugger.md)</ept> 頁面。)</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>After you install the extension, VS Code will ask that you restart the application to load the new extension.</source>
          <target state="translated">安裝延伸模組之後，VS Code 將要求您重新啟動應用程式以載入新的延伸模組。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Once the extension is installed, you can open the debugger tab (see figure).</source>
          <target state="translated">安裝延伸模組之後，您可以開啟 [偵錯工具] 索引標籤 (請參閱圖)。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>VS Code Debugger</source>
          <target state="translated">VS Code 偵錯工具</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>When you start the debugger, VS Code will instruct you to configure the debugger.</source>
          <target state="translated">當您啟動偵錯工具時，VS Code 會指示您設定偵錯工具。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>When you do, it creates a <ph id="ph1">`.vscode`</ph> directory with two files: <ph id="ph2">`tasks.json`</ph> and <ph id="ph3">`launch.json`</ph>.</source>
          <target state="translated">當您這樣做時，它會建立 <ph id="ph1">`.vscode`</ph> 目錄，其中含有兩個檔案︰<ph id="ph2">`tasks.json`</ph> 和 <ph id="ph3">`launch.json`</ph>。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>These two files control the debugger configuration.</source>
          <target state="translated">這兩個檔案會控制偵錯工具組態。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>In most projects, this directory is not included in source control.</source>
          <target state="translated">在大部分的專案中，此目錄不會納入原始檔控制。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>It is included in the sample associated with this walk through so you can see the edits you need to make.</source>
          <target state="translated">它包含在與本逐步解說相關聯的範例中，因此您可以看到需要進行的編輯。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Your solution contains multiple projects, so you'll want to modify each of these files to perform the correct commands.</source>
          <target state="translated">您的方案包含多個專案，因此請修改這些每個檔案，以執行正確的命令。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>First, open <ph id="ph1">`tasks.json`</ph>.</source>
          <target state="translated">首先，開啟 <ph id="ph1">`tasks.json`</ph>。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The default build task runs <ph id="ph1">`dotnet build`</ph> in the workspace source directory.</source>
          <target state="translated">預設建置工作會在工作區的來源目錄執行 <ph id="ph1">`dotnet build`</ph>。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Instead, you want to run it in the <ph id="ph1">`src/app`</ph> directory.</source>
          <target state="translated">相反地，在您想要在 <ph id="ph1">`src/app`</ph> 目錄中執行它。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>You need to add a <ph id="ph1">`options`</ph> node to set the current working directory to that:</source>
          <target state="translated">您需要新增 <ph id="ph1">`options`</ph> 節點以將目前工作目錄設定為它︰</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Next, you'll need to open <ph id="ph1">`launch.json`</ph> and update the program path.</source>
          <target state="translated">接下來，您必須開啟 <ph id="ph1">`launch.json`</ph> 並更新程式路徑。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>You'll see a node under "configurations" that describes the program.</source>
          <target state="translated">您會看到在 "configurations" 下有一個說明程式的節點。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>You'll see:</source>
          <target state="translated">您會看到︰</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>You'll change this to:</source>
          <target state="translated">您會將它變更為︰</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>If you are running on Windows, you'll need to update the Application's <ph id="ph1">`project.json`</ph> (in the <ph id="ph2">`src/app`</ph> directory) to generate portable PDB files (this happens by default on Mac OSX and Linux).</source>
          <target state="translated">如果您在 Windows 上執行，則需要更新應用程式的 <ph id="ph1">`project.json`</ph> (在 <ph id="ph2">`src/app`</ph> 目錄)，以產生可移植的 PDB 檔案 (這在 Mac OSX 和 Linux 上會預設發生)。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Add the <ph id="ph1">`debugType`</ph> node inside <ph id="ph2">`buildOptions`</ph>.</source>
          <target state="translated">在 <ph id="ph2">`buildOptions`</ph> 內新增 <ph id="ph1">`debugType`</ph> 節點 。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>You'll need to add the <ph id="ph1">`debugType`</ph> node in <ph id="ph2">`project.json`</ph> for both the <ph id="ph3">`src/app`</ph> and <ph id="ph4">`src/library`</ph> folders.</source>
          <target state="translated">您必須針對 <ph id="ph3">`src/app`</ph> 和 <ph id="ph4">`src/library`</ph> 資料夾，在 <ph id="ph2">`project.json`</ph> 中新增 <ph id="ph1">`debugType`</ph> 節點。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Set a breakpoint at the <ph id="ph1">`WriteLine`</ph> statement in <ph id="ph2">`Main`</ph>.</source>
          <target state="translated">在 <ph id="ph2">`Main`</ph> 中的 <ph id="ph1">`WriteLine`</ph> 陳述式設定中斷點。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>You do this by pressing the <ph id="ph1">`F9`</ph> key, or by clicking the mouse in the left margin on the line you want the breakpoint.</source>
          <target state="translated">您可以按 <ph id="ph1">`F9`</ph> 鍵，或在您要設定中斷點的該行左邊界按一下滑鼠按鈕。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Open the debugger by pressing the debug icon on the left of the VS Code screen (see figure).</source>
          <target state="translated">在 VS Code 畫面左邊按 [偵錯] 圖示，開啟偵錯工具 (請參閱圖)。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Then, press the Play button to start the application under the debugger.</source>
          <target state="translated">然後，按下 [播放] 按鈕在偵錯工具中啟動應用程式。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>You should hit the breakpoint.</source>
          <target state="translated">您應該會遇到中斷點。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Step into the <ph id="ph1">`Get`</ph> method and make sure that you have passed in the correct arguments.</source>
          <target state="translated">逐步執行 <ph id="ph1">`Get`</ph> 方法，並確定您已傳入正確的引數。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Make sure that the answer is actually 42.</source>
          <target state="translated">確定實際答案為 42。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>