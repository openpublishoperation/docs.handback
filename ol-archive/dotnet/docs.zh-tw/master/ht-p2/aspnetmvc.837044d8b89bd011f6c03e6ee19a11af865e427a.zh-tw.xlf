<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-6a73dd2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3e8a8a953cbb3dde6ddf386f8c3b3a1fd4c549f1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\docker\aspnetmvc.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p2</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d07b3b2ff157cf9feabe08643edcb147384bc21a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">26ced15615eeefb010d1d8560e8fc4a24cdd8757</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Migrating ASP.NET MVC Applications to Windows Containers</source>
          <target state="translated">將 ASP.NET MVC 應用程式遷移到 Windows 容器</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Learn how to take an existing ASP.NET MVC application and run it in a Windows Docker Container</source>
          <target state="translated">了解如何擷取現有的 ASP.NET MVC 應用程式並在 Windows Docker 容器中執行</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Windows Containers, Docker, ASP.NET MVC</source>
          <target state="translated">Windows Docker 容器, Docker, ASP.NET MVC</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Migrating ASP.NET MVC Applications to Windows Containers</source>
          <target state="translated">將 ASP.NET MVC 應用程式遷移到 Windows 容器</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Running an existing .NET Framework-based application in a Windows container requires creating the Docker image that contains your application, and starting one or more containers to run that image.</source>
          <target state="translated">若要在 Windows 容器中執行現有的 .NET Framework 架構應用程式，您必須建立包含應用程式的 Docker 映像，並啟動要執行該映像的一或多個容器。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This topic explains the tasks you must perform to take an existing <bpt id="p1">[</bpt>ASP.NET MVC application<ept id="p1">](http://www.asp.net/mvc)</ept> and deploy it in a Windows container.</source>
          <target state="translated">本主題說明您必須執行才能擷取現有 <bpt id="p1">[</bpt>ASP.NET MVC 應用程式<ept id="p1">](http://www.asp.net/mvc)</ept> 並部署到 Windows 容器中的工作。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You'll start with an existing ASP.NET MVC application.</source>
          <target state="translated">您將從現有的 ASP.NET MVC 應用程式開始。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Then build the published assets using Visual Studio.</source>
          <target state="translated">然後使用 Visual Studio 建立已發行的資產。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You'll use Docker to create the image that contains your application, and runs that application when it is started.</source>
          <target state="translated">您將使用 Docker 建立映像，該映像包含您的應用程式，而且會在啟動時執行該應用程式。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>When you've finished, you can connect a browser to the site running in a Windows container and verify the application is running.</source>
          <target state="translated">完成後，您可以將瀏覽器連線到 Windows 容器中正在執行的網站，並確認應用程式正在執行。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This article assumes a basic understanding of Docker.</source>
          <target state="translated">本文假設您具備 Docker 的基本知識。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You can learn more about the Docker architecture by reading the <bpt id="p1">[</bpt>Docker Overview<ept id="p1">](https://docs.docker.com/engine/understanding-docker/)</ept> on the Docker site, if these concepts are new.</source>
          <target state="translated">如果不熟悉這些概念，您可以閱讀 Docker 網站上的 <bpt id="p1">[</bpt>Docker Overview<ept id="p1">](https://docs.docker.com/engine/understanding-docker/)</ept>，以深入了解 Docker 架構。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The application you'll run in a container is a simple website that answers questions randomly.</source>
          <target state="translated">您將在容器中執行的應用程式是隨機回答問題的簡單網站。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This application is a basic MVC application with no authentication support, or database storage, letting you focus on moving the web tier to a container.</source>
          <target state="translated">此應用程式是未支援驗證的基本 MVC 應用程式，或資料庫儲存體，讓您著重於將 Web 層移至容器。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Future topics will show how to move and manage persistent storage in containerized applications.</source>
          <target state="translated">未來的主題將說明如何移動和管理容器化應用程式中的永續性儲存體。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Moving your application involves these steps:</source>
          <target state="translated">移動您的應用程式包含下列步驟：</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Creating a publish task to build the assets for an image.<ept id="p1">](#publish-script)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>建立發行工作以建置映像資產<ept id="p1">](#publish-script)</ept></target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Building a Docker image that will run your application.<ept id="p1">](#build-the-image)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>建立用以執行應用程式的 Docker 映像<ept id="p1">](#build-the-image)</ept></target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Starting a Docker container that runs your image.<ept id="p1">](#start-a-container)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>啟動執行映像的 Docker 容器<ept id="p1">](#start-a-container)</ept></target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Verifying the application using your browser.<ept id="p1">](#verify-in-the-browser)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>使用瀏覽器確認應用程式<ept id="p1">](#verify-in-the-browser)</ept></target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The finished application is located in the <bpt id="p1">[</bpt>dotnet/core-docs repository on GitHub<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/framework/docker/MVCRandomAnswerGenerator)</ept>.</source>
          <target state="translated">完成的應用程式位於 <bpt id="p1">[</bpt>GitHub 上的 dotnet/core-docs 儲存機制<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/framework/docker/MVCRandomAnswerGenerator)</ept>。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
          <target state="translated">必要條件</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>At a minimum, your development machine must be running <bpt id="p1">[</bpt>Windows 10 Anniversary Update<ept id="p1">](https://www.microsoft.com/en-us/software-download/windows10/)</ept> or <bpt id="p2">[</bpt>Windows Server 2016<ept id="p2">](https://www.microsoft.com/en-us/cloud-platform/windows-server)</ept>.</source>
          <target state="translated">您的開發電腦至少必須執行 <bpt id="p1">[</bpt>Windows 10 年度更新版<ept id="p1">](https://www.microsoft.com/en-us/software-download/windows10/)</ept>或 <bpt id="p2">[</bpt>Windows Server 2016<ept id="p2">](https://www.microsoft.com/en-us/cloud-platform/windows-server)</ept>。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Before starting, you need to install <bpt id="p1">[</bpt>Docker for Windows<ept id="p1">](https://docs.docker.com/docker-for-windows/)</ept>, version 1.12 Beta 26, or newer.</source>
          <target state="translated">開始之前，您必須安裝 <bpt id="p1">[</bpt>Docker for Windows<ept id="p1">](https://docs.docker.com/docker-for-windows/)</ept> 1.12 Beta 26 版或更新版本。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Windows Container support is only available in the Beta channel at this time.</source>
          <target state="translated">目前只有 Beta 版提供 Windows 容器支援。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If you are using Windows Server 2016, you need to follow the instructions for <bpt id="p1">[</bpt>Container Host Deployment - Windows Server<ept id="p1">](https://msdn.microsoft.com/en-us/virtualization/windowscontainers/deployment/deployment)</ept> before you can run Docker containers.</source>
          <target state="translated">如果您使用 Windows Server 2016，您必須遵循<bpt id="p1">[</bpt>容器主機部署 - Windows Server<ept id="p1">](https://msdn.microsoft.com/en-us/virtualization/windowscontainers/deployment/deployment)</ept> 的指示，才能執行 Docker 容器。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>After installing and starting Docker, you'll need to right-click on the tray icon and select <bpt id="p1">**</bpt>Switch to Windows containers<ept id="p1">**</ept> in order to run Docker images based on Windows.</source>
          <target state="translated">安裝並啟動 Docker 之後，您必須以滑鼠右鍵按一下系統匣圖示，然後選取 [切換至 Windows 容器]，才能執行以 Windows 為基礎的 Docker 映像。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This command takes a few seconds to execute:</source>
          <target state="translated">此命令需要幾秒鐘的時間執行：</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Windows Container</source>
          <target state="translated">Windows 容器</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Publish script</source>
          <target state="translated">發行指令碼</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The first step is to get all the assets that you'll need to load into a Docker image in one place.</source>
          <target state="translated">第一個步驟是取得您必須載入一個位置之 Docker 映像的所有資產。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Fortunately, you can use the Visual Studio <bpt id="p1">**</bpt>Publish<ept id="p1">**</ept> command to create a publish profile for your application.</source>
          <target state="translated">幸運的是，您可以使用 Visual Studio 的 [發行] 命令來建立應用程式的發行設定檔。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This profile will put all the assets in one directory tree that you will copy to your target image later in this tutorial.</source>
          <target state="translated">此設定檔會將所有資產放在一個樹狀目錄中，您將在本教學課程稍後複製此目錄到目標映像。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Publish Steps<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>發行步驟<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Right click on the web project in Visual Studio, and select <bpt id="p1">**</bpt>Publish<ept id="p1">**</ept>.</source>
          <target state="translated">以滑鼠右鍵按一下 Visual Studio 中的 Web 專案，然後選取 [發行]。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Click the <bpt id="p1">**</bpt>Custom profile button, and then select <ept id="p1">**</ept>File System** as the method.</source>
          <target state="translated">按一下 [自訂設定檔] 按鈕，然後選取 [檔案系統] 作為方法。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Choose the directory.</source>
          <target state="translated">選擇目錄。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>By convention, the downloaded sample uses <ph id="ph1">`bin/PublishOutput`</ph>.</source>
          <target state="translated">依照慣例，下載的範例會使用 <ph id="ph1">`bin/PublishOutput`</ph>。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Publish Connection</source>
          <target state="translated">發行連線</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Next, open the <bpt id="p1">**</bpt>File Publish Options<ept id="p1">**</ept> section of the <bpt id="p2">**</bpt>Settings<ept id="p2">**</ept> tab.</source>
          <target state="translated">接下來，開啟 [設定] 索引標籤的 [檔案發行選項] 區段。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>Precompile during publishing<ept id="p1">**</ept>.</source>
          <target state="translated">選取 [發行期間預先編譯]。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This optimization means that you be compiling views in the Docker container, you are copying the precompiled views.</source>
          <target state="translated">此最佳化表示您要編譯 Docker 容器中的檢視，您將複製預先編譯的檢視。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Publish Settings</source>
          <target state="translated">發行設定</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Publish<ept id="p1">**</ept>, and Visual Studio will copy all the needed assets to the destination folder.</source>
          <target state="translated">按一下 [發行]，Visual Studio 會將所有需要的資產複製到目的資料夾。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Build the image</source>
          <target state="translated">建立映像</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>You define your Docker image in a Dockerfile that contains instructions for the base image, any additional components, the application you want to run, and other configuration image.</source>
          <target state="translated">您會在 Dockerfile 中定義 Docker 映像，其中包含基礎映像、任何其他元件、您要執行之應用程式及其他組態映像的相關指示。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The Dockerfile is the input to the <ph id="ph1">`docker build`</ph> command, which creates the image.</source>
          <target state="translated">Dockerfile 是建立映像之 <ph id="ph1">`docker build`</ph> 命令的輸入。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>You will build an image based on the <ph id="ph1">`microsft/aspnet`</ph> image located on <bpt id="p1">[</bpt>Docker Hub<ept id="p1">](https://hub.docker.com/r/microsoft/aspnet/)</ept>.</source>
          <target state="translated">您將以位於 <bpt id="p1">[</bpt>Docker Hub<ept id="p1">](https://hub.docker.com/r/microsoft/aspnet/)</ept> 上的 <ph id="ph1">`microsft/aspnet`</ph> 映像為基礎來建立映像。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The base image, <ph id="ph1">`microsoft/aspnet`</ph>, is a Windows Server image.</source>
          <target state="translated">基礎映像 <ph id="ph1">`microsoft/aspnet`</ph> 是 Windows Server 映像。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>In addition to the Windows Server Core, it has IIS and ASP.NET 4.6.2 installed and enabled.</source>
          <target state="translated">除了 Windows Server Core 之外，它也已安裝並啟用 IIS 和 ASP.NET 4.6.2。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>When you run this image in a container, it will automatically start IIS and any installed websites will be active.</source>
          <target state="translated">當您在容器中執行此映像時，它將會自動啟動 IIS，而且任何安裝的網站都將啟動。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The Dockerfile that creates your image looks like this:</source>
          <target state="translated">建立映像的 Dockerfile 看起來像這樣：</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>There is no <ph id="ph1">`ENTRYPOINT`</ph> command in this Dockerfile.</source>
          <target state="translated">此 Dockerfile 中沒有 <ph id="ph1">`ENTRYPOINT`</ph> 命令。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>You don't need one.</source>
          <target state="translated">您不需要此命令。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The base image ensures that IIS starts when the container starts.</source>
          <target state="translated">基礎映像可確保當容器啟動時，IIS 會啟動。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Next, you will need run a Docker build command to create the image that will run your ASP.NET application.</source>
          <target state="translated">接下來，您必須執行 Docker 的建立命令來建立映像，以執行您的 ASP.NET 應用程式。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>To do this, open a PowerShell window, and type the following command in the solution directory:</source>
          <target state="translated">若要這樣做，請開啟 PowerShell 視窗，然後在方案目錄中輸入下列命令：</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>This command will build the new image by following the instructions in your Dockerfile.</source>
          <target state="translated">此命令將遵循 Dockerfile 中的指示建立新的映像。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>This may include pulling the base image from <bpt id="p1">[</bpt>Docker Hub<ept id="p1">](http://hub.docker.com)</ept>, Then it will add your application to that image.</source>
          <target state="translated">這可能包括從 <bpt id="p1">[</bpt>Docker Hub<ept id="p1">](http://hub.docker.com)</ept> 提取基礎映像，然後它會將應用程式加入該映像。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Once that command completes, you can run the <ph id="ph1">`docker images`</ph> command to see information on the new image:</source>
          <target state="translated">該命令完成之後，您可以執行 <ph id="ph1">`docker images`</ph> 命令來了解新映像的相關資訊：</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The IMAGE ID will be different on your machine.</source>
          <target state="translated">您電腦上的映像識別碼會有所不同。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Now, let's run the application.</source>
          <target state="translated">現在，讓我們執行應用程式。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Start a container</source>
          <target state="translated">啟動容器</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>You start a container by executing the following <ph id="ph1">`docker run`</ph> command:</source>
          <target state="translated">您可以執行下列 <ph id="ph1">`docker run`</ph> 命令來啟動容器：</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`-d`</ph> argument tells Docker to start the image in detached mode.</source>
          <target state="translated"><ph id="ph1">`-d`</ph> 引數會指示 Docker 在離線模式中啟動映像。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>That means the Docker image runs disconnected from the current shell.</source>
          <target state="translated">這表示 Docker 映像可在與目前殼層中斷連線的情況下執行。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`-p 8000:8000`</ph> argument tells Docker how to map incoming ports.</source>
          <target state="translated"><ph id="ph1">`-p 8000:8000`</ph> 引數會指示 Docker 如何對應傳入通訊埠。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>In this example, we're using port 8000 on both the host and the container.</source>
          <target state="translated">在此範例中，我們將在主機和容器上使用通訊埠 8000。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`--name randomanswers`</ph> gives a name to the running container.</source>
          <target state="translated"><ph id="ph1">`--name randomanswers`</ph> 提供執行中容器的名稱。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>You can use this name instead of the container ID in most commands.</source>
          <target state="translated">您可以使用此名稱，而不是大多數命令中的容器識別碼。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`mvcrandomanswers`</ph> is the name of the image to start.</source>
          <target state="translated"><ph id="ph1">`mvcrandomanswers`</ph> 是要啟動之映像的名稱。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Verify in the browser</source>
          <target state="translated">在瀏覽器中確認</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>With the current release, you can't use <ph id="ph1">`http://localhost`</ph> to browse to your site.</source>
          <target state="translated">在目前的版本中，您無法使用 <ph id="ph1">`http://localhost`</ph> 瀏覽至您的網站。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>This is because of a known behavior in WinNAT, and it will be resolved in the future.</source>
          <target state="translated">這是因為 WinNAT 中的已知行為，未來將會解決此問題。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Until that is addressed, you need to use the IP address of the container.</source>
          <target state="translated">在解決此問題之前，您必須使用容器的 IP 位址。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Once the container starts, you'll need to find its IP address so that you can connect to your running container from a browser:</source>
          <target state="translated">容器啟動之後，您必須尋找其 IP 位址，才能從瀏覽器連線到您正在執行的容器：</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>You can connect to the running container using the IPv4 address and the configured port (8000), <ph id="ph1">`http://172.31.194.61:8000`</ph> in the example shown.</source>
          <target state="translated">您可以使用 IPv4 位址及上述範例中已設定的通訊埠 (8000) <ph id="ph1">`http://172.31.194.61:8000`</ph>，連線到執行中的容器。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Type that URL into your browser, and you should see the running site.</source>
          <target state="translated">在您的瀏覽器中輸入該 URL，您應該會看到執行中的網站。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Some VPN or proxy software may prevent you from navigating to your site.</source>
          <target state="translated">某些 VPN 或 Proxy 軟體可能會阻止您瀏覽至您的網站。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>You can temporarily disable it to make sure your container is working.</source>
          <target state="translated">您可以暫時停用，以確保您的容器可以正常運作。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The sample directory on GitHub contains a <bpt id="p1">[</bpt>PowerShell script<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/framework/docker/MVCRandomAnswerGenerator/run.ps1)</ept> that executes these commands for you.</source>
          <target state="translated">GitHub 上的範例目錄包含 <bpt id="p1">[</bpt>PowerShell 指令碼<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/framework/docker/MVCRandomAnswerGenerator/run.ps1)</ept>，可為您執行這些命令。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Open a PowerShell window, change directory to your solution directory, and type:</source>
          <target state="translated">開啟 PowerShell 視窗，將目錄變更為您的方案目錄，然後輸入：</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>It builds the image, displays the list of images on your machine, starts a container, and displays the IP address for that container.</source>
          <target state="translated">它會建立映像、顯示您電腦上的映像清單、啟動容器，然後顯示該容器的 IP 位址。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>When you are done, and you want to stop your container, issue a <ph id="ph1">`docker
stop`</ph> command:</source>
          <target state="translated">如果您想要在完成後停止容器，請發出 <ph id="ph1">`docker
stop`</ph> 命令：</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>To remove the container, issue a <ph id="ph1">`docker rm`</ph> command:</source>
          <target state="translated">若要移除容器，請發出 <ph id="ph1">`docker rm`</ph> 命令：</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Summary</source>
          <target state="translated">總結</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>In this topic, you've seen the steps to move and run an existing ASP.NET MVC application in a Windows Server container.</source>
          <target state="translated">在本主題中，您已了解在 Windows Server 容器中移動及執行現有 ASP.NET MVC 應用程式的步驟。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Running an existing application does not require any changes to your application.</source>
          <target state="translated">執行現有的應用程式不需要對您的應用程式進行任何變更。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>You need to run the tasks to publish your application, build a Docker image, and start that image in a new container.</source>
          <target state="translated">您必須執行工作來發行您的應用程式、建立 Docker 映像，並在新的容器中啟動該映像。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Leveraging Windows Server Containers are the easiest path to migrate your existing applications to this environment.</source>
          <target state="translated">利用 Windows Server 容器是將您現有的應用程式遷移到此環境的最簡單路徑。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>windows-container<ept id="p1">]: media/aspnetmvc/SwitchContainer.png</ept><bpt id="p2"> "</bpt>Switch to Windows Container<ept id="p2">"</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>windows-container<ept id="p1">]: media/aspnetmvc/SwitchContainer.png</ept><bpt id="p2"> "</bpt>切換至 Windows 容器<ept id="p2">"</ept></target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>publish-connection<ept id="p1">]: media/aspnetmvc/PublishConnection.png</ept><bpt id="p2"> "</bpt>Publish to File System<ept id="p2">"</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>publish-connection<ept id="p1">]: media/aspnetmvc/PublishConnection.png</ept><bpt id="p2"> "</bpt>發行至檔案系統<ept id="p2">"</ept></target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>publish-settings<ept id="p1">]: media/aspnetmvc/PublishSettings.png</ept><bpt id="p2"> "</bpt>Publish Settings<ept id="p2">"</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>publish-settings<ept id="p1">]: media/aspnetmvc/PublishSettings.png</ept><bpt id="p2"> "</bpt>發行設定<ept id="p2">"</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>