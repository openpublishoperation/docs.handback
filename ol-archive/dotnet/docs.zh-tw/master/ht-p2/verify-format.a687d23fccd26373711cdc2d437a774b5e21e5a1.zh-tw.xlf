<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-6a73dd2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bedd1d281256545776c874a38ccb71ad594467c2</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\base-types\verify-format.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p2</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cd3676f3accb66f84abe354fb6a722a64e34e371</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">33808c2a92622a4532f27e7b9f096fc072c58c36</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: verify that strings are in valid email format</source>
          <target state="translated">如何：確認字串是否為有效的電子郵件格式</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to verify that strings are in valid email format</source>
          <target state="translated">如何確認字串是否為有效的電子郵件格式</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>How to: verify that strings are in valid email format</source>
          <target state="translated">如何：確認字串是否為有效的電子郵件格式</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The following example uses a regular expression to verify that a string is in valid email format.</source>
          <target state="translated">下列範例會使用規則運算式來確認字串是否為有效的電子郵件格式。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">範例</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The example defines an <ph id="ph1">`IsValidEmail`</ph> method, which returns <ph id="ph2">`true`</ph> if the string contains a valid email address and <ph id="ph3">`false`</ph> if it does not, but takes no other action.</source>
          <target state="translated">此範例會定義 <ph id="ph1">`IsValidEmail`</ph> 方法，如果字串包含有效的電子郵件地址，則這個方法會傳回 <ph id="ph2">`true`</ph>，否則會傳回 <ph id="ph3">`false`</ph>，但不會採取其他任何動作。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>To verify that the email address is valid, the <ph id="ph1">`IsValidEmail`</ph> method calls the <bpt id="p1">[</bpt>Regex.Replace(String, String, MatchEvaluator)<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator))</ept> method with the <ph id="ph2">`(@)(.+)$`</ph> regular expression pattern to separate the domain name from the email address.</source>
          <target state="translated">為了確認電子郵件地址是否有效，<ph id="ph1">`IsValidEmail`</ph> 方法會以 <ph id="ph2">`(@)(.+)$`</ph> 規則運算式模式呼叫 <bpt id="p1">[</bpt>Regex.Replace(String, String, MatchEvaluator)<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator))</ept> 方法，從電子郵件地址分離出網域名稱。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The third parameter is a <bpt id="p1">[</bpt>MatchEvaluator<ept id="p1">](xref:System.Text.RegularExpressions.MatchEvaluator)</ept> delegate that represents the method that processes and replaces the matched text.</source>
          <target state="translated">第三個參數是 <bpt id="p1">[</bpt>MatchEvaluator<ept id="p1">](xref:System.Text.RegularExpressions.MatchEvaluator)</ept> 委派，用於表示處理並取代相符文字的方法。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The regular expression pattern is interpreted as follows.</source>
          <target state="translated">規則運算式模式解譯如下。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">模式</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">說明</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Match the <ph id="ph1">@</ph> character.</source>
          <target state="translated">比對 <ph id="ph1">@</ph> 字元。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This is the first capturing group.</source>
          <target state="translated">這是第一個擷取群組。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Match one or more occurrences of any character.</source>
          <target state="translated">比對出現一次或多次的任何字元。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This is the second capturing group.</source>
          <target state="translated">這是第二個擷取群組。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>End the match at the end of the string.</source>
          <target state="translated">在字串的結尾結束比對。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The domain name along with the <ph id="ph1">@</ph> character is passed to the <ph id="ph2">`DomainMapper`</ph> method, which uses the <bpt id="p1">[</bpt>IdnMapping<ept id="p1">](xref:System.Globalization.IdnMapping)</ept> class to translate Unicode characters that are outside the US-ASCII character range to Punycode.</source>
          <target state="translated">網域名稱會連同 <ph id="ph1">@</ph> 字元一併傳遞給 <ph id="ph2">`DomainMapper`</ph> 方法，而該方法會使用 <bpt id="p1">[</bpt>IdnMapping<ept id="p1">](xref:System.Globalization.IdnMapping)</ept> 類別將 US-ASCII 字元範圍以外的 Unicode 字元轉譯為 Punycode。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The method also sets the <ph id="ph1">`invalid`</ph> flag to <ph id="ph2">`true`</ph> if the <bpt id="p1">[</bpt>IdnMapping.GetAscii<ept id="p1">](xref:System.Globalization.IdnMapping.GetAscii(System.String))</ept> method detects any invalid characters in the domain name.</source>
          <target state="translated">如果 <bpt id="p1">[</bpt>IdnMapping.GetAscii<ept id="p1">](xref:System.Globalization.IdnMapping.GetAscii(System.String))</ept> 方法在網域名稱中偵測到任何無效字元，則該方法也會將 <ph id="ph1">`invalid`</ph> 旗標設定為 <ph id="ph2">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The method returns the Punycode domain name preceded by the <ph id="ph1">@</ph> symbol to the <ph id="ph2">`IsValidEmail`</ph> method.</source>
          <target state="translated">該方法會將前面加上 <ph id="ph1">@</ph> 符號的 Punycode 網域名稱回傳給 <ph id="ph2">`IsValidEmail`</ph> 方法。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`IsValidEmail`</ph> method then calls the <bpt id="p1">[</bpt>Regex.IsMatch(String, String)<ept id="p1">](xref:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String))</ept> method to verify that the address conforms to a regular expression pattern.</source>
          <target state="translated">接著 <ph id="ph1">`IsValidEmail`</ph> 方法會呼叫 <bpt id="p1">[</bpt>Regex.IsMatch(String, String)<ept id="p1">](xref:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String))</ept> 方法，確認位址符合規則運算式模式。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Note that the <ph id="ph1">`IsValidEmail`</ph> method does not perform authentication to validate the email address.</source>
          <target state="translated">請注意，<ph id="ph1">`IsValidEmail`</ph> 方法並不會驗證電子郵件地址的真實性。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>It merely determines whether its format is valid for an email address.</source>
          <target state="translated">它只會判斷電子郵件地址的格式是否有效。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In addition, the <ph id="ph1">`IsValidEmail`</ph> method does not verify that the top-level domain name is a valid domain name listed at the <bpt id="p1">[</bpt>IANA Root Zone Database<ept id="p1">](https://www.iana.org/domains/root/db)</ept>, which would require a look-up operation.</source>
          <target state="translated">此外，<ph id="ph1">`IsValidEmail`</ph> 方法不會驗證最上層網域名稱是否為 <bpt id="p1">[</bpt>IANA 根區域資料庫<ept id="p1">](https://www.iana.org/domains/root/db)</ept>列出的有效網域名稱，這項驗證需要執行查閱作業。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Instead, the regular expression merely verifies that the top-level domain name consists of between two and twenty-four ASCII characters, with alphanumeric first and last characters and the remaining characters being either alphanumeric or a hyphen (-).</source>
          <target state="translated">規則運算式只會驗證最上層網域名稱是否包含介於 2 到 24 個英數 ASCII 字元，且第一個和最後一個為英數字元，而其餘字元為英數字元或連字號 (-)。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In this example, the regular expression pattern <ph id="ph1">`^(?(")(".+?(?&lt;!\\)"@)|(([0-9a-z]((\.(?!\.))|[-!#\$%&amp;'\*\+/=\?\^`</ph><ph id="ph2">\{</ph><ph id="ph3">\}</ph><ph id="ph4">\|</ph>~\w])<bpt id="p1">*</bpt><ph id="ph5">)(?&lt;=[0-9a-z])@))(?(</ph><ph id="ph6">\[</ph>)(<ph id="ph7">\[</ph>(\d{1,3}<ph id="ph8">\.</ph>){3}\d{1,3}<ph id="ph9">\]</ph>)|(([0-9a-z][-\w]<ept id="p1">*</ept>[0-9a-z]*<ph id="ph10">\.</ph>)+[a-z0-9][<ph id="ph11">\-</ph>a-z0-9]{0,22}[a-z0-9]))$` is interpreted as shown in the following table.</source>
          <target state="translated">在此範例中，規則運算式模式 <ph id="ph1">`^(?(")(".+?(?&lt;!\\)"@)|(([0-9a-z]((\.(?!\.))|[-!#\$%&amp;'\*\+/=\?\^`</ph><ph id="ph2">\{</ph><ph id="ph3">\}</ph><ph id="ph4">\|</ph>~\w])<bpt id="p1">*</bpt><ph id="ph5">)(?&lt;=[0-9a-z])@))(?(</ph><ph id="ph6">\[</ph>)(<ph id="ph7">\[</ph>(\d{1,3}<ph id="ph8">\.</ph>){3}\d{1,3}<ph id="ph9">\]</ph>)|(([0-9a-z][-\w]<ept id="p1">*</ept>[0-9a-z]*<ph id="ph10">\.</ph>)+[a-z0-9][<ph id="ph11">\-</ph>a-z0-9]{0,22}[a-z0-9]))$` 會依下表所示解譯。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Note that the regular expression is compiled using the <bpt id="p1">[</bpt>RegexOptions.IgnoreCase<ept id="p1">](xref:System.Text.RegularExpressions.RegexOptions.IgnoreCase)</ept> flag.</source>
          <target state="translated">請注意，規則運算式是使用 <bpt id="p1">[</bpt>RegexOptions.IgnoreCase<ept id="p1">](xref:System.Text.RegularExpressions.RegexOptions.IgnoreCase)</ept> 旗標所編譯。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">模式</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">描述</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Begin the match at the start of the string.</source>
          <target state="translated">在字串開頭開始比對。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Determine whether the first character is a quotation mark.</source>
          <target state="translated">判斷第一個字元是否為引號。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`(?(")`</ph> is the beginning of an alternation construct.</source>
          <target state="translated"><ph id="ph1">`(?(")`</ph> 是替代建構的開頭。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If the first character is a quotation mark, match a beginning quotation mark followed by at least one occurrence of any character, followed by an ending quotation mark.</source>
          <target state="translated">如果第一個字元是引號，則比對是否為開頭引號後面至少接著一個任何字元，然後再接著結尾引號。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The ending quotation mark must not be preceded by a backslash character <ph id="ph1">`(\). (?&lt;!`</ph> is the beginning of a zero-width negative lookbehind assertion.</source>
          <target state="translated">結尾引號前面絕不能是字元 <ph id="ph1">`(\). (?&lt;!`</ph>。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The string should conclude with an at sign <ph id="ph1">(@).</ph></source>
          <target state="translated">此字串的結尾應為 <ph id="ph1">(@).</ph> 記號</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>`&amp;#124;(([0-9a-z]</source>
          <target state="translated">`&amp;#124;(([0-9a-z]</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If the first character is not a quotation mark, match any alphabetic character from a to z or A to Z (the comparison is case insensitive), or any numeric character from 0 to 9.</source>
          <target state="translated">如果第一個字元不是引號，則比對 a 到 z 或 A 到 Z 的任何字母字元 (此比較不區分大小寫) 或 0 到 9 的任何數字字元。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If the next character is a period, match it.</source>
          <target state="translated">如果下一個字元是句號，則相符。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If it is not a period, look ahead to the next character and continue the match.</source>
          <target state="translated">如果不是句號，則向右合樣下一個字元並繼續比對。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`(?!\.)`</ph> is a zero-width negative lookahead assertion that prevents two consecutive periods from appearing in the local part of an email address.</source>
          <target state="translated"><ph id="ph1">`(?!\.)`</ph> 是零寬度的右不合樣 (Negative Lookahead) 判斷提示，可防止電子郵件地址的本機部分出現兩個連續的句號。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`&amp;#124;[-!#\$%&amp;'\*\+/=\?\^`</ph><ph id="ph2">\{</ph><ph id="ph3">\}</ph><ph id="ph4">\&amp;</ph>#124;~\w]</source>
          <target state="translated"><ph id="ph1">`&amp;#124;[-!#\$%&amp;'\*\+/=\?\^`</ph><ph id="ph2">\{</ph><ph id="ph3">\}</ph><ph id="ph4">\&amp;</ph>#124;~\w]</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>If the next character is not a period, match any word character or one of the following characters: -!#$%'*+=?^`{}&amp;#124;~.</source>
          <target state="translated">如果下一個字元不是句號，則比對任何文字字元或下列其中一個字元：-!#$%'*+=?^`{}&amp;#124;~。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`((\.(?!\.))&amp;#124;[-!#\$%'\*\+/=\?\^`</ph><ph id="ph2">\{</ph><ph id="ph3">\}</ph><ph id="ph4">\&amp;</ph>#124;~\w])*</source>
          <target state="translated"><ph id="ph1">`((\.(?!\.))&amp;#124;[-!#\$%'\*\+/=\?\^`</ph><ph id="ph2">\{</ph><ph id="ph3">\}</ph><ph id="ph4">\&amp;</ph>#124;~\w])*</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Match the alternation pattern (a period followed by a non-period, or one of a number of characters) zero or more times.</source>
          <target state="translated">比對替代模式 (句號後面接著非句號，或某個字元) 零次以上。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Match the <ph id="ph1">@</ph> character.</source>
          <target state="translated">比對 <ph id="ph1">@</ph> 字元。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Continue the match if the character that precedes the <ph id="ph1">@</ph> character is A through Z, a through z, or 0 through 9.</source>
          <target state="translated">若 <ph id="ph1">@</ph> 字元前的字元為 A 到 Z、a 到 z 或 0 到 9，將會繼續比對。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`(?&lt;=[0-9a-z])`</ph> construct defines a zero-width positive lookbehind assertion.</source>
          <target state="translated"><ph id="ph1">`(?&lt;=[0-9a-z])`</ph> 建構可定義零寬度的左合樣 (Positive Lookbehind) 判斷提示。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Check whether the character that follows <ph id="ph1">@</ph> is an opening bracket.</source>
          <target state="translated">檢查 <ph id="ph1">@</ph> 後的字元是否為左括號。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>If it is an opening bracket, match the opening bracket followed by an IP address (four sets of one to three digits, with each set separated by a period) and a closing bracket.</source>
          <target state="translated">如果是左括號，則比對左括號後面是否接著 IP 位址 (四組 1 至 3 位數的數字，而每組數字均以句號隔開) 與右括號。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>If the character that follows <ph id="ph1">@</ph> is not an opening bracket, match one alphanumeric character with a value of A-Z, a-z, or 0-9, followed by zero or more occurrences of a word character or a hyphen, followed by zero or one alphanumeric character with a value of A-Z, a-z, or 0-9, followed by a period.</source>
          <target state="translated">若 <ph id="ph1">@</ph> 後的字元不是左括號，將會取一個英數字元與值 A-Z、a-z 或 0-9 進行比對，再比對出現零或多次的文字字元或連字號，再接著比對值為 A-Z、a-z 或 0-9 的零或一個英數字元，最後再比對句號。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>This pattern can be repeated one or more times, and must be followed by the top-level domain name.</source>
          <target state="translated">此模式可以重複一或多次，且後面必須接最上層網域名稱。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The top-level domain name must begin and end with an alphanumeric character (a-z, A-Z, and 0-9).</source>
          <target state="translated">最上層網域名稱必須以英數字元 (a-z、A-Z 和 0-9) 開頭和結尾。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>It can also include from zero to 22 ASCII characters that are either alphanumeric or hyphens.</source>
          <target state="translated">其中也可以包含零到 22 個 ASCII 字元，英數字元或連字號皆可。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>End the match at the end of the string.</source>
          <target state="translated">在字串的結尾結束比對。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>You can call the <ph id="ph1">`IsValidEmail`</ph> and <ph id="ph2">`DomainMapper`</ph> methods by using code such as the following:</source>
          <target state="translated">您可以使用下列這類程式碼來呼叫 <ph id="ph1">`IsValidEmail`</ph> 和 <ph id="ph2">`DomainMapper`</ph> 方法︰</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">另請參閱</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>.NET regular expressions<ept id="p1">](regular-expressions.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>.NET 規則運算式<ept id="p1">](regular-expressions.md)</ept></target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Regular expression examples<ept id="p1">](regex-examples.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>規則運算式範例<ept id="p1">](regex-examples.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>