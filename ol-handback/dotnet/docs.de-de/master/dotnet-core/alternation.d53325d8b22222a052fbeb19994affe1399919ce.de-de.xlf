<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-47f9650" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fa2a880e5bcc36354bd59d3dc032180c89984f1d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\base-types\alternation.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7ea1cf18c32a4315469a45805fc35de30ba6d032</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3d3448326504745578e19e66b9f54daab59c4a45</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Alternation constructs in regular expressions</source>
          <target state="translated">Alternierungskonstrukte in regulären Ausdrücken</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Alternation constructs in regular expressions</source>
          <target state="translated">Alternierungskonstrukte in regulären Ausdrücken</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Alternation constructs in regular expressions</source>
          <target state="translated">Alternierungskonstrukte in regulären Ausdrücken</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Alternation constructs modify a regular expression to enable either/or or conditional matching.</source>
          <target state="translated">Alternierungskonstrukte ändern einen regulären Ausdruck, um Entweder-Oder-Vergleiche oder eine bedingte Übereinstimmung zuzulassen.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>.NET supports three alternation constructs:</source>
          <target state="translated">.NET unterstützt drei Alternierungskonstrukte:</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Pattern matching with <bpt id="p1">**</bpt><ph id="ph1">|</ph><ept id="p1">**</ept></source>
          <target state="translated">Musterabgleich mit <bpt id="p1">**</bpt><ph id="ph1">|</ph><ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Conditional matching with <bpt id="p1">**</bpt>(?(<ept id="p1">**</ept><bpt id="p2">_</bpt>expression<ept id="p2">_</ept><bpt id="p3">**</bpt>)<ept id="p3">**</ept><bpt id="p4">_</bpt>yes<ept id="p4">_</ept><bpt id="p5">**</bpt><ph id="ph1">|</ph><ept id="p5">**</ept><bpt id="p6">_</bpt>no<ept id="p6">_</ept><bpt id="p7">**</bpt>)<ept id="p7">**</ept></source>
          <target state="translated">Bedingte Übereinstimmung mit <bpt id="p1">**</bpt>(?(<ept id="p1">**</ept><bpt id="p2">_</bpt>Ausdruck<ept id="p2">_</ept><bpt id="p3">**</bpt>)<ept id="p3">**</ept><bpt id="p4">_</bpt>ja<ept id="p4">_</ept><bpt id="p5">**</bpt><ph id="ph1">|</ph><ept id="p5">**</ept><bpt id="p6">_</bpt>nein<ept id="p6">_</ept><bpt id="p7">**</bpt>)<ept id="p7">**</ept></target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Conditional matching based on a valid captured group</source>
          <target state="translated">Bedingte Übereinstimmung auf Grundlage einer gültigen erfassten Gruppe</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Pattern matching with |</source>
          <target state="translated">Musterabgleich mit |</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You can use the vertical bar (|) character to match any one of a series of patterns, where the | character separates each pattern.</source>
          <target state="translated">Sie können das vertikale Balkenzeichen (|) für Vergleiche mit einem oder mehreren aus einer Reihe von Mustern verwenden, wobei das |-Zeichen als Trennzeichen für die einzelnen Muster dient.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Like the positive character class, the | character can be used to match any one of a number of single characters.</source>
          <target state="translated">Wie bei der positiven Zeichenklasse kann das |-Zeichen für Vergleiche mit jedem beliebigen Zeichen aus einer Reihe einzelner Zeichen verwendet werden.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The following example uses both a positive character class and either/or pattern matching with the | character to locate occurrences of the words "gray" or "grey" in a string.</source>
          <target state="translated">Im folgenden Beispiel wird sowohl eine positive Zeichenklasse als auch ein Entweder-Oder-Musterabgleich mithilfe des |-Zeichens verwendet, um Vorkommen der Wörter „gray“ oder „grey“ in einer Zeichenfolge zu finden.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In this case, the | character produces a regular expression that is more verbose.</source>
          <target state="translated">In diesem Fall ergibt das |-Zeichen einen regulären Ausdruck, der eine ausführlichere Ausgabe bewirkt.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The regular expression that uses the | character, <ph id="ph1">`\bgr(a|e)y\b,`</ph> is interpreted as shown in the following table.</source>
          <target state="translated">Der reguläre Ausdruck, der das |-Zeichen verwendet, <ph id="ph1">`\bgr(a|e)y\b,`</ph>, wird wie in der folgenden Tabelle dargestellt interpretiert.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">Muster</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Beschreibung</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Start at a word boundary.</source>
          <target state="translated">An einer Wortgrenze beginnen.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Match the characters "gr".</source>
          <target state="translated">Übereinstimmung mit den Zeichen "gr".</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>`(a</source>
          <target state="translated">`(a</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>e)`</source>
          <target state="translated">e)`</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Match either an "a" or an "e".</source>
          <target state="translated">Übereinstimmung mit entweder "a" oder "e".</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Match a "y" on a word boundary.</source>
          <target state="translated">Übereinstimmung mit "y" an einer Wortgrenze.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The | character can also be used to perform an either/or match with multiple characters or subexpressions, which can include any combination of character literals and regular expression language elements.</source>
          <target state="translated">Das |-Zeichen kann auch verwendet werden, um einen Entweder-Oder-Vergleich mit mehreren Zeichen oder Teilausdrücken durchzuführen, wobei eine beliebige Kombination von Zeichenliteralen und Sprachelementen für reguläre Ausdrücke enthalten sein kann.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>(The character class does not provide this functionality.) The following example uses the | character to extract either a U.S. Social Security Number (SSN), which is a 9-digit number with the format <bpt id="p1">*</bpt>ddd-dd-dddd<ept id="p1">*</ept>, or a U.S. Employer Identification Number (EIN), which is a 9-digit number with the format <bpt id="p2">*</bpt>dd-ddddddd<ept id="p2">*</ept>.</source>
          <target state="translated">(Die Zeichenklasse stellt diese Funktionalität nicht bereit.) Im folgenden Beispiel wird das |-Zeichen verwendet, um entweder eine Sozialversicherungsnummer in den USA, also eine neunstellige Zahl mit dem Format <bpt id="p1">*</bpt>ddd-dd-dddd<ept id="p1">*</ept>, oder eine Identifikationsnummer des Arbeitgebers in den USA (EIN, Employer Identification Number), also eine neunstellige Zahl mit dem Format <bpt id="p2">*</bpt>dd-ddddddd<ept id="p2">*</ept>, zu extrahieren.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The regular expression <ph id="ph1">`\b(\d{2}-\d{7}|\d{3}-\d{2}-\d{4})\b`</ph> is interpreted as shown in the following table.</source>
          <target state="translated">Der reguläre Ausdruck <ph id="ph1">`\b(\d{2}-\d{7}|\d{3}-\d{2}-\d{4})\b`</ph> wird entsprechend der Darstellung in der folgenden Tabelle interpretiert.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">Muster</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Beschreibung</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Start at a word boundary.</source>
          <target state="translated">An einer Wortgrenze beginnen.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>`(\d{2}-\d{7}</source>
          <target state="translated">`(\d{2}-\d{7}</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>;\d{3}-\d{2}-\d{4})`</source>
          <target state="translated">;\d{3}-\d{2}-\d{4})`</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Match either of the following: two decimal digits followed by a hyphen followed by seven decimal digits; or three decimal digits, a hyphen, two decimal digits, another hyphen, and four decimal digits.</source>
          <target state="translated">Eine der folgenden Varianten muss übereinstimmen: zwei Dezimalstellen gefolgt von einem Bindestrich gefolgt von sieben Dezimalstellen; oder drei Dezimalstellen, ein Bindestrich, zwei Dezimalstellen, ein weiterer Bindestrich und vier Dezimalstellen.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>End the match at a word boundary.</source>
          <target state="translated">Der Vergleich endet an einer Wortgrenze.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Conditional matching with an expression</source>
          <target state="translated">Bedingte Übereinstimmung mit einem Ausdruck</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This language element attempts to match one of two patterns depending on whether it can match an initial pattern.</source>
          <target state="translated">Dieses Sprachelement versucht, mit einem der zwei Muster übereinzustimmen, abhängig davon, ob es ein ursprüngliches Muster zuordnen kann.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Its syntax is:</source>
          <target state="translated">Die Syntax lautet:</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>(?(<ept id="p1">**</ept><bpt id="p2">_</bpt>expression<ept id="p2">_</ept><bpt id="p3">**</bpt>)<ept id="p3">**</ept><bpt id="p4">_</bpt>yes<ept id="p4">_</ept><bpt id="p5">**</bpt><ph id="ph1">|</ph><ept id="p5">**</ept><bpt id="p6">_</bpt>no<ept id="p6">_</ept><bpt id="p7">**</bpt>)<ept id="p7">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>(? (<ept id="p1">**</ept><bpt id="p2">_</bpt>Ausdruck<ept id="p2">_</ept><bpt id="p3">**</bpt>)<ept id="p3">**</ept><bpt id="p4">_</bpt>ja<ept id="p4">_</ept><bpt id="p5">**</bpt><ph id="ph1">|</ph><ept id="p5">**</ept><bpt id="p6">_</bpt>nein<ept id="p6">_</ept><bpt id="p7">**</bpt>)<ept id="p7">**</ept></target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>where <bpt id="p1">*</bpt>expression<ept id="p1">*</ept> is the initial pattern to match, <bpt id="p2">*</bpt>yes<ept id="p2">*</ept> is the pattern to match if expression is matched, and <bpt id="p3">*</bpt>no<ept id="p3">*</ept> is the optional pattern to match if <bpt id="p4">*</bpt>expression<ept id="p4">*</ept> is not matched.</source>
          <target state="translated">wobei <bpt id="p1">*</bpt>Ausdruck<ept id="p1">*</ept> das ursprüngliche zu entsprechende Muster ist. <bpt id="p2">*</bpt>ja<ept id="p2">*</ept> ist das entsprechende Muster, wenn „Ausdruck“ zutrifft, und <bpt id="p3">*</bpt>nein<ept id="p3">*</ept> ist das entsprechende optionale Muster, wenn <bpt id="p4">*</bpt>Ausdruck<ept id="p4">*</ept> nicht zutrifft.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The regular expression engine treats <bpt id="p1">*</bpt>expression<ept id="p1">*</ept> as a zero-width assertion; that is, the regular expression engine does not advance in the input stream after it evaluates <bpt id="p2">*</bpt>expression<ept id="p2">*</ept>.</source>
          <target state="translated">Das Modul für reguläre Ausdrücke behandelt <bpt id="p1">*</bpt>Ausdruck<ept id="p1">*</ept> als Assertion mit einer Breite von Null, das heißt, dass das Modul für reguläre Ausdrücke im Eingabestream nicht weitergeführt wird, nachdem es <bpt id="p2">*</bpt>Ausdruck<ept id="p2">*</ept> auswertet.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Therefore, this construct is equivalent to the following:</source>
          <target state="translated">Daher entspricht dieses Konstrukt Folgendem:</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>(?(?<ept id="p1">**</ept><ph id="ph1">=</ph><bpt id="p2">_</bpt>expression<ept id="p2">_</ept><bpt id="p3">**</bpt>)<ept id="p3">**</ept><bpt id="p4">_</bpt>yes<ept id="p4">_</ept><bpt id="p5">**</bpt><ph id="ph2">|</ph><ept id="p5">**</ept><bpt id="p6">_</bpt>no<ept id="p6">_</ept><bpt id="p7">**</bpt>)<ept id="p7">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>(?(?<ept id="p1">**</ept><ph id="ph1">=</ph><bpt id="p2">_</bpt>Ausdruck<ept id="p2">_</ept><bpt id="p3">**</bpt>)<ept id="p3">**</ept><bpt id="p4">_</bpt>ja<ept id="p4">_</ept><bpt id="p5">**</bpt><ph id="ph2">|</ph><ept id="p5">**</ept><bpt id="p6">_</bpt>nein<ept id="p6">_</ept><bpt id="p7">**</bpt>)<ept id="p7">**</ept></target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>where <bpt id="p1">**</bpt>(?<ept id="p1">**</ept><ph id="ph1">=</ph><bpt id="p2">_</bpt>expression<ept id="p2">_</ept><bpt id="p3">**</bpt>)<ept id="p3">**</ept> is a zero-width assertion construct.</source>
          <target state="translated">, wobei <bpt id="p1">**</bpt>(?<ept id="p1">**</ept><ph id="ph1">=</ph><bpt id="p2">_</bpt>Ausdruck<ept id="p2">_</ept><bpt id="p3">**</bpt>)<ept id="p3">**</ept> ein Assertionskonstrukt mit einer Breite von Null ist.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>(For more information, see <bpt id="p1">[</bpt>Grouping constructs in regular expressions<ept id="p1">](grouping.md)</ept>.) Because the regular expression engine interprets <bpt id="p2">*</bpt>expression<ept id="p2">*</ept> as an anchor (a zero-width assertion), <bpt id="p3">*</bpt>expression<ept id="p3">*</ept> must either be a zero-width assertion (for more information, see <bpt id="p4">[</bpt>Anchors in regular expressions<ept id="p4">](anchors.md)</ept>) or a subexpression that is also contained in <bpt id="p5">*</bpt>yes<ept id="p5">*</ept>.</source>
          <target state="translated">(Weitere Informationen finden Sie unter <bpt id="p1">[</bpt>Gruppierungskonstrukte in regulären Ausdrücken<ept id="p1">](grouping.md)</ept>.) Da das Modul für reguläre Ausdrücke <bpt id="p2">*</bpt>Ausdruck<ept id="p2">*</ept> als Anker (eine Assertion mit einer Breite von null) interpretiert, muss <bpt id="p3">*</bpt>Ausdruck<ept id="p3">*</ept> entweder eine Assertion mit einer Breite von null (weitere Informationen finden Sie unter <bpt id="p4">[</bpt>Anker in regulären Ausdrücken<ept id="p4">](anchors.md)</ept>) oder ein Teilausdruck sein, der auch in <bpt id="p5">*</bpt>ja<ept id="p5">*</ept> enthalten ist.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Otherwise, the <bpt id="p1">*</bpt>yes<ept id="p1">*</ept> pattern cannot be matched.</source>
          <target state="translated">Andernfalls kann das Muster <bpt id="p1">*</bpt>ja<ept id="p1">*</ept> nicht zugeordnet werden.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">*</bpt>expression<ept id="p1">*</ept> is a named or numbered capturing group, the alternation construct is interpreted as a capture test; for more information, see the next section, <bpt id="p2">[</bpt>Conditional matching based on a valid captured group<ept id="p2">](#conditional-matching-based-on-a-valid-captured-group)</ept>.</source>
          <target state="translated">Wenn <bpt id="p1">*</bpt>Ausdruck<ept id="p1">*</ept> eine benannte oder nummerierte Erfassungsgruppe ist, wird das Alternierungskonstrukt als Erfassungstest interpretiert. Weitere Informationen finden Sie im nächsten Abschnitt <bpt id="p2">[</bpt>Bedingte Übereinstimmung auf Grundlage einer gültigen erfassten Gruppe<ept id="p2">](#conditional-matching-based-on-a-valid-captured-group)</ept>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>In other words, the regular expression engine does not attempt to match the captured substring, but instead tests for the presence or absence of the group.</source>
          <target state="translated">Das heißt, dass das Modul für reguläre Ausdrücke nicht versucht, mit der erfassten Teilzeichenfolge übereinzustimmen. Stattdessen wird das Vorhandensein oder Fehlen der Gruppe getestet.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The following example is a variation of the example that appears in the previous section.</source>
          <target state="translated">Das folgende Beispiel ist eine Abwandlung des Beispiels aus dem vorherigen Abschnitt.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>It uses conditional matching to determine whether the first three characters after a word boundary are two digits followed by a hyphen.</source>
          <target state="translated">Es wird die bedingte Übereinstimmung verwendet, um zu ermitteln, ob die ersten drei Zeichen nach einer Wortgrenze zwei Ziffern gefolgt von einem Bindestrich sind.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>If they are, it attempts to match a U.S. Employer Identification Number (EIN).</source>
          <target state="translated">Wenn dies der Fall ist, wird eine Übereinstimmung mit einer Identifikationsnummer des Arbeitgebers in den USA versucht.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>If not, it attempts to match a U.S. Social Security Number (SSN).</source>
          <target state="translated">Wenn dies nicht der Fall ist, wird eine Übereinstimmung mit einer Sozialversicherungsnummer in den USA versucht.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The regular expression pattern <ph id="ph1">`\b(?(\d{2}-)\d{2}-\d{7}|\d{3}-\d{2}-\d{4})\b`</ph> is interpreted as shown in the following table.</source>
          <target state="translated">Das Muster für reguläre Ausdrücke <ph id="ph1">`\b(?(\d{2}-)\d{2}-\d{7}|\d{3}-\d{2}-\d{4})\b`</ph> wird entsprechend der folgenden Tabelle interpretiert:</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">Muster</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Beschreibung</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Start at a word boundary.</source>
          <target state="translated">An einer Wortgrenze beginnen.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Determine whether the next three characters consist of two digits followed by a hyphen.</source>
          <target state="translated">Bestimmen, ob die nächsten drei Zeichen aus zwei Ziffern gefolgt von einem Bindestrich bestehen.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>If the previous pattern matches, match two digits followed by a hyphen followed by seven digits.</source>
          <target state="translated">Wenn das vorherige Muster übereinstimmt, stimmen zwei Ziffern gefolgt von einem Bindestrich gefolgt von sieben Ziffern überein.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>If the previous pattern does not match, match three decimal digits, a hyphen, two decimal digits, another hyphen, and four decimal digits.</source>
          <target state="translated">Wenn das vorherige Muster nicht übereinstimmt, stimmen drei Dezimalstellen, ein Bindestrich, zwei Dezimalstellen, ein weiterer Bindestrich und vier Dezimalstellen überein.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Match a word boundary.</source>
          <target state="translated">Übereinstimmung mit einer Wortgrenze.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Conditional matching based on a valid captured group</source>
          <target state="translated">Bedingte Übereinstimmung auf Grundlage einer gültigen erfassten Gruppe</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>This language element attempts to match one of two patterns depending on whether it has matched a specified capturing group.</source>
          <target state="translated">Dieses Sprachelement versucht, mit einem der zwei Muster übereinzustimmen, abhängig davon, ob es mit einer angegebenen Erfassungsgruppe übereingestimmt hat.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Its syntax is:</source>
          <target state="translated">Die Syntax lautet:</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>(?(<ept id="p1">**</ept><bpt id="p2">_</bpt>name<ept id="p2">_</ept><bpt id="p3">**</bpt>)<ept id="p3">**</ept><bpt id="p4">_</bpt>yes<ept id="p4">_</ept><bpt id="p5">**</bpt><ph id="ph1">|</ph><ept id="p5">**</ept><bpt id="p6">_</bpt>no<ept id="p6">_</ept><bpt id="p7">**</bpt>)<ept id="p7">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>(?(<ept id="p1">**</ept><bpt id="p2">_</bpt>Name<ept id="p2">_</ept><bpt id="p3">**</bpt>)<ept id="p3">**</ept><bpt id="p4">_</bpt>ja<ept id="p4">_</ept><bpt id="p5">**</bpt><ph id="ph1">|</ph><ept id="p5">**</ept><bpt id="p6">_</bpt>nein<ept id="p6">_</ept><bpt id="p7">**</bpt>)<ept id="p7">**</ept></target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>or</source>
          <target state="translated">oder</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>(?(<ept id="p1">**</ept><bpt id="p2">_</bpt>number<ept id="p2">_</ept><bpt id="p3">**</bpt>)<ept id="p3">**</ept><bpt id="p4">_</bpt>yes<ept id="p4">_</ept><bpt id="p5">**</bpt><ph id="ph1">|</ph><ept id="p5">**</ept><bpt id="p6">_</bpt>no<ept id="p6">_</ept><bpt id="p7">**</bpt>)<ept id="p7">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>(?(<ept id="p1">**</ept><bpt id="p2">_</bpt>Nummer<ept id="p2">_</ept><bpt id="p3">**</bpt>)<ept id="p3">**</ept><bpt id="p4">_</bpt>ja<ept id="p4">_</ept><bpt id="p5">**</bpt><ph id="ph1">|</ph><ept id="p5">**</ept><bpt id="p6">_</bpt>nein<ept id="p6">_</ept><bpt id="p7">**</bpt>)<ept id="p7">**</ept></target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>where <bpt id="p1">*</bpt>name<ept id="p1">*</ept> is the name and <bpt id="p2">*</bpt>number<ept id="p2">*</ept> is the number of a capturing group, <bpt id="p3">*</bpt>yes<ept id="p3">*</ept> is the expression to match if name or number has a match, and <bpt id="p4">*</bpt>no<ept id="p4">*</ept> is the optional expression to match if it does not.</source>
          <target state="translated">, wobei <bpt id="p1">*</bpt>Name<ept id="p1">*</ept> der Name und <bpt id="p2">*</bpt>Nummer<ept id="p2">*</ept> die Nummer einer Erfassungsgruppe ist. <bpt id="p3">*</bpt>ja<ept id="p3">*</ept> ist der Ausdruck, mit dem Übereinstimmung bestehen muss, wenn Name oder Nummer eine Übereinstimmung aufweisen, und <bpt id="p4">*</bpt>nein<ept id="p4">*</ept> ist der optionale Ausdruck, mit dem Übereinstimmung bestehen muss, wenn dies nicht der Fall ist.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">*</bpt>name<ept id="p1">*</ept> does not correspond to the name of a capturing group that is used in the regular expression pattern, the alternation construct is interpreted as an expression test, as explained in the previous section.</source>
          <target state="translated">Wenn <bpt id="p1">*</bpt>Name<ept id="p1">*</ept> nicht dem Namen einer Erfassungsgruppe entspricht, die im Muster des regulären Ausdrucks verwendet wird, wird das Alternierungskonstrukt, wie im vorherigen Abschnitt erläutert, als Ausdruckstest interpretiert.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Typically, this means that expression evaluates to <ph id="ph1">`false`</ph>.</source>
          <target state="translated">In der Regel bedeutet dies, dass „Ausdruck“ <ph id="ph1">`false`</ph> ergibt.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`number`</ph> does not correspond to a numbered capturing group that is used in the regular expression pattern, the regular expression engine throws an <bpt id="p1">[</bpt>ArgumentException<ept id="p1">](xref:System.ArgumentException)</ept>.</source>
          <target state="translated">Wenn <ph id="ph1">`number`</ph> keiner nummerierten Erfassungsgruppe entspricht, die im Muster des regulären Ausdrucks verwendet wird, löst das Modul für reguläre Ausdrücke eine <bpt id="p1">[</bpt>ArgumentException<ept id="p1">](xref:System.ArgumentException)</ept> aus.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The following example is a variation of the example that appears in the previous section.</source>
          <target state="translated">Das folgende Beispiel ist eine Abwandlung des Beispiels aus dem vorherigen Abschnitt.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>It uses a capturing group named <ph id="ph1">`n2`</ph> that consists of two digits followed by a hyphen.</source>
          <target state="translated">Es wird eine Erfassungsgruppe mit dem Namen <ph id="ph1">`n2`</ph> verwendet, die aus zwei Ziffern gefolgt von einem Bindestrich besteht.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The alternation construct tests whether this capturing group has been matched in the input string.</source>
          <target state="translated">Das Alternierungskonstrukt testet, ob diese Erfassungsgruppe in der Eingabezeichenfolge abgeglichen wurde.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>If it has, the alternation construct attempts to match the last seven digits of a nine-digit U.S. Employer Identification Number (EIN).</source>
          <target state="translated">Wenn dies der Fall ist, versucht das Alternierungskonstrukt, mit den letzten sieben Ziffern einer neunstelligen Identifikationsnummer des Arbeitgebers in den USA versucht.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>If it has not, it attempts to match a nine-digit U.S. Social Security Number (SSN).</source>
          <target state="translated">Wenn dies nicht der Fall ist, versucht es, mit einer neunstelligen Sozialversicherungsnummer in den USA versucht.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The regular expression pattern <ph id="ph1">`\b(?&lt;n2&gt;\d{2}-)*(?(n2)\d{7}|\d{3}-\d{2}-\d{4})\b`</ph> is interpreted as shown in the following table.</source>
          <target state="translated">Das Muster für reguläre Ausdrücke <ph id="ph1">`\b(?&lt;n2&gt;\d{2}-)*(?(n2)\d{7}|\d{3}-\d{2}-\d{4})\b`</ph> wird entsprechend der folgenden Tabelle interpretiert:</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">Muster</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Beschreibung</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Start at a word boundary.</source>
          <target state="translated">An einer Wortgrenze beginnen.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Match zero or one occurrence of two digits followed by a hyphen.</source>
          <target state="translated">Entspricht&amp;0; (Null) oder einem Vorkommen von zwei Ziffern gefolgt von einem Bindestrich.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Name this capturing group <ph id="ph1">`n2`</ph>.</source>
          <target state="translated">Geben Sie für die Erfassungsgruppe <ph id="ph1">`n2`</ph> als Namen an.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Test whether <ph id="ph1">`n2`</ph> was matched in the input string.</source>
          <target state="translated">Prüfen, ob <ph id="ph1">`n2`</ph> in der Eingabezeichenfolge abgeglichen wurde.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`n2`</ph> was matched, match seven decimal digits.</source>
          <target state="translated">Wenn <ph id="ph1">`n2`</ph> abgeglichen wurde, stimmen sieben Dezimalstellen überein.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>;\d{3}-\d{2}-\d{4}`</source>
          <target state="translated">;\d{3}-\d{2}-\d{4}`</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`n2`</ph> was not matched, match three decimal digits, a hyphen, two decimal digits, another hyphen, and four decimal digits.</source>
          <target state="translated">Wenn <ph id="ph1">`n2`</ph> nicht abgeglichen wurde, stimmen drei Dezimalstellen, ein Bindestrich, zwei Dezimalstellen, ein weiterer Bindestrich und vier Dezimalstellen überein.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Match a word boundary.</source>
          <target state="translated">Übereinstimmung mit einer Wortgrenze.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>A variation of this example that uses a numbered group instead of a named group is shown in the following example.</source>
          <target state="translated">Eine Variante dieses Beispiels, die eine nummerierte Gruppe statt einer benannten Gruppe verwendet, wird im folgenden Beispiel gezeigt.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Its regular expression pattern is <ph id="ph1">`\b(\d{2}-)*(?(1)\d{7}|\d{3}-\d{2}-\d{4})\b`</ph>.</source>
          <target state="translated">Das entsprechende Muster des regulären Ausdrucks lautet <ph id="ph1">`\b(\d{2}-)*(?(1)\d{7}|\d{3}-\d{2}-\d{4})\b`</ph>.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">Siehe auch</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Regular expression language - quick reference<ept id="p1">](quick-ref.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Sprachelemente für reguläre Ausdrücke – Kurzübersicht<ept id="p1">](quick-ref.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>