<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-eac019f" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">aafa0c110dc3a2820f7e050d70b9450af1db35d8</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\tutorials\using-with-xplat-cli.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p1</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8ad728e8551de1a665eaf4799620996b7afda6d0</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1cc7baffec32a9306cc56315ec41e6862db64d33</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Getting started with .NET Core on Windows/Linux/macOS using the command line</source>
          <target state="translated">Erste Schritte mit .NET Core unter Windows/Linux/Mac OS unter Verwendung der Befehlszeile</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Getting started with .NET Core on Windows, Linux, or macOS using the .NET Core command line interface (CLI)</source>
          <target state="translated">Erste Schritte mit .NET Core unter Windows, Linux oder Mac OS unter Verwendung der .NET Core-Befehlszeilenschnittstelle (CLI)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Getting started with .NET Core on Windows/Linux/macOS using the command line</source>
          <target state="translated">Erste Schritte mit .NET Core unter Windows/Linux/Mac OS unter Verwendung der Befehlszeile</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This guide will show you how to use the .NET Core CLI tooling to build cross-platform console apps.</source>
          <target state="translated">In diesem Leitfaden erfahren Sie, wie Sie mit den Tools der .NET Core-Befehlszeilenschnittstelle plattformübergreifende Konsolenanwendungen erstellen können.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>It will start with the most basic console app and eventually span multiple projects, including testing.</source>
          <target state="translated">Dabei wird mit einer ganz einfachen Konsolen-App begonnen, die immer mehr erweitert wird und sich über mehrere Projekte einschließlich Tests erstreckt.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You'll add these features step-by-step, building on what you've already seen and built.</source>
          <target state="translated">Die einzelnen Funktionen werden schrittweise hinzugefügt, wobei die einzelnen Schritte aufeinander aufbauen.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>If you're unfamiliar with the .NET Core CLI toolset, read <bpt id="p1">[</bpt>the .NET Core SDK overview<ept id="p1">](../sdk.md)</ept>.</source>
          <target state="translated">Wenn Sie mit dem Toolset der .NET Core-Befehlszeilenschnittstelle nicht vertraut sind, finden Sie entsprechende Informationen in der <bpt id="p1">[</bpt>Übersicht über das .NET Core SDK<ept id="p1">](../sdk.md)</ept>.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
          <target state="translated">Erforderliche Komponenten</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Before you begin, ensure you have the <bpt id="p1">[</bpt>latest .NET Core CLI tooling<ept id="p1">](https://www.microsoft.com/net/core)</ept>.</source>
          <target state="translated">Stellen Sie vor Beginn sicher, dass die <bpt id="p1">[</bpt>aktuellsten Tools der .NET Core-CLI<ept id="p1">](https://www.microsoft.com/net/core)</ept> installiert sind.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You'll also need a text editor.</source>
          <target state="translated">Außerdem benötigen Sie einen Text-Editor.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Hello, Console App!</source>
          <target state="translated">Hallo Konsolenanwendung!</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>First, navigate to or create a new folder with a name you like.</source>
          <target state="translated">Erstellen Sie zunächst einen Ordner mit einem beliebigen Namen.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>"Hello" is the name chosen for the sample code, which can be found <bpt id="p1">[</bpt>here<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/console-apps/Hello)</ept>.</source>
          <target state="translated">Wir haben den Namen „Hello“ für den Beispielcode verwendet, der <bpt id="p1">[</bpt>hier<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/console-apps/Hello)</ept> zu finden ist.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Open up a command prompt and type the following:</source>
          <target state="translated">Öffnen Sie die Eingabeaufforderung, und geben Sie folgenden Befehl ein:</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Let's do a quick walkthrough:</source>
          <target state="translated">Hier eine kurze Beschreibung der Schritte:</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">`dotnet new`</ph><ept id="p1">](../tools/dotnet-new.md)</ept> creates an up-to-date <ph id="ph2">`project.json`</ph> file with NuGet dependencies necessary to build a console app.</source>
          <target state="translated">Mit <bpt id="p1">[</bpt><ph id="ph1">`dotnet new`</ph><ept id="p1">](../tools/dotnet-new.md)</ept> wird eine aktuelle <ph id="ph2">`project.json`</ph>-Datei mit den NuGet-Abhängigkeiten erstellt, die zum Erstellen einer Konsolenanwendung benötigt werden.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>It also creates a <ph id="ph1">`Program.cs`</ph>, a basic file containing the entry point for the application.</source>
          <target state="translated">Zudem wird <ph id="ph1">`Program.cs`</ph> erstellt. Hierbei handelt es sich um eine einfache Datei, die den Einstiegspunkt für die Anwendung enthält.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`project.json`</ph>:</source>
          <target state="translated"><ph id="ph1">`project.json`</ph>:</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Program.cs`</ph>:</source>
          <target state="translated"><ph id="ph1">`Program.cs`</ph>:</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">`dotnet restore`</ph><ept id="p1">](../tools/dotnet-restore.md)</ept> calls into NuGet to restore the tree of dependencies.</source>
          <target state="translated"><bpt id="p1">[</bpt><ph id="ph1">`dotnet restore`</ph><ept id="p1">](../tools/dotnet-restore.md)</ept> führt einen Aufruf in NuGet aus, um die Abhängigkeitenstruktur wiederherzustellen.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>NuGet analyzes the <ph id="ph1">`project.json`</ph> file, downloads the dependencies stated in the file (or grabs them from a cache on your machine), and writes the <ph id="ph2">`project.lock.json`</ph> file.</source>
          <target state="translated">NuGet analysiert die Datei <ph id="ph1">`project.json`</ph>, lädt die in der Datei angegebenen Abhängigkeiten herunter (oder ruft diese aus einem Cache auf Ihrem Computer ab) und schreibt die Datei <ph id="ph2">`project.lock.json`</ph>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`project.lock.json`</ph> file is necessary to be able to compile and run.</source>
          <target state="translated">Die Datei <ph id="ph1">`project.lock.json`</ph> ist zum Kompilieren und Ausführen erforderlich.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`project.lock.json`</ph> file is a persisted and complete set of the graph of NuGet dependencies and other information describing an app.</source>
          <target state="translated">Bei der Datei <ph id="ph1">`project.lock.json`</ph> handelt es sich um eine persistente und umfassende Gruppe des Diagramms von NuGet-Abhängigkeiten und anderen Informationen, die eine Anwendung beschreiben.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This file is read by other tools, such as <ph id="ph1">`dotnet build`</ph> and <ph id="ph2">`dotnet run`</ph>, enabling them to process the source code with a correct set of NuGet dependencies and binding resolutions.</source>
          <target state="translated">Diese Datei wird von anderen Tools wie <ph id="ph1">`dotnet build`</ph> und <ph id="ph2">`dotnet run`</ph> gelesen, die dadurch in die Lage versetzt werden, den Quellcode mit einer vorschriftsmäßigen Menge von NuGet-Abhängigkeiten und Bindungsauflösungen zu verarbeiten.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">`dotnet run`</ph><ept id="p1">](../tools/dotnet-run.md)</ept> calls <ph id="ph2">`dotnet build`</ph> to ensure that the build targets have been built, and then calls <ph id="ph3">`dotnet &lt;assembly.dll&gt;`</ph> to run the target application.</source>
          <target state="translated"><bpt id="p1">[</bpt><ph id="ph1">`dotnet run`</ph><ept id="p1">](../tools/dotnet-run.md)</ept> ruft <ph id="ph2">`dotnet build`</ph> auf, um sicherzustellen, dass die Buildziele erstellt wurden, und ruft anschließend <ph id="ph3">`dotnet &lt;assembly.dll&gt;`</ph> auf, um die Zielanwendung auszuführen.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>You can also execute <bpt id="p1">[</bpt><ph id="ph1">`dotnet build`</ph><ept id="p1">](../tools/dotnet-build.md)</ept> to compile the code without running the build console applications.</source>
          <target state="translated">Sie können auch <bpt id="p1">[</bpt><ph id="ph1">`dotnet build`</ph><ept id="p1">](../tools/dotnet-build.md)</ept> ausführen, um den Code zu kompilieren, ohne die Konsolenanwendungen des Builds auszuführen.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Building a self-contained application</source>
          <target state="translated">Erstellen einer eigenständigen Anwendung</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Let's try compiling a self-contained application instead of a portable application.</source>
          <target state="translated">Versuchen wir, anstelle einer portierbaren Anwendung eine eigenständige Anwendung zu kompilieren.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>You can read more about the <bpt id="p1">[</bpt>types of portability in .NET Core<ept id="p1">](../deploying/index.md)</ept> to learn about the different application types, and how they are deployed.</source>
          <target state="translated">Weitere Informationen zu den Arten der Portierbarkeit in .NET Core sowie zu deren Bereitstellung finden Sie <bpt id="p1">[</bpt>hier<ept id="p1">](../deploying/index.md)</ept>.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You need to make some changes to your <ph id="ph1">`project.json`</ph> file to direct the tools to build a self-contained application.</source>
          <target state="translated">Sie müssen einige Änderungen an Ihrer <ph id="ph1">`project.json`</ph>-Datei vornehmen, um die Tools so anzuweisen, dass eine eigenständige Anwendung erstellt wird.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You can see these in the <bpt id="p1">[</bpt>HelloNative<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/console-apps/HelloNative)</ept> project in the samples directory.</source>
          <target state="translated">Diese sind im Projekt <bpt id="p1">[</bpt>HelloNative<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/console-apps/HelloNative)</ept> im Beispielverzeichnis zu sehen.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The first change is to remove the <ph id="ph1">`"type": "platform"`</ph> element from all dependencies.</source>
          <target state="translated">Die erste Änderung besteht darin, das Element <ph id="ph1">`"type": "platform"`</ph> aus allen Abhängigkeiten zu entfernen.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This project's only dependency so far is <ph id="ph1">`"Microsoft.NETCore.App"`</ph>.</source>
          <target state="translated">Dieses Projekt enthält bis jetzt nur die Abhängigkeit <ph id="ph1">`"Microsoft.NETCore.App"`</ph>.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`dependencies`</ph> section should look like this:</source>
          <target state="translated">Der Abschnitt <ph id="ph1">`dependencies`</ph> sollte wie folgt aussehen:</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Next, you need to add a <ph id="ph1">`runtimes`</ph> node to specify all the target execution environments.</source>
          <target state="translated">Als Nächstes müssen Sie einen <ph id="ph1">`runtimes`</ph>-Knoten hinzufügen, um alle Zielausführungsumgebungen anzugeben.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For example, the following <ph id="ph1">`runtimes`</ph> node instructs the build system to create executables for the 64 bit version of Windows 10 and the 64 bit version of Mac OS X version 10.11.</source>
          <target state="translated">Der folgende <ph id="ph1">`runtimes`</ph>-Knoten weist das Buildsystem beispielsweise an, die ausführbaren Dateien für die 64-Bit-Version von Windows 10 und der 64-Bit-Version von Mac OS X Version 10.11 zu erstellen.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The build system will generate native executables for the current environment.</source>
          <target state="translated">Das Buildsystem generiert native ausführbare Dateien für die aktuelle Umgebung.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If you are following these steps on a Windows machine, you'll build a Windows executable.</source>
          <target state="translated">Wenn Sie diese Schritte auf einem Windows-Computer befolgen, erstellen Sie eine ausführbare Windows-Datei.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If you are following these steps on a Mac, you'll build the OS X executable.</source>
          <target state="translated">Wenn Sie diese Schritte auf einem Mac-Computer befolgen, erstellen Sie eine ausführbare OS X-Datei.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>See the full list of supported runtimes in the <bpt id="p1">[</bpt>RID catalog<ept id="p1">](../rid-catalog.md)</ept>.</source>
          <target state="translated">Die Liste mit allen unterstützten Runtimes finden Sie im <bpt id="p1">[</bpt>RID-Katalog<ept id="p1">](../rid-catalog.md)</ept>.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>After making those two changes you execute <ph id="ph1">`dotnet restore`</ph>, followed by <ph id="ph2">`dotnet build`</ph> to create the native executable.</source>
          <target state="translated">Nachdem Sie diese beiden Änderungen vorgenommen haben, führen Sie zuerst <ph id="ph1">`dotnet restore`</ph> und dann <ph id="ph2">`dotnet build`</ph> aus, um die native ausführbare Datei zu erstellen.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Then, you can run the generated native executable.</source>
          <target state="translated">Anschließend können Sie die generierte native ausführbare Datei ausführen.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The following example shows the commands for Windows.</source>
          <target state="translated">Das folgende Beispiel enthält die Befehle für Windows.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The example shows where the native executable gets generated and assumes that the project directory is named HelloNative.</source>
          <target state="translated">Im Beispiel wird gezeigt, an welcher Stelle die native ausführbare Datei erstellt wird. Dabei wird davon ausgegangen, dass der Name des Projektverzeichnisses „HelloNative“ lautet.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>You may notice that the native application takes slightly longer to build, but executes slightly faster.</source>
          <target state="translated">Sie werden feststellen, dass es etwas länger dauert, bis die native Anwendung erstellt ist. Dafür wird sie jedoch etwas schneller ausgeführt.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This behavior becomes more noticeable as the application grows.</source>
          <target state="translated">Dieses Verhalten wird umso deutlicher, wenn die Anwendung größer wird.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The build process generates several more files when your <ph id="ph1">`project.json`</ph> creates a native build.</source>
          <target state="translated">Während des Buildprozesses werden einige Dateien mehr erstellt, wenn die Datei <ph id="ph1">`project.json`</ph> einen nativen Build erstellt.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>These files are created in <ph id="ph1">`bin\Debug\netcoreapp1.0\&lt;platform&gt;`</ph> where <ph id="ph2">`&lt;platform&gt;`</ph> is the RID chosen.</source>
          <target state="translated">Diese Dateien werden in <ph id="ph1">`bin\Debug\netcoreapp1.0\&lt;platform&gt;`</ph> erstellt, wobei <ph id="ph2">`&lt;platform&gt;`</ph> die ausgewählte RID ist.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>In addition to the project's <ph id="ph1">`HelloNative.dll`</ph> there is a <ph id="ph2">`HelloNative.exe`</ph> that loads the runtime and starts the application.</source>
          <target state="translated">Neben der Datei <ph id="ph1">`HelloNative.dll`</ph> des Projekts gibt es die Datei <ph id="ph2">`HelloNative.exe`</ph>, mit der die Runtime geladen und die Anwendung gestartet wird.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Note that the name of the generated application changed because the project directory's name has changed.</source>
          <target state="translated">Beachten Sie, dass der Name der generierten Anwendung geändert wurde, da der Name des Projektverzeichnisses geändert wurde.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>You may want to package this application to execute it on a machine that does not include the .NET runtime.</source>
          <target state="translated">Packen Sie diese Anwendung, um sie auf einem Computer auszuführen, auf dem die .NET-Laufzeit nicht installiert ist.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>You do that using the <ph id="ph1">`dotnet publish`</ph> command.</source>
          <target state="translated">Verwenden Sie hierzu den Befehl <ph id="ph1">`dotnet publish`</ph>.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`dotnet publish`</ph> command creates a new subdirectory under the <ph id="ph2">`./bin/Debug/netcoreapp1.0/&lt;platform&gt;`</ph> directory called <ph id="ph3">`publish`</ph>.</source>
          <target state="translated">Mit dem Befehl <ph id="ph1">`dotnet publish`</ph> wird ein Unterverzeichnis im Verzeichnis <ph id="ph2">`./bin/Debug/netcoreapp1.0/&lt;platform&gt;`</ph> mit dem Namen <ph id="ph3">`publish`</ph> erstellt.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>It copies the executable, all dependent DLLs and the framework to this sub directory.</source>
          <target state="translated">Damit werden die ausführbare Datei, alle abhängigen DLL-Dateien und das Framework in dieses Unterverzeichnis kopiert.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>You can package that directory to another machine (or a container) and execute the application there.</source>
          <target state="translated">Sie können dieses Verzeichnis auf einem anderen Computer (oder Container) packen und die Anwendung dort ausführen.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Let's contrast that with the behavior of <ph id="ph1">`dotnet publish`</ph> in the first Hello World sample.</source>
          <target state="translated">Vergleichen wir dies mit dem Verhalten von <ph id="ph1">`dotnet publish`</ph> im ersten „Hello World“-Beispiel.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>That application is a <bpt id="p1">*</bpt>portable application<ept id="p1">*</ept>, which is the default type of application for .NET Core.</source>
          <target state="translated">Diese Anwendung ist eine <bpt id="p1">*</bpt>portierbare Anwendung<ept id="p1">*</ept>, also der Standardanwendungstyp für .NET Core.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>A portable application requires that .NET Core is installed on the target machine.</source>
          <target state="translated">Für eine portierbare Anwendung muss .NET Core auf dem Zielcomputer installiert sein.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Portable applications can be built on one machine and executed anywhere.</source>
          <target state="translated">Portierbare Anwendungen können auf einem Computer erstellt und auf einem beliebigen Computer ausgeführt werden.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Native applications must be built separately for each target machine.</source>
          <target state="translated">Native Anwendung müssen für jeden Zielcomputer separat erstellt werden.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`dotnet publish`</ph> creates a directory that has the application's DLL, and any dependent dlls that are not part of the platform installation.</source>
          <target state="translated"><ph id="ph1">`dotnet publish`</ph> erstellt ein Verzeichnis, das die DLL der Anwendung sowie alle abhängigen DLLs enthält, die nicht Teil der Plattforminstallation sind.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Augmenting the program</source>
          <target state="translated">Erweitern des Programms</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Let's change the file just a little bit.</source>
          <target state="translated">Verändern wir nun die Datei ein wenig.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Fibonacci numbers are fun, so let's try that out (using the native version):</source>
          <target state="translated">Fibonacci-Zahlen machen Spaß, also probieren wir das aus (mit der nativen Version):</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Program.cs`</ph>:</source>
          <target state="translated"><ph id="ph1">`Program.cs`</ph>:</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>And running the program (assuming you're on Windows, and have changed the project directory name to Fibonacci):</source>
          <target state="translated">Führen wir das Programm aus (dabei gehen wir davon aus, dass Sie mit Windows arbeiten und das Projektverzeichnis in „Fibonacci“ umbenannt haben):</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>And that's it!</source>
          <target state="translated">Und das ist schon alles!</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>You can augment <ph id="ph1">`Program.cs`</ph> any way you like.</source>
          <target state="translated">Sie können <ph id="ph1">`Program.cs`</ph> beliebig erweitern.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Adding some new files</source>
          <target state="translated">Hinzufügen neuer Dateien</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Single files are fine for simple one-off programs, but chances are you're going to want to break things out into multiple files if you're building anything which has multiple components.</source>
          <target state="translated">Einzelne Dateien können problemlos zu einfachen Einmalprogrammen hinzugefügt werden. Wenn Sie jedoch ein Programm mit mehreren Komponenten erstellen, werden Sie die Dinge wahrscheinlich in mehreren Dateien ausgliedern wollen.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Multiple files are a way to do that.</source>
          <target state="translated">Eine Möglichkeit, dies zu tun, ist die Verwendung mehrerer Dateien.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Create a new file and give it a unique namespace:</source>
          <target state="translated">Erstellen Sie eine neue Datei, und geben Sie ihr einen eindeutigen Namespace:</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Next, include it in your <ph id="ph1">`Program.cs`</ph> file:</source>
          <target state="translated">Als Nächstes fügen Sie sie in die Datei <ph id="ph1">`Program.cs`</ph> ein:</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>And finally, you can build it:</source>
          <target state="translated">Und schließlich können Sie sie erstellen:</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Now the fun part: making the new file do something!</source>
          <target state="translated">Nun kommt der unterhaltsame Teil: Sorgen Sie dafür, dass die neue Datei etwas tut.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Example: A Fibonacci Sequence Generator</source>
          <target state="translated">Beispiel: Generator für Fibonacci-Folgen</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Let's say you want to build off of the previous <bpt id="p1">[</bpt>Fibonacci example<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/console-apps/Fibonacci)</ept> by caching some Fibonacci values and add some recursive flair.</source>
          <target state="translated">Angenommen, Sie möchten das vorherige <bpt id="p1">[</bpt>Fibonacci-Beispiel<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/console-apps/Fibonacci)</ept> weiterentwickeln, indem Sie einige Fibonacci-Werte zwischenspeichern und einige rekursive Funktionen hinzufügen.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Your code for a <bpt id="p1">[</bpt>better Fibonacci example<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/console-apps/FibonacciBetter)</ept> might look something like this:</source>
          <target state="translated">Ihr Code für ein <bpt id="p1">[</bpt>verbessertes Fibonacci-Beispiel<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/console-apps/FibonacciBetter)</ept> kann beispielsweise wie folgt aussehen:</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Note that the use of <ph id="ph1">`Dictionary&lt;int, int&gt;`</ph> and <ph id="ph2">`IEnumerable&lt;int&gt;`</ph> means incorporating the <ph id="ph3">`System.Collections`</ph> namespace.</source>
          <target state="translated">Beachten Sie, dass die Verwendung von <ph id="ph1">`Dictionary&lt;int, int&gt;`</ph> und <ph id="ph2">`IEnumerable&lt;int&gt;`</ph> bedeutet, dass der Namespace <ph id="ph3">`System.Collections`</ph> eingebunden wird.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Microsoft.NetCore.App`</ph> package is a <bpt id="p1">*</bpt>metapackage<ept id="p1">*</ept> that contains many of the core assemblies from the .NET Framework.</source>
          <target state="translated">Beim <ph id="ph1">`Microsoft.NetCore.App`</ph>-Paket handelt es sich um ein <bpt id="p1">*</bpt>Metapaket<ept id="p1">*</ept>, das zahlreiche Basisassemblys aus dem .NET Framework enthält.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>By including this metapackage, you've already included the <ph id="ph1">`System.Collections.dll`</ph> assembly as part of your project.</source>
          <target state="translated">Durch das Einbinden dieses Metapakets haben Sie die <ph id="ph1">`System.Collections.dll`</ph>-Assembly bereits als Teil Ihres Projekts eingebunden.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>You can verify this by running <ph id="ph1">`dotnet publish`</ph> and examining the files that are part of the installed package.</source>
          <target state="translated">Sie können dies überprüfen, indem Sie <ph id="ph1">`dotnet publish`</ph> ausführen und die Dateien überprüfen, die Teil des installierten Pakets sind.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>You'll see <ph id="ph1">`System.Collections.dll`</ph> in the list.</source>
          <target state="translated"><ph id="ph1">`System.Collections.dll`</ph> wird in der Liste angezeigt.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Now adjust the <ph id="ph1">`Main()`</ph> method in your <ph id="ph2">`Program.cs`</ph> file as shown below.</source>
          <target state="translated">Passen Sie nun die <ph id="ph1">`Main()`</ph>-Methode in der Datei <ph id="ph2">`Program.cs`</ph> wie folgt an.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The example assumes that <ph id="ph1">`Program.cs`</ph> has a <ph id="ph2">`using System;`</ph> statement.</source>
          <target state="translated">Im Beispiel wird vorausgesetzt, dass <ph id="ph1">`Program.cs`</ph> eine <ph id="ph2">`using System;`</ph>-Anweisung enthält.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>If you have a <ph id="ph1">`using static System.Console;`</ph> statement, remove <ph id="ph2">`Console.`</ph> from <ph id="ph3">`Console.WriteLine`</ph>.</source>
          <target state="translated">Wenn eine <ph id="ph1">`using static System.Console;`</ph>-Anweisung vorhanden ist, entfernen Sie <ph id="ph2">`Console.`</ph> aus <ph id="ph3">`Console.WriteLine`</ph>.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Finally, run it!</source>
          <target state="translated">Führen Sie die Datei anschließend aus.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>And that's it!</source>
          <target state="translated">Und das ist schon alles!</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Using folders to organize code</source>
          <target state="translated">Verwenden von Ordnern zum Strukturieren von Code</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Say you wanted to introduce some new types to do work on.</source>
          <target state="translated">Angenommen, Sie möchten einige neue Typen einführen, die Sie bearbeiten möchten.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>You can do this by adding more files and making sure to give them namespaces you can include in your <ph id="ph1">`Program.cs`</ph> file.</source>
          <target state="translated">In diesem Fall können Sie weitere Dateien hinzufügen und ihnen Namespaces zuordnen, die Sie in die Datei <ph id="ph1">`Program.cs`</ph> einbinden können.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>This works great when the size of your project is relatively small.</source>
          <target state="translated">Das funktioniert bei relativ kleinen Projekten recht gut.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>However, if you have a larger app with many different data types and potentially multiple layers, you may wish to organize things logically.</source>
          <target state="translated">Wenn Sie jedoch eine größere Anwendung mit vielen verschiedenen Datentypen und womöglich mehreren Schichten haben, sollten Sie die Dinge logisch strukturieren.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>This is where folders come into play.</source>
          <target state="translated">Hier kommen nun Ordner ins Spiel.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>You can either follow along with <bpt id="p1">[</bpt>the NewTypes sample project<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/console-apps/NewTypes)</ept> that this guide covers, or create your own files and folders.</source>
          <target state="translated">Sie können entweder <bpt id="p1">[</bpt>das Beispielprojekt „NewTypes“<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/console-apps/NewTypes)</ept> in diesem Leitfaden befolgen oder eigene Dateien und Ordner erstellen.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>To begin, create a new folder under the root of your project.</source>
          <target state="translated">Erstellen Sie zunächst im Stammverzeichnis des Projekts einen neuen Ordner.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`/Model`</ph> is chosen here.</source>
          <target state="translated">In diesem Fall wird <ph id="ph1">`/Model`</ph> ausgewählt.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Now add some new types to the folder:</source>
          <target state="translated">Fügen Sie nun einige neue Typen zum Ordner hinzu:</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Now, just as if they were files in the same directory, give them all the same namespace so you can include them in your <ph id="ph1">`Program.cs`</ph>.</source>
          <target state="translated">Ordnen Sie die Dateien demselben Namespace zu, als würden sie sich in einem Verzeichnis befinden, sodass Sie sie in die Datei <ph id="ph1">`Program.cs`</ph> einbinden können.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Example: Pet Types</source>
          <target state="translated">Beispiel: Pet-Typen</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>This example creates two new types, <ph id="ph1">`Dog`</ph> and <ph id="ph2">`Cat`</ph>, and has them implement an interface, <ph id="ph3">`IPet`</ph>.</source>
          <target state="translated">In diesem Beispiel werden die beiden neuen Typen <ph id="ph1">`Dog`</ph> und <ph id="ph2">`Cat`</ph> erstellt, mit deren Hilfe die Schnittstelle <ph id="ph3">`IPet`</ph> implementiert wird.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Folder Structure:</source>
          <target state="translated">Ordnerstruktur:</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`IPet.cs`</ph>:</source>
          <target state="translated"><ph id="ph1">`IPet.cs`</ph>:</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Dog.cs`</ph>:</source>
          <target state="translated"><ph id="ph1">`Dog.cs`</ph>:</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Cat.cs`</ph>:</source>
          <target state="translated"><ph id="ph1">`Cat.cs`</ph>:</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Program.cs`</ph>:</source>
          <target state="translated"><ph id="ph1">`Program.cs`</ph>:</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`project.json`</ph>:</source>
          <target state="translated"><ph id="ph1">`project.json`</ph>:</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>And if you run this:</source>
          <target state="translated">Ergebnis bei der Ausführung:</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>New pet types can be added (such as a <ph id="ph1">`Bird`</ph>), extending this project.</source>
          <target state="translated">Das Projekt kann durch Hinzufügen neuer Pet-Typen (wie etwa <ph id="ph1">`Bird`</ph>) erweitert werden.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Testing your Console App</source>
          <target state="translated">Testen der Konsolenanwendung</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>You'll probably be wanting to test your projects at some point.</source>
          <target state="translated">Irgendwann müssen Sie Ihre Projekte testen.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Here's a good way to do it:</source>
          <target state="translated">Im Folgenden wird ein recht gute Methode dafür beschrieben:</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Move any source of your existing project into a new <ph id="ph1">`src`</ph> folder.</source>
          <target state="translated">Verschieben Sie alle Quelldateien Ihres vorhandenen Projekts in einen neuen <ph id="ph1">`src`</ph>-Ordner.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Create a <ph id="ph1">`/test`</ph> directory.</source>
          <target state="translated">Erstellen Sie das Verzeichnis <ph id="ph1">`/test`</ph>.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Create a new <ph id="ph1">`global.json`</ph> file:</source>
          <target state="translated">Erstellen Sie eine neue <ph id="ph1">`global.json`</ph>-Datei:</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`global.json`</ph>:</source>
          <target state="translated"><ph id="ph1">`global.json`</ph>:</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>This file tells the build system that this is a multi-project system, which allows it to look for dependencies in more than just the current folder it happens to be executing in.</source>
          <target state="translated">Diese Datei teilt dem Buildsystem mit, dass es sich hierbei um ein System mit mehreren Projekten handelt, das die Suche nach Abhängigkeiten nicht nur in dem Ordner ermöglicht, indem es aktuell ausgeführt wird.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>This is important because it allows you to place a dependency on the code under test in your test project.</source>
          <target state="translated">Dies ist wichtig, weil Sie dadurch eine Abhängigkeit in den zu testenden Code in Ihrem Testprojekt einfügen können.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Example: Extending the NewTypes project</source>
          <target state="translated">Beispiel: Erweitern des Projekts „NewTypes“</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Now that the project system is in place, you can create your test project and start writing tests!</source>
          <target state="translated">Nachdem Sie das Projektsystem eingerichtet haben, können Sie das Testprojekt erstellen und mit dem Schreiben von Tests beginnen.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>From here on out, this guide will use and extend <bpt id="p1">[</bpt>the sample Types project<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/console-apps/NewTypes)</ept>.</source>
          <target state="translated">Ab hier wird in diesem Leitfaden <bpt id="p1">[</bpt>das Beispielprojekt „Types“<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/console-apps/NewTypes)</ept> verwendet und erweitert.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Additionally, it will use the <bpt id="p1">[</bpt>Xunit<ept id="p1">](https://xunit.github.io/)</ept> test framework.</source>
          <target state="translated">Darüber hinaus wird das <bpt id="p1">[</bpt>Xunit<ept id="p1">](https://xunit.github.io/)</ept>-Testframework verwendet.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Feel free to follow along or create your own multi-project system with tests.</source>
          <target state="translated">Sie können diesem Beispiel folgen oder ein eigenes System mit mehreren Projekten und Tests erstellen.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The whole project structure should look like this:</source>
          <target state="translated">Die gesamte Projektstruktur sollte wie folgt aussehen:</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>There are two new things to make sure you have in your test project:</source>
          <target state="translated">Stellen Sie sicher, dass sich zwei neue Dinge in Ihrem Testprojekt befinden:</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>A correct <ph id="ph1">`project.json`</ph> with the following:</source>
          <target state="translated">Eine korrekte <ph id="ph1">`project.json`</ph>-Datei, die Folgendes enthält:</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>A reference to <ph id="ph1">`xunit`</ph></source>
          <target state="translated">Einen Verweis auf <ph id="ph1">`xunit`</ph></target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>A reference to <ph id="ph1">`dotnet-test-xunit`</ph></source>
          <target state="translated">Einen Verweis auf <ph id="ph1">`dotnet-test-xunit`</ph></target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>A reference to the namespace corresponding to the code under test</source>
          <target state="translated">Einen Verweis auf den Namespace für den zu testenden Code</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>An Xunit test class.</source>
          <target state="translated">Eine Xunit-Testklasse.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`NewTypesTests/project.json`</ph>:</source>
          <target state="translated"><ph id="ph1">`NewTypesTests/project.json`</ph>:</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`PetTests.cs`</ph>:</source>
          <target state="translated"><ph id="ph1">`PetTests.cs`</ph>:</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Now you can run tests!</source>
          <target state="translated">Nun können Sie Tests durchführen.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><ph id="ph1">`dotnet test`</ph><ept id="p1">](../tools/dotnet-test.md)</ept> command runs the test runner you have specified in your project.</source>
          <target state="translated">Mit dem Befehl <bpt id="p1">[</bpt><ph id="ph1">`dotnet test`</ph><ept id="p1">](../tools/dotnet-test.md)</ept> wird der in Ihrem Projekt angegebene Test Runner ausgeführt.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Make sure you start at the top-level directory.</source>
          <target state="translated">Stellen Sie sicher, dass Sie mit dem Verzeichnis der obersten Ebene beginnen.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Output should look like this:</source>
          <target state="translated">Das Ergebnis sollte wie folgt aussehen:</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Conclusion</source>
          <target state="translated">Schlussfolgerung</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Hopefully this guide has helped you learn how to create a .NET Core console app, from the basics all the way up to a multi-project system with unit tests.</source>
          <target state="translated">In dieser Anleitung wurde beschrieben, wie eine .NET Core-Konsolenanwendung erstellt wird. Dabei wurde mit einer einfachen Konsolenanwendung begonnen, die schrittweise zu einem System mit mehreren Projekten und Unittests erweitert wurde.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The next step is to create awesome console apps of your own!</source>
          <target state="translated">Im nächsten Schritt erstellen Sie eigene beeindruckende Konsolenanwendungen.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>If a more advanced example of a console app interests you, check out the next tutorial: <bpt id="p1">[</bpt>Using the CLI tools to write console apps: An advanced step-by-step guide<ept id="p1">](cli-console-app-tutorial-advanced.md)</ept>.</source>
          <target state="translated">Wenn Sie Interesse an einem komplexeren Beispiel für eine Konsolenanwendung haben, lesen Sie das nächste Tutorial: <bpt id="p1">[</bpt>Using the CLI tools to write console apps: An advanced step-by-step guide (Schreiben von Konsolenanwendungen mithilfe der CLI-Tools: ein ausführlicher Schritt-für-Schritt-Leitfaden)<ept id="p1">](cli-console-app-tutorial-advanced.md)</ept>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>