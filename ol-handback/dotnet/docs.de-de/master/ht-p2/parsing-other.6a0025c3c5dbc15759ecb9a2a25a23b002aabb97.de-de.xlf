<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-6a73dd2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bf3fc05428ed491e7658951f002a9af17dcba5df</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\base-types\parsing-other.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p2</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1ded539f02c64a78271d65c58911186c9db97319</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1405ab0e971bc580ee83d984b30d55200641d5f1</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Parsing other strings in .NET</source>
          <target state="translated">Analysieren anderer Zeichenfolgen in .NET</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Parsing other strings in .NET</source>
          <target state="translated">Analysieren anderer Zeichenfolgen in .NET</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Parsing other strings in .NET</source>
          <target state="translated">Analysieren anderer Zeichenfolgen in .NET</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In addition to numeric and <bpt id="p1">[</bpt>DateTime<ept id="p1">](xref:System.DateTime)</ept> strings, you can also parse strings that represent the types <bpt id="p2">[</bpt>Char<ept id="p2">](xref:System.Char)</ept>, <bpt id="p3">[</bpt>Boolean<ept id="p3">](xref:System.Boolean)</ept>, and <bpt id="p4">[</bpt>Enum<ept id="p4">](xref:System.Enum)</ept> into data types.</source>
          <target state="translated">Neben den numerischen und den <bpt id="p1">[</bpt>DateTime<ept id="p1">](xref:System.DateTime)</ept>-Zeichenfolgen können Sie auch Zeichenfolgen, die die Typen <bpt id="p2">[</bpt>Char<ept id="p2">](xref:System.Char)</ept>, <bpt id="p3">[</bpt>Boolean<ept id="p3">](xref:System.Boolean)</ept> und <bpt id="p4">[</bpt>Enum<ept id="p4">](xref:System.Enum)</ept> darstellen, in Datentypen analysieren.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Char</source>
          <target state="translated">Char</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The static parse method associated with the <bpt id="p1">[</bpt>Char<ept id="p1">](xref:System.Char)</ept> data type is useful for converting a string that contains a single character into its Unicode value.</source>
          <target state="translated">Die statische Parse-Methode, die dem <bpt id="p1">[</bpt>Char<ept id="p1">](xref:System.Char)</ept>-Datentyp zugeordnet ist, eignet sich zum Konvertieren einer Zeichenfolge mit einem einzigen Zeichen in den entsprechenden Unicode-Wert.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The following code example parses a string into a Unicode character.</source>
          <target state="translated">Im folgenden Codebeispiel wird eine Zeichenfolge in ein Unicode-Zeichen analysiert.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Boolean</source>
          <target state="translated">Boolesch</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Boolean<ept id="p1">](xref:System.Boolean)</ept> data type contains a <bpt id="p2">[</bpt>Parse<ept id="p2">](xref:System.Boolean.Parse(System.String))</ept> method that you can use to convert a string that represents a <ph id="ph1">`Boolean`</ph> value into an actual <ph id="ph2">`Boolean`</ph> type.</source>
          <target state="translated">Der <bpt id="p1">[</bpt>Boolean<ept id="p1">](xref:System.Boolean)</ept>-Datentyp enthält eine <bpt id="p2">[</bpt>Parse<ept id="p2">](xref:System.Boolean.Parse(System.String))</ept>-Methode, mit der Sie eine Zeichenfolge, die einen <ph id="ph1">`Boolean`</ph>-Wert darstellt, in einen tatsächlichen <ph id="ph2">`Boolean`</ph>-Typ konvertieren können.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This method is not case-sensitive and can successfully parse a string containing "True" or "False."</source>
          <target state="translated">Diese Methode ist von der Groß-/Kleinschreibung unabhängig und kann erfolgreich eine Zeichenfolge mit „True“ oder „False“ analysieren.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Parse`</ph> method associated with the <ph id="ph2">`Boolean`</ph> type can also parse strings that are surrounded by white spaces.</source>
          <target state="translated">Die dem <ph id="ph2">`Boolean`</ph>-Typ zugeordnete <ph id="ph1">`Parse`</ph>-Methode kann auch Zeichenfolgen analysieren, die von Leerzeichen eingeschlossen sind.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If any other string is passed, a <bpt id="p1">[</bpt>FormatException<ept id="p1">](xref:System.FormatException)</ept> is thrown.</source>
          <target state="translated">Wenn eine beliebige andere Zeichenfolge übergeben wird, wird eine <bpt id="p1">[</bpt>FormatException<ept id="p1">](xref:System.FormatException)</ept> ausgelöst.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The following code example uses the <ph id="ph1">`Parse`</ph> method to convert a string into a <ph id="ph2">`Boolean`</ph> value.</source>
          <target state="translated">Im folgenden Codebeispiel wird die <ph id="ph1">`Parse`</ph>-Methode zum Konvertieren einer Zeichenfolge in einen <ph id="ph2">`Boolean`</ph>-Wert verwendet.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Enumeration</source>
          <target state="translated">Enumeration</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You can use the static <bpt id="p1">[</bpt>Parse<ept id="p1">](xref:System.Enum.Parse(System.Type,System.String))</ept> method to initialize an enumeration type to the value of a string.</source>
          <target state="translated">Mit der statischen <bpt id="p1">[</bpt>Parse<ept id="p1">](xref:System.Enum.Parse(System.Type,System.String))</ept>-Methode können Sie einen Enumerationstyp auf den Wert einer Zeichenfolge initialisieren.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This method accepts the enumeration type you are parsing, the string to parse, and an optional <ph id="ph1">`Boolean`</ph> flag indicating whether or not the parse is case-sensitive.</source>
          <target state="translated">Diese Methode akzeptiert den zu analysierenden Enumerationstyp, die zu analysierende Zeichenfolge und ein optionales <ph id="ph1">`Boolean`</ph>-Flag, das angibt, ob bei der Analyse die Groß-/Kleinschreibung beachtet wird.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The string you are parsing can contain several values separated by commas, which can be preceded or followed by one or more empty spaces (also called white spaces).</source>
          <target state="translated">Die zu analysierende Zeichenfolge kann mehrere durch Kommas voneinander getrennte Werte enthalten, denen ein oder mehrere Leerzeichen (auch als Leerräume bezeichnet) voran- oder nachgestellt sein können.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>When the string contains multiple values, the value of the returned object is the value of all specified values combined with a bitwise OR operation.</source>
          <target state="translated">Wenn die Zeichenfolge mehrere Werte enthält, entspricht der Wert des zurückgegebenen Objekts dem Wert aller angegebenen Werte, kombiniert mit einem bitweisen OR-Vorgang.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The following example uses the <ph id="ph1">`Parse`</ph> method to convert a string representation into an enumeration value.</source>
          <target state="translated">Im folgenden Beispiel wird die <ph id="ph1">`Parse`</ph>-Methode zum Konvertieren einer Zeichenfolgendarstellung in einen Enumerationswert verwendet.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>DayOfWeek<ept id="p1">](xref:System.DayOfWeek)</ept> enumeration is initialized to Thursday from a string.</source>
          <target state="translated">Die <bpt id="p1">[</bpt>DayOfWeek<ept id="p1">](xref:System.DayOfWeek)</ept>-Enumeration wird über eine Zeichenfolge mit Donnerstag initialisiert.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">Siehe auch</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Parsing strings in .NET<ept id="p1">](parsing-strings.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Analysieren von Zeichenfolgen in .NET<ept id="p1">](parsing-strings.md)</ept></target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Formatting types in .NET<ept id="p1">](formatting-types.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Formatieren von Typen in .NET<ept id="p1">](formatting-types.md)</ept></target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Type conversion in .NET<ept id="p1">](type-conversion.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Typkonvertierung in .NET<ept id="p1">](type-conversion.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>