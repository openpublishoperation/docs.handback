<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-eac019f" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4cb0c523a31faf319c1e07ceaa8a8122d3046be8</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\using-linq.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p2</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">37f7c80da13d49cc162ccaef9fa38e94e54530a1</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">036db4d6dd6488c1992a03d72dae7e9f4504a8ef</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>LINQ (Language Integrated Query)</source>
          <target state="translated">LINQ (Language Integrated Query)</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>LINQ (Language Integrated Query)</source>
          <target state="translated">LINQ (Language Integrated Query)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>LINQ (Language Integrated Query)</source>
          <target state="translated">LINQ (Language Integrated Query)</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>What is it?</source>
          <target state="translated">Was ist das?</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>LINQ provides language-level querying capabilities and a <bpt id="p1">[</bpt>higher-order function<ept id="p1">](https://en.wikipedia.org/wiki/Higher-order_function)</ept> API to C# and VB as a way to write expressive, declarative code.</source>
          <target state="translated">LINQ bietet Abfragefunktionen auf Sprachebene und eine API einer <bpt id="p1">[</bpt>Funktion höherer Ordnung<ept id="p1">](https://en.wikipedia.org/wiki/Higher-order_function)</ept> für C# und VB, sodass die Möglichkeit besteht, aussagekräftigen, deklarativen Code zu schreiben.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Language-level query syntax:</source>
          <target state="translated">Abfragesyntax auf Sprachebene:</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Same example using the <ph id="ph1">`IEnumerable&lt;T&gt;`</ph> API:</source>
          <target state="translated">Gleiches Beispiel mit der <ph id="ph1">`IEnumerable&lt;T&gt;`</ph>-API:</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>LINQ is Expressive</source>
          <target state="translated">LINQ ist ausdrucksstark</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Imagine you have a list of pets, but want to convert it into a dictionary where you can access a pet directly by its <ph id="ph1">`RFID`</ph> value.</source>
          <target state="translated">Nehmen Sie an, Sie haben eine Liste mit Haustieren, möchten diese aber in ein Wörterbuch konvertieren, damit Sie direkt über den <ph id="ph1">`RFID`</ph>-Wert auf ein Haustier zugreifen können.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Traditional imperative code:</source>
          <target state="translated">Herkömmlicher imperativer Code:</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The intention behind the code is not to create a new <ph id="ph1">`Dictionary&lt;int, Pet&gt;`</ph> and add to it via a loop, it is to convert an existing list into a dictionary!</source>
          <target state="translated">Der Zweck des Codes ist nicht, ein neues <ph id="ph1">`Dictionary&lt;int, Pet&gt;`</ph> zu erstellen und es über eine Schleife zu erweitern, sondern eine vorhandene Liste in ein Wörterbuch zu konvertieren.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>LINQ preserves the intention whereas the imperative code does not.</source>
          <target state="translated">Mit LINQ bleibt dieser Zweck erhalten, mit imperativem Code hingegen nicht.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Equivalent LINQ expression:</source>
          <target state="translated">Entsprechender LINQ-Ausdruck:</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The code using LINQ is valuable because it evens the playing field between intent and code when reasoning as a programmer.</source>
          <target state="translated">Der Code mit LINQ ist hilfreich, da er aus der Perspektive eines Programmierers einen Ausgleich zwischen Zweck und Code schafft.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Another bonus is code brevity.</source>
          <target state="translated">Ein weiter Bonus ist die Kürze des Codes.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Imagine reducing large portions of a codebase by 1/3 as done above.</source>
          <target state="translated">Stellen Sie sich vor, Sie könnten große Teile einer Codebasis um 1/3 reduzieren, wie oben dargestellt.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Pretty sweet deal, right?</source>
          <target state="translated">Klingt das nicht überzeugend?</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>LINQ Providers Simplify Data Access</source>
          <target state="translated">LINQ-Anbieter vereinfachen den Datenzugriff</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For a significant chunk of software out in the wild, everything revolves around dealing with data from some source (Databases, JSON, XML, etc).</source>
          <target state="translated">Für einen erheblichen Teil der verwendeten Software dreht sich alles um den Umgang mit Daten aus unterschiedlichen Quellen (Datenbanken, JSON, XML usw.).</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Often this involves learning a new API for each data source, which can be annoying.</source>
          <target state="translated">Häufig gehört dazu das Erlernen einer neuen API für jede Datenquelle, was lästig sein kann.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>LINQ simplifies this by abstracting common elements of data access into a query syntax which looks the same no matter which data source you pick.</source>
          <target state="translated">LINQ vereinfacht dies durch das Abstrahieren gemeinsamer Elemente des Datenzugriffs in eine Abfragesyntax, die immer gleich aussieht, unabhängig davon, welche Datenquelle Sie auswählen.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Consider the following: finding all XML elements with a specific attribute value.</source>
          <target state="translated">Stellen Sie sich Folgendes vor: Sie möchten alle XML-Elemente mit einem bestimmten Attributwert finden.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Writing code to manually traverse the XML document to perform this task would be far more challenging.</source>
          <target state="translated">Code zu schreiben, um das XML-Dokument zu diesem Zweck manuell zu durchlaufen, wäre eine wesentlich größere Herausforderung.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Interacting with XML isn’t the only thing you can do with LINQ Providers.</source>
          <target state="translated">LINQ-Anbieter ermöglichen nicht nur die Interaktion mit XML.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Linq to SQL<ept id="p1">](https://msdn.microsoft.com/library/bb386976.aspx)</ept> is a fairly bare-bones Object-Relational Mapper (ORM) for an MSSQL Server Database.</source>
          <target state="translated"><bpt id="p1">[</bpt>LINQ to SQL<ept id="p1">](https://msdn.microsoft.com/library/bb386976.aspx)</ept> ist ein ziemlich reduzierter objektrelationaler Mapper (ORM) für eine MSSQL Server-Datenbank.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>JSON.NET<ept id="p1">](http://www.newtonsoft.com/json/help/html/LINQtoJSON.htm)</ept> library provides efficient JSON Document traversal via LINQ.</source>
          <target state="translated">Die <bpt id="p1">[</bpt>JSON.NET<ept id="p1">](http://www.newtonsoft.com/json/help/html/LINQtoJSON.htm)</ept>-Bibliothek bietet einen effizienten Durchlauf von JSON-Dokumenten über LINQ.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Furthermore, if there isn’t a library which does what you need, you can also <bpt id="p1">[</bpt>write your own LINQ Provider<ept id="p1">](https://msdn.microsoft.com/library/Bb546158.aspx)</ept>!</source>
          <target state="translated">Wenn es allerdings keine Bibliothek gibt, die Ihre Anforderungen erfüllt, können Sie auch <bpt id="p1">[</bpt>Ihren eigenen LINQ-Anbieter schreiben<ept id="p1">](https://msdn.microsoft.com/library/Bb546158.aspx)</ept>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Why Use the Query Syntax?</source>
          <target state="translated">Warum sollte die Abfragesyntax verwendet werden?</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This is a question which often comes up.</source>
          <target state="translated">Dies ist eine Frage, die häufig gestellt wird.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>After all, this,</source>
          <target state="translated">Im Grunde ist dies:</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>is a lot more concise than this:</source>
          <target state="translated">sehr viel präziser als dies:</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Isn’t the API syntax just a more concise way to do the query syntax?</source>
          <target state="translated">Ist die API-Syntax nicht nur eine präzisere Methode für die Abfragesyntax?</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>No.</source>
          <target state="translated">Nein.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The query syntax allows for the use the <bpt id="p1">**</bpt>let<ept id="p1">**</ept> clause, which allows you to introduce and bind a variable within the scope of the expression, using it in subsequent pieces of the expression.</source>
          <target state="translated">Die Abfragesyntax ermöglicht die Verwendung der <bpt id="p1">**</bpt>let<ept id="p1">**</ept>-Klausel, mit der Sie eine Variable im Bereich des Ausdrucks einführen und binden können, um sie in nachfolgenden Teilen des Ausdrucks zu verwenden.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Reproducing the same code with only the API syntax can be done, but will most likely lead to code which is hard to read.</source>
          <target state="translated">Das Reproduzieren des gleichen Codes nur mit der API-Syntax ist möglich, führt jedoch wahrscheinlich zu Code, der schwer lesbar ist.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>So this begs the question, <bpt id="p1">**</bpt>should you just use the query syntax?<ept id="p1">**</ept></source>
          <target state="translated">Daher stellt sich die folgende Frage: <bpt id="p1">**</bpt>Sollten Sie einfach die Abfragesyntax verwenden?<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The answer to this question is <bpt id="p1">**</bpt>yes<ept id="p1">**</ept> if...</source>
          <target state="translated">Die Antwort auf diese Frage ist <bpt id="p1">**</bpt>Ja<ept id="p1">**</ept>, wenn...</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Your existing codebase already uses the query syntax</source>
          <target state="translated">Ihre vorhandene Codebasis bereits die Abfragesyntax verwendet</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>You need to scope variables within your queries due to complexity</source>
          <target state="translated">Sie den Bereich von Variablen in Ihren Abfragen aufgrund der Komplexität festlegen müssen</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>You prefer the query syntax and it won’t distract from your codebase</source>
          <target state="translated">Sie die Abfragesyntax bevorzugen und Sie dadurch nicht von Ihrer Codebasis abgelenkt werden</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The answer to this question is <bpt id="p1">**</bpt>no<ept id="p1">**</ept> if...</source>
          <target state="translated">Die Antwort auf diese Frage ist <bpt id="p1">**</bpt>Nein<ept id="p1">**</ept>, wenn...</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Your existing codebase already uses the API syntax</source>
          <target state="translated">Ihre vorhandene Codebasis die API-Syntax bereits verwendet</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>You have no need to scope variables within your queries</source>
          <target state="translated">Sie den Bereich von Variablen in Ihren Abfragen nicht festlegen müssen</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>You prefer the API syntax and it won’t distract from your codebase</source>
          <target state="translated">Sie die API-Syntax bevorzugen und Sie dadurch nicht von Ihrer Codebasis abgelenkt werden</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Essential Samples</source>
          <target state="translated">Grundlegende Beispiele</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For a truly comprehensive list of LINQ samples, visit <bpt id="p1">[</bpt>101 LINQ Samples<ept id="p1">](https://code.msdn.microsoft.com/101-LINQ-Samples-3fb9811b)</ept>.</source>
          <target state="translated">Eine umfassende Liste der LINQ-Beispiele finden Sie unter <bpt id="p1">[</bpt>101 LINQ Samples<ept id="p1">](https://code.msdn.microsoft.com/101-LINQ-Samples-3fb9811b)</ept> (101 LINQ-Beispiele).</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The following is a quick demonstration of some of the essential pieces of LINQ.</source>
          <target state="translated">Im Folgenden finden eine kurze Darstellung einiger der grundlegenden Bestandteile von LINQ.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This is in no way comprehensive, as LINQ provides significantly more functionality than what is showcased here.</source>
          <target state="translated">Sie ist bei weitem nicht vollständig, da LINQ erheblich mehr Funktionen bietet, als hier präsentiert werden.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The bread and butter - <ph id="ph1">`Where`</ph>, <ph id="ph2">`Select`</ph>, and <ph id="ph3">`Aggregate`</ph>:</source>
          <target state="translated">Die Grundbestandteile sind <ph id="ph1">`Where`</ph>, <ph id="ph2">`Select`</ph> und <ph id="ph3">`Aggregate`</ph>:</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Flattening a list of lists:</source>
          <target state="translated">Reduzieren einer Liste mit Listen:</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Union between two sets (with custom comparator):</source>
          <target state="translated">Vereinigung von zwei Gruppen (mit benutzerdefiniertem Vergleichsoperator):</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Intersection between two sets:</source>
          <target state="translated">Schnittmenge zwischen zwei Gruppen:</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Ordering:</source>
          <target state="translated">Sortierung:</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Finally, a more advanced sample: determining if the values of the properties of two instances of the same type are equal (Borrowed and modified from <bpt id="p1">[</bpt>this StackOverflow post<ept id="p1">](http://stackoverflow.com/a/844855)</ept>):</source>
          <target state="translated">Schließlich ein erweitertes Beispiel: Ermitteln, ob die Werte der Eigenschaften von zwei Instanzen desselben Typs gleich sind (aus <bpt id="p1">[</bpt>diesem StackOverflow-Beitrag<ept id="p1">](http://stackoverflow.com/a/844855)</ept> übernommen und geändert):</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>PLINQ</source>
          <target state="translated">PLINQ</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>PLINQ, or Parallel LINQ, is a parallel execution engine for LINQ expressions.</source>
          <target state="translated">PLINQ (Parallel LINQ) ist ein Modul für die parallele Ausführung für LINQ-Ausdrücke.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>In other words, a regular LINQ expressions can be trivially parallelized across any number of threads.</source>
          <target state="translated">Reguläre LINQ-Ausdrücke können also im Grunde über eine beliebige Anzahl von Threads parallelisiert werden.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>This is accomplished via a call to <ph id="ph1">`AsParallel()`</ph> preceding the expression.</source>
          <target state="translated">Dies erfolgt über einen Aufruf von <ph id="ph1">`AsParallel()`</ph> vor dem Ausdruck.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Consider the following:</source>
          <target state="translated">Nehmen wir einmal die folgende Situation:</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>This code will partition <ph id="ph1">`facebookUsers`</ph> across system threads as necessary, sum up the total likes on each thread in parallel, sum the results computed by each thread, and project that result into a nice string.</source>
          <target state="translated">Dieser Code partitioniert bei Bedarf <ph id="ph1">`facebookUsers`</ph> über Systemthreads, summiert die Gesamtanzahl der „Likes“ parallel für jeden Thread, summiert die von allen Threads berechneten Ergebnisse und bringt das Ergebnis in eine nützliche Zeichenfolge.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>In diagram form:</source>
          <target state="translated">In Diagrammform:</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>PLINQ diagram</source>
          <target state="translated">PLINQ-Diagramm</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Parallelizable CPU-bound jobs which can be easily expressed via LINQ (in other words, are pure functions and have no side effects) are a great candidate for PLINQ.</source>
          <target state="translated">Parallelisierbare CPU-gebundene Aufträge, die problemlos über LINQ ausgedrückt werden können (die also reine Funktionen ohne Nebeneffekte darstellen) sind gute Kandidaten für PLINQ.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>For jobs which <bpt id="p1">_</bpt>do<ept id="p1">_</ept> have a side effect, consider using the <bpt id="p2">[</bpt>Task Parallel Library<ept id="p2">](https://msdn.microsoft.com/library/dd460717.aspx)</ept>.</source>
          <target state="translated">Für Aufträge, die einen Nebeneffekt <bpt id="p1">_</bpt>haben<ept id="p1">_</ept>, sollten Sie die <bpt id="p2">[</bpt>Task Parallel Library<ept id="p2">](https://msdn.microsoft.com/library/dd460717.aspx)</ept> verwenden.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Further Resources:</source>
          <target state="translated">Weitere Ressourcen:</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>101 LINQ Samples<ept id="p1">](https://code.msdn.microsoft.com/101-LINQ-Samples-3fb9811b)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>101 LINQ-Beispiele<ept id="p1">](https://code.msdn.microsoft.com/101-LINQ-Samples-3fb9811b)</ept></target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Linqpad<ept id="p1">](https://www.linqpad.net/)</ept>, a playground environment and Database querying engine for C#/F#/VB</source>
          <target state="translated"><bpt id="p1">[</bpt>Linqpad<ept id="p1">](https://www.linqpad.net/)</ept>, eine Umgebung und ein Datenbankabfragemodul für C#/F#/VB</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>EduLinq<ept id="p1">](http://codeblog.jonskeet.uk/2011/02/23/reimplementing-linq-to-objects-part-45-conclusion-and-list-of-posts/)</ept>, an e-book for learning how LINQ-to-objects is implemented</source>
          <target state="translated"><bpt id="p1">[</bpt>EduLinq<ept id="p1">](http://codeblog.jonskeet.uk/2011/02/23/reimplementing-linq-to-objects-part-45-conclusion-and-list-of-posts/)</ept>, ein E-Book, in dem die Implementierung von LINQ to Objects erläutert wird</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>