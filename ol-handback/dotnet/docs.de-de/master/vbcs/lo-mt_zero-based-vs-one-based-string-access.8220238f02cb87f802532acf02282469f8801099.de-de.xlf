<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6cd2cab888bf336151ed26968119431f4ffc75f4</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\strings\zero-based-vs-one-based-string-access.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bd812dab4e7794da3d2d9b7a79b2c05271437103</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a156119e7ed8221e0178579067ec265add505e11</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Zero-based vs. One-based String Access in Visual Basic | Microsoft Docs</source>
          <target state="translated">Nullbasierter und Eins Zeichenfolge Zugriff in Visual Basic | Microsoft-Dokumentation</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Zero-based vs. One-based String Access in Visual Basic</source>
          <target state="translated">Nullbasierter und Eins Zeichenfolge Zugriff in Visual Basic</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic compares how <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> and the <ph id="ph2">[!INCLUDE[dnprdnshort](../../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph> provide access to the characters in a string.</source>
          <target state="translated">In diesem Thema wird wie <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> und <ph id="ph2">[!INCLUDE[dnprdnshort](../../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph> ermöglichen den Zugriff auf die Zeichen in einer Zeichenfolge.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph> always provides zero-based access to the characters in a string, whereas <ph id="ph2">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> provides zero-based and one-based access, depending on the function.</source>
          <target state="translated">Die <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph> stellt immer nullbasierten Zugriff auf die Zeichen in einer Zeichenfolge bereit, während die <ph id="ph2">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> nullbasierten oder&amp;1;-basierten Zugriff, abhängig von der Funktion enthält.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>One-Based</source>
          <target state="translated">Eins</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For an example of a one-based <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> function, consider the <ph id="ph2">`Mid`</ph> function.</source>
          <target state="translated">Ein Beispiel für eine&amp;1;-basierte <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> funktionieren, sollten Sie die <ph id="ph2">`Mid`</ph> Funktion.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>It takes an argument that indicates the character position at which the substring will start, starting with position 1.</source>
          <target state="translated">Ein Argument, das die Position angibt, an der die Teilzeichenfolge mit der Position 1 beginnt beginnt, dauert.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph> &lt;xref:System.String.Substring%2A?displayProperty=fullName&gt; method takes an index of the character in the string at which the substring is to start, starting with position 0.</source>
          <target state="translated">Die <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph> &lt;xref:System.String.Substring%2A?displayProperty=fullName&gt;-Methode erhält einen Index des Zeichens in der Zeichenfolge, an der die Teilzeichenfolge beginnen, beginnt mit der Position 0.&lt;/xref:System.String.Substring%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Thus, if you have a string "ABCDE", the individual characters are numbered 1,2,3,4,5 for use with the <ph id="ph1">`Mid`</ph> function, but 0,1,2,3,4 for use with the &lt;xref:System.String.Substring%2A?displayProperty=fullName&gt; method.</source>
          <target state="translated">Wenn Sie eine Zeichenfolge "ABCDE" verfügen, die einzelne Zeichen werden nummeriert, 1,2,3,4,5 für die Verwendung mit der <ph id="ph1">`Mid`</ph> -Funktion, aber 0,1,2,3,4 für die Verwendung mit der &lt;xref:System.String.Substring%2A?displayProperty=fullName&gt;Methode.&lt;/xref:System.String.Substring%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Zero-Based</source>
          <target state="translated">Nullbasierte</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For an example of a zero-based <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> function, consider the <ph id="ph2">`Split`</ph> function.</source>
          <target state="translated">Ein Beispiel für ein nullbasiertes <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> funktionieren, sollten Sie die <ph id="ph2">`Split`</ph> Funktion.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>It splits a string and returns an array containing the substrings.</source>
          <target state="translated">Er teilt eine Zeichenfolge und gibt ein Array, das die Teilzeichenfolgen enthält.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph> &lt;xref:System.String.Split%2A?displayProperty=fullName&gt; method also splits a string and returns an array containing the substrings.</source>
          <target state="translated">Die <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph> &lt;xref:System.String.Split%2A?displayProperty=fullName&gt;Methode auch eine Zeichenfolge und gibt ein Array, das die Teilzeichenfolgen enthält.&lt;/xref:System.String.Split%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Because the <ph id="ph1">`Split`</ph> function and &lt;xref:System.String.Split%2A&gt; method return <ph id="ph2">[!INCLUDE[dnprdnshort](../../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph> arrays, they must be zero-based.</source>
          <target state="translated">Da die <ph id="ph1">`Split`</ph> Funktion und &lt;xref:System.String.Split%2A&gt;Methode <ph id="ph2">[!INCLUDE[dnprdnshort](../../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph> Arrays, müssen sie nullbasiert sein.&lt;/xref:System.String.Split%2A&gt;</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">Siehe auch</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>&lt;xref:Microsoft.VisualBasic.Strings.Mid%2A&gt;</source>
          <target state="translated">&lt;xref:Microsoft.VisualBasic.Strings.Mid%2A&gt;&lt;/xref:Microsoft.VisualBasic.Strings.Mid%2A&gt;</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>&lt;xref:Microsoft.VisualBasic.Strings.Split%2A&gt;</source>
          <target state="translated">&lt;xref:Microsoft.VisualBasic.Strings.Split%2A&gt;&lt;/xref:Microsoft.VisualBasic.Strings.Split%2A&gt;</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.String.Substring%2A&gt;</source>
          <target state="translated">&lt;xref:System.String.Substring%2A&gt;&lt;/xref:System.String.Substring%2A&gt;</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.String.Split%2A&gt;</source>
          <target state="translated">&lt;xref:System.String.Split%2A&gt;&lt;/xref:System.String.Split%2A&gt;</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Introduction to Strings in Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/language-features/strings/introduction-to-strings.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>Einführung in Zeichenfolgen in Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/language-features/strings/introduction-to-strings.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>