<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-47f9650" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9827f9f37ce198b23bfd4e5fbca41cd86d5885a4</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\generics.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">871b5996904650ac7acaf2a1327f2a39905f68c8</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1d28dd0577194dcbfe32efffe44899f9c319f2c5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Generic Types (Generics) Overview</source>
          <target state="translated">Información general (genéricos) de tipos genéricos</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Generic Types (Generics) Overview</source>
          <target state="translated">Información general (genéricos) de tipos genéricos</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Generic Types (Generics) Overview</source>
          <target state="translated">Información general (genéricos) de tipos genéricos</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>We use generics all the time in C#, whether implicitly or explicitly.</source>
          <target state="translated">Usamos genéricos en todo momento en C#, ya sea implícita o explícitamente.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>When you use LINQ in C#, did you ever notice that you are working with IEnumerable<ph id="ph1">&lt;T&gt;</ph>?</source>
          <target state="translated">Al usar LINQ en C#, ¿alguna vez observó que estaba trabajando con IEnumerable<ph id="ph1">&lt;T&gt;</ph>?</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Or if you ever saw an online sample of a “generic repository” for talking to databases using Entity Framework, did you see that most methods return IQueryable<ph id="ph1">&lt;T&gt;</ph>?</source>
          <target state="translated">O si alguna vez ha visto un ejemplo en línea de un "repositorio genérico" para comunicarse con bases de datos mediante Entity Framework, ¿observó que la mayoría de los métodos devuelven IQueryable<ph id="ph1">&lt;T&gt;</ph>?</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You may have wondered what the <bpt id="p1">**</bpt>T<ept id="p1">**</ept> is in these examples and why is it in there?</source>
          <target state="translated">¿Probablemente se pregunte qué significa la <bpt id="p1">**</bpt>T<ept id="p1">**</ept> en estos ejemplos y por qué aparece?</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>First introduced to the .NET Framework 2.0, generics involved changes to both the C# language and the Common Language Runtime (CLR).</source>
          <target state="translated">Los genéricos, introducidos en primer lugar en .NET Framework 2.0, implican cambios en el lenguaje de C# y en Common Language Runtime (CLR).</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Generics<ept id="p1">**</ept> are essentially a “code template” that allows developers to define <bpt id="p2">[</bpt>type-safe<ept id="p2">](https://msdn.microsoft.com/library/hbzz1a9a.aspx)</ept> data structures without committing to an actual data type.</source>
          <target state="translated">Los <bpt id="p1">**</bpt>genéricos<ept id="p1">**</ept> son esencialmente una "plantilla de código" que permite a los desarrolladores definir estructuras de datos <bpt id="p2">[</bpt>con seguridad de tipos<ept id="p2">](https://msdn.microsoft.com/library/hbzz1a9a.aspx)</ept> sin confirmar un tipo de datos real.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`List&lt;T&gt;`</ph> is a <bpt id="p1">[</bpt>Generic Collection<ept id="p1">](https://msdn.microsoft.com/library/System.Collections.Generic.aspx)</ept> that can be declared and used with any type: <ph id="ph2">`List&lt;int&gt;`</ph>, <ph id="ph3">`List&lt;string&gt;`</ph>, <ph id="ph4">`List&lt;Person&gt;`</ph>, etc.</source>
          <target state="translated">Por ejemplo, <ph id="ph1">`List&lt;T&gt;`</ph> es un <bpt id="p1">[</bpt>colección genérica<ept id="p1">](https://msdn.microsoft.com/library/System.Collections.Generic.aspx)</ept> que se puede declarar y usar con cualquier tipo: <ph id="ph2">`List&lt;int&gt;`</ph>, <ph id="ph3">`List&lt;string&gt;`</ph>, <ph id="ph4">`List&lt;Person&gt;`</ph>, etc..</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>So, what’s the point?</source>
          <target state="translated">Así que, ¿para qué sirven?</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Why are generics useful?</source>
          <target state="translated">¿Por qué son útiles los genéricos?</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In order to understand this, we need to take a look at a specific class before and after adding generics.</source>
          <target state="translated">Para poder entenderlo, necesitamos echar un vistazo a una clase específica antes y después de agregar genéricos.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Let’s look at the <ph id="ph1">`ArrayList`</ph>.</source>
          <target state="translated">Examinemos <ph id="ph1">`ArrayList`</ph>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In C# 1.0, the <ph id="ph1">`ArrayList`</ph> elements were of type <ph id="ph2">`object`</ph>.</source>
          <target state="translated">En C# 1.0, los elementos de <ph id="ph1">`ArrayList`</ph> eran de tipo <ph id="ph2">`object`</ph>.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This meant that any element that was added was silently converted into an <ph id="ph1">`object`</ph>; same thing happens on reading the elements from the list (this process is known as <bpt id="p1">[</bpt>boxing<ept id="p1">](https://msdn.microsoft.com/library/yz2be5wk.aspx)</ept> and unboxing respectively).</source>
          <target state="translated">Esto significaba que cualquier elemento que se hubiese agregado se convertía desapercibidamente en <ph id="ph1">`object`</ph>; lo mismo sucede al leer los elementos de la lista (este proceso se conoce como <bpt id="p1">[</bpt>conversión boxing<ept id="p1">](https://msdn.microsoft.com/library/yz2be5wk.aspx)</ept> y conversión unboxing respectivamente).</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Boxing and unboxing have an impact of performance.</source>
          <target state="translated">La conversión boxing y la conversión unboxing repercuten en el rendimiento.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>More than that, however, there is no way to tell at compile time what is the actual type of the data in the list.</source>
          <target state="translated">Pero sobre todo, no hay ninguna manera de saber en tiempo de compilación cuál es el tipo real de los datos de la lista.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This makes for some fragile code.</source>
          <target state="translated">Por ello, algunos códigos son frágiles.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Generics solve this problem by providing additional information the type of data each instance of list will contain.</source>
          <target state="translated">Los genéricos solucionan este problema proporcionando información adicional sobre el tipo de datos que va a contener cada instancia de la lista.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Put simply, you can only add integers to <ph id="ph1">`List&lt;int&gt;`</ph> and only add Persons to <ph id="ph2">`List&lt;Person&gt;`</ph>, etc.</source>
          <target state="translated">En pocas palabras, solo puede agregar enteros a <ph id="ph1">`List&lt;int&gt;`</ph> y solo puede agregar personas a <ph id="ph2">`List&lt;Person&gt;`</ph>, etc..</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Generics are also available at runtime, or <bpt id="p1">**</bpt>reified<ept id="p1">**</ept>.</source>
          <target state="translated">Los genéricos también están disponibles en el runtime o <bpt id="p1">**</bpt>reificados<ept id="p1">**</ept>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This means the runtime knows what type of data structure you are using and can store it in memory more efficiently.</source>
          <target state="translated">Esto significa que el runtime conoce qué tipo de estructura de datos está usando y puede almacenarla en memoria de modo más eficaz.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Here is a small program that illustrates the efficiency of knowing the data structure type at runtime:</source>
          <target state="translated">Este es un pequeño programa que muestra la eficacia que supone conocer el tipo de estructura de datos en el runtime:</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This program yields the following output:</source>
          <target state="translated">Este programa produce el siguiente resultado:</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The first thing you notice here is that sorting the generic list is significantly faster than for the non-generic list.</source>
          <target state="translated">Lo primero que verá aquí es que la ordenación de la lista genérica es significativamente más rápida que la de la lista no genérica.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You might also notice that the type for the generic list is distinct ([System.Int32]) whereas the type for the non-generic list is generalized.</source>
          <target state="translated">También puede observar que el tipo de la lista genérica es distinto ([System.Int32]), mientras que el tipo de la lista no genérica es generalizado.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Because the runtime knows the generic <ph id="ph1">`List&lt;int&gt;`</ph> is of type int, it can store the list elements in an underlying integer array in memory while the non-generic <ph id="ph2">`ArrayList`</ph> has to cast each list element as an object as stored in an object array in memory.</source>
          <target state="translated">Dado que el runtime sabe que el genérico <ph id="ph1">`List&lt;int&gt;`</ph> es de tipo int, puede almacenar los elementos de la lista en una matriz de enteros subyacente en memoria, mientras el no genérico <ph id="ph2">`ArrayList`</ph> tiene que convertir cada elemento de la lista como un objeto a medida que se almacena en una matriz de objetos en memoria.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>As shown through this example, the extra castings take up time and slow down the list sort.</source>
          <target state="translated">Como se muestra en este ejemplo, las conversiones adicionales consumen tiempo y ralentizan la ordenación de la lista.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The last useful thing about the runtime knowing the type of your generic is a better debugging experience.</source>
          <target state="translated">El último dato útil sobre el runtime es que conocer el tipo de la clase genérica supone una mejor experiencia de depuración.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>When you are debugging a generic in C#, you know what type each element is in your data structure.</source>
          <target state="translated">Cuando se depura un genérico en C#, sabe qué tipo de cada elemento se encuentra en la estructura de datos.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Without generics, you would have no idea what type each element was.</source>
          <target state="translated">Sin genéricos, no sabría qué tipo de cada elemento estaba presente.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Further reading and resources</source>
          <target state="translated">Más información y recursos</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>An Introduction to C# Generics<ept id="p1">](https://msdn.microsoft.com/library/ms379564.aspx)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Introducción a los genéricos C#<ept id="p1">](https://msdn.microsoft.com/library/ms379564.aspx)</ept></target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide - Generics<ept id="p1">](https://msdn.microsoft.com/library/512aeb7t.aspx)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Guía de programación de C#: genéricos<ept id="p1">](https://msdn.microsoft.com/library/512aeb7t.aspx)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>