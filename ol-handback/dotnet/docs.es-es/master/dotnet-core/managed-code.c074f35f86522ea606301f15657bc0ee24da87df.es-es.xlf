<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7f761c4fc24b8d22d8d1f8116745ebb3f6583378</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\managed-code.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">513b6ebcb3c3c63aeea316754c129ca9772f5fac</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">00f4918a9530160bdb8a002b1989eb1eb8df4ec7</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>What is “managed code”?</source>
          <target state="translated">¿Qué es el "código administrado"?</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>What is “managed code”?</source>
          <target state="translated">¿Qué es el "código administrado"?</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>What is “managed code”?</source>
          <target state="translated">¿Qué es el "código administrado"?</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>When working with .NET Framework, you will often encounter the term “managed code”.</source>
          <target state="translated">Al trabajar con .NET Framework, a menudo se encontrará con el término "código administrado".</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This document will explain what this term means and additional information around it.</source>
          <target state="translated">En este documento se explica el significado de este término y otra información relacionada.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>To put it very simply, managed code is just that: code whose execution is managed by a runtime.</source>
          <target state="translated">Dicho en pocas palabras, el código administrado es simplemente eso: código cuya ejecución está administrada mediante un tiempo de ejecución.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In this case, the runtime in question is called the <bpt id="p1">**</bpt>Common Language Runtime<ept id="p1">**</ept> or CLR, regardless of the implementation (<bpt id="p2">[</bpt>Mono<ept id="p2">](http://www.mono-project.com/)</ept> or .NET Framework or .NET Core).</source>
          <target state="translated">En este caso, el tiempo de ejecución en cuestión se denomina <bpt id="p1">**</bpt>Common Language Runtime<ept id="p1">**</ept> o CLR, independientemente de la implementación (<bpt id="p2">[</bpt>Mono<ept id="p2">](http://www.mono-project.com/)</ept>, .NET Framework o .NET Core).</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>CLR is in charge of taking the managed code, compiling it into machine code and then executing it.</source>
          <target state="translated">CLR se encarga de tomar el código administrado, compilarlo en código máquina y, después, ejecutarlo.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>On top of that, runtime provides several important services such as automatic memory management, security boundaries, type safety etc.</source>
          <target state="translated">Además de eso, el tiempo de ejecución proporciona varios servicios importantes, como la administración de memoria automática, los límites de seguridad, la seguridad de los tipos, etc.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Contrast this to the way you would run a C/C++ program, also called “unmanaged code”.</source>
          <target state="translated">Compare esto con la forma en que ejecutaría un programa escrito en C/C++, también denominado "código no administrado".</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In the unmanaged world, the programmer is in charge of pretty much everything.</source>
          <target state="translated">En un entorno no administrado, el programador se encarga prácticamente de todo.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The actual program is, essentially, a binary that the operating system (OS) loads into memory and starts.</source>
          <target state="translated">El programa real es, básicamente, un archivo binario que el sistema operativo (SO) carga en la memoria e inicia.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Everything else, from memory management to security considerations are a burden of the programmer.</source>
          <target state="translated">Todo lo demás, desde la administración de memoria hasta las consideraciones de seguridad, son responsabilidad del programador.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Managed code is written in one of the high-level languages that can be run on top of the .NET platform, such as C#, Visual Basic, F# and others.</source>
          <target state="translated">El código administrado se escribe en uno de los lenguajes de alto nivel que se pueden ejecutar en la plataforma .NET, como C#, Visual Basic, F # y otros.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>When you compile code written in those languages with their respective compiler, you don’t get machine code.</source>
          <target state="translated">Cuando se compila código escrito en estos lenguajes con su respectivo compilador, no se obtiene código máquina.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You get <bpt id="p1">**</bpt>Intermediate Language<ept id="p1">**</ept> code which the runtime then compiles and executes.</source>
          <target state="translated">Se obtiene código de <bpt id="p1">**</bpt>lenguaje intermedio<ept id="p1">**</ept>, que más adelante el tiempo de ejecución compila y ejecuta.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>C++ is the one exception to this rule, as it can also produce native, unmanaged binaries that run on Windows.</source>
          <target state="translated">C++ es la única excepción a esta regla, ya que también puede generar archivos binarios nativos y no administrados que se ejecutan en Windows.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Intermediate Language &amp; execution</source>
          <target state="translated">Lenguaje intermedio y ejecución</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>What is “Intermediate Language” (or IL for short)?</source>
          <target state="translated">¿Qué es el "lenguaje intermedio" (o IL)?</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>It is a product of compilation of code written in high-level .NET languages.</source>
          <target state="translated">Es un producto de la compilación de código escrito en lenguajes .NET de alto nivel.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Once you compile your code written in one of these languages, you will get a binary that is made out of IL.</source>
          <target state="translated">Una vez compilado el código escrito en uno de estos idiomas, se obtiene un archivo binario integrado por IL.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>It is important to note that the IL is independent from any specific language that runs on top of the runtime; there is even a separate specification for it that you can read if you’re so inclined.</source>
          <target state="translated">Es importante tener en cuenta que el IL es independiente de cualquier lenguaje específico que se ejecute sobre el tiempo de ejecución. Incluso hay una especificación independiente para él, que puede leer si le interesa.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Once you produce IL from your high-level code, you will most likely want to run it.</source>
          <target state="translated">Una vez que haya producido IL a partir del código de alto nivel, lo más probable es que quiera ejecutarlo.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This is where the CLR takes over and starts the process of <bpt id="p1">**</bpt>Just-In-Time<ept id="p1">**</ept> compiling, or <bpt id="p2">**</bpt>JIT-ing<ept id="p2">**</ept> your code from IL to machine code that can actually be run on a CPU.</source>
          <target state="translated">Aquí es donde CLR se encarga del proceso e inicia la compilación <bpt id="p1">**</bpt>Just-In-Time<ept id="p1">**</ept> o <bpt id="p2">**</bpt>JIT<ept id="p2">**</ept> del código IL en código máquina, que se puede ejecutar en una CPU.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In this way, the CLR knows exactly what your code is doing and can effectively <bpt id="p1">_</bpt>manage<ept id="p1">_</ept> it.</source>
          <target state="translated">De esta manera, CLR sabe exactamente qué hace el código y puede <bpt id="p1">_</bpt>administrarlo<ept id="p1">_</ept> con eficacia.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Intermediate Language is sometimes also called Common Intermediate Language (CIL) or Microsoft Intermediate Language (MSIL).</source>
          <target state="translated">El lenguaje intermedio a veces también se denomina Lenguaje intermedio común (CIL) o Lenguaje intermedio de Microsoft (MSIL).</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Unmanaged code interoperability</source>
          <target state="translated">Interoperabilidad con código no administrado</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Of course, the CLR allows passing the boundaries between managed and unmanaged world, and there is a lot of code that does that, even in the <bpt id="p1">[</bpt>Base Class Libraries<ept id="p1">](framework-libraries.md)</ept>.</source>
          <target state="translated">Por supuesto, CLR permite traspasar los límites entre el entorno administrado y no administrado, y hay una gran cantidad de código que lo hace, incluso en <bpt id="p1">[</bpt>bibliotecas de clases base<ept id="p1">](framework-libraries.md)</ept>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This is called <bpt id="p1">**</bpt>interoperability<ept id="p1">**</ept> or just <bpt id="p2">**</bpt>interop<ept id="p2">**</ept> for short.</source>
          <target state="translated">Esto se denomina <bpt id="p1">**</bpt>interoperabilidad<ept id="p1">**</ept> o simplemente <bpt id="p2">**</bpt>interop<ept id="p2">**</ept> para abreviar.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>These provisions would allow you to, for example, wrap up an unmanaged library and call into it.</source>
          <target state="translated">Estas disposiciones permitirían, por ejemplo, encapsular una biblioteca no administrada y llamarla.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>However, it is important to note that once you do this, when the code passes the boundaries of the runtime, the actual management of the execution is again in the hand of unmanaged code, and thus falls under the same restrictions.</source>
          <target state="translated">Pero es importante tener en cuenta que, una vez hecho esto, cuando el código pasa los límites del tiempo de ejecución, la administración real de la ejecución vuelve a depender del código no administrado y, por tanto, se enfrenta a las mismas restricciones.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Similar to this, C# is one language that allows you to use unmanaged constructs such as pointers directly in code by utilizing what is known as <bpt id="p1">**</bpt>unsafe context<ept id="p1">**</ept> which designates a piece of code for which the execution is not managed by the CLR.</source>
          <target state="translated">De modo parecido, C# es un lenguaje que permite usar construcciones no administradas, como punteros, directamente en el código mediante el uso de lo que se conoce como <bpt id="p1">**</bpt>contexto no seguro<ept id="p1">**</ept>, que designa un fragmento de código cuya ejecución no se administrada mediante CLR.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>More resources</source>
          <target state="translated">Más recursos</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>.NET Framework Conceptual Overview<ept id="p1">](https://msdn.microsoft.com/library/zw4w595w.aspx)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Información general acerca de .NET Framework<ept id="p1">](https://msdn.microsoft.com/library/zw4w595w.aspx)</ept></target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Unsafe Code and Pointers<ept id="p1">](https://msdn.microsoft.com/library/t2yzs44b.aspx)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Código no seguro y punteros<ept id="p1">](https://msdn.microsoft.com/library/t2yzs44b.aspx)</ept></target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Interoperability (C# Programming guide)<ept id="p1">](https://msdn.microsoft.com/library/ms173184.aspx)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Interoperabilidad (Guía de programación de C#)<ept id="p1">](https://msdn.microsoft.com/library/ms173184.aspx)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>