<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-e631009" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5493ccb77e62d20d5101728ef8ab1744ea697fb8</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\tutorials\using-with-xplat-cli.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p1</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">322dbd2e537312333af977d9e712ec9ba9224db4</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f1c33e824953ee06e2b9668ef7afab772d44e426</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Getting started with .NET Core on Windows/Linux/macOS using the command line</source>
          <target state="translated">Introducción a .NET Core en Windows/Linux/macOS con la línea de comandos</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Getting started with .NET Core on Windows, Linux, or macOS using the .NET Core command line interface (CLI)</source>
          <target state="translated">Introducción a .NET Core en Windows, Linux o macOS con la interfaz de línea de comandos (CLI) de .NET Core</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Getting started with .NET Core on Windows/Linux/macOS using the command line</source>
          <target state="translated">Introducción a .NET Core en Windows/Linux/macOS con la línea de comandos</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This guide will show you how to use the .NET Core CLI tooling to build basic cross-platform console apps.</source>
          <target state="translated">Esta guía le enseñará a usar las herramientas de la CLI de .NET Core para crear aplicaciones de consola básicas multiplataforma.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>If you're unfamiliar with the .NET Core CLI toolset, read <bpt id="p1">[</bpt>the .NET Core SDK overview<ept id="p1">](../sdk.md)</ept>.</source>
          <target state="translated">Si no está familiarizado con el conjunto de herramientas de la CLI de .NET Core, consulte <bpt id="p1">[</bpt>la información general del SDK de .NET Core<ept id="p1">](../sdk.md)</ept>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
          <target state="translated">Requisitos previos</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Before you begin, ensure you have the <bpt id="p1">[</bpt>latest .NET Core CLI tooling<ept id="p1">](https://www.microsoft.com/net/core)</ept>.</source>
          <target state="translated">Antes de comenzar, asegúrese de que cuenta con las <bpt id="p1">[</bpt>herramientas más recientes de la CLI de .NET Core<ept id="p1">](https://www.microsoft.com/net/core)</ept>.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You'll also need a text editor.</source>
          <target state="translated">También necesitará un editor de texto.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Hello, Console App!</source>
          <target state="translated">Hola, aplicación de consola</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Navigate to or create a new folder with a name you like.</source>
          <target state="translated">En primer lugar, vaya a una carpeta existente o cree una nueva con el nombre que desee.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>"Hello" is the name chosen for the sample code, which can be found <bpt id="p1">[</bpt>here<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/console-apps/Hello)</ept>.</source>
          <target state="translated">"Hello" es el nombre elegido para el código de ejemplo, que se puede encontrar <bpt id="p1">[</bpt>aquí<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/console-apps/Hello)</ept>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Open up a command prompt and type the following:</source>
          <target state="translated">Abra un símbolo del sistema y escriba lo siguiente:</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Let's do a quick walkthrough:</source>
          <target state="translated">Veamos un tutorial rápido:</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">`dotnet new`</ph><ept id="p1">](../tools/dotnet-new.md)</ept> creates an up-to-date <ph id="ph2">`project.json`</ph> file with NuGet dependencies necessary to build a console app.</source>
          <target state="translated"><bpt id="p1">[</bpt><ph id="ph1">`dotnet new`</ph><ept id="p1">](../tools/dotnet-new.md)</ept> crea un archivo <ph id="ph2">`project.json`</ph> actualizado con las dependencias de NuGet necesarias para crear una aplicación de consola.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>It also creates a <ph id="ph1">`Program.cs`</ph>, a basic file containing the entry point for the application.</source>
          <target state="translated">Además, se crea un archivo <ph id="ph1">`Program.cs`</ph>, un archivo básico que contiene el punto de entrada para la aplicación.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`project.json`</ph>:</source>
          <target state="translated"><ph id="ph1">`project.json`</ph>:</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Program.cs`</ph>:</source>
          <target state="translated"><ph id="ph1">`Program.cs`</ph>:</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">`dotnet restore`</ph><ept id="p1">](../tools/dotnet-restore.md)</ept> calls into NuGet to restore the tree of dependencies.</source>
          <target state="translated"><bpt id="p1">[</bpt><ph id="ph1">`dotnet restore`</ph><ept id="p1">](../tools/dotnet-restore.md)</ept> llama a NuGet para restaurar el árbol de dependencias.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>NuGet analyzes the <ph id="ph1">`project.json`</ph> file, downloads the dependencies stated in the file (or grabs them from a cache on your machine), and writes the <ph id="ph2">`project.lock.json`</ph> file.</source>
          <target state="translated">NuGet analiza el archivo <ph id="ph1">`project.json`</ph>, descarga las dependencias descritas en el archivo (o las toma de la memoria caché en la máquina) y escribe el archivo <ph id="ph2">`project.lock.json`</ph>.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`project.lock.json`</ph> file is necessary to be able to compile and run.</source>
          <target state="translated">El archivo <ph id="ph1">`project.lock.json`</ph> es necesario para realizar la compilación y ejecución.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`project.lock.json`</ph> file is a persisted and complete set of the graph of NuGet dependencies and other information describing an app.</source>
          <target state="translated">El archivo <ph id="ph1">`project.lock.json`</ph> es un conjunto completo y persistente del gráfico de dependencias de NuGet y cualquier otra información que describa a una aplicación.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This file is read by other tools, such as <ph id="ph1">`dotnet build`</ph> and <ph id="ph2">`dotnet run`</ph>, enabling them to process the source code with a correct set of NuGet dependencies and binding resolutions.</source>
          <target state="translated">Este archivo se lee por otras herramientas, como <ph id="ph1">`dotnet build`</ph> y <ph id="ph2">`dotnet run`</ph>, que les permite procesar el código fuente con un conjunto correcto de las dependencias de NuGet y resoluciones de enlace.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">`dotnet run`</ph><ept id="p1">](../tools/dotnet-run.md)</ept> calls <ph id="ph2">`dotnet build`</ph> to ensure that the build targets have been built, and then calls <ph id="ph3">`dotnet &lt;assembly.dll&gt;`</ph> to run the target application.</source>
          <target state="translated"><bpt id="p1">[</bpt><ph id="ph1">`dotnet run`</ph><ept id="p1">](../tools/dotnet-run.md)</ept> llama a <ph id="ph2">`dotnet build`</ph> para asegurarse de que los destinos de la compilación se han creado y, a después, llama a <ph id="ph3">`dotnet &lt;assembly.dll&gt;`</ph> para ejecutar la aplicación de destino.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>You can also execute <bpt id="p1">[</bpt><ph id="ph1">`dotnet build`</ph><ept id="p1">](../tools/dotnet-build.md)</ept> to compile the code without running the build console applications.</source>
          <target state="translated">También puede ejecutar <bpt id="p1">[</bpt><ph id="ph1">`dotnet build`</ph><ept id="p1">](../tools/dotnet-build.md)</ept> para compilar el código sin ejecutar las aplicaciones de consola de la compilación.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Building a self-contained application</source>
          <target state="translated">Creación de una aplicación independiente</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Let's try compiling a self-contained application instead of a portable application.</source>
          <target state="translated">Vamos a intentar compilar una aplicación independiente en lugar de una aplicación portátil.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You can read more about the <bpt id="p1">[</bpt>types of portability in .NET Core<ept id="p1">](../deploying/index.md)</ept> to learn about the different application types, and how they are deployed.</source>
          <target state="translated">Puede leer más sobre los <bpt id="p1">[</bpt>tipos de portabilidad de .NET Core<ept id="p1">](../deploying/index.md)</ept> para obtener información acerca de los diferentes tipos de aplicación y cómo se implementan.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You need to make some changes to your <ph id="ph1">`project.json`</ph> file to direct the tools to build a self-contained application.</source>
          <target state="translated">Debe realizar algunos cambios en el archivo <ph id="ph1">`project.json`</ph> para dirigir las herramientas para crear una aplicación independiente.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>You can see these in the <bpt id="p1">[</bpt>HelloNative<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/console-apps/HelloNative)</ept> project in the samples directory.</source>
          <target state="translated">Puede verlos en el proyecto <bpt id="p1">[</bpt>HelloNative<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/console-apps/HelloNative)</ept> del directorio de ejemplos.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The first change is to remove the <ph id="ph1">`"type": "platform"`</ph> element from all dependencies.</source>
          <target state="translated">El primer cambio consiste en quitar el elemento <ph id="ph1">`"type": "platform"`</ph> de todas las dependencias.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This project's only dependency so far is <ph id="ph1">`"Microsoft.NETCore.App"`</ph>.</source>
          <target state="translated">Hasta ahora la única dependencia de este proyecto es <ph id="ph1">`"Microsoft.NETCore.App"`</ph>.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`dependencies`</ph> section should look like this:</source>
          <target state="translated">La sección <ph id="ph1">`dependencies`</ph> debe ser similar a esta:</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Next, you need to add a <ph id="ph1">`runtimes`</ph> node to specify all the target execution environments.</source>
          <target state="translated">Después, debe agregar un nodo <ph id="ph1">`runtimes`</ph> para especificar todos los entornos de ejecución de destino.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For example, the following <ph id="ph1">`runtimes`</ph> node instructs the build system to create executables for the 64 bit version of Windows 10 and the 64 bit version of Mac OS X version 10.11.</source>
          <target state="translated">Por ejemplo, el nodo <ph id="ph1">`runtimes`</ph> siguiente indica al sistema de compilación que cree archivos ejecutables para la versión de 64 bits de Windows 10 y la versión de 64 bits de Mac OS X versión 10.11.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The build system will generate native executables for the current environment.</source>
          <target state="translated">El sistema de compilación generará ejecutables nativos para el entorno actual.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If you are following these steps on a Windows machine, you'll build a Windows executable.</source>
          <target state="translated">Si está siguiendo estos pasos en una máquina Windows, va a crear un ejecutable de Windows.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If you are following these steps on a Mac, you'll build the OS X executable.</source>
          <target state="translated">Si está siguiendo estos pasos en un Mac, va a crear un ejecutable de OS X.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>See the full list of supported runtimes in the <bpt id="p1">[</bpt>RID catalog<ept id="p1">](../rid-catalog.md)</ept>.</source>
          <target state="translated">Consulte la lista completa de sistemas en tiempo de ejecución compatibles en el <bpt id="p1">[</bpt>catálogo de RID<ept id="p1">](../rid-catalog.md)</ept>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>After making those two changes you execute <ph id="ph1">`dotnet restore`</ph>, followed by <ph id="ph2">`dotnet build`</ph> to create the native executable.</source>
          <target state="translated">Después de realizar estos dos cambios, ejecute <ph id="ph1">`dotnet restore`</ph>, seguido de <ph id="ph2">`dotnet build`</ph> para crear el ejecutable nativo.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Then, you can run the generated native executable.</source>
          <target state="translated">Después, ejecute el archivo ejecutable nativo generado.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The following example shows the commands for Windows.</source>
          <target state="translated">El ejemplo siguiente muestra los comandos para Windows.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The example shows where the native executable gets generated and assumes that the project directory is named HelloNative.</source>
          <target state="translated">El ejemplo muestra dónde se genera el archivo ejecutable nativo y supone que el directorio del proyecto se denomina HelloNative.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>You may notice that the native application takes slightly longer to build, but executes slightly faster.</source>
          <target state="translated">Puede observar que la aplicación nativa tarda ligeramente más tiempo en compilarse, pero se ejecuta un poco más rápido.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This behavior becomes more noticeable as the application grows.</source>
          <target state="translated">Este comportamiento se vuelve más evidente a medida que crece la aplicación.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The build process generates several more files when your <ph id="ph1">`project.json`</ph> creates a native build.</source>
          <target state="translated">El proceso de compilación genera varios archivos más cuando <ph id="ph1">`project.json`</ph> crea una compilación nativa.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>These files are created in <ph id="ph1">`bin\Debug\netcoreapp1.0\&lt;platform&gt;`</ph> where <ph id="ph2">`&lt;platform&gt;`</ph> is the RID chosen.</source>
          <target state="translated">Estos archivos se crean en <ph id="ph1">`bin\Debug\netcoreapp1.0\&lt;platform&gt;`</ph> donde <ph id="ph2">`&lt;platform&gt;`</ph> es el RID elegido.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>In addition to the project's <ph id="ph1">`HelloNative.dll`</ph> there is a <ph id="ph2">`HelloNative.exe`</ph> that loads the runtime and starts the application.</source>
          <target state="translated">Además del <ph id="ph1">`HelloNative.dll`</ph> del proyecto, hay un <ph id="ph2">`HelloNative.exe`</ph> que carga el tiempo de ejecución e inicia la aplicación.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Note that the name of the generated application changed because the project directory's name has changed.</source>
          <target state="translated">Tenga en cuenta que el nombre de la aplicación generada ha cambiado porque ha cambiado el nombre del directorio de proyecto.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>You may want to package this application to execute it on a machine that does not include the .NET runtime.</source>
          <target state="translated">Puede empaquetar esta aplicación para ejecutarla en una máquina que no incluya el sistema en tiempo de ejecución de .NET.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>You do that using the <ph id="ph1">`dotnet publish`</ph> command.</source>
          <target state="translated">Puede hacerlo mediante el comando <ph id="ph1">`dotnet publish`</ph>.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`dotnet publish`</ph> command creates a new subdirectory under the <ph id="ph2">`./bin/Debug/netcoreapp1.0/&lt;platform&gt;`</ph> directory called <ph id="ph3">`publish`</ph>.</source>
          <target state="translated">El comando <ph id="ph1">`dotnet publish`</ph> crea un nuevo subdirectorio en el directorio <ph id="ph2">`./bin/Debug/netcoreapp1.0/&lt;platform&gt;`</ph> llamado <ph id="ph3">`publish`</ph>.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>It copies the executable, all dependent DLLs and the framework to this sub directory.</source>
          <target state="translated">Copia el archivo ejecutable, todos los archivos DLL dependientes y la plataforma en este subdirectorio.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>You can package that directory to another machine (or a container) and execute the application there.</source>
          <target state="translated">Puede empaquetar ese directorio en otro equipo (o en un contenedor) y ejecutar la aplicación allí.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Let's contrast that with the behavior of <ph id="ph1">`dotnet publish`</ph> in the first Hello World sample.</source>
          <target state="translated">Vamos a compararlo con el comportamiento de <ph id="ph1">`dotnet publish`</ph> en el primer ejemplo de Hello World.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>That application is a <bpt id="p1">*</bpt>portable application<ept id="p1">*</ept>, which is the default type of application for .NET Core.</source>
          <target state="translated">La aplicación es una <bpt id="p1">*</bpt>aplicación portable<ept id="p1">*</ept>, que es el tipo predeterminado de aplicación para .NET Core.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>A portable application requires that .NET Core is installed on the target machine.</source>
          <target state="translated">Una aplicación portable requiere que .NET Core esté instalado en el equipo de destino.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Portable applications can be built on one machine and executed anywhere.</source>
          <target state="translated">Las aplicaciones portables se pueden crear en una máquina y ejecutarse en cualquier lugar.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Native applications must be built separately for each target machine.</source>
          <target state="translated">Las aplicaciones nativas deben crearse de manera independiente para cada máquina de destino.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`dotnet publish`</ph> creates a directory that has the application's DLL, and any dependent dlls that are not part of the platform installation.</source>
          <target state="translated"><ph id="ph1">`dotnet publish`</ph>crea un directorio que tiene el archivo DLL de la aplicación, así como los archivos DLL dependientes que no forman parte de la instalación de la plataforma.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Augmenting the program</source>
          <target state="translated">Aumento del programa</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Let's change the file just a little bit.</source>
          <target state="translated">Vamos a cambiar un poco el archivo.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Fibonacci numbers are fun, so let's try that out (using the native version):</source>
          <target state="translated">Los números de Fibonacci son divertidos, así que vamos a probarlos (con la versión nativa):</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Program.cs`</ph>:</source>
          <target state="translated"><ph id="ph1">`Program.cs`</ph>:</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>And running the program (assuming you're on Windows, and have changed the project directory name to Fibonacci):</source>
          <target state="translated">Y se ejecuta el programa (suponiendo que se encuentra en Windows y que ha cambiado el nombre del directorio de proyecto a Fibonacci):</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>And that's it!</source>
          <target state="translated">Y listo.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>You can augment <ph id="ph1">`Program.cs`</ph> any way you like.</source>
          <target state="translated">Puede aumentar <ph id="ph1">`Program.cs`</ph> como desee.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Adding some new files</source>
          <target state="translated">Adición de algunos archivos nuevos</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Single files are fine for simple one-off programs, but chances are you're going to want to break things out into multiple files if you're building anything which has multiple components.</source>
          <target state="translated">Los archivos únicos están bien para los programas sencillos de uso único, pero lo más probable es que quiera desglosar todo en varios archivos si va a crear cualquier cosa que tenga varios componentes.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Multiple files are a way to do that.</source>
          <target state="translated">Varios archivos son una forma de hacerlo.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Create a new file and give it a unique namespace:</source>
          <target state="translated">Cree un nuevo archivo y asígnele un único espacio de nombres:</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Next, include it in your <ph id="ph1">`Program.cs`</ph> file:</source>
          <target state="translated">Después, inclúyalo en el archivo <ph id="ph1">`Program.cs`</ph>:</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>And finally, you can build it:</source>
          <target state="translated">Y por último, puede crear:</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Now the fun part: making the new file do something!</source>
          <target state="translated">Ahora lo divertido: vamos a poner en funcionamiento el nuevo archivo.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Example: A Fibonacci Sequence Generator</source>
          <target state="translated">Ejemplo: Un generador de secuencia de Fibonacci</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Let's say you want to build off of the previous <bpt id="p1">[</bpt>Fibonacci example<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/console-apps/Fibonacci)</ept> by caching some Fibonacci values and add some recursive flair.</source>
          <target state="translated">Supongamos que desea realizar una compilación fuera del <bpt id="p1">[</bpt>ejemplo de Fibonacci<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/console-apps/Fibonacci)</ept> anterior almacenando en caché algunos valores Fibonacci y agregando algún estilo recursivo.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Your code for a <bpt id="p1">[</bpt>better Fibonacci example<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/console-apps/FibonacciBetter)</ept> might look something like this:</source>
          <target state="translated">El código para un <bpt id="p1">[</bpt>ejemplo de Fibonacci mejor<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/console-apps/FibonacciBetter)</ept> podría ser similar al siguiente:</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Note that the use of <ph id="ph1">`Dictionary&lt;int, int&gt;`</ph> and <ph id="ph2">`IEnumerable&lt;int&gt;`</ph> means incorporating the <ph id="ph3">`System.Collections`</ph> namespace.</source>
          <target state="translated">Tenga en cuenta que el uso de <ph id="ph1">`Dictionary&lt;int, int&gt;`</ph> y <ph id="ph2">`IEnumerable&lt;int&gt;`</ph> implica la incorporación del espacio de nombres <ph id="ph3">`System.Collections`</ph>.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Microsoft.NetCore.App`</ph> package is a <bpt id="p1">*</bpt>metapackage<ept id="p1">*</ept> that contains many of the core assemblies from the .NET Framework.</source>
          <target state="translated">El paquete <ph id="ph1">`Microsoft.NetCore.App`</ph> es un <bpt id="p1">*</bpt>metapaquete<ept id="p1">*</ept> que contiene muchos de los ensamblados básicos de .NET Framework.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>By including this metapackage, you've already included the <ph id="ph1">`System.Collections.dll`</ph> assembly as part of your project.</source>
          <target state="translated">Al incluir este metapaquete, ya ha incluido el ensamblado <ph id="ph1">`System.Collections.dll`</ph> como parte de su proyecto.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>You can verify this by running <ph id="ph1">`dotnet publish`</ph> and examining the files that are part of the installed package.</source>
          <target state="translated">Puede comprobarlo mediante la ejecución de <ph id="ph1">`dotnet publish`</ph> y el examen de los archivos que forman parte del paquete instalado.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>You'll see <ph id="ph1">`System.Collections.dll`</ph> in the list.</source>
          <target state="translated">Verá <ph id="ph1">`System.Collections.dll`</ph> en la lista.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Now adjust the <ph id="ph1">`Main()`</ph> method in your <ph id="ph2">`Program.cs`</ph> file as shown below.</source>
          <target state="translated">Ahora, ajuste el método <ph id="ph1">`Main()`</ph> en su archivo <ph id="ph2">`Program.cs`</ph>, tal como se muestra a continuación.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The example assumes that <ph id="ph1">`Program.cs`</ph> has a <ph id="ph2">`using System;`</ph> statement.</source>
          <target state="translated">El ejemplo asume que <ph id="ph1">`Program.cs`</ph> tiene una instrucción <ph id="ph2">`using System;`</ph>.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>If you have a <ph id="ph1">`using static System.Console;`</ph> statement, remove <ph id="ph2">`Console.`</ph> from <ph id="ph3">`Console.WriteLine`</ph>.</source>
          <target state="translated">Si tiene una instrucción <ph id="ph1">`using static System.Console;`</ph>, quite <ph id="ph2">`Console.`</ph> en <ph id="ph3">`Console.WriteLine`</ph>.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Finally, run it!</source>
          <target state="translated">Por último, ejecute la aplicación.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>And that's it!</source>
          <target state="translated">Y listo.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Using folders to organize code</source>
          <target state="translated">Uso de carpetas para organizar el código</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Say you wanted to introduce some new types to do work on.</source>
          <target state="translated">Supongamos que desea introducir algunos nuevos tipos en los que trabajar.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>You can do this by adding more files and making sure to give them namespaces you can include in your <ph id="ph1">`Program.cs`</ph> file.</source>
          <target state="translated">Puede hacerlo agregando más archivos y asegurándose de concederles los espacios de nombres que se pueden incluir en el archivo <ph id="ph1">`Program.cs`</ph>.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>This works great when the size of your project is relatively small.</source>
          <target state="translated">Esto funciona bien cuando el tamaño del proyecto es relativamente pequeño.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>However, if you have a larger app with many different data types and potentially multiple layers, you may wish to organize things logically.</source>
          <target state="translated">Sin embargo, si tiene una aplicación de mayor tamaño con muchos tipos de datos diferentes y potencialmente varias capas, puede organizar las cosas de forma lógica.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>This is where folders come into play.</source>
          <target state="translated">Aquí es donde entran en juego las carpetas.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>You can either follow along with <bpt id="p1">[</bpt>the NewTypes sample project<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/console-apps/NewTypes)</ept> that this guide covers, or create your own files and folders.</source>
          <target state="translated">Puede seguir con <bpt id="p1">[</bpt>el proyecto de ejemplo NewTypes<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/console-apps/NewTypes)</ept> que trata esta guía o bien crear sus propios archivos y carpetas.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>To begin, create a new folder under the root of your project.</source>
          <target state="translated">Para empezar, cree una nueva carpeta en la raíz del proyecto.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`/Model`</ph> is chosen here.</source>
          <target state="translated"><ph id="ph1">`/Model`</ph>se elige aquí.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Now add some new types to the folder:</source>
          <target state="translated">Ahora agregue algunos tipos nuevos a la carpeta:</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Now, just as if they were files in the same directory, give them all the same namespace so you can include them in your <ph id="ph1">`Program.cs`</ph>.</source>
          <target state="translated">Ahora, como si fueran archivos del mismo directorio, asígneles a todos el mismo espacio de nombres para incluirlos en su <ph id="ph1">`Program.cs`</ph>.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Example: Pet Types</source>
          <target state="translated">Ejemplo: Tipos de mascota</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>This example creates two new types, <ph id="ph1">`Dog`</ph> and <ph id="ph2">`Cat`</ph>, and has them implement an interface, <ph id="ph3">`IPet`</ph>.</source>
          <target state="translated">Este ejemplo crea dos nuevos tipos, <ph id="ph1">`Dog`</ph> y <ph id="ph2">`Cat`</ph>, y tienen que implementar una interfaz, <ph id="ph3">`IPet`</ph>.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Folder Structure:</source>
          <target state="translated">Estructura de carpetas:</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`IPet.cs`</ph>:</source>
          <target state="translated"><ph id="ph1">`IPet.cs`</ph>:</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Dog.cs`</ph>:</source>
          <target state="translated"><ph id="ph1">`Dog.cs`</ph>:</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Cat.cs`</ph>:</source>
          <target state="translated"><ph id="ph1">`Cat.cs`</ph>:</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Program.cs`</ph>:</source>
          <target state="translated"><ph id="ph1">`Program.cs`</ph>:</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`project.json`</ph>:</source>
          <target state="translated"><ph id="ph1">`project.json`</ph>:</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>And if you run this:</source>
          <target state="translated">Y si se ejecuta:</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>New pet types can be added (such as a <ph id="ph1">`Bird`</ph>), extending this project.</source>
          <target state="translated">Se pueden agregar nuevos tipos de mascotas (como un <ph id="ph1">`Bird`</ph>), ampliando este proyecto.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Testing your Console App</source>
          <target state="translated">Prueba de la aplicación de consola</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>You'll probably be wanting to test your projects at some point.</source>
          <target state="translated">Probablemente estará esperando probar sus proyectos en algún momento.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Here's a good way to do it:</source>
          <target state="translated">Esta es una buena forma de hacerlo:</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Move any source of your existing project into a new <ph id="ph1">`src`</ph> folder.</source>
          <target state="translated">Mueva cualquier código fuente del proyecto existente a una nueva carpeta <ph id="ph1">`src`</ph>.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Create a <ph id="ph1">`/test`</ph> directory.</source>
          <target state="translated">Cree un directorio <ph id="ph1">`/test`</ph>.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Create a new <ph id="ph1">`global.json`</ph> file:</source>
          <target state="translated">Cree un nuevo archivo <ph id="ph1">`global.json`</ph>:</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`global.json`</ph>:</source>
          <target state="translated"><ph id="ph1">`global.json`</ph>:</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>This file tells the build system that this is a multi-project system, which allows it to look for dependencies in more than just the current folder it happens to be executing in.</source>
          <target state="translated">Este archivo indica al sistema de compilación que se trata de un sistema de varios proyectos, que le permite buscar dependencias en algo más que en la carpeta actual en la que está ejecutándose.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>This is important because it allows you to place a dependency on the code under test in your test project.</source>
          <target state="translated">Esto es importante porque permite colocar una dependencia en el código sometido a prueba en su proyecto de prueba.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Example: Extending the NewTypes project</source>
          <target state="translated">Ejemplo: Ampliación del proyecto NewTypes</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Now that the project system is in place, you can create your test project and start writing tests!</source>
          <target state="translated">Ahora que el sistema del proyecto está en su lugar, puede crear el proyecto de prueba y empezar a escribir pruebas.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>From here on out, this guide will use and extend <bpt id="p1">[</bpt>the sample Types project<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/console-apps/NewTypes)</ept>.</source>
          <target state="translated">De ahora en adelante en esta guía se va a utilizar y a ampliar <bpt id="p1">[</bpt>el proyecto de tipos de ejemplo<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/console-apps/NewTypes)</ept>.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Additionally, it will use the <bpt id="p1">[</bpt>Xunit<ept id="p1">](https://xunit.github.io/)</ept> test framework.</source>
          <target state="translated">Además, utilizará la plataforma de pruebas <bpt id="p1">[</bpt>Xunit<ept id="p1">](https://xunit.github.io/)</ept>.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Feel free to follow along or create your own multi-project system with tests.</source>
          <target state="translated">No dude en seguir leyendo o crear su propio sistema de varios proyectos con las pruebas.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The whole project structure should look like this:</source>
          <target state="translated">La estructura de todo el proyecto debe tener este aspecto:</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>There are two new things to make sure you have in your test project:</source>
          <target state="translated">Hay dos cosas nuevas que debe asegurarse de que las tiene en su proyecto de prueba:</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>A correct <ph id="ph1">`project.json`</ph> with the following:</source>
          <target state="translated">Un archivo <ph id="ph1">`project.json`</ph> correcto con lo siguiente:</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>A reference to <ph id="ph1">`xunit`</ph></source>
          <target state="translated">Una referencia a <ph id="ph1">`xunit`</ph></target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>A reference to <ph id="ph1">`dotnet-test-xunit`</ph></source>
          <target state="translated">Una referencia a <ph id="ph1">`dotnet-test-xunit`</ph></target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>A reference to the namespace corresponding to the code under test</source>
          <target state="translated">Una referencia al espacio de nombres correspondiente al código sometido a prueba</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>An Xunit test class.</source>
          <target state="translated">Una clase de prueba de Xunit</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`NewTypesTests/project.json`</ph>:</source>
          <target state="translated"><ph id="ph1">`NewTypesTests/project.json`</ph>:</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`PetTests.cs`</ph>:</source>
          <target state="translated"><ph id="ph1">`PetTests.cs`</ph>:</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Now you can run tests!</source>
          <target state="translated">Ahora puede ejecutar las pruebas.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><ph id="ph1">`dotnet test`</ph><ept id="p1">](../tools/dotnet-test.md)</ept> command runs the test runner you have specified in your project.</source>
          <target state="translated">El comando <bpt id="p1">[</bpt><ph id="ph1">`dotnet test`</ph><ept id="p1">](../tools/dotnet-test.md)</ept> ejecuta el ejecutor de pruebas que se ha especificado en el proyecto.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Make sure you start at the top-level directory.</source>
          <target state="translated">Asegúrese de que comienza en el directorio de nivel superior.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Output should look like this:</source>
          <target state="translated">La salida debe ser similar a la que se muestra a continuación:</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Conclusion</source>
          <target state="translated">Conclusión</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Hopefully this guide has helped you learn how to create a .NET Core console app, from the basics all the way up to a multi-project system with unit tests.</source>
          <target state="translated">Espero que esta guía le ha ayudado a aprender a crear una aplicación de consola .NET Core, desde los aspectos básicos hasta un sistema de varios proyectos con pruebas unitarias.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The next step is to create awesome console apps of your own!</source>
          <target state="translated">El siguiente paso consiste en crear increíbles aplicaciones de consola usted mismo.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>If a more advanced example of a console app interests you, check out the next tutorial: <bpt id="p1">[</bpt>Using the CLI tools to write console apps: An advanced step-by-step guide<ept id="p1">](cli-console-app-tutorial-advanced.md)</ept>.</source>
          <target state="translated">Si le interesa un ejemplo más avanzado de una aplicación de consola, consulte la <bpt id="p1">[</bpt>guía paso a paso avanzada sobre el uso de las herramientas CLI para escribir aplicaciones de consola<ept id="p1">](cli-console-app-tutorial-advanced.md)</ept>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>