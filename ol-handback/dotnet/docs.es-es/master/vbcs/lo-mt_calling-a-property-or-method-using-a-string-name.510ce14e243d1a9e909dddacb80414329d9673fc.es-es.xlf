<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">87af2816ba42e2901c53bec5e9c19f34c676ed5c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\early-late-binding\calling-a-property-or-method-using-a-string-name.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ca5f1d6d04e16d18cd038d873683e1c0e153a9ab</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0ec014b5e94bdf3d00a37ea0fab43c86ecb61e90</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Calling a Property or Method Using a String Name (Visual Basic) | Microsoft Docs</source>
          <target state="translated">Llamar a una propiedad o método mediante un nombre de cadena (Visual Basic) | Documentos de Microsoft</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Calling a Property or Method Using a String Name (Visual Basic)</source>
          <target state="translated">Llamar a una propiedad o método mediante un nombre de cadena (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>In most cases, you can discover the properties and methods of an object at design time, and write code to handle them.</source>
          <target state="translated">En la mayoría de los casos, puede descubrir las propiedades y métodos de un objeto en tiempo de diseño y escribir código para controlarlos.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>However, in some cases you may not know about an object's properties and methods in advance, or you may just want the flexibility of enabling an end user to specify properties or execute methods at run time.</source>
          <target state="translated">Sin embargo, en algunos casos puede no conocer acerca de los métodos y propiedades de un objeto de antemano o simplemente puede querer flexibilidad de la habilitación de un usuario final que especifique propiedades o ejecute métodos en tiempo de ejecución.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>CallByName Function</source>
          <target state="translated">CallByName (función)</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Consider, for example, a client application that evaluates expressions entered by the user by passing an operator to a COM component.</source>
          <target state="translated">Considere, por ejemplo, una aplicación cliente que evalúe expresiones escritas por el usuario pasando un operador a un componente COM.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Suppose you are constantly adding new functions to the component that require new operators.</source>
          <target state="translated">Suponga que está agregando constantemente funciones nuevas al componente que requiere operadores nuevos.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>When you use standard object access techniques, you must recompile and redistribute the client application before it could use the new operators.</source>
          <target state="translated">Cuando se usa técnicas de acceso a objetos estándar, debe volver a compilar y distribuir la aplicación cliente antes de poder utilizar los operadores nuevos.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>To avoid this, you can use the <ph id="ph1">`CallByName`</ph> function to pass the new operators as strings, without changing the application.</source>
          <target state="translated">Para evitar esto, puede utilizar el <ph id="ph1">`CallByName`</ph> función para pasar los operadores nuevos como cadenas, sin modificar la aplicación.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CallByName`</ph> function lets you use a string to specify a property or method at run time.</source>
          <target state="translated">El <ph id="ph1">`CallByName`</ph> función le permite utilizar una cadena para especificar una propiedad o método en tiempo de ejecución.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The signature for the <ph id="ph1">`CallByName`</ph> function looks like this:</source>
          <target state="translated">La firma para el <ph id="ph1">`CallByName`</ph> función tiene el siguiente aspecto:</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Result<ept id="p1">*</ept><ph id="ph1"> = </ph><ph id="ph2">`CallByName`</ph>(<bpt id="p2">*</bpt>Object<ept id="p2">*</ept>, <bpt id="p3">*</bpt>ProcedureName<ept id="p3">*</ept>, <bpt id="p4">*</bpt>CallType<ept id="p4">*</ept>, <bpt id="p5">*</bpt>Arguments<ept id="p5">*</ept>())</source>
          <target state="translated"><bpt id="p1">*</bpt>Result<ept id="p1">*</ept><ph id="ph1"> = </ph><ph id="ph2">`CallByName`</ph>(<bpt id="p2">*</bpt>Object<ept id="p2">*</ept>, <bpt id="p3">*</bpt>ProcedureName<ept id="p3">*</ept>, <bpt id="p4">*</bpt>CallType<ept id="p4">*</ept>, <bpt id="p5">*</bpt>Arguments<ept id="p5">*</ept>())</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The first argument, <bpt id="p1">*</bpt>Object<ept id="p1">*</ept>, takes the name of the object you want to act upon.</source>
          <target state="translated">El primer argumento, <bpt id="p1">*</bpt>objeto<ept id="p1">*</ept>, toma el nombre del objeto que desea actuar.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>ProcedureName<ept id="p1">*</ept> argument takes a string that contains the name of the method or property procedure to be invoked.</source>
          <target state="translated">El <bpt id="p1">*</bpt>nombreProcedimiento<ept id="p1">*</ept> argumento toma una cadena que contiene el nombre del procedimiento que se debe invocar método o propiedad.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>CallType<ept id="p1">*</ept> argument takes a constant that represents the type of procedure to invoke: a method (<ph id="ph1">`Microsoft.VisualBasic.CallType.Method`</ph>), a property read (<ph id="ph2">`Microsoft.VisualBasic.CallType.Get`</ph>), or a property set (<ph id="ph3">`Microsoft.VisualBasic.CallType.Set`</ph>).</source>
          <target state="translated">El <bpt id="p1">*</bpt>CallType<ept id="p1">*</ept> argumento toma una constante que representa el tipo de procedimiento que debe invocarse: un método (<ph id="ph1">`Microsoft.VisualBasic.CallType.Method`</ph>), una lectura de propiedad (<ph id="ph2">`Microsoft.VisualBasic.CallType.Get`</ph>), o un conjunto de propiedades (<ph id="ph3">`Microsoft.VisualBasic.CallType.Set`</ph>).</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>Arguments<ept id="p1">*</ept> argument, which is optional, takes an array of type <ph id="ph1">`Object`</ph> that contains any arguments to the procedure.</source>
          <target state="translated">El <bpt id="p1">*</bpt>argumentos<ept id="p1">*</ept> argumento, que es opcional, toma una matriz de tipo <ph id="ph1">`Object`</ph> que contiene los argumentos para el procedimiento.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You can use <ph id="ph1">`CallByName`</ph> with classes in your current solution, but it is most often used to access COM objects or objects from <ph id="ph2">[!INCLUDE[dnprdnshort](../../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph> assemblies.</source>
          <target state="translated">Puede usar <ph id="ph1">`CallByName`</ph> con clases en la solución actual, pero que se suele utilizar para tener acceso a objetos COM o los objetos de <ph id="ph2">[!INCLUDE[dnprdnshort](../../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph> ensamblados.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Suppose you add a reference to an assembly that contains a class named <ph id="ph1">`MathClass`</ph>, which has a new function named <ph id="ph2">`SquareRoot`</ph>, as shown in the following code:</source>
          <target state="translated">Supongamos que se agrega una referencia a un ensamblado que contiene una clase denominada <ph id="ph1">`MathClass`</ph>, que tiene una nueva función denominada <ph id="ph2">`SquareRoot`</ph>, como se muestra en el código siguiente:</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrOOP#53<ept id="p2">](../../../../visual-basic/misc/codesnippet/VisualBasic/calling-a-property-or-method-using-a-string-name_1.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrOOP nº&amp;53;<ept id="p2">](../../../../visual-basic/misc/codesnippet/VisualBasic/calling-a-property-or-method-using-a-string-name_1.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Your application could use text box controls to control which method will be called and its arguments.</source>
          <target state="translated">La aplicación podría utilizar controles de cuadro de texto al control de qué método se llamará y sus argumentos.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For example, if <ph id="ph1">`TextBox1`</ph> contains the expression to be evaluated, and <ph id="ph2">`TextBox2`</ph> is used to enter the name of the function, you can use the following code to invoke the <ph id="ph3">`SquareRoot`</ph> function on the expression in <ph id="ph4">`TextBox1`</ph>:</source>
          <target state="translated">Por ejemplo, si <ph id="ph1">`TextBox1`</ph> contiene la expresión que se evalúa, y <ph id="ph2">`TextBox2`</ph> es utilizado para escribir el nombre de la función, puede usar el siguiente código para invocar la <ph id="ph3">`SquareRoot`</ph> (función) en la expresión <ph id="ph4">`TextBox1`</ph>:</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrOOP#54<ept id="p2">](../../../../visual-basic/misc/codesnippet/VisualBasic/calling-a-property-or-method-using-a-string-name_2.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrOOP&amp;#54;<ept id="p2">](../../../../visual-basic/misc/codesnippet/VisualBasic/calling-a-property-or-method-using-a-string-name_2.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If you enter "64" in <ph id="ph1">`TextBox1`</ph>, "SquareRoot" in <ph id="ph2">`TextBox2`</ph>, and then call the <ph id="ph3">`CallMath`</ph> procedure, the square root of the number in <ph id="ph4">`TextBox1`</ph> is evaluated.</source>
          <target state="translated">Si escribe "64" en <ph id="ph1">`TextBox1`</ph>, "SquareRoot" en <ph id="ph2">`TextBox2`</ph>y, a continuación, llame a la <ph id="ph3">`CallMath`</ph> procedimiento, la raíz cuadrada del número de <ph id="ph4">`TextBox1`</ph> se evalúa.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The code in the example invokes the <ph id="ph1">`SquareRoot`</ph> function (which takes a string that contains the expression to be evaluated as a required argument) and returns "8" in <ph id="ph2">`TextBox1`</ph> (the square root of 64).</source>
          <target state="translated">El código del ejemplo invoca la <ph id="ph1">`SquareRoot`</ph> función (que toma una cadena que contiene la expresión que se evalúa como un argumento requerido) y devuelve "8" en <ph id="ph2">`TextBox1`</ph> (la raíz cuadrada de 64).</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Of course, if the user enters an invalid string in <ph id="ph1">`TextBox2`</ph>, if the string contains the name of a property instead of a method, or if the method had an additional required argument, a run-time error occurs.</source>
          <target state="translated">Por supuesto, si el usuario escribe una cadena no válida en <ph id="ph1">`TextBox2`</ph>si la cadena contiene el nombre de una propiedad en lugar de un método, o si el método tiene un argumento necesario adicional, se produce un error de tiempo de ejecución.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You have to add robust error-handling code when you use <ph id="ph1">`CallByName`</ph> to anticipate these or any other errors.</source>
          <target state="translated">Tendrá que agregar código de control de errores sólido cuando use <ph id="ph1">`CallByName`</ph> para anticipar estos errores u otros.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>While the <ph id="ph1">`CallByName`</ph> function may be useful in some cases, you must weigh its usefulness against the performance implications — using <ph id="ph2">`CallByName`</ph> to invoke a procedure is slightly slower than a late-bound call.</source>
          <target state="translated">Mientras el <ph id="ph1">`CallByName`</ph> función puede resultar útil en algunos casos, debe sopesar su utilidad frente a las implicaciones de rendimiento: uso <ph id="ph2">`CallByName`</ph> invocar un procedimiento es ligeramente más lenta que una llamada en tiempo de ejecución.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>If you are invoking a function that is called repeatedly, such as inside a loop, <ph id="ph1">`CallByName`</ph> can have a severe effect on performance.</source>
          <target state="translated">Si invoca una función que se llama repetidamente, como dentro de un bucle, <ph id="ph1">`CallByName`</ph> puede tener un efecto grave en el rendimiento.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">Vea también</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>&lt;xref:Microsoft.VisualBasic.Interaction.CallByName%2A&gt;</source>
          <target state="translated">&lt;xref:Microsoft.VisualBasic.Interaction.CallByName%2A&gt;&lt;/xref:Microsoft.VisualBasic.Interaction.CallByName%2A&gt;</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Determining Object Type<ept id="p1">](../../../../visual-basic/programming-guide/language-features/early-late-binding/determining-object-type.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>Determinación del tipo de objeto<ept id="p1">](../../../../visual-basic/programming-guide/language-features/early-late-binding/determining-object-type.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>