<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">324e2a906e84950aa9019bbf68a524458492646e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\covariance-contravariance\creating-variant-generic-interfaces.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4748efc2272cea31453c707fd4ca5824c125559e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4c9fa8213011d5c7ad80a87da806939ef200db19</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Creating Variant Generic Interfaces (Visual Basic) | Microsoft Docs</source>
          <target state="translated">Crear Interfaces genéricas variantes (Visual Basic) | Documentos de Microsoft</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Creating Variant Generic Interfaces (Visual Basic)</source>
          <target state="translated">Crear Interfaces genéricas variantes (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You can declare generic type parameters in interfaces as covariant or contravariant.</source>
          <target state="translated">Puede declarar los parámetros de tipo genérico en interfaces como covariante o contravariante.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Covariance<ept id="p1">*</ept> allows interface methods to have more derived return types than that defined by the generic type parameters.</source>
          <target state="translated"><bpt id="p1">*</bpt>Covarianza<ept id="p1">*</ept> permite que los métodos de interfaz tengan tipos más derivados devueltos al definido por los parámetros de tipo genérico.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Contravariance<ept id="p1">*</ept> allows interface methods to have argument types that are less derived than that specified by the generic parameters.</source>
          <target state="translated"><bpt id="p1">*</bpt>Contravarianza<ept id="p1">*</ept> permite que los métodos de interfaz tengan tipos de argumento menos derivados que el especificado por los parámetros genéricos.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>A generic interface that has covariant or contravariant generic type parameters is called <bpt id="p1">*</bpt>variant<ept id="p1">*</ept>.</source>
          <target state="translated">Una interfaz genérica con covariantes o contravariantes los parámetros de tipo genérico se llama <bpt id="p1">*</bpt>variante<ept id="p1">*</ept>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>.NET Framework 4 introduced variance support for several existing generic interfaces.</source>
          <target state="translated">.NET framework 4 introdujo la compatibilidad con la varianza para varias interfaces genéricas existentes.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For the list of the variant interfaces in the .NET Framework, see <bpt id="p1">[</bpt>Variance in Generic Interfaces (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/covariance-contravariance/variance-in-generic-interfaces.md)</ept>.</source>
          <target state="translated">La lista de las interfaces variantes de .NET Framework, vea <bpt id="p1">[</bpt>varianza en Interfaces genéricas (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/covariance-contravariance/variance-in-generic-interfaces.md)</ept>.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Declaring Variant Generic Interfaces</source>
          <target state="translated">Declarar Interfaces genéricas variantes</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You can declare variant generic interfaces by using the <ph id="ph1">`in`</ph> and <ph id="ph2">`out`</ph> keywords for generic type parameters.</source>
          <target state="translated">Puede declarar interfaces genéricas variantes mediante la <ph id="ph1">`in`</ph> y <ph id="ph2">`out`</ph> palabras clave para los parámetros de tipo genérico.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><ph id="ph1"> `ByRef`</ph> parameters in Visual Basic cannot be variant.</source>
          <target state="translated"><ph id="ph1"> `ByRef`</ph>en Visual Basic no pueden ser variant.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Value types also do not support variance.</source>
          <target state="translated">También los tipos de valor no admiten la varianza.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You can declare a generic type parameter covariant by using the <ph id="ph1">`out`</ph> keyword.</source>
          <target state="translated">Puede declarar un parámetro de tipo genérico covariante mediante el <ph id="ph1">`out`</ph> (palabra clave).</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The covariant type must satisfy the following conditions:</source>
          <target state="translated">El tipo covariante debe cumplir las condiciones siguientes:</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The type is used only as a return type of interface methods and not used as a type of method arguments.</source>
          <target state="translated">El tipo se utiliza únicamente como un tipo de valor devuelto de los métodos de interfaz y no se utiliza como un tipo de argumentos de método.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This is illustrated in the following example, in which the type <ph id="ph1">`R`</ph> is declared covariant.</source>
          <target state="translated">Esto se ilustra en el ejemplo siguiente, en el que el tipo <ph id="ph1">`R`</ph> se declara como covariante.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>There is one exception to this rule.</source>
          <target state="translated">Hay una excepción para esta regla.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If you have a contravariant generic delegate as a method parameter, you can use the type as a generic type parameter for the delegate.</source>
          <target state="translated">Si tiene un delegado genérico contravariante como parámetro de método, puede usar el tipo como un parámetro de tipo genérico para el delegado.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This is illustrated by the type <ph id="ph1">`R`</ph> in the following example.</source>
          <target state="translated">Esto se ilustra en el tipo <ph id="ph1">`R`</ph> en el ejemplo siguiente.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Variance in Delegates (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/covariance-contravariance/variance-in-delegates.md)</ept> and <bpt id="p2">[</bpt>Using Variance for Func and Action Generic Delegates (Visual Basic)<ept id="p2">](../../../../visual-basic/programming-guide/concepts/covariance-contravariance/using-variance-for-func-and-action-generic-delegates.md)</ept>.</source>
          <target state="translated">Para obtener más información, consulte <bpt id="p1">[</bpt>varianza en delegados (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/covariance-contravariance/variance-in-delegates.md)</ept> y <bpt id="p2">[</bpt>Using Variance for Func y Action Generic Delegates (Visual Basic)<ept id="p2">](../../../../visual-basic/programming-guide/concepts/covariance-contravariance/using-variance-for-func-and-action-generic-delegates.md)</ept>.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The type is not used as a generic constraint for the interface methods.</source>
          <target state="translated">El tipo no se usa como restricción genérica para los métodos de interfaz.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This is illustrated in the following code.</source>
          <target state="translated">Esto se muestra en el código siguiente.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You can declare a generic type parameter contravariant by using the <ph id="ph1">`in`</ph> keyword.</source>
          <target state="translated">Puede declarar una contravariante del parámetro de tipo genérico mediante la <ph id="ph1">`in`</ph> (palabra clave).</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The contravariant type can be used only as a type of method arguments and not as a return type of interface methods.</source>
          <target state="translated">El tipo contravariante puede usarse solo como un tipo de argumentos de método y no como un tipo de valor devuelto de los métodos de interfaz.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The contravariant type can also be used for generic constraints.</source>
          <target state="translated">El tipo contravariante puede utilizarse también para restricciones genéricas.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The following code shows how to declare a contravariant interface and use a generic constraint for one of its methods.</source>
          <target state="translated">El código siguiente muestra cómo declarar una interfaz contravariante y usar una restricción genérica para uno de sus métodos.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>It is also possible to support both covariance and contravariance in the same interface, but for different type parameters, as shown in the following code example.</source>
          <target state="translated">También es posible admitir la covarianza y contravarianza en la misma interfaz, pero para distintos parámetros de tipo, como se muestra en el ejemplo de código siguiente.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In Visual Basic, you can't declare events in variant interfaces without specifying the delegate type.</source>
          <target state="translated">En Visual Basic, no puede declarar eventos en interfaces variantes sin especificar el tipo de delegado.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Also, a variant interface can't have nested classes, enums, or structures, but it can have nested interfaces.</source>
          <target state="translated">Además, una interfaz variante no puede tener anidadas clases, enumeraciones o estructuras, pero pueden interfaces anidadas.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This is illustrated in the following code.</source>
          <target state="translated">Esto se muestra en el código siguiente.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Implementing Variant Generic Interfaces</source>
          <target state="translated">Implementar Interfaces genéricas variantes</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You implement variant generic interfaces in classes by using the same syntax that is used for invariant interfaces.</source>
          <target state="translated">Implementar interfaces genéricas variantes en clases mediante la misma sintaxis que se utiliza para las interfaces invariables.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The following code example shows how to implement a covariant interface in a generic class.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra cómo implementar una interfaz covariante en una clase genérica.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Classes that implement variant interfaces are invariant.</source>
          <target state="translated">Las clases que implementan interfaces variantes son invariables.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For example, consider the following code.</source>
          <target state="translated">Por ejemplo, considere el fragmento de código siguiente:</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Extending Variant Generic Interfaces</source>
          <target state="translated">Extender Interfaces genéricas variantes</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>When you extend a variant generic interface, you have to use the <ph id="ph1">`in`</ph> and <ph id="ph2">`out`</ph> keywords to explicitly specify whether the derived interface supports variance.</source>
          <target state="translated">Al extender una interfaz genérica variante, tiene que usar el <ph id="ph1">`in`</ph> y <ph id="ph2">`out`</ph> palabras clave para especificar de forma explícita si la interfaz derivada admite la varianza.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The compiler does not infer the variance from the interface that is being extended.</source>
          <target state="translated">El compilador no infiere la varianza de la interfaz que se va a extender.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For example, consider the following interfaces.</source>
          <target state="translated">Por ejemplo, considere las siguientes interfaces.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">`Invariant(Of T)`</ph> interface, the generic type parameter <ph id="ph2">`T`</ph> is invariant, whereas in <ph id="ph3">`IExtCovariant (Of Out T)`</ph>the type parameter is covariant, although both interfaces extend the same interface.</source>
          <target state="translated">En el <ph id="ph1">`Invariant(Of T)`</ph> de la interfaz, el parámetro de tipo genérico <ph id="ph2">`T`</ph> es invariable, mientras que en <ph id="ph3">`IExtCovariant (Of Out T)`</ph>el parámetro de tipo es covariante, si bien ambas interfaces extienden la misma interfaz.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The same rule is applied to contravariant generic type parameters.</source>
          <target state="translated">La misma regla se aplica a los parámetros de tipo genérico contravariante.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>You can create an interface that extends both the interface where the generic type parameter <ph id="ph1">`T`</ph> is covariant and the interface where it is contravariant if in the extending interface the generic type parameter <ph id="ph2">`T`</ph> is invariant.</source>
          <target state="translated">Puede crear una interfaz que extiende la interfaz donde el parámetro de tipo genérico <ph id="ph1">`T`</ph> es covariante y el parámetro de tipo genérico de la interfaz donde es contravariante si en la que se extiende la interfaz <ph id="ph2">`T`</ph> es invariable.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This is illustrated in the following code example.</source>
          <target state="translated">Esto se muestra en el ejemplo de código siguiente.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>However, if a generic type parameter <ph id="ph1">`T`</ph> is declared covariant in one interface, you cannot declare it contravariant in the extending interface, or vice versa.</source>
          <target state="translated">Sin embargo, si un parámetro de tipo genérico <ph id="ph1">`T`</ph> es declarada covariante en una interfaz, no puede declarar como contravariante en la interfaz extensible, o viceversa.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This is illustrated in the following code example.</source>
          <target state="translated">Esto se muestra en el ejemplo de código siguiente.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Avoiding Ambiguity</source>
          <target state="translated">Evitar la ambigüedad</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>When you implement variant generic interfaces, variance can sometimes lead to ambiguity.</source>
          <target state="translated">Al implementar interfaces genéricas variantes, la varianza a veces puede provocar ambigüedad.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>This should be avoided.</source>
          <target state="translated">Éste debería evitarse.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For example, if you explicitly implement the same variant generic interface with different generic type parameters in one class, it can create ambiguity.</source>
          <target state="translated">Por ejemplo, si se implementa explícitamente la misma interfaz genérica variante con parámetros de tipo genérico diferente en una clase, puede crear ambigüedad.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The compiler does not produce an error in this case, but it is not specified which interface implementation will be chosen at runtime.</source>
          <target state="translated">El compilador no genera un error en este caso, pero no se especifica la implementación de interfaz se elegirá en tiempo de ejecución.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>This could lead to subtle bugs in your code.</source>
          <target state="translated">Esto podría provocar errores imperceptibles en el código.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Consider the following code example.</source>
          <target state="translated">Considere el ejemplo de código siguiente.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>With <ph id="ph1">`Option Strict Off`</ph>, Visual Basic generates a compiler warning when there is an ambiguous interface implementation.</source>
          <target state="translated">Con <ph id="ph1">`Option Strict Off`</ph>, Visual Basic genera una advertencia de compilador cuando hay una implementación de interfaz ambigua.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>With <ph id="ph1">`Option Strict On`</ph>, Visual Basic generates a compiler error.</source>
          <target state="translated">Con <ph id="ph1">`Option Strict On`</ph>, Visual Basic genera un error del compilador.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>In this example, it is unspecified how the <ph id="ph1">`pets.GetEnumerator`</ph> method chooses between <ph id="ph2">`Cat`</ph> and <ph id="ph3">`Dog`</ph>.</source>
          <target state="translated">En este ejemplo, se especifica cómo el <ph id="ph1">`pets.GetEnumerator`</ph> método elige entre <ph id="ph2">`Cat`</ph> y <ph id="ph3">`Dog`</ph>.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>This could cause problems in your code.</source>
          <target state="translated">Esto podría producir problemas en el código.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">Vea también</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Variance in Generic Interfaces (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/covariance-contravariance/variance-in-generic-interfaces.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Varianza en Interfaces genéricas (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/covariance-contravariance/variance-in-generic-interfaces.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Using Variance for Func and Action Generic Delegates (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/covariance-contravariance/using-variance-for-func-and-action-generic-delegates.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>Usar la varianza para Func y Action Generic Delegates (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/covariance-contravariance/using-variance-for-func-and-action-generic-delegates.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>