<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">166eb731d41e009c374ba55f929eed302793ecd0</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\linq\how-to-add-custom-methods-for-linq-queries.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1c2cbf6a624a9d2a49c5809ca6c2ec5b88dc5754</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bab00aae8047bb822ef597b4b3557b0809db7cad</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Add Custom Methods for LINQ Queries (Visual Basic) | Microsoft Docs</source>
          <target state="translated">Cómo: agregar métodos personalizados para las consultas LINQ (Visual Basic) | Documentos de Microsoft</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Add Custom Methods for LINQ Queries (Visual Basic)</source>
          <target state="translated">Cómo: agregar métodos personalizados para las consultas LINQ (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You can extend the set of methods that you can use for LINQ queries by adding extension methods to the &lt;xref:System.Collections.Generic.IEnumerable%601&gt; interface.</source>
          <target state="translated">Puede extender el conjunto de métodos que puede utilizar para las consultas LINQ agregando métodos de extensión para el &lt;xref:System.Collections.Generic.IEnumerable%601&gt;interfaz.&lt;/xref:System.Collections.Generic.IEnumerable%601&gt;</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For example, in addition to the standard average or maximum operations, you can create a custom aggregate method to compute a single value from a sequence of values.</source>
          <target state="translated">Por ejemplo, además de la media estándar o el número máximo de operaciones, puede crear un método de agregación personalizado para calcular un valor único de una secuencia de valores.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You can also create a method that works as a custom filter or a specific data transform for a sequence of values and returns a new sequence.</source>
          <target state="translated">También puede crear un método que funciona como un filtro personalizado o transformación de datos específica para una secuencia de valores y devuelve una nueva secuencia.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Examples of such methods are &lt;xref:System.Linq.Enumerable.Distinct%2A&gt;, &lt;xref:System.Linq.Enumerable.Skip%2A&gt;, and &lt;xref:System.Linq.Enumerable.Reverse%2A&gt;.</source>
          <target state="translated">Ejemplos de tales métodos son &lt;xref:System.Linq.Enumerable.Distinct%2A&gt;, &lt;xref:System.Linq.Enumerable.Skip%2A&gt;y &lt;xref:System.Linq.Enumerable.Reverse%2A&gt;.&lt;/xref:System.Linq.Enumerable.Reverse%2A&gt; &lt;/xref:System.Linq.Enumerable.Skip%2A&gt; &lt;/xref:System.Linq.Enumerable.Distinct%2A&gt;</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>When you extend the &lt;xref:System.Collections.Generic.IEnumerable%601&gt; interface, you can apply your custom methods to any enumerable collection.</source>
          <target state="translated">Si extiende el &lt;xref:System.Collections.Generic.IEnumerable%601&gt;interfaz, puede aplicar los métodos personalizados a cualquier colección enumerable.&lt;/xref:System.Collections.Generic.IEnumerable%601&gt;</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Extension Methods<ept id="p1">](../../../../visual-basic/programming-guide/language-features/procedures/extension-methods.md)</ept>.</source>
          <target state="translated">Para obtener más información, consulte <bpt id="p1">[</bpt>métodos de extensión<ept id="p1">](../../../../visual-basic/programming-guide/language-features/procedures/extension-methods.md)</ept>.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Adding an Aggregate Method</source>
          <target state="translated">Agregar un método de agregación</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>An aggregate method computes a single value from a set of values.</source>
          <target state="translated">Un método de agregación calcula un valor único de un conjunto de valores.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>LINQ provides several aggregate methods, including &lt;xref:System.Linq.Enumerable.Average%2A&gt;, &lt;xref:System.Linq.Enumerable.Min%2A&gt;, and &lt;xref:System.Linq.Enumerable.Max%2A&gt;.</source>
          <target state="translated">LINQ proporciona varios métodos de agregación, incluidos &lt;xref:System.Linq.Enumerable.Average%2A&gt;, &lt;xref:System.Linq.Enumerable.Min%2A&gt;y &lt;xref:System.Linq.Enumerable.Max%2A&gt;.&lt;/xref:System.Linq.Enumerable.Max%2A&gt; &lt;/xref:System.Linq.Enumerable.Min%2A&gt; &lt;/xref:System.Linq.Enumerable.Average%2A&gt;</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You can create your own aggregate method by adding an extension method to the &lt;xref:System.Collections.Generic.IEnumerable%601&gt; interface.</source>
          <target state="translated">Puede crear su propio método de agregación agregando un método de extensión para el &lt;xref:System.Collections.Generic.IEnumerable%601&gt;interfaz.&lt;/xref:System.Collections.Generic.IEnumerable%601&gt;</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The following code example shows how to create an extension method called <ph id="ph1">`Median`</ph> to compute a median for a sequence of numbers of type <ph id="ph2">`double`</ph>.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra cómo crear un método de extensión denominado <ph id="ph1">`Median`</ph> para calcular el valor medio de una secuencia de números de tipo <ph id="ph2">`double`</ph>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You call this extension method for any enumerable collection in the same way you call other aggregate methods from the &lt;xref:System.Collections.Generic.IEnumerable%601&gt; interface.</source>
          <target state="translated">Llamar a este método de extensión para cualquier colección enumerable de la misma manera que se llama a otros métodos de agregación de la &lt;xref:System.Collections.Generic.IEnumerable%601&gt;interfaz.&lt;/xref:System.Collections.Generic.IEnumerable%601&gt;</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In Visual Basic, you can either use a method call or standard query syntax for the <ph id="ph1">`Aggregate`</ph> or <ph id="ph2">`Group By`</ph> clause.</source>
          <target state="translated">En Visual Basic, puede usar una llamada de método o sintaxis de consulta estándar para la <ph id="ph1">`Aggregate`</ph> o <ph id="ph2">`Group By`</ph> cláusula.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Aggregate Clause<ept id="p1">](../../../../visual-basic/language-reference/queries/aggregate-clause.md)</ept> and <bpt id="p2">[</bpt>Group By Clause<ept id="p2">](../../../../visual-basic/language-reference/queries/group-by-clause.md)</ept>.</source>
          <target state="translated">Para obtener más información, consulte <bpt id="p1">[</bpt>cláusula Aggregate<ept id="p1">](../../../../visual-basic/language-reference/queries/aggregate-clause.md)</ept> y <bpt id="p2">[</bpt>Group By Clause<ept id="p2">](../../../../visual-basic/language-reference/queries/group-by-clause.md)</ept>.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The following code example shows how to use the <ph id="ph1">`Median`</ph> method for an array of type <ph id="ph2">`double`</ph>.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra cómo utilizar el <ph id="ph1">`Median`</ph> método para una matriz de tipo <ph id="ph2">`double`</ph>.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>1<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>1<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>2<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>2<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Overloading an Aggregate Method to Accept Various Types</source>
          <target state="translated">La sobrecarga de un método de agregación para que acepte varios tipos</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You can overload your aggregate method so that it accepts sequences of various types.</source>
          <target state="translated">Puede sobrecargar el método de agregación para que acepte secuencias de varios tipos.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The standard approach is to create an overload for each type.</source>
          <target state="translated">El enfoque estándar es crear una sobrecarga para cada tipo.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Another approach is to create an overload that will take a generic type and convert it to a specific type by using a delegate.</source>
          <target state="translated">Otro enfoque consiste en crear una sobrecarga que tomará un tipo genérico y convertirlo a un tipo específico mediante un delegado.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>You can also combine both approaches.</source>
          <target state="translated">También puede combinar ambos enfoques.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>To create an overload for each type</source>
          <target state="translated">Para crear una sobrecarga para cada tipo</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You can create a specific overload for each type that you want to support.</source>
          <target state="translated">Puede crear una sobrecarga específica para cada tipo que desea admitir.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The following code example shows an overload of the <ph id="ph1">`Median`</ph> method for the <ph id="ph2">`integer`</ph> type.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra una sobrecarga de la <ph id="ph1">`Median`</ph> método para el <ph id="ph2">`integer`</ph> tipo.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>3<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>3<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You can now call the <ph id="ph1">`Median`</ph> overloads for both <ph id="ph2">`integer`</ph> and <ph id="ph3">`double`</ph> types, as shown in the following code:</source>
          <target state="translated">Ahora puede llamar a la <ph id="ph1">`Median`</ph> sobrecargas para ambos <ph id="ph2">`integer`</ph> y <ph id="ph3">`double`</ph> tipos, como se muestra en el código siguiente:</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>4<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>4<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>5<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>5<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>6<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>6<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>To create a generic overload</source>
          <target state="translated">Para crear una sobrecarga genérica</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>You can also create an overload that accepts a sequence of generic objects.</source>
          <target state="translated">También puede crear una sobrecarga que acepta una secuencia de objetos genéricos.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This overload takes a delegate as a parameter and uses it to convert a sequence of objects of a generic type to a specific type.</source>
          <target state="translated">Esta sobrecarga toma a un delegado como parámetro y lo usa para convertir una secuencia de objetos de un tipo genérico en un tipo específico.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The following code shows an overload of the <ph id="ph1">`Median`</ph> method that takes the &lt;xref:System.Func%602&gt; delegate as a parameter.</source>
          <target state="translated">El código siguiente muestra una sobrecarga de la <ph id="ph1">`Median`</ph> método que toma el &lt;xref:System.Func%602&gt;delegado como parámetro.&lt;/xref:System.Func%602&gt;</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This delegate takes an object of generic type T and returns an object of type <ph id="ph1">`double`</ph>.</source>
          <target state="translated">Este delegado toma un objeto de tipo genérico T y devuelve un objeto del tipo <ph id="ph1">`double`</ph>.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>You can now call the <ph id="ph1">`Median`</ph> method for a sequence of objects of any type.</source>
          <target state="translated">Ahora puede llamar a la <ph id="ph1">`Median`</ph> método para una secuencia de objetos de cualquier tipo.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If the type does not have its own method overload, you have to pass a delegate parameter.</source>
          <target state="translated">Si el tipo no tiene su propia sobrecarga de método, tiene que pasar un parámetro de delegado.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>In Visual Basic, you can use a lambda expression for this purpose.</source>
          <target state="translated">En Visual Basic, puede usar una expresión lambda para este propósito.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Also, if you use the <ph id="ph1">`Aggregate`</ph> or <ph id="ph2">`Group By`</ph> clause instead of the method call, you can pass any value or expression that is in the scope this clause.</source>
          <target state="translated">Además, si utiliza la <ph id="ph1">`Aggregate`</ph> o <ph id="ph2">`Group By`</ph> cláusula en lugar de la llamada al método, se puede pasar cualquier valor o expresión que está en el ámbito de esta cláusula.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The following example code shows how to call the <ph id="ph1">`Median`</ph> method for an array of integers and an array of strings.</source>
          <target state="translated">El ejemplo de código siguiente muestra cómo llamar a la <ph id="ph1">`Median`</ph> método para una matriz de enteros y una matriz de cadenas.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For strings, the median for the lengths of strings in the array is calculated.</source>
          <target state="translated">Para las cadenas, se calcula la media de las longitudes de cadenas en la matriz.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The example shows how to pass the &lt;xref:System.Func%602&gt; delegate parameter to the <ph id="ph1">`Median`</ph> method for each case.</source>
          <target state="translated">En el ejemplo se muestra cómo pasar la &lt;xref:System.Func%602&gt;delegar el parámetro para el <ph id="ph1">`Median`</ph> método para cada caso.&lt;/xref:System.Func%602&gt;</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>8<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>8<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Adding a Method That Returns a Collection</source>
          <target state="translated">Agregar un método que devuelve una colección</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>You can extend the &lt;xref:System.Collections.Generic.IEnumerable%601&gt; interface with a custom query method that returns a sequence of values.</source>
          <target state="translated">Puede ampliar el &lt;xref:System.Collections.Generic.IEnumerable%601&gt;interfaz con un método de consulta personalizado que devuelve una secuencia de valores.&lt;/xref:System.Collections.Generic.IEnumerable%601&gt;</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>In this case, the method must return a collection of type &lt;xref:System.Collections.Generic.IEnumerable%601&gt;.</source>
          <target state="translated">En este caso, el método debe devolver una colección de tipo &lt;xref:System.Collections.Generic.IEnumerable%601&gt;.&lt;/xref:System.Collections.Generic.IEnumerable%601&gt;</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Such methods can be used to apply filters or data transforms to a sequence of values.</source>
          <target state="translated">Estos métodos se pueden utilizar para aplicar filtros o transformaciones de datos a una secuencia de valores.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The following example shows how to create an extension method named <ph id="ph1">`AlternateElements`</ph> that returns every other element in a collection, starting from the first element.</source>
          <target state="translated">En el ejemplo siguiente se muestra cómo crear un método de extensión denominado <ph id="ph1">`AlternateElements`</ph> que devuelve todos los demás elementos de una colección, empezando por el primer elemento.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>9<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>9<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>You can call this extension method for any enumerable collection just as you would call other methods from the &lt;xref:System.Collections.Generic.IEnumerable%601&gt; interface, as shown in the following code:</source>
          <target state="translated">Se puede llamar a este método de extensión para cualquier colección enumerable tal como se llamaría a otros métodos de la &lt;xref:System.Collections.Generic.IEnumerable%601&gt;interfaz, como se muestra en el siguiente código:&lt;/xref:System.Collections.Generic.IEnumerable%601&gt;</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">Vea también</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</source>
          <target state="translated">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;&lt;/xref:System.Collections.Generic.IEnumerable%601&gt;</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Extension Methods<ept id="p1">](../../../../visual-basic/programming-guide/language-features/procedures/extension-methods.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>Métodos de extensión<ept id="p1">](../../../../visual-basic/programming-guide/language-features/procedures/extension-methods.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>