<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f35e42e29e316fe1610a011263aa68e622fb95a5</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\linq\how-to-perform-streaming-transform-of-large-xml-documents.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0dc209548ef6d8c29adcf46180a36b3e8f97345c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">22a49863a154c40bad5694e6fc122c96d793b37c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Perform Streaming Transform of Large XML Documents (Visual Basic) | Microsoft Docs</source>
          <target state="translated">Cómo: realizar una transformación de transmisión por secuencias de documentos XML grandes (Visual Basic) | Documentos de Microsoft</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Perform Streaming Transform of Large XML Documents (Visual Basic)</source>
          <target state="translated">Cómo: realizar una transformación de transmisión por secuencias de documentos XML grandes (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Sometimes you have to transform large XML files, and write your application so that the memory footprint of the application is predictable.</source>
          <target state="translated">A veces tiene que transformar los archivos XML grandes y escribir la aplicación para que sea predecible la superficie en memoria de la aplicación.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>If you try to populate an XML tree with a very large XML file, your memory usage will be proportional to the size of the file (that is, excessive).</source>
          <target state="translated">Si intenta rellenar un árbol XML con un archivo XML de gran tamaño, su utilización de memoria será proporcional al tamaño del archivo (es decir, excesivo).</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Therefore, you should use a streaming technique instead.</source>
          <target state="translated">Por consiguiente, debe utilizar en su lugar una técnica de transmisión por secuencias.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Streaming techniques are best applied in situations where you need to process the source document only once, and you can process the elements in document order.</source>
          <target state="translated">Las técnicas de transmisión por secuencias se aplican mejor en situaciones en las que el documento de origen solo se debe procesar una vez y se pueden procesar los elementos en el orden del documento.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Certain standard query operators, such as &lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;, iterate their source, collect all of the data, sort it, and then finally yield the first item in the sequence.</source>
          <target state="translated">Estándar de cierto operadores de consulta, como &lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;, recorren en iteración su origen, recaban todos los datos, ordenan y finalmente producen el primer elemento de la secuencia.&lt;/xref:System.Linq.Enumerable.OrderBy%2A&gt;</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Note that if you use a query operator that materializes its source before yielding the first item, you will not retain a small memory footprint for your application.</source>
          <target state="translated">Tenga en cuenta que si utiliza un operador de consulta que materializa su origen antes de producir el primer elemento, no retendrá una superficie de memoria pequeña para la aplicación.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Even if you use the technique described in <bpt id="p1">[</bpt>How to: Stream XML Fragments with Access to Header Information (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/how-to-stream-xml-fragments-with-access-to-header-information.md)</ept>, if you try to assemble an XML tree that contains the transformed document, memory usage will be too great.</source>
          <target state="translated">Incluso si utiliza la técnica descrita en <bpt id="p1">[</bpt>Cómo: transmitir por secuencias fragmentos de XML con acceso a la información de encabezado (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/how-to-stream-xml-fragments-with-access-to-header-information.md)</ept>, si intenta ensamblar un árbol XML que contiene el documento transformado, uso será excesiva de memoria.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>There are two main approaches.</source>
          <target state="translated">Hay dos grandes enfoques.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>One approach is to use the deferred processing characteristics of &lt;xref:System.Xml.Linq.XStreamingElement&gt;.</source>
          <target state="translated">Un enfoque consiste en utilizar las características de procesamiento aplazada de &lt;xref:System.Xml.Linq.XStreamingElement&gt;.&lt;/xref:System.Xml.Linq.XStreamingElement&gt;</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Another approach is to create an &lt;xref:System.Xml.XmlWriter&gt;, and use the capabilities of <ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> to write elements to an &lt;xref:System.Xml.XmlWriter&gt;.</source>
          <target state="translated">Otro enfoque consiste en crear un &lt;xref:System.Xml.XmlWriter&gt;y usar las capacidades de <ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> escribir elementos en una &lt;xref:System.Xml.XmlWriter&gt;.&lt;/xref:System.Xml.XmlWriter&gt; &lt;/xref:System.Xml.XmlWriter&gt;</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This topic demonstrates both approaches.</source>
          <target state="translated">En este tema se muestran ambos enfoques.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Ejemplo</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The following example builds on the example in <bpt id="p1">[</bpt>How to: Stream XML Fragments with Access to Header Information (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/how-to-stream-xml-fragments-with-access-to-header-information.md)</ept>.</source>
          <target state="translated">En el ejemplo siguiente se basa en el ejemplo de <bpt id="p1">[</bpt>Cómo: transmitir por secuencias fragmentos de XML con acceso a la información de encabezado (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/how-to-stream-xml-fragments-with-access-to-header-information.md)</ept>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This example uses the deferred execution capabilities of &lt;xref:System.Xml.Linq.XStreamingElement&gt; to stream the output.</source>
          <target state="translated">Este ejemplo utiliza las funciones de ejecución aplazada de &lt;xref:System.Xml.Linq.XStreamingElement&gt;para transmitir el resultado.&lt;/xref:System.Xml.Linq.XStreamingElement&gt;</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This example can transform a very large document while maintaining a small memory footprint.</source>
          <target state="translated">Este ejemplo puede transformar un documento muy grande a la vez que mantiene una pequeña superficie de memoria.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Note that the custom axis (<ph id="ph1">`StreamCustomerItem`</ph>) is specifically written so that it expects a document that has <ph id="ph2">`Customer`</ph>, <ph id="ph3">`Name`</ph>, and <ph id="ph4">`Item`</ph> elements, and that those elements will be arranged as in the following Source.xml document.</source>
          <target state="translated">Observe que se escribe el eje personalizado (<ph id="ph1">`StreamCustomerItem`</ph>) específicamente para que espere un documento que tiene los elementos <ph id="ph2">`Customer`</ph>, <ph id="ph3">`Name`</ph> e <ph id="ph4">`Item`</ph>, y que esos elementos se organizarán como en el documento Source.xml siguiente.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>A more robust implementation, however, would be prepared to parse an invalid document.</source>
          <target state="translated">No obstante, una implementación más sólida estaría preparada para analizar un documento no válido.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The following is the source document, Source.xml:</source>
          <target state="translated">A continuación, se muestra el documento de origen, Source.xml:</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This code produces the following output:</source>
          <target state="translated">Este código genera el siguiente resultado:</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Ejemplo</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The following example also builds on the example in <bpt id="p1">[</bpt>How to: Stream XML Fragments with Access to Header Information (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/how-to-stream-xml-fragments-with-access-to-header-information.md)</ept>.</source>
          <target state="translated">El ejemplo siguiente también se basa en el ejemplo de <bpt id="p1">[</bpt>Cómo: transmitir por secuencias fragmentos de XML con acceso a la información de encabezado (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/how-to-stream-xml-fragments-with-access-to-header-information.md)</ept>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This example uses the capability of <ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> to write elements to an &lt;xref:System.Xml.XmlWriter&gt;.</source>
          <target state="translated">Este ejemplo utiliza la capacidad de <ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> escribir elementos en una &lt;xref:System.Xml.XmlWriter&gt;.&lt;/xref:System.Xml.XmlWriter&gt;</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This example can transform a very large document while maintaining a small memory footprint.</source>
          <target state="translated">Este ejemplo puede transformar un documento muy grande a la vez que mantiene una pequeña superficie de memoria.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Note that the custom axis (<ph id="ph1">`StreamCustomerItem`</ph>) is specifically written so that it expects a document that has <ph id="ph2">`Customer`</ph>, <ph id="ph3">`Name`</ph>, and <ph id="ph4">`Item`</ph> elements, and that those elements will be arranged as in the following Source.xml document.</source>
          <target state="translated">Observe que se escribe el eje personalizado (<ph id="ph1">`StreamCustomerItem`</ph>) específicamente para que espere un documento que tiene los elementos <ph id="ph2">`Customer`</ph>, <ph id="ph3">`Name`</ph> e <ph id="ph4">`Item`</ph>, y que esos elementos se organizarán como en el documento Source.xml siguiente.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A more robust implementation, however, would either validate the source document with an XSD, or would be prepared to parse an invalid document.</source>
          <target state="translated">Una implementación más sólida, sin embargo, validaría el documento de origen con XSD o se prepararía para analizar un documento no válido.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This example uses the same source document, Source.xml, as the previous example in this topic.</source>
          <target state="translated">Este ejemplo utiliza el mismo documento de origen, Source.xml, que el ejemplo anterior de este tema.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>It also produces exactly the same output.</source>
          <target state="translated">También produce exactamente el mismo resultado.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Using &lt;xref:System.Xml.Linq.XStreamingElement&gt; for streaming the output XML is preferred over writing to an &lt;xref:System.Xml.XmlWriter&gt;.</source>
          <target state="translated">Uso &lt;xref:System.Xml.Linq.XStreamingElement&gt;para transmitir el resultado que XML es preferible de escribir en un &lt;xref:System.Xml.XmlWriter&gt;.&lt;/xref:System.Xml.XmlWriter&gt; &lt;/xref:System.Xml.Linq.XStreamingElement&gt;</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This code produces the following output:</source>
          <target state="translated">Este código genera el siguiente resultado:</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">Vea también</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Advanced LINQ to XML Programming (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/advanced-linq-to-xml-programming.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Avanzada de LINQ to XML Programming (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/advanced-linq-to-xml-programming.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>