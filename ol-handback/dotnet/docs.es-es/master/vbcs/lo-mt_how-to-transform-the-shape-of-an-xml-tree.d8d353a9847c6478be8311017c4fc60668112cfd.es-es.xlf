<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9c71f4af829a395204bc17161547aa5fdd06cbb1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\linq\how-to-transform-the-shape-of-an-xml-tree.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">569c563ee021fb8b1d96a6d6f7a2aa8fc2aaa636</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e03f224523a143bdb27e30a642f38b9cb494fbf6</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Transform the Shape of an XML Tree (Visual Basic) | Microsoft Docs</source>
          <target state="translated">Cómo: transformar la forma de un árbol XML (Visual Basic) | Documentos de Microsoft</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Transform the Shape of an XML Tree (Visual Basic)</source>
          <target state="translated">Cómo: transformar la forma de un árbol XML (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>shape<ept id="p1">*</ept> of an XML document refers to its element names, attribute names, and the characteristics of its hierarchy.</source>
          <target state="translated">El <bpt id="p1">*</bpt>forma<ept id="p1">*</ept> de un documento XML documento hace referencia a sus nombres de elemento, nombres de atributo y las características de su jerarquía.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Sometimes you will have to change the shape of an XML document.</source>
          <target state="translated">A veces, deberá cambiar la forma de un elemento XML.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For example, you might have to send an existing XML document to another system that requires different element and attribute names.</source>
          <target state="translated">Por ejemplo, es posible que deba enviar un documento XML a otro sistema que requiere nombres de elemento y atributo diferentes.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You could go through the document, deleting and renaming elements as required, but using functional construction results in more readable and maintainable code.</source>
          <target state="translated">Podría revisar el documento y eliminar y cambiar el nombre de los elementos necesarios, pero el uso de la construcción funcional proporciona un código más legible y fácil de mantener.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For more information about functional construction, see <bpt id="p1">[</bpt>Functional Construction (LINQ to XML) (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/functional-construction-linq-to-xml.md)</ept>.</source>
          <target state="translated">Para obtener más información acerca de la construcción funcional, vea <bpt id="p1">[</bpt>construcción funcional (LINQ to XML) (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/functional-construction-linq-to-xml.md)</ept>.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The first example changes the organization of the XML document.</source>
          <target state="translated">El primer ejemplo cambia la organización del documento XML.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>It moves complex elements from one location in the tree to another.</source>
          <target state="translated">Mueve los elementos complejos de una ubicación del árbol a otra.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The second example in this topic creates an XML document with a different shape than the source document.</source>
          <target state="translated">El segundo ejemplo de este tema crea un documento XML con una forma diferente a la del documento de origen.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>It changes the casing of the element names, renames some elements, and leaves some elements from the source tree out of the transformed tree.</source>
          <target state="translated">Cambia el uso de mayúsculas y minúsculas de los nombres de elemento, cambia el nombre de algunos elementos y deja algunos de los elementos del árbol de origen fuera del árbol transformado.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Ejemplo</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The following code changes the shape of an XML file using embedded query expressions.</source>
          <target state="translated">El código siguiente cambia la forma de un archivo XML con las expresiones de consulta incrustadas.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The source XML document in this example contains a <ph id="ph1">`Customers`</ph> element under the <ph id="ph2">`Root`</ph> element that contains all customers.</source>
          <target state="translated">El documento XML de origen de este ejemplo contiene un elemento <ph id="ph1">`Customers`</ph> en el elemento <ph id="ph2">`Root`</ph> que contiene todos los clientes.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>It also contains an <ph id="ph1">`Orders`</ph> element under the <ph id="ph2">`Root`</ph> element that contains all orders.</source>
          <target state="translated">También contiene un elemento <ph id="ph1">`Orders`</ph> en el elemento <ph id="ph2">`Root`</ph> que contiene todos los pedidos.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This example creates a new XML tree in which the orders for each customer are contained in an <ph id="ph1">`Orders`</ph> element within the <ph id="ph2">`Customer`</ph> element.</source>
          <target state="translated">Este ejemplo crea un nuevo árbol XML en el que los pedidos de cada cliente se incluyen en un elemento <ph id="ph1">`Orders`</ph> dentro del elemento <ph id="ph2">`Customer`</ph>.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The original document also contains a <ph id="ph1">`CustomerID`</ph> element in the <ph id="ph2">`Order`</ph> element; this element will be removed from the re-shaped document.</source>
          <target state="translated">El documento original también contiene un elemento <ph id="ph1">`CustomerID`</ph> en el elemento <ph id="ph2">`Order`</ph>; este elemento se quitará del documento con la forma cambiada.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This example uses the following XML document: <bpt id="p1">[</bpt>Sample XML File: Customers and Orders (LINQ to XML)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-customers-and-orders-linq-to-xml.md)</ept>.</source>
          <target state="translated">Este ejemplo utiliza el siguiente documento XML: <bpt id="p1">[</bpt>archivo XML de ejemplo: clientes y pedidos (LINQ to XML)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-customers-and-orders-linq-to-xml.md)</ept>.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This code produces the following output:</source>
          <target state="translated">Este código genera el siguiente resultado:</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Ejemplo</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This example renames some elements and converts some attributes to elements.</source>
          <target state="translated">Este ejemplo cambia el nombre de algunos elementos y convierte algunos atributos en elementos.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The code calls <ph id="ph1">`ConvertAddress`</ph>, which returns a list of &lt;xref:System.Xml.Linq.XElement&gt; objects.</source>
          <target state="translated">El código llama <ph id="ph1">`ConvertAddress`</ph>, que devuelve una lista de &lt;xref:System.Xml.Linq.XElement&gt;objetos.&lt;/xref:System.Xml.Linq.XElement&gt;</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The argument to the method is a query that determines the <ph id="ph1">`Address`</ph> complex element where the <ph id="ph2">`Type`</ph> attribute has a value of <ph id="ph3">`"Shipping"`</ph>.</source>
          <target state="translated">El argumento del método es una consulta que determina el elemento complejo <ph id="ph1">`Address`</ph> en el que el atributo <ph id="ph2">`Type`</ph> tiene un valor <ph id="ph3">`"Shipping"`</ph>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This example uses the following XML document: <bpt id="p1">[</bpt>Sample XML File: Typical Purchase Order (LINQ to XML)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-typical-purchase-order-linq-to-xml.md)</ept>.</source>
          <target state="translated">Este ejemplo utiliza el siguiente documento XML: <bpt id="p1">[</bpt>archivo XML de ejemplo: pedido de compra típico (LINQ to XML)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-typical-purchase-order-linq-to-xml.md)</ept>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This code produces the following output:</source>
          <target state="translated">Este código genera el siguiente resultado:</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">Vea también</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Projections and Transformations (LINQ to XML) (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/projections-and-transformations-linq-to-xml.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Proyecciones y transformaciones (LINQ to XML) (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/projections-and-transformations-linq-to-xml.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>