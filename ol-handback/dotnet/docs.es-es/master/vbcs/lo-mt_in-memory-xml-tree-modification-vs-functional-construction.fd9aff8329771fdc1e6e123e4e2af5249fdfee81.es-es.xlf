<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0456d221f01573e6ef1c67a3e0d1db585e6f3b0c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\linq\in-memory-xml-tree-modification-vs-functional-construction.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">eb369222c9661adba4ad778e847f74f691eee325</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">852c142cd6422c641afeb712615442a38383fcdd</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>In-Memory XML Tree Modification vs. Functional Construction (LINQ to XML) (Visual Basic) | Microsoft Docs</source>
          <target state="translated">Diferencias entre la modificación del árbol XML en memoria y Construcción funcional (LINQ to XML) (Visual Basic) | Documentos de Microsoft</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>In-Memory XML Tree Modification vs. Functional Construction (LINQ to XML) (Visual Basic)</source>
          <target state="translated">Diferencias entre la modificación del árbol XML en memoria y Construcción funcional (LINQ to XML) (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Modifying an XML tree in place is a traditional approach to changing the shape of an XML document.</source>
          <target state="translated">Modificar un árbol XML directamente es un enfoque tradicional para cambiar la forma de un documento XML.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>A typical application loads a document into a data store such as DOM or <ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph>; uses a programming interface to insert nodes, delete nodes, or change the content of nodes; and then saves the XML to a file or transmits it over a network.</source>
          <target state="translated">Una aplicación típica carga un documento en un almacén de datos como DOM o <ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph>; utiliza una interfaz de programación para insertar nodos, eliminar nodos o cambiar el contenido de los nodos y, a continuación, guarda el XML en un archivo o lo transmite a través de una red.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> enables another approach that is useful in many scenarios<bpt id="p1">*</bpt>: functional construction<ept id="p1">*</ept>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph>permite otro enfoque es útil en muchos escenarios<bpt id="p1">*</bpt>: construcción funcional<ept id="p1">*</ept>.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Functional construction treats modifying data as a problem of transformation, rather than as detailed manipulation of a data store.</source>
          <target state="translated">La construcción funcional trata la modificación de datos como un problema de transformación en lugar de una manipulación detallada de un almacén de datos.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If you can take a representation of data and transform it efficiently from one form to another, the result is the same as if you took one data store and manipulated it in some way to take another shape.</source>
          <target state="translated">Si puede tomar una representación de datos y transformarla eficientemente de una a otra, el resultado es el mismo que si ha tomado un almacén de datos y lo ha manipulado de alguna manera para que tome otra forma.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A key to the functional construction approach is to pass the results of queries to &lt;xref:System.Xml.Linq.XDocument&gt; and &lt;xref:System.Xml.Linq.XElement&gt; constructors.</source>
          <target state="translated">Una clave para el enfoque de construcción funcional es pasar los resultados de consultas a &lt;xref:System.Xml.Linq.XDocument&gt;y &lt;xref:System.Xml.Linq.XElement&gt;constructores.&lt;/xref:System.Xml.Linq.XElement&gt; &lt;/xref:System.Xml.Linq.XDocument&gt;</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In many cases you can write the transformational code in a fraction of the time that it would take to manipulate the data store, and that code is more robust and easier to maintain.</source>
          <target state="translated">En muchos casos puede escribir el código de transformación en una fracción del tiempo que tardaría en manipular el almacén de datos y ese código es más eficaz y fácil de mantener.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In these cases, even though the transformational approach can take more processing power, it is a more effective way to modify data.</source>
          <target state="translated">En esos casos, aunque el enfoque de transformación puede necesitar más potencia de procesamiento, es una forma más efectiva de modificar datos.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If a developer is familiar with the functional approach, the resulting code in many cases is easier to understand.</source>
          <target state="translated">Si un desarrollador está familiarizado con el enfoque funcional, el código resultante es en muchos casos más fácil de entender.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>It is easy to find the code that modifies each part of the tree.</source>
          <target state="translated">Resulta sencillo buscar el código que modifica cada parte del árbol.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The approach where you modify an XML tree in-place is more familiar to many DOM programmers, whereas code written using the functional approach might look unfamiliar to a developer who doesn't yet understand that approach.</source>
          <target state="translated">El enfoque en el que se modifica un árbol XML directamente es mucho más familiar para muchos programadores de DOM, mientras que el código escrito usando el enfoque funcional puede ser poco familiar para un desarrollador que aún no comprende este enfoque.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If you have to only make a small modification to a large XML tree, the approach where you modify a tree in place in many cases will take less CPU time.</source>
          <target state="translated">Si solo tiene que realizar una pequeña modificación en un árbol XML grande, el enfoque en el que se modifica un árbol directamente en muchos casos consumirá menos tiempo de CPU.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This topic provides an example that is implemented with both approaches.</source>
          <target state="translated">Este tema proporciona un ejemplo que se implementa con ambos enfoques.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Transforming Attributes into Elements</source>
          <target state="translated">Transformar atributos en elementos</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For this example, suppose you want to modify the following simple XML document so that the attributes become elements.</source>
          <target state="translated">Para este ejemplo, supongamos que desea modificar el siguiente documento XML sencillo para que los atributos se conviertan en elementos.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This topic first presents the traditional in-place modification approach.</source>
          <target state="translated">Este tema primero presenta el enfoque tradicional de modificación directa.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>It then shows the functional construction approach.</source>
          <target state="translated">Después muestra el enfoque de construcción funcional.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Modifying the XML Tree</source>
          <target state="translated">Modificar el árbol XML</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You can write some procedural code to create elements from the attributes, and then delete the attributes, as follows:</source>
          <target state="translated">Puede escribir código de procedimientos para crear elementos a partir de atributos y después eliminar los atributos de la siguiente manera:</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This code produces the following output:</source>
          <target state="translated">Este código genera el siguiente resultado:</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Functional Construction Approach</source>
          <target state="translated">Enfoque de construcción funcional</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>By contrast, a functional approach consists of code to form a new tree, picking and choosing elements and attributes from the source tree, and transforming them as appropriate as they are added to the new tree.</source>
          <target state="translated">Por el contrario, un enfoque funcional consta de un código para formar un nuevo árbol, eligiendo y seleccionando elementos y atributos del árbol de origen y transformándolos, según convenga, a medida que se agregan al nuevo árbol.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The functional approach looks like the following:</source>
          <target state="translated">El enfoque funcional tiene el siguiente aspecto:</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This example outputs the same XML as the first example.</source>
          <target state="translated">Este ejemplo produce el mismo XML que el primer ejemplo.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>However, notice that you can actually see the resulting structure of the new XML in the functional approach.</source>
          <target state="translated">No obstante, tenga en cuenta que puede ver realmente la estructura resultante del nuevo XML en el enfoque funcional.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You can see the creation of the <ph id="ph1">`Root`</ph> element, the code that pulls the <ph id="ph2">`Child1`</ph> element from the source tree, and the code that transforms the attributes from the source tree to elements in the new tree.</source>
          <target state="translated">Puede ver la creación del elemento <ph id="ph1">`Root`</ph>, el código que extrae el elemento <ph id="ph2">`Child1`</ph> del árbol de origen y el código que transforma los atributos del árbol de origen a los elementos del nuevo árbol.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The functional example in this case is not any shorter than the first example, and it is not really any simpler.</source>
          <target state="translated">El ejemplo funcional de este caso no es más corto que el primer ejemplo y en realidad no es más sencillo.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>However, if you have many changes to make to an XML tree, the non functional approach will become quite complex and somewhat obtuse.</source>
          <target state="translated">No obstante, si tiene muchos cambios que realizar a un árbol XML, el enfoque no funcional se hará más complejo y difícil de entender.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In contrast, when using the functional approach, you still just form the desired XML, embedding queries and expressions as appropriate, to pull in the desired content.</source>
          <target state="translated">Por el contrario, cuando se usa el enfoque funcional, se sigue formando el XML deseado, incrustando consultas y expresiones según convenga, para extraer el contenido deseado.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The functional approach yields code that is easier to maintain.</source>
          <target state="translated">El enfoque funcional produce código que es más fácil de mantener.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Notice that in this case the functional approach probably would not perform quite as well as the tree manipulation approach.</source>
          <target state="translated">Tenga en cuenta que el enfoque funcional probablemente no tendrá un rendimiento tan bueno como la manipulación del árbol.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The main issue is that the functional approach creates more short lived objects.</source>
          <target state="translated">El principal problema es que el enfoque funcional crea objetos de corta duración.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>However, the tradeoff is an effective one if using the functional approach allows for greater programmer productivity.</source>
          <target state="translated">No obstante, la contrapartida es eficacia si el uso del enfoque funcional permite una mayor productividad del programador.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This is a very simple example, but it serves to show the difference in philosophy between the two approaches.</source>
          <target state="translated">Éste es un ejemplo muy sencillo, pero sirve para mostrar la diferencia de filosofía entre los dos enfoques.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The functional approach yields greater productivity gains for transforming larger XML documents.</source>
          <target state="translated">El enfoque funcional ofrece mayores ganancias de productividad para transformar documentos XML de gran tamaño.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">Vea también</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Modifying XML Trees (LINQ to XML) (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/modifying-xml-trees-linq-to-xml.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Modificar árboles XML (LINQ to XML) (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/modifying-xml-trees-linq-to-xml.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>