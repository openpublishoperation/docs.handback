<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">93d56bd2f5d1c426ff234cada232f5e8b02bed5d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\language-reference\operators\integer-division-operator.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">53f73056f01962aaf854a5ca4fc4326319dea36d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a5cb55701522bbf5757a4631b61b07468e588b46</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>\ Operator (Visual Basic) | Microsoft Docs</source>
          <target state="translated">\ (Operador, Visual Basic) | Documentos de Microsoft</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>\ Operator (Visual Basic)</source>
          <target state="translated">\ (Operador, Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Divides two numbers and returns an integer result.</source>
          <target state="translated">Divide dos números y devuelve un resultado entero.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
          <target state="translated">Sintaxis</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parts</source>
          <target state="translated">Elementos</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Required.</source>
          <target state="translated">Obligatorio.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Any numeric expression.</source>
          <target state="translated">Cualquier expresión numérica.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Required.</source>
          <target state="translated">Obligatorio.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Any numeric expression.</source>
          <target state="translated">Cualquier expresión numérica.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Supported Types</source>
          <target state="translated">Tipos admitidos</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>All numeric types, including the unsigned and floating-point types and <ph id="ph1">`Decimal`</ph>.</source>
          <target state="translated">Todos los tipos numéricos, incluidos los tipos de punto flotante y sin signo y <ph id="ph1">`Decimal`</ph>.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Result</source>
          <target state="translated">Resultado</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The result is the integer quotient of <ph id="ph1">`expression1`</ph> divided by <ph id="ph2">`expression2`</ph>, which discards any remainder and retains only the integer portion.</source>
          <target state="translated">El resultado es el cociente entero de <ph id="ph1">`expression1`</ph> dividido por <ph id="ph2">`expression2`</ph>, que descarta cualquier resto y conserva sólo la parte entera.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This is known as <bpt id="p1">*</bpt>truncation<ept id="p1">*</ept>.</source>
          <target state="translated">Esto se conoce como <bpt id="p1">*</bpt>truncamiento<ept id="p1">*</ept>.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The result data type is a numeric type appropriate for the data types of <ph id="ph1">`expression1`</ph> and <ph id="ph2">`expression2`</ph>.</source>
          <target state="translated">El tipo de datos del resultado es un tipo numérico adecuado para los tipos de datos de <ph id="ph1">`expression1`</ph> y <ph id="ph2">`expression2`</ph>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>See the "Integer Arithmetic" tables in <bpt id="p1">[</bpt>Data Types of Operator Results<ept id="p1">](../../../visual-basic/language-reference/operators/data-types-of-operator-results.md)</ept>.</source>
          <target state="translated">Vea las tablas "Aritmética de enteros" en <bpt id="p1">[</bpt>tipos de datos de resultados de operador<ept id="p1">](../../../visual-basic/language-reference/operators/data-types-of-operator-results.md)</ept>.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>/ Operator (Visual Basic)<ept id="p1">](../../../visual-basic/language-reference/operators/floating-point-division-operator.md)</ept> returns the full quotient, which retains the remainder in the fractional portion.</source>
          <target state="translated">El <bpt id="p1">[</bpt>/ (operador, Visual Basic)<ept id="p1">](../../../visual-basic/language-reference/operators/floating-point-division-operator.md)</ept> devuelve el cociente completo, que conserva el resto en la parte fraccionaria.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Remarks</source>
          <target state="translated">Comentarios</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Before performing the division, Visual Basic attempts to convert any floating-point numeric expression to <ph id="ph1">`Long`</ph>.</source>
          <target state="translated">Antes de realizar la división, Visual Basic intenta convertir cualquier expresión numérica de punto flotante a <ph id="ph1">`Long`</ph>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Option Strict`</ph> is <ph id="ph2">`On`</ph>, a compiler error occurs.</source>
          <target state="translated">Si <ph id="ph1">`Option Strict`</ph> es <ph id="ph2">`On`</ph>, se produce un error del compilador.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Option Strict`</ph> is <ph id="ph2">`Off`</ph>, an &lt;xref:System.OverflowException&gt; is possible if the value is outside the range of the <bpt id="p1">[</bpt>Long Data Type<ept id="p1">](../../../visual-basic/language-reference/data-types/long-data-type.md)</ept>.</source>
          <target state="translated">Si <ph id="ph1">`Option Strict`</ph> es <ph id="ph2">`Off`</ph>, un &lt;xref:System.OverflowException&gt;es posible si el valor está fuera del intervalo de la <bpt id="p1">[</bpt>tipo de datos Long<ept id="p1">](../../../visual-basic/language-reference/data-types/long-data-type.md)</ept>.&lt;/xref:System.OverflowException&gt;</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The conversion to <ph id="ph1">`Long`</ph> is also subject to <bpt id="p1">*</bpt>banker's rounding<ept id="p1">*</ept>.</source>
          <target state="translated">La conversión a <ph id="ph1">`Long`</ph> también está sujeto a <bpt id="p1">*</bpt>redondeo bancario<ept id="p1">*</ept>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For more information, see "Fractional Parts" in <bpt id="p1">[</bpt>Type Conversion Functions<ept id="p1">](../../../visual-basic/language-reference/functions/type-conversion-functions.md)</ept>.</source>
          <target state="translated">Para obtener más información, vea "Partes decimales" en <bpt id="p1">[</bpt>Type Conversion Functions<ept id="p1">](../../../visual-basic/language-reference/functions/type-conversion-functions.md)</ept>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`expression1`</ph> or <ph id="ph2">`expression2`</ph> evaluates to <bpt id="p1">[</bpt>Nothing<ept id="p1">](../../../visual-basic/language-reference/nothing.md)</ept>, it is treated as zero.</source>
          <target state="translated">Si <ph id="ph1">`expression1`</ph> o <ph id="ph2">`expression2`</ph> se evalúa como <bpt id="p1">[</bpt>nada<ept id="p1">](../../../visual-basic/language-reference/nothing.md)</ept>, se trata como cero.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Attempted Division by Zero</source>
          <target state="translated">División por cero intentada</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`expression2`</ph> evaluates to zero, the <ph id="ph2">`\`</ph> operator throws a &lt;xref:System.DivideByZeroException&gt; exception.</source>
          <target state="translated">Si <ph id="ph1">`expression2`</ph> se evalúa como cero, el <ph id="ph2">`\`</ph> operador produce un &lt;xref:System.DivideByZeroException&gt;excepción.&lt;/xref:System.DivideByZeroException&gt;</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This is true for all numeric data types of the operands.</source>
          <target state="translated">Esto es cierto para todos los tipos de datos numéricos de los operandos.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`\`</ph> operator can be <bpt id="p1">*</bpt>overloaded<ept id="p1">*</ept>, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure.</source>
          <target state="translated">El <ph id="ph1">`\`</ph> operador puede <bpt id="p1">*</bpt>sobrecargados<ept id="p1">*</ept>, lo que significa que una clase o estructura puede definir de nuevo su comportamiento cuando un operando tiene el tipo de esa clase o estructura.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If your code uses this operator on such a class or structure, be sure you understand its redefined behavior.</source>
          <target state="translated">Si el código usa este operador en una clase o estructura de este tipo, asegúrese de que conocer su comportamiento redefinido.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Operator Procedures<ept id="p1">](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)</ept>.</source>
          <target state="translated">Para obtener más información, consulte <bpt id="p1">[</bpt>procedimientos de operador<ept id="p1">](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)</ept>.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Ejemplo</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The following example uses the <ph id="ph1">`\`</ph> operator to perform integer division.</source>
          <target state="translated">En el ejemplo siguiente se usa el <ph id="ph1">`\`</ph> operador para realizar la división de enteros.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The result is an integer that represents the integer quotient of the two operands, with the remainder discarded.</source>
          <target state="translated">El resultado es un entero que representa el cociente entero de ambos operandos, rechazando el resto.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrOperators#18<ept id="p2">](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/integer-division-operator_1.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrOperators&amp;#18;<ept id="p2">](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/integer-division-operator_1.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The expressions in the preceding example return values of 2, 3, 33, and -22, respectively.</source>
          <target state="translated">Las expresiones en el ejemplo anterior devuelven valores de 2, 3, 33 y -22 respectivamente.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">Vea también</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">\\</ph>= Operator<ept id="p1">](../../../visual-basic/language-reference/operators/integer-division-assignment-operator.md)</ept><ph id="ph2"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt><ph id="ph1">\\</ph>= (Operador)<ept id="p1">](../../../visual-basic/language-reference/operators/integer-division-assignment-operator.md)</ept><ph id="ph2"> </ph></target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>/ Operator (Visual Basic)<ept id="p1">](../../../visual-basic/language-reference/operators/floating-point-division-operator.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>/ (Operador, Visual Basic)<ept id="p1">](../../../visual-basic/language-reference/operators/floating-point-division-operator.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Option Strict Statement<ept id="p1">](../../../visual-basic/language-reference/statements/option-strict-statement.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Option Strict (instrucción)<ept id="p1">](../../../visual-basic/language-reference/statements/option-strict-statement.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Arithmetic Operators<ept id="p1">](../../../visual-basic/language-reference/operators/arithmetic-operators.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Operadores aritméticos<ept id="p1">](../../../visual-basic/language-reference/operators/arithmetic-operators.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Operator Precedence in Visual Basic<ept id="p1">](../../../visual-basic/language-reference/operators/operator-precedence.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Precedencia de operadores en Visual Basic<ept id="p1">](../../../visual-basic/language-reference/operators/operator-precedence.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Operators Listed by Functionality<ept id="p1">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Operadores enumerados por funcionalidad<ept id="p1">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Arithmetic Operators in Visual Basic<ept id="p1">](../../../visual-basic/programming-guide/language-features/operators-and-expressions/arithmetic-operators.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>Operadores aritméticos en Visual Basic<ept id="p1">](../../../visual-basic/programming-guide/language-features/operators-and-expressions/arithmetic-operators.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>