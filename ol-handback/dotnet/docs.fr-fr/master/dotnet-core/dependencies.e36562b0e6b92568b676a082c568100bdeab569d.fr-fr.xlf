<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b5c25fc" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f3eaf007593336234c6eff20127e9d02d2d5c9fa</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\tools\dependencies.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1bcded4f80cdcfcdb7dc895fc8575bac9fd2c3d6</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0ce34ef50e78f0343f0e34d777c6afbf246866be</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Managing dependencies in .NET Core tooling | Microsoft Docs</source>
          <target state="translated">Gestion des dépendances dans les outils .NET Core | Microsoft Docs</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Explains how to manage your dependencies with the .NET Core tools.</source>
          <target state="translated">Explique comment gérer les dépendances avec les outils .NET Core.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>CLI, extensibility, custom commands, .NET Core</source>
          <target state="translated">CLI, extensibilité, commandes personnalisées, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Managing dependencies with .NET Core SDK 1.0</source>
          <target state="translated">Gestion des dépendances avec le SDK .NET Core 1.0</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>With the move of .NET Core projects from project.json to csproj and MSBuild, a significant investment also happened that resulted in unification of the project file and assets that allow tracking of dependencies.</source>
          <target state="translated">Le passage des projets .NET Core de project.json vers csproj et MSBuild s’est accompagné d’une unification du fichier projet et des ressources permettant le suivi des dépendances.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For .NET Core projects this is similar to what project.json did.</source>
          <target state="translated">Pour les projets .NET Core, cela est similaire à ce que project.json faisait.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>There is no separate JSON or XML file that tracks NuGet dependencies.</source>
          <target state="translated">Il n’existe aucun fichier JSON ou XML distinct qui assure le suivi des dépendances NuGet.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>With this change, we've also introduced another type of <bpt id="p1">*</bpt>reference<ept id="p1">*</ept> into the csproj syntax called the <ph id="ph1">`&lt;PackageReference&gt;`</ph>.</source>
          <target state="translated">Avec ce changement, nous avons également introduit un autre type de <bpt id="p1">*</bpt>référence<ept id="p1">*</ept> dans la syntaxe csproj, appelé <ph id="ph1">`&lt;PackageReference&gt;`</ph>.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This document describes the new reference type.</source>
          <target state="translated">Ce document décrit le nouveau type de référence.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>It also shows how to add a package dependency using this new reference type to your project.</source>
          <target state="translated">Il montre également comment ajouter à votre projet une dépendance de package à l’aide de ce nouveau type de référence.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The new <ph id="ph1">&lt;PackageReference&gt;</ph> element</source>
          <target state="translated">Nouvel élément <ph id="ph1">&lt;PackageReference&gt;</ph></target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`&lt;PackageReference&gt;`</ph> has the following basic structure:</source>
          <target state="translated"><ph id="ph1">`&lt;PackageReference&gt;`</ph> présente la structure de base suivante :</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If you are familiar with MSBuild, it will look familiar to the other reference types that already exist.</source>
          <target state="translated">Si vous êtes familiarisé avec MSBuild, il est similaire aux autres types de référence existants.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The key is the <ph id="ph1">`Include`</ph> statement which specifies the package id that you wish to add to the project.</source>
          <target state="translated">La partie essentielle est l’instruction <ph id="ph1">`Include`</ph> qui spécifie l’ID de package que vous souhaitez ajouter au projet.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`&lt;Version&gt;`</ph> child element specifies the version to get.</source>
          <target state="translated">L’élément enfant <ph id="ph1">`&lt;Version&gt;`</ph> spécifie la version à obtenir.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The versions are specified as per <bpt id="p1">[</bpt>NuGet version rules<ept id="p1">](https://docs.microsoft.com/nuget/create-packages/dependency-versions#version-ranges)</ept>.</source>
          <target state="translated">Les versions sont spécifiées en fonction des <bpt id="p1">[</bpt>règles de version de NuGet<ept id="p1">](https://docs.microsoft.com/nuget/create-packages/dependency-versions#version-ranges)</ept>.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If you are not familiar with the overall <ph id="ph1">`csproj`</ph> syntax, see the <bpt id="p1">[</bpt>MSBuild project reference<ept id="p1">](https://docs.microsoft.com/visualstudio/msbuild/msbuild-project-file-schema-reference)</ept> documentation for more information.</source>
          <target state="translated">Si vous n’êtes pas familiarisé avec la syntaxe <ph id="ph1">`csproj`</ph> générale, consultez la documentation de <bpt id="p1">[</bpt>référence sur les projets MSBuild<ept id="p1">](https://docs.microsoft.com/visualstudio/msbuild/msbuild-project-file-schema-reference)</ept> pour plus d’informations.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Adding a dependency that is available only in a specific target is done using conditions like in the following example:</source>
          <target state="translated">L’ajout d’une dépendance qui n’est disponible que dans une cible spécifique s’effectue à l’aide de conditions décrites dans l’exemple suivant :</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The above means that the dependency will only be valid if the build is happening for that given target.</source>
          <target state="translated">D’après le code ci-dessus, la dépendance n’est valide que si la génération se produit pour la cible donnée.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`$(TargetFramework)`</ph> in the condition is a MSBuild property that is being set in the project.</source>
          <target state="translated">Dans la condition, <ph id="ph1">`$(TargetFramework)`</ph> est une propriété MSBuild définie dans le projet.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For most common .NET Core applications, you will not need to do this.</source>
          <target state="translated">Pour la plupart des applications .NET Core courantes, cela n’est pas nécessaire.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Adding a dependency to your project</source>
          <target state="translated">Ajout d’une dépendance à votre projet</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Adding a dependency to your project is straightforward.</source>
          <target state="translated">Ajouter une dépendance à votre projet est une opération simple.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Here is an example of how to add Json.NET version <ph id="ph1">`9.0.1`</ph> to your project.</source>
          <target state="translated">Voici un exemple montrant comment ajouter la version <ph id="ph1">`9.0.1`</ph> de Json.NET à votre projet.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Of course, it is applicable to any other NuGet dependency.</source>
          <target state="translated">Bien entendu, cela vaut également pour toute autre dépendance NuGet.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>When you open your project file, you will see two or more <ph id="ph1">`&lt;ItemGroup&gt;`</ph> nodes.</source>
          <target state="translated">Quand vous ouvrez votre fichier projet, vous voyez au moins deux nœuds <ph id="ph1">`&lt;ItemGroup&gt;`</ph>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>You will notice that one of the nodes already has <ph id="ph1">`&lt;PackageReference&gt;`</ph> elements in it.</source>
          <target state="translated">L’un de ces nœuds contient déjà des éléments <ph id="ph1">`&lt;PackageReference&gt;`</ph>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You can add your new dependency to this node, or create a new one; it is completely up to you as the result will be the same.</source>
          <target state="translated">Vous pouvez ajouter votre nouvelle dépendance à ce nœud ou en créer un ; quel que soit votre choix, le résultat est le même.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In this example we will use the default template that is dropped by <ph id="ph1">`dotnet new console`</ph>.</source>
          <target state="translated">Dans cet exemple, nous allons utiliser le modèle par défaut qui est déposé par <ph id="ph1">`dotnet new console`</ph>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This is a simple console application.</source>
          <target state="translated">Il s’agit d’une application console simple.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>When we open up the project, we first find the <ph id="ph1">`&lt;ItemGroup&gt;`</ph> with already existing <ph id="ph2">`&lt;PackageReference&gt;`</ph> in it.</source>
          <target state="translated">Quand nous ouvrons le projet, nous trouvons <ph id="ph1">`&lt;ItemGroup&gt;`</ph>, qui contient déjà <ph id="ph2">`&lt;PackageReference&gt;`</ph>.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>We then add the following to it:</source>
          <target state="translated">Nous y ajoutons le code suivant :</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>After this, we save the project and run the <ph id="ph1">`dotnet restore`</ph> command to install the dependency.</source>
          <target state="translated">Ensuite, nous enregistrons le projet et exécutons la commande <ph id="ph1">`dotnet restore`</ph> pour installer la dépendance.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The full project looks like this:</source>
          <target state="translated">Le projet complet ressemble à ceci :</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Removing a dependency from the project</source>
          <target state="translated">Suppression d’une dépendance du projet</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Removing a dependency from the project file involves simply removing the <ph id="ph1">`&lt;PackageReference&gt;`</ph> from the project file.</source>
          <target state="translated">Pour supprimer une dépendance du fichier projet, il suffit de supprimer <ph id="ph1">`&lt;PackageReference&gt;`</ph> de ce fichier.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>