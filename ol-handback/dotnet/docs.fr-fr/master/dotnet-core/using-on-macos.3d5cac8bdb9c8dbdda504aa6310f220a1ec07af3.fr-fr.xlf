<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b5c25fc" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c4d1b7690ca87f2a1a9ced4d82e47aee2f7ecc9f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\tutorials\using-on-macos.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">db4157484ae74d7f79225467e7f5832db16b921a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8f7e4628651fc64cf3b80bffadf0ba2902254246</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Getting started with .NET Core on macOS</source>
          <target state="translated">Bien démarrer avec .NET Core sur macOS</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Getting started with .NET Core on macOS, using Visual Studio Code</source>
          <target state="translated">Bien démarrer avec .NET Core sur macOS à l’aide du code Visual Studio</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Getting started with .NET Core on macOS, using Visual Studio Code</source>
          <target state="translated">Bien démarrer avec .NET Core sur macOS à l’aide du code Visual Studio</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This document provides a tour of the steps and workflow to create a .NET Core Solution using <bpt id="p1">[</bpt>Visual Studio Code<ept id="p1">](http://code.visualstudio.com)</ept>.</source>
          <target state="translated">Ce document présente les étapes et les flux de travail permettant de créer une solution .NET Core à l’aide de <bpt id="p1">[</bpt>Visual Studio Code<ept id="p1">](http://code.visualstudio.com)</ept>.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You'll learn how to create projects, create unit tests, use the debugging tools, and incorporate third-party libraries via <bpt id="p1">[</bpt>NuGet<ept id="p1">](http://nuget.org)</ept>.</source>
          <target state="translated">Vous allez apprendre à créer des projets, à créer des tests unitaires, à utiliser les outils de débogage et à incorporer des bibliothèques tierces à l’aide de <bpt id="p1">[</bpt>NuGet<ept id="p1">](http://nuget.org)</ept>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This article uses Visual Studio Code on Mac OS.</source>
          <target state="translated">Cet article utilise Visual Studio Code sur Mac OS.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Where there are differences, it points out the differences for the Windows platform.</source>
          <target state="translated">En cas de divergence, il signale les différences correspondant à la plateforme Windows.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
          <target state="translated">Prérequis</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Before starting, you'll need to install the <bpt id="p1">[</bpt>.NET Core SDK<ept id="p1">](https://www.microsoft.com/net/core)</ept>.</source>
          <target state="translated">Avant de commencer, vous devez installer le <bpt id="p1">[</bpt>SDK .NET Core<ept id="p1">](https://www.microsoft.com/net/core)</ept>.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The .NET Core SDK includes the latest release of the .NET Core framework and runtime.</source>
          <target state="translated">Ce SDK .NET Core inclut la dernière version du framework et du runtime .NET Core.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You'll also need to install <bpt id="p1">[</bpt>Visual Studio Code<ept id="p1">](http://code.visualstudio.com)</ept>.</source>
          <target state="translated">Vous devez également installer <bpt id="p1">[</bpt>Visual Studio Code<ept id="p1">](http://code.visualstudio.com)</ept>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>During the course of this article, you'll also install extensions that will improve the .NET Core development experience.</source>
          <target state="translated">Au cours de cet article, vous allez également installer des extensions permettant d’améliorer l’expérience de développement de .NET Core.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Getting Started</source>
          <target state="translated">Commencer</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The source for this tutorial is available on <bpt id="p1">[</bpt>GitHub<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/getting-started/golden)</ept>.</source>
          <target state="translated">La source de ce didacticiel est disponible sur <bpt id="p1">[</bpt>GitHub<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/getting-started/golden)</ept>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Start Visual Studio Code.</source>
          <target state="translated">Démarrez Visual Studio Code.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Press Ctrl + '<ph id="ph1">\`</ph>' (the back-quote character) to open an embedded terminal in VS Code.</source>
          <target state="translated">Appuyez sur Ctrl+' <ph id="ph1">\`</ph> ' (caractère guillemet inversé) pour ouvrir un terminal incorporé dans VS Code.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>(Alternatively, you can use a separate terminal window, if you prefer).</source>
          <target state="translated">(Vous pouvez également utiliser une fenêtre de terminal distincte, si vous le souhaitez).</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>By the time we're done, you'll create three projects: a library project, tests for that library project, and a console application that makes use of the library.</source>
          <target state="translated">Quand nous aurons terminé, vous aurez créé trois projets : un projet de bibliothèque, des tests pour ce projet de bibliothèque et une application console qui utilise la bibliothèque.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Let's start by creating those folders.</source>
          <target state="translated">Commençons par créer ces dossiers.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In the terminal, create a 'golden' directory.</source>
          <target state="translated">Dans le terminal, créez un répertoire 'golden'.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In VS Code, open the <bpt id="p1">*</bpt>golden<ept id="p1">*</ept> directory.</source>
          <target state="translated">Dans VS Code, ouvrez le répertoire <bpt id="p1">*</bpt>golden<ept id="p1">*</ept>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This directory is the root of your solution.</source>
          <target state="translated">Ce répertoire est la racine de votre solution.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Run the <bpt id="p1">[</bpt><ph id="ph1">`dotnet new`</ph><ept id="p1">](../tools/dotnet-new.md)</ept> command to create a new solution:</source>
          <target state="translated">Exécutez la commande <bpt id="p1">[</bpt><ph id="ph1">`dotnet new`</ph><ept id="p1">](../tools/dotnet-new.md)</ept> pour créer une solution :</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This command creates a <bpt id="p1">*</bpt>golden.sln<ept id="p1">*</ept> file for the entire solution.</source>
          <target state="translated">Cette commande crée un fichier <bpt id="p1">*</bpt>golden.sln<ept id="p1">*</ept> pour l’ensemble de la solution.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Your next task is to create the library.</source>
          <target state="translated">La tâche suivante consiste à créer la bibliothèque.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In the terminal window (either the embedded terminal in VS code, or another terminal), cd to <bpt id="p1">*</bpt>golden/<ept id="p1">*</ept> and type the command:</source>
          <target state="translated">Dans la fenêtre du terminal (le terminal incorporé à VS Code ou un autre terminal), accédez au répertoire <bpt id="p1">*</bpt>golden/<ept id="p1">*</ept>, puis tapez la commande :</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This creates a library project, with two files: <bpt id="p1">*</bpt>library.csproj<ept id="p1">*</ept> and <bpt id="p2">*</bpt>Class1.cs<ept id="p2">*</ept> in the <bpt id="p3">*</bpt>library<ept id="p3">*</ept> directory.</source>
          <target state="translated">Cette commande crée un projet de bibliothèque avec deux fichiers : <bpt id="p1">*</bpt>library.csproj<ept id="p1">*</ept> et <bpt id="p2">*</bpt>Class1.cs<ept id="p2">*</ept> dans le répertoire <bpt id="p3">*</bpt>library<ept id="p3">*</ept>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You want that library project included in your solution.</source>
          <target state="translated">Vous voulez que ce projet de bibliothèque soit inclus dans votre solution.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Run the <bpt id="p1">[</bpt><ph id="ph1">`dotnet sln`</ph><ept id="p1">](../tools/dotnet-sln.md)</ept> command to add the newly created <bpt id="p2">*</bpt>library.csproj<ept id="p2">*</ept> project to the solution:</source>
          <target state="translated">Exécutez la commande <bpt id="p1">[</bpt><ph id="ph1">`dotnet sln`</ph><ept id="p1">](../tools/dotnet-sln.md)</ept> pour ajouter le projet <bpt id="p2">*</bpt>library.csproj<ept id="p2">*</ept> que vous venez de créer à la solution :</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Let's examine the project that you've created.</source>
          <target state="translated">Examinons le projet que vous avez créé.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>library.csproj<ept id="p1">*</ept> file contains the following information:</source>
          <target state="translated">Le fichier <bpt id="p1">*</bpt>library.csproj<ept id="p1">*</ept> contient les informations suivantes :</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This library project will make use of JSON representation of objects, so you'll want to add a reference to the <ph id="ph1">`Newtonsoft.Json`</ph> NuGet package.</source>
          <target state="translated">Ce projet de bibliothèque utilise la représentation JSON des objets. Vous allez donc devoir ajouter une référence au package NuGet <ph id="ph1">`Newtonsoft.Json`</ph>.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`dotnet add`</ph> command adds new items to a project.</source>
          <target state="translated">La commande <ph id="ph1">`dotnet add`</ph> ajoute de nouveaux éléments à un projet.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>To add a reference to a NuGet package, you use the <ph id="ph1">`package`</ph> command and specify the name of the package.</source>
          <target state="translated">Pour ajouter une référence à un package NuGet, vous utilisez la commande <ph id="ph1">`package`</ph> et spécifiez le nom du package.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This adds <ph id="ph1">`Newtonsoft.Json`</ph> and its dependencies to the Library project.</source>
          <target state="translated">Cette opération ajoute <ph id="ph1">`Newtonsoft.Json`</ph> et ses dépendances au projet de bibliothèque.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Alternatively, you could manually edit the <bpt id="p1">*</bpt>library.csproj<ept id="p1">*</ept> file and add the following node:</source>
          <target state="translated">Sinon, vous pouvez modifier manuellement le fichier <bpt id="p1">*</bpt>library.csproj<ept id="p1">*</ept> et ajouter le nœud suivant :</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>After you've finished adding those dependencies, you need to install those packages into workspace.</source>
          <target state="translated">Une fois l’ajout de ces dépendances terminé, vous devez installer ces packages dans l’espace de travail.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Run the <ph id="ph1">`dotnet restore`</ph> command to updates all dependencies, and write a <bpt id="p1">*</bpt>obj/project.assets.json<ept id="p1">*</ept> file under the project directory.</source>
          <target state="translated">Exécutez la commande <ph id="ph1">`dotnet restore`</ph> pour mettre à jour toutes les dépendances, puis écrivez un fichier <bpt id="p1">*</bpt>obj/project.assets.json<ept id="p1">*</ept> dans le répertoire du projet.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This file contains the full dependency tree of all the dependencies in your project.</source>
          <target state="translated">Ce fichier contient l’arborescence complète de toutes les dépendances dans votre projet.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>You don't need to read this file, it's used by tools in the .NET Core SDK.</source>
          <target state="translated">Vous n’avez pas besoin de lire ce fichier. Il est utilisé par les outils du SDK .NET Core.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Now, let's update the C# code.</source>
          <target state="translated">À présent, mettons à jour le code C#.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Let's create a <ph id="ph1">`Thing`</ph> class that contains one public method.</source>
          <target state="translated">Créons une classe <ph id="ph1">`Thing`</ph> contenant une méthode publique.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>This method will return the sum of two numbers, but will do so by converting that number to a JSON string, and then deserializing it.</source>
          <target state="translated">Cette méthode retourne la somme de deux nombres, mais elle effectue cette opération en convertissant ce nombre en chaîne JSON, puis en la désérialisant.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Rename the file <bpt id="p1">*</bpt>Class1.cs<ept id="p1">*</ept> to <bpt id="p2">*</bpt>Thing.cs<ept id="p2">*</ept>.</source>
          <target state="translated">Renommez le fichier <bpt id="p1">*</bpt>Class1.cs<ept id="p1">*</ept> en <bpt id="p2">*</bpt>Thing.cs<ept id="p2">*</ept>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Then, replace the existing code (for the template-generated Class1) with the following:</source>
          <target state="translated">Ensuite, remplacez le code existant (pour la Class1 générée à partir d’un modèle) par ce qui suit :</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This makes use of a number of modern C# features, such as static usings, expression-bodied members, and interpolated strings, that you can learn about in the <bpt id="p1">[</bpt>Learn C#<ept id="p1">](../../csharp/index.md)</ept> section.</source>
          <target state="translated">Ce code utilise un certain nombre de fonctionnalités C# modernes, telles que les instructions Using statiques, des membres expression-bodied et des chaînes interpolées, que vous pouvez découvrir dans la section <bpt id="p1">[</bpt>Découvrir C#<ept id="p1">](../../csharp/index.md)</ept>.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Now that you've updated the code, you can build the library using <ph id="ph1">`dotnet build`</ph>.</source>
          <target state="translated">Maintenant que vous avez mis à jour le code, vous pouvez créer la bibliothèque à l’aide de <ph id="ph1">`dotnet build`</ph>.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>You now have a built <bpt id="p1">*</bpt>library.dll<ept id="p1">*</ept> file under <bpt id="p2">*</bpt>golden/library/bin/Debug/netstandard1.4<ept id="p2">*</ept>.</source>
          <target state="translated">Vous avez maintenant un fichier <bpt id="p1">*</bpt>library.dll<ept id="p1">*</ept> sous <bpt id="p2">*</bpt>golden/library/bin/Debug/netstandard1.4<ept id="p2">*</ept>.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Writing the test project</source>
          <target state="translated">Écriture du projet de test</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Let's build a test project for this library that you've build.</source>
          <target state="translated">Créons un projet de test pour cette bibliothèque que vous avez générée.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Change to the <bpt id="p1">*</bpt>golden<ept id="p1">*</ept> directory.</source>
          <target state="translated">Accédez au répertoire <bpt id="p1">*</bpt>golden<ept id="p1">*</ept>.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Run <ph id="ph1">`dotnet new xunit -o test-library`</ph> to create a new test project.</source>
          <target state="translated">Exécutez <ph id="ph1">`dotnet new xunit -o test-library`</ph> pour créer un projet de test unitaire.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>You'll want to add this project to the solution as well by running <ph id="ph1">`dotnet sln add test-library/test-library.csproj`</ph>.</source>
          <target state="translated">Vous voulez également ajouter ce projet à la solution en exécutant <ph id="ph1">`dotnet sln add test-library/test-library.csproj`</ph>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>You'll need to add a dependency node for the library you wrote in the steps above.</source>
          <target state="translated">Vous devez ajouter un nœud de dépendance pour la bibliothèque que vous avez écrite dans la procédure ci-dessus.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`dotnet add reference`</ph> command does that:</source>
          <target state="translated">La commande <ph id="ph1">`dotnet add reference`</ph> effectue cette opération :</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Or, you can manually edit the <bpt id="p1">*</bpt>test-library.csproj<ept id="p1">*</ept> file and add the following node:</source>
          <target state="translated">Sinon, vous pouvez modifier manuellement le fichier <bpt id="p1">*</bpt>test-library.csproj<ept id="p1">*</ept> et ajouter le nœud suivant :</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`library`</ph> node specifies that this dependency should resolve to a project in the current workspace.</source>
          <target state="translated">Le nœud <ph id="ph1">`library`</ph> spécifie que cette dépendance doit être résolue en un projet dans l’espace de travail actuel.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Without explicitly specifying this, it's possible that the test project would build against a NuGet package of the same name.</source>
          <target state="translated">Si cela n’est pas spécifié explicitement, le projet de test risque de reposer sur un package NuGet du même nom.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Now that the dependencies have been properly configured, let's create the tests for your library.</source>
          <target state="translated">Maintenant que les dépendances ont été correctement configurées, nous allons créer les tests pour votre bibliothèque.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Open <bpt id="p1">*</bpt>UnitTest1.cs<ept id="p1">*</ept> and replace its contents with the following code:</source>
          <target state="translated">Ouvrez <bpt id="p1">*</bpt>UnitTest1.cs<ept id="p1">*</ept> et remplacez son contenu par le code suivant :</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Now, run <ph id="ph1">`dotnet restore`</ph> and <ph id="ph2">`dotnet build`</ph>.</source>
          <target state="translated">À présent, exécutez <ph id="ph1">`dotnet restore`</ph> et <ph id="ph2">`dotnet build`</ph>.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>These commands will recursively find all projects to restore dependencies and build them.</source>
          <target state="translated">Ces commandes recherchent de manière récursive tous les projets pour restaurer les dépendances et les générer.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Finally, run <ph id="ph1">`dotnet test test-library/test-library.csproj`</ph> to run the tests.</source>
          <target state="translated">Enfin, exécutez <ph id="ph1">`dotnet test test-library/test-library.csproj`</ph> pour exécuter les tests.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The xUnit console test runner will run the one test, and report that it is passing.</source>
          <target state="translated">L’exécuteur de tests de la console xUnit exécute le seul test, puis indique s’il a réussi.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Writing the console app</source>
          <target state="translated">Écriture de l’application console</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>In your terminal run <ph id="ph1">`dotnet new console -o app`</ph> to create a new console application.</source>
          <target state="translated">Dans votre terminal, exécutez <ph id="ph1">`dotnet new console -o app`</ph> pour créer une application console.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>This project is also part of the solution, so run <ph id="ph1">`dotnet sln add app/app.csproj`</ph> to add the project to the solution.</source>
          <target state="translated">Ce projet fait également partie de la solution. Vous devez donc exécuter <ph id="ph1">`dotnet sln add app/app.csproj`</ph> pour ajouter le projet à la solution.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Your console application depends on the library you built and tested in the previous steps.</source>
          <target state="translated">Votre application console dépend de la bibliothèque que vous avez créée et testée lors des étapes précédentes.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>You need to indicate that by running <ph id="ph1">`dotnet add reference`</ph> again:</source>
          <target state="translated">Vous devez l’indiquer en exécutant <ph id="ph1">`dotnet add reference`</ph> à nouveau :</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Run <ph id="ph1">`dotnet restore`</ph> to restore all dependencies.</source>
          <target state="translated">Exécutez <ph id="ph1">`dotnet restore`</ph> pour restaurer toutes les dépendances.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Open <bpt id="p1">*</bpt>program.cs<ept id="p1">*</ept> and replace the contents of the <ph id="ph1">`Main`</ph> method with this line:</source>
          <target state="translated">Ouvrez <bpt id="p1">*</bpt>program.cs<ept id="p1">*</ept> et remplacez le contenu de la méthode <ph id="ph1">`Main`</ph> par la ligne suivante :</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>You'll need to add a couple <ph id="ph1">`using`</ph> directives to the top of the file:</source>
          <target state="translated">Vous devez ajouter deux directives <ph id="ph1">`using`</ph> en haut du fichier :</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Then, run <ph id="ph1">`dotnet build`</ph>.</source>
          <target state="translated">Ensuite, exécutez <ph id="ph1">`dotnet build`</ph>.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>That creates the assemblies, and you can type <ph id="ph1">`dotnet run -p app/app.csproj`</ph> to run the executable.</source>
          <target state="translated">Cette opération crée les assemblys. Vous pouvez taper <ph id="ph1">`dotnet run -p app/app.csproj`</ph> pour exécuter l’exécutable.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`-p`</ph> argument to <ph id="ph2">`dotnet run`</ph> specifies the project for the main application.</source>
          <target state="translated">L’argument <ph id="ph1">`-p`</ph> ajouté à <ph id="ph2">`dotnet run`</ph> spécifie le projet pour l’application principale.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Debugging your application</source>
          <target state="translated">Débogage de votre application</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>You can debug your code in VS Code using the C# extension.</source>
          <target state="translated">Vous pouvez déboguer votre code dans VS Code à l’aide de l’extension C#.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>You install this extension by pressing <ph id="ph1">`F1`</ph> to open the VS Code palette.</source>
          <target state="translated">Pour installer cette extension, appuyez sur <ph id="ph1">`F1`</ph> afin d’ouvrir la palette VS Code.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Type <ph id="ph1">`ext install`</ph> to see the list of extensions.</source>
          <target state="translated">Tapez <ph id="ph1">`ext install`</ph> pour afficher la liste des extensions.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Select the C# extension.</source>
          <target state="translated">Sélectionnez l’extension C#.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>(More details are available on the <bpt id="p1">[</bpt>Visual Studio Code C# Extension documentation<ept id="p1">](https://github.com/OmniSharp/omnisharp-vscode/blob/master/debugger.md)</ept> page.)</source>
          <target state="translated">(Des informations plus détaillées sont disponibles dans la page de <bpt id="p1">[</bpt>documentation relative à l’extension C# Visual Studio Code<ept id="p1">](https://github.com/OmniSharp/omnisharp-vscode/blob/master/debugger.md)</ept>.)</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>After you install the extension, VS Code will ask that you restart the application to load the new extension.</source>
          <target state="translated">Quand vous avez terminé d’installer l’extension, VS Code vous demande de redémarrer l’application pour charger la nouvelle extension.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Once the extension is installed, you can open the debugger tab (see figure).</source>
          <target state="translated">Une fois l’extension installée, vous pouvez ouvrir l’onglet du débogueur (voir la figure).</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>VS Code Debugger</source>
          <target state="translated">Débogueur VS Code</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Set a breakpoint at the <ph id="ph1">`WriteLine`</ph> statement in <ph id="ph2">`Main`</ph>.</source>
          <target state="translated">Définissez un point d’arrêt au niveau de l’instruction <ph id="ph1">`WriteLine`</ph><ph id="ph2">`Main`</ph>.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>You do this by pressing the <ph id="ph1">`F9`</ph> key, or by clicking the mouse in the left margin on the line you want the breakpoint.</source>
          <target state="translated">Pour cela, appuyez sur la touche <ph id="ph1">`F9`</ph> ou cliquez dans la marge gauche de la ligne sur laquelle vous voulez placer le point d’arrêt.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Open the debugger by pressing the debug icon on the left of the VS Code screen (see figure).</source>
          <target state="translated">Ouvrez le débogueur en appuyant sur l’icône de débogage à gauche dans l’écran VS Code (voir la figure).</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Then, press the Play button to start the application under the debugger.</source>
          <target state="translated">Appuyez ensuite sur le bouton de lecture pour démarrer l’application sous le débogueur.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>You should hit the breakpoint.</source>
          <target state="translated">Vous devez atteindre le point d’arrêt.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Step into the <ph id="ph1">`Get`</ph> method and make sure that you have passed in the correct arguments.</source>
          <target state="translated">Exécutez pas à pas la méthode <ph id="ph1">`Get`</ph>, puis vérifiez que vous avez passé les arguments appropriés.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Make sure that the answer is actually 42.</source>
          <target state="translated">Vérifiez que la réponse est bien 42.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>