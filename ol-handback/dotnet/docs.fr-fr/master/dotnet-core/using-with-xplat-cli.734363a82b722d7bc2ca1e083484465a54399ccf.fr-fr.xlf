<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b5c25fc" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">240061d2515c14ba7ab733f4cc9e7e38fb2a5c7c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\tutorials\using-with-xplat-cli.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">50f255f8880345510e614e3e132acf26be8dcb51</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">841571b86aa8d1a6231726592248ae06e34dfb1d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Getting started with .NET Core using the CLI | Microsoft Docs</source>
          <target state="translated">Bien démarrer avec .NET Core à l’aide de l’interface CLI │ Microsoft Docs</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>A step-by-step tutorial showing how to get started with .NET Core on Windows, Linux, or macOS using the .NET Core command-line interface (CLI).</source>
          <target state="translated">Didacticiel pas à pas montrant comment démarrer avec .NET Core sur Windows, Linux ou Mac OS à l’aide de l’interface de ligne de commande (CLI) .NET Core.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET Core, CLI</source>
          <target state="translated">.NET Core, CLI</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Getting started with .NET Core on Windows/Linux/macOS using the command line</source>
          <target state="translated">Bien démarrer avec .NET Core sur Windows/Linux/macOS à l’aide de la ligne de commande</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This topic will show you how to start developing cross-platforms apps in your machine using the .NET Core CLI tools.</source>
          <target state="translated">Cette rubrique décrit comment commencer à développer des applications multiplateformes sur votre ordinateur à l’aide des outils CLI .NET Core.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>If you're unfamiliar with the .NET Core CLI toolset, read the <bpt id="p1">[</bpt>.NET Core SDK overview<ept id="p1">](../tools/index.md)</ept>.</source>
          <target state="translated">Si vous n’êtes pas familiarisé avec l’ensemble d’outils CLI .NET Core, consultez <bpt id="p1">[</bpt>Vue d’ensemble du SDK .NET Core<ept id="p1">](../tools/index.md)</ept>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
          <target state="translated">Prérequis</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>.NET Core SDK 1.0.0<ept id="p1">](https://www.microsoft.com/net/download/core)</ept>.</source>
          <target state="translated"><bpt id="p1">[</bpt>SDK .NET Core 1.0.0<ept id="p1">](https://www.microsoft.com/net/download/core)</ept>.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A text editor or code editor of your choice.</source>
          <target state="translated">Un éditeur de texte ou un éditeur de code de votre choix.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Hello, Console App!</source>
          <target state="translated">Application console Hello</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>First, navigate to or create a new folder with a name you like.</source>
          <target state="translated">Tout d’abord, accédez à un dossier ou créez-en un avec le nom de votre choix.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Hello<ept id="p1">*</ept> is the name chosen for the sample code, which can be found <bpt id="p2">[</bpt>here<ept id="p2">](https://github.com/dotnet/docs/tree/master/samples/core/console-apps/HelloMsBuild)</ept>.</source>
          <target state="translated"><bpt id="p1">*</bpt>Hello<ept id="p1">*</ept> est le nom choisi pour l’exemple de code, qui se trouve <bpt id="p2">[</bpt>ici<ept id="p2">](https://github.com/dotnet/docs/tree/master/samples/core/console-apps/HelloMsBuild)</ept>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Open up a command prompt and type the following:</source>
          <target state="translated">Ouvrez une invite de commandes, puis tapez les commandes suivantes :</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Let's do a quick walkthrough:</source>
          <target state="translated">Suivons une procédure pas à pas rapide :</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">`dotnet new`</ph><ept id="p1">](../tools/dotnet-new.md)</ept> creates an up-to-date <ph id="ph2">`Hello.csproj`</ph> project file with the dependencies necessary to build a console app.</source>
          <target state="translated"><bpt id="p1">[</bpt><ph id="ph1">`dotnet new`</ph><ept id="p1">](../tools/dotnet-new.md)</ept> crée un fichier projet <ph id="ph2">`Hello.csproj`</ph> à jour avec les dépendances nécessaires pour générer une application console.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>It also creates a <ph id="ph1">`Program.cs`</ph>, a basic file containing the entry point for the application.</source>
          <target state="translated">Il crée également <ph id="ph1">`Program.cs`</ph>, un fichier de base contenant le point d’entrée pour l’application.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Hello.csproj`</ph>:</source>
          <target state="translated"><ph id="ph1">`Hello.csproj`</ph>:</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The project file specifies everything that's needed to restore dependencies and build the program.</source>
          <target state="translated">Le fichier projet spécifie tout ce qui est nécessaire pour restaurer les dépendances et générer le programme.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`OutputType`</ph> tag specifies that we're building an executable, in other words a console application.</source>
          <target state="translated">La balise <ph id="ph1">`OutputType`</ph> spécifie que nous générons un fichier exécutable, autrement dit une application console.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`TargetFramework`</ph> tag specifies what .NET runtime we're targeting.</source>
          <target state="translated">La balise <ph id="ph1">`TargetFramework`</ph> spécifie le runtime .NET que nous ciblons.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In an advance scenario, you can specify multiple target frameworks and build to all those in a single operation.</source>
          <target state="translated">Dans un scénario avancé, vous pouvez spécifier plusieurs frameworks cibles et y effectuer une génération globale en une seule opération.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In this tutorial, we'll stick to building only for .NET Core 1.0.</source>
          <target state="translated">Dans ce didacticiel, nous nous en tiendrons à une génération limitée à .NET Core 1.0.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Program.cs`</ph>:</source>
          <target state="translated"><ph id="ph1">`Program.cs`</ph>:</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Program.cs<ept id="p2">](../../../samples/core/console-apps/HelloMsBuild/Program.cs)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Program.cs<ept id="p2">](../../../samples/core/console-apps/HelloMsBuild/Program.cs)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The program starts by <ph id="ph1">`using System`</ph>, which means "bring everything in the <ph id="ph2">`System`</ph> namespace into scope for this file".</source>
          <target state="translated">Le programme commence par <ph id="ph1">`using System`</ph>, ce qui signifie « placer tout ce qui se trouve dans l’espace de noms <ph id="ph2">`System`</ph> dans la portée de ce fichier ».</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`System`</ph> namespace includes basic constructs such as <ph id="ph2">`string`</ph>, or numeric types.</source>
          <target state="translated">L’espace de noms <ph id="ph1">`System`</ph> inclut des constructions de base, telles que <ph id="ph2">`string`</ph>, ou des types numériques.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>We then define a namespace called <ph id="ph1">`Hello`</ph>.</source>
          <target state="translated">Ensuite, nous définissons un espace de noms appelé <ph id="ph1">`Hello`</ph>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You can change this to anything you want.</source>
          <target state="translated">Vous pouvez le modifier à votre gré.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>A class named <ph id="ph1">`Program`</ph> is defined within that namespace, with a <ph id="ph2">`Main`</ph> method that takes an array of strings as its argument.</source>
          <target state="translated">Une classe nommée <ph id="ph1">`Program`</ph> est définie dans cet espace de noms avec une méthode <ph id="ph2">`Main`</ph> qui accepte un tableau de chaînes comme argument.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This array contains the list of arguments passed in when the compiled program is called.</source>
          <target state="translated">Ce tableau contient la liste des arguments passés quand le programme compilé est appelé.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>As it is, this array is not used: all the program is doing is to write "Hello World!"</source>
          <target state="translated">Tel quel, ce tableau n’est pas utilisé : le programme se limite à écrire « Hello World! »</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>to the console.</source>
          <target state="translated">dans la console.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Later, we'll make changes to the code that will make use of this argument.</source>
          <target state="translated">Plus tard, nous apporterons des modifications au code qui utilisent cet argument.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">`dotnet restore`</ph><ept id="p1">](../tools/dotnet-restore.md)</ept> calls into <bpt id="p2">[</bpt>NuGet<ept id="p2">](http://nuget.org)</ept> (.NET package manager) to restore the tree of dependencies.</source>
          <target state="translated"><bpt id="p1">[</bpt><ph id="ph1">`dotnet restore`</ph><ept id="p1">](../tools/dotnet-restore.md)</ept> appelle <bpt id="p2">[</bpt>NuGet<ept id="p2">](http://nuget.org)</ept> (gestionnaire de package .NET) pour restaurer l’arborescence de dépendances.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>NuGet analyzes the <bpt id="p1">*</bpt>Hello.csproj<ept id="p1">*</ept> file, downloads the dependencies stated in the file (or grabs them from a cache on your machine), and writes the <bpt id="p2">*</bpt>obj/project.assets.json<ept id="p2">*</ept> file.</source>
          <target state="translated">NuGet analyse le fichier <bpt id="p1">*</bpt>Hello.csproj<ept id="p1">*</ept>, télécharge les dépendances indiquées dans le fichier (ou les récupère dans un cache sur votre ordinateur) et écrit le fichier <bpt id="p2">*</bpt>obj/project.assets.json<ept id="p2">*</ept>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>project.assets.json<ept id="p1">*</ept> file is necessary to be able to compile and run.</source>
          <target state="translated">Le fichier <bpt id="p1">*</bpt>project.assets.json<ept id="p1">*</ept> est nécessaire pour pouvoir effectuer la compilation et l’exécution.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>project.assets.json<ept id="p1">*</ept> file is a persisted and complete set of the graph of NuGet dependencies and other information describing an app.</source>
          <target state="translated">Le fichier <bpt id="p1">*</bpt>project.assets.json<ept id="p1">*</ept> est un ensemble persistant et complet du graphique de dépendances NuGet et d’autres informations qui décrivent une application.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>This file is read by other tools, such as <bpt id="p1">[</bpt><ph id="ph1">`dotnet build`</ph><ept id="p1">](../tools/dotnet-build.md)</ept> and <bpt id="p2">[</bpt><ph id="ph2">`dotnet run`</ph><ept id="p2">](../tools/dotnet-run.md)</ept>, enabling them to process the source code with a correct set of NuGet dependencies and binding resolutions.</source>
          <target state="translated">Ce fichier est lu par d’autres outils, comme <bpt id="p1">[</bpt><ph id="ph1">`dotnet build`</ph><ept id="p1">](../tools/dotnet-build.md)</ept> et <bpt id="p2">[</bpt><ph id="ph2">`dotnet run`</ph><ept id="p2">](../tools/dotnet-run.md)</ept>, ce qui leur permet de traiter le code source avec un ensemble approprié de dépendances NuGet et de résolutions de liaison.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">`dotnet run`</ph><ept id="p1">](../tools/dotnet-run.md)</ept> calls <bpt id="p2">[</bpt><ph id="ph2">`dotnet build`</ph><ept id="p2">](../tools/dotnet-build.md)</ept> to ensure that the build targets have been built, and then calls <ph id="ph3">`dotnet &lt;assembly.dll&gt;`</ph> to run the target application.</source>
          <target state="translated"><bpt id="p1">[</bpt><ph id="ph1">`dotnet run`</ph><ept id="p1">](../tools/dotnet-run.md)</ept> appelle <bpt id="p2">[</bpt><ph id="ph2">`dotnet build`</ph><ept id="p2">](../tools/dotnet-build.md)</ept> pour garantir que les cibles de génération ont été générées, puis appelle <ph id="ph3">`dotnet &lt;assembly.dll&gt;`</ph> pour exécuter l’application cible.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Alternatively, you can also execute <bpt id="p1">[</bpt><ph id="ph1">`dotnet build`</ph><ept id="p1">](../tools/dotnet-build.md)</ept> to compile the code without running the build console applications.</source>
          <target state="translated">Si vous préférez, vous pouvez exécuter <bpt id="p1">[</bpt><ph id="ph1">`dotnet build`</ph><ept id="p1">](../tools/dotnet-build.md)</ept> pour compiler le code sans exécuter les applications console de la build.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This results in a compiled application as a DLL file that can be run with <ph id="ph1">`dotnet bin\Debug\netcoreapp1.0\Hello.dll`</ph> on Windows (use <ph id="ph2">`/`</ph> for non-Windows systems).</source>
          <target state="translated">Il en résulte une application compilée sous forme de fichier DLL qui peut être exécutée avec <ph id="ph1">`dotnet bin\Debug\netcoreapp1.0\Hello.dll`</ph> sur Windows (utilisez <ph id="ph2">`/`</ph> sur les autres systèmes).</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>You may specify also specify arguments to the application as you'll see later on the topic.</source>
          <target state="translated">Vous pouvez également spécifier des arguments pour l’application, comme nous le verrons par la suite dans la rubrique.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>As an advanced scenario, it's possible to build the application as a self-contained set of platform-specific files that can be deployed and run to a machine that doesn't necessarily have .NET Core installed.</source>
          <target state="translated">Dans le cadre d’un scénario avancé, vous pouvez générer l’application comme un ensemble autonome de fichiers spécifiques à la plateforme qui peuvent être déployés et exécutés sur un ordinateur sur lequel .NET Core n’est pas nécessairement installé.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>.NET Core Application Deployment<ept id="p1">](../deploying/index.md)</ept> for details.</source>
          <target state="translated">Pour plus d’informations, consultez <bpt id="p1">[</bpt>Déploiement d’applications .NET Core<ept id="p1">](../deploying/index.md)</ept>.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Augmenting the program</source>
          <target state="translated">Augmentation du programme</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Let's change the program a bit.</source>
          <target state="translated">Modifions un peu le programme.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Fibonacci numbers are fun, so let's add that in addition to use the argument to greet the person running the app.</source>
          <target state="translated">Les nombres de Fibonacci sont amusants, nous allons donc les ajouter en plus de l’argument pour accueillir la personne qui exécute l’application.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Replace the contents of your <bpt id="p1">*</bpt>Program.cs<ept id="p1">*</ept>  file with the following code:</source>
          <target state="translated">Remplacez le contenu du fichier <bpt id="p1">*</bpt>Program.cs<ept id="p1">*</ept> par le code suivant :</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Fibonacci<ept id="p2">](../../../samples/core/console-apps/fibonacci-msbuild/Program.cs)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Fibonacci<ept id="p2">](../../../samples/core/console-apps/fibonacci-msbuild/Program.cs)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Execute <bpt id="p1">[</bpt><ph id="ph1">`dotnet build`</ph><ept id="p1">](../tools/dotnet-build.md)</ept> to compile the changes.</source>
          <target state="translated">Exécutez <bpt id="p1">[</bpt><ph id="ph1">`dotnet build`</ph><ept id="p1">](../tools/dotnet-build.md)</ept> pour compiler les modifications.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Run the program passing a parameter to the app:</source>
          <target state="translated">Exécutez le programme en passant un paramètre à l’application :</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>And that's it!</source>
          <target state="translated">Et voilà !</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>You can augment <ph id="ph1">`Program.cs`</ph> any way you like.</source>
          <target state="translated">Vous pouvez augmenter <ph id="ph1">`Program.cs`</ph> comme vous le souhaitez.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Working with multiple files</source>
          <target state="translated">Utilisation de plusieurs fichiers</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Single files are fine for simple one-off programs, but if you're building a more complex app, you're probably going to have multiple source files on your project Let's build off of the previous Fibonacci example by caching some Fibonacci values and add some recursive features.</source>
          <target state="translated">Les fichiers uniques conviennent à des programmes simples et ponctuels, mais si vous créez une application plus complexe, vous avez probablement plusieurs fichiers sources dans votre projet. Reprenons l’exemple précédent de Fibonacci en mettant en cache certaines valeurs de Fibonacci et en ajoutant des fonctionnalités récursives.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Add a new file inside the <bpt id="p1">*</bpt>Hello<ept id="p1">*</ept> directory named <bpt id="p2">*</bpt>FibonacciGenerator.cs<ept id="p2">*</ept> with the following code:</source>
          <target state="translated">Ajoutez un nouveau fichier nommé <bpt id="p2">*</bpt>FibonacciGenerator.cs<ept id="p2">*</ept> dans le répertoire <bpt id="p1">*</bpt>Hello<ept id="p1">*</ept> avec le code suivant :</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Fibonacci Generator<ept id="p2">](../../../samples/core/console-apps/FibonacciBetterMsBuild/FibonacciGenerator.cs)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Générateur Fibonacci<ept id="p2">](../../../samples/core/console-apps/FibonacciBetterMsBuild/FibonacciGenerator.cs)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Change the <ph id="ph1">`Main`</ph> method in your <bpt id="p1">*</bpt>Program.cs<ept id="p1">*</ept> file to instantiate the new class and call its method as in the following example:</source>
          <target state="translated">Modifiez la méthode <ph id="ph1">`Main`</ph> dans votre fichier <bpt id="p1">*</bpt>Program.cs<ept id="p1">*</ept> pour instancier la nouvelle classe et appelez sa méthode comme dans l’exemple suivant :</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>New Program.cs<ept id="p2">](../../../samples/core/console-apps/FibonacciBetterMsBuild/Program.cs)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Nouveau Program.cs<ept id="p2">](../../../samples/core/console-apps/FibonacciBetterMsBuild/Program.cs)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Execute <bpt id="p1">[</bpt><ph id="ph1">`dotnet build`</ph><ept id="p1">](../tools/dotnet-build.md)</ept> to compile the changes.</source>
          <target state="translated">Exécutez <bpt id="p1">[</bpt><ph id="ph1">`dotnet build`</ph><ept id="p1">](../tools/dotnet-build.md)</ept> pour compiler les modifications.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Run your app by executing <bpt id="p1">[</bpt><ph id="ph1">`dotnet run`</ph><ept id="p1">](../tools/dotnet-run.md)</ept>.</source>
          <target state="translated">Exécutez votre application en exécutant <bpt id="p1">[</bpt><ph id="ph1">`dotnet run`</ph><ept id="p1">](../tools/dotnet-run.md)</ept>.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The following shows the program output:</source>
          <target state="translated">Voici la sortie du programme :</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>And that's it!</source>
          <target state="translated">Et voilà !</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Now, you can start using the basic concepts learned here to create your own programs.</source>
          <target state="translated">À présent, vous pouvez commencer à utiliser les concepts de base que vous avez appris ici pour créer vos propres programmes.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Note that the commands and steps shown in this tutorial to run your application are used during development time only.</source>
          <target state="translated">Notez que les commandes et les étapes indiquées dans ce didacticiel pour exécuter votre application sont utilisées uniquement au moment du développement.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Once you're ready to deploy your app, you'll want to take a look at the different <bpt id="p1">[</bpt>deployment strategies<ept id="p1">](../deploying/index.md)</ept> for .NET Core apps and the <bpt id="p2">[</bpt><ph id="ph1">`dotnet publish`</ph><ept id="p2">](../tools/dotnet-publish.md)</ept> command.</source>
          <target state="translated">Une fois que vous êtes prêt à déployer votre application, consultez les différentes <bpt id="p1">[</bpt>stratégies de déploiement<ept id="p1">](../deploying/index.md)</ept> pour les applications .NET Core et la commande <bpt id="p2">[</bpt><ph id="ph1">`dotnet publish`</ph><ept id="p2">](../tools/dotnet-publish.md)</ept>.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>See also</source>
          <target state="translated">Voir aussi</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Organizing and testing projects with the .NET Core CLI tools<ept id="p1">](testing-with-cli.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Organisation et test de projets avec les outils CLI .NET Core<ept id="p1">](testing-with-cli.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>