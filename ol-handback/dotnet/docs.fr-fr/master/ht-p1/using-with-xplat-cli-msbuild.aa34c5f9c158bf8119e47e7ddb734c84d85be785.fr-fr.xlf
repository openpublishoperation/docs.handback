<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-e631009" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">01b17021e79bcdb2dc69f97b709f4aa63dbab9aa</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\preview3\tutorials\using-with-xplat-cli-msbuild.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p1</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f4687c866d3e890d8a186aa37ff5cdea27ffe4b8</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">80690ec3287d1b867fca08669e2a6f0351ed22df</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Getting started with .NET Core on Windows/Linux/macOS using the command line (SDK Preview 3)</source>
          <target state="translated">Bien démarrer avec .NET Core sur Windows/Linux/Mac OS à l’aide de la ligne de commande (SDK Preview 3)</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Getting started with .NET Core on Windows, Linux, or macOS using the .NET Core command line interface (CLI)</source>
          <target state="translated">Bien démarrer avec .NET Core sur Windows, Linux ou macOS à l’aide de l’interface de ligne de commande (CLI)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Getting started with .NET Core on Windows/Linux/macOS using the command line (SDK Preview 3)</source>
          <target state="translated">Bien démarrer avec .NET Core sur Windows/Linux/Mac OS à l’aide de la ligne de commande (SDK Preview 3)</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This guide will show you how to use the .NET Core CLI tooling to build cross-platform console apps.</source>
          <target state="translated">Ce guide indique comment utiliser les outils d’interface de ligne de commande (CLI) .NET Core pour créer des applications console multiplateformes.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>It will start with the most basic console app and eventually span multiple projects, including testing.</source>
          <target state="translated">Il démarre avec l’application console la plus simple qui s’étend finalement sur plusieurs projets, notamment le test.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You'll add these features step-by-step, building on what you've already seen and built.</source>
          <target state="translated">Vous allez ajouter ces fonctionnalités pas à pas, en vous basant sur ce que vous avez déjà vu et créé.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>If you're unfamiliar with the .NET Core CLI toolset, read <bpt id="p1">[</bpt>the .NET Core SDK overview<ept id="p1">](../tools/dotnet.md)</ept>.</source>
          <target state="translated">Si vous n’êtes pas familiarisé avec l’ensemble d’outils CLI .NET Core, consultez <bpt id="p1">[</bpt>Vue d’ensemble du SDK .NET Core<ept id="p1">](../tools/dotnet.md)</ept>.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
          <target state="translated">Conditions préalables</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Before you begin, ensure you have <bpt id="p1">[</bpt>.NET Core CLI tooling Preview 3 or later<ept id="p1">](https://github.com/dotnet/core/blob/master/release-notes/preview3-download.md)</ept>.</source>
          <target state="translated">Avant de commencer, vérifiez que vous disposez des <bpt id="p1">[</bpt>outils d’interface de ligne de commande (CLI) .NET Core Preview 3 ou version ultérieure<ept id="p1">](https://github.com/dotnet/core/blob/master/release-notes/preview3-download.md)</ept>.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You'll also need a text editor.</source>
          <target state="translated">Vous aurez également besoin d’un éditeur de texte.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Hello, Console App!</source>
          <target state="translated">Application console Hello</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>First, navigate to or create a new folder with a name you like.</source>
          <target state="translated">Tout d’abord, accédez à un dossier ou créez-en un avec le nom de votre choix.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>"Hello" is the name chosen for the sample code, which can be found <bpt id="p1">[</bpt>here<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/console-apps/HelloMsBuild)</ept>.</source>
          <target state="translated">« Hello » est le nom choisi pour l’exemple de code qui se trouve <bpt id="p1">[</bpt>ici<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/console-apps/HelloMsBuild)</ept>.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Open up a command prompt and type the following:</source>
          <target state="translated">Ouvrez une invite de commandes, puis tapez les commandes suivantes :</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Let's do a quick walkthrough:</source>
          <target state="translated">Suivons une procédure pas à pas rapide :</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">`dotnet new`</ph><ept id="p1">](../tools/dotnet-new.md)</ept> creates an up-to-date <ph id="ph2">`Hello.csproj`</ph> project file with the dependencies necessary to build a console app.</source>
          <target state="translated"><bpt id="p1">[</bpt><ph id="ph1">`dotnet new`</ph><ept id="p1">](../tools/dotnet-new.md)</ept> crée un fichier projet <ph id="ph2">`Hello.csproj`</ph> à jour avec les dépendances nécessaires pour générer une application console.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>It also creates a <ph id="ph1">`Program.cs`</ph>, a basic file containing the entry point for the application.</source>
          <target state="translated">Il crée également <ph id="ph1">`Program.cs`</ph>, un fichier de base contenant le point d’entrée pour l’application.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Hello.csproj`</ph>:</source>
          <target state="translated"><ph id="ph1">`Hello.csproj`</ph>:</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The project file specifies everything that's needed to restore dependencies and build the program.</source>
          <target state="translated">Le fichier projet spécifie tout ce qui est nécessaire pour restaurer les dépendances et générer le programme.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Import`</ph> tag brings in some properties that are common to all .NET Core projects.</source>
          <target state="translated">La balise <ph id="ph1">`Import`</ph> apporte certaines propriétés qui sont communes à tous les projets .NET Core.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`OutputType`</ph> tag specifies that we're building an executable, in other words a console application.</source>
          <target state="translated">La balise <ph id="ph1">`OutputType`</ph> spécifie que nous générons un fichier exécutable, autrement dit une application console.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`TargetFramework`</ph> tag specifies what .NET runtime we're targeting.</source>
          <target state="translated">La balise <ph id="ph1">`TargetFramework`</ph> spécifie le runtime .NET que nous ciblons.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In an advance scenario, you can specify multiple target frameworks and build to all those in a single operation.</source>
          <target state="translated">Dans un scénario avancé, vous pouvez spécifier plusieurs frameworks cibles et y effectuer une génération globale en une seule opération.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In this tutorial, we'll stick to building only for .NET Core 1.0.</source>
          <target state="translated">Dans ce didacticiel, nous nous en tiendrons à une génération limitée à .NET Core 1.0.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Compile`</ph> tag tells the compiler to build all the files in the current directory and all its subdirectories that have the <ph id="ph2">`.cs`</ph> file extension, in other words all the C# files in the project.</source>
          <target state="translated">La balise <ph id="ph1">`Compile`</ph> indique au compilateur de générer tous les fichiers, dans le répertoire actif et dans tous ses sous-répertoires, qui ont l’extension <ph id="ph2">`.cs`</ph>, en d’autres termes les fichiers C# dans le projet.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In advanced scenarios, it is possible to exclude files, but in this tutorial, and in most simple scenarios, this line can be left unchanged.</source>
          <target state="translated">Dans les scénarios avancés, il est possible d’exclure des fichiers, mais dans ce didacticiel et dans la plupart des scénarios simples, cette ligne peut rester inchangée.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`EmbeddedResource`</ph> tag instructs the build system to embed localization files with the extension <ph id="ph2">`.resx`</ph> into the compiled executable.</source>
          <target state="translated">La balise <ph id="ph1">`EmbeddedResource`</ph> fait en sorte que le système de génération incorpore les fichiers de localisation avec l’extension <ph id="ph2">`.resx`</ph> au fichier exécutable compilé.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>We won't use that feature in this tutorial.</source>
          <target state="translated">Nous n’utiliserons pas cette fonctionnalité dans ce didacticiel.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`PackageReference`</ph> tags specify what dependency packages must be restored and included when building the application.</source>
          <target state="translated">Les balises <ph id="ph1">`PackageReference`</ph> spécifient les packages de dépendances qui doivent être restaurés et inclus pendant la génération de l’application.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Each package reference specifies the name of the package under the <ph id="ph1">`Include`</ph> attribute, and a version number.</source>
          <target state="translated">Chaque référence de package spécifie le nom du package sous l’attribut <ph id="ph1">`Include`</ph> et un numéro de version.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>In most advanced scenarios, you'll add more package references.</source>
          <target state="translated">La plupart des scénarios avancés comportent plusieurs références de package.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>It is also possible to reference other projects on disk.</source>
          <target state="translated">Il est également possible de référencer d’autres projets sur le disque.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Program.cs`</ph>:</source>
          <target state="translated"><ph id="ph1">`Program.cs`</ph>:</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The program starts by <ph id="ph1">`using System`</ph>, which means "bring everything in the <ph id="ph2">`System`</ph> namespace into scope for this file".</source>
          <target state="translated">Le programme commence par <ph id="ph1">`using System`</ph>, ce qui signifie « placer tout ce qui se trouve dans l’espace de noms <ph id="ph2">`System`</ph> dans la portée de ce fichier ».</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`System`</ph> namespace includes basic constructs such as <ph id="ph2">`string`</ph>, or numeric types.</source>
          <target state="translated">L’espace de noms <ph id="ph1">`System`</ph> inclut des constructions de base, telles que <ph id="ph2">`string`</ph>, ou des types numériques.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>We then define a namespace called "ConsoleApplication".</source>
          <target state="translated">Ensuite, nous définissons un espace de noms appelé « ConsoleApplication ».</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>You can change this to anything you want.</source>
          <target state="translated">Vous pouvez le modifier à votre gré.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>A class named "Program" is defined within that namespace, with a <ph id="ph1">`Main`</ph> method that takes an array of strings as its argument.</source>
          <target state="translated">Une classe nommée « Program » est définie dans cet espace de noms avec une méthode <ph id="ph1">`Main`</ph> qui accepte un tableau de chaînes comme argument.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This array will contain the list of arguments passed in when the compiled program will be called.</source>
          <target state="translated">Ce tableau contient la liste des arguments passés quand le programme compilé est appelé.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>As it is, this array is not used: all the program is doing is to write "Hello World!"</source>
          <target state="translated">Tel quel, ce tableau n’est pas utilisé : le programme se limite à écrire « Hello World! »</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>to the console.</source>
          <target state="translated">dans la console.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>We can make things a little more interesting by changing the <ph id="ph1">`Console.WriteLine`</ph> into the following code.</source>
          <target state="translated">Nous pouvons rendre les choses un peu plus intéressantes en modifiant la ligne de code <ph id="ph1">`Console.WriteLine`</ph> comme suit.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">`dotnet restore`</ph><ept id="p1">](../tools/dotnet-restore.md)</ept> calls into <bpt id="p2">[</bpt>NuGet<ept id="p2">](http://nuget.org)</ept> (.NET's package manager) to restore the tree of dependencies.</source>
          <target state="translated"><bpt id="p1">[</bpt><ph id="ph1">`dotnet restore`</ph><ept id="p1">](../tools/dotnet-restore.md)</ept> appelle <bpt id="p2">[</bpt>NuGet<ept id="p2">](http://nuget.org)</ept> (gestionnaire de package de .NET) pour restaurer l’arborescence de dépendances.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>NuGet analyzes the <ph id="ph1">`Hello.csproj`</ph> file, downloads the dependencies stated in the file (or grabs them from a cache on your machine), and writes the <ph id="ph2">`obj/project.assets.json`</ph> file.</source>
          <target state="translated">NuGet analyse le fichier <ph id="ph1">`Hello.csproj`</ph>, télécharge les dépendances indiquées dans le fichier (ou les récupère dans un cache sur votre ordinateur) et écrit le fichier <ph id="ph2">`obj/project.assets.json`</ph>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`project.assets.json`</ph> file is necessary to be able to compile and run.</source>
          <target state="translated">Le fichier <ph id="ph1">`project.assets.json`</ph> est nécessaire pour pouvoir effectuer la compilation et l’exécution.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`project.assets.json`</ph> file is a persisted and complete set of the graph of NuGet dependencies and other information describing an app.</source>
          <target state="translated">Le fichier <ph id="ph1">`project.assets.json`</ph> est un ensemble persistant et complet du graphique de dépendances NuGet et d’autres informations qui décrivent une application.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>This file is read by other tools, such as <ph id="ph1">`dotnet build`</ph> and <ph id="ph2">`dotnet run`</ph>, enabling them to process the source code with a correct set of NuGet dependencies and binding resolutions.</source>
          <target state="translated">Ce fichier est lu par d’autres outils, tels que <ph id="ph1">`dotnet build`</ph> et <ph id="ph2">`dotnet run`</ph>, ce qui leur permet de traiter le code source avec un ensemble approprié de dépendances NuGet et de résolutions de liaison.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">`dotnet run`</ph><ept id="p1">](../tools/dotnet-run.md)</ept> calls <ph id="ph2">`dotnet build`</ph> to ensure that the build targets have been built, and then calls <ph id="ph3">`dotnet &lt;assembly.dll&gt;`</ph> to run the target application.</source>
          <target state="translated"><bpt id="p1">[</bpt><ph id="ph1">`dotnet run`</ph><ept id="p1">](../tools/dotnet-run.md)</ept> appelle <ph id="ph2">`dotnet build`</ph> pour garantir que les cibles de génération ont été générées, puis appelle <ph id="ph3">`dotnet &lt;assembly.dll&gt;`</ph> pour exécuter l’application cible.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Alternatively, you can also execute <bpt id="p1">[</bpt><ph id="ph1">`dotnet build`</ph><ept id="p1">](../tools/dotnet-build.md)</ept> to compile the code without running the build console applications.</source>
          <target state="translated">Si vous préférez, vous pouvez exécuter <bpt id="p1">[</bpt><ph id="ph1">`dotnet build`</ph><ept id="p1">](../tools/dotnet-build.md)</ept> pour compiler le code sans exécuter les applications console de la build.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>This results in a <ph id="ph1">`bin/Debug/netcoreapp1.0/Hello.dll`</ph> compiled application that can be run with <ph id="ph2">`dotnet bin\Debug\netcoreapp1.0\Hello.dll`</ph> on Windows, and <ph id="ph3">`dotnet bin/Debug/netcoreapp1.0/Hello.dll`</ph> on other systems.</source>
          <target state="translated">Il en résulte une application compilée <ph id="ph1">`bin/Debug/netcoreapp1.0/Hello.dll`</ph> qui peut être exécutée avec <ph id="ph2">`dotnet bin\Debug\netcoreapp1.0\Hello.dll`</ph> sur Windows et <ph id="ph3">`dotnet bin/Debug/netcoreapp1.0/Hello.dll`</ph> sur les autres systèmes.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>You may specify an additional parameter on the command-line (assuming you are on Windows):</source>
          <target state="translated">Vous pouvez spécifier un paramètre supplémentaire sur la ligne de commande (en supposant que vous êtes sur Windows) :</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>As an advanced scenario, it's possible to build the application as a self-contained set of platform-specific files that can be deployed and run to a machine that doesn't necessarily have .NET Core installed.</source>
          <target state="translated">Dans le cadre d’un scénario avancé, vous pouvez générer l’application comme un ensemble autonome de fichiers spécifiques à la plateforme qui peuvent être déployés et exécutés sur un ordinateur sur lequel .NET Core n’est pas nécessairement installé.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>.NET Core Application Deployment<ept id="p1">](../deploying/index.md)</ept> for details.</source>
          <target state="translated">Pour plus d’informations, consultez <bpt id="p1">[</bpt>Déploiement d’applications .NET Core<ept id="p1">](../deploying/index.md)</ept>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Augmenting the program</source>
          <target state="translated">Augmentation du programme</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Let's change the file just a little bit.</source>
          <target state="translated">Nous allons modifier juste un peu le fichier.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Fibonacci numbers are fun, so let's try that out:</source>
          <target state="translated">Les nombres Fibonacci sont amusants. Donc, faisons un essai :</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Program.cs`</ph>:</source>
          <target state="translated"><ph id="ph1">`Program.cs`</ph>:</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>And running the program (assuming you're on Windows, and have changed the project directory name to Fibonacci):</source>
          <target state="translated">Et l’exécution du programme (en supposant que vous êtes sur Windows et que vous avez remplacé le nom de répertoire du projet par Fibonacci) :</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>And that's it!</source>
          <target state="translated">Et voilà !</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>You can augment <ph id="ph1">`Program.cs`</ph> any way you like.</source>
          <target state="translated">Vous pouvez augmenter <ph id="ph1">`Program.cs`</ph> comme vous le souhaitez.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Adding some new files</source>
          <target state="translated">Ajouter de nouveaux fichiers</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Single files are fine for simple one-off programs, but chances are you're going to want to break things out into multiple files if you're building anything which has multiple components.</source>
          <target state="translated">Les fichiers uniques conviennent aux programmes ponctuels simples, mais vous voulez peut-être diviser les éléments en plusieurs fichiers si vous créez quelque chose qui comporte plusieurs composants.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Multiple files are a way to do that.</source>
          <target state="translated">Pour cela, vous pouvez utiliser plusieurs fichiers.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Create a new file and give it a unique namespace:</source>
          <target state="translated">Créez un fichier et attribuez-lui un espace de noms unique :</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Next, include it in your <ph id="ph1">`Program.cs`</ph> file:</source>
          <target state="translated">Ensuite, incluez-le dans votre fichier <ph id="ph1">`Program.cs`</ph> :</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>And finally, you can build it:</source>
          <target state="translated">Et enfin, vous pouvez le générer :</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Now the fun part: making the new file do something!</source>
          <target state="translated">Maintenant, la partie amusante : faire faire quelque chose au nouveau fichier !</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Example: A Fibonacci Sequence Generator</source>
          <target state="translated">Exemple : Un générateur de séquence Fibonacci</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Let's say you want to build off of the previous Fibonacci example by caching some Fibonacci values and add some recursive flair.</source>
          <target state="translated">Supposons que vous souhaitez vous appuyer sur l’exemple Fibonacci précédent en mettant en cache certaines valeurs Fibonacci et ajouter une touche récursive.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Your code for a <bpt id="p1">[</bpt>better Fibonacci example<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/console-apps/FibonacciBetterMsBuild)</ept> might use a new <ph id="ph1">`FibonacciGenerator.cs`</ph> file with the following code.</source>
          <target state="translated">Votre code pour un <bpt id="p1">[</bpt>meilleur exemple Fibonacci<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/console-apps/FibonacciBetterMsBuild)</ept> peut utiliser un nouveau fichier <ph id="ph1">`FibonacciGenerator.cs`</ph> avec le code suivant.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Now adjust the <ph id="ph1">`Main()`</ph> method in your <ph id="ph2">`Program.cs`</ph> file as shown below.</source>
          <target state="translated">Ajustez maintenant la méthode <ph id="ph1">`Main()`</ph> dans votre fichier <ph id="ph2">`Program.cs`</ph>comme indiqué ci-dessous.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Finally, run it!</source>
          <target state="translated">Pour finir, exécutez-la !</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>And that's it!</source>
          <target state="translated">Et voilà !</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Conclusion</source>
          <target state="translated">Conclusion</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Hopefully this guide has helped you learn how to create a .NET Core console app, from the basics all the way up to a multi-project system with unit tests.</source>
          <target state="translated">Nous espérons que ce guide vous a permis de découvrir comment créer une application console .NET Core, depuis les concepts de base jusqu’à un système à projets multiples comprenant des tests unitaires.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The next step is to create awesome console apps of your own!</source>
          <target state="translated">L’étape suivante consiste à créer vos propres applications console !</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>If a more advanced example of a console app interests you, check out the next tutorial: <bpt id="p1">[</bpt>Organizing and testing projects with the .NET Core command line (SDK Preview 3)<ept id="p1">](using-with-xplat-cli-msbuild-folders.md)</ept>.</source>
          <target state="translated">Pour découvrir un exemple d’application console plus avancé, consultez le didacticiel suivant : <bpt id="p1">[</bpt>Organiser et tester des projets avec la ligne de commande .NET Core (SDK Preview 3)<ept id="p1">](using-with-xplat-cli-msbuild-folders.md)</ept>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>