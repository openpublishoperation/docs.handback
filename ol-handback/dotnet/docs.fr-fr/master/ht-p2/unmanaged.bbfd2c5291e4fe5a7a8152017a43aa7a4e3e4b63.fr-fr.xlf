<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-eac019f" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">692916bc5a9afd55dc4e3d0249386d2e3750895f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\garbagecollection\unmanaged.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p2</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f24afcc5d03776195e2a0871ffacc3da8df6e696</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">19a2bb7df3a9573ffd2ca00bf5181e0d368e3656</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Cleaning up unmanaged resources</source>
          <target state="translated">Nettoyage de ressources non managées</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Cleaning up unmanaged resources</source>
          <target state="translated">Nettoyage de ressources non managées</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Cleaning up unmanaged resources</source>
          <target state="translated">Nettoyage de ressources non managées</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For the majority of the objects that your app creates, you can rely on the .NET garbage collector to handle memory management.</source>
          <target state="translated">Pour la majorité des objets créés par votre application, vous pouvez laisser au Garbage collector .NET le soin de gérer les tâches de gestion de mémoire.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>However, when you create objects that include unmanaged resources, you must explicitly release those resources when you finish using them in your app.</source>
          <target state="translated">Lorsque vous créez des objets qui incluent des ressources non managées, vous devez libérer explicitement ces ressources lorsque vous avez fini de les utiliser dans votre application.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The most common types of unmanaged resource are objects that wrap operating system resources, such as files, windows, network connections, or database connections.</source>
          <target state="translated">Les types les plus courants de ressources non managées sont des objets qui encapsulent les ressources du système d'exploitation, telles que les fichiers, les fenêtres, les connexions réseau ou les connexions de bases de données.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Although the garbage collector is able to track the lifetime of an object that encapsulates an unmanaged resource, it doesn't know how to release and clean up the unmanaged resource.</source>
          <target state="translated">Bien que le récupérateur de mémoire puisse assurer le suivi de la durée de vie d'un objet qui encapsule une ressource non managée, il ne sait pas comment libérer et nettoyer la ressource non managée.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If your types use unmanaged resources, you should do the following:</source>
          <target state="translated">Si vos types utilisent les ressources non managées, procédez comme suit :</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Implement the dispose pattern.</source>
          <target state="translated">Implémentez le modèle de suppression.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This requires that you provide an <bpt id="p1">[</bpt>IDisposable.Dispose<ept id="p1">](xref:System.IDisposable.Dispose)</ept> implementation to enable the deterministic release of unmanaged resources.</source>
          <target state="translated">Pour ce faire, vous devez fournir une implémentation de <bpt id="p1">[</bpt>IDisposable.Dispose<ept id="p1">](xref:System.IDisposable.Dispose)</ept> pour activer la mise en production déterministe des ressources non managées.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A consumer of your type calls <bpt id="p1">[</bpt>Dispose<ept id="p1">](xref:System.IDisposable.Dispose)</ept> when the object (and the resources it uses) is no longer needed.</source>
          <target state="translated">Un consommateur de votre type appelle la méthode <bpt id="p1">[</bpt>Dispose<ept id="p1">](xref:System.IDisposable.Dispose)</ept> quand l’objet (et les ressources qu’il utilise) ne sont plus nécessaires.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Dispose<ept id="p1">](xref:System.IDisposable.Dispose)</ept> method immediately releases the unmanaged resources.</source>
          <target state="translated">La méthode <bpt id="p1">[</bpt>Dispose<ept id="p1">](xref:System.IDisposable.Dispose)</ept> libère immédiatement les ressources non managées.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Provide for your unmanaged resources to be released in the event that a consumer of your type forgets to call <bpt id="p1">[</bpt>Dispose<ept id="p1">](xref:System.IDisposable.Dispose)</ept>.</source>
          <target state="translated">Prévoyez que vos ressources non managées soient libérées si un consommateur de votre type oublie d’appeler la méthode <bpt id="p1">[</bpt>Dispose<ept id="p1">](xref:System.IDisposable.Dispose)</ept>.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>There are two ways to do this:</source>
          <target state="translated">Il existe deux façons d'effectuer cette opération :</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Use a safe handle to wrap your unmanaged resource.</source>
          <target state="translated">Utilisez un handle sécurisé pour encapsuler votre ressource non managée.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This is the recommended technique.</source>
          <target state="translated">Il s'agit de la technique recommandée.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Safe handles are derived from the <bpt id="p1">[</bpt>System.Runtime.InteropServices.SafeHandle<ept id="p1">](xref:System.Runtime.InteropServices.SafeHandle)</ept> class and include a robust <bpt id="p2">[</bpt>Finalize<ept id="p2">](xref:System.Object.Finalize)</ept> method.</source>
          <target state="translated">Les handles sécurisés sont dérivés de la classe <bpt id="p1">[</bpt>System.Runtime.InteropServices.SafeHandle<ept id="p1">](xref:System.Runtime.InteropServices.SafeHandle)</ept> et incluent une méthode <bpt id="p2">[</bpt>Finalize<ept id="p2">](xref:System.Object.Finalize)</ept> fiable.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>When you use a safe handle, you simply implement the <bpt id="p1">[</bpt>IDisposable<ept id="p1">](xref:System.IDisposable)</ept> interface and call your safe handle's <bpt id="p2">[</bpt>Dispose<ept id="p2">](xref:System.IDisposable.Dispose)</ept> method in your <bpt id="p3">[</bpt>IDisposable.Dispose<ept id="p3">](xref:System.IDisposable.Dispose)</ept> implementation.</source>
          <target state="translated">Lorsque vous utilisez un handle sécurisé, implémentez simplement l’interface <bpt id="p1">[</bpt>IDisposable<ept id="p1">](xref:System.IDisposable)</ept> et appelez la méthode <bpt id="p2">[</bpt>Dispose<ept id="p2">](xref:System.IDisposable.Dispose)</ept> de votre handle sécurisé dans votre implémentation de <bpt id="p3">[</bpt>IDisposable.Dispose<ept id="p3">](xref:System.IDisposable.Dispose)</ept>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The safe handle's finalizer is called automatically by the garbage collector if its <bpt id="p1">[</bpt>Dispose<ept id="p1">](xref:System.IDisposable.Dispose)</ept> method is not called.</source>
          <target state="translated">Le finaliseur du handle sécurisé est appelé automatiquement par le Garbage collector si sa méthode <bpt id="p1">[</bpt>Dispose<ept id="p1">](xref:System.IDisposable.Dispose)</ept> n’est pas appelée.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>—or—</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Override the <bpt id="p1">[</bpt>Object.Finalize<ept id="p1">](xref:System.Object.Finalize)</ept> method.</source>
          <target state="translated">Remplacez la méthode <bpt id="p1">[</bpt>Object.Finalize<ept id="p1">](xref:System.Object.Finalize)</ept>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Finalization enables the non-deterministic release of unmanaged resources when the consumer of a type fails to call <bpt id="p1">[</bpt>IDisposable.Dispose<ept id="p1">](xref:System.IDisposable.Dispose)</ept> to dispose of them deterministically.</source>
          <target state="translated">La finalisation active la mise en production non déterministe des ressources non managées quand le consommateur d’un type n’appelle pas la méthode <bpt id="p1">[</bpt>IDisposable.Dispose<ept id="p1">](xref:System.IDisposable.Dispose)</ept> pour les supprimer de manière déterministe.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>However, because object finalization can be a complex and error-prone operation, we recommend that you use a safe handle instead of providing your own finalizer.</source>
          <target state="translated">Toutefois, comme la finalisation de l'objet peut s'avérer être une opération complexe et susceptible d'engendrer des erreurs, nous vous recommandons d'utiliser un handle sécurisé au lieu de fournir votre propre finaliseur.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Consumers of your type can then call your <bpt id="p1">[</bpt>IDisposable.Dispose<ept id="p1">](xref:System.IDisposable.Dispose)</ept> implementation directly to free memory used by unmanaged resources.</source>
          <target state="translated">Les consommateurs de votre type peuvent ensuite appeler directement votre implémentation de <bpt id="p1">[</bpt>IDisposable.Dispose<ept id="p1">](xref:System.IDisposable.Dispose)</ept>pour libérer la mémoire utilisée par les ressources non managées.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>When you properly implement a <bpt id="p1">[</bpt>Dispose<ept id="p1">](xref:System.IDisposable.Dispose)</ept> method, either your safe handle's <bpt id="p2">[</bpt>Finalize<ept id="p2">](xref:System.Object.Finalize)</ept> method or your own override of the <bpt id="p3">[</bpt>Object.Finalize<ept id="p3">](xref:System.Object.Finalize)</ept> method becomes a safeguard to clean up resources in the event that the <bpt id="p4">[</bpt>Dispose<ept id="p4">](xref:System.IDisposable.Dispose)</ept> method is not called.</source>
          <target state="translated">Lorsque vous implémentez correctement une méthode <bpt id="p1">[</bpt>Dispose<ept id="p1">](xref:System.IDisposable.Dispose)</ept>, la méthode <bpt id="p2">[</bpt>Finalize<ept id="p2">](xref:System.Object.Finalize)</ept> de votre handle sécurisé ou votre propre substitution de la méthode <bpt id="p3">[</bpt>Object.Finalize<ept id="p3">](xref:System.Object.Finalize)</ept>devient un dispositif de protection pour nettoyer les ressources si la méthode <bpt id="p4">[</bpt>Dispose<ept id="p4">](xref:System.IDisposable.Dispose)</ept> n’est pas appelée.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In This Section</source>
          <target state="translated">Dans cette section</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Implementing a dispose method<ept id="p1">](implementing-dispose.md)</ept> - Describes how to implement the dispose pattern for releasing unmanaged resources.</source>
          <target state="translated"><bpt id="p1">[</bpt>Implémentation d’une méthode Dispose<ept id="p1">](implementing-dispose.md)</ept> : explique comment implémenter le modèle de suppression pour libérer les ressources non managées.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Using objects that implement IDisposable<ept id="p1">](using-objects.md)</ept> - Describes how consumers of a type ensure that its Dispose implementation is called.</source>
          <target state="translated"><bpt id="p1">[</bpt>Utilisation d’objets implémentant IDisposable<ept id="p1">](using-objects.md)</ept> : décrit comment les consommateurs d’un type vérifient que son implémentation de la méthode Dispose est appelée.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>We recommend using the C# using statement or the Visual Basic Using statement to do this.</source>
          <target state="translated">Pour ce faire, nous vous recommandons d’utiliser l’instruction using en C# ou l’instruction Using en Visual Basic.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Reference</source>
          <target state="translated">Référence</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.IDisposable<ept id="p1">](xref:System.IDisposable)</ept> - Defines the <ph id="ph1">`Dispose`</ph> method for releasing unmanaged resources.</source>
          <target state="translated"><bpt id="p1">[</bpt>System.IDisposable<ept id="p1">](xref:System.IDisposable)</ept> définit la méthode <ph id="ph1">`Dispose`</ph> pour libérer des ressources non managées.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Object.Finalize<ept id="p1">](xref:System.Object.Finalize)</ept> - Provides for object finalization if unmanaged resources are not released by the <ph id="ph1">`Dispose`</ph> method.</source>
          <target state="translated"><bpt id="p1">[</bpt>Object.Finalize<ept id="p1">](xref:System.Object.Finalize)</ept> prévoit la finalisation de l’objet si les ressources non managées ne sont pas libérées par la méthode <ph id="ph1">`Dispose`</ph>.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>GC.SuppressFinalize<ept id="p1">](xref:System.GC#System_GC_SuppressFinalize_System_Object_)</ept> - Suppresses finalization.</source>
          <target state="translated"><bpt id="p1">[</bpt>GC.SuppressFinalize<ept id="p1">](xref:System.GC#System_GC_SuppressFinalize_System_Object_)</ept> : supprime la finalisation.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This method is customarily called from a <ph id="ph1">`Dispose`</ph> method to prevent a finalizer from executing.</source>
          <target state="translated">Cette méthode est généralement appelée à partir d'une méthode <ph id="ph1">`Dispose`</ph> pour empêcher un finaliseur de s'exécuter.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>