<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-eac019f" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">51655742b8975c84eae3f58c4ef0f7381a0bed6b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\garbagecollection\using-objects.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p2</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1161936b989bf247b72dd8b1cac32b7ae1e5b7c3</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f79f29ab662e289abd0023cf979e39d9988af6c0</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Using objects that implement IDisposable</source>
          <target state="translated">Utilisation d’objets implémentant IDisposable</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Using objects that implement IDisposable</source>
          <target state="translated">Utilisation d’objets implémentant IDisposable</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Using objects that implement IDisposable</source>
          <target state="translated">Utilisation d’objets implémentant IDisposable</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The common language runtime's garbage collector reclaims the memory used by unmanaged objects, but types that use unmanaged resources implement the <bpt id="p1">[</bpt>IDisposable<ept id="p1">](xref:System.IDisposable)</ept> interface to allow this unmanaged memory to be reclaimed.</source>
          <target state="translated">Le Garbage collector du Common Language Runtime libère la mémoire utilisée par les objets non managés, mais les types qui utilisent les ressources non managées implémentent l’interface <bpt id="p1">[</bpt>IDisposable<ept id="p1">](xref:System.IDisposable)</ept> pour permettre la récupération de cette mémoire non managée.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>When you finish using an object that implements <bpt id="p1">[</bpt>IDisposable<ept id="p1">](xref:System.IDisposable)</ept>, you should call the object's <bpt id="p2">[</bpt>IDisposable.Dispose<ept id="p2">](xref:System.IDisposable.Dispose)</ept> implementation.</source>
          <target state="translated">Une fois que vous avez fini d’utiliser un objet qui implémente <bpt id="p1">[</bpt>IDisposable<ept id="p1">](xref:System.IDisposable)</ept>, vous devez appeler l’implémentation de <bpt id="p2">[</bpt>IDisposable.Dispose<ept id="p2">](xref:System.IDisposable.Dispose)</ept> de l’objet.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You can do this in one of two ways:</source>
          <target state="translated">Vous pouvez le faire de deux façons :</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>With the C# <ph id="ph1">`using`</ph> statement or the Visual Basic <ph id="ph2">`Using`</ph> statement.</source>
          <target state="translated">Avec l’instruction <ph id="ph1">`using`</ph>C# ou l’instruction <ph id="ph2">`Using`</ph>Visual Basic.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>By implementing a <ph id="ph1">`try/finally`</ph> block.</source>
          <target state="translated">En implémentant un bloc <ph id="ph1">`try/finally`</ph>.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The using statement</source>
          <target state="translated">Instruction using</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`using`</ph> statement in C# and the <ph id="ph2">`Using`</ph> statement in Visual Basic simplify the code that you must write to create and clean up an object.</source>
          <target state="translated">L’instruction <ph id="ph1">`using`</ph>en C# et l’instruction <ph id="ph2">`Using`</ph> en Visual Basic simplifient le code que vous devez écrire pour créer et nettoyer un objet.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`using`</ph> statement obtains one or more resources, executes the statements that you specify, and automatically disposes of the object.</source>
          <target state="translated">L’instruction <ph id="ph1">`using`</ph> obtient une ou plusieurs ressources, exécute les instructions que vous spécifiez, puis supprime automatiquement l’objet.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>However, the <ph id="ph1">`using`</ph> statement is useful only for objects that are used within the scope of the method in which they are constructed.</source>
          <target state="translated">Toutefois, l’instruction <ph id="ph1">`using`</ph> est utile uniquement pour les objets utilisés dans la portée de la méthode dans laquelle elles sont construites.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The following example uses the <ph id="ph1">`using`</ph> statement to create and release a <bpt id="p1">[</bpt>System.IO.StreamReader<ept id="p1">](xref:System.IO.StreamReader)</ept> object.</source>
          <target state="translated">L’exemple suivant utilise l’instruction <ph id="ph1">`using`</ph> pour créer et libérer un objet <bpt id="p1">[</bpt>System.IO.StreamReader<ept id="p1">](xref:System.IO.StreamReader)</ept>.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Note that although the <bpt id="p1">[</bpt>StreamReader<ept id="p1">](xref:System.IO.StreamReader)</ept> class implements the <bpt id="p2">[</bpt>IDisposable<ept id="p2">](xref:System.IDisposable)</ept> interface, which indicates that it uses an unmanaged resource, the example doesn't explicitly call the <bpt id="p3">[</bpt>StreamReader.Dispose<ept id="p3">](xref:System.IO.StreamReader.Dispose(System.Boolean))</ept> method.</source>
          <target state="translated">Notez que, bien que la classe <bpt id="p1">[</bpt>StreamReader<ept id="p1">](xref:System.IO.StreamReader)</ept> implémente l’interface <bpt id="p2">[</bpt>IDisposable<ept id="p2">](xref:System.IDisposable)</ept>, ce qui signifie qu’elle utilise une ressource non managée, l’exemple n’appelle pas explicitement la méthode <bpt id="p3">[</bpt>StreamReader.Dispose<ept id="p3">](xref:System.IO.StreamReader.Dispose(System.Boolean))</ept>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>When the C# or Visual Basic compiler encounters the <ph id="ph1">`using`</ph> statement, it emits intermediate language (IL) that is equivalent to the following code that explicitly contains a <ph id="ph2">`try/finally`</ph> block.</source>
          <target state="translated">Quand le compilateur C# ou Visual Basic rencontre l’instruction <ph id="ph1">`using`</ph>, il émet en langage intermédiaire qui est équivalent au code suivant contenant explicitement un bloc <ph id="ph2">`try/finally`</ph>.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The C# <ph id="ph1">`using`</ph> statement also allows you to acquire multiple resources in a single statement, which is internally equivalent to nested using statements.</source>
          <target state="translated">L’instruction <ph id="ph1">`using`</ph> en C# vous permet d’acquérir plusieurs ressources dans une seule instruction, ce qui revient en interne à plusieurs instructions using imbriquées.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The following example instantiates two <bpt id="p1">[</bpt>StreamReader<ept id="p1">](xref:System.IO.StreamReader)</ept> objects to read the contents of two different files.</source>
          <target state="translated">L’exemple suivant instancie deux objets <bpt id="p1">[</bpt>StreamReader<ept id="p1">](xref:System.IO.StreamReader)</ept> pour lire le contenu de deux fichiers différents.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Try/finally block</source>
          <target state="translated">Bloc try/finally</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Instead of wrapping a <ph id="ph1">`try/finally`</ph> block in a <ph id="ph2">`using`</ph> statement, you may choose to implement the <ph id="ph3">`try/finally`</ph> block directly.</source>
          <target state="translated">Au lieu d’encapsuler un bloc <ph id="ph1">`try/finally`</ph> dans une instruction <ph id="ph2">`using`</ph>, vous pouvez choisir d’implémenter le bloc <ph id="ph3">`try/finally`</ph> directement.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This may be your personal coding style, or you might want to do this for one of the following reasons:</source>
          <target state="translated">Il peut s'agir de votre style personnel en matière de codage, ou vous pouvez procéder ainsi pour l'une des raisons suivantes :</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>To include a <ph id="ph1">`catch`</ph> block to handle any exceptions thrown in the <ph id="ph2">`try`</ph> block.</source>
          <target state="translated">Pour insérer un bloc <ph id="ph1">`catch`</ph> afin de gérer toutes les exceptions levées dans le bloc <ph id="ph2">`try`</ph>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Otherwise, any exceptions thrown by the <ph id="ph1">`using`</ph> statement are unhandled, as are any exceptions thrown within the <ph id="ph2">`using`</ph> block if a <ph id="ph3">`try/catch`</ph> block isn't present.</source>
          <target state="translated">Sinon, toutes les exceptions levées par l’instruction <ph id="ph1">`using`</ph> ne sont pas gérées, de même que toutes les exceptions levées dans le bloc <ph id="ph2">`using`</ph> si un bloc <ph id="ph3">`try/catch`</ph> n’est pas présent.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>To instantiate an object that implements <bpt id="p1">[</bpt>IDisposable<ept id="p1">](xref:System.IDisposable)</ept> whose scope is not local to the block within which it is declared.</source>
          <target state="translated">Pour instancier un objet qui implémente <bpt id="p1">[</bpt>IDisposable<ept id="p1">](xref:System.IDisposable)</ept> dont la portée n’est pas locale au bloc dans lequel elle est déclarée.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The following example is similar to the previous example, except that it uses a <ph id="ph1">`try/catch/finally`</ph> block to instantiate, use, and dispose of a <bpt id="p1">[</bpt>StreamReader<ept id="p1">](xref:System.IO.StreamReader)</ept> object, and to handle any exceptions thrown by the <bpt id="p2">[</bpt>StreamReader<ept id="p2">](xref:System.IO.StreamReader)</ept> constructor and its <bpt id="p3">[</bpt>ReadToEnd<ept id="p3">](xref:System.IO.StreamReader.ReadToEnd)</ept> method.</source>
          <target state="translated">L’exemple suivant est similaire à l’exemple précédent, mais il utilise un bloc <ph id="ph1">`try/catch/finally`</ph> pour instancier, utiliser et supprimer un objet <bpt id="p1">[</bpt>StreamReader<ept id="p1">](xref:System.IO.StreamReader)</ept>, ainsi que pour gérer les exceptions levées par le constructeur <bpt id="p2">[</bpt>StreamReader<ept id="p2">](xref:System.IO.StreamReader)</ept> et sa méthode <bpt id="p3">[</bpt>ReadToEnd<ept id="p3">](xref:System.IO.StreamReader.ReadToEnd)</ept>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Note that the code in the <ph id="ph1">`finally`</ph> block checks that the object that implements <bpt id="p1">[</bpt>IDisposable<ept id="p1">](xref:System.IDisposable)</ept> isn't <ph id="ph2">`null`</ph> before it calls the <bpt id="p2">[</bpt>Dispose<ept id="p2">](xref:System.IDisposable.Dispose)</ept> method.</source>
          <target state="translated">Notez que le code du bloc <ph id="ph1">`finally`</ph> vérifie que l’objet qui implémente <bpt id="p1">[</bpt>IDisposable<ept id="p1">](xref:System.IDisposable)</ept> n’est pas <ph id="ph2">`null`</ph> avant d’appeler la méthode <bpt id="p2">[</bpt>Dispose<ept id="p2">](xref:System.IDisposable.Dispose)</ept>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Failure to do this can result in a <bpt id="p1">[</bpt>NullReferenceException<ept id="p1">](xref:System.NullReferenceException)</ept> exception at run time.</source>
          <target state="translated">La non-exécution de cette opération peut générer une exception <bpt id="p1">[</bpt>NullReferenceException<ept id="p1">](xref:System.NullReferenceException)</ept> au moment de l’exécution.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You can follow this basic pattern if you choose to implement or must implement a <ph id="ph1">`try/finally`</ph> block, because your programming language doesn't support a <ph id="ph2">`using`</ph> statement but does allow direct calls to the <bpt id="p1">[</bpt>Dispose<ept id="p1">](xref:System.IDisposable.Dispose)</ept> method.</source>
          <target state="translated">Vous pouvez suivre ce modèle de base si vous choisissez d’implémenter (ou que vous devez implémenter) un bloc <ph id="ph1">`try/finally`</ph>, car votre langage de programmation ne prend pas en charge l’instruction <ph id="ph2">`using`</ph> mais autorise les appels directs à la méthode <bpt id="p1">[</bpt>Dispose<ept id="p1">](xref:System.IDisposable.Dispose)</ept>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">Voir aussi</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Cleaning up unmanaged resources<ept id="p1">](unmanaged.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Nettoyage de ressources non managées<ept id="p1">](unmanaged.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>