<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b50b9c7283ddd4d3f8484854bdffff3d76181c9f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\language-reference\operators\await-operator.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">71f89e30a22fedd22c44b0cca01bbad2f317cc27</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5000d2b63426186cf649c3dd7579845ef11dfe50</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Await Operator (Visual Basic) | Microsoft Docs</source>
          <target state="translated">Await, opérateur (Visual Basic) | Documents Microsoft</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Await Operator (Visual Basic)</source>
          <target state="translated">Await, opérateur (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You apply the <ph id="ph1">`Await`</ph> operator to an operand in an asynchronous method or lambda expression to suspend execution of the method until the awaited task completes.</source>
          <target state="translated">Vous appliquez le <ph id="ph1">`Await`</ph> opérateur à un opérande dans une expression lambda ou de méthode asynchrone pour suspendre l’exécution de la méthode jusqu'à ce que la tâche attendue se termine.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The task represents ongoing work.</source>
          <target state="translated">La tâche représente un travail en cours.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The method in which <ph id="ph1">`Await`</ph> is used must have an <bpt id="p1">[</bpt>Async<ept id="p1">](../../../visual-basic/language-reference/modifiers/async.md)</ept> modifier.</source>
          <target state="translated">La méthode dans laquelle <ph id="ph1">`Await`</ph> utilisé doit avoir un <bpt id="p1">[</bpt>Async<ept id="p1">](../../../visual-basic/language-reference/modifiers/async.md)</ept> modificateur.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Such a method, defined by using the <ph id="ph1">`Async`</ph> modifier, and usually containing one or more <ph id="ph2">`Await`</ph> expressions, is referred to as an <bpt id="p1">*</bpt>async method<ept id="p1">*</ept>.</source>
          <target state="translated">Une telle méthode, définie à l’aide de la <ph id="ph1">`Async`</ph> modificateur et généralement contenant un ou plusieurs <ph id="ph2">`Await`</ph> expressions, est appelé un <bpt id="p1">*</bpt>méthode async<ept id="p1">*</ept>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Async`</ph> and <ph id="ph2">`Await`</ph> keywords were introduced in Visual Studio 2012.</source>
          <target state="translated">Les mots clés <ph id="ph1">`Async`</ph> et <ph id="ph2">`Await`</ph> ont été introduites dans Visual Studio 2012.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For an introduction to async programming, see <bpt id="p1">[</bpt>Asynchronous Programming with Async and Await<ept id="p1">](../../../visual-basic/programming-guide/concepts/async/index.md)</ept>.</source>
          <target state="translated">Pour une introduction à la programmation asynchrone, consultez <bpt id="p1">[</bpt>programmation asynchrone avec Async et Await<ept id="p1">](../../../visual-basic/programming-guide/concepts/async/index.md)</ept>.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Typically, the task to which you apply the <ph id="ph1">`Await`</ph> operator is the return value from a call to a method that implements the <bpt id="p1">[</bpt>Task-Based Asynchronous Pattern<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=204847)</ept>, that is, a &lt;xref:System.Threading.Tasks.Task&gt; or a &lt;xref:System.Threading.Tasks.Task%601&gt;.</source>
          <target state="translated">En règle générale, la tâche à laquelle vous appliquez le <ph id="ph1">`Await`</ph> opérateur est la valeur de retour d’un appel à une méthode qui implémente le <bpt id="p1">[</bpt>modèle asynchrone basé sur des tâches<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=204847)</ept>, autrement dit, un &lt;xref:System.Threading.Tasks.Task&gt;ou un &lt;xref:System.Threading.Tasks.Task%601&gt;.&lt;/xref:System.Threading.Tasks.Task%601&gt; &lt;/xref:System.Threading.Tasks.Task&gt;</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In the following code, the &lt;xref:System.Net.Http.HttpClient&gt; method &lt;xref:System.Net.Http.HttpClient.GetByteArrayAsync%2A&gt; returns <ph id="ph1">`getContentsTask`</ph>, a <ph id="ph2">`Task(Of Byte())`</ph>.</source>
          <target state="translated">Dans le code suivant, la &lt;xref:System.Net.Http.HttpClient&gt;méthode &lt;xref:System.Net.Http.HttpClient.GetByteArrayAsync%2A&gt;retourne <ph id="ph1">`getContentsTask`</ph>, un <ph id="ph2">`Task(Of Byte())`</ph>.&lt;/xref:System.Net.Http.HttpClient.GetByteArrayAsync%2A&gt; &lt;/xref:System.Net.Http.HttpClient&gt;</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The task is a promise to produce the actual byte array when the operation is complete.</source>
          <target state="translated">La tâche est une promesse de produire le tableau d’octets réel lorsque l’opération est terminée.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Await`</ph> operator is applied to <ph id="ph2">`getContentsTask`</ph> to suspend execution in <ph id="ph3">`SumPageSizesAsync`</ph> until <ph id="ph4">`getContentsTask`</ph> is complete.</source>
          <target state="translated">L'opérateur <ph id="ph1">`Await`</ph> est appliqué à <ph id="ph2">`getContentsTask`</ph> pour suspendre l'exécution dans <ph id="ph3">`SumPageSizesAsync`</ph> jusqu'à ce que <ph id="ph4">`getContentsTask`</ph> soit terminé.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In the meantime, control is returned to the caller of <ph id="ph1">`SumPageSizesAsync`</ph>.</source>
          <target state="translated">Entre-temps, le contrôle revient à l'appelant de <ph id="ph1">`SumPageSizesAsync`</ph>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`getContentsTask`</ph> is finished, the <ph id="ph2">`Await`</ph> expression evaluates to a byte array.</source>
          <target state="translated">Quand <ph id="ph1">`getContentsTask`</ph> est terminé, l'expression <ph id="ph2">`Await`</ph> s'évalue en tableau d'octets.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>0<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>0<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For the complete example, see <bpt id="p1">[</bpt>Walkthrough: Accessing the Web by Using Async and Await<ept id="p1">](../../../visual-basic/programming-guide/concepts/async/walkthrough-accessing-the-web-by-using-async-and-await.md)</ept>.</source>
          <target state="translated">Pour un exemple complet, consultez la page <bpt id="p1">[</bpt>procédure pas à pas : accès Web à l’aide de Async et Await<ept id="p1">](../../../visual-basic/programming-guide/concepts/async/walkthrough-accessing-the-web-by-using-async-and-await.md)</ept>.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You can download the sample from <bpt id="p1">[</bpt>Developer Code Samples<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=255191&amp;clcid=0x409)</ept> on the Microsoft website.</source>
          <target state="translated">Vous pouvez télécharger l’exemple à partir de <bpt id="p1">[</bpt>exemples de Code développeur<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=255191&amp;clcid=0x409)</ept> sur le site Web Microsoft.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The example is in the AsyncWalkthrough_HttpClient project.</source>
          <target state="translated">L'exemple est dans le projet AsyncWalkthrough_HttpClient.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Await`</ph> is applied to the result of a method call that returns a <ph id="ph2">`Task(Of TResult)`</ph>, the type of the <ph id="ph3">`Await`</ph> expression is TResult.</source>
          <target state="translated">Si <ph id="ph1">`Await`</ph> est appliqué au résultat d’un appel de méthode qui retourne un <ph id="ph2">`Task(Of TResult)`</ph>, le type de la <ph id="ph3">`Await`</ph> expression est TResult.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Await`</ph> is applied to the result of a method call that returns a <ph id="ph2">`Task`</ph>, the <ph id="ph3">`Await`</ph> expression doesn't return a value.</source>
          <target state="translated">Si <ph id="ph1">`Await`</ph> est appliqué au résultat d’un appel de méthode qui retourne un <ph id="ph2">`Task`</ph>, le <ph id="ph3">`Await`</ph> expression ne retourne aucune valeur.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The following example illustrates the difference.</source>
          <target state="translated">L'exemple suivant illustre la différence.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>1<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>1<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`Await`</ph> expression or statement does not block the thread on which it is executing.</source>
          <target state="translated">Un <ph id="ph1">`Await`</ph> expression ou une instruction ne bloque pas le thread sur lequel il s’exécute.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Instead, it causes the compiler to sign up the rest of the async method, after the <ph id="ph1">`Await`</ph> expression, as a continuation on the awaited task.</source>
          <target state="translated">Au lieu de cela, elle entraîne le compilateur à inscrire le reste de la méthode async, après le <ph id="ph1">`Await`</ph> expression, comme une liaison dans la tâche attendue.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Control then returns to the caller of the async method.</source>
          <target state="translated">Le contrôle revient alors à l'appelant de la méthode async.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>When the task completes, it invokes its continuation, and execution of the async method resumes where it left off.</source>
          <target state="translated">Quand la tâche est terminée, elle appelle sa continuation et l’exécution de la méthode async reprend là où elle s’était arrêtée.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`Await`</ph> expression can occur only in the body of an immediately enclosing method or lambda expression that is marked by an <ph id="ph2">`Async`</ph> modifier.</source>
          <target state="translated">Un <ph id="ph1">`Await`</ph> expression peut se produire uniquement dans le corps d’une expression lambda ou de la méthode englobante immédiate marquée par une <ph id="ph2">`Async`</ph> modificateur.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The term <bpt id="p1">*</bpt>Await<ept id="p1">*</ept> serves as a keyword only in that context.</source>
          <target state="translated">Le terme <bpt id="p1">*</bpt>Await<ept id="p1">*</ept> sert à un mot clé uniquement dans ce contexte.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Elsewhere, it is interpreted as an identifier.</source>
          <target state="translated">Partout ailleurs, il est interprété en tant qu'identificateur.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Within the async method or lambda expression, an <ph id="ph1">`Await`</ph> expression cannot occur in a query expression, in the <ph id="ph2">`catch`</ph> or <ph id="ph3">`finally`</ph> block of a <bpt id="p1">[</bpt>Try…Catch…Finally<ept id="p1">](../../../visual-basic/language-reference/statements/try-catch-finally-statement.md)</ept> statement, in the loop control variable expression of a <ph id="ph4">`For`</ph> or <ph id="ph5">`For Each`</ph> loop, or in the body of a <bpt id="p2">[</bpt>SyncLock<ept id="p2">](../../../visual-basic/language-reference/statements/synclock-statement.md)</ept> statement.</source>
          <target state="translated">Dans l’expression lambda ou de la méthode async, un <ph id="ph1">`Await`</ph> expression ne peut pas se produire dans une expression de requête, dans le <ph id="ph2">`catch`</ph> ou <ph id="ph3">`finally`</ph> bloquer d’un <bpt id="p1">[</bpt>essayez... Catch... Enfin<ept id="p1">](../../../visual-basic/language-reference/statements/try-catch-finally-statement.md)</ept> instruction, dans l’expression de variable de contrôle de boucle d’une <ph id="ph4">`For`</ph> ou <ph id="ph5">`For Each`</ph> boucle, ou dans le corps d’un <bpt id="p2">[</bpt>SyncLock<ept id="p2">](../../../visual-basic/language-reference/statements/synclock-statement.md)</ept> instruction.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Exceptions</source>
          <target state="translated">Exceptions</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Most async methods return a &lt;xref:System.Threading.Tasks.Task&gt; or &lt;xref:System.Threading.Tasks.Task%601&gt;.</source>
          <target state="translated">La plupart des méthodes async retourne &lt;xref:System.Threading.Tasks.Task&gt;ou &lt;xref:System.Threading.Tasks.Task%601&gt;.&lt;/xref:System.Threading.Tasks.Task%601&gt; &lt;/xref:System.Threading.Tasks.Task&gt;</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The properties of the returned task carry information about its status and history, such as whether the task is complete, whether the async method caused an exception or was canceled, and what the final result is.</source>
          <target state="translated">Les propriétés de la tâche retournée comportent des informations sur son état et son historique. Celles-ci indiquent notamment si la tâche est terminée ou non, si la méthode async a levé une exception ou a été annulée et quel est le résultat final.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Await`</ph> operator accesses those properties.</source>
          <target state="translated">L'opérateur <ph id="ph1">`Await`</ph> accède à ces propriétés.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>If you await a task-returning async method that causes an exception, the  <ph id="ph1">`Await`</ph> operator rethrows the exception.</source>
          <target state="translated">Si vous attendez une méthode async retournant des tâches qui lève une exception, l'opérateur <ph id="ph1">`Await`</ph> lève de nouveau l'exception.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If you await a task-returning async method that is canceled, the <ph id="ph1">`Await`</ph> operator rethrows an &lt;xref:System.OperationCanceledException&gt;.</source>
          <target state="translated">Si vous attendez une méthode async retournant des tâches qui est annulée, la <ph id="ph1">`Await`</ph> opérateur lève à nouveau une &lt;xref:System.OperationCanceledException&gt;.&lt;/xref:System.OperationCanceledException&gt;</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>A single task that is in a faulted state can reflect multiple exceptions.</source>
          <target state="translated">Une tâche qui se trouve dans un état d’erreur peut refléter plusieurs exceptions.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>For example, the task might be the result of a call to &lt;xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">Par exemple, la tâche peut être le résultat d’un appel à &lt;xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=fullName&gt;.&lt;/xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>When you await such a task, the await operation rethrows only one of the exceptions.</source>
          <target state="translated">Quand vous attendez une telle tâche, l’opération await lève à nouveau une seule des exceptions.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>However, you can't predict which of the exceptions is rethrown.</source>
          <target state="translated">Toutefois, vous ne pouvez pas prédire laquelle de ces exceptions est de nouveau levée.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For examples of error handling in async methods, see <bpt id="p1">[</bpt>Try...Catch...Finally Statement<ept id="p1">](../../../visual-basic/language-reference/statements/try-catch-finally-statement.md)</ept>.</source>
          <target state="translated">Pour obtenir des exemples de gestion des erreurs dans les méthodes asynchrones, consultez <bpt id="p1">[</bpt>essayez... Catch... Instruction finally<ept id="p1">](../../../visual-basic/language-reference/statements/try-catch-finally-statement.md)</ept>.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Exemple</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The following Windows Forms example illustrates the use of <ph id="ph1">`Await`</ph> in an async method, <ph id="ph2">`WaitAsynchronouslyAsync`</ph>.</source>
          <target state="translated">L'exemple Windows Forms suivant illustre l'utilisation de <ph id="ph1">`Await`</ph> dans une méthode async, <ph id="ph2">`WaitAsynchronouslyAsync`</ph>.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Contrast the behavior of that method with the behavior of <ph id="ph1">`WaitSynchronously`</ph>.</source>
          <target state="translated">Comparez le comportement de cette méthode avec celui de <ph id="ph1">`WaitSynchronously`</ph>.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Without an <ph id="ph1">`Await`</ph> operator, <ph id="ph2">`WaitSynchronously`</ph> runs synchronously despite the use of the <ph id="ph3">`Async`</ph> modifier in its definition and a call to &lt;xref:System.Threading.Thread.Sleep%2A?displayProperty=fullName&gt; in its body.</source>
          <target state="translated">Sans un <ph id="ph1">`Await`</ph> (opérateur), <ph id="ph2">`WaitSynchronously`</ph> s’exécute de façon synchrone en dépit de l’utilisation de la <ph id="ph3">`Async`</ph> modificateur dans sa définition et un appel à &lt;xref:System.Threading.Thread.Sleep%2A?displayProperty=fullName&gt;dans son corps.&lt;/xref:System.Threading.Thread.Sleep%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">Voir aussi</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Asynchronous Programming with Async and Await<ept id="p1">](../../../visual-basic/programming-guide/concepts/async/index.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Programmation asynchrone avec Async et Await<ept id="p1">](../../../visual-basic/programming-guide/concepts/async/index.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Walkthrough: Accessing the Web by Using Async and Await<ept id="p1">](../../../visual-basic/programming-guide/concepts/async/walkthrough-accessing-the-web-by-using-async-and-await.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Procédure pas à pas : Accès Web en utilisant Async et Await<ept id="p1">](../../../visual-basic/programming-guide/concepts/async/walkthrough-accessing-the-web-by-using-async-and-await.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Async<ept id="p1">](../../../visual-basic/language-reference/modifiers/async.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>Async<ept id="p1">](../../../visual-basic/language-reference/modifiers/async.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>