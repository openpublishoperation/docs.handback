<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">15e02fbc023db9ae2f3ee9f40598faa7c9c027a0</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\async\control-flow-in-async-programs.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">47eb82f5369b89caf2e6f4c88e9053625fa7905e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">92f3041b31405b2b386c0e3bc9a68023e49ebfc2</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Control Flow in Async Programs (Visual Basic) | Microsoft Docs</source>
          <target state="translated">Contrôler le flux dans les programmes Async (Visual Basic) | Documents Microsoft</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Control Flow in Async Programs (Visual Basic)</source>
          <target state="translated">Flux de contrôle dans les programmes Async (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You can write and maintain asynchronous programs more easily by using the <ph id="ph1">`Async`</ph> and <ph id="ph2">`Await`</ph> keywords.</source>
          <target state="translated">Vous pouvez écrire et maintenir plus facilement des programmes asynchrones à l’aide de la <ph id="ph1">`Async`</ph> et <ph id="ph2">`Await`</ph> mots clés.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>However, the results might surprise you if you don't understand how your program operates.</source>
          <target state="translated">Toutefois, les résultats peuvent vous surprendre si vous ne comprenez pas le fonctionnement de votre programme.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This topic traces the flow of control through a simple async program to show you when control moves from one method to another and what information is transferred each time.</source>
          <target state="translated">Traces de cette rubrique le flux de contrôle via un programme asynchrone simple pour vous montrer lorsque le contrôle passe à partir d’une méthode à un autre et les informations est transféré à chaque fois.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Async`</ph> and <ph id="ph2">`Await`</ph> keywords were introduced in Visual Studio 2012.</source>
          <target state="translated">Les mots clés <ph id="ph1">`Async`</ph> et <ph id="ph2">`Await`</ph> ont été introduites dans Visual Studio 2012.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>In general, you mark methods that contain asynchronous code with the <bpt id="p1">[</bpt>Async<ept id="p1">](../../../../visual-basic/language-reference/modifiers/async.md)</ept> modifier.</source>
          <target state="translated">En général, vous marquez les méthodes qui contiennent du code asynchrone avec le <bpt id="p1">[</bpt>Async<ept id="p1">](../../../../visual-basic/language-reference/modifiers/async.md)</ept> modificateur.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In a method that's marked with an async modifier, you can use an <bpt id="p1">[</bpt>Await (Visual Basic)<ept id="p1">](../../../../visual-basic/language-reference/operators/await-operator.md)</ept> operator to specify where the method pauses to wait for a called asynchronous process to complete.</source>
          <target state="translated">Dans une méthode qui est marquée avec un modificateur async, vous pouvez utiliser un <bpt id="p1">[</bpt>Await (Visual Basic)<ept id="p1">](../../../../visual-basic/language-reference/operators/await-operator.md)</ept> (opérateur) pour spécifier où la méthode Pause pour attendre un processus asynchrone appelé terminer.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Asynchronous Programming with Async and Await (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/index.md)</ept>.</source>
          <target state="translated">Pour plus d’informations, consultez <bpt id="p1">[</bpt>programmation asynchrone avec Async et Await (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/index.md)</ept>.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The following example uses async methods to download the contents of a specified website as a string and to display the length of the string.</source>
          <target state="translated">L’exemple suivant utilise les méthodes async pour télécharger le contenu d’un site Web spécifié sous forme de chaîne et afficher la longueur de la chaîne.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The example contains the following two methods.</source>
          <target state="translated">L’exemple contient deux méthodes suivantes.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`startButton_Click`</ph>, which calls <ph id="ph2">`AccessTheWebAsync`</ph> and displays the result.</source>
          <target state="translated"><ph id="ph1">`startButton_Click`</ph>, qui appelle la méthode <ph id="ph2">`AccessTheWebAsync`</ph> et affiche le résultat.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`AccessTheWebAsync`</ph>, which downloads the contents of a website as a string and returns the length of the string.</source>
          <target state="translated"><ph id="ph1">`AccessTheWebAsync`</ph>, qui télécharge le contenu d’un site Web sous forme de chaîne et retourne la longueur de la chaîne.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`AccessTheWebAsync`</ph> uses an asynchronous &lt;xref:System.Net.Http.HttpClient&gt; method, &lt;xref:System.Net.Http.HttpClient.GetStringAsync%28System.String%29&gt;, to download the contents.</source>
          <target state="translated"><ph id="ph1">`AccessTheWebAsync`</ph>utilise asynchrone &lt;xref:System.Net.Http.HttpClient&gt;méthode &lt;xref:System.Net.Http.HttpClient.GetStringAsync%28System.String%29&gt;permet de télécharger le contenu.&lt;/xref:System.Net.Http.HttpClient.GetStringAsync%28System.String%29&gt; &lt;/xref:System.Net.Http.HttpClient&gt;</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Numbered display lines appear at strategic points throughout the program to help you understand how the program runs and to explain what happens at each point that is marked.</source>
          <target state="translated">Numérotées affichage lignes apparaissent aux points stratégiques tout au long du programme pour vous aider à comprendre comment le programme s’exécute et d’expliquer ce qui se produit à chaque point est marqué.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The display lines are labeled "ONE" through "SIX."</source>
          <target state="translated">Les lignes d’affichage sont étiquetés « Un » à « 6. »</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The labels represent the order in which the program reaches these lines of code.</source>
          <target state="translated">Les étiquettes représentent l’ordre dans lequel le programme atteint ces lignes de code.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The following code shows an outline of the program.</source>
          <target state="translated">Le code suivant montre un plan du programme.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Each of the labeled locations, "ONE" through "SIX," displays information about the current state of the program.</source>
          <target state="translated">Chaque emplacement étiqueté, « Un » à « 6, » affiche des informations sur l’état actuel du programme.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The following output is produced.</source>
          <target state="translated">La sortie suivante est produite.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Set Up the Program</source>
          <target state="translated">Configurer le programme</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>You can download the code that this topic uses from MSDN, or you can build it yourself.</source>
          <target state="translated">Vous pouvez télécharger le code qui utilise cette rubrique à partir de MSDN, ou vous pouvez la créer vous-même.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>To run the example, you must have Visual Studio 2012 or newer and  the .NET Framework 4.5 or newer installed on your computer.</source>
          <target state="translated">Pour exécuter l’exemple, vous devez disposer de Visual Studio 2012 ou plus récent et le .NET Framework 4.5 ou ultérieure, installé sur votre ordinateur.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Download the Program</source>
          <target state="translated">Téléchargez le programme</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>You can download the application for this topic from <bpt id="p1">[</bpt>Async Sample: Control Flow in Async Programs<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=255285)</ept>.</source>
          <target state="translated">Vous pouvez télécharger l’application de cette rubrique à partir de <bpt id="p1">[</bpt>exemple Async : flux de contrôle dans les programmes Async<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=255285)</ept>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The following steps open and run the program.</source>
          <target state="translated">Les étapes suivantes, ouvrent et exécutez le programme.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Unzip the downloaded file, and then start Visual Studio.</source>
          <target state="translated">Décompressez le fichier téléchargé, puis démarrez Visual Studio.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>On the menu bar, choose <bpt id="p1">**</bpt>File<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Open<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Project/Solution<ept id="p3">**</ept>.</source>
          <target state="translated">Dans la barre de menus, choisissez <bpt id="p1">**</bpt>Fichier<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Ouvrir<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Projet/Solution<ept id="p3">**</ept>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Navigate to the folder that holds the unzipped sample code, open the solution (.sln) file, and then choose the F5 key to build and run the project.</source>
          <target state="translated">Accédez au dossier qui contient le code exemple décompressé, ouvrez le fichier solution (.sln), puis appuyez sur F5 pour générer et exécuter le projet.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Build the Program Yourself</source>
          <target state="translated">Générer le programme vous-même</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The following Windows Presentation Foundation (WPF) project contains the code example for this topic.</source>
          <target state="translated">Le projet Windows Presentation Foundation (WPF) suivant contient l’exemple de code de cette rubrique.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>To run the project, perform the following steps:</source>
          <target state="translated">Pour exécuter le projet, procédez comme suit :</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Start Visual Studio.</source>
          <target state="translated">Démarrez Visual Studio.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>On the menu bar, choose <bpt id="p1">**</bpt>File<ept id="p1">**</ept>, <bpt id="p2">**</bpt>New<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Project<ept id="p3">**</ept>.</source>
          <target state="translated">Dans la barre de menus, sélectionnez <bpt id="p1">**</bpt>Fichier<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Nouveau<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Projet<ept id="p3">**</ept>.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>New Project<ept id="p1">**</ept> dialog box opens.</source>
          <target state="translated">La boîte de dialogue <bpt id="p1">**</bpt>Nouveau projet<ept id="p1">**</ept> s'affiche.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Installed Templates<ept id="p1">**</ept> pane, choose <bpt id="p2">**</bpt>Visual Basic<ept id="p2">**</ept>, and then choose <bpt id="p3">**</bpt>WPF Application<ept id="p3">**</ept> from the list of project types.</source>
          <target state="translated">Dans le <bpt id="p1">**</bpt>modèles installés<ept id="p1">**</ept> volet, choisissez <bpt id="p2">**</bpt>Visual Basic<ept id="p2">**</ept>, puis choisissez <bpt id="p3">**</bpt>Application WPF<ept id="p3">**</ept> dans la liste des types de projet.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Enter <ph id="ph1">`AsyncTracer`</ph> as the name of the project, and then choose the <bpt id="p1">**</bpt>OK<ept id="p1">**</ept> button.</source>
          <target state="translated">Entrez <ph id="ph1">`AsyncTracer`</ph> comme nom du projet, puis choisissez le <bpt id="p1">**</bpt>OK<ept id="p1">**</ept> bouton.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The new project appears in <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>.</source>
          <target state="translated">Le nouveau projet s’affiche dans <bpt id="p1">**</bpt>l’Explorateur de solutions<ept id="p1">**</ept>.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>In the Visual Studio Code Editor, choose the <bpt id="p1">**</bpt>MainWindow.xaml<ept id="p1">**</ept> tab.</source>
          <target state="translated">Dans l'éditeur de code Visual Studio, choisissez l'onglet <bpt id="p1">**</bpt>MainWindow.xaml<ept id="p1">**</ept> .</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If the tab isn’t visible, open the shortcut menu for MainWindow.xaml in <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, and then choose <bpt id="p2">**</bpt>View Code<ept id="p2">**</ept>.</source>
          <target state="translated">Si l’onglet n’est pas visible, ouvrez le menu contextuel pour MainWindow.xaml dans <bpt id="p1">**</bpt>l’Explorateur de solutions<ept id="p1">**</ept>, puis choisissez <bpt id="p2">**</bpt>afficher le Code<ept id="p2">**</ept>.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>XAML<ept id="p1">**</ept> view of MainWindow.xaml, replace the code with the following code.</source>
          <target state="translated">Dans le <bpt id="p1">**</bpt>XAML<ept id="p1">**</ept> du MainWindow.xaml, remplacez le code par le code suivant.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>A simple window that contains a text box and a button appears in the <bpt id="p1">**</bpt>Design<ept id="p1">**</ept> view of MainWindow.xaml.</source>
          <target state="translated">Une fenêtre simple contenant une zone de texte et un bouton s’affiche dans le <bpt id="p1">**</bpt>conception<ept id="p1">**</ept> vue de MainWindow.xaml.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Add a reference for &lt;xref:System.Net.Http&gt;.</source>
          <target state="translated">Ajoutez une référence pour &lt;xref:System.Net.Http&gt;.&lt;/xref:System.Net.Http&gt;</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, open the shortcut menu for MainWindow.xaml.vb, and then choose <bpt id="p2">**</bpt>View Code<ept id="p2">**</ept>.</source>
          <target state="translated">Dans <bpt id="p1">**</bpt>l’Explorateur de solutions<ept id="p1">**</ept>, ouvrez le menu contextuel pour MainWindow.xaml.vb, puis choisissez <bpt id="p2">**</bpt>afficher le Code<ept id="p2">**</ept>.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>In MainWindow.xaml.vb , replace the code with the following code.</source>
          <target state="translated">Dans MainWindow.xaml.vb, remplacez le code par le code suivant.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Choose the F5 key to run the program, and then choose the <bpt id="p1">**</bpt>Start<ept id="p1">**</ept> button.</source>
          <target state="translated">Appuyez sur la touche F5 pour exécuter le programme, puis choisissez le bouton <bpt id="p1">**</bpt>Démarrer<ept id="p1">**</ept> .</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The following output should appear.</source>
          <target state="translated">La sortie suivante doit s’afficher.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Trace the Program</source>
          <target state="translated">Le programme de trace</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Steps ONE and TWO</source>
          <target state="translated">Étapes UNE et DEUX</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The first two display lines trace the path as <ph id="ph1">`startButton_Click`</ph> calls <ph id="ph2">`AccessTheWebAsync`</ph>, and <ph id="ph3">`AccessTheWebAsync`</ph> calls the asynchronous &lt;xref:System.Net.Http.HttpClient&gt; method &lt;xref:System.Net.Http.HttpClient.GetStringAsync%28System.String%29&gt;.</source>
          <target state="translated">Les deux premières afficher des lignes de suivre le chemin d’accès en tant que <ph id="ph1">`startButton_Click`</ph> appelle <ph id="ph2">`AccessTheWebAsync`</ph>, et <ph id="ph3">`AccessTheWebAsync`</ph> appelle la &lt;xref:System.Net.Http.HttpClient&gt;méthode &lt;xref:System.Net.Http.HttpClient.GetStringAsync%28System.String%29&gt;.&lt;/xref:System.Net.Http.HttpClient.GetStringAsync%28System.String%29&gt; &lt;/xref:System.Net.Http.HttpClient&gt; de asynchrone</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The following image outlines the calls from method to method.</source>
          <target state="translated">L’image suivante présente les appels de méthode en méthode.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Steps ONE and TWO<ept id="p1">]</ept><bpt id="p2">(../../../../csharp/programming-guide/concepts/async/media/asynctrace-onetwo.png "</bpt>AsyncTrace-ONETWO<ept id="p2">")</ept></source>
          <target state="translated"><bpt id="p1">![</bpt>Étapes un et deux<ept id="p1">]</ept><bpt id="p2">(../../../../csharp/programming-guide/concepts/async/media/asynctrace-onetwo.png "</bpt>AsyncTrace-ONETWO<ept id="p2">")</ept></target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The return type of both <ph id="ph1">`AccessTheWebAsync`</ph> and <ph id="ph2">`client.GetStringAsync`</ph> is &lt;xref:System.Threading.Tasks.Task%601&gt;.</source>
          <target state="translated">Le type de retour de <ph id="ph1">`AccessTheWebAsync`</ph> et <ph id="ph2">`client.GetStringAsync`</ph> est &lt;xref:System.Threading.Tasks.Task%601&gt;.&lt;/xref:System.Threading.Tasks.Task%601&gt;</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For <ph id="ph1">`AccessTheWebAsync`</ph>, TResult is an integer.</source>
          <target state="translated">Pour <ph id="ph1">`AccessTheWebAsync`</ph>, TResult est un entier.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>For <ph id="ph1">`GetStringAsync`</ph>, TResult is a string.</source>
          <target state="translated">Pour <ph id="ph1">`GetStringAsync`</ph>, TResult est une chaîne.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>For more information about async method return types, see <bpt id="p1">[</bpt>Async Return Types (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/async-return-types.md)</ept>.</source>
          <target state="translated">Pour plus d’informations sur les types de retour de méthode asynchrone, consultez <bpt id="p1">[</bpt>les Types de retour Async (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/async-return-types.md)</ept>.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>A task-returning async method returns a task instance when control shifts back to the caller.</source>
          <target state="translated">Une méthode async retournant des tâches renvoie une instance de tâche lorsque le contrôle passe à l’appelant.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Control returns from an async method to its caller either when an <ph id="ph1">`Await`</ph> operator is encountered in the called method or when the called method ends.</source>
          <target state="translated">Le contrôle retourne d’une méthode async à son appelant soit lorsque un <ph id="ph1">`Await`</ph> opérateur est rencontrée dans la méthode appelée ou lorsque la méthode appelée se termine.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The display lines that are labeled "THREE" through "SIX" trace this part of the process.</source>
          <target state="translated">Les lignes d’affichage portant le nom « Trois » à « 6 » de cette partie du processus de suivi.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Step THREE</source>
          <target state="translated">Étape TROIS</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">`AccessTheWebAsync`</ph>, the asynchronous method &lt;xref:System.Net.Http.HttpClient.GetStringAsync%28System.String%29&gt; is called to download the contents of the target webpage.</source>
          <target state="translated">Dans <ph id="ph1">`AccessTheWebAsync`</ph>, la méthode asynchrone &lt;xref:System.Net.Http.HttpClient.GetStringAsync%28System.String%29&gt;est appelée pour télécharger le contenu de la page Web cible.&lt;/xref:System.Net.Http.HttpClient.GetStringAsync%28System.String%29&gt;</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Control returns from <ph id="ph1">`client.GetStringAsync`</ph> to <ph id="ph2">`AccessTheWebAsync`</ph> when <ph id="ph3">`client.GetStringAsync`</ph> returns.</source>
          <target state="translated">Le contrôle retourne de <ph id="ph1">`client.GetStringAsync`</ph> à <ph id="ph2">`AccessTheWebAsync`</ph> lorsque <ph id="ph3">`client.GetStringAsync`</ph> renvoie.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`client.GetStringAsync`</ph> method returns a task of string that’s assigned to the <ph id="ph2">`getStringTask`</ph> variable in <ph id="ph3">`AccessTheWebAsync`</ph>.</source>
          <target state="translated">Le <ph id="ph1">`client.GetStringAsync`</ph> méthode retourne une tâche de la chaîne est assignée à la <ph id="ph2">`getStringTask`</ph> variable <ph id="ph3">`AccessTheWebAsync`</ph>.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The following line in the example program shows the call to <ph id="ph1">`client.GetStringAsync`</ph> and the assignment.</source>
          <target state="translated">La ligne suivante dans l’exemple de programme illustre l’appel à <ph id="ph1">`client.GetStringAsync`</ph> et l’affectation.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>5<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>5<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>You can think of the task as a promise by <ph id="ph1">`client.GetStringAsync`</ph> to produce an actual string eventually.</source>
          <target state="translated">Vous pouvez considérer la tâche en tant qu’une promesse par <ph id="ph1">`client.GetStringAsync`</ph> pour produire une chaîne réelle par la suite.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>In the meantime, if <ph id="ph1">`AccessTheWebAsync`</ph> has work to do that doesn't depend on the promised string from <ph id="ph2">`client.GetStringAsync`</ph>, that work can continue while  <ph id="ph3">`client.GetStringAsync`</ph> waits.</source>
          <target state="translated">En attendant, si <ph id="ph1">`AccessTheWebAsync`</ph> a du travail à faire qui ne dépend de la chaîne de promis <ph id="ph2">`client.GetStringAsync`</ph>, que le travail peut continuer pendant que <ph id="ph3">`client.GetStringAsync`</ph> attend.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>In the example, the following lines of output, which are labeled "THREE,” represent the opportunity to do independent work</source>
          <target state="translated">Dans l’exemple, les lignes suivantes de sortie, qui sont étiquetés « Trois », représentent l’opportunité d’effectuer un travail indépendant</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>6<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>6<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The following statement suspends progress in <ph id="ph1">`AccessTheWebAsync`</ph> when <ph id="ph2">`getStringTask`</ph> is awaited.</source>
          <target state="translated">L’instruction suivante interrompt la progression dans <ph id="ph1">`AccessTheWebAsync`</ph> lorsque <ph id="ph2">`getStringTask`</ph> est attendue.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>7<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>7<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The following image shows the flow of control from <ph id="ph1">`client.GetStringAsync`</ph> to the assignment to <ph id="ph2">`getStringTask`</ph> and from the creation of <ph id="ph3">`getStringTask`</ph> to the application of an Await operator.</source>
          <target state="translated">L’illustration suivante montre le flux de contrôle à partir de <ph id="ph1">`client.GetStringAsync`</ph> pour l’assignation à <ph id="ph2">`getStringTask`</ph> et de la création de <ph id="ph3">`getStringTask`</ph> à l’application d’un opérateur Await.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Step THREE<ept id="p1">]</ept><bpt id="p2">(../../../../csharp/programming-guide/concepts/async/media/asynctrace-three.png "</bpt>AsyncTrace-Three<ept id="p2">")</ept></source>
          <target state="translated"><bpt id="p1">![</bpt>Étape&amp;3;<ept id="p1">]</ept><bpt id="p2">(../../../../csharp/programming-guide/concepts/async/media/asynctrace-three.png "</bpt>AsyncTrace-3<ept id="p2">")</ept></target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The await expression suspends <ph id="ph1">`AccessTheWebAsync`</ph> until <ph id="ph2">`client.GetStringAsync`</ph> returns.</source>
          <target state="translated">L’expression await suspend <ph id="ph1">`AccessTheWebAsync`</ph> jusqu'à ce que <ph id="ph2">`client.GetStringAsync`</ph> retourne.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>In the meantime, control returns to the caller of <ph id="ph1">`AccessTheWebAsync`</ph>, <ph id="ph2">`startButton_Click`</ph>.</source>
          <target state="translated">Entre-temps, le contrôle retourne à l’appelant de <ph id="ph1">`AccessTheWebAsync`</ph>, <ph id="ph2">`startButton_Click`</ph>.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Typically, you await the call to an asynchronous method immediately.</source>
          <target state="translated">En règle générale, vous attendez immédiatement l’appel à une méthode asynchrone.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>For example, the following assignment could replace the previous code that creates and then awaits <ph id="ph1">`getStringTask`</ph>: <ph id="ph2">`Dim urlContents As String = Await client.GetStringAsync("http://msdn.microsoft.com")`</ph></source>
          <target state="translated">Par exemple, l’assignation suivante pourrait remplacer le code précédent qui crée et puis attend <ph id="ph1">`getStringTask`</ph>:<ph id="ph2">`Dim urlContents As String = Await client.GetStringAsync("http://msdn.microsoft.com")`</ph></target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>In this topic, the await operator is applied later to accommodate the output lines that mark the flow of control through the program.</source>
          <target state="translated">Dans cette rubrique, l’opérateur await est appliqué ultérieurement pour prendre en compte les lignes de sortie qui marquent le flux de contrôle via le programme.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Step FOUR</source>
          <target state="translated">Étape QUATRE</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The declared return type of <ph id="ph1">`AccessTheWebAsync`</ph> is <ph id="ph2">`Task(Of Integer)`</ph>.</source>
          <target state="translated">Type de retour le déclaré <ph id="ph1">`AccessTheWebAsync`</ph> est <ph id="ph2">`Task(Of Integer)`</ph>.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Therefore, when <ph id="ph1">`AccessTheWebAsync`</ph> is suspended, it returns a task of integer to <ph id="ph2">`startButton_Click`</ph>.</source>
          <target state="translated">Par conséquent, lorsque <ph id="ph1">`AccessTheWebAsync`</ph> est suspendue, elle retourne une tâche d’entier <ph id="ph2">`startButton_Click`</ph>.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>You should understand that the returned task isn’t <ph id="ph1">`getStringTask`</ph>.</source>
          <target state="translated">Vous devez comprendre que la tâche retournée n’est pas <ph id="ph1">`getStringTask`</ph>.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The returned task is a new task of integer that represents what remains to be done in the suspended method, <ph id="ph1">`AccessTheWebAsync`</ph>.</source>
          <target state="translated">La tâche retournée est une tâche d’entier qui représente ce qui reste à faire dans la méthode suspendue, <ph id="ph1">`AccessTheWebAsync`</ph>.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The task is a promise from <ph id="ph1">`AccessTheWebAsync`</ph> to produce an integer when the task is complete.</source>
          <target state="translated">La tâche est une promesse de <ph id="ph1">`AccessTheWebAsync`</ph> pour produire un entier lorsque la tâche est terminée.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The following statement assigns this task to the <ph id="ph1">`getLengthTask`</ph> variable.</source>
          <target state="translated">L’instruction suivante assigne cette tâche à la <ph id="ph1">`getLengthTask`</ph> variable.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>8<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>8<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>As in <ph id="ph1">`AccessTheWebAsync`</ph>, <ph id="ph2">`startButton_Click`</ph> can continue with work that doesn’t depend on the results of the asynchronous task (<ph id="ph3">`getLengthTask`</ph>) until the task is awaited.</source>
          <target state="translated">Comme dans <ph id="ph1">`AccessTheWebAsync`</ph>, <ph id="ph2">`startButton_Click`</ph> peut poursuivre une tâche qui ne dépende pas des résultats de la tâche asynchrone (<ph id="ph3">`getLengthTask`</ph>) jusqu'à ce que la tâche est attendue.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The following output lines represent that work.</source>
          <target state="translated">Les lignes de sortie suivantes représentent ce travail.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>9<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>9<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Progress in <ph id="ph1">`startButton_Click`</ph> is suspended when <ph id="ph2">`getLengthTask`</ph> is awaited.</source>
          <target state="translated">Progresser dans <ph id="ph1">`startButton_Click`</ph> est suspendue lorsque <ph id="ph2">`getLengthTask`</ph> est attendue.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The following assignment statement suspends <ph id="ph1">`startButton_Click`</ph> until <ph id="ph2">`AccessTheWebAsync`</ph> is complete.</source>
          <target state="translated">L’instruction d’assignation suivante interrompt <ph id="ph1">`startButton_Click`</ph> jusqu'à ce que <ph id="ph2">`AccessTheWebAsync`</ph> est terminée.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>10<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>10<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>In the following illustration, the arrows show the flow of control from the await expression in <ph id="ph1">`AccessTheWebAsync`</ph> to the assignment of a value to <ph id="ph2">`getLengthTask`</ph>, followed by normal processing in <ph id="ph3">`startButton_Click`</ph> until <ph id="ph4">`getLengthTask`</ph> is awaited.</source>
          <target state="translated">Dans l’illustration suivante, les flèches indiquent le flux de contrôle de l’expression await dans <ph id="ph1">`AccessTheWebAsync`</ph> à l’affectation d’une valeur à <ph id="ph2">`getLengthTask`</ph>, suivi par le traitement normal de <ph id="ph3">`startButton_Click`</ph> jusqu'à ce que <ph id="ph4">`getLengthTask`</ph> est attendue.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Step FOUR<ept id="p1">]</ept><bpt id="p2">(../../../../csharp/programming-guide/concepts/async/media/asynctrace-four.png "</bpt>AsyncTrace-FOUR<ept id="p2">")</ept></source>
          <target state="translated"><bpt id="p1">![</bpt>Étape&amp;4;<ept id="p1">]</ept><bpt id="p2">(../../../../csharp/programming-guide/concepts/async/media/asynctrace-four.png "</bpt>AsyncTrace-quatre<ept id="p2">")</ept></target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Step FIVE</source>
          <target state="translated">Étape CINQ</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`client.GetStringAsync`</ph> signals that it’s complete, processing in <ph id="ph2">`AccessTheWebAsync`</ph> is released from suspension and can continue past the await statement.</source>
          <target state="translated">Lors de la <ph id="ph1">`client.GetStringAsync`</ph> signale qu’elle est terminée, le traitement de <ph id="ph2">`AccessTheWebAsync`</ph> est libéré de la suspension et pouvez passer à l’instruction await.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The following lines of output represent the resumption of processing.</source>
          <target state="translated">Les lignes de sortie suivantes représentent la reprise du traitement.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>11<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>11<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The operand of the return statement, <ph id="ph1">`urlContents.Length`</ph>, is stored in the task that  <ph id="ph2">`AccessTheWebAsync`</ph> returns.</source>
          <target state="translated">L’opérande de l’instruction return, <ph id="ph1">`urlContents.Length`</ph>, est stocké dans la tâche qui <ph id="ph2">`AccessTheWebAsync`</ph> retourne.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The await expression retrieves that value from <ph id="ph1">`getLengthTask`</ph> in <ph id="ph2">`startButton_Click`</ph>.</source>
          <target state="translated">L’expression await récupère cette valeur à partir de <ph id="ph1">`getLengthTask`</ph> dans <ph id="ph2">`startButton_Click`</ph>.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The following image shows the transfer of control after <ph id="ph1">`client.GetStringAsync`</ph> (and <ph id="ph2">`getStringTask`</ph>) are complete.</source>
          <target state="translated">L’illustration suivante montre le transfert du contrôle après <ph id="ph1">`client.GetStringAsync`</ph> (et <ph id="ph2">`getStringTask`</ph>) sont terminées.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Step FIVE<ept id="p1">]</ept><bpt id="p2">(../../../../csharp/programming-guide/concepts/async/media/asynctrace-five.png "</bpt>AsyncTrace-FIVE<ept id="p2">")</ept></source>
          <target state="translated"><bpt id="p1">![</bpt>Étape&amp;5;<ept id="p1">]</ept><bpt id="p2">(../../../../csharp/programming-guide/concepts/async/media/asynctrace-five.png "</bpt>AsyncTrace-cinq<ept id="p2">")</ept></target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`AccessTheWebAsync`</ph> runs to completion, and control returns to <ph id="ph2">`startButton_Click`</ph>, which is awaiting the completion.</source>
          <target state="translated"><ph id="ph1">`AccessTheWebAsync`</ph>s’exécute jusqu'à achèvement et le contrôle retourne à <ph id="ph2">`startButton_Click`</ph>, qui est en attente de l’achèvement.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Step SIX</source>
          <target state="translated">Étape SIX</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`AccessTheWebAsync`</ph> signals that it’s complete, processing can continue past the await statement in <ph id="ph2">`startButton_Async`</ph>.</source>
          <target state="translated">Lors de la <ph id="ph1">`AccessTheWebAsync`</ph> signale qu’il est terminé, le traitement peut continuer après l’instruction await dans <ph id="ph2">`startButton_Async`</ph>.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>In fact, the program has nothing more to do.</source>
          <target state="translated">En fait, le programme n’a plus rien à faire.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The following lines of output represent the resumption of processing in <ph id="ph1">`startButton_Async`</ph>:</source>
          <target state="translated">Les lignes de sortie suivantes représentent la reprise du traitement <ph id="ph1">`startButton_Async`</ph>:</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>12<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>12<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The await expression retrieves from <ph id="ph1">`getLengthTask`</ph> the integer value that’s the operand of the return statement in <ph id="ph2">`AccessTheWebAsync`</ph>.</source>
          <target state="translated">L’extrait de l’expression await <ph id="ph1">`getLengthTask`</ph> la valeur entière qui est l’opérande de l’instruction return dans <ph id="ph2">`AccessTheWebAsync`</ph>.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The following statement assigns that value to the <ph id="ph1">`contentLength`</ph> variable.</source>
          <target state="translated">L’instruction suivante assigne la valeur à la <ph id="ph1">`contentLength`</ph> variable.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>13<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>13<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The following image shows the return of control from <ph id="ph1">`AccessTheWebAsync`</ph> to <ph id="ph2">`startButton_Click`</ph>.</source>
          <target state="translated">L’illustration suivante montre le retour du contrôle à partir de <ph id="ph1">`AccessTheWebAsync`</ph> à <ph id="ph2">`startButton_Click`</ph>.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Step SIX<ept id="p1">]</ept><bpt id="p2">(../../../../csharp/programming-guide/concepts/async/media/asynctrace-six.png "</bpt>AsyncTrace-SIX<ept id="p2">")</ept></source>
          <target state="translated"><bpt id="p1">![</bpt>Étape&amp;6;<ept id="p1">]</ept><bpt id="p2">(../../../../csharp/programming-guide/concepts/async/media/asynctrace-six.png "</bpt>AsyncTrace-SIX<ept id="p2">")</ept></target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">Voir aussi</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Asynchronous Programming with Async and Await (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/index.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Programmation asynchrone avec Async et Await (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/index.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Async Return Types (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/async-return-types.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Types de retour Async (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/async-return-types.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Walkthrough: Accessing the Web by Using Async and Await (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/walkthrough-accessing-the-web-by-using-async-and-await.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Procédure pas à pas : Accès Web en utilisant Async et Await (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/walkthrough-accessing-the-web-by-using-async-and-await.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Async Sample: Control Flow in Async Programs (C# and Visual Basic)<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=255285)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>Exemple Async : Contrôle de flux dans les programmes Async (c# et Visual Basic)<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=255285)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>