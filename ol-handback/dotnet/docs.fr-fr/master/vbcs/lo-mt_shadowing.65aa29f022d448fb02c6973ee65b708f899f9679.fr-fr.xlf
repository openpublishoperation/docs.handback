<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5f4053de05f0a7a42fccdade1714e08f8eb172e6</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\declared-elements\shadowing.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6a3dcb4742e65cad554563505301890edd140982</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">19bcf9cde653fc46382e953b8d81fe8a5a281d58</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Shadowing in Visual Basic | Microsoft Docs</source>
          <target state="translated">Occultation dans Visual Basic | Documents Microsoft</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Shadowing in Visual Basic</source>
          <target state="translated">Occultation dans Visual Basic</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>When two programming elements share the same name, one of them can hide, or <bpt id="p1">*</bpt>shadow<ept id="p1">*</ept>, the other one.</source>
          <target state="translated">Lorsque deux éléments de programmation partagent le même nom, un d'entre eux peut masquer, ou <bpt id="p1">*</bpt>ombre<ept id="p1">*</ept>, un autre.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In such a situation, the shadowed element is not available for reference; instead, when your code uses the element name, the <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> compiler resolves it to the shadowing element.</source>
          <target state="translated">Dans ce cas, l’élément occulté n’est pas disponible pour la référence ; en revanche, lorsque votre code utilise le nom de l’élément, le <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> compilateur résout vers l’élément d’occultation.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Purpose</source>
          <target state="translated">Objectif</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The main purpose of shadowing is to protect the definition of your class members.</source>
          <target state="translated">L’objectif principal de l’occultation est de protéger la définition de vos membres de classe.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The base class might undergo a change that creates an element with the same name as one you have already defined.</source>
          <target state="translated">La classe de base peut subir un changement qui crée un élément avec le même nom qu’un que vous avez déjà défini.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>If this happens, the <ph id="ph1">`Shadows`</ph> modifier forces references through your class to be resolved to the member you defined, instead of to the new base class element.</source>
          <target state="translated">Dans ce cas, le <ph id="ph1">`Shadows`</ph> modificateur force références de votre classe à être résolues vers le membre que vous avez défini, et non vers le nouvel élément de classe de base.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Types of Shadowing</source>
          <target state="translated">Types d’occultation</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>An element can shadow another element in two different ways.</source>
          <target state="translated">Un élément peut occulter un autre élément de deux manières différentes.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The shadowing element can be declared inside a subregion of the region containing the shadowed element, in which case the shadowing is accomplished <bpt id="p1">*</bpt>through scope<ept id="p1">*</ept>.</source>
          <target state="translated">L’élément d’occultation peut être déclaré dans une sous-région de la région contenant l’élément occulté, dans laquelle s’effectue l’occultation de cas <bpt id="p1">*</bpt>par portée<ept id="p1">*</ept>.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Or a deriving class can redefine a member of a base class, in which case the shadowing is done <bpt id="p1">*</bpt>through inheritance<ept id="p1">*</ept>.</source>
          <target state="translated">Une classe dérivée peut également redéfinir un membre d’une classe de base, dans lequel est effectuée l’occultation de cas <bpt id="p1">*</bpt>via l’héritage<ept id="p1">*</ept>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Shadowing Through Scope</source>
          <target state="translated">Une occultation par portée</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>It is possible for programming elements in the same module, class, or structure to have the same name but different scope.</source>
          <target state="translated">Il est possible pour les éléments dans le même module, classe ou structure peuvent avoir le même nom mais une portée différente de programmation.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>When two elements are declared in this manner and the code refers to the name they share, the element with the narrower scope shadows the other element (block scope is the narrowest).</source>
          <target state="translated">Lorsque deux éléments sont déclarés de cette manière, et le code fait référence au nom qu’ils partagent, l’élément avec la portée plus restreinte occulte l’autre élément (la portée de bloc est la plus restreinte).</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For example, a module can define a <ph id="ph1">`Public`</ph> variable named <ph id="ph2">`temp`</ph>, and a procedure within the module can declare a local variable also named <ph id="ph3">`temp`</ph>.</source>
          <target state="translated">Par exemple, un module peut définir un <ph id="ph1">`Public`</ph> variable nommée <ph id="ph2">`temp`</ph>, et une procédure du module peut déclarer une variable locale nommée également <ph id="ph3">`temp`</ph>.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>References to <ph id="ph1">`temp`</ph> from within the procedure access the local variable, while references to <ph id="ph2">`temp`</ph> from outside the procedure access the <ph id="ph3">`Public`</ph> variable.</source>
          <target state="translated">Des références aux <ph id="ph1">`temp`</ph> dans la procédure d’accéder à la variable locale, tandis que les références à <ph id="ph2">`temp`</ph> d’en dehors de la procédure accèdent le <ph id="ph3">`Public`</ph> variable.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In this case, the procedure variable <ph id="ph1">`temp`</ph> shadows the module variable <ph id="ph2">`temp`</ph>.</source>
          <target state="translated">Dans ce cas, la variable de procédure <ph id="ph1">`temp`</ph> occulte la variable de module <ph id="ph2">`temp`</ph>.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The following illustration shows two variables, both named <ph id="ph1">`temp`</ph>.</source>
          <target state="translated">L’illustration suivante montre deux variables, toutes deux nommées <ph id="ph1">`temp`</ph>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The local variable <ph id="ph1">`temp`</ph> shadows the member variable <ph id="ph2">`temp`</ph> when accessed from within its own procedure <ph id="ph3">`p`</ph>.</source>
          <target state="translated">La variable locale <ph id="ph1">`temp`</ph> occulte la variable membre <ph id="ph2">`temp`</ph> lors de l’accès à partir de sa propre procédure <ph id="ph3">`p`</ph>.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>However, the <ph id="ph1">`MyClass`</ph> keyword bypasses the shadowing and accesses the member variable.</source>
          <target state="translated">Toutefois, le <ph id="ph1">`MyClass`</ph> mot-clé outrepasse l’occultation et accède à la variable membre.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Graphic diagram of shadowing through scope<ept id="p1">](../../../../visual-basic/programming-guide/language-features/declared-elements/media/shadowscope.gif "ShadowScope")</ept></source>
          <target state="translated"><bpt id="p1">![</bpt>Diagramme graphique d’une occultation par portée<ept id="p1">](../../../../visual-basic/programming-guide/language-features/declared-elements/media/shadowscope.gif "ShadowScope")</ept></target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Shadowing through scope</source>
          <target state="translated">Une occultation par portée</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For an example of shadowing through scope, see <bpt id="p1">[</bpt>How to: Hide a Variable with the Same Name as Your Variable<ept id="p1">](../../../../visual-basic/programming-guide/language-features/declared-elements/how-to-hide-a-variable-with-the-same-name-as-your-variable.md)</ept>.</source>
          <target state="translated">Pour obtenir un exemple d’une occultation par portée, consultez <bpt id="p1">[</bpt>Comment : masquer une Variable portant le même nom que votre Variable<ept id="p1">](../../../../visual-basic/programming-guide/language-features/declared-elements/how-to-hide-a-variable-with-the-same-name-as-your-variable.md)</ept>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Shadowing Through Inheritance</source>
          <target state="translated">Occultation par héritage</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If a derived class redefines a programming element inherited from a base class, the redefining element shadows the original element.</source>
          <target state="translated">Si une classe dérivée redéfinit un élément de programmation hérité d’une classe de base, l’élément qui redéfinit occulte l’élément d’origine.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>You can shadow any type of declared element, or set of overloaded elements, with any other type.</source>
          <target state="translated">Vous pouvez occulter tout type d’élément déclaré, ou ensemble d’éléments surchargés, avec un autre type.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For example, an <ph id="ph1">`Integer`</ph> variable can shadow a <ph id="ph2">`Function`</ph> procedure.</source>
          <target state="translated">Par exemple, un <ph id="ph1">`Integer`</ph> variable peut occulter un <ph id="ph2">`Function`</ph> procédure.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If you shadow a procedure with another procedure, you can use a different parameter list and a different return type.</source>
          <target state="translated">Si vous masquez une procédure avec une autre procédure, vous pouvez utiliser une liste de paramètres différente et un type de retour différent.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The following illustration shows a base class <ph id="ph1">`b`</ph> and a derived class <ph id="ph2">`d`</ph> that inherits from <ph id="ph3">`b`</ph>.</source>
          <target state="translated">L’illustration suivante montre une classe de base <ph id="ph1">`b`</ph> et une classe dérivée <ph id="ph2">`d`</ph> qui hérite de <ph id="ph3">`b`</ph>.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The base class defines a procedure named <ph id="ph1">`proc`</ph>, and the derived class shadows it with another procedure of the same name.</source>
          <target state="translated">La classe de base définit une procédure nommée <ph id="ph1">`proc`</ph>, et la classe dérivée l’occulte avec une autre procédure du même nom.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The first <ph id="ph1">`Call`</ph> statement accesses the shadowing <ph id="ph2">`proc`</ph> in the derived class.</source>
          <target state="translated">La première <ph id="ph1">`Call`</ph> instruction accède à l’occultation <ph id="ph2">`proc`</ph> dans la classe dérivée.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>However, the <ph id="ph1">`MyBase`</ph> keyword bypasses the shadowing and accesses the shadowed procedure in the base class.</source>
          <target state="translated">Toutefois, le <ph id="ph1">`MyBase`</ph> mot-clé outrepasse l’occultation et accède à la procédure occultée dans la classe de base.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Graphic diagram of shadowing through inheritance<ept id="p1">](../../../../visual-basic/programming-guide/language-features/declared-elements/media/shadowinherit.gif "ShadowInherit")</ept></source>
          <target state="translated"><bpt id="p1">![</bpt>Diagramme graphique d’une occultation par héritage<ept id="p1">](../../../../visual-basic/programming-guide/language-features/declared-elements/media/shadowinherit.gif "ShadowInherit")</ept></target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Shadowing through inheritance</source>
          <target state="translated">Occultation par héritage</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For an example of shadowing through inheritance, see <bpt id="p1">[</bpt>How to: Hide a Variable with the Same Name as Your Variable<ept id="p1">](../../../../visual-basic/programming-guide/language-features/declared-elements/how-to-hide-a-variable-with-the-same-name-as-your-variable.md)</ept> and <bpt id="p2">[</bpt>How to: Hide an Inherited Variable<ept id="p2">](../../../../visual-basic/programming-guide/language-features/declared-elements/how-to-hide-an-inherited-variable.md)</ept>.</source>
          <target state="translated">Pour obtenir un exemple d’une occultation par héritage, consultez <bpt id="p1">[</bpt>Comment : masquer une Variable portant le même nom que votre Variable<ept id="p1">](../../../../visual-basic/programming-guide/language-features/declared-elements/how-to-hide-a-variable-with-the-same-name-as-your-variable.md)</ept> et <bpt id="p2">[</bpt>Comment : masquer une Variable héritée<ept id="p2">](../../../../visual-basic/programming-guide/language-features/declared-elements/how-to-hide-an-inherited-variable.md)</ept>.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Shadowing and Access Level</source>
          <target state="translated">Occultation et niveau d’accès</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The shadowing element is not always accessible from the code using the derived class.</source>
          <target state="translated">L’élément d’occultation n’est pas toujours accessible à partir du code à l’aide de la classe dérivée.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For example, it might be declared <ph id="ph1">`Private`</ph>.</source>
          <target state="translated">Par exemple, il peut être déclaré <ph id="ph1">`Private`</ph>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>In such a case, shadowing is defeated and the compiler resolves any reference to the same element it would have if there had been no shadowing.</source>
          <target state="translated">Dans ce cas, l’occultation échoue et le compilateur résout toute référence au même élément cela aurait si aucun occultation.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This element is the accessible element the fewest derivational steps backward from the shadowing class.</source>
          <target state="translated">Cet élément est l’élément accessible la qui moins d’étapes en arrière à partir de la classe d’occultation.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>If the shadowed element is a procedure, the resolution is to the closest accessible version with the same name, parameter list, and return type.</source>
          <target state="translated">Si l’élément occulté est une procédure, la résolution est de la version la plus proche accessible portant le même nom, la liste des paramètres et type de retour.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The following example shows an inheritance hierarchy of three classes.</source>
          <target state="translated">L’exemple suivant montre une hiérarchie d’héritage de trois classes.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Each class defines a <ph id="ph1">`Sub`</ph> procedure <ph id="ph2">`display`</ph>, and each derived class shadows the <ph id="ph3">`display`</ph> procedure in its base class.</source>
          <target state="translated">Chaque classe définit un <ph id="ph1">`Sub`</ph> procédure <ph id="ph2">`display`</ph>, et chaque classe dérivée occulte le <ph id="ph3">`display`</ph> procédure dans sa classe de base.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>In the preceding example, the derived class <ph id="ph1">`secondClass`</ph> shadows <ph id="ph2">`display`</ph> with a <ph id="ph3">`Private`</ph> procedure.</source>
          <target state="translated">Dans l’exemple précédent, la classe dérivée <ph id="ph1">`secondClass`</ph> ombres <ph id="ph2">`display`</ph> avec un <ph id="ph3">`Private`</ph> procédure.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>When module <ph id="ph1">`callDisplay`</ph> calls <ph id="ph2">`display`</ph> in <ph id="ph3">`secondClass`</ph>, the calling code is outside <ph id="ph4">`secondClass`</ph> and therefore cannot access the private <ph id="ph5">`display`</ph> procedure.</source>
          <target state="translated">Lorsque module <ph id="ph1">`callDisplay`</ph> appelle <ph id="ph2">`display`</ph> dans <ph id="ph3">`secondClass`</ph>, le code appelant est à l’extérieur de <ph id="ph4">`secondClass`</ph> et par conséquent ne peut pas accéder privé <ph id="ph5">`display`</ph> procédure.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Shadowing is defeated, and the compiler resolves the reference to the base class <ph id="ph1">`display`</ph> procedure.</source>
          <target state="translated">L’occultation échoue et le compilateur résout la référence à la classe de base <ph id="ph1">`display`</ph> procédure.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>However, the further derived class <ph id="ph1">`thirdClass`</ph> declares <ph id="ph2">`display`</ph> as <ph id="ph3">`Public`</ph>, so the code in <ph id="ph4">`callDisplay`</ph> can access it.</source>
          <target state="translated">Toutefois, la classe dérivée supplémentaire <ph id="ph1">`thirdClass`</ph> déclare <ph id="ph2">`display`</ph> en tant que <ph id="ph3">`Public`</ph>, de sorte que le code dans <ph id="ph4">`callDisplay`</ph> peuvent y accéder.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Shadowing and Overriding</source>
          <target state="translated">Occultation et la substitution</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Do not confuse shadowing with overriding.</source>
          <target state="translated">Ne confondez pas l’occultation et la substitution.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Both are used when a derived class inherits from a base class, and both redefine one declared element with another.</source>
          <target state="translated">Tous deux sont utilisés lorsqu’une classe dérivée hérite d’une classe de base et redéfinissent un élément déclaré avec une autre.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>But there are significant differences between the two.</source>
          <target state="translated">Mais il existe des différences significatives entre les deux.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>For a comparison, see <bpt id="p1">[</bpt>Differences Between Shadowing and Overriding<ept id="p1">](../../../../visual-basic/programming-guide/language-features/declared-elements/differences-between-shadowing-and-overriding.md)</ept>.</source>
          <target state="translated">Pour obtenir une comparaison, consultez <bpt id="p1">[</bpt>différences entre l’occultation et la substitution<ept id="p1">](../../../../visual-basic/programming-guide/language-features/declared-elements/differences-between-shadowing-and-overriding.md)</ept>.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Shadowing and Overloading</source>
          <target state="translated">Occultation et surcharge</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>If you shadow the same base class element with more than one element in your derived class, the shadowing elements become overloaded versions of that element.</source>
          <target state="translated">Si vous masquez le même élément de classe de base avec plusieurs éléments dans votre classe dérivée, les éléments occultants deviennent des versions surchargées de cet élément.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Procedure Overloading<ept id="p1">](../../../../visual-basic/programming-guide/language-features/procedures/procedure-overloading.md)</ept>.</source>
          <target state="translated">Pour plus d’informations, consultez <bpt id="p1">[</bpt>surcharge de procédure<ept id="p1">](../../../../visual-basic/programming-guide/language-features/procedures/procedure-overloading.md)</ept>.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Accessing a Shadowed Element</source>
          <target state="translated">Accès à un élément occulté</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>When you access an element from a derived class, you normally do so through the current instance of that derived class, by qualifying the element name with the <ph id="ph1">`Me`</ph> keyword.</source>
          <target state="translated">Lorsque vous accédez à un élément d’une classe dérivée, vous le faites normalement par l’instance actuelle de cette classe dérivée, en qualifiant le nom de l’élément avec la <ph id="ph1">`Me`</ph> (mot clé).</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>If your derived class shadows the element in the base class, you can access the base class element by qualifying it with the <ph id="ph1">`MyBase`</ph> keyword.</source>
          <target state="translated">Votre classe dérivée occulte l’élément dans la classe de base, vous pouvez accéder à l’élément de classe de base en le qualifiant avec le <ph id="ph1">`MyBase`</ph> (mot clé).</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>For an example of accessing a shadowed element, see <bpt id="p1">[</bpt>How to: Access a Variable Hidden by a Derived Class<ept id="p1">](../../../../visual-basic/programming-guide/language-features/declared-elements/how-to-access-a-variable-hidden-by-a-derived-class.md)</ept>.</source>
          <target state="translated">Pour obtenir un exemple d’accès à un élément occulté, consultez <bpt id="p1">[</bpt>Comment : accéder à une Variable masquée par une classe dérivée de<ept id="p1">](../../../../visual-basic/programming-guide/language-features/declared-elements/how-to-access-a-variable-hidden-by-a-derived-class.md)</ept>.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Declaration of the Object Variable</source>
          <target state="translated">Déclaration de la Variable objet</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>How you create the object variable can also affect whether the derived class accesses a shadowing element or the shadowed element.</source>
          <target state="translated">Création de la variable objet peut également déterminer si la classe dérivée accède à un élément d’occultation ou l’élément occulté.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The following example creates two objects from a derived class, but one object is declared as the base class and the other as the derived class.</source>
          <target state="translated">L’exemple suivant crée deux objets d’une classe dérivée, mais un seul objet est déclaré comme classe de base et l’autre en tant que la classe dérivée.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>In the preceding example, the variable <ph id="ph1">`basObj`</ph> is declared as the base class.</source>
          <target state="translated">Dans l’exemple précédent, la variable <ph id="ph1">`basObj`</ph> est déclaré comme classe de base.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Assigning a <ph id="ph1">`dervCls`</ph> object to it constitutes a widening conversion and is therefore valid.</source>
          <target state="translated">Affectation d’un <ph id="ph1">`dervCls`</ph> objet constitue une conversion étendue et est donc valide.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>However, the base class cannot access the shadowing version of the variable <ph id="ph1">`z`</ph> in the derived class, so the compiler resolves <ph id="ph2">`basObj.z`</ph> to the original base class value.</source>
          <target state="translated">Toutefois, la classe de base ne peut pas accéder à la version de masquage de la variable <ph id="ph1">`z`</ph> dans la classe dérivée, le compilateur résout <ph id="ph2">`basObj.z`</ph> à la valeur d’origine de la classe de base.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">Voir aussi</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>References to Declared Elements<ept id="p1">](../../../../visual-basic/programming-guide/language-features/declared-elements/references-to-declared-elements.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Références aux éléments déclarés<ept id="p1">](../../../../visual-basic/programming-guide/language-features/declared-elements/references-to-declared-elements.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Scope in Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/language-features/declared-elements/scope.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Portée dans Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/language-features/declared-elements/scope.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Widening and Narrowing Conversions<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Conversions étendues et restrictives<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Shadows<ept id="p1">](../../../../visual-basic/language-reference/modifiers/shadows.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Ombres<ept id="p1">](../../../../visual-basic/language-reference/modifiers/shadows.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Overrides<ept id="p1">](../../../../visual-basic/language-reference/modifiers/overrides.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Les remplacements<ept id="p1">](../../../../visual-basic/language-reference/modifiers/overrides.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Me, My, MyBase, and MyClass<ept id="p1">](../../../../visual-basic/programming-guide/program-structure/me-my-mybase-and-myclass.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Me, My, MyBase et MyClass<ept id="p1">](../../../../visual-basic/programming-guide/program-structure/me-my-mybase-and-myclass.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Inheritance Basics<ept id="p1">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/inheritance-basics.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>Éléments fondamentaux de l’héritage<ept id="p1">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/inheritance-basics.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>