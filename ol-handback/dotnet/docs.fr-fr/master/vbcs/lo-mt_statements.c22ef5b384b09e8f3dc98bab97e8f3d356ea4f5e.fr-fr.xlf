<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">001ea1cb5e651b95f808eefd47fd468f556550a1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\statements.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">51d8c0b1e82c05d55d408985a200a190f434ef24</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6931b6f08eb6c22cd973a2ae2fc585297fa9811a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Statements in Visual Basic | Microsoft Docs</source>
          <target state="translated">Instructions dans Visual Basic | Documents Microsoft</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Statements in Visual Basic</source>
          <target state="translated">Instructions dans Visual Basic</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A statement in <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> is a complete instruction.</source>
          <target state="translated">Une instruction <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> est une instruction complète.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>It can contain keywords, operators, variables, constants, and expressions.</source>
          <target state="translated">Il peut contenir des mots clés, des opérateurs, des variables, des constantes et des expressions.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Each statement belongs to one of the following categories:</source>
          <target state="translated">Chaque instruction appartient à une des catégories suivantes :</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Declaration Statements<ept id="p1">**</ept>, which name a variable, constant, or procedure, and can also specify a data type.</source>
          <target state="translated"><bpt id="p1">**</bpt>Instructions de déclaration<ept id="p1">**</ept>, nommer une variable, une constante ou une procédure et qui peuvent également spécifier un type de données.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Executable Statements<ept id="p1">**</ept>, which initiate actions.</source>
          <target state="translated"><bpt id="p1">**</bpt>Instructions exécutables<ept id="p1">**</ept>, laquelle lancer des actions.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>These statements can call a method or function, and they can loop or branch through blocks of code.</source>
          <target state="translated">Ces instructions peuvent appeler une méthode ou une fonction, et peuvent parcourir ou créer des branches de blocs de code.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Executable statements include <bpt id="p1">**</bpt>Assignment Statements<ept id="p1">**</ept>, which assign a value or expression to a variable or constant.</source>
          <target state="translated">Les instructions exécutables contiennent <bpt id="p1">**</bpt>instructions d’assignation<ept id="p1">**</ept>, qui affectent une valeur ou une expression à une variable ou constante.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This topic describes each category.</source>
          <target state="translated">Cette rubrique décrit chaque catégorie.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Also, this topic describes how to combine multiple statements on a single line and how to continue a statement over multiple lines.</source>
          <target state="translated">En outre, cette rubrique décrit comment combiner plusieurs instructions sur une seule ligne et comment continuer une instruction sur plusieurs lignes.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Declaration Statements</source>
          <target state="translated">Instructions de déclaration</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You use declaration statements to name and define procedures, variables, properties, arrays, and constants.</source>
          <target state="translated">Instructions de déclaration vous permet de nommer et de définir des procédures, des variables, des propriétés, des tableaux et des constantes.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>When you declare a programming element, you can also define its data type, access level, and scope.</source>
          <target state="translated">Lorsque vous déclarez un élément de programmation, vous pouvez également définir son type de données, le niveau d’accès et la portée.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Declared Element Characteristics<ept id="p1">](../../../visual-basic/programming-guide/language-features/declared-elements/declared-element-characteristics.md)</ept>.</source>
          <target state="translated">Pour plus d’informations, consultez <bpt id="p1">[</bpt>caractéristiques d’éléments déclarés<ept id="p1">](../../../visual-basic/programming-guide/language-features/declared-elements/declared-element-characteristics.md)</ept>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The following example contains three declarations.</source>
          <target state="translated">L’exemple suivant contient trois déclarations.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#80<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_1.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements&amp;#80;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_1.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The first declaration is the <ph id="ph1">`Sub`</ph> statement.</source>
          <target state="translated">La première déclaration est la <ph id="ph1">`Sub`</ph> instruction.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Together with its matching <ph id="ph1">`End Sub`</ph> statement, it declares a procedure named <ph id="ph2">`applyFormat`</ph>.</source>
          <target state="translated">Avec sa mise en correspondance <ph id="ph1">`End Sub`</ph> instruction, elle déclare une procédure nommée <ph id="ph2">`applyFormat`</ph>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>It also specifies that <ph id="ph1">`applyFormat`</ph> is <ph id="ph2">`Public`</ph>, which means that any code that can refer to it can call it.</source>
          <target state="translated">Il spécifie également que <ph id="ph1">`applyFormat`</ph> est <ph id="ph2">`Public`</ph>, ce qui signifie que tout code qui peut faire peut appeler.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The second declaration is the <ph id="ph1">`Const`</ph> statement, which declares the constant <ph id="ph2">`limit`</ph>, specifying the <ph id="ph3">`Integer`</ph> data type and a value of 33.</source>
          <target state="translated">La deuxième déclaration est la <ph id="ph1">`Const`</ph> instruction qui déclare la constante <ph id="ph2">`limit`</ph>, en spécifiant le <ph id="ph3">`Integer`</ph> type de données et une valeur 33.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The third declaration is the <ph id="ph1">`Dim`</ph> statement, which declares the variable <ph id="ph2">`thisWidget`</ph>.</source>
          <target state="translated">La troisième déclaration est la <ph id="ph1">`Dim`</ph> instruction qui déclare la variable <ph id="ph2">`thisWidget`</ph>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The data type is a specific object, namely an object created from the <ph id="ph1">`Widget`</ph> class.</source>
          <target state="translated">Le type de données est un objet spécifique, à savoir un objet créé à partir de la <ph id="ph1">`Widget`</ph> classe.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>You can declare a variable to be of any elementary data type or of any object type that is exposed in the application you are using.</source>
          <target state="translated">Vous pouvez déclarer une variable de n’importe quel type de données élémentaire ou de tout type d’objet qui est exposé dans l’application que vous utilisez.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Initial Values</source>
          <target state="translated">Valeurs initiales</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>When the code containing a declaration statement runs, <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> reserves the memory required for the declared element.</source>
          <target state="translated">Lorsque le code contenant une instruction de déclaration s’exécute, <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> réserve la mémoire requise pour l’élément déclaré.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If the element holds a value, <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> initializes it to the default value for its data type.</source>
          <target state="translated">Si l’élément contient une valeur, <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> initialise à la valeur par défaut pour son type de données.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For more information, see "Behavior" in <bpt id="p1">[</bpt>Dim Statement<ept id="p1">](../../../visual-basic/language-reference/statements/dim-statement.md)</ept>.</source>
          <target state="translated">Pour plus d’informations, consultez « Comportement » dans <bpt id="p1">[</bpt>une instruction Dim<ept id="p1">](../../../visual-basic/language-reference/statements/dim-statement.md)</ept>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You can assign an initial value to a variable as part of its declaration, as the following example illustrates.</source>
          <target state="translated">Vous pouvez affecter une valeur initiale à une variable dans le cadre de sa déclaration, comme l’illustre l’exemple suivant.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#81<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_2.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements&amp;#81;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_2.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If a variable is an object variable, you can explicitly create an instance of its class when you declare it by using the <bpt id="p1">[</bpt>New Operator<ept id="p1">](../../../visual-basic/language-reference/operators/new-operator.md)</ept> keyword, as the following example illustrates.</source>
          <target state="translated">Si une variable est une variable objet, vous pouvez créer explicitement une instance de sa classe lorsque vous la déclarez à l’aide de la <bpt id="p1">[</bpt>nouveau opérateur<ept id="p1">](../../../visual-basic/language-reference/operators/new-operator.md)</ept> (mot clé), comme l’exemple suivant illustre.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#82<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_3.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements&amp;#82;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_3.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Note that the initial value you specify in a declaration statement is not assigned to a variable until execution reaches its declaration statement.</source>
          <target state="translated">Notez que la valeur initiale que vous spécifiez dans une instruction de déclaration n'est pas affectée à une variable jusqu'à ce que l’exécution atteint son instruction de déclaration.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Until that time, the variable contains the default value for its data type.</source>
          <target state="translated">En attendant, la variable contient la valeur par défaut pour son type de données.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Executable Statements</source>
          <target state="translated">Instructions exécutables</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>An executable statement performs an action.</source>
          <target state="translated">Une instruction exécutable effectue une action.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>It can call a procedure, branch to another place in the code, loop through several statements, or evaluate an expression.</source>
          <target state="translated">Elle peut appeler une procédure, la branche à un autre emplacement dans le code, parcourir plusieurs instructions, ou évaluer une expression.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>An assignment statement is a special case of an executable statement.</source>
          <target state="translated">Une instruction d’assignation est un cas spécial d’une instruction exécutable.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The following example uses an <ph id="ph1">`If...Then...Else`</ph> control structure to run different blocks of code based on the value of a variable.</source>
          <target state="translated">L’exemple suivant utilise un <ph id="ph1">`If...Then...Else`</ph> structure pour exécuter différents blocs de code selon la valeur d’une variable de contrôle.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Within each block of code, a <ph id="ph1">`For...Next`</ph> loop runs a specified number of times.</source>
          <target state="translated">Dans chaque bloc de code, un <ph id="ph1">`For...Next`</ph> boucle s’exécute un nombre de fois spécifié.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#83<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_4.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>83 VbVbalrStatements<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_4.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`If`</ph> statement in the preceding example checks the value of the parameter <ph id="ph2">`clockwise`</ph>.</source>
          <target state="translated">Le <ph id="ph1">`If`</ph> instruction dans l’exemple précédent vérifie la valeur du paramètre <ph id="ph2">`clockwise`</ph>.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>If the value is <ph id="ph1">`True`</ph>, it calls the <ph id="ph2">`spinClockwise`</ph> method of <ph id="ph3">`aWidget`</ph>.</source>
          <target state="translated">Si la valeur est <ph id="ph1">`True`</ph>, il appelle le <ph id="ph2">`spinClockwise`</ph> méthode <ph id="ph3">`aWidget`</ph>.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If the value is <ph id="ph1">`False`</ph>, it calls the <ph id="ph2">`spinCounterClockwise`</ph> method of <ph id="ph3">`aWidget`</ph>.</source>
          <target state="translated">Si la valeur est <ph id="ph1">`False`</ph>, il appelle le <ph id="ph2">`spinCounterClockwise`</ph> méthode <ph id="ph3">`aWidget`</ph>.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`If...Then...Else`</ph> control structure ends with <ph id="ph2">`End If`</ph>.</source>
          <target state="translated">Le <ph id="ph1">`If...Then...Else`</ph> structure de contrôle se termine par <ph id="ph2">`End If`</ph>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`For...Next`</ph> loop within each block calls the appropriate method a number of times equal to the value of the <ph id="ph2">`revolutions`</ph> parameter.</source>
          <target state="translated">Le <ph id="ph1">`For...Next`</ph> boucle à l’intérieur de chaque bloc appelle la méthode appropriée un nombre de fois égal à la valeur de le <ph id="ph2">`revolutions`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Assignment Statements</source>
          <target state="translated">Instructions d’assignation</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Assignment statements carry out assignment operations, which consist of taking the value on the right side of the assignment operator (<ph id="ph1">`=`</ph>) and storing it in the element on the left, as in the following example.</source>
          <target state="translated">Instructions d’assignation effectuent des opérations d’assignation qui consistent à prendre la valeur située à droite de l’opérateur d’assignation (<ph id="ph1">`=`</ph>) et en les stockant dans l’élément sur la gauche, comme dans l’exemple suivant.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#73<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_5.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements&amp;#73;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_5.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>In the preceding example, the assignment statement stores the literal value 42 in the variable <ph id="ph1">`v`</ph>.</source>
          <target state="translated">Dans l’exemple précédent, l’instruction d’assignation stocke la valeur littérale 42 dans la variable <ph id="ph1">`v`</ph>.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Eligible Programming Elements</source>
          <target state="translated">Éléments de programmation disponibles</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The programming element on the left side of the assignment operator must be able to accept and store a value.</source>
          <target state="translated">L’élément de programmation sur le côté gauche de l’opérateur d’assignation doit être en mesure d’accepter et de stocker une valeur.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>This means it must be a variable or property that is not <bpt id="p1">[</bpt>ReadOnly<ept id="p1">](../../../visual-basic/language-reference/modifiers/readonly.md)</ept>, or it must be an array element.</source>
          <target state="translated">Cela signifie qu’il doit être une variable ou une propriété qui n’est pas <bpt id="p1">[</bpt>ReadOnly<ept id="p1">](../../../visual-basic/language-reference/modifiers/readonly.md)</ept>, ou il doit être un élément de tableau.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>In the context of an assignment statement, such an element is sometimes called an <bpt id="p1">*</bpt>lvalue<ept id="p1">*</ept>, for "left value."</source>
          <target state="translated">Dans le contexte d’une instruction d’assignation, un tel élément est parfois appelé un <bpt id="p1">*</bpt>lvalue<ept id="p1">*</ept>, pour « valeur de gauche ».</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The value on the right side of the assignment operator is generated by an expression, which can consist of any combination of literals, constants, variables, properties, array elements, other expressions, or function calls.</source>
          <target state="translated">La valeur située à droite de l’opérateur d’assignation est générée par une expression qui peut être composé de n’importe quelle combinaison de littéraux, constantes, variables, propriétés, éléments de tableau, les expressions ou les appels de fonction.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The following example illustrates this.</source>
          <target state="translated">L'exemple suivant illustre ce comportement.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#74<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_6.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements&amp;#74;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_6.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The preceding example adds the value held in variable <ph id="ph1">`y`</ph> to the value held in variable <ph id="ph2">`z`</ph>, and then adds the value returned by the call to function <ph id="ph3">`findResult`</ph>.</source>
          <target state="translated">L’exemple précédent ajoute la valeur contenue dans la variable <ph id="ph1">`y`</ph> à la valeur contenue dans la variable <ph id="ph2">`z`</ph>, puis ajoute la valeur retournée par l’appel de fonction <ph id="ph3">`findResult`</ph>.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The total value of this expression is then stored in variable <ph id="ph1">`x`</ph>.</source>
          <target state="translated">La valeur totale de cette expression est ensuite stockée dans la variable <ph id="ph1">`x`</ph>.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Data Types in Assignment Statements</source>
          <target state="translated">Types de données dans les instructions d’assignation</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>In addition to numeric values, the assignment operator can also assign <ph id="ph1">`String`</ph> values, as the following example illustrates.</source>
          <target state="translated">En plus des valeurs numériques, l’opérateur d’assignation peut également assigner <ph id="ph1">`String`</ph> valeurs, comme l’illustre l’exemple suivant.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#75<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_7.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements&amp;#75;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_7.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>You can also assign <ph id="ph1">`Boolean`</ph> values, using either a <ph id="ph2">`Boolean`</ph> literal or a <ph id="ph3">`Boolean`</ph> expression, as the following example illustrates.</source>
          <target state="translated">Vous pouvez également affecter <ph id="ph1">`Boolean`</ph> à l’aide d’une des valeurs un <ph id="ph2">`Boolean`</ph> littéral ou un <ph id="ph3">`Boolean`</ph> expression, comme l’exemple suivant illustre.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#76<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_8.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements&amp;#76;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_8.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Similarly, you can assign appropriate values to programming elements of the <ph id="ph1">`Char`</ph>, <ph id="ph2">`Date`</ph>, or <ph id="ph3">`Object`</ph> data type.</source>
          <target state="translated">De même, vous pouvez assigner des valeurs appropriées aux éléments de programmation de la <ph id="ph1">`Char`</ph>, <ph id="ph2">`Date`</ph>, ou <ph id="ph3">`Object`</ph> type de données.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>You can also assign an object instance to an element declared to be of the class from which that instance is created.</source>
          <target state="translated">Vous pouvez également attribuer une instance d’objet à un élément déclaré comme étant de la classe à partir de laquelle cette instance est créée.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Compound Assignment Statements</source>
          <target state="translated">Instructions d’assignation composée</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Compound assignment statements<ept id="p1">*</ept> first perform an operation on an expression before assigning it to a programming element.</source>
          <target state="translated"><bpt id="p1">*</bpt>Instructions d’assignation composée<ept id="p1">*</ept> tout d’abord effectuer une opération sur une expression avant de l’assigner à un élément de programmation.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The following example illustrates one of these operators, <ph id="ph1">`+=`</ph>, which increments the value of the variable on the left side of the operator by the value of the expression on the right.</source>
          <target state="translated">L’exemple suivant illustre l’un de ces opérateurs, <ph id="ph1">`+=`</ph>, qui incrémente la valeur de la variable sur le côté gauche de l’opérateur par la valeur de l’expression de droite.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#77<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_9.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements&amp;#77;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_9.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The preceding example adds 1 to the value of <ph id="ph1">`n`</ph>, and then stores that new value in <ph id="ph2">`n`</ph>.</source>
          <target state="translated">L’exemple précédent ajoute 1 à la valeur de <ph id="ph1">`n`</ph>, puis stocke cette nouvelle valeur dans <ph id="ph2">`n`</ph>.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>It is a shorthand equivalent of the following statement:</source>
          <target state="translated">Il est un raccourci équivalente de l’instruction suivante :</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#78<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_10.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements&amp;#78;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_10.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>A variety of compound assignment operations can be performed using operators of this type.</source>
          <target state="translated">Un ensemble d’opérations d’assignation composée peut être effectué à l’aide d’opérateurs de ce type.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>For a list of these operators and more information about them, see <bpt id="p1">[</bpt>Assignment Operators<ept id="p1">](../../../visual-basic/language-reference/operators/assignment-operators.md)</ept>.</source>
          <target state="translated">Pour obtenir la liste de ces opérateurs et plus d’informations à leur sujet, consultez <bpt id="p1">[</bpt>opérateurs d’assignation<ept id="p1">](../../../visual-basic/language-reference/operators/assignment-operators.md)</ept>.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The concatenation assignment operator (<ph id="ph1">`&amp;=`</ph>) is useful for adding a string to the end of already existing strings, as the following example illustrates.</source>
          <target state="translated">L’opérateur d’assignation de concaténation (<ph id="ph1">`&amp;=`</ph>) est utile pour ajouter une chaîne à la fin d’existants des chaînes, comme l’illustre l’exemple suivant.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#79<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_11.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements&amp;#79;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_11.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Type Conversions in Assignment Statements</source>
          <target state="translated">Conversions de type dans les instructions d’assignation</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The value you assign to a variable, property, or array element must be of a data type appropriate to that destination element.</source>
          <target state="translated">La valeur que vous assignez à une variable, une propriété ou un élément de tableau doit être un type de données approprié pour cet élément de destination.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>In general, you should try to generate a value of the same data type as that of the destination element.</source>
          <target state="translated">En général, vous devez tenter de générer une valeur du même type de données que celui de l’élément de destination.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>However, some types can be converted to other types during assignment.</source>
          <target state="translated">Toutefois, certains types peuvent être convertis en d’autres types lors de l’attribution.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>For information on converting between data types, see <bpt id="p1">[</bpt>Type Conversions in Visual Basic<ept id="p1">](../../../visual-basic/programming-guide/language-features/data-types/type-conversions.md)</ept>.</source>
          <target state="translated">Pour plus d’informations sur la conversion entre types de données, consultez <bpt id="p1">[</bpt>en Visual Basic, les Conversions de Type<ept id="p1">](../../../visual-basic/programming-guide/language-features/data-types/type-conversions.md)</ept>.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>In brief, <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> automatically converts a value of a given type to any other type to which it widens.</source>
          <target state="translated">En bref, <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> convertit automatiquement une valeur d’un type donné en un autre type auquel elle s’étend.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>widening conversion<ept id="p1">*</ept> is one in that always succeeds at run time and does not lose any data.</source>
          <target state="translated">A <bpt id="p1">*</bpt>conversion étendue<ept id="p1">*</ept> est une qui réussit au moment de l’exécution toujours et que vous ne perdez pas de données.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> converts an <ph id="ph2">`Integer`</ph> value to <ph id="ph3">`Double`</ph> when appropriate, because <ph id="ph4">`Integer`</ph> widens to <ph id="ph5">`Double`</ph>.</source>
          <target state="translated">Par exemple, <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> convertit un <ph id="ph2">`Integer`</ph> valeur <ph id="ph3">`Double`</ph> le cas échéant, car <ph id="ph4">`Integer`</ph> s’étend à <ph id="ph5">`Double`</ph>.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Widening and Narrowing Conversions<ept id="p1">](../../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md)</ept>.</source>
          <target state="translated">Pour plus d’informations, consultez <bpt id="p1">[</bpt>Conversions étendues et restrictives<ept id="p1">](../../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md)</ept>.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Narrowing conversions<ept id="p1">*</ept> (those that are not widening) carry a risk of failure at run time, or of data loss.</source>
          <target state="translated"><bpt id="p1">*</bpt>Les conversions restrictives<ept id="p1">*</ept> (ceux qui ne sont pas étendues) comportent un risque de défaillance au moment de l’exécution, ou de perte de données.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>You can perform a narrowing conversion explicitly by using a type conversion function, or you can direct the compiler to perform all conversions implicitly by setting <ph id="ph1">`Option Strict Off`</ph>.</source>
          <target state="translated">Vous pouvez effectuer explicitement une conversion restrictive en utilisant une fonction de conversion de type, ou vous pouvez demander au compilateur d’effectuer implicitement de toutes les conversions en définissant <ph id="ph1">`Option Strict Off`</ph>.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Implicit and Explicit Conversions<ept id="p1">](../../../visual-basic/programming-guide/language-features/data-types/implicit-and-explicit-conversions.md)</ept>.</source>
          <target state="translated">Pour plus d’informations, consultez <bpt id="p1">[</bpt>Conversions implicites et explicites<ept id="p1">](../../../visual-basic/programming-guide/language-features/data-types/implicit-and-explicit-conversions.md)</ept>.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Putting Multiple Statements on One Line</source>
          <target state="translated">Placement de plusieurs instructions sur une seule ligne</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>You can have multiple statements on a single line separated by the colon (<ph id="ph1">`:`</ph>) character.</source>
          <target state="translated">Vous pouvez avoir plusieurs instructions sur une seule ligne, séparés par le signe deux-points (<ph id="ph1">`:`</ph>) caractères.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The following example illustrates this.</source>
          <target state="translated">L'exemple suivant illustre ce comportement.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#70<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_12.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements&amp;#70;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_12.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Though occasionally convenient, this form of syntax makes your code hard to read and maintain.</source>
          <target state="translated">Souvent, ce type de syntaxe rend votre code difficile à lire et à gérer.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Thus, it is recommended that you keep one statement to a line.</source>
          <target state="translated">Par conséquent, il est recommandé de conserver une instruction sur une ligne.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Continuing a Statement over Multiple Lines</source>
          <target state="translated">Continuer une instruction sur plusieurs lignes</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>A statement usually fits on one line, but when it is too long, you can continue it onto the next line using a line-continuation sequence, which consists of a space followed by an underscore character (<ph id="ph1">`_`</ph>) followed by a carriage return.</source>
          <target state="translated">Une instruction tienne généralement sur une ligne, mais lorsqu’il est trop long, vous pouvez la continuer sur la ligne suivante à l’aide d’une séquence de continuation de ligne, qui se compose d’un espace suivi par un caractère de soulignement (<ph id="ph1">`_`</ph>) suivie d’un retour chariot.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>In the following example, the <ph id="ph1">`MsgBox`</ph> executable statement is continued over two lines.</source>
          <target state="translated">Dans l’exemple suivant, la <ph id="ph1">`MsgBox`</ph> instruction exécutable se poursuit sur deux lignes.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#71<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_13.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements&amp;#71;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_13.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Implicit Line Continuation</source>
          <target state="translated">Continuation de ligne implicite</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>In many cases, you can continue a statement on the next consecutive line without using the underscore character (_).</source>
          <target state="translated">Dans de nombreux cas, vous pouvez continuer une instruction sur la ligne consécutive suivante sans utiliser le caractère de soulignement (_).</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The following table lists the syntax elements that implicitly continue the statement on the next line of code.</source>
          <target state="translated">Le tableau suivant répertorie les éléments de syntaxe qui continuent implicitement l’instruction sur la ligne de code suivante.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Syntax element</source>
          <target state="translated">Élément de syntaxe</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Exemple</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>After a comma (<ph id="ph1">`,`</ph>).</source>
          <target state="translated">Après une virgule (<ph id="ph1">`,`</ph>).</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation#1<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_14.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation n °&amp;1;<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_14.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>After an open parenthesis (<ph id="ph1">`(`</ph>) or before a closing parenthesis (<ph id="ph2">`)`</ph>).</source>
          <target state="translated">Après une parenthèse ouvrante (<ph id="ph1">`(`</ph>) ou avant une parenthèse fermante (<ph id="ph2">`)`</ph>).</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation#2<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_15.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation n °&amp;2;<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_15.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>After an open curly brace (<ph id="ph1">`{`</ph>) or before a closing curly brace (<ph id="ph2">`}`</ph>).</source>
          <target state="translated">Après une accolade ouvrante (<ph id="ph1">`{`</ph>) ou avant une accolade fermante (<ph id="ph2">`}`</ph>).</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation#3<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_16.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation n °&amp;3;<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_16.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Object Initializers: Named and Anonymous Types<ept id="p1">](../../../visual-basic/programming-guide/language-features/objects-and-classes/object-initializers-named-and-anonymous-types.md)</ept> or <bpt id="p2">[</bpt>Collection Initializers<ept id="p2">](../../../visual-basic/programming-guide/language-features/collection-initializers/index.md)</ept>.</source>
          <target state="translated">Pour plus d’informations, consultez <bpt id="p1">[</bpt>initialiseurs d’objets : Types nommés et anonymes<ept id="p1">](../../../visual-basic/programming-guide/language-features/objects-and-classes/object-initializers-named-and-anonymous-types.md)</ept> ou <bpt id="p2">[</bpt>initialiseurs de Collection<ept id="p2">](../../../visual-basic/programming-guide/language-features/collection-initializers/index.md)</ept>.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>After an open embedded expression (<ph id="ph1">`&lt;%=`</ph>) or before the close of an embedded expression (<ph id="ph2">`%&gt;`</ph>) within an XML literal.</source>
          <target state="translated">Après avoir ouvert d’expression incorporée (<ph id="ph1">`&lt;%=`</ph>) ou avant la fermeture d’une expression incorporée (<ph id="ph2">`%&gt;`</ph>) dans un littéral XML.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation#4<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_17.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation n °&amp;4;<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_17.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Embedded Expressions in XML<ept id="p1">](../../../visual-basic/programming-guide/language-features/xml/embedded-expressions-in-xml.md)</ept>.</source>
          <target state="translated">Pour plus d’informations, consultez <bpt id="p1">[</bpt>Expressions incorporées en XML<ept id="p1">](../../../visual-basic/programming-guide/language-features/xml/embedded-expressions-in-xml.md)</ept>.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>After the concatenation operator (<ph id="ph1">`&amp;`</ph>).</source>
          <target state="translated">Après l’opérateur de concaténation (<ph id="ph1">`&amp;`</ph>).</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnConventions#9<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_18.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnConventions&amp;#9;<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_18.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Operators Listed by Functionality<ept id="p1">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept>.</source>
          <target state="translated">Pour plus d’informations, consultez <bpt id="p1">[</bpt>opérateurs répertoriés par fonctionnalité<ept id="p1">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept>.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>After assignment operators (<ph id="ph1">`=`</ph>, <ph id="ph2">`&amp;=`</ph>, <ph id="ph3">`:=`</ph>, <ph id="ph4">`+=`</ph>, <ph id="ph5">`-=`</ph>, <ph id="ph6">`*=`</ph>, <ph id="ph7">`/=`</ph>, <ph id="ph8">`\=`</ph>, <ph id="ph9">`^=`</ph>, <ph id="ph10">`&lt;&lt;=`</ph>, <ph id="ph11">`&gt;&gt;=`</ph>).</source>
          <target state="translated">After assignment operators (<ph id="ph1">`=`</ph>, <ph id="ph2">`&amp;=`</ph>, <ph id="ph3">`:=`</ph>, <ph id="ph4">`+=`</ph>, <ph id="ph5">`-=`</ph>, <ph id="ph6">`*=`</ph>, <ph id="ph7">`/=`</ph>, <ph id="ph8">`\=`</ph>, <ph id="ph9">`^=`</ph>, <ph id="ph10">`&lt;&lt;=`</ph>, <ph id="ph11">`&gt;&gt;=`</ph>).</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation#5<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_19.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation n °&amp;5;<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_19.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Operators Listed by Functionality<ept id="p1">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept>.</source>
          <target state="translated">Pour plus d’informations, consultez <bpt id="p1">[</bpt>opérateurs répertoriés par fonctionnalité<ept id="p1">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept>.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>After binary operators (<ph id="ph1">`+`</ph>, <ph id="ph2">`-`</ph>, <ph id="ph3">`/`</ph>, <ph id="ph4">`*`</ph>, <ph id="ph5">`Mod`</ph>, <ph id="ph6">`&lt;&gt;`</ph>, <ph id="ph7">`&lt;`</ph>, <ph id="ph8">`&gt;`</ph>, <ph id="ph9">`&lt;=`</ph>, <ph id="ph10">`&gt;=`</ph>, <ph id="ph11">`^`</ph>, <ph id="ph12">`&gt;&gt;`</ph>, <ph id="ph13">`&lt;&lt;`</ph>, <ph id="ph14">`And`</ph>, <ph id="ph15">`AndAlso`</ph>, <ph id="ph16">`Or`</ph>, <ph id="ph17">`OrElse`</ph>, <ph id="ph18">`Like`</ph>, <ph id="ph19">`Xor`</ph>) within an expression.</source>
          <target state="translated">After binary operators (<ph id="ph1">`+`</ph>, <ph id="ph2">`-`</ph>, <ph id="ph3">`/`</ph>, <ph id="ph4">`*`</ph>, <ph id="ph5">`Mod`</ph>, <ph id="ph6">`&lt;&gt;`</ph>, <ph id="ph7">`&lt;`</ph>, <ph id="ph8">`&gt;`</ph>, <ph id="ph9">`&lt;=`</ph>, <ph id="ph10">`&gt;=`</ph>, <ph id="ph11">`^`</ph>, <ph id="ph12">`&gt;&gt;`</ph>, <ph id="ph13">`&lt;&lt;`</ph>, <ph id="ph14">`And`</ph>, <ph id="ph15">`AndAlso`</ph>, <ph id="ph16">`Or`</ph>, <ph id="ph17">`OrElse`</ph>, <ph id="ph18">`Like`</ph>, <ph id="ph19">`Xor`</ph>) within an expression.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation#7<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_20.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation&amp;#7;<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_20.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Operators Listed by Functionality<ept id="p1">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept>.</source>
          <target state="translated">Pour plus d’informations, consultez <bpt id="p1">[</bpt>opérateurs répertoriés par fonctionnalité<ept id="p1">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept>.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>After the <ph id="ph1">`Is`</ph> and <ph id="ph2">`IsNot`</ph> operators.</source>
          <target state="translated">Après le <ph id="ph1">`Is`</ph> et <ph id="ph2">`IsNot`</ph> opérateurs.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation#8<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_21.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation n °&amp;8;<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_21.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Operators Listed by Functionality<ept id="p1">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept>.</source>
          <target state="translated">Pour plus d’informations, consultez <bpt id="p1">[</bpt>opérateurs répertoriés par fonctionnalité<ept id="p1">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept>.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>After a member qualifier character (<ph id="ph1">`.`</ph>) and before the member name.</source>
          <target state="translated">Après un caractère de qualificateur de membre (<ph id="ph1">`.`</ph>) et avant le nom du membre.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>However, you must include a line-continuation character (_) following a member qualifier character when you are using the <ph id="ph1">`With`</ph> statement or supplying values in the initialization list for a type.</source>
          <target state="translated">Toutefois, vous devez inclure un caractère de continuation de ligne (_) après un caractère de qualificateur de membre lorsque vous utilisez la <ph id="ph1">`With`</ph> instruction ou indiquez des valeurs dans la liste d’initialisation pour un type.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Consider breaking the line after the assignment operator (for example, <ph id="ph1">`=`</ph>) when you are using <ph id="ph2">`With`</ph> statements or object initialization lists.</source>
          <target state="translated">Arrêtez la ligne après l’opérateur d’assignation (par exemple, <ph id="ph1">`=`</ph>) lorsque vous utilisez <ph id="ph2">`With`</ph> instructions ou des listes d’initialisation d’objets.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation#5<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_19.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation n °&amp;5;<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_19.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation#14<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_22.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation&amp;#14;<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_22.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>With...End With Statement<ept id="p1">](../../../visual-basic/language-reference/statements/with-end-with-statement.md)</ept> or <bpt id="p2">[</bpt>Object Initializers: Named and Anonymous Types<ept id="p2">](../../../visual-basic/programming-guide/language-features/objects-and-classes/object-initializers-named-and-anonymous-types.md)</ept>.</source>
          <target state="translated">Pour plus d’informations, consultez <bpt id="p1">[</bpt>avec... End With, instruction<ept id="p1">](../../../visual-basic/language-reference/statements/with-end-with-statement.md)</ept> ou <bpt id="p2">[</bpt>initialiseurs d’objets : Types nommés et anonymes<ept id="p2">](../../../visual-basic/programming-guide/language-features/objects-and-classes/object-initializers-named-and-anonymous-types.md)</ept>.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>After an XML axis property qualifier (<ph id="ph1">`.`</ph> or <ph id="ph2">`.@`</ph> or <ph id="ph3">`...`</ph>).</source>
          <target state="translated">Après un qualificateur de propriété d’axe XML (<ph id="ph1">`.`</ph> ou <ph id="ph2">`.@`</ph> ou <ph id="ph3">`...`</ph>).</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>However, you must include a line-continuation character (_) when you specify a member qualifier when you are using the <ph id="ph1">`With`</ph> keyword.</source>
          <target state="translated">Toutefois, vous devez inclure un caractère de continuation de ligne (_) lorsque vous spécifiez un qualificateur de membre lorsque vous utilisez la <ph id="ph1">`With`</ph> (mot clé).</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation#9<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_23.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation&amp;#9;<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_23.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>XML Axis Properties<ept id="p1">](../../../visual-basic/language-reference/xml-axis/xml-axis-properties.md)</ept>.</source>
          <target state="translated">Pour plus d’informations, consultez <bpt id="p1">[</bpt>propriétés d’axe XML<ept id="p1">](../../../visual-basic/language-reference/xml-axis/xml-axis-properties.md)</ept>.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>After a less-than sign (&lt;) or before a greater-than sign (<ph id="ph1">`&gt;`</ph>) when you specify an attribute.</source>
          <target state="translated">Après un inférieur-signe (&lt;) or="" before="" a="" greater-than="" sign=""&gt;&lt;/)&gt;<ph id="ph1">`&gt;`</ph>) lorsque vous spécifiez un attribut.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Also after a greater-than sign (<ph id="ph1">`&gt;`</ph>) when you specify an attribute.</source>
          <target state="translated">Également après un signe supérieur-signe (<ph id="ph1">`&gt;`</ph>) lorsque vous spécifiez un attribut.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>However, you must include a line-continuation character (_) when you specify assembly-level or module-level attributes.</source>
          <target state="translated">Toutefois, vous devez inclure un caractère de continuation de ligne (_) lorsque vous spécifiez des attributs de niveau assembly ou au niveau du module.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation#10<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_24.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation&amp;#10;<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_24.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Attributes overview<ept id="p1">](../../../visual-basic/programming-guide/concepts/attributes/index.md)</ept>.</source>
          <target state="translated">Pour plus d’informations, consultez <bpt id="p1">[</bpt>vue d’ensemble des attributs<ept id="p1">](../../../visual-basic/programming-guide/concepts/attributes/index.md)</ept>.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Before and after query operators (<ph id="ph1">`Aggregate`</ph>, <ph id="ph2">`Distinct`</ph>, <ph id="ph3">`From`</ph>, <ph id="ph4">`Group By`</ph>, <ph id="ph5">`Group Join`</ph>, <ph id="ph6">`Join`</ph>, <ph id="ph7">`Let`</ph>, <ph id="ph8">`Order By`</ph>, <ph id="ph9">`Select`</ph>, <ph id="ph10">`Skip`</ph>, <ph id="ph11">`Skip While`</ph>, <ph id="ph12">`Take`</ph>, <ph id="ph13">`Take While`</ph>, <ph id="ph14">`Where`</ph>, <ph id="ph15">`In`</ph>, <ph id="ph16">`Into`</ph>, <ph id="ph17">`On`</ph>, <ph id="ph18">`Ascending`</ph>, and <ph id="ph19">`Descending`</ph>).</source>
          <target state="translated">Before and after query operators (<ph id="ph1">`Aggregate`</ph>, <ph id="ph2">`Distinct`</ph>, <ph id="ph3">`From`</ph>, <ph id="ph4">`Group By`</ph>, <ph id="ph5">`Group Join`</ph>, <ph id="ph6">`Join`</ph>, <ph id="ph7">`Let`</ph>, <ph id="ph8">`Order By`</ph>, <ph id="ph9">`Select`</ph>, <ph id="ph10">`Skip`</ph>, <ph id="ph11">`Skip While`</ph>, <ph id="ph12">`Take`</ph>, <ph id="ph13">`Take While`</ph>, <ph id="ph14">`Where`</ph>, <ph id="ph15">`In`</ph>, <ph id="ph16">`Into`</ph>, <ph id="ph17">`On`</ph>, <ph id="ph18">`Ascending`</ph>, and <ph id="ph19">`Descending`</ph>).</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>You cannot break a line between the keywords of query operators that are made up of multiple keywords (<ph id="ph1">`Order By`</ph>, <ph id="ph2">`Group Join`</ph>, <ph id="ph3">`Take While`</ph>, and <ph id="ph4">`Skip While`</ph>).</source>
          <target state="translated">Vous ne pouvez pas interrompre une ligne entre les mots clés des opérateurs de requête qui sont composés de plusieurs mots clés (<ph id="ph1">`Order By`</ph>, <ph id="ph2">`Group Join`</ph>, <ph id="ph3">`Take While`</ph>, et <ph id="ph4">`Skip While`</ph>).</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation#11<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_25.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation&amp;#11;<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_25.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Queries<ept id="p1">](../../../visual-basic/language-reference/queries/queries.md)</ept>.</source>
          <target state="translated">Pour plus d’informations, consultez <bpt id="p1">[</bpt>requêtes<ept id="p1">](../../../visual-basic/language-reference/queries/queries.md)</ept>.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>After the <ph id="ph1">`In`</ph> keyword in a <ph id="ph2">`For Each`</ph> statement.</source>
          <target state="translated">Après le <ph id="ph1">`In`</ph> mot clé dans un <ph id="ph2">`For Each`</ph> instruction.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation#12<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_26.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation&amp;#12;<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_26.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>For Each...Next Statement<ept id="p1">](../../../visual-basic/language-reference/statements/for-each-next-statement.md)</ept>.</source>
          <target state="translated">Pour plus d’informations, consultez <bpt id="p1">[</bpt>For Each... L’instruction suivante<ept id="p1">](../../../visual-basic/language-reference/statements/for-each-next-statement.md)</ept>.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>After the <ph id="ph1">`From`</ph> keyword in a collection initializer.</source>
          <target state="translated">Après le <ph id="ph1">`From`</ph> mot clé dans un initialiseur de collection.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation#13<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_27.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation&amp;#13;<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_27.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Collection Initializers<ept id="p1">](../../../visual-basic/programming-guide/language-features/collection-initializers/index.md)</ept>.</source>
          <target state="translated">Pour plus d’informations, consultez <bpt id="p1">[</bpt>initialiseurs de Collection<ept id="p1">](../../../visual-basic/programming-guide/language-features/collection-initializers/index.md)</ept>.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Adding Comments</source>
          <target state="translated">Ajout de commentaires</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Source code is not always self-explanatory, even to the programmer who wrote it.</source>
          <target state="translated">Code source n’est pas toujours explicatif, même pour le programmeur qui l’a écrit.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>To help document their code, therefore, most programmers make liberal use of embedded comments.</source>
          <target state="translated">Pour vous aider à documenter leur code, la plupart des programmeurs donc l’utilisation répandue des commentaires incorporés.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Comments in code can explain a procedure or a particular instruction to anyone reading or working with it later.</source>
          <target state="translated">Les commentaires dans le code peuvent expliquer une procédure ou une instruction particulière à toute lecture ou de son utilisation ultérieure.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> ignores comments during compilation, and they do not affect the compiled code.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>ignore les commentaires pendant la compilation, et elles n’affectent pas le code compilé.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Comment lines begin with an apostrophe (<ph id="ph1">`'`</ph>) or <ph id="ph2">`REM`</ph> followed by a space.</source>
          <target state="translated">Les lignes de commentaire commencent par une apostrophe (<ph id="ph1">`'`</ph>) ou <ph id="ph2">`REM`</ph> suivi d’un espace.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>They can be added anywhere in code, except within a string.</source>
          <target state="translated">Ils peuvent être ajoutés n’importe où dans le code, sauf dans une chaîne.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>To append a comment to a statement, insert an apostrophe or <ph id="ph1">`REM`</ph> after the statement, followed by the comment.</source>
          <target state="translated">Pour ajouter un commentaire à une instruction, insérez une apostrophe ou <ph id="ph1">`REM`</ph> après l’instruction, suivie du commentaire.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Comments can also go on their own separate line.</source>
          <target state="translated">Les commentaires peuvent également figurer sur leur propre ligne distincte.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>The following example demonstrates these possibilities.</source>
          <target state="translated">L’exemple suivant illustre ces possibilités.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#72<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_28.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements&amp;#72;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_28.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Checking Compilation Errors</source>
          <target state="translated">Vérification des erreurs de Compilation</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>If, after you type a line of code, the line is displayed with a wavy blue underline (an error message may appear as well), there is a syntax error in the statement.</source>
          <target state="translated">Si, après avoir tapé une ligne de code, la ligne est affichée par un soulignement ondulé bleu (un message d’erreur peut être également), il existe une erreur de syntaxe dans l’instruction.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>You must find out what is wrong with the statement (by looking in the task list, or hovering over the error with the mouse pointer and reading the error message) and correct it.</source>
          <target state="translated">Vous devez savoir quel est le problème avec l’instruction (en recherchant dans la liste des tâches, ou pointant sur l’erreur avec le pointeur de la souris et lire le message d’erreur) et le corriger.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Until you have fixed all syntax errors in your code, your program will fail to compile correctly.</source>
          <target state="translated">Jusqu'à ce que vous avez résolu toutes les erreurs de syntaxe dans votre code, votre programme échouera se compile correctement.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Related Sections</source>
          <target state="translated">Rubriques connexes</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Term</source>
          <target state="translated">Terme</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Definition</source>
          <target state="translated">Définition</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Assignment Operators<ept id="p1">](../../../visual-basic/language-reference/operators/assignment-operators.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Opérateurs d’assignation<ept id="p1">](../../../visual-basic/language-reference/operators/assignment-operators.md)</ept></target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Provides links to language reference pages covering assignment operators such as <ph id="ph1">`=`</ph>, <ph id="ph2">`*=`</ph>, and <ph id="ph3">`&amp;=`</ph>.</source>
          <target state="translated">Fournit des liens vers les pages de référence du langage couvrant les opérateurs d’assignation comme <ph id="ph1">`=`</ph>, <ph id="ph2">`*=`</ph>, et <ph id="ph3">`&amp;=`</ph>.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Operators and Expressions<ept id="p1">](../../../visual-basic/programming-guide/language-features/operators-and-expressions/index.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Opérateurs et expressions<ept id="p1">](../../../visual-basic/programming-guide/language-features/operators-and-expressions/index.md)</ept></target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Shows how to combine elements with operators to yield new values.</source>
          <target state="translated">Montre comment combiner des éléments avec des opérateurs pour retourner de nouvelles valeurs.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Break and Combine Statements in Code<ept id="p1">](../../../visual-basic/programming-guide/program-structure/how-to-break-and-combine-statements-in-code.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Guide pratique : diviser et combiner des instructions dans le code<ept id="p1">](../../../visual-basic/programming-guide/program-structure/how-to-break-and-combine-statements-in-code.md)</ept></target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Shows how to break a single statement into multiple lines and how to place multiple statements on the same line.</source>
          <target state="translated">Montre comment diviser une instruction unique en plusieurs lignes et comment placer plusieurs instructions sur la même ligne.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Label Statements<ept id="p1">](../../../visual-basic/programming-guide/program-structure/how-to-label-statements.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Guide pratique : étiqueter des instructions<ept id="p1">](../../../visual-basic/programming-guide/program-structure/how-to-label-statements.md)</ept></target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Shows how to label a line of code.</source>
          <target state="translated">Montre comment étiqueter une ligne de code.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>