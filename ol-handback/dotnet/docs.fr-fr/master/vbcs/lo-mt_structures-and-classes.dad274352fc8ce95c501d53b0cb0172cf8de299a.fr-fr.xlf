<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e7402ec0fcfc279470d39a4919d3b5ec8b5d9dff</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\data-types\structures-and-classes.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ad3aeb05a6eb801d11a7118faa7babd02bf82958</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e791bc1570715fed0060c8c58d5509ff02983807</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Structures and Classes (Visual Basic) | Microsoft Docs</source>
          <target state="translated">Structures et Classes (Visual Basic) | Documents Microsoft</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Structures and Classes (Visual Basic)</source>
          <target state="translated">Structures et classes (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> unifies the syntax for structures and classes, with the result that both entities support most of the same features.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>unifie la syntaxe des structures et des classes, avec pour conséquence que les deux entités prennent en charge les mêmes fonctionnalités.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>However, there are also important differences between structures and classes.</source>
          <target state="translated">Toutefois, il existe également des différences importantes entre les classes et structures.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Classes have the advantage of being reference types — passing a reference is more efficient than passing a structure variable with all its data.</source>
          <target state="translated">Classes ont l’avantage d’être des types référence, en passant une référence est plus efficace de passer une variable de structure avec toutes ses données.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>On the other hand, structures do not require allocation of memory on the global heap.</source>
          <target state="translated">En revanche, les structures ne nécessitent pas l’allocation de mémoire sur le tas global.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Because you cannot inherit from a structure, structures should be used only for objects that do not need to be extended.</source>
          <target state="translated">Car il ne peut pas hériter d’une structure, structures doivent être utilisées uniquement pour les objets qui ne doivent pas être étendu.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Use structures when the object you wish to create has a small instance size, and take into account the performance characteristics of classes versus structures.</source>
          <target state="translated">Utilisez les structures lorsque l’objet que vous souhaitez créer a une taille d’instance réduite et prendre en compte les caractéristiques de performances des classes et structures.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Similarities</source>
          <target state="translated">Points communs</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Structures and classes are similar in the following respects:</source>
          <target state="translated">Les classes et les structures sont similaires aux points suivants :</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Both are <bpt id="p1">*</bpt>container<ept id="p1">*</ept> types, meaning that they contain other types as members.</source>
          <target state="translated">Les deux sont <bpt id="p1">*</bpt>conteneur<ept id="p1">*</ept> types, ce qui signifie qu’ils contiennent d’autres types en tant que membres.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Both have members, which can include constructors, methods, properties, fields, constants, enumerations, events, and event handlers.</source>
          <target state="translated">Elles ont des membres comprenant des constructeurs, méthodes, propriétés, champs, des constantes, énumérations, événements et gestionnaires d’événements.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>However, do not confuse these members with the declared <bpt id="p1">*</bpt>elements<ept id="p1">*</ept> of a structure.</source>
          <target state="translated">Toutefois, ne confondez pas ces membres avec les déclaré <bpt id="p1">*</bpt>éléments<ept id="p1">*</ept> d’une structure.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Members of both can have individualized access levels.</source>
          <target state="translated">Leurs membres peuvent avoir individualisée des niveaux d’accès.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For example, one member can be declared <ph id="ph1">`Public`</ph> and another <ph id="ph2">`Private`</ph>.</source>
          <target state="translated">Par exemple, un membre peut être déclaré <ph id="ph1">`Public`</ph> et un autre <ph id="ph2">`Private`</ph>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Both can implement interfaces.</source>
          <target state="translated">Les deux peuvent implémenter des interfaces.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Both can have shared constructors, with or without parameters.</source>
          <target state="translated">Les deux peuvent avoir des constructeurs partagés, avec ou sans paramètres.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Both can expose a <bpt id="p1">*</bpt>default property<ept id="p1">*</ept>, provided that property takes at least one parameter.</source>
          <target state="translated">Elles peuvent exposer une <bpt id="p1">*</bpt>propriété par défaut<ept id="p1">*</ept>, sous réserve que la propriété prenne au moins un paramètre.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Both can declare and raise events, and both can declare delegates.</source>
          <target state="translated">Elles peuvent déclarer et déclencher des événements, et déclarer des délégués.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Differences</source>
          <target state="translated">Différences</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Structures and classes differ in the following particulars:</source>
          <target state="translated">Structures et classes diffèrent dans les indications suivantes :</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Structures are <bpt id="p1">*</bpt>value types<ept id="p1">*</ept>; classes are <bpt id="p2">*</bpt>reference types<ept id="p2">*</ept>.</source>
          <target state="translated">Les structures sont <bpt id="p1">*</bpt>des types valeur<ept id="p1">*</ept>; les classes sont <bpt id="p2">*</bpt>types référence<ept id="p2">*</ept>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>A variable of a structure type contains the structure's data, rather than containing a reference to the data as a class type does.</source>
          <target state="translated">Une variable d’un type structure contient les données de la structure, plutôt que contenant une référence aux données comme un type de classe.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Structures use stack allocation; classes use heap allocation.</source>
          <target state="translated">Les structures utilisent l’allocation de pile ; les classes utilisent l’allocation de tas.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>All structure elements are <ph id="ph1">`Public`</ph> by default; class variables and constants are <ph id="ph2">`Private`</ph> by default, while other class members are <ph id="ph3">`Public`</ph> by default.</source>
          <target state="translated">Tous les éléments de structure sont <ph id="ph1">`Public`</ph> par défaut ; classe variables et constantes sont <ph id="ph2">`Private`</ph> par défaut, tandis que d’autres membres de classe sont <ph id="ph3">`Public`</ph> par défaut.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This behavior for class members provides compatibility with the Visual Basic 6.0 system of defaults.</source>
          <target state="translated">Ce comportement pour les membres de classe assure la compatibilité avec le système de Visual Basic 6.0 de valeurs par défaut.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A structure must have at least one nonshared variable or nonshared, noncustom event element; a class can be completely empty.</source>
          <target state="translated">Une structure doit contenir au moins un non partagé, ou variable non partagée élément d’événement ; une classe peut être entièrement vide.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Structure elements cannot be declared as <ph id="ph1">`Protected`</ph>; class members can.</source>
          <target state="translated">Éléments de structure ne peuvent pas être déclarés en tant que <ph id="ph1">`Protected`</ph>; peuvent des membres de classe.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>A structure procedure can handle events only if it is a <bpt id="p1">[</bpt>Shared<ept id="p1">](../../../../visual-basic/language-reference/modifiers/shared.md)</ept><ph id="ph1">`Sub`</ph> procedure, and only by means of the <bpt id="p2">[</bpt>AddHandler Statement<ept id="p2">](../../../../visual-basic/language-reference/statements/addhandler-statement.md)</ept>; any class procedure can handle events, using either the <bpt id="p3">[</bpt>Handles<ept id="p3">](../../../../visual-basic/language-reference/statements/handles-clause.md)</ept> keyword or the <ph id="ph2">`AddHandler`</ph> statement.</source>
          <target state="translated">Une procédure de structure peut gérer des événements uniquement s’il est un <bpt id="p1">[</bpt>partagé<ept id="p1">](../../../../visual-basic/language-reference/modifiers/shared.md)</ept> <ph id="ph1">`Sub`</ph> procédure et uniquement au moyen de la <bpt id="p2">[</bpt>AddHandler, instruction<ept id="p2">](../../../../visual-basic/language-reference/statements/addhandler-statement.md)</ept>; toute procédure de classe peut gérer des événements à l’aide la <bpt id="p3">[</bpt>gère<ept id="p3">](../../../../visual-basic/language-reference/statements/handles-clause.md)</ept> (mot clé) ou le <ph id="ph2">`AddHandler`</ph> instruction.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Events<ept id="p1">](../../../../visual-basic/programming-guide/language-features/events/index.md)</ept>.</source>
          <target state="translated">Pour plus d’informations, consultez <bpt id="p1">[</bpt>événements<ept id="p1">](../../../../visual-basic/programming-guide/language-features/events/index.md)</ept>.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Structure variable declarations cannot specify initializers or initial sizes for arrays; class variable declarations can.</source>
          <target state="translated">Les déclarations de variable de structure ne peut pas spécifier initialiseurs ni les tailles initiales des tableaux ; les déclarations de variable de classe peuvent.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Structures implicitly inherit from the &lt;xref:System.ValueType?displayProperty=fullName&gt; class and cannot inherit from any other type; classes can inherit from any class or classes other than &lt;xref:System.ValueType?displayProperty=fullName&gt;.</source>
          <target state="translated">Les structures héritent implicitement de la &lt;xref:System.ValueType?displayProperty=fullName&gt;classe et ne peut pas hériter d’un autre type ; classes peuvent hériter d’une classe ou d’une classe autre que &lt;xref:System.ValueType?displayProperty=fullName&gt;.&lt;/xref:System.ValueType?displayProperty=fullName&gt; &lt;/xref:System.ValueType?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Structures are not inheritable; classes are.</source>
          <target state="translated">Structures ne sont pas héritées ; les classes sont.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Structures are never terminated, so the common language runtime (CLR) never calls the &lt;xref:System.Object.Finalize%2A&gt; method on any structure; classes are terminated by the garbage collector (GC), which calls &lt;xref:System.Object.Finalize%2A&gt; on a class when it detects there are no active references remaining.</source>
          <target state="translated">Les structures n’étant jamais arrêtées, le common language runtime (CLR) n’appelle jamais la &lt;xref:System.Object.Finalize%2A&gt;méthode sur une structure ; les classes sont arrêtées par le garbage collector (GC), qui appelle &lt;xref:System.Object.Finalize%2A&gt;sur une classe lorsqu’il ne détecte aucune référence active restante.&lt;/xref:System.Object.Finalize%2A&gt; &lt;/xref:System.Object.Finalize%2A&gt;</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>A structure does not require a constructor; a class does.</source>
          <target state="translated">Une structure ne nécessite pas un constructeur ; une classe fait.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Structures can have nonshared constructors only if they take parameters; classes can have them with or without parameters.</source>
          <target state="translated">Les structures peuvent avoir des constructeurs non partagés uniquement lorsqu’ils acceptent des paramètres. classes peuvent avoir leur avec ou sans paramètres.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Every structure has an implicit public constructor without parameters.</source>
          <target state="translated">Chaque structure possède un constructeur public implicite sans paramètres.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>This constructor initializes all the structure's data elements to their default values.</source>
          <target state="translated">Ce constructeur initialise les éléments de données de toute la structure à leurs valeurs par défaut.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>You cannot redefine this behavior.</source>
          <target state="translated">Vous ne pouvez pas modifier ce comportement.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Instances and Variables</source>
          <target state="translated">Instances et Variables</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Because structures are value types, each structure variable is permanently bound to an individual structure instance.</source>
          <target state="translated">Étant donné que les structures sont des types valeur, chaque variable de structure est définitivement liée à une instance de structure individuelle.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>But classes are reference types, and an object variable can refer to various class instances at different times.</source>
          <target state="translated">Mais les classes sont des types référence, et une variable objet peut faire référence à plusieurs instances de classe à des moments différents.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This distinction affects your usage of structures and classes in the following ways:</source>
          <target state="translated">Cette distinction affecte votre utilisation de structures et les classes de plusieurs façons :</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Initialization.<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>Initialisation.<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>A structure variable implicitly includes an initialization of the elements using the structure's parameterless constructor.</source>
          <target state="translated">Une variable de structure comprend implicitement une initialisation des éléments à l’aide du constructeur sans paramètre de la structure.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Therefore, <ph id="ph1">`Dim s As struct1`</ph> is equivalent to <ph id="ph2">`Dim s As struct1 = New struct1()`</ph>.</source>
          <target state="translated">Par conséquent, <ph id="ph1">`Dim s As struct1`</ph> équivaut à <ph id="ph2">`Dim s As struct1 = New struct1()`</ph>.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Assigning Variables.<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>Assignation de Variables.<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>When you assign one structure variable to another, or pass a structure instance to a procedure argument, the current values of all the variable elements are copied to the new structure.</source>
          <target state="translated">Lorsque vous assignez une variable de structure à une autre, ou passez une instance de structure à un argument de procédure, les valeurs actuelles de tous les éléments de variable sont copiés à la nouvelle structure.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>When you assign one object variable to another, or pass an object variable to a procedure, only the reference pointer is copied.</source>
          <target state="translated">Lorsque vous assignez une variable d’objet à un autre, ou passez une variable objet à une procédure, seul le pointeur de la référence est copié.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Assigning Nothing.<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>Assignation de Nothing.<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>You can assign the value <bpt id="p1">[</bpt>Nothing<ept id="p1">](../../../../visual-basic/language-reference/nothing.md)</ept> to a structure variable, but the instance continues to be associated with the variable.</source>
          <target state="translated">Vous pouvez affecter la valeur <bpt id="p1">[</bpt>rien<ept id="p1">](../../../../visual-basic/language-reference/nothing.md)</ept> à une structure variable, mais l’instance continue à associer à la variable.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>You can still call its methods and access its data elements, although variable elements are reinitialized by the assignment.</source>
          <target state="translated">Vous pouvez toujours appeler ses méthodes et accéder à ses éléments de données, bien que les éléments de variable sont réinitialisés par l’assignation.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>In contrast, if you set an object variable to <ph id="ph1">`Nothing`</ph>, you dissociate it from any class instance, and you cannot access any members through the variable until you assign another instance to it.</source>
          <target state="translated">En revanche, si vous définissez une variable objet à <ph id="ph1">`Nothing`</ph>, vous lui assigniez à partir de n’importe quelle instance de classe et vous ne pouvez pas accéder aux membres via la variable jusqu'à ce que vous lui affectez une autre instance.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Multiple Instances.<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>Plusieurs Instances.<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>An object variable can have different class instances assigned to it at different times, and several object variables can refer to the same class instance at the same time.</source>
          <target state="translated">Une variable objet peut avoir diverses instances de classe attribués à des moments différents, et plusieurs variables d’objet peuvent faire référence à la même instance de classe en même temps.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Changes you make to the values of class members affect those members when accessed through another variable pointing to the same instance.</source>
          <target state="translated">Modifications apportées aux valeurs des membres de classe affectent ces membres lorsque pour accéder à une autre variable pointant vers la même instance.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Structure elements, however, are isolated within their own instance.</source>
          <target state="translated">Toutefois, les éléments de structure, sont isolés dans leur propre instance.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Changes to their values are not reflected in any other structure variables, even in other instances of the same <ph id="ph1">`Structure`</ph> declaration.</source>
          <target state="translated">Modifications apportées à leurs valeurs ne sont pas répercutées dans d’autres variables de structure, même dans les autres instances du même <ph id="ph1">`Structure`</ph> déclaration.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Equality.<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>Égalité.<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Equality testing of two structures must be performed with an element-by-element test.</source>
          <target state="translated">Tester l’égalité de deux structures doit être effectué sur un élément par élément.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Two object variables can be compared using the &lt;xref:System.Object.Equals%2A&gt; method.</source>
          <target state="translated">Deux variables d’objet peuvent être comparées à l’aide de la &lt;xref:System.Object.Equals%2A&gt;méthode.&lt;/xref:System.Object.Equals%2A&gt;</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Object.Equals%2A&gt; indicates whether the two variables point to the same instance.</source>
          <target state="translated">&lt;xref:System.Object.Equals%2A&gt;Indique si les deux variables pointent vers la même instance.&lt;/xref:System.Object.Equals%2A&gt;</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">Voir aussi</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Data Types<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/index.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Types de données<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/index.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Composite Data Types<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/composite-data-types.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Types de données composites<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/composite-data-types.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Value Types and Reference Types<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Types valeur et Types référence<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Structures<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/structures.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Structures<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/structures.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Troubleshooting Data Types<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/troubleshooting-data-types.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Dépannage des Types de données<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/troubleshooting-data-types.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Structures and Other Programming Elements<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/structures-and-other-programming-elements.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Structures et autres éléments de programmation<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/structures-and-other-programming-elements.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Objects and Classes<ept id="p1">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/index.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>Objets et classes<ept id="p1">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/index.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>