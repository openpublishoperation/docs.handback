<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">379359e3a338746ccd440dbe1ad58c483e562dbe</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\language-reference\statements\try-catch-finally-statement.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5b921289ea855bcedff299c9aabf2debd637dcab</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dfd3d978ccc9bd35935fbe8240dd53f4b5b0a57e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Try...Catch...Finally Statement (Visual Basic) | Microsoft Docs</source>
          <target state="translated">Try... Catch... Instruction finally (Visual Basic) | Documents Microsoft</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Try...Catch...Finally Statement (Visual Basic)</source>
          <target state="translated">Try...Catch...Finally, instruction (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Provides a way to handle some or all possible errors that may occur in a given block of code, while still running code.</source>
          <target state="translated">Fournit un moyen de gérer certaines ou toutes les erreurs possibles qui peuvent se produire dans un bloc de code donné, tout code en cours d’exécution.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
          <target state="translated">Syntaxe</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parts</source>
          <target state="translated">Composants</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Term</source>
          <target state="translated">Terme</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Definition</source>
          <target state="translated">Définition</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">Facultatif.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Statement(s) where an error can occur.</source>
          <target state="translated">Instructions où une erreur peut se produire.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Can be a compound statement.</source>
          <target state="translated">Il peut s'agir d'une instruction composée.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">Facultatif.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Multiple <ph id="ph1">`Catch`</ph> blocks permitted.</source>
          <target state="translated">Plusieurs <ph id="ph1">`Catch`</ph> blocs autorisés.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If an exception occurs when processing the <ph id="ph1">`Try`</ph> block, each <ph id="ph2">`Catch`</ph> statement is examined in textual order to determine whether it handles the exception, with <ph id="ph3">`exception`</ph> representing the exception that has been thrown.</source>
          <target state="translated">Si une exception se produit lors du traitement de la <ph id="ph1">`Try`</ph> bloquer, chacun <ph id="ph2">`Catch`</ph> instruction est examinée dans l’ordre textuel afin de déterminer si elle gère l’exception, avec <ph id="ph3">`exception`</ph> représentant l’exception qui a été levée.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">Facultatif.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Any variable name.</source>
          <target state="translated">Tout nom de variable.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The initial value of <ph id="ph1">`exception`</ph> is the value of the thrown error.</source>
          <target state="translated">La valeur initiale de l'argument <ph id="ph1">`exception`</ph> est la valeur de l'erreur levée.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Used with <ph id="ph1">`Catch`</ph> to specify the error caught.</source>
          <target state="translated">Utilisé avec <ph id="ph1">`Catch`</ph> pour spécifier l’erreur interceptée.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If omitted, the <ph id="ph1">`Catch`</ph> statement catches any exception.</source>
          <target state="translated">Si omis, la <ph id="ph1">`Catch`</ph> instruction intercepte toute exception.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">Facultatif.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Specifies the type of class filter.</source>
          <target state="translated">Spécifie le type de filtre de la classe.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If the value of <ph id="ph1">`exception`</ph> is of the type specified by <ph id="ph2">`type`</ph> or of a derived type, the identifier becomes bound to the exception object.</source>
          <target state="translated">Si la valeur de <ph id="ph1">`exception`</ph> est du type spécifié par <ph id="ph2">`type`</ph> ou d’un type dérivé, l’identificateur est lié à l’objet exception.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">Facultatif.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Catch`</ph> statement with a <ph id="ph2">`When`</ph> clause catches exceptions only when <ph id="ph3">`expression`</ph> evaluates to <ph id="ph4">`True`</ph>.</source>
          <target state="translated">A <ph id="ph1">`Catch`</ph> instruction avec un <ph id="ph2">`When`</ph> clause intercepte les exceptions uniquement lorsque <ph id="ph3">`expression`</ph> a la valeur <ph id="ph4">`True`</ph>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`When`</ph> clause is applied only after checking the type of the exception, and <ph id="ph2">`expression`</ph> may refer to the identifier representing the exception.</source>
          <target state="translated">A <ph id="ph1">`When`</ph> clause est appliquée uniquement après avoir vérifié que le type de l’exception, et <ph id="ph2">`expression`</ph> peut faire référence à l’identificateur qui représente l’exception.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">Facultatif.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Must be implicitly convertible to <ph id="ph1">`Boolean`</ph>.</source>
          <target state="translated">Doit être implicitement convertible en <ph id="ph1">`Boolean`</ph>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Any expression that describes a generic filter.</source>
          <target state="translated">Toute expression qui décrit un filtre générique.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Typically used to filter by error number.</source>
          <target state="translated">En général, vous permet de filtrer par numéro d’erreur.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Used with <ph id="ph1">`When`</ph> keyword to specify circumstances under which the error is caught.</source>
          <target state="translated">Utilisé avec <ph id="ph1">`When`</ph> (mot clé) pour spécifier les circonstances dans lesquelles l’erreur est levée.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">Facultatif.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Statement(s) to handle errors that occur in the associated <ph id="ph1">`Try`</ph> block.</source>
          <target state="translated">Instructions permettant de gérer les erreurs qui se produisent dans le type <ph id="ph1">`Try`</ph> bloc.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Can be a compound statement.</source>
          <target state="translated">Il peut s'agir d'une instruction composée.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">Facultatif.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Keyword that breaks out of the <ph id="ph1">`Try...Catch...Finally`</ph> structure.</source>
          <target state="translated">Mot clé qui décompose le <ph id="ph1">`Try...Catch...Finally`</ph> structure.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Execution resumes with the code immediately following the <ph id="ph1">`End Try`</ph> statement.</source>
          <target state="translated">L’exécution reprend par le code qui suit immédiatement la <ph id="ph1">`End Try`</ph> instruction.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Finally`</ph> statement will still be executed.</source>
          <target state="translated">La <ph id="ph1">`Finally`</ph> instruction sera exécutée.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Not allowed in <ph id="ph1">`Finally`</ph> blocks.</source>
          <target state="translated">Interdit dans <ph id="ph1">`Finally`</ph> blocs.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">Facultatif.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Finally`</ph> block is always executed when execution leaves any part of the <ph id="ph2">`Try...Catch`</ph> statement.</source>
          <target state="translated">A <ph id="ph1">`Finally`</ph> bloc est toujours exécuté quand l’exécution quitte une partie de la <ph id="ph2">`Try...Catch`</ph> instruction.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">Facultatif.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Statement(s) that are executed after all other error processing has occurred.</source>
          <target state="translated">Instructions qui sont exécutées une fois que tout autre traitement d’erreur s’est produite.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Terminates the <ph id="ph1">`Try...Catch...Finally`</ph> structure.</source>
          <target state="translated">Met fin à la <ph id="ph1">`Try...Catch...Finally`</ph> structure.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Remarks</source>
          <target state="translated">Remarques</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If you expect that a particular exception might occur during a particular section of code, put the code in a <ph id="ph1">`Try`</ph> block and use a <ph id="ph2">`Catch`</ph> block to retain control and handle the exception if it occurs.</source>
          <target state="translated">Si vous pensez qu’une exception particulière se produise pendant une section particulière de code, placez le code dans un <ph id="ph1">`Try`</ph> bloquer et utiliser un <ph id="ph2">`Catch`</ph> bloc pour conserver le contrôle et gérer l’exception si elle se produit.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Try…Catch`</ph> statement consists of a <ph id="ph2">`Try`</ph> block followed by one or more <ph id="ph3">`Catch`</ph> clauses, which specify handlers for various exceptions.</source>
          <target state="translated">A <ph id="ph1">`Try…Catch`</ph> instruction se compose d’un <ph id="ph2">`Try`</ph> bloc suivie d’une ou plusieurs <ph id="ph3">`Catch`</ph> clauses qui spécifient des gestionnaires pour différentes exceptions.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>When an exception is thrown in a <ph id="ph1">`Try`</ph> block, <ph id="ph2">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> looks for the <ph id="ph3">`Catch`</ph> statement that handles the exception.</source>
          <target state="translated">Lorsqu’une exception est levée dans un <ph id="ph1">`Try`</ph> bloc, <ph id="ph2">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> recherche la <ph id="ph3">`Catch`</ph> instruction qui gère l’exception.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>If a matching <ph id="ph1">`Catch`</ph> statement is not found, <ph id="ph2">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> examines the method that called the current method, and so on up the call stack.</source>
          <target state="translated">Si une correspondance <ph id="ph1">`Catch`</ph> instruction n’est pas trouvée, <ph id="ph2">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> examine la méthode qui a appelé la méthode actuelle, et ainsi de suite dans la pile des appels.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>If no <ph id="ph1">`Catch`</ph> block is found, <ph id="ph2">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> displays an unhandled exception message to the user and stops execution of the program.</source>
          <target state="translated">Si aucune <ph id="ph1">`Catch`</ph> bloc est trouvé, <ph id="ph2">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> affiche un message d’exception non prise en charge pour l’utilisateur et arrête l’exécution du programme.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>You can use more than one <ph id="ph1">`Catch`</ph> statement in a <ph id="ph2">`Try…Catch`</ph> statement.</source>
          <target state="translated">Vous pouvez utiliser plusieurs <ph id="ph1">`Catch`</ph> instruction dans un <ph id="ph2">`Try…Catch`</ph> instruction.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>If you do this, the order of the <ph id="ph1">`Catch`</ph> clauses is significant because they are examined in order.</source>
          <target state="translated">Dans ce cas, l’ordre de la <ph id="ph1">`Catch`</ph> clauses est important car ils sont examinés dans l’ordre.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Catch the more specific exceptions before the less specific ones.</source>
          <target state="translated">Interceptez les exceptions plus spécifiques avant les moins spécifiques.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The following <ph id="ph1">`Catch`</ph> statement conditions are the least specific, and will catch all exceptions that derive from the &lt;xref:System.Exception&gt; class.</source>
          <target state="translated">Les éléments suivants <ph id="ph1">`Catch`</ph> conditions de l’instruction sont les moins spécifiques et intercepte toutes les exceptions qui dérivent de la &lt;xref:System.Exception&gt;classe.&lt;/xref:System.Exception&gt;</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>You should ordinarily use one of these variations as the last <ph id="ph1">`Catch`</ph> block in the <ph id="ph2">`Try...Catch...Finally`</ph> structure, after catching all the specific exceptions you expect.</source>
          <target state="translated">Vous devez normalement utiliser une de ces variations comme dernier <ph id="ph1">`Catch`</ph> bloquer la <ph id="ph2">`Try...Catch...Finally`</ph> structure, après avoir intercepté toutes les exceptions spécifiques que vous attendez.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Control flow can never reach a <ph id="ph1">`Catch`</ph> block that follows either of these variations.</source>
          <target state="translated">Flux de contrôle ne peut jamais atteindre un <ph id="ph1">`Catch`</ph> bloc qui suit une de ces variations.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`type`</ph> is <ph id="ph2">`Exception`</ph>, for example: <ph id="ph3">`Catch ex As Exception`</ph></source>
          <target state="translated">Le <ph id="ph1">`type`</ph> est <ph id="ph2">`Exception`</ph>, par exemple :<ph id="ph3">`Catch ex As Exception`</ph></target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The statement has no <ph id="ph1">`exception`</ph> variable, for example: <ph id="ph2">`Catch`</ph></source>
          <target state="translated">L’instruction n’a pas <ph id="ph1">`exception`</ph> variable, par exemple :<ph id="ph2">`Catch`</ph></target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>When a <ph id="ph1">`Try…Catch…Finally`</ph> statement is nested in another <ph id="ph2">`Try`</ph> block, <ph id="ph3">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> first examines each <ph id="ph4">`Catch`</ph> statement in the innermost <ph id="ph5">`Try`</ph> block.</source>
          <target state="translated">Lorsqu’un <ph id="ph1">`Try…Catch…Finally`</ph> imbriquée dans une autre instruction <ph id="ph2">`Try`</ph> bloc, <ph id="ph3">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> examine d’abord chaque <ph id="ph4">`Catch`</ph> instruction à l’intérieur <ph id="ph5">`Try`</ph> bloc.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>If no matching <ph id="ph1">`Catch`</ph> statement is found, the search proceeds to the <ph id="ph2">`Catch`</ph> statements of the outer <ph id="ph3">`Try…Catch…Finally`</ph> block.</source>
          <target state="translated">Si aucune correspondance <ph id="ph1">`Catch`</ph> instruction est trouvée, la recherche se poursuit à le <ph id="ph2">`Catch`</ph> instructions d’externe <ph id="ph3">`Try…Catch…Finally`</ph> bloc.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Local variables from a <ph id="ph1">`Try`</ph> block are not available in a <ph id="ph2">`Catch`</ph> block because they are separate blocks.</source>
          <target state="translated">Les variables locales d’un <ph id="ph1">`Try`</ph> bloc ne sont pas disponibles dans un <ph id="ph2">`Catch`</ph> bloqué, car ils sont des blocs séparés.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>If you want to use a variable in more than one block, declare the variable outside the <ph id="ph1">`Try...Catch...Finally`</ph> structure.</source>
          <target state="translated">Si vous souhaitez utiliser une variable dans plusieurs blocs, déclarez la variable à l’extérieur de la <ph id="ph1">`Try...Catch...Finally`</ph> structure.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Try…Catch…Finally`</ph> statement is available as an IntelliSense code snippet.</source>
          <target state="translated">La <ph id="ph1">`Try…Catch…Finally`</ph> instruction est disponible comme un extrait de code IntelliSense.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>In the Code Snippets Manager, expand <bpt id="p1">**</bpt>Code Patterns - If, For Each, Try Catch, Property, etc<ept id="p1">**</ept>, and then <bpt id="p2">**</bpt>Error Handling (Exceptions)<ept id="p2">**</ept>.</source>
          <target state="translated">Dans le Gestionnaire des extraits de Code, développez <bpt id="p1">**</bpt>modèles de Code - If, For Each, Try Catch, propriété, etc.<ept id="p1">**</ept>, puis <bpt id="p2">**</bpt>(Exceptions) de gestion des erreurs<ept id="p2">**</ept>.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Code Snippets<ept id="p1">](https://docs.microsoft.com/visualstudio/ide/code-snippets)</ept>.</source>
          <target state="translated">Pour plus d’informations, consultez <bpt id="p1">[</bpt>Extraits de code<ept id="p1">](https://docs.microsoft.com/visualstudio/ide/code-snippets)</ept>.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Finally Block</source>
          <target state="translated">Finally (bloc)</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>If you have one or more statements that must run before you exit the <ph id="ph1">`Try`</ph> structure, use a <ph id="ph2">`Finally`</ph> block.</source>
          <target state="translated">Si vous avez une ou plusieurs instructions doivent être exécutées avant de quitter le <ph id="ph1">`Try`</ph> de la structure, utilisez un <ph id="ph2">`Finally`</ph> bloc.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Control passes to the <ph id="ph1">`Finally`</ph> block just before it passes out of the <ph id="ph2">`Try…Catch`</ph> structure.</source>
          <target state="translated">Le contrôle passe à la <ph id="ph1">`Finally`</ph> bloquer juste avant du <ph id="ph2">`Try…Catch`</ph> structure.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>This is true even if an exception occurs anywhere inside the <ph id="ph1">`Try`</ph> structure.</source>
          <target state="translated">Cela est vrai même si une exception se produit n’importe où à l’intérieur de la <ph id="ph1">`Try`</ph> structure.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Finally`</ph> block is useful for running any code that must execute even if there is an exception.</source>
          <target state="translated">Un <ph id="ph1">`Finally`</ph> bloc est utile pour exécuter tout code qui doit s’exécuter même s’il existe une exception.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Control is passed to the <ph id="ph1">`Finally`</ph> block regardless of how the <ph id="ph2">`Try...Catch`</ph> block exits.</source>
          <target state="translated">Le contrôle est passé à la <ph id="ph1">`Finally`</ph> bloc quelle que soit la façon dont le <ph id="ph2">`Try...Catch`</ph> bloc s’arrête.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The code in a <ph id="ph1">`Finally`</ph> block runs even if your code encounters a <ph id="ph2">`Return`</ph> statement in a <ph id="ph3">`Try`</ph> or <ph id="ph4">`Catch`</ph> block.</source>
          <target state="translated">Le code dans un <ph id="ph1">`Finally`</ph> bloc s’exécute même si votre code rencontre une <ph id="ph2">`Return`</ph> instruction dans un <ph id="ph3">`Try`</ph> ou <ph id="ph4">`Catch`</ph> bloc.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Control does not pass from a <ph id="ph1">`Try`</ph> or <ph id="ph2">`Catch`</ph> block to the corresponding <ph id="ph3">`Finally`</ph> block in the following cases:</source>
          <target state="translated">Contrôle ne passe pas d’un <ph id="ph1">`Try`</ph> ou <ph id="ph2">`Catch`</ph> bloquer correspondantes <ph id="ph3">`Finally`</ph> bloquer dans les cas suivants :</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">[</bpt>End Statement<ept id="p1">](../../../visual-basic/language-reference/statements/end-statement.md)</ept> is encountered in the <ph id="ph1">`Try`</ph> or <ph id="ph2">`Catch`</ph> block.</source>
          <target state="translated">Un <bpt id="p1">[</bpt>End, instruction<ept id="p1">](../../../visual-basic/language-reference/statements/end-statement.md)</ept> est rencontré dans le <ph id="ph1">`Try`</ph> ou <ph id="ph2">`Catch`</ph> bloc.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.StackOverflowException&gt; is thrown in the <ph id="ph1">`Try`</ph> or <ph id="ph2">`Catch`</ph> block.</source>
          <target state="translated">Un &lt;xref:System.StackOverflowException&gt;est levée le <ph id="ph1">`Try`</ph> ou <ph id="ph2">`Catch`</ph> bloc.&lt;/xref:System.StackOverflowException&gt;</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>It is not valid to explicitly transfer execution into a <ph id="ph1">`Finally`</ph> block.</source>
          <target state="translated">Il n’est pas valide pour transférer explicitement l’exécution dans un <ph id="ph1">`Finally`</ph> bloc.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Transferring execution out of a <ph id="ph1">`Finally`</ph> block is not valid, except through an exception.</source>
          <target state="translated">Transférer l’exécution hors d’un <ph id="ph1">`Finally`</ph> bloc n’est pas valide, sauf via une exception.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>If a <ph id="ph1">`Try`</ph> statement does not contain at least one <ph id="ph2">`Catch`</ph> block, it must contain a <ph id="ph3">`Finally`</ph> block.</source>
          <target state="translated">Si un <ph id="ph1">`Try`</ph> instruction ne contient pas au moins un <ph id="ph2">`Catch`</ph> bloc, il doit contenir un <ph id="ph3">`Finally`</ph> bloc.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>If you do not have to catch specific exceptions, the <ph id="ph1">`Using`</ph> statement behaves like a <ph id="ph2">`Try…Finally`</ph> block, and guarantees disposal of the resources, regardless of how you exit the block.</source>
          <target state="translated">Si vous n’avez pas à intercepter des exceptions spécifiques, le <ph id="ph1">`Using`</ph> instruction se comporte comme un <ph id="ph2">`Try…Finally`</ph> bloc et garantit l’élimination des ressources, quelle que soit la manière dont vous quittez le bloc.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>This is true even with an unhandled exception.</source>
          <target state="translated">Cela est vrai même avec une exception non gérée.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Using Statement<ept id="p1">](../../../visual-basic/language-reference/statements/using-statement.md)</ept>.</source>
          <target state="translated">Pour plus d’informations, consultez <bpt id="p1">[</bpt>instruction à l’aide de<ept id="p1">](../../../visual-basic/language-reference/statements/using-statement.md)</ept>.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Exception Argument</source>
          <target state="translated">Argument d’exception</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Catch`</ph> block <ph id="ph2">`exception`</ph> argument is an instance of the &lt;xref:System.Exception&gt; class or a class that derives from the <ph id="ph3">`Exception`</ph> class.</source>
          <target state="translated">Le <ph id="ph1">`Catch`</ph> bloc <ph id="ph2">`exception`</ph> argument est une instance de la &lt;xref:System.Exception&gt;classe ou une classe qui dérive de la <ph id="ph3">`Exception`</ph> classe&lt;/xref:System.Exception&gt;</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Exception`</ph> class instance corresponds to the error that occurred in the <ph id="ph2">`Try`</ph> block.</source>
          <target state="translated">Le <ph id="ph1">`Exception`</ph> instance de classe correspond à l’erreur qui s’est produite dans le <ph id="ph2">`Try`</ph> bloc.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The properties of the <ph id="ph1">`Exception`</ph> object help to identify the cause and location of an exception.</source>
          <target state="translated">Les propriétés de la <ph id="ph1">`Exception`</ph> permettent d’identifier la cause et l’emplacement d’une exception de l’objet.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>For example, the &lt;xref:System.Exception.StackTrace%2A&gt; property lists the called methods that led to the exception, helping you find where the error occurred in the code.</source>
          <target state="translated">Par exemple, le &lt;xref:System.Exception.StackTrace%2A&gt;propriété répertorie les méthodes appelées qui ont conduit à l’exception, afin de vous aider à trouver où l’erreur s’est produite dans le code.&lt;/xref:System.Exception.StackTrace%2A&gt;</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Exception.Message%2A&gt; returns a message that describes the exception.</source>
          <target state="translated">&lt;xref:System.Exception.Message%2A&gt;Retourne un message décrivant l’exception.&lt;/xref:System.Exception.Message%2A&gt;</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Exception.HelpLink%2A&gt; returns a link to an associated Help file.</source>
          <target state="translated">&lt;xref:System.Exception.HelpLink%2A&gt;Renvoie un lien vers un fichier d’aide associé.&lt;/xref:System.Exception.HelpLink%2A&gt;</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Exception.InnerException%2A&gt; returns the <ph id="ph1">`Exception`</ph> object that caused the current exception, or it returns <ph id="ph2">`Nothing`</ph> if there is no original <ph id="ph3">`Exception`</ph>.</source>
          <target state="translated">&lt;xref:System.Exception.InnerException%2A&gt;Retourne le <ph id="ph1">`Exception`</ph> objet qui a provoqué l’exception actuelle, ou si elle retourne <ph id="ph2">`Nothing`</ph> s’il n’existe aucun original <ph id="ph3">`Exception`</ph>.&lt;/xref:System.Exception.InnerException%2A&gt;</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Considerations When Using a Try…Catch Statement</source>
          <target state="translated">Considérations sur l’utilisation d’un bloc Try... Catch (instruction)</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Use a <ph id="ph1">`Try…Catch`</ph> statement only to signal the occurrence of unusual or unanticipated program events.</source>
          <target state="translated">Utilisez un <ph id="ph1">`Try…Catch`</ph> instruction uniquement pour signaler la présence d’événements inhabituels ou imprévus.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Reasons for this include the following:</source>
          <target state="translated">Les raisons sont les suivantes :</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Catching exceptions at runtime creates additional overhead, and is likely to be slower than pre-checking to avoid exceptions.</source>
          <target state="translated">Intercepter des exceptions lors de l’exécution crée une charge supplémentaire et est susceptible d’être plus lente que la pré-vérification pour éviter les exceptions.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>If a <ph id="ph1">`Catch`</ph> block is not handled correctly, the exception might not be reported correctly to users.</source>
          <target state="translated">Si un <ph id="ph1">`Catch`</ph> bloc n’est pas traitée correctement, l’exception peut ne pas être rapportée correctement pour les utilisateurs.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Exception handling makes a program more complex.</source>
          <target state="translated">La gestion des exceptions rend plus complexe.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>You do not always need a <ph id="ph1">`Try…Catch`</ph> statement to check for a condition that is likely to occur.</source>
          <target state="translated">Vous n’avez pas toujours besoin un <ph id="ph1">`Try…Catch`</ph> instruction pour vérifier une condition qui est susceptible de se produire.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The following example checks whether a file exists before trying to open it.</source>
          <target state="translated">L’exemple suivant vérifie l’existence d’un fichier avant d’essayer de l’ouvrir.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>This reduces the need for catching an exception thrown by the &lt;xref:System.IO.File.OpenText%2A&gt; method.</source>
          <target state="translated">Cela réduit la nécessité d’intercepter une exception levée par le &lt;xref:System.IO.File.OpenText%2A&gt;méthode.&lt;/xref:System.IO.File.OpenText%2A&gt;</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#94<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/try-catch-finally-statement_1.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements&amp;#94;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/try-catch-finally-statement_1.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Ensure that code in <ph id="ph1">`Catch`</ph> blocks can properly report exceptions to users, whether through thread-safe logging or appropriate messages.</source>
          <target state="translated">Assurez-vous que le code de <ph id="ph1">`Catch`</ph> blocs peuvent correctement signaler les exceptions aux utilisateurs, que ce soit par la journalisation thread-safe ou des messages appropriés.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Otherwise, exceptions might remain unknown.</source>
          <target state="translated">Dans le cas contraire, les exceptions pourraient rester inconnues.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Async Methods</source>
          <target state="translated">Méthodes async</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>If you mark a method with the <bpt id="p1">[</bpt>Async<ept id="p1">](../../../visual-basic/language-reference/modifiers/async.md)</ept> modifier, you can use the <bpt id="p2">[</bpt>Await<ept id="p2">](../../../visual-basic/language-reference/operators/await-operator.md)</ept> operator in the method.</source>
          <target state="translated">Si vous marquez une méthode avec la <bpt id="p1">[</bpt>Async<ept id="p1">](../../../visual-basic/language-reference/modifiers/async.md)</ept> modificateur, vous pouvez utiliser la <bpt id="p2">[</bpt>Await<ept id="p2">](../../../visual-basic/language-reference/operators/await-operator.md)</ept> opérateur dans la méthode.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>A statement with the <ph id="ph1">`Await`</ph> operator suspends execution of the method until the awaited task completes.</source>
          <target state="translated">Une instruction avec le <ph id="ph1">`Await`</ph> opérateur suspend l’exécution de la méthode jusqu'à ce que la tâche attendue se termine.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The task represents ongoing work.</source>
          <target state="translated">La tâche représente un travail en cours.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>When the task that's associated with the <ph id="ph1">`Await`</ph> operator finishes, execution resumes in the same method.</source>
          <target state="translated">Lorsque la tâche est associée la <ph id="ph1">`Await`</ph> opérateur se termine, reprend l’exécution dans la même méthode.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Control Flow in Async Programs<ept id="p1">](../../../visual-basic/programming-guide/concepts/async/control-flow-in-async-programs.md)</ept>.</source>
          <target state="translated">Pour plus d’informations, consultez <bpt id="p1">[</bpt>flux de contrôle dans les programmes Async<ept id="p1">](../../../visual-basic/programming-guide/concepts/async/control-flow-in-async-programs.md)</ept>.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>A task returned by an Async method may end in a faulted state, indicating that it completed due to an unhandled exception.</source>
          <target state="translated">Une tâche retournée par une méthode Async peut se terminer dans un état d’erreur, indiquant qu’elle est terminée en raison d’une exception non gérée.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>A task may also end in a canceled state, which results in an <ph id="ph1">`OperationCanceledException`</ph> being thrown out of the await expression.</source>
          <target state="translated">Une tâche peut également se terminer dans un état d’annulation, ce qui entraîne une <ph id="ph1">`OperationCanceledException`</ph> levée hors de l’expression await.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>To catch either type of exception, place the <ph id="ph1">`Await`</ph> expression that's associated with the task in a <ph id="ph2">`Try`</ph> block, and catch the exception in the <ph id="ph3">`Catch`</ph> block.</source>
          <target state="translated">Pour intercepter un type d’exception, placez le <ph id="ph1">`Await`</ph> expression associée à la tâche dans un <ph id="ph2">`Try`</ph> bloquer et intercepter l’exception dans le <ph id="ph3">`Catch`</ph> bloc.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>An example is provided later in this topic.</source>
          <target state="translated">Un exemple est fourni plus loin dans cette rubrique.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>A task can be in a faulted state because multiple exceptions were responsible for its faulting.</source>
          <target state="translated">Une tâche peut être dans un état d’erreur, car plusieurs exceptions étaient responsables de son défaillante.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>For example, the task might be the result of a call to &lt;xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">Par exemple, la tâche peut être le résultat d’un appel à &lt;xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=fullName&gt;.&lt;/xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>When you await such a task, the caught exception is only one of the exceptions, and you can't predict which exception will be caught.</source>
          <target state="translated">Lorsque vous attendez une telle tâche, l’exception interceptée est uniquement une des exceptions, et vous ne pouvez pas prédire quelle exception sera levée.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>An example is provided later in this topic.</source>
          <target state="translated">Un exemple est fourni plus loin dans cette rubrique.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`Await`</ph> expression can't be inside a <ph id="ph2">`Catch`</ph> block or <ph id="ph3">`Finally`</ph> block.</source>
          <target state="translated">Un <ph id="ph1">`Await`</ph> expression ne peut pas être à l’intérieur d’un <ph id="ph2">`Catch`</ph> bloc ou <ph id="ph3">`Finally`</ph> bloc.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Iterators</source>
          <target state="translated">Itérateurs</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>An iterator function or <ph id="ph1">`Get`</ph> accessor performs a custom iteration over a collection.</source>
          <target state="translated">Une fonction d’itérateur ou <ph id="ph1">`Get`</ph> accesseur effectue une itération personnalisée sur une collection.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>An iterator uses a <bpt id="p1">[</bpt>Yield<ept id="p1">](../../../visual-basic/language-reference/statements/yield-statement.md)</ept> statement to return each element of the collection one at a time.</source>
          <target state="translated">Un itérateur utilise un <bpt id="p1">[</bpt>Yield<ept id="p1">](../../../visual-basic/language-reference/statements/yield-statement.md)</ept> instruction pour retourner chaque élément de la collection une à la fois.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>You call an iterator function by using a <bpt id="p1">[</bpt>For Each...Next Statement<ept id="p1">](../../../visual-basic/language-reference/statements/for-each-next-statement.md)</ept>.</source>
          <target state="translated">Vous appelez une fonction d’itérateur en utilisant un <bpt id="p1">[</bpt>For Each... L’instruction suivante<ept id="p1">](../../../visual-basic/language-reference/statements/for-each-next-statement.md)</ept>.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Yield`</ph> statement can be inside a <ph id="ph2">`Try`</ph> block.</source>
          <target state="translated">A <ph id="ph1">`Yield`</ph> instruction peut être à l’intérieur d’un <ph id="ph2">`Try`</ph> bloc.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Try`</ph> block that contains a <ph id="ph2">`Yield`</ph> statement can have <ph id="ph3">`Catch`</ph> blocks, and can have a <ph id="ph4">`Finally`</ph> block.</source>
          <target state="translated">A <ph id="ph1">`Try`</ph> bloc qui contient un <ph id="ph2">`Yield`</ph> instruction peut avoir <ph id="ph3">`Catch`</ph> bloque et peut avoir un <ph id="ph4">`Finally`</ph> bloc.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>See the "Try Blocks in Visual Basic" section of <bpt id="p1">[</bpt>Iterators<ept id="p1">](http://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7)</ept> for an example.</source>
          <target state="translated">Consultez la section « Essayez de blocs dans Visual Basic » de <bpt id="p1">[</bpt>itérateurs<ept id="p1">](http://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7)</ept> pour obtenir un exemple.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Yield`</ph> statement cannot be inside a <ph id="ph2">`Catch`</ph> block or a <ph id="ph3">`Finally`</ph> block.</source>
          <target state="translated">A <ph id="ph1">`Yield`</ph> instruction ne peut pas être à l’intérieur d’un <ph id="ph2">`Catch`</ph> bloc ou une <ph id="ph3">`Finally`</ph> bloc.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`For Each`</ph> body (outside of the iterator function) throws an exception, a <ph id="ph2">`Catch`</ph> block in the iterator function is not executed, but a <ph id="ph3">`Finally`</ph> block in the iterator function is executed.</source>
          <target state="translated">Si le <ph id="ph1">`For Each`</ph> corps (en dehors de la fonction d’itérateur) lève une exception, une <ph id="ph2">`Catch`</ph> bloc dans la fonction d’itérateur n’est pas exécuté, mais un <ph id="ph3">`Finally`</ph> bloc dans la fonction d’itérateur est exécuté.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Catch`</ph> block inside an iterator function catches only exceptions that occur inside the iterator function.</source>
          <target state="translated">Un <ph id="ph1">`Catch`</ph> bloc à l’intérieur d’une fonction d’itérateur intercepte uniquement les exceptions qui se produisent à l’intérieur de la fonction d’itérateur.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Partial-Trust Situations</source>
          <target state="translated">Situations de confiance partielle</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>In partial-trust situations, such as an application hosted on a network share, <ph id="ph1">`Try...Catch...Finally`</ph> does not catch security exceptions that occur before the method that contains the call is invoked.</source>
          <target state="translated">Dans les situations de confiance partielle, tel qu’une application hébergée sur un partage réseau, <ph id="ph1">`Try...Catch...Finally`</ph> n’intercepte pas les exceptions de sécurité qui se produisent avant l’appel de la méthode qui contient l’appel.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The following example, when you put it on a server share and run from there, produces the error "System.Security.SecurityException: Request Failed."</source>
          <target state="translated">L’exemple suivant, s’il est placé sur un partage de serveur et l’exécuter à partir de là, génère l’erreur « System.Security.SecurityException : Échec de la demande. »</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>For more information about security exceptions, see the &lt;xref:System.Security.SecurityException&gt; class.</source>
          <target state="translated">Pour plus d’informations sur les exceptions de sécurité, consultez la &lt;xref:System.Security.SecurityException&gt;classe.&lt;/xref:System.Security.SecurityException&gt;</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#85<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/try-catch-finally-statement_2.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements&amp;#85;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/try-catch-finally-statement_2.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>In such a partial-trust situation, you have to put the <ph id="ph1">`Process.Start`</ph> statement in a separate <ph id="ph2">`Sub`</ph>.</source>
          <target state="translated">Dans une telle situation de confiance partielle, vous devez placer le <ph id="ph1">`Process.Start`</ph> instruction distinct <ph id="ph2">`Sub`</ph>.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The initial call to the <ph id="ph1">`Sub`</ph> will fail.</source>
          <target state="translated">L’appel initial à la <ph id="ph1">`Sub`</ph> échoue.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>This enables <ph id="ph1">`Try...Catch`</ph> to catch it before the <ph id="ph2">`Sub`</ph> that contains <ph id="ph3">`Process.Start`</ph> is started and the security exception produced.</source>
          <target state="translated">Cela permet de <ph id="ph1">`Try...Catch`</ph> de l’intercepter avant le <ph id="ph2">`Sub`</ph> contenant <ph id="ph3">`Process.Start`</ph> est démarré et généré l’exception de sécurité.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Exemple</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The following example illustrates the structure of the <ph id="ph1">`Try...Catch...Finally`</ph> statement.</source>
          <target state="translated">L’exemple suivant illustre la structure de la <ph id="ph1">`Try...Catch...Finally`</ph> instruction.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#86<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/try-catch-finally-statement_3.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements&amp;#86;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/try-catch-finally-statement_3.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Exemple</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>In the following example, the <ph id="ph1">`CreateException`</ph> method throws a <ph id="ph2">`NullReferenceException`</ph>.</source>
          <target state="translated">Dans l’exemple suivant, la <ph id="ph1">`CreateException`</ph> méthode lève un <ph id="ph2">`NullReferenceException`</ph>.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The code that generates the exception is not in a <ph id="ph1">`Try`</ph> block.</source>
          <target state="translated">Le code qui génère l’exception n’est pas dans un <ph id="ph1">`Try`</ph> bloc.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Therefore, the <ph id="ph1">`CreateException`</ph> method does not handle the exception.</source>
          <target state="translated">Par conséquent, la <ph id="ph1">`CreateException`</ph> méthode ne gère pas l’exception.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`RunSample`</ph> method does handle the exception because the call to the <ph id="ph2">`CreateException`</ph> method is in a <ph id="ph3">`Try`</ph> block.</source>
          <target state="translated">Le <ph id="ph1">`RunSample`</ph> méthode gère l’exception car l’appel à la <ph id="ph2">`CreateException`</ph> méthode se trouve dans un <ph id="ph3">`Try`</ph> bloc.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The example includes <ph id="ph1">`Catch`</ph> statements for several types of exceptions, ordered from the most specific to the most general.</source>
          <target state="translated">L’exemple inclut <ph id="ph1">`Catch`</ph> instructions pour plusieurs types d’exceptions, ordonnés de la plus spécifique au plus général.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#91<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/try-catch-finally-statement_4.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements&amp;#91;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/try-catch-finally-statement_4.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Exemple</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The following example shows how to use a <ph id="ph1">`Catch When`</ph> statement to filter on a conditional expression.</source>
          <target state="translated">L’exemple suivant montre comment utiliser un <ph id="ph1">`Catch When`</ph> instruction pour filtrer sur une expression conditionnelle.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>If the conditional expression evaluates to <ph id="ph1">`True`</ph>, the code in the <ph id="ph2">`Catch`</ph> block runs.</source>
          <target state="translated">Si l’expression conditionnelle a la valeur <ph id="ph1">`True`</ph>, le code dans la <ph id="ph2">`Catch`</ph> bloc s’exécute.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#92<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/try-catch-finally-statement_5.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements&amp;#92;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/try-catch-finally-statement_5.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Exemple</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The following example has a <ph id="ph1">`Try…Catch`</ph> statement that is contained in a <ph id="ph2">`Try`</ph> block.</source>
          <target state="translated">L’exemple suivant comprend un <ph id="ph1">`Try…Catch`</ph> instruction contenue dans une <ph id="ph2">`Try`</ph> bloc.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>The inner <ph id="ph1">`Catch`</ph> block throws an exception that has its <ph id="ph2">`InnerException`</ph> property set to the original exception.</source>
          <target state="translated">Interne <ph id="ph1">`Catch`</ph> bloc lève une exception qui a son <ph id="ph2">`InnerException`</ph> propriété définie à l’exception d’origine.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>The outer <ph id="ph1">`Catch`</ph> block reports its own exception and the inner exception.</source>
          <target state="translated">Externe <ph id="ph1">`Catch`</ph> bloc signale sa propre exception et l’exception interne.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#93<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/try-catch-finally-statement_6.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements&amp;#93;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/try-catch-finally-statement_6.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Exemple</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The following example illustrates exception handling for async methods.</source>
          <target state="translated">L'exemple suivant illustre la gestion des exceptions pour les méthodes async.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>To catch an exception that applies to an async task, the <ph id="ph1">`Await`</ph> expression is in a <ph id="ph2">`Try`</ph> block of the caller, and the exception is caught in the <ph id="ph3">`Catch`</ph> block.</source>
          <target state="translated">Pour intercepter une exception qui s’applique à une tâche asynchrone, le <ph id="ph1">`Await`</ph> expression est dans un <ph id="ph2">`Try`</ph> bloc de l’appelant et de l’exception est interceptée dans le <ph id="ph3">`Catch`</ph> bloc.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Uncomment the <ph id="ph1">`Throw New Exception`</ph> line in the example to demonstrate exception handling.</source>
          <target state="translated">Supprimez les marques de commentaire de la ligne <ph id="ph1">`Throw New Exception`</ph> dans l'exemple pour illustrer la gestion des exceptions.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>The exception is caught in the <ph id="ph1">`Catch`</ph> block, the task's <ph id="ph2">`IsFaulted`</ph> property is set to <ph id="ph3">`True`</ph>, and the task's <ph id="ph4">`Exception.InnerException`</ph> property is set to the exception.</source>
          <target state="translated">L’exception est interceptée dans le <ph id="ph1">`Catch`</ph> bloquer, de la tâche <ph id="ph2">`IsFaulted`</ph> est définie sur <ph id="ph3">`True`</ph>et de la tâche <ph id="ph4">`Exception.InnerException`</ph> est définie sur l’exception.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Uncomment the <ph id="ph1">`Throw New OperationCancelledException`</ph> line to demonstrate what happens when you cancel an asynchronous process.</source>
          <target state="translated">Supprimez les commentaires de le <ph id="ph1">`Throw New OperationCancelledException`</ph> ligne afin d’illustrer ce qui se passe lorsque vous annulez un processus asynchrone.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>The exception is caught in the <ph id="ph1">`Catch`</ph> block, and the task's <ph id="ph2">`IsCanceled`</ph> property is set to <ph id="ph3">`True`</ph>.</source>
          <target state="translated">L’exception est interceptée dans le <ph id="ph1">`Catch`</ph> bloc et de la tâche <ph id="ph2">`IsCanceled`</ph> est définie sur <ph id="ph3">`True`</ph>.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>However, under some conditions that don't apply to this example, <ph id="ph1">`IsFaulted`</ph> is set to <ph id="ph2">`True`</ph> and <ph id="ph3">`IsCanceled`</ph> is set to <ph id="ph4">`False`</ph>.</source>
          <target state="translated">Toutefois, dans certaines conditions qui s’appliquent à cet exemple, <ph id="ph1">`IsFaulted`</ph> a <ph id="ph2">`True`</ph> et <ph id="ph3">`IsCanceled`</ph> est défini sur <ph id="ph4">`False`</ph>.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>csAsyncExceptions#1<ept id="p2">](../../../csharp/language-reference/keywords/codesnippet/VisualBasic/try-catch-finally-statement_7.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>csAsyncExceptions n °&amp;1;<ept id="p2">](../../../csharp/language-reference/keywords/codesnippet/VisualBasic/try-catch-finally-statement_7.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Exemple</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>The following example illustrates exception handling where multiple tasks can result in multiple exceptions.</source>
          <target state="translated">L’exemple suivant illustre la gestion des exceptions quand plusieurs tâches peuvent entraîner plusieurs exceptions.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Try`</ph> block has the <ph id="ph2">`Await`</ph> expression for the task that &lt;xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=fullName&gt; returned.</source>
          <target state="translated">Le <ph id="ph1">`Try`</ph> bloc a le <ph id="ph2">`Await`</ph> expression de la tâche qui &lt;xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=fullName&gt;retourné.&lt;/xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>The task is complete when the three tasks to which &lt;xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=fullName&gt; is applied are complete.</source>
          <target state="translated">La tâche est terminée lorsque les trois tâches auquel &lt;xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=fullName&gt;est appliqué sont terminées.&lt;/xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Each of the three tasks causes an exception.</source>
          <target state="translated">Chacune de ces trois tâches provoque une exception.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Catch`</ph> block iterates through the exceptions, which are found in the <ph id="ph2">`Exception.InnerExceptions`</ph> property of the task that <ph id="ph3">`Task.WhenAll`</ph> returned.</source>
          <target state="translated">Le <ph id="ph1">`Catch`</ph> bloc effectue une itération dans les exceptions qui sont trouvent dans le <ph id="ph2">`Exception.InnerExceptions`</ph> propriétés de la tâche qui <ph id="ph3">`Task.WhenAll`</ph> retournée.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>csAsyncExceptions#3<ept id="p2">](../../../csharp/language-reference/keywords/codesnippet/VisualBasic/try-catch-finally-statement_8.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>csAsyncExceptions n °&amp;3;<ept id="p2">](../../../csharp/language-reference/keywords/codesnippet/VisualBasic/try-catch-finally-statement_8.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">Voir aussi</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>&lt;xref:Microsoft.VisualBasic.Information.Err%2A&gt;</source>
          <target state="translated">&lt;xref:Microsoft.VisualBasic.Information.Err%2A&gt;&lt;/xref:Microsoft.VisualBasic.Information.Err%2A&gt;</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Exception&gt;</source>
          <target state="translated">&lt;xref:System.Exception&gt;&lt;/xref:System.Exception&gt;</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Exit Statement<ept id="p1">](../../../visual-basic/language-reference/statements/exit-statement.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Exit (instruction)<ept id="p1">](../../../visual-basic/language-reference/statements/exit-statement.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>On Error Statement<ept id="p1">](../../../visual-basic/language-reference/statements/on-error-statement.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>On Error, instruction<ept id="p1">](../../../visual-basic/language-reference/statements/on-error-statement.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Best Practices for Using Code Snippets<ept id="p1">](https://docs.microsoft.com/visualstudio/ide/best-practices-for-using-code-snippets)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Méthodes conseillées pour utiliser des extraits de Code<ept id="p1">](https://docs.microsoft.com/visualstudio/ide/best-practices-for-using-code-snippets)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Exception Handling<ept id="p1">](https://msdn.microsoft.com/library/dd997415)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Gestion des exceptions<ept id="p1">](https://msdn.microsoft.com/library/dd997415)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Throw Statement<ept id="p1">](../../../visual-basic/language-reference/statements/throw-statement.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>Throw (instruction)<ept id="p1">](../../../visual-basic/language-reference/statements/throw-statement.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>