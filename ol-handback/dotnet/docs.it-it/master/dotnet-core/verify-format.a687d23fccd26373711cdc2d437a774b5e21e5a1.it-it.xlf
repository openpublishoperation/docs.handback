<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-47f9650" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">077a09152ac23c986a751f42c893e1dcca858291</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\base-types\verify-format.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a80af768587710b8756db79898128a234997c651</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">33808c2a92622a4532f27e7b9f096fc072c58c36</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: verify that strings are in valid email format</source>
          <target state="translated">Procedura: Verificare che le stringhe siano in formato di posta elettronica valido</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to verify that strings are in valid email format</source>
          <target state="translated">Come verificare che le stringhe siano in formato di posta elettronica valido</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>How to: verify that strings are in valid email format</source>
          <target state="translated">Procedura: Verificare che le stringhe siano in formato di posta elettronica valido</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The following example uses a regular expression to verify that a string is in valid email format.</source>
          <target state="translated">L'esempio seguente usa un'espressione regolare per verificare la validità del formato di posta elettronica di una stringa.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Esempio</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The example defines an <ph id="ph1">`IsValidEmail`</ph> method, which returns <ph id="ph2">`true`</ph> if the string contains a valid email address and <ph id="ph3">`false`</ph> if it does not, but takes no other action.</source>
          <target state="translated">Nell'esempio viene definito un metodo <ph id="ph1">`IsValidEmail`</ph> che restituisce <ph id="ph2">`true`</ph> se nella stringa è presente un indirizzo di posta elettronica valido e <ph id="ph3">`false`</ph> in caso contrario, ma non esegue alcuna altra azione.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>To verify that the email address is valid, the <ph id="ph1">`IsValidEmail`</ph> method calls the <bpt id="p1">[</bpt>Regex.Replace(String, String, MatchEvaluator)<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator))</ept> method with the <ph id="ph2">`(@)(.+)$`</ph> regular expression pattern to separate the domain name from the email address.</source>
          <target state="translated">Per verificare che l'indirizzo di posta elettronica sia valido, il metodo <ph id="ph1">`IsValidEmail`</ph> chiama il metodo <bpt id="p1">[</bpt>Regex.Replace(String, String, MatchEvaluator)<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator))</ept> con il criterio di espressione regolare <ph id="ph2">`(@)(.+)$`</ph> per separare il nome di dominio dall'indirizzo di posta elettronica.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The third parameter is a <bpt id="p1">[</bpt>MatchEvaluator<ept id="p1">](xref:System.Text.RegularExpressions.MatchEvaluator)</ept> delegate that represents the method that processes and replaces the matched text.</source>
          <target state="translated">Il terzo parametro è un delegato <bpt id="p1">[</bpt>MatchEvaluator<ept id="p1">](xref:System.Text.RegularExpressions.MatchEvaluator)</ept> che rappresenta il metodo che elabora e sostituisce il testo corrispondente.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The regular expression pattern is interpreted as follows.</source>
          <target state="translated">Il criterio di espressione regolare viene interpretato nel modo seguente.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">Criterio</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Descrizione</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Match the @ character.</source>
          <target state="translated">Trova la corrispondenza con il carattere @.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This is the first capturing group.</source>
          <target state="translated">Equivale al primo gruppo di acquisizione.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Match one or more occurrences of any character.</source>
          <target state="translated">Trova la corrispondenza con una o più occorrenze di qualsiasi carattere.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This is the second capturing group.</source>
          <target state="translated">Equivale al secondo gruppo di acquisizione.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>End the match at the end of the string.</source>
          <target state="translated">Terminare la corrispondenza alla fine della stringa.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The domain name along with the @ character is passed to the <ph id="ph1">`DomainMapper`</ph> method, which uses the <bpt id="p1">[</bpt>IdnMapping<ept id="p1">](xref:System.Globalization.IdnMapping)</ept> class to translate Unicode characters that are outside the US-ASCII character range to Punycode.</source>
          <target state="translated">Il nome di dominio con il carattere @ viene passato al metodo <ph id="ph1">`DomainMapper`</ph>, che usa la classe <bpt id="p1">[</bpt>IdnMapping<ept id="p1">](xref:System.Globalization.IdnMapping)</ept> per convertire i caratteri Unicode che si trovano all'esterno dell'intervallo di caratteri US-ASCII a Punycode.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The method also sets the <ph id="ph1">`invalid`</ph> flag to <ph id="ph2">`true`</ph> if the <bpt id="p1">[</bpt>IdnMapping.GetAscii<ept id="p1">](xref:System.Globalization.IdnMapping.GetAscii(System.String))</ept> method detects any invalid characters in the domain name.</source>
          <target state="translated">Il metodo imposta anche il flag <ph id="ph1">`invalid`</ph> su <ph id="ph2">`true`</ph> se il metodo <bpt id="p1">[</bpt>IdnMapping.GetAscii<ept id="p1">](xref:System.Globalization.IdnMapping.GetAscii(System.String))</ept> rileva caratteri non validi nel nome di dominio.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The method returns the Punycode domain name preceded by the @ symbol to the <ph id="ph1">`IsValidEmail`</ph> method.</source>
          <target state="translated">Il metodo restituisce il nome di dominio Punycode preceduto dal simbolo @ al metodo <ph id="ph1">`IsValidEmail`</ph>.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`IsValidEmail`</ph> method then calls the <bpt id="p1">[</bpt>Regex.IsMatch(String, String)<ept id="p1">](xref:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String))</ept> method to verify that the address conforms to a regular expression pattern.</source>
          <target state="translated">Il metodo <ph id="ph1">`IsValidEmail`</ph> chiama quindi il metodo <bpt id="p1">[</bpt>Regex.IsMatch(String, String)<ept id="p1">](xref:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String))</ept> per verificare che l'indirizzo sia conforme a un criterio di espressione regolare.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Note that the <ph id="ph1">`IsValidEmail`</ph> method does not perform authentication to validate the email address.</source>
          <target state="translated">Si noti che il metodo <ph id="ph1">`IsValidEmail`</ph> non esegue l'autenticazione per convalidare l'indirizzo di posta elettronica</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>It merely determines whether its format is valid for an email address.</source>
          <target state="translated">e si limita a stabilire se il formato è valido per un indirizzo di posta elettronica.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In addition, the <ph id="ph1">`IsValidEmail`</ph> method does not verify that the top-level domain name is a valid domain name listed at the <bpt id="p1">[</bpt>IANA Root Zone Database<ept id="p1">](https://www.iana.org/domains/root/db)</ept>, which would require a look-up operation.</source>
          <target state="translated">Inoltre il metodo <ph id="ph1">`IsValidEmail`</ph> non verifica che il nome di dominio di primo livello sia un nome di dominio valido elencato nella pagina del <bpt id="p1">[</bpt>Database delle aree radice sul sito IANA<ept id="p1">](https://www.iana.org/domains/root/db)</ept>, cosa che richiederebbe un'operazione di ricerca.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Instead, the regular expression merely verifies that the top-level domain name consists of between two and twenty-four ASCII characters, with alphanumeric first and last characters and the remaining characters being either alphanumeric or a hyphen (-).</source>
          <target state="translated">L'espressione regolare verifica invece solo che il nome di dominio di primo livello sia costituito da un numero di caratteri ASCII compreso tra due e&amp;24;. Il nome deve iniziare e finire con caratteri alfanumerici e i caratteri rimanenti possono essere alfanumerici o un trattino (-).</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In this example, the regular expression pattern <ph id="ph1">`^(?(")(".+?(?&lt;!\\)"@)|(([0-9a-z]((\.(?!\.))|[-!#\$%&amp;'\*\+/=\?\^`</ph><ph id="ph2">\{</ph><ph id="ph3">\}</ph><ph id="ph4">\|</ph>~\w])<bpt id="p1">*</bpt>)(?&lt;=[0-9a-z])@))(?(<ph id="ph5">\[</ph>)(<ph id="ph6">\[</ph>(\d{1,3}<ph id="ph7">\.</ph>){3}\d{1,3}<ph id="ph8">\]</ph>)|(([0-9a-z][-\w]<ept id="p1">*</ept>[0-9a-z]*<ph id="ph9">\.</ph>)+[a-z0-9][<ph id="ph10">\-</ph>a-z0-9]{0,22}[a-z0-9]))$` is interpreted as shown in the following table.</source>
          <target state="translated">In questo esempio il modello di espressione regolare <ph id="ph1">`^(?(")(".+?(?&lt;!\\)"@)|(([0-9a-z]((\.(?!\.))|[-!#\$%&amp;'\*\+/=\?\^`</ph><ph id="ph2">\{</ph><ph id="ph3">\}</ph><ph id="ph4">\|</ph>~ \w])<bpt id="p1">*</bpt>)(?&lt;=[0-9a-z])@))(?(<ph id="ph5">\[</ph>)(<ph id="ph6">\[</ph>(\d{1,3}<ph id="ph7">\.</ph>){3}\d{1,3}<ph id="ph8">\]</ph>)|( ([0-9a-z] [-\w]<ept id="p1">*</ept>[0-9a-z] *<ph id="ph9">\.</ph>) + [a-z0-9] [<ph id="ph10">\-</ph>a-z0-9]{0,22}[a-z0-9]))$` viene interpretato come visualizzato nella tabella seguente.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Note that the regular expression is compiled using the <bpt id="p1">[</bpt>RegexOptions.IgnoreCase<ept id="p1">](xref:System.Text.RegularExpressions.RegexOptions.IgnoreCase)</ept> flag.</source>
          <target state="translated">Si noti che l'espressione regolare viene compilata usando il flag <bpt id="p1">[</bpt>RegexOptions.IgnoreCase<ept id="p1">](xref:System.Text.RegularExpressions.RegexOptions.IgnoreCase)</ept>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">Criterio</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Descrizione</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Begin the match at the start of the string.</source>
          <target state="translated">Iniziare la ricerca della corrispondenza all'inizio della stringa.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Determine whether the first character is a quotation mark.</source>
          <target state="translated">Determinare se il primo carattere corrisponde a una virgoletta.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`(?(")`</ph> is the beginning of an alternation construct.</source>
          <target state="translated"><ph id="ph1">`(?(")`</ph> è l'inizio di un costrutto di alternanza.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If the first character is a quotation mark, match a beginning quotation mark followed by at least one occurrence of any character, followed by an ending quotation mark.</source>
          <target state="translated">Se il primo carattere è una virgoletta, cercare la corrispondenza con una virgoletta iniziale seguita da almeno un'occorrenza di qualsiasi carattere, seguita da una virgoletta finale.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The ending quotation mark must not be preceded by a backslash character <ph id="ph1">`(\). (?&lt;!`</ph> is the beginning of a zero-width negative lookbehind assertion.</source>
          <target state="translated">La virgoletta finale non deve essere preceduta da un carattere barra rovesciata <ph id="ph1">`(\). (?&lt;!`</ph>. è l'inizio di un'asserzione lookbehind negativa di larghezza zero.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The string should conclude with an at sign (@).</source>
          <target state="translated">La stringa dovrebbe terminare con il simbolo @.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>`&amp;#124;(([0-9a-z]</source>
          <target state="translated">`&amp;#124;(([0-9a-z]</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If the first character is not a quotation mark, match any alphabetic character from a to z or A to Z (the comparison is case insensitive), or any numeric character from 0 to 9.</source>
          <target state="translated">Se il primo carattere non è una virgoletta, cercare la corrispondenza di qualsiasi carattere alfabetico da a a z o da A a Z (nel confronto è applicata la distinzione tra maiuscole e minuscole) oppure di qualsiasi carattere numerico da 0 a 9.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If the next character is a period, match it.</source>
          <target state="translated">Se il carattere successivo è un punto, cercare la corrispondenza del punto.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If it is not a period, look ahead to the next character and continue the match.</source>
          <target state="translated">Se non è un punto, eseguire il look ahead del carattere successivo e continuare la ricerca della corrispondenza.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`(?!\.)`</ph> is a zero-width negative lookahead assertion that prevents two consecutive periods from appearing in the local part of an email address.</source>
          <target state="translated"><ph id="ph1">`(?!\.)`</ph> è un'asserzione lookahead negativa di larghezza zero che impedisce la comparsa di due punti consecutivi nella parte locale di un indirizzo di posta elettronica.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`&amp;#124;[-!#\$%&amp;'\*\+/=\?\^`</ph><ph id="ph2">\{</ph><ph id="ph3">\}</ph><ph id="ph4">\&amp;</ph>#124;~\w]</source>
          <target state="translated"><ph id="ph1">`&amp;#124;[-!#\$%&amp;'\*\+/=\?\^`</ph><ph id="ph2">\{</ph><ph id="ph3">\}</ph><ph id="ph4">\&amp;</ph>#124;~\w]</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>If the next character is not a period, match any word character or one of the following characters: -!#$%'*+=?^`{}&amp;#124;~.</source>
          <target state="translated">Se il carattere successivo non è un punto, cercare la corrispondenza con qualsiasi carattere alfanumerico o con uno dei caratteri seguenti: -!#$%'*+=?^`{}&amp;#124;~.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`((\.(?!\.))&amp;#124;[-!#\$%'\*\+/=\?\^`</ph><ph id="ph2">\{</ph><ph id="ph3">\}</ph><ph id="ph4">\&amp;</ph>#124;~\w])*</source>
          <target state="translated"><ph id="ph1">`((\.(?!\.))&amp;#124;[-!#\$%'\*\+/=\?\^`</ph><ph id="ph2">\{</ph><ph id="ph3">\}</ph><ph id="ph4">\&amp;</ph>#124;~\w])*</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Match the alternation pattern (a period followed by a non-period, or one of a number of characters) zero or more times.</source>
          <target state="translated">Cercare la corrispondenza del modello di alternanza (un punto seguito da un carattere diverso dal punto o da uno dei numerosi caratteri) zero o più volte.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Match the @ character.</source>
          <target state="translated">Trova la corrispondenza con il carattere @.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Continue the match if the character that precedes the @ character is A through Z, a through z, or 0 through 9.</source>
          <target state="translated">Continuare la ricerca della corrispondenza se il carattere che precede il carattere @ è compreso tra A e Z, tra a e z oppure tra 0 e 9.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`(?&lt;=[0-9a-z])`</ph> construct defines a zero-width positive lookbehind assertion.</source>
          <target state="translated">Il costrutto <ph id="ph1">`(?&lt;=[0-9a-z])`</ph> definisce un'asserzione lookbehind positiva di larghezza zero.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Check whether the character that follows @ is an opening bracket.</source>
          <target state="translated">Controllare se il carattere che segue @ è una parentesi di apertura.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>If it is an opening bracket, match the opening bracket followed by an IP address (four sets of one to three digits, with each set separated by a period) and a closing bracket.</source>
          <target state="translated">Se è una parentesi di apertura, cercare la corrispondenza della parentesi di apertura seguita da un indirizzo IP (quattro set da una a tre cifre, con ogni set separato da un punto) e una parentesi di chiusura.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>If the character that follows @ is not an opening bracket, match one alphanumeric character with a value of A-Z, a-z, or 0-9, followed by zero or more occurrences of a word character or a hyphen, followed by zero or one alphanumeric character with a value of A-Z, a-z, or 0-9, followed by a period.</source>
          <target state="translated">Se il carattere che segue @ non è una parentesi di apertura, cercare la corrispondenza con un carattere alfanumerico avente un valore compreso tra A e Z, a e z oppure 0 e 9, seguito da zero o più occorrenze di un carattere alfanumerico o di un trattino, seguite da zero o un carattere alfanumerico con un valore compreso tra A e Z, a e z oppure 0 e 9 seguito da un punto.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>This pattern can be repeated one or more times, and must be followed by the top-level domain name.</source>
          <target state="translated">Questo modello può essere ripetuto una o più volte e deve essere seguito dal nome di dominio di primo livello.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The top-level domain name must begin and end with an alphanumeric character (a-z, A-Z, and 0-9).</source>
          <target state="translated">Il nome di dominio di primo livello deve iniziare e finire con un carattere alfanumerico (a-z, A-Z e 0-9).</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>It can also include from zero to 22 ASCII characters that are either alphanumeric or hyphens.</source>
          <target state="translated">Può anche includere da zero a 22 caratteri ASCII, che possono essere caratteri alfanumerici o trattini.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>End the match at the end of the string.</source>
          <target state="translated">Terminare la corrispondenza alla fine della stringa.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>You can call the <ph id="ph1">`IsValidEmail`</ph> and <ph id="ph2">`DomainMapper`</ph> methods by using code such as the following:</source>
          <target state="translated">È possibile chiamare i metodi <ph id="ph1">`IsValidEmail`</ph> e <ph id="ph2">`DomainMapper`</ph> usando codice simile al seguente:</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">Vedere anche</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>.NET regular expressions<ept id="p1">](regular-expressions.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Espressioni regolari .NET<ept id="p1">](regular-expressions.md)</ept></target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Regular expression examples<ept id="p1">](regex-examples.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Esempi di espressioni regolari<ept id="p1">](regex-examples.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>