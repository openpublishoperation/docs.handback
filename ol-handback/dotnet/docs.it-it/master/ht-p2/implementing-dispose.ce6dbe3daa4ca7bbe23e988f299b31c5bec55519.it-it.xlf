<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-eac019f" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dfe2cebfbcf1f4c2697683ebda8c1e11567fd015</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\garbagecollection\implementing-dispose.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p2</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9c767e094bcc0eeef3aa68e876ddf7c6b336dc37</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a104a3574d5165774f427301e61a67f85eb2407f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Implementing a dispose method</source>
          <target state="translated">Implementazione di un metodo Dispose</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Implementing a dispose method</source>
          <target state="translated">Implementazione di un metodo Dispose</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Implementing a dispose method</source>
          <target state="translated">Implementazione di un metodo Dispose</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You implement a <bpt id="p1">[</bpt>Dispose<ept id="p1">](xref:System.IDisposable.Dispose)</ept> method to release unmanaged resources used by your application.</source>
          <target state="translated">Il metodo <bpt id="p1">[</bpt>Dispose<ept id="p1">](xref:System.IDisposable.Dispose)</ept> viene implementato per rilasciare le risorse non gestite usate dall'applicazione.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The .NET garbage collector does not allocate or release unmanaged memory.</source>
          <target state="translated">Garbage Collector di .NET non alloca e non rilascia la memoria non gestita.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The pattern for disposing an object, referred to as a dispose pattern, imposes order on the lifetime of an object.</source>
          <target state="translated">Il criterio per eliminare un oggetto, definito come criterio Dispose, è valido per tutta la durata di un oggetto.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The dispose pattern is used only for objects that access unmanaged resources, such as file and pipe handles, registry handles, wait handles, or pointers to blocks of unmanaged memory.</source>
          <target state="translated">Il modello Dispose viene usato solo per gli oggetti che accedono a risorse non gestite, quali handle di file e pipe, handle del Registro di sistema, handle di attesa o puntatori ai blocchi di memoria non gestita.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This is because the garbage collector is very efficient at reclaiming unused managed objects, but it is unable to reclaim unmanaged objects.</source>
          <target state="translated">Ciò è dovuto al fatto che il Garbage Collector è molto efficiente nel recupero degli oggetti gestiti inutilizzati, ma non è in grado di recuperare gli oggetti non gestiti.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The dispose pattern has two variations:</source>
          <target state="translated">Il modello Dispose precede due variazioni:</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You wrap each unmanaged resource that a type uses in a safe handle (that is, in a class derived from <bpt id="p1">[</bpt>System.Runtime.InteropServices.SafeHandle<ept id="p1">](xref:System.Runtime.InteropServices.SafeHandle)</ept>).</source>
          <target state="translated">Si esegue il wrapping di ogni risorsa non gestita usata da un tipo in un handle sicuro (ovvero in una classe derivata da <bpt id="p1">[</bpt>System.Runtime.InteropServices.SafeHandle<ept id="p1">](xref:System.Runtime.InteropServices.SafeHandle)</ept>).</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In this case, you implement the <bpt id="p1">[</bpt>IDisposable<ept id="p1">](xref:System.IDisposable)</ept> interface and an additional <ph id="ph1">`Dispose(Boolean)`</ph> method.</source>
          <target state="translated">In questo caso, viene implementata l'interfaccia <bpt id="p1">[</bpt>IDisposable<ept id="p1">](xref:System.IDisposable)</ept> e un metodo <ph id="ph1">`Dispose(Boolean)`</ph> aggiuntivo.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This is the recommended variation and doesn't require overriding the <bpt id="p1">[</bpt>Object.Finalize<ept id="p1">](xref:System.Object.Finalize)</ept> method.</source>
          <target state="translated">Questa è la variazione consigliata e non richiede l'override del metodo <bpt id="p1">[</bpt>Object.Finalize<ept id="p1">](xref:System.Object.Finalize)</ept>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Microsoft.Win32.SafeHandles<ept id="p1">](xref:Microsoft.Win32.SafeHandles)</ept> namespace provides a set of classes derived from <bpt id="p2">[</bpt>SafeHandle<ept id="p2">](xref:System.Runtime.InteropServices.SafeHandle)</ept>, which are listed in the <bpt id="p3">[</bpt>Using safe handles<ept id="p3">](#using-safe-handles)</ept> section.</source>
          <target state="translated">Lo spazio dei nomi <bpt id="p1">[</bpt>Microsoft.Win32.SafeHandles<ept id="p1">](xref:Microsoft.Win32.SafeHandles)</ept> offre un set di classi derivate da <bpt id="p2">[</bpt>SafeHandle<ept id="p2">](xref:System.Runtime.InteropServices.SafeHandle)</ept>, che sono elencate nella sezione <bpt id="p3">[</bpt>Uso degli handle sicuri<ept id="p3">](#using-safe-handles)</ept>.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If you can't find a class that is suitable for releasing your unmanaged resource, you can implement your own subclass of <bpt id="p1">[</bpt>SafeHandle<ept id="p1">](xref:System.Runtime.InteropServices.SafeHandle)</ept>.</source>
          <target state="translated">Se non è possibile trovare una classe in grado di rilasciare la risorsa non gestita, è possibile implementare una propria sottoclasse di <bpt id="p1">[</bpt>SafeHandle<ept id="p1">](xref:System.Runtime.InteropServices.SafeHandle)</ept>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You implement the <bpt id="p1">[</bpt>IDisposable<ept id="p1">](xref:System.IDisposable)</ept> interface and an additional <ph id="ph1">`Dispose(Boolean`</ph>) method, and you also override the <bpt id="p2">[</bpt>Object.Finalize<ept id="p2">](xref:System.Object.Finalize)</ept> method.</source>
          <target state="translated">Si implementa l'interfaccia <bpt id="p1">[</bpt>IDisposable<ept id="p1">](xref:System.IDisposable)</ept> e un metodo <ph id="ph1">`Dispose(Boolean`</ph> aggiuntivo e si esegue anche l'override del metodo <bpt id="p2">[</bpt>Object.Finalize<ept id="p2">](xref:System.Object.Finalize)</ept>.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You must override <bpt id="p1">[</bpt>Finalize<ept id="p1">](xref:System.Object.Finalize)</ept> to ensure that unmanaged resources are disposed of if your <bpt id="p2">[</bpt>IDisposable.Dispose<ept id="p2">](xref:System.IDisposable.Dispose)</ept> implementation is not called by a consumer of your type.</source>
          <target state="translated">È necessario eseguire l'override di <bpt id="p1">[</bpt>Finalize<ept id="p1">](xref:System.Object.Finalize)</ept> per assicurarsi che le risorse non gestite vengano eliminate se l'implementazione <bpt id="p2">[</bpt>IDisposable.Dispose<ept id="p2">](xref:System.IDisposable.Dispose)</ept> non viene chiamata da un consumer del tipo proprio.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If you use the recommended technique discussed in the previous bullet, the <bpt id="p1">[</bpt>System.Runtime.InteropServices.SafeHandle<ept id="p1">](xref:System.Runtime.InteropServices.SafeHandle)</ept> class does this on your behalf.</source>
          <target state="translated">Se si usa la tecnica consigliata discussa nel precedente punto, questa operazione viene eseguita automaticamente dalla classe <bpt id="p1">[</bpt>System.Runtime.InteropServices.SafeHandle<ept id="p1">](xref:System.Runtime.InteropServices.SafeHandle)</ept>.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>To help ensure that resources are always cleaned up appropriately, a <bpt id="p1">[</bpt>Dispose<ept id="p1">](xref:System.IDisposable.Dispose)</ept> method should be callable multiple times without throwing an exception.</source>
          <target state="translated">Per garantire la corretta pulitura delle risorse in ogni occasione, deve essere possibile chiamare il metodo <bpt id="p1">[</bpt>Dispose<ept id="p1">](xref:System.IDisposable.Dispose)</ept> più volte senza che venga generata un'eccezione.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The code example provided for the <bpt id="p1">[</bpt>GC.KeepAlive<ept id="p1">](xref:System.GC.KeepAlive(System.Object))</ept> method shows how aggressive garbage collection can cause a finalizer to run while a member of the reclaimed object is still executing.</source>
          <target state="translated">L'esempio di codice per il metodo <bpt id="p1">[</bpt>GC.KeepAlive<ept id="p1">](xref:System.GC.KeepAlive(System.Object))</ept> illustra come una procedura di Garbage Collection troppo incisiva possa determinare l'esecuzione di un finalizzatore mentre un membro dell'oggetto recuperato è ancora in esecuzione.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>It is a good idea to call the <bpt id="p1">[</bpt>KeepAlive<ept id="p1">](xref:System.GC.KeepAlive(System.Object))</ept> method at the end of a lengthy <ph id="ph1">`Dispose`</ph> method.</source>
          <target state="translated">È consigliabile chiamare il metodo <bpt id="p1">[</bpt>KeepAlive<ept id="p1">](xref:System.GC.KeepAlive(System.Object))</ept> alla fine di un metodo <ph id="ph1">`Dispose`</ph> di lunga durata.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Dispose() and Dispose(Boolean)</source>
          <target state="translated">Dispose() e Dispose(Boolean)</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>IDisposable<ept id="p1">](xref:System.IDisposable)</ept> interface requires the implementation of a single parameterless method, <bpt id="p2">[</bpt>Dispose<ept id="p2">](xref:System.IDisposable.Dispose)</ept>.</source>
          <target state="translated">L'interfaccia <bpt id="p1">[</bpt>IDisposable<ept id="p1">](xref:System.IDisposable)</ept> richiede l'implementazione di un singolo metodo senza parametri, ovvero <bpt id="p2">[</bpt>Dispose<ept id="p2">](xref:System.IDisposable.Dispose)</ept>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>However, the dispose pattern requires two <ph id="ph1">`Dispose`</ph> methods to be implemented:</source>
          <target state="translated">Tuttavia, il modello Dispose richiede due metodi <ph id="ph1">`Dispose`</ph> per essere implementato:</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>A public non-virtual (<ph id="ph1">`NonInheritable`</ph> in Visual Basic) <bpt id="p1">[</bpt>IDisposable.Dispose<ept id="p1">](xref:System.IDisposable.Dispose)</ept> implementation that has no parameters.</source>
          <target state="translated">Un'implementazione di <bpt id="p1">[</bpt>IDisposable.Dispose<ept id="p1">](xref:System.IDisposable.Dispose)</ept> pubblica non virtuale (<ph id="ph1">`NonInheritable`</ph> in Visual Basic) senza parametri.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>A protected virtual (<ph id="ph1">`Overridable`</ph> in Visual Basic) <ph id="ph2">`Dispose`</ph> method whose signature is:</source>
          <target state="translated">Un metodo <ph id="ph1">`Overridable`</ph> protetto virtuale (<ph id="ph2">`Dispose`</ph> in Visual Basic) la cui firma è indicata di seguito:</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The Dispose() overload</source>
          <target state="translated">Overload Dispose()</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Because the public, non-virtual (<ph id="ph1">`NonInheritable`</ph> in Visual Basic), parameterless <ph id="ph2">`Dispose`</ph> method is called by a consumer of the type, its purpose is to free unmanaged resources and to indicate that the finalizer, if one is present, doesn't have to run.</source>
          <target state="translated">Poiché il metodo pubblico, non virtuale (<ph id="ph1">`NonInheritable`</ph> in Visual Basic), privo di parametri <ph id="ph2">`Dispose`</ph> è chiamato da un consumer del tipo, lo scopo è liberare le risorse non gestite e indicare che non è necessario eseguire il finalizzatore, se disponibili.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Because of this, it has a standard implementation:</source>
          <target state="translated">Per questo motivo il metodo ha un'implementazione standard:</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Dispose`</ph> method performs all object cleanup, so the garbage collector no longer needs to call the objects' <bpt id="p1">[</bpt>Object.Finalize<ept id="p1">](xref:System.Object.Finalize)</ept> override.</source>
          <target state="translated">Il metodo <ph id="ph1">`Dispose`</ph> esegue la pulizia di tutti gli oggetti, quindi Garbage Collector non deve più chiamare l'override di <bpt id="p1">[</bpt>Object.Finalize<ept id="p1">](xref:System.Object.Finalize)</ept> degli oggetti.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Therefore, the call to the <bpt id="p1">[</bpt>GC.SuppressFinalize<ept id="p1">](xref:System.GC.SuppressFinalize(System.Object))</ept> method prevents the garbage collector from running the finalizer.</source>
          <target state="translated">Pertanto, la chiamata al metodo <bpt id="p1">[</bpt>GC.SuppressFinalize<ept id="p1">](xref:System.GC.SuppressFinalize(System.Object))</ept> impedisce a Garbage Collector di eseguire il finalizzatore.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If the type has no finalizer, the call to <bpt id="p1">[</bpt>SuppressFinalize<ept id="p1">](xref:System.GC.SuppressFinalize(System.Object))</ept> has no effect.</source>
          <target state="translated">Se il tipo non dispone di un finalizzatore, la chiamata a <bpt id="p1">[</bpt>SuppressFinalize<ept id="p1">](xref:System.GC.SuppressFinalize(System.Object))</ept> non ha alcun effetto.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Note that the actual work of releasing unmanaged resources is performed by the second overload of the <ph id="ph1">`Dispose`</ph> method.</source>
          <target state="translated">Si noti che l'effettiva operazione di rilascio delle risorse non gestite viene eseguita dal secondo overload del metodo <ph id="ph1">`Dispose`</ph>.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The Dispose(Boolean) overload</source>
          <target state="translated">Overload Dispose(Boolean)</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In the second overload, the <bpt id="p1">*</bpt>disposing<ept id="p1">*</ept> parameter is a <bpt id="p2">[</bpt>Boolean<ept id="p2">](xref:System.Boolean)</ept> that indicates whether the method call comes from a <bpt id="p3">[</bpt>Dispose<ept id="p3">](xref:System.IDisposable.Dispose)</ept> method (its value is <ph id="ph1">`true`</ph>) or from a finalizer (its value is <ph id="ph2">`false`</ph>).</source>
          <target state="translated">Nel secondo overload, il parametro <bpt id="p1">*</bpt>disposing<ept id="p1">*</ept> è un valore <bpt id="p2">[</bpt>Boolean<ept id="p2">](xref:System.Boolean)</ept> che indica se la chiamata al metodo proviene da un metodo <bpt id="p3">[</bpt>Dispose<ept id="p3">](xref:System.IDisposable.Dispose)</ept> (il valore è <ph id="ph1">`true`</ph>) o da un finalizzatore (il valore è <ph id="ph2">`false`</ph>).</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The body of the method consists of two blocks of code:</source>
          <target state="translated">Il corpo del metodo è costituito da due blocchi di codice:</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>A block that frees unmanaged resources.</source>
          <target state="translated">Un blocco che libera le risorse non gestite.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>This block executes regardless of the value of the <bpt id="p1">*</bpt>disposing<ept id="p1">*</ept> parameter.</source>
          <target state="translated">Questo blocco viene eseguito indipendentemente dal valore del parametro <bpt id="p1">*</bpt>disposing<ept id="p1">*</ept>.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>A conditional block that frees managed resources.</source>
          <target state="translated">Un blocco condizionale che libera le risorse gestite.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This block executes if the value of <bpt id="p1">*</bpt>disposing<ept id="p1">*</ept> is <ph id="ph1">`true`</ph>.</source>
          <target state="translated">Il blocco viene eseguito se il valore di <bpt id="p1">*</bpt>disposing<ept id="p1">*</ept> è <ph id="ph1">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The managed resources that it frees can include:</source>
          <target state="translated">Le risorse gestite liberate possono includere:</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Managed objects that implement IDisposable<ept id="p1">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>Oggetti gestiti che implementano IDisposable<ept id="p1">**</ept>.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The conditional block can be used to call their <bpt id="p1">[</bpt>Dispose<ept id="p1">](xref:System.IDisposable.Dispose)</ept> implementation.</source>
          <target state="translated">Il blocco condizionale può essere usato per chiamare la relativa implementazione di <bpt id="p1">[</bpt>Dispose<ept id="p1">](xref:System.IDisposable.Dispose)</ept>.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If you have used a safe handle to wrap your unmanaged resource, you should call the <bpt id="p1">[</bpt>SafeHandle.Dispose(Boolean<ept id="p1">](xref:System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean))</ept> implementation here.</source>
          <target state="translated">Se è stato usato un handle sicuro per eseguire il wrapping della risorsa non gestita, l'implementazione di <bpt id="p1">[</bpt>SafeHandle.Dispose(Boolean<ept id="p1">](xref:System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean))</ept> dovrebbe essere chiamata a questo punto.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Managed objects that consume large amounts of memory or consume scarce resources.<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>Oggetti gestiti che usano grandi quantità di memoria o risorse insufficienti.<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Freeing these objects explicitly in the <ph id="ph1">`Dispose`</ph> method releases them faster than if they were reclaimed non-deterministically by the garbage collector.</source>
          <target state="translated">La liberazione esplicita di questi oggetti nel metodo <ph id="ph1">`Dispose`</ph> ne consente un rilascio più veloce rispetto al recupero non deterministico eseguito dal Garbage Collector.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>If the method call comes from a finalizer (that is, if <bpt id="p1">*</bpt>disposing<ept id="p1">*</ept> is <ph id="ph1">`false`</ph>), only the code that frees unmanaged resources executes.</source>
          <target state="translated">Se la chiamata al metodo proviene da un finalizzatore (ovvero se <bpt id="p1">*</bpt>disposing<ept id="p1">*</ept> è <ph id="ph1">`false`</ph>), viene eseguito solo il codice che libera le risorse non gestite.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Because the order in which the garbage collector destroys managed objects during finalization is not defined, calling this <ph id="ph1">`Dispose`</ph> overload with a value of <ph id="ph2">`false`</ph> prevents the finalizer from trying to release managed resources that may have already been reclaimed.</source>
          <target state="translated">Poiché l'ordine in cui il Garbage Collector elimina gli oggetti gestiti durante la finalizzazione non è definito, la chiamata a questo overload <ph id="ph1">`Dispose`</ph> con valore <ph id="ph2">`false`</ph> impedisce che il finalizzatore tenti di liberare risorse gestite che potrebbero essere già state recuperate.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Implementing the dispose pattern for a base class</source>
          <target state="translated">Implementazione del modello Dispose per una classe di base</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>If you implement the dispose pattern for a base class, you must provide the following:</source>
          <target state="translated">Per implementare il modello Dispose per una classe di base, è necessario predisporre quanto segue:</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>You should implement this pattern for all base classes that implement <bpt id="p1">[</bpt>IDisposable<ept id="p1">](xref:System.IDisposable)</ept> and are not <ph id="ph1">`sealed`</ph>.</source>
          <target state="translated">È consigliabile implementare questo criterio per tutte le classi di base che implementano <bpt id="p1">[</bpt>IDisposable<ept id="p1">](xref:System.IDisposable)</ept> e non sono <ph id="ph1">`sealed`</ph>.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>Dispose<ept id="p1">](xref:System.IDisposable.Dispose)</ept> implementation that calls the <ph id="ph1">`Dispose(Boolean)`</ph> method.</source>
          <target state="translated">Un'implementazione di <bpt id="p1">[</bpt>Dispose<ept id="p1">](xref:System.IDisposable.Dispose)</ept> che chiami il metodo <ph id="ph1">`Dispose(Boolean)`</ph>.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Dispose(Boolean)`</ph> method that performs the actual work of releasing resources.</source>
          <target state="translated">Un metodo <ph id="ph1">`Dispose(Boolean)`</ph> che esegua l'effettiva operazione di rilascio delle risorse.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Either a class derived from <bpt id="p1">[</bpt>SafeHandle<ept id="p1">](xref:System.Runtime.InteropServices.SafeHandle)</ept> that wraps your unmanaged resource (recommended), or an override to the <bpt id="p2">[</bpt>Object.Finalize<ept id="p2">](xref:System.Object.Finalize)</ept> method.</source>
          <target state="translated">Una classe derivata da <bpt id="p1">[</bpt>SafeHandle<ept id="p1">](xref:System.Runtime.InteropServices.SafeHandle)</ept> che esegua il wrapping della risorsa non gestita (operazione consigliata) o un override al metodo <bpt id="p2">[</bpt>Object.Finalize<ept id="p2">](xref:System.Object.Finalize)</ept>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>SafeHandle<ept id="p1">](xref:System.Runtime.InteropServices.SafeHandle)</ept>SafeHandle class provides a finalizer that frees you from having to code one.</source>
          <target state="translated">La classe <bpt id="p1">[</bpt>SafeHandle<ept id="p1">](xref:System.Runtime.InteropServices.SafeHandle)</ept> offre un finalizzatore, non è quindi necessario codificarne uno.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Here's the general pattern for implementing the dispose pattern for a base class that uses a safe handle.</source>
          <target state="translated">Di seguito è illustrato il modello generale per implementare il modello Dispose per una classe di base che usa un handle sicuro.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The previous example uses a <bpt id="p1">[</bpt>SafeFileHandle<ept id="p1">](xref:Microsoft.Win32.SafeHandles.SafeFileHandle)</ept> object to illustrate the pattern; any object derived from <bpt id="p2">[</bpt>SafeHandle<ept id="p2">](xref:System.Runtime.InteropServices.SafeHandle)</ept> could be used instead.</source>
          <target state="translated">L'esempio precedente usa un oggetto <bpt id="p1">[</bpt>SafeFileHandle<ept id="p1">](xref:Microsoft.Win32.SafeHandles.SafeFileHandle)</ept> per illustrare il criterio; in alternativa è possibile usare qualsiasi oggetto derivato da <bpt id="p2">[</bpt>SafeHandle<ept id="p2">](xref:System.Runtime.InteropServices.SafeHandle)</ept>.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Note that the example does not properly instantiate its <bpt id="p1">[</bpt>SafeFileHandle<ept id="p1">](xref:Microsoft.Win32.SafeHandles.SafeFileHandle)</ept> object.</source>
          <target state="translated">Si noti che l'esempio non crea correttamente un'istanza del relativo oggetto <bpt id="p1">[</bpt>SafeFileHandle<ept id="p1">](xref:Microsoft.Win32.SafeHandles.SafeFileHandle)</ept>.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Here's the general pattern for implementing the dispose pattern for a base class that overrides <bpt id="p1">[</bpt>Object.Finalize<ept id="p1">](xref:System.Object.Finalize)</ept>.</source>
          <target state="translated">Di seguito è illustrato il modello generale per implementare il criterio Dispose per una classe di base che esegue l'override di <bpt id="p1">[</bpt>Object.Finalize<ept id="p1">](xref:System.Object.Finalize)</ept>.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>In C#, you override <bpt id="p1">[</bpt>Object.Finalize<ept id="p1">](xref:System.Object.Finalize)</ept> by defining a <ph id="ph1">`destructor`</ph>.</source>
          <target state="translated">In C#, si esegue l'override di <bpt id="p1">[</bpt>Object.Finalize<ept id="p1">](xref:System.Object.Finalize)</ept> definendo un <ph id="ph1">`destructor`</ph>.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Implementing the dispose pattern for a derived class</source>
          <target state="translated">Implementazione del modello Dispose per una classe derivata</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>A class derived from a class that implements the <bpt id="p1">[</bpt>IDisposable<ept id="p1">](xref:System.IDisposable)</ept> interface shouldn't implement <bpt id="p2">[</bpt>IDisposable<ept id="p2">](xref:System.IDisposable)</ept>, because the base class implementation of <bpt id="p3">[</bpt>IDisposable.Dispose<ept id="p3">](xref:System.IDisposable.Dispose)</ept> is inherited by its derived classes.</source>
          <target state="translated">Una classe derivata da una classe che implementa l'interfaccia <bpt id="p1">[</bpt>IDisposable<ept id="p1">](xref:System.IDisposable)</ept> non deve implementare <bpt id="p2">[</bpt>IDisposable<ept id="p2">](xref:System.IDisposable)</ept>, poiché l'implementazione della classe di base di <bpt id="p3">[</bpt>IDisposable.Dispose<ept id="p3">](xref:System.IDisposable.Dispose)</ept> viene ereditata dalle classi derivate.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Instead, to implement the dispose pattern for a derived class, you provide the following:</source>
          <target state="translated">Al contrario, per implementare il modello Dispose per una classe derivata, è necessario predisporre quanto segue:</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`protected Dispose(Boolean)`</ph> method that overrides the base class method and performs the actual work of releasing the resources of the derived class.</source>
          <target state="translated">Un metodo <ph id="ph1">`protected Dispose(Boolean)`</ph> che esegua l'override del metodo della classe di base ed esegua l'effettiva operazione di rilascio delle risorse della classe derivata.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>This method should also call the <ph id="ph1">`Dispose(Boolean)`</ph> method of the base class and pass it a value of <ph id="ph2">`true`</ph> for the <bpt id="p1">*</bpt>disposing<ept id="p1">*</ept> argument.</source>
          <target state="translated">Questo metodo deve anche chiamare il metodo <ph id="ph1">`Dispose(Boolean)`</ph> della classe di base e passare un valore <ph id="ph2">`true`</ph> per l'argomento <bpt id="p1">*</bpt>disposing<ept id="p1">*</ept>.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Either a class derived from <bpt id="p1">[</bpt>SafeHandle<ept id="p1">](xref:System.Runtime.InteropServices.SafeHandle)</ept> that wraps your unmanaged resource (recommended), or an override to the <bpt id="p2">[</bpt>Object.Finalize<ept id="p2">](xref:System.Object.Finalize)</ept> method.</source>
          <target state="translated">Una classe derivata da <bpt id="p1">[</bpt>SafeHandle<ept id="p1">](xref:System.Runtime.InteropServices.SafeHandle)</ept> che esegua il wrapping della risorsa non gestita (operazione consigliata) o un override al metodo <bpt id="p2">[</bpt>Object.Finalize<ept id="p2">](xref:System.Object.Finalize)</ept>.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>SafeHandle<ept id="p1">](xref:System.Runtime.InteropServices.SafeHandle)</ept> class provides a finalizer that frees you from having to code one.</source>
          <target state="translated">La classe <bpt id="p1">[</bpt>SafeHandle<ept id="p1">](xref:System.Runtime.InteropServices.SafeHandle)</ept> offre un finalizzatore, quindi non è necessario codificarne uno.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>If you do provide a finalizer, it should call the <ph id="ph1">`Dispose(Boolean)`</ph> overload with a <bpt id="p1">*</bpt>disposing<ept id="p1">*</ept> argument of <ph id="ph2">`false`</ph>.</source>
          <target state="translated">Se si specifica un finalizzatore, questo deve chiamare l'overload di <ph id="ph1">`Dispose(Boolean)`</ph> con un argomento <bpt id="p1">*</bpt>disposing<ept id="p1">*</ept> di <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Here's the general pattern for implementing the dispose pattern for a derived class that uses a safe handle:</source>
          <target state="translated">Di seguito è illustrato il modello generale per implementare il modello Dispose per una classe derivata che usa un handle sicuro:</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The previous example uses a <bpt id="p1">[</bpt>SafeFileHandle<ept id="p1">](xref:Microsoft.Win32.SafeHandles.SafeFileHandle)</ept> object to illustrate the pattern; any object derived from <bpt id="p2">[</bpt>SafeHandle<ept id="p2">](xref:System.Runtime.InteropServices.SafeHandle)</ept> could be used instead.</source>
          <target state="translated">L'esempio precedente usa un oggetto <bpt id="p1">[</bpt>SafeFileHandle<ept id="p1">](xref:Microsoft.Win32.SafeHandles.SafeFileHandle)</ept> per illustrare il criterio; in alternativa è possibile usare qualsiasi oggetto derivato da <bpt id="p2">[</bpt>SafeHandle<ept id="p2">](xref:System.Runtime.InteropServices.SafeHandle)</ept>.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Note that the example does not properly instantiate its <bpt id="p1">[</bpt>SafeFileHandle<ept id="p1">](xref:Microsoft.Win32.SafeHandles.SafeFileHandle)</ept> object.</source>
          <target state="translated">Si noti che l'esempio non crea correttamente un'istanza del relativo oggetto <bpt id="p1">[</bpt>SafeFileHandle<ept id="p1">](xref:Microsoft.Win32.SafeHandles.SafeFileHandle)</ept>.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Here's the general pattern for implementing the dispose pattern for a derived class that overrides <bpt id="p1">[</bpt>Object.Finalize<ept id="p1">](xref:System.Object.Finalize)</ept>:</source>
          <target state="translated">Di seguito è illustrato il modello generale per implementare il criterio Dispose per una classe derivata che esegue l'override di <bpt id="p1">[</bpt>Object.Finalize<ept id="p1">](xref:System.Object.Finalize)</ept>:</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>In C#, you override <bpt id="p1">[</bpt>Object.Finalize<ept id="p1">](xref:System.Object.Finalize)</ept> by defining a <ph id="ph1">`destructor`</ph>.</source>
          <target state="translated">In C#, si esegue l'override di <bpt id="p1">[</bpt>Object.Finalize<ept id="p1">](xref:System.Object.Finalize)</ept> definendo un <ph id="ph1">`destructor`</ph>.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Using safe handles</source>
          <target state="translated">Utilizzo degli handle sicuri</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Writing code for an object's finalizer is a complex task that can cause problems if not done correctly.</source>
          <target state="translated">La scrittura di codice per il finalizzatore di un oggetto è un'attività complessa che può causare problemi se non eseguita correttamente.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Therefore, we recommend that you construct <bpt id="p1">[</bpt>System.Runtime.InteropServices.SafeHandle<ept id="p1">](xref:System.Runtime.InteropServices.SafeHandle)</ept> objects instead of implementing a finalizer.</source>
          <target state="translated">È pertanto consigliabile costruire oggetti <bpt id="p1">[</bpt>System.Runtime.InteropServices.SafeHandle<ept id="p1">](xref:System.Runtime.InteropServices.SafeHandle)</ept> anziché implementare un finalizzatore.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Classes derived from the <bpt id="p1">[</bpt>System.Runtime.InteropServices.SafeHandle<ept id="p1">](xref:System.Runtime.InteropServices.SafeHandle)</ept> class simplify object lifetime issues by assigning and releasing handles without interruption.</source>
          <target state="translated">Le classi derivate dalla classe <bpt id="p1">[</bpt>System.Runtime.InteropServices.SafeHandle<ept id="p1">](xref:System.Runtime.InteropServices.SafeHandle)</ept> semplificano i problemi di durata degli oggetti assegnando e rilasciando handle senza interruzione.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>They contain a critical finalizer that is guaranteed to run while an application domain is unloading.</source>
          <target state="translated">Contengono un finalizzatore critico la cui esecuzione è garantita durante lo scaricamento di un dominio dell'applicazione.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The following derived classes in the <bpt id="p1">[</bpt>Microsoft.Win32.SafeHandles<ept id="p1">](xref:Microsoft.Win32.SafeHandles)</ept> namespace provide safe handles:</source>
          <target state="translated">Le seguenti classi derivate nello spazio dei nomi <bpt id="p1">[</bpt>Microsoft.Win32.SafeHandles<ept id="p1">](xref:Microsoft.Win32.SafeHandles)</ept> offrono handle sicuri:</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>SafeFileHandle<ept id="p1">](xref:Microsoft.Win32.SafeHandles.SafeFileHandle)</ept>, <bpt id="p2">[</bpt>SafeMemoryMappedFileHandle<ept id="p2">](xref:Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle)</ept>, and <bpt id="p3">[</bpt>SafePipeHandle<ept id="p3">](xref:Microsoft.Win32.SafeHandles.SafePipeHandle)</ept> class, for files, memory mapped files, and pipes.</source>
          <target state="translated">Classi <bpt id="p1">[</bpt>SafeFileHandle<ept id="p1">](xref:Microsoft.Win32.SafeHandles.SafeFileHandle)</ept>, <bpt id="p2">[</bpt>SafeMemoryMappedFileHandle<ept id="p2">](xref:Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle)</ept> e <bpt id="p3">[</bpt>SafePipeHandle<ept id="p3">](xref:Microsoft.Win32.SafeHandles.SafePipeHandle)</ept> per file, file mappati alla memoria e pipe.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>SafeMemoryMappedViewHandle<ept id="p1">](xref:Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle)</ept> class, for memory views.</source>
          <target state="translated">Classe <bpt id="p1">[</bpt>SafeMemoryMappedViewHandle<ept id="p1">](xref:Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle)</ept> per le visualizzazioni di memoria.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>SafeNCryptKeyHandle<ept id="p1">](https://msdn.microsoft.com/en-us/library/microsoft.win32.safehandles.safencryptkeyhandle(v=vs.110).aspx)</ept>, <bpt id="p2">[</bpt>SafeNCryptProviderHandle<ept id="p2">](https://msdn.microsoft.com/en-us/library/microsoft.win32.safehandles.safencryptproviderhandle(v=vs.110).aspx)</ept>, and <bpt id="p3">[</bpt>SafeNCryptSecretHandle<ept id="p3">](https://msdn.microsoft.com/en-us/library/microsoft.win32.safehandles.safencryptsecrethandle(v=vs.110).aspx)</ept> classes, for cryptography constructs.</source>
          <target state="translated">Classi <bpt id="p1">[</bpt>SafeNCryptKeyHandle<ept id="p1">](https://msdn.microsoft.com/en-us/library/microsoft.win32.safehandles.safencryptkeyhandle(v=vs.110).aspx)</ept>, <bpt id="p2">[</bpt>SafeNCryptProviderHandle<ept id="p2">](https://msdn.microsoft.com/en-us/library/microsoft.win32.safehandles.safencryptproviderhandle(v=vs.110).aspx)</ept> e <bpt id="p3">[</bpt>SafeNCryptSecretHandle<ept id="p3">](https://msdn.microsoft.com/en-us/library/microsoft.win32.safehandles.safencryptsecrethandle(v=vs.110).aspx)</ept> per i costrutti di crittografia.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>SafeRegistryHandle<ept id="p1">](xref:Microsoft.Win32.SafeHandles.SafeRegistryHandle)</ept> class, for registry keys.</source>
          <target state="translated">Classe <bpt id="p1">[</bpt>SafeRegistryHandle<ept id="p1">](xref:Microsoft.Win32.SafeHandles.SafeRegistryHandle)</ept> per le chiavi del Registro di sistema.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>SafeWaitHandle<ept id="p1">](xref:Microsoft.Win32.SafeHandles.SafeWaitHandle)</ept> class, for wait handles.</source>
          <target state="translated">Classe <bpt id="p1">[</bpt>SafeWaitHandle<ept id="p1">](xref:Microsoft.Win32.SafeHandles.SafeWaitHandle)</ept> per gli handle di attesa.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Using a safe handle to implement the dispose pattern for a base class</source>
          <target state="translated">Uso di un handle sicuro per implementare il modello Dispose per una classe di base</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The following example illustrates the dispose pattern for a base class, <ph id="ph1">`DisposableStreamResource`</ph>, that uses a safe handle to encapsulate unmanaged resources.</source>
          <target state="translated">L'esempio seguente illustra il modello Dispose per una classe di base, <ph id="ph1">`DisposableStreamResource`</ph>, che usa handle sicuri per incapsulare le risorse non gestite.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>It defines a <ph id="ph1">`DisposableResource`</ph> class that uses a <bpt id="p1">[</bpt>SafeFileHandle<ept id="p1">](xref:Microsoft.Win32.SafeHandles.SafeFileHandle)</ept> to wrap a <bpt id="p2">[</bpt>Stream<ept id="p2">](xref:System.IO.Stream)</ept> object that represents an open file.</source>
          <target state="translated">Definisce una classe <ph id="ph1">`DisposableResource`</ph> che usa <bpt id="p1">[</bpt>SafeFileHandle<ept id="p1">](xref:Microsoft.Win32.SafeHandles.SafeFileHandle)</ept> per eseguire il wrapping di un oggetto <bpt id="p2">[</bpt>Stream<ept id="p2">](xref:System.IO.Stream)</ept> che rappresenta un file aperto.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`DisposableResource`</ph> method also includes a single property, <ph id="ph2">`Size`</ph>, that returns the total number of bytes in the file stream.</source>
          <target state="translated">Il metodo <ph id="ph1">`DisposableResource`</ph> include anche una singola proprietà, <ph id="ph2">`Size`</ph>, che restituisce il numero totale di byte nel flusso di file.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Using a safe handle to implement the dispose pattern for a derived class</source>
          <target state="translated">Utilizzo di un handle sicuro per implementare il modello Dispose per una classe derivata</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The following example illustrates the dispose pattern for a derived class, <ph id="ph1">`DisposableStreamResource2`</ph>, that inherits from the <ph id="ph2">`DisposableStreamResource`</ph> class presented in the previous example.</source>
          <target state="translated">Nell'esempio seguente viene illustrato il modello Dispose per una classe derivata, <ph id="ph1">`DisposableStreamResource2`</ph>, che eredita dalla classe <ph id="ph2">`DisposableStreamResource`</ph> presentata nell'esempio precedente.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The class adds an additional method, <ph id="ph1">`WriteFileInfo`</ph>, and uses a <bpt id="p1">[</bpt>SafeFileHandle<ept id="p1">](xref:Microsoft.Win32.SafeHandles.SafeFileHandle)</ept> object to wrap the handle of the writable file.</source>
          <target state="translated">La classe aggiunge un altro metodo, <ph id="ph1">`WriteFileInfo`</ph>, e usa un oggetto <bpt id="p1">[</bpt>SafeFileHandle<ept id="p1">](xref:Microsoft.Win32.SafeHandles.SafeFileHandle)</ept> per il wrapping dell'handle del file modificabile.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>See also</source>
          <target state="translated">Vedere anche</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>SuppressFinalize<ept id="p1">](xref:System.GC.SuppressFinalize(System.Object))</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>SuppressFinalize<ept id="p1">](xref:System.GC.SuppressFinalize(System.Object))</ept></target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>IDisposable<ept id="p1">](xref:System.IDisposable)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>IDisposable<ept id="p1">](xref:System.IDisposable)</ept></target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>IDisposable.Dispose<ept id="p1">](xref:System.IDisposable.Dispose)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>IDisposable.Dispose<ept id="p1">](xref:System.IDisposable.Dispose)</ept></target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Microsoft.Win32.SafeHandles<ept id="p1">](xref:Microsoft.Win32.SafeHandles)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Microsoft.Win32.SafeHandles<ept id="p1">](xref:Microsoft.Win32.SafeHandles)</ept></target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.Runtime.InteropServices.SafeHandle<ept id="p1">](xref:System.Runtime.InteropServices.SafeHandle)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>System.Runtime.InteropServices.SafeHandle<ept id="p1">](xref:System.Runtime.InteropServices.SafeHandle)</ept></target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>IDisposable.Dispose<ept id="p1">](xref:System.IDisposable.Dispose)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>IDisposable.Dispose<ept id="p1">](xref:System.IDisposable.Dispose)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>