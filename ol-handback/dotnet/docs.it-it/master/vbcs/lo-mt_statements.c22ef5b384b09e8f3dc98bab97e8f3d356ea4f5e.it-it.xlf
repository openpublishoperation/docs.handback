<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">001ea1cb5e651b95f808eefd47fd468f556550a1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\statements.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">51d8c0b1e82c05d55d408985a200a190f434ef24</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6931b6f08eb6c22cd973a2ae2fc585297fa9811a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Statements in Visual Basic | Microsoft Docs</source>
          <target state="translated">Istruzioni in Visual Basic | Documenti di Microsoft</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Statements in Visual Basic</source>
          <target state="translated">Istruzioni in Visual Basic</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A statement in <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> is a complete instruction.</source>
          <target state="translated">Un'istruzione in <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> è un'istruzione completa.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>It can contain keywords, operators, variables, constants, and expressions.</source>
          <target state="translated">Può contenere le parole chiave, operatori, variabili, costanti ed espressioni.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Each statement belongs to one of the following categories:</source>
          <target state="translated">Ogni istruzione appartiene a una delle categorie seguenti:</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Declaration Statements<ept id="p1">**</ept>, which name a variable, constant, or procedure, and can also specify a data type.</source>
          <target state="translated"><bpt id="p1">**</bpt>Istruzioni di dichiarazione<ept id="p1">**</ept>, che corrisponde a una variabile, costante o procedure e può inoltre specificare un tipo di dati.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Executable Statements<ept id="p1">**</ept>, which initiate actions.</source>
          <target state="translated"><bpt id="p1">**</bpt>Istruzioni eseguibili<ept id="p1">**</ept>, che consentono di avviare azioni.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>These statements can call a method or function, and they can loop or branch through blocks of code.</source>
          <target state="translated">Queste istruzioni è possono chiamare un metodo o funzione, e possono eseguire il ciclo o eseguire una diramazione tra blocchi di codice.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Executable statements include <bpt id="p1">**</bpt>Assignment Statements<ept id="p1">**</ept>, which assign a value or expression to a variable or constant.</source>
          <target state="translated">Includono istruzioni eseguibili <bpt id="p1">**</bpt>istruzioni di assegnazione<ept id="p1">**</ept>, che consentono di assegnare un valore o un'espressione a una variabile o costante.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This topic describes each category.</source>
          <target state="translated">In questo argomento viene descritta ogni categoria.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Also, this topic describes how to combine multiple statements on a single line and how to continue a statement over multiple lines.</source>
          <target state="translated">Inoltre, in questo argomento viene illustrato come combinare più istruzioni in una singola riga e su come continuare un'istruzione su più righe.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Declaration Statements</source>
          <target state="translated">Istruzioni di dichiarazione</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You use declaration statements to name and define procedures, variables, properties, arrays, and constants.</source>
          <target state="translated">Utilizzare le istruzioni di dichiarazione per denominare e definire routine, variabili, proprietà, matrici e costanti.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>When you declare a programming element, you can also define its data type, access level, and scope.</source>
          <target state="translated">Quando si dichiara un elemento di programmazione, è inoltre possibile definire il tipo di dati, il livello di accesso e ambito.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Declared Element Characteristics<ept id="p1">](../../../visual-basic/programming-guide/language-features/declared-elements/declared-element-characteristics.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>caratteristiche di elementi dichiarati<ept id="p1">](../../../visual-basic/programming-guide/language-features/declared-elements/declared-element-characteristics.md)</ept>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The following example contains three declarations.</source>
          <target state="translated">Nell'esempio seguente contiene tre dichiarazioni.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#80<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_1.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements&amp;#80;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_1.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The first declaration is the <ph id="ph1">`Sub`</ph> statement.</source>
          <target state="translated">La prima dichiarazione è il <ph id="ph1">`Sub`</ph> istruzione.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Together with its matching <ph id="ph1">`End Sub`</ph> statement, it declares a procedure named <ph id="ph2">`applyFormat`</ph>.</source>
          <target state="translated">Con la corrispondenza <ph id="ph1">`End Sub`</ph> istruzione dichiara una routine denominata <ph id="ph2">`applyFormat`</ph>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>It also specifies that <ph id="ph1">`applyFormat`</ph> is <ph id="ph2">`Public`</ph>, which means that any code that can refer to it can call it.</source>
          <target state="translated">Specifica inoltre che <ph id="ph1">`applyFormat`</ph> è <ph id="ph2">`Public`</ph>, il che significa che qualsiasi codice che è possibile farvi riferimento può chiamarla.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The second declaration is the <ph id="ph1">`Const`</ph> statement, which declares the constant <ph id="ph2">`limit`</ph>, specifying the <ph id="ph3">`Integer`</ph> data type and a value of 33.</source>
          <target state="translated">La seconda dichiarazione è il <ph id="ph1">`Const`</ph> istruzione che dichiara la costante <ph id="ph2">`limit`</ph>, specificando il <ph id="ph3">`Integer`</ph> tipo di dati e un valore pari a 33.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The third declaration is the <ph id="ph1">`Dim`</ph> statement, which declares the variable <ph id="ph2">`thisWidget`</ph>.</source>
          <target state="translated">La terza dichiarazione è il <ph id="ph1">`Dim`</ph> istruzione che dichiara la variabile <ph id="ph2">`thisWidget`</ph>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The data type is a specific object, namely an object created from the <ph id="ph1">`Widget`</ph> class.</source>
          <target state="translated">Il tipo di dati è un oggetto specifico, vale a dire un oggetto creato dalla <ph id="ph1">`Widget`</ph> classe.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>You can declare a variable to be of any elementary data type or of any object type that is exposed in the application you are using.</source>
          <target state="translated">È possibile dichiarare una variabile di qualsiasi tipo di dati elementari o di qualsiasi tipo di oggetto che viene esposto nell'applicazione in uso.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Initial Values</source>
          <target state="translated">Valori iniziali</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>When the code containing a declaration statement runs, <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> reserves the memory required for the declared element.</source>
          <target state="translated">Quando viene eseguito il codice contenente un'istruzione di dichiarazione, <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> riserva la memoria necessaria per l'elemento dichiarato.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If the element holds a value, <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> initializes it to the default value for its data type.</source>
          <target state="translated">Se l'elemento contiene un valore, <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> Inizializza il valore predefinito per il tipo di dati.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For more information, see "Behavior" in <bpt id="p1">[</bpt>Dim Statement<ept id="p1">](../../../visual-basic/language-reference/statements/dim-statement.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere "Comportamento" in <bpt id="p1">[</bpt>Dim (istruzione)<ept id="p1">](../../../visual-basic/language-reference/statements/dim-statement.md)</ept>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You can assign an initial value to a variable as part of its declaration, as the following example illustrates.</source>
          <target state="translated">È possibile assegnare un valore iniziale a una variabile come parte della relativa dichiarazione, come illustrato nell'esempio seguente.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#81<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_2.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>&amp;#81; VbVbalrStatements<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_2.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If a variable is an object variable, you can explicitly create an instance of its class when you declare it by using the <bpt id="p1">[</bpt>New Operator<ept id="p1">](../../../visual-basic/language-reference/operators/new-operator.md)</ept> keyword, as the following example illustrates.</source>
          <target state="translated">Se la variabile è una variabile oggetto, è possibile creare un'istanza della classe in modo esplicito quando si dichiara tramite il <bpt id="p1">[</bpt>nuovo operatore<ept id="p1">](../../../visual-basic/language-reference/operators/new-operator.md)</ept> (parola chiave), come nell'esempio seguente viene illustrato.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#82<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_3.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements&amp;#82;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_3.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Note that the initial value you specify in a declaration statement is not assigned to a variable until execution reaches its declaration statement.</source>
          <target state="translated">Si noti che il valore iniziale specificato in un'istruzione di dichiarazione non è assegnato a una variabile, fino a quando l'esecuzione raggiunge l'istruzione di dichiarazione.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Until that time, the variable contains the default value for its data type.</source>
          <target state="translated">Fino a quel momento, la variabile contiene il valore predefinito per il tipo di dati.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Executable Statements</source>
          <target state="translated">Istruzioni eseguibili</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>An executable statement performs an action.</source>
          <target state="translated">Un'istruzione eseguibile esegue un'azione.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>It can call a procedure, branch to another place in the code, loop through several statements, or evaluate an expression.</source>
          <target state="translated">È possibile chiamare una routine, diramazione in un'altra posizione nel codice, eseguire più istruzioni, ciclo o valutare un'espressione.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>An assignment statement is a special case of an executable statement.</source>
          <target state="translated">Un'istruzione di assegnazione è un caso speciale di un'istruzione eseguibile.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The following example uses an <ph id="ph1">`If...Then...Else`</ph> control structure to run different blocks of code based on the value of a variable.</source>
          <target state="translated">Nell'esempio seguente viene utilizzato un <ph id="ph1">`If...Then...Else`</ph> struttura di controllo per eseguire blocchi di codice in base al valore di una variabile.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Within each block of code, a <ph id="ph1">`For...Next`</ph> loop runs a specified number of times.</source>
          <target state="translated">All'interno di ogni blocco di codice, un <ph id="ph1">`For...Next`</ph> ciclo viene eseguito un numero di volte specificato.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#83<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_4.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements&amp;83;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_4.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`If`</ph> statement in the preceding example checks the value of the parameter <ph id="ph2">`clockwise`</ph>.</source>
          <target state="translated">Il <ph id="ph1">`If`</ph> istruzione nell'esempio precedente viene controllato il valore del parametro <ph id="ph2">`clockwise`</ph>.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>If the value is <ph id="ph1">`True`</ph>, it calls the <ph id="ph2">`spinClockwise`</ph> method of <ph id="ph3">`aWidget`</ph>.</source>
          <target state="translated">Se il valore è <ph id="ph1">`True`</ph>, chiama il <ph id="ph2">`spinClockwise`</ph> metodo <ph id="ph3">`aWidget`</ph>.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If the value is <ph id="ph1">`False`</ph>, it calls the <ph id="ph2">`spinCounterClockwise`</ph> method of <ph id="ph3">`aWidget`</ph>.</source>
          <target state="translated">Se il valore è <ph id="ph1">`False`</ph>, chiama il <ph id="ph2">`spinCounterClockwise`</ph> metodo <ph id="ph3">`aWidget`</ph>.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`If...Then...Else`</ph> control structure ends with <ph id="ph2">`End If`</ph>.</source>
          <target state="translated">Il <ph id="ph1">`If...Then...Else`</ph> struttura di controllo termina con <ph id="ph2">`End If`</ph>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`For...Next`</ph> loop within each block calls the appropriate method a number of times equal to the value of the <ph id="ph2">`revolutions`</ph> parameter.</source>
          <target state="translated">Il <ph id="ph1">`For...Next`</ph> ciclo all'interno di ogni blocco chiama il metodo appropriato un numero di volte uguale al valore di <ph id="ph2">`revolutions`</ph> parametro.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Assignment Statements</source>
          <target state="translated">Istruzioni di assegnazione</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Assignment statements carry out assignment operations, which consist of taking the value on the right side of the assignment operator (<ph id="ph1">`=`</ph>) and storing it in the element on the left, as in the following example.</source>
          <target state="translated">Istruzioni di assegnazione di eseguire operazioni di assegnazione, ovvero di ottenere il valore sul lato destro dell'operatore di assegnazione (<ph id="ph1">`=`</ph>) e archiviarlo nell'elemento a sinistra, come nell'esempio seguente.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#73<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_5.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements&amp;#73;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_5.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>In the preceding example, the assignment statement stores the literal value 42 in the variable <ph id="ph1">`v`</ph>.</source>
          <target state="translated">Nell'esempio precedente, l'istruzione di assegnazione archivia il valore letterale 42 nella variabile <ph id="ph1">`v`</ph>.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Eligible Programming Elements</source>
          <target state="translated">Elementi di programmazione idonei</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The programming element on the left side of the assignment operator must be able to accept and store a value.</source>
          <target state="translated">L'elemento di programmazione sul lato sinistro dell'operatore di assegnazione deve essere in grado di accettare e archiviare un valore.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>This means it must be a variable or property that is not <bpt id="p1">[</bpt>ReadOnly<ept id="p1">](../../../visual-basic/language-reference/modifiers/readonly.md)</ept>, or it must be an array element.</source>
          <target state="translated">Ciò significa che deve essere una variabile o proprietà che non è <bpt id="p1">[</bpt>ReadOnly<ept id="p1">](../../../visual-basic/language-reference/modifiers/readonly.md)</ept>, o deve essere un elemento di matrice.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>In the context of an assignment statement, such an element is sometimes called an <bpt id="p1">*</bpt>lvalue<ept id="p1">*</ept>, for "left value."</source>
          <target state="translated">Nel contesto di un'istruzione di assegnazione, questo elemento è definito a volte un <bpt id="p1">*</bpt>lvalue<ept id="p1">*</ept>, per "valore sinistro".</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The value on the right side of the assignment operator is generated by an expression, which can consist of any combination of literals, constants, variables, properties, array elements, other expressions, or function calls.</source>
          <target state="translated">Il valore sul lato destro dell'operatore di assegnazione viene generato da un'espressione che può contenere qualsiasi combinazione di valori letterali, costanti, variabili, proprietà, elementi di matrice, altre espressioni o chiamate di funzione.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The following example illustrates this.</source>
          <target state="translated">Questa condizione è illustrata nell'esempio seguente.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#74<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_6.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements&amp;#74;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_6.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The preceding example adds the value held in variable <ph id="ph1">`y`</ph> to the value held in variable <ph id="ph2">`z`</ph>, and then adds the value returned by the call to function <ph id="ph3">`findResult`</ph>.</source>
          <target state="translated">Nell'esempio precedente viene aggiunto il valore contenuto nella variabile <ph id="ph1">`y`</ph> al valore contenuto nella variabile <ph id="ph2">`z`</ph>e quindi aggiunge il valore restituito dalla chiamata alla funzione <ph id="ph3">`findResult`</ph>.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The total value of this expression is then stored in variable <ph id="ph1">`x`</ph>.</source>
          <target state="translated">Il valore totale di questa espressione viene quindi archiviato nella variabile <ph id="ph1">`x`</ph>.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Data Types in Assignment Statements</source>
          <target state="translated">Tipi di dati nelle istruzioni di assegnazione</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>In addition to numeric values, the assignment operator can also assign <ph id="ph1">`String`</ph> values, as the following example illustrates.</source>
          <target state="translated">Oltre a valori numerici, è possibile inoltre assegnare l'operatore di assegnazione <ph id="ph1">`String`</ph> valori, come illustrato nell'esempio seguente.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#75<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_7.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>&amp;#75; VbVbalrStatements<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_7.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>You can also assign <ph id="ph1">`Boolean`</ph> values, using either a <ph id="ph2">`Boolean`</ph> literal or a <ph id="ph3">`Boolean`</ph> expression, as the following example illustrates.</source>
          <target state="translated">È inoltre possibile assegnare <ph id="ph1">`Boolean`</ph> valori, utilizzando un <ph id="ph2">`Boolean`</ph> valore letterale o una <ph id="ph3">`Boolean`</ph> espressione, come nell'esempio seguente viene illustrato.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#76<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_8.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements&amp;#76;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_8.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Similarly, you can assign appropriate values to programming elements of the <ph id="ph1">`Char`</ph>, <ph id="ph2">`Date`</ph>, or <ph id="ph3">`Object`</ph> data type.</source>
          <target state="translated">Analogamente, è possibile assegnare i valori appropriati per gli elementi di programmazione di <ph id="ph1">`Char`</ph>, <ph id="ph2">`Date`</ph>, o <ph id="ph3">`Object`</ph> tipo di dati.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>You can also assign an object instance to an element declared to be of the class from which that instance is created.</source>
          <target state="translated">È inoltre possibile assegnare un'istanza dell'oggetto a un elemento dichiarato come della classe da cui viene creato tale istanza.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Compound Assignment Statements</source>
          <target state="translated">Istruzioni di assegnazione composta</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Compound assignment statements<ept id="p1">*</ept> first perform an operation on an expression before assigning it to a programming element.</source>
          <target state="translated"><bpt id="p1">*</bpt>Istruzioni di assegnazione composta<ept id="p1">*</ept> prima di eseguire un'operazione su un'espressione prima di assegnarlo a un elemento di programmazione.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The following example illustrates one of these operators, <ph id="ph1">`+=`</ph>, which increments the value of the variable on the left side of the operator by the value of the expression on the right.</source>
          <target state="translated">Nell'esempio seguente viene illustrato uno di questi operatori, <ph id="ph1">`+=`</ph>, che incrementa il valore della variabile sul lato sinistro dell'operatore tramite il valore dell'espressione a destra.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#77<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_9.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>&amp;#77; VbVbalrStatements<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_9.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The preceding example adds 1 to the value of <ph id="ph1">`n`</ph>, and then stores that new value in <ph id="ph2">`n`</ph>.</source>
          <target state="translated">Nell'esempio precedente viene aggiunto 1 al valore di <ph id="ph1">`n`</ph>e quindi archivia il nuovo valore in <ph id="ph2">`n`</ph>.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>It is a shorthand equivalent of the following statement:</source>
          <target state="translated">È una sintassi abbreviata equivalente dell'istruzione seguente:</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#78<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_10.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements&amp;#78;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_10.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>A variety of compound assignment operations can be performed using operators of this type.</source>
          <target state="translated">Una serie di operazioni di assegnazione composta può essere eseguita utilizzando operatori di questo tipo.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>For a list of these operators and more information about them, see <bpt id="p1">[</bpt>Assignment Operators<ept id="p1">](../../../visual-basic/language-reference/operators/assignment-operators.md)</ept>.</source>
          <target state="translated">Per un elenco di questi operatori e ulteriori informazioni, vedere <bpt id="p1">[</bpt>operatori di assegnazione<ept id="p1">](../../../visual-basic/language-reference/operators/assignment-operators.md)</ept>.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The concatenation assignment operator (<ph id="ph1">`&amp;=`</ph>) is useful for adding a string to the end of already existing strings, as the following example illustrates.</source>
          <target state="translated">L'operatore di assegnazione di concatenazione (<ph id="ph1">`&amp;=`</ph>) è utile per l'aggiunta di una stringa alla fine della già stringhe, come illustrato nell'esempio seguente.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#79<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_11.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements&amp;#79;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_11.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Type Conversions in Assignment Statements</source>
          <target state="translated">Conversioni di tipi in istruzioni di assegnazione</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The value you assign to a variable, property, or array element must be of a data type appropriate to that destination element.</source>
          <target state="translated">Il valore assegnato a una variabile, una proprietà o un elemento della matrice deve essere di un tipo di dati appropriato all'elemento di destinazione.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>In general, you should try to generate a value of the same data type as that of the destination element.</source>
          <target state="translated">In generale, è consigliabile generare un valore del tipo di dati stesso di quello dell'elemento di destinazione.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>However, some types can be converted to other types during assignment.</source>
          <target state="translated">Tuttavia, alcuni tipi possono essere convertiti in altri tipi durante l'assegnazione.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>For information on converting between data types, see <bpt id="p1">[</bpt>Type Conversions in Visual Basic<ept id="p1">](../../../visual-basic/programming-guide/language-features/data-types/type-conversions.md)</ept>.</source>
          <target state="translated">Per informazioni sulla conversione tra tipi di dati, vedere <bpt id="p1">[</bpt>conversioni di tipi in Visual Basic<ept id="p1">](../../../visual-basic/programming-guide/language-features/data-types/type-conversions.md)</ept>.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>In brief, <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> automatically converts a value of a given type to any other type to which it widens.</source>
          <target state="translated">In breve, <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> automaticamente converte un valore di un determinato tipo in qualsiasi altro tipo a cui viene ampliato.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>widening conversion<ept id="p1">*</ept> is one in that always succeeds at run time and does not lose any data.</source>
          <target state="translated">Oggetto <bpt id="p1">*</bpt>conversione di ampliamento<ept id="p1">*</ept> è più grande sempre ha esito positivo in fase di esecuzione e non comporta la perdita dei dati.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> converts an <ph id="ph2">`Integer`</ph> value to <ph id="ph3">`Double`</ph> when appropriate, because <ph id="ph4">`Integer`</ph> widens to <ph id="ph5">`Double`</ph>.</source>
          <target state="translated">Ad esempio, <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> converte un <ph id="ph2">`Integer`</ph> valore <ph id="ph3">`Double`</ph> quando appropriato, in quanto <ph id="ph4">`Integer`</ph> può ampliarsi nel tipo <ph id="ph5">`Double`</ph>.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Widening and Narrowing Conversions<ept id="p1">](../../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>conversioni di ampliamento e restrizione<ept id="p1">](../../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md)</ept>.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Narrowing conversions<ept id="p1">*</ept> (those that are not widening) carry a risk of failure at run time, or of data loss.</source>
          <target state="translated"><bpt id="p1">*</bpt>Conversioni di restrizione<ept id="p1">*</ept> (quelli che non sono di ampliamento) comportano rischi di errore in fase di esecuzione o di perdita di dati.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>You can perform a narrowing conversion explicitly by using a type conversion function, or you can direct the compiler to perform all conversions implicitly by setting <ph id="ph1">`Option Strict Off`</ph>.</source>
          <target state="translated">È possibile eseguire una conversione di narrowing in modo esplicito utilizzando una funzione di conversione di tipo, oppure è possibile indicare al compilatore di eseguire tutte le conversioni in modo implicito impostando <ph id="ph1">`Option Strict Off`</ph>.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Implicit and Explicit Conversions<ept id="p1">](../../../visual-basic/programming-guide/language-features/data-types/implicit-and-explicit-conversions.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>conversioni implicite ed esplicite<ept id="p1">](../../../visual-basic/programming-guide/language-features/data-types/implicit-and-explicit-conversions.md)</ept>.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Putting Multiple Statements on One Line</source>
          <target state="translated">Inserimento di più istruzioni su una riga</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>You can have multiple statements on a single line separated by the colon (<ph id="ph1">`:`</ph>) character.</source>
          <target state="translated">È possibile inserire più istruzioni in una singola riga separata da due punti (<ph id="ph1">`:`</ph>) caratteri.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The following example illustrates this.</source>
          <target state="translated">Questa condizione è illustrata nell'esempio seguente.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#70<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_12.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements&amp;#70;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_12.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Though occasionally convenient, this form of syntax makes your code hard to read and maintain.</source>
          <target state="translated">Sebbene talvolta utile, questa forma di sintassi rende il codice difficile da leggere e gestire.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Thus, it is recommended that you keep one statement to a line.</source>
          <target state="translated">Pertanto, è consigliabile mantenere una sola istruzione per una riga.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Continuing a Statement over Multiple Lines</source>
          <target state="translated">Continuazione di un'istruzione su più righe</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>A statement usually fits on one line, but when it is too long, you can continue it onto the next line using a line-continuation sequence, which consists of a space followed by an underscore character (<ph id="ph1">`_`</ph>) followed by a carriage return.</source>
          <target state="translated">Un'istruzione generalmente rientra in una riga, ma quando è troppo lungo, è possibile continuare alla riga successiva utilizzando una sequenza di continuazione di riga, costituito da uno spazio seguito da un carattere di sottolineatura (<ph id="ph1">`_`</ph>) seguito da un ritorno a capo.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>In the following example, the <ph id="ph1">`MsgBox`</ph> executable statement is continued over two lines.</source>
          <target state="translated">Nell'esempio seguente, il <ph id="ph1">`MsgBox`</ph> istruzione eseguibile continua su due righe.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#71<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_13.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements&amp;#71;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_13.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Implicit Line Continuation</source>
          <target state="translated">Continuazione di riga implicita</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>In many cases, you can continue a statement on the next consecutive line without using the underscore character (_).</source>
          <target state="translated">In molti casi, è possibile continuare un'istruzione nella riga consecutiva successiva senza utilizzare il carattere di sottolineatura (_).</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The following table lists the syntax elements that implicitly continue the statement on the next line of code.</source>
          <target state="translated">Nella tabella seguente sono elencati gli elementi di sintassi che l'istruzione continue in modo implicito nella riga successiva del codice.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Syntax element</source>
          <target state="translated">Elemento di sintassi</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Esempio</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>After a comma (<ph id="ph1">`,`</ph>).</source>
          <target state="translated">Dopo una virgola (<ph id="ph1">`,`</ph>).</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation#1<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_14.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation n.&amp;1;<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_14.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>After an open parenthesis (<ph id="ph1">`(`</ph>) or before a closing parenthesis (<ph id="ph2">`)`</ph>).</source>
          <target state="translated">Dopo una parentesi aperta (<ph id="ph1">`(`</ph>) o prima di una parentesi di chiusura (<ph id="ph2">`)`</ph>).</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation#2<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_15.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation n.&amp;2;<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_15.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>After an open curly brace (<ph id="ph1">`{`</ph>) or before a closing curly brace (<ph id="ph2">`}`</ph>).</source>
          <target state="translated">Dopo una parentesi graffa aperta (<ph id="ph1">`{`</ph>) o prima della parentesi graffa di chiusura (<ph id="ph2">`}`</ph>).</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation#3<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_16.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation n.&amp;3;<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_16.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Object Initializers: Named and Anonymous Types<ept id="p1">](../../../visual-basic/programming-guide/language-features/objects-and-classes/object-initializers-named-and-anonymous-types.md)</ept> or <bpt id="p2">[</bpt>Collection Initializers<ept id="p2">](../../../visual-basic/programming-guide/language-features/collection-initializers/index.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>gli inizializzatori di oggetto: tipi denominati e anonimi<ept id="p1">](../../../visual-basic/programming-guide/language-features/objects-and-classes/object-initializers-named-and-anonymous-types.md)</ept> o <bpt id="p2">[</bpt>gli inizializzatori di insieme<ept id="p2">](../../../visual-basic/programming-guide/language-features/collection-initializers/index.md)</ept>.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>After an open embedded expression (<ph id="ph1">`&lt;%=`</ph>) or before the close of an embedded expression (<ph id="ph2">`%&gt;`</ph>) within an XML literal.</source>
          <target state="translated">Dopo aver aperto un espressione incorporata (<ph id="ph1">`&lt;%=`</ph>) o prima della chiusura di un'espressione incorporata (<ph id="ph2">`%&gt;`</ph>) all'interno di un valore letterale XML.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation#4<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_17.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation n.&amp;4;<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_17.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Embedded Expressions in XML<ept id="p1">](../../../visual-basic/programming-guide/language-features/xml/embedded-expressions-in-xml.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>espressioni incorporate in XML<ept id="p1">](../../../visual-basic/programming-guide/language-features/xml/embedded-expressions-in-xml.md)</ept>.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>After the concatenation operator (<ph id="ph1">`&amp;`</ph>).</source>
          <target state="translated">Dopo l'operatore di concatenazione (<ph id="ph1">`&amp;`</ph>).</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnConventions#9<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_18.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>9 VbVbcnConventions<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_18.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Operators Listed by Functionality<ept id="p1">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>elencati gli operatori per funzionalità<ept id="p1">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept>.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>After assignment operators (<ph id="ph1">`=`</ph>, <ph id="ph2">`&amp;=`</ph>, <ph id="ph3">`:=`</ph>, <ph id="ph4">`+=`</ph>, <ph id="ph5">`-=`</ph>, <ph id="ph6">`*=`</ph>, <ph id="ph7">`/=`</ph>, <ph id="ph8">`\=`</ph>, <ph id="ph9">`^=`</ph>, <ph id="ph10">`&lt;&lt;=`</ph>, <ph id="ph11">`&gt;&gt;=`</ph>).</source>
          <target state="translated">After assignment operators (<ph id="ph1">`=`</ph>, <ph id="ph2">`&amp;=`</ph>, <ph id="ph3">`:=`</ph>, <ph id="ph4">`+=`</ph>, <ph id="ph5">`-=`</ph>, <ph id="ph6">`*=`</ph>, <ph id="ph7">`/=`</ph>, <ph id="ph8">`\=`</ph>, <ph id="ph9">`^=`</ph>, <ph id="ph10">`&lt;&lt;=`</ph>, <ph id="ph11">`&gt;&gt;=`</ph>).</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation#5<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_19.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation n.&amp;5;<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_19.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Operators Listed by Functionality<ept id="p1">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>elencati gli operatori per funzionalità<ept id="p1">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept>.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>After binary operators (<ph id="ph1">`+`</ph>, <ph id="ph2">`-`</ph>, <ph id="ph3">`/`</ph>, <ph id="ph4">`*`</ph>, <ph id="ph5">`Mod`</ph>, <ph id="ph6">`&lt;&gt;`</ph>, <ph id="ph7">`&lt;`</ph>, <ph id="ph8">`&gt;`</ph>, <ph id="ph9">`&lt;=`</ph>, <ph id="ph10">`&gt;=`</ph>, <ph id="ph11">`^`</ph>, <ph id="ph12">`&gt;&gt;`</ph>, <ph id="ph13">`&lt;&lt;`</ph>, <ph id="ph14">`And`</ph>, <ph id="ph15">`AndAlso`</ph>, <ph id="ph16">`Or`</ph>, <ph id="ph17">`OrElse`</ph>, <ph id="ph18">`Like`</ph>, <ph id="ph19">`Xor`</ph>) within an expression.</source>
          <target state="translated">After binary operators (<ph id="ph1">`+`</ph>, <ph id="ph2">`-`</ph>, <ph id="ph3">`/`</ph>, <ph id="ph4">`*`</ph>, <ph id="ph5">`Mod`</ph>, <ph id="ph6">`&lt;&gt;`</ph>, <ph id="ph7">`&lt;`</ph>, <ph id="ph8">`&gt;`</ph>, <ph id="ph9">`&lt;=`</ph>, <ph id="ph10">`&gt;=`</ph>, <ph id="ph11">`^`</ph>, <ph id="ph12">`&gt;&gt;`</ph>, <ph id="ph13">`&lt;&lt;`</ph>, <ph id="ph14">`And`</ph>, <ph id="ph15">`AndAlso`</ph>, <ph id="ph16">`Or`</ph>, <ph id="ph17">`OrElse`</ph>, <ph id="ph18">`Like`</ph>, <ph id="ph19">`Xor`</ph>) within an expression.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation#7<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_20.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation&amp;#7;<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_20.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Operators Listed by Functionality<ept id="p1">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>elencati gli operatori per funzionalità<ept id="p1">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept>.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>After the <ph id="ph1">`Is`</ph> and <ph id="ph2">`IsNot`</ph> operators.</source>
          <target state="translated">Dopo il <ph id="ph1">`Is`</ph> e <ph id="ph2">`IsNot`</ph> operatori.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation#8<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_21.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation n.&amp;8;<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_21.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Operators Listed by Functionality<ept id="p1">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>elencati gli operatori per funzionalità<ept id="p1">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept>.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>After a member qualifier character (<ph id="ph1">`.`</ph>) and before the member name.</source>
          <target state="translated">Dopo un carattere qualificatore di membro (<ph id="ph1">`.`</ph>) e prima che il nome del membro.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>However, you must include a line-continuation character (_) following a member qualifier character when you are using the <ph id="ph1">`With`</ph> statement or supplying values in the initialization list for a type.</source>
          <target state="translated">Tuttavia, è necessario includere un carattere di continuazione di riga (_) seguito un carattere qualificatore di membro quando si utilizza il <ph id="ph1">`With`</ph> istruzione o specificando i valori nell'elenco di inizializzazione per un tipo.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Consider breaking the line after the assignment operator (for example, <ph id="ph1">`=`</ph>) when you are using <ph id="ph2">`With`</ph> statements or object initialization lists.</source>
          <target state="translated">Considerare l'interruzione di riga dopo l'operatore di assegnazione (ad esempio, <ph id="ph1">`=`</ph>) quando si utilizza <ph id="ph2">`With`</ph> istruzioni o gli elenchi di inizializzazione di oggetti.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation#5<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_19.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation n.&amp;5;<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_19.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation#14<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_22.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation&amp;#14;<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_22.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>With...End With Statement<ept id="p1">](../../../visual-basic/language-reference/statements/with-end-with-statement.md)</ept> or <bpt id="p2">[</bpt>Object Initializers: Named and Anonymous Types<ept id="p2">](../../../visual-basic/programming-guide/language-features/objects-and-classes/object-initializers-named-and-anonymous-types.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>con... Terminare con l'istruzione<ept id="p1">](../../../visual-basic/language-reference/statements/with-end-with-statement.md)</ept> o <bpt id="p2">[</bpt>inizializzatori di oggetto: tipi denominati e anonimi<ept id="p2">](../../../visual-basic/programming-guide/language-features/objects-and-classes/object-initializers-named-and-anonymous-types.md)</ept>.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>After an XML axis property qualifier (<ph id="ph1">`.`</ph> or <ph id="ph2">`.@`</ph> or <ph id="ph3">`...`</ph>).</source>
          <target state="translated">Dopo un qualificatore di proprietà axis XML (<ph id="ph1">`.`</ph> o <ph id="ph2">`.@`</ph> o <ph id="ph3">`...`</ph>).</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>However, you must include a line-continuation character (_) when you specify a member qualifier when you are using the <ph id="ph1">`With`</ph> keyword.</source>
          <target state="translated">Tuttavia, è necessario includere un carattere di continuazione di riga (_) quando si specifica un qualificatore di membro quando si utilizza il <ph id="ph1">`With`</ph> (parola chiave).</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation#9<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_23.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>9 VbVbalrLineContinuation<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_23.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>XML Axis Properties<ept id="p1">](../../../visual-basic/language-reference/xml-axis/xml-axis-properties.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>proprietà Axis XML<ept id="p1">](../../../visual-basic/language-reference/xml-axis/xml-axis-properties.md)</ept>.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>After a less-than sign (&lt;) or before a greater-than sign (<ph id="ph1">`&gt;`</ph>) when you specify an attribute.</source>
          <target state="translated">Dopo un minore di-il segno di maggiore (&lt;) or="" before="" a="" greater-than="" sign=""&gt;&lt;/)&gt;<ph id="ph1">`&gt;`</ph>) quando si specifica un attributo.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Also after a greater-than sign (<ph id="ph1">`&gt;`</ph>) when you specify an attribute.</source>
          <target state="translated">Anche dopo un-il segno di maggiore (<ph id="ph1">`&gt;`</ph>) quando si specifica un attributo.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>However, you must include a line-continuation character (_) when you specify assembly-level or module-level attributes.</source>
          <target state="translated">Tuttavia, è necessario includere un carattere di continuazione di riga (_) quando si specificano gli attributi a livello di assembly o a livello di modulo.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation#10<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_24.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation&amp;#10;<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_24.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Attributes overview<ept id="p1">](../../../visual-basic/programming-guide/concepts/attributes/index.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>Cenni preliminari sugli attributi<ept id="p1">](../../../visual-basic/programming-guide/concepts/attributes/index.md)</ept>.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Before and after query operators (<ph id="ph1">`Aggregate`</ph>, <ph id="ph2">`Distinct`</ph>, <ph id="ph3">`From`</ph>, <ph id="ph4">`Group By`</ph>, <ph id="ph5">`Group Join`</ph>, <ph id="ph6">`Join`</ph>, <ph id="ph7">`Let`</ph>, <ph id="ph8">`Order By`</ph>, <ph id="ph9">`Select`</ph>, <ph id="ph10">`Skip`</ph>, <ph id="ph11">`Skip While`</ph>, <ph id="ph12">`Take`</ph>, <ph id="ph13">`Take While`</ph>, <ph id="ph14">`Where`</ph>, <ph id="ph15">`In`</ph>, <ph id="ph16">`Into`</ph>, <ph id="ph17">`On`</ph>, <ph id="ph18">`Ascending`</ph>, and <ph id="ph19">`Descending`</ph>).</source>
          <target state="translated">Before and after query operators (<ph id="ph1">`Aggregate`</ph>, <ph id="ph2">`Distinct`</ph>, <ph id="ph3">`From`</ph>, <ph id="ph4">`Group By`</ph>, <ph id="ph5">`Group Join`</ph>, <ph id="ph6">`Join`</ph>, <ph id="ph7">`Let`</ph>, <ph id="ph8">`Order By`</ph>, <ph id="ph9">`Select`</ph>, <ph id="ph10">`Skip`</ph>, <ph id="ph11">`Skip While`</ph>, <ph id="ph12">`Take`</ph>, <ph id="ph13">`Take While`</ph>, <ph id="ph14">`Where`</ph>, <ph id="ph15">`In`</ph>, <ph id="ph16">`Into`</ph>, <ph id="ph17">`On`</ph>, <ph id="ph18">`Ascending`</ph>, and <ph id="ph19">`Descending`</ph>).</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>You cannot break a line between the keywords of query operators that are made up of multiple keywords (<ph id="ph1">`Order By`</ph>, <ph id="ph2">`Group Join`</ph>, <ph id="ph3">`Take While`</ph>, and <ph id="ph4">`Skip While`</ph>).</source>
          <target state="translated">Non è possibile interrompere una linea tra le parole chiave degli operatori di query sono costituite da più parole chiave (<ph id="ph1">`Order By`</ph>, <ph id="ph2">`Group Join`</ph>, <ph id="ph3">`Take While`</ph>, e <ph id="ph4">`Skip While`</ph>).</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation#11<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_25.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation&amp;#11;<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_25.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Queries<ept id="p1">](../../../visual-basic/language-reference/queries/queries.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>query<ept id="p1">](../../../visual-basic/language-reference/queries/queries.md)</ept>.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>After the <ph id="ph1">`In`</ph> keyword in a <ph id="ph2">`For Each`</ph> statement.</source>
          <target state="translated">Dopo il <ph id="ph1">`In`</ph> (parola chiave) in un <ph id="ph2">`For Each`</ph> istruzione.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation#12<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_26.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation&amp;#12;<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_26.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>For Each...Next Statement<ept id="p1">](../../../visual-basic/language-reference/statements/for-each-next-statement.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>For Each... Istruzione successiva<ept id="p1">](../../../visual-basic/language-reference/statements/for-each-next-statement.md)</ept>.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>After the <ph id="ph1">`From`</ph> keyword in a collection initializer.</source>
          <target state="translated">Dopo il <ph id="ph1">`From`</ph> (parola chiave) in un inizializzatore di raccolta.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation#13<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_27.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>13 VbVbalrLineContinuation<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_27.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Collection Initializers<ept id="p1">](../../../visual-basic/programming-guide/language-features/collection-initializers/index.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>gli inizializzatori di insieme<ept id="p1">](../../../visual-basic/programming-guide/language-features/collection-initializers/index.md)</ept>.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Adding Comments</source>
          <target state="translated">Aggiunta di commenti</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Source code is not always self-explanatory, even to the programmer who wrote it.</source>
          <target state="translated">Codice sorgente non è sempre chiara, anche per il programmatore che lo ha scritto.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>To help document their code, therefore, most programmers make liberal use of embedded comments.</source>
          <target state="translated">Per documentare il codice, pertanto, la maggior parte dei programmatori verificare utilizzano deliberatamente commenti incorporati.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Comments in code can explain a procedure or a particular instruction to anyone reading or working with it later.</source>
          <target state="translated">I commenti nel codice possono spiegare una routine o una particolare istruzione agli utenti la lettura o l'utilizzo in un secondo momento.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> ignores comments during compilation, and they do not affect the compiled code.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>Ignora i commenti durante la compilazione, e non influiscono sul codice compilato.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Comment lines begin with an apostrophe (<ph id="ph1">`'`</ph>) or <ph id="ph2">`REM`</ph> followed by a space.</source>
          <target state="translated">Le righe di commento iniziano con un apostrofo (<ph id="ph1">`'`</ph>) o <ph id="ph2">`REM`</ph> seguito da uno spazio.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>They can be added anywhere in code, except within a string.</source>
          <target state="translated">Possono essere aggiunti in qualsiasi punto nel codice, ad eccezione all'interno di una stringa.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>To append a comment to a statement, insert an apostrophe or <ph id="ph1">`REM`</ph> after the statement, followed by the comment.</source>
          <target state="translated">Per aggiungere un commento a un'istruzione, inserire un apostrofo o <ph id="ph1">`REM`</ph> dopo l'istruzione, seguito dal commento.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Comments can also go on their own separate line.</source>
          <target state="translated">I commenti possono andare anche una riga separata.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>The following example demonstrates these possibilities.</source>
          <target state="translated">L'esempio seguente illustra queste possibilità.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#72<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_28.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements&amp;#72;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_28.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Checking Compilation Errors</source>
          <target state="translated">Controllo degli errori di compilazione</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>If, after you type a line of code, the line is displayed with a wavy blue underline (an error message may appear as well), there is a syntax error in the statement.</source>
          <target state="translated">Se, dopo aver digitato una riga di codice, viene visualizzata la riga con una sottolineatura ondulata blu (un messaggio di errore viene visualizzata anche), si verifica un errore di sintassi nell'istruzione.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>You must find out what is wrong with the statement (by looking in the task list, or hovering over the error with the mouse pointer and reading the error message) and correct it.</source>
          <target state="translated">È necessario sapere qual è il problema con l'istruzione (per la ricerca nell'elenco attività o passare il mouse sull'errore con il puntatore del mouse e la lettura del messaggio di errore) e correggere l'errore.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Until you have fixed all syntax errors in your code, your program will fail to compile correctly.</source>
          <target state="translated">Fino a quando non è stato risolto tutti gli errori di sintassi nel codice, il programma non verrà compilato correttamente.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Related Sections</source>
          <target state="translated">Sezioni correlate</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Term</source>
          <target state="translated">Termine</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Definition</source>
          <target state="translated">Definizione</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Assignment Operators<ept id="p1">](../../../visual-basic/language-reference/operators/assignment-operators.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Operatori di assegnazione<ept id="p1">](../../../visual-basic/language-reference/operators/assignment-operators.md)</ept></target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Provides links to language reference pages covering assignment operators such as <ph id="ph1">`=`</ph>, <ph id="ph2">`*=`</ph>, and <ph id="ph3">`&amp;=`</ph>.</source>
          <target state="translated">Vengono forniti collegamenti alle pagine di riferimento per gli operatori di assegnazione, ad esempio <ph id="ph1">`=`</ph>, <ph id="ph2">`*=`</ph>, e <ph id="ph3">`&amp;=`</ph>.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Operators and Expressions<ept id="p1">](../../../visual-basic/programming-guide/language-features/operators-and-expressions/index.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Operatori ed espressioni<ept id="p1">](../../../visual-basic/programming-guide/language-features/operators-and-expressions/index.md)</ept></target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Shows how to combine elements with operators to yield new values.</source>
          <target state="translated">Viene illustrato come combinare gli elementi con gli operatori per ottenere nuovi valori.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Break and Combine Statements in Code<ept id="p1">](../../../visual-basic/programming-guide/program-structure/how-to-break-and-combine-statements-in-code.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Procedura: Interrompere e combinare istruzioni nel codice<ept id="p1">](../../../visual-basic/programming-guide/program-structure/how-to-break-and-combine-statements-in-code.md)</ept></target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Shows how to break a single statement into multiple lines and how to place multiple statements on the same line.</source>
          <target state="translated">Viene illustrato come suddividere una singola istruzione in più righe e come è possibile inserire più istruzioni sulla stessa riga.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Label Statements<ept id="p1">](../../../visual-basic/programming-guide/program-structure/how-to-label-statements.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Procedura: Etichettare le istruzioni<ept id="p1">](../../../visual-basic/programming-guide/program-structure/how-to-label-statements.md)</ept></target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Shows how to label a line of code.</source>
          <target state="translated">Viene illustrato come assegnare un'etichetta di una riga di codice.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>