<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fa7753847619f14600c924cba01e55651c4f17c2</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\com-interop\walkthrough-implementing-inheritance-with-com-objects.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1b2001e2f4191ce4a2943cdd5852bbf4dc20b44d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7f328b32e55b676e2d524ea17aa26ad6542a2c3d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Walkthrough: Implementing Inheritance with COM Objects (Visual Basic) | Microsoft Docs</source>
          <target state="translated">Procedura dettagliata: Implementazione dell'ereditarietà con gli oggetti COM (Visual Basic) | Documenti di Microsoft</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Walkthrough: Implementing Inheritance with COM Objects (Visual Basic)</source>
          <target state="translated">Procedura dettagliata: implementazione dell'ereditarietà con gli oggetti COM (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You can derive Visual Basic classes from <ph id="ph1">`Public`</ph> classes in COM objects, even those created in earlier versions of <ph id="ph2">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>.</source>
          <target state="translated">È possibile derivare classi di Visual Basic da <ph id="ph1">`Public`</ph> classi di oggetti COM, anche quelli creati in versioni precedenti di <ph id="ph2">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The properties and methods of classes inherited from COM objects can be overridden or overloaded just as properties and methods of any other base class can be overridden or overloaded.</source>
          <target state="translated">Le proprietà e metodi delle classi ereditate da oggetti COM possono essere sottoposto a override o sottoposto a overload solo come proprietà e metodi di qualsiasi altra classe di base possono essere sottoposto a override o di overload.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Inheritance from COM objects is useful when you have an existing class library that you do not want to recompile.</source>
          <target state="translated">Ereditarietà da oggetti COM è utile quando si dispone di una libreria di classi esistenti che non si desidera ricompilare.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The following procedure shows how to use Visual Basic 6.0 to create a COM object that contains a class, and then use it as a base class.</source>
          <target state="translated">La procedura seguente viene illustrato come utilizzare Visual Basic 6.0 per creare un oggetto COM che contiene una classe e quindi utilizzarlo come classe base.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>To build the COM object that is used in this walkthrough</source>
          <target state="translated">Per creare l'oggetto COM che viene utilizzato in questa procedura dettagliata</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In Visual Basic 6.0, open a new ActiveX DLL project.</source>
          <target state="translated">In Visual Basic 6.0, aprire un nuovo progetto DLL ActiveX.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A project named <ph id="ph1">`Project1`</ph> is created.</source>
          <target state="translated">Un progetto denominato <ph id="ph1">`Project1`</ph> viene creato.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>It has a class named <ph id="ph1">`Class1`</ph>.</source>
          <target state="translated">Dispone di una classe denominata <ph id="ph1">`Class1`</ph>.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Project Explorer<ept id="p1">**</ept>, right-click <bpt id="p2">**</bpt>Project1<ept id="p2">**</ept>, and then click <bpt id="p3">**</bpt>Project1 Properties<ept id="p3">**</ept>.</source>
          <target state="translated">Nel <bpt id="p1">**</bpt>Project Explorer<ept id="p1">**</ept>, fare doppio clic su <bpt id="p2">**</bpt>Project1<ept id="p2">**</ept>, quindi fare clic su <bpt id="p3">**</bpt>proprietà Project1<ept id="p3">**</ept>.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Project Properties<ept id="p1">**</ept> dialog box is displayed.</source>
          <target state="translated">Il <bpt id="p1">**</bpt>le proprietà del progetto<ept id="p1">**</ept> viene visualizzata la finestra di dialogo.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>General<ept id="p1">**</ept> tab of the <bpt id="p2">**</bpt>Project Properties<ept id="p2">**</ept> dialog box, change the project name by typing <ph id="ph1">`ComObject1`</ph> in the <bpt id="p3">**</bpt>Project Name<ept id="p3">**</ept> field.</source>
          <target state="translated">Nel <bpt id="p1">**</bpt>generale<ept id="p1">**</ept> scheda della finestra il <bpt id="p2">**</bpt>le proprietà del progetto<ept id="p2">**</ept> finestra di dialogo, modificare il nome del progetto digitando <ph id="ph1">`ComObject1`</ph> nel <bpt id="p3">**</bpt>nome progetto<ept id="p3">**</ept> campo.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Project Explorer<ept id="p1">**</ept>, right-click <ph id="ph1">`Class1`</ph>, and then click <bpt id="p2">**</bpt>Properties<ept id="p2">**</ept>.</source>
          <target state="translated">Nel <bpt id="p1">**</bpt>Project Explorer<ept id="p1">**</ept>, fare doppio clic su <ph id="ph1">`Class1`</ph>, quindi fare clic su <bpt id="p2">**</bpt>proprietà<ept id="p2">**</ept>.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Properties<ept id="p1">**</ept> window for the class is displayed.</source>
          <target state="translated">Il <bpt id="p1">**</bpt>proprietà<ept id="p1">**</ept> verrà visualizzata la finestra per la classe.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Change the <ph id="ph1">`Name`</ph> property to <ph id="ph2">`MathFunctions`</ph>.</source>
          <target state="translated">Modifica il <ph id="ph1">`Name`</ph> proprietà <ph id="ph2">`MathFunctions`</ph>.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Project Explorer<ept id="p1">**</ept>, right-click <ph id="ph1">`MathFunctions`</ph>, and then click <bpt id="p2">**</bpt>View Code<ept id="p2">**</ept>.</source>
          <target state="translated">Nel <bpt id="p1">**</bpt>Project Explorer<ept id="p1">**</ept>, fare doppio clic su <ph id="ph1">`MathFunctions`</ph>, quindi fare clic su <bpt id="p2">**</bpt>Visualizza codice<ept id="p2">**</ept>.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Code Editor<ept id="p1">**</ept> is displayed.</source>
          <target state="translated">Il <bpt id="p1">**</bpt>Editor di codice<ept id="p1">**</ept> viene visualizzato.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Add a local variable to hold the property value:</source>
          <target state="translated">Aggiungere una variabile locale per contenere il valore della proprietà:</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Add Property <ph id="ph1">`Let`</ph> and Property <ph id="ph2">`Get`</ph> property procedures:</source>
          <target state="translated">Aggiungere proprietà <ph id="ph1">`Let`</ph> e proprietà <ph id="ph2">`Get`</ph> le routine di proprietà:</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Add a function:</source>
          <target state="translated">Aggiungere una funzione:</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Create and register the COM object by clicking <bpt id="p1">**</bpt>Make ComObject1.dll<ept id="p1">**</ept> on the <bpt id="p2">**</bpt>File<ept id="p2">**</ept> menu.</source>
          <target state="translated">Creare e registrare l'oggetto COM scegliendo <bpt id="p1">**</bpt>Crea ComObject1. dll<ept id="p1">**</ept> sul <bpt id="p2">**</bpt>File<ept id="p2">**</ept> menu.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Although you can also expose a class created with <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> as a COM object, it is not a true COM object and cannot be used in this walkthrough.</source>
          <target state="translated">Sebbene sia possibile esporre anche una classe creata con <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> come oggetto COM non è un vero oggetto COM e non può essere utilizzato in questa procedura dettagliata.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For details, see <bpt id="p1">[</bpt>COM Interoperability in .NET Framework Applications<ept id="p1">](../../../visual-basic/programming-guide/com-interop/com-interoperability-in-net-framework-applications.md)</ept>.</source>
          <target state="translated">Per informazioni dettagliate, vedere <bpt id="p1">[</bpt>l'interoperabilità COM nelle applicazioni .NET Framework<ept id="p1">](../../../visual-basic/programming-guide/com-interop/com-interoperability-in-net-framework-applications.md)</ept>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Interop Assemblies</source>
          <target state="translated">Assembly di interoperabilità</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In the following procedure, you will create an interop assembly, which acts as a bridge between unmanaged code (such as a COM object) and the managed code <ph id="ph1">[!INCLUDE[vsprvs](../../../csharp/includes/vsprvs_md.md)]</ph> uses.</source>
          <target state="translated">Nella procedura seguente, si creerà un assembly di interoperabilità, che funge da ponte tra codice non gestito (ad esempio un oggetto COM) e il codice gestito <ph id="ph1">[!INCLUDE[vsprvs](../../../csharp/includes/vsprvs_md.md)]</ph> utilizza.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The interop assembly that <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> creates handles many of the details of working with COM objects, such as <bpt id="p1">*</bpt>interop marshaling<ept id="p1">*</ept>, the process of packaging parameters and return values into equivalent data types as they move to and from COM objects.</source>
          <target state="translated">L'assembly di interoperabilità che <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> crea gestisce molti dei dettagli relativi all'utilizzo con COM oggetti, ad esempio <bpt id="p1">*</bpt>il marshalling di interoperabilità<ept id="p1">*</ept>, il processo di creazione dei pacchetti parametri e valori restituiti in dati equivalenti tipi durante lo spostamento da e verso oggetti COM.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The reference in the <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> application points to the interop assembly, not the actual COM object.</source>
          <target state="translated">Il riferimento nel <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> punti dell'applicazione per l'assembly di interoperabilità, non all'oggetto COM.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>To use a COM object with Visual Basic 2005 and later versions</source>
          <target state="translated">Per utilizzare un oggetto COM con Visual Basic 2005 e versioni successive</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Open a new <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> Windows Application project.</source>
          <target state="translated">Aprire un nuovo <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> progetto applicazione Windows.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>Project<ept id="p1">**</ept> menu, click <bpt id="p2">**</bpt>Add Reference<ept id="p2">**</ept>.</source>
          <target state="translated">Nel <bpt id="p1">**</bpt>progetto<ept id="p1">**</ept> menu, fare clic su <bpt id="p2">**</bpt>Aggiungi riferimento<ept id="p2">**</ept>.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Add Reference<ept id="p1">**</ept> dialog box is displayed.</source>
          <target state="translated">Il <bpt id="p1">**</bpt>Aggiungi riferimento<ept id="p1">**</ept> viene visualizzata la finestra di dialogo.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>COM<ept id="p1">**</ept> tab, double-click <ph id="ph1">`ComObject1`</ph> in the <bpt id="p2">**</bpt>Component Name<ept id="p2">**</ept> list and click <bpt id="p3">**</bpt>OK<ept id="p3">**</ept>.</source>
          <target state="translated">Nel <bpt id="p1">**</bpt>COM<ept id="p1">**</ept> scheda, fare doppio clic su <ph id="ph1">`ComObject1`</ph> nel <bpt id="p2">**</bpt>nome componente<ept id="p2">**</ept> elenco e fare clic su <bpt id="p3">**</bpt>OK<ept id="p3">**</ept>.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>Project<ept id="p1">**</ept> menu, click <bpt id="p2">**</bpt>Add New Item<ept id="p2">**</ept>.</source>
          <target state="translated">Nel menu <bpt id="p1">**</bpt>Progetto<ept id="p1">**</ept> fare clic su <bpt id="p2">**</bpt>Aggiungi nuovo elemento<ept id="p2">**</ept>.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Add New Item<ept id="p1">**</ept> dialog box is displayed.</source>
          <target state="translated">Il <bpt id="p1">**</bpt>Aggiungi nuovo elemento<ept id="p1">**</ept> viene visualizzata la finestra di dialogo.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Templates<ept id="p1">**</ept> pane, click <bpt id="p2">**</bpt>Class<ept id="p2">**</ept>.</source>
          <target state="translated">Nel <bpt id="p1">**</bpt>modelli<ept id="p1">**</ept> riquadro, fare clic su <bpt id="p2">**</bpt>classe<ept id="p2">**</ept>.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The default file name, <ph id="ph1">`Class1.vb`</ph>, appears in the <bpt id="p1">**</bpt>Name<ept id="p1">**</ept> field.</source>
          <target state="translated">Il nome file predefinito, <ph id="ph1">`Class1.vb`</ph>, è presente il <bpt id="p1">**</bpt>nome<ept id="p1">**</ept> campo.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Change this field to MathClass.vb and click <bpt id="p1">**</bpt>Add<ept id="p1">**</ept>.</source>
          <target state="translated">Modificare questo campo per MathClass e fare clic su <bpt id="p1">**</bpt>Aggiungi<ept id="p1">**</ept>.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>This creates a class named <ph id="ph1">`MathClass`</ph>, and displays its code.</source>
          <target state="translated">Verrà creata una classe denominata <ph id="ph1">`MathClass`</ph>e verrà visualizzato il codice.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Add the following code to the top of <ph id="ph1">`MathClass`</ph> to inherit from the COM class.</source>
          <target state="translated">Aggiungere il codice seguente all'inizio del <ph id="ph1">`MathClass`</ph> per ereditare dalla classe COM.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrInterop#31<ept id="p2">](../../../visual-basic/programming-guide/com-interop/codesnippet/VisualBasic/walkthrough-implementing-inheritance-with-com-objects_1.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrInterop&amp;#31;<ept id="p2">](../../../visual-basic/programming-guide/com-interop/codesnippet/VisualBasic/walkthrough-implementing-inheritance-with-com-objects_1.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Overload the public method of the base class by adding the following code to <ph id="ph1">`MathClass`</ph>:</source>
          <target state="translated">Eseguire l'overload del metodo pubblico della classe di base aggiungendo il codice seguente al <ph id="ph1">`MathClass`</ph>:</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrInterop#32<ept id="p2">](../../../visual-basic/programming-guide/com-interop/codesnippet/VisualBasic/walkthrough-implementing-inheritance-with-com-objects_2.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrInterop n.&amp;32;<ept id="p2">](../../../visual-basic/programming-guide/com-interop/codesnippet/VisualBasic/walkthrough-implementing-inheritance-with-com-objects_2.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Extend the inherited class by adding the following code to <ph id="ph1">`MathClass`</ph>:</source>
          <target state="translated">Estendere la classe ereditata aggiungendo il codice seguente al <ph id="ph1">`MathClass`</ph>:</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrInterop#33<ept id="p2">](../../../visual-basic/programming-guide/com-interop/codesnippet/VisualBasic/walkthrough-implementing-inheritance-with-com-objects_3.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrInterop n.&amp;33;<ept id="p2">](../../../visual-basic/programming-guide/com-interop/codesnippet/VisualBasic/walkthrough-implementing-inheritance-with-com-objects_3.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The new class inherits the properties of the base class in the COM object, overloads a method, and defines a new method to extend the class.</source>
          <target state="translated">La nuova classe eredita le proprietà della classe di base dell'oggetto COM, un metodo di overload e definisce un nuovo metodo per estendere la classe.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>To test the inherited class</source>
          <target state="translated">Per testare la classe ereditata</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Add a button to your startup form, and then double-click it to view its code.</source>
          <target state="translated">Aggiungere un pulsante al form di avvio e quindi fare doppio clic per visualizzare il codice.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>In the button's <ph id="ph1">`Click`</ph> event handler procedure, add the following code to create an instance of <ph id="ph2">`MathClass`</ph> and call the overloaded methods:</source>
          <target state="translated">Il pulsante <ph id="ph1">`Click`</ph> routine del gestore eventi, aggiungere il codice seguente per creare un'istanza di <ph id="ph2">`MathClass`</ph> e chiamare i metodi di overload:</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrInterop#34<ept id="p2">](../../../visual-basic/programming-guide/com-interop/codesnippet/VisualBasic/walkthrough-implementing-inheritance-with-com-objects_4.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrInterop&amp;#34;<ept id="p2">](../../../visual-basic/programming-guide/com-interop/codesnippet/VisualBasic/walkthrough-implementing-inheritance-with-com-objects_4.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Run the project by pressing F5.</source>
          <target state="translated">Eseguire il progetto premendo F5.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>When you click the button on the form, the <ph id="ph1">`AddNumbers`</ph> method is first called with <ph id="ph2">`Short`</ph> data type numbers, and <ph id="ph3">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> chooses the appropriate method from the base class.</source>
          <target state="translated">Quando si fa clic sul pulsante nel form, il <ph id="ph1">`AddNumbers`</ph> prima chiamata al metodo con <ph id="ph2">`Short`</ph> numeri del tipo di dati e <ph id="ph3">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> sceglie il metodo appropriato dalla classe di base.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The second call to <ph id="ph1">`AddNumbers`</ph> is directed to the overload method from <ph id="ph2">`MathClass`</ph>.</source>
          <target state="translated">La seconda chiamata a <ph id="ph1">`AddNumbers`</ph> viene indirizzata al metodo di overload da <ph id="ph2">`MathClass`</ph>.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The third call calls the <ph id="ph1">`SubtractNumbers`</ph> method, which extends the class.</source>
          <target state="translated">La terza chiamata richiama il <ph id="ph1">`SubtractNumbers`</ph> (metodo), che estende la classe.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The property in the base class is set, and the value is displayed.</source>
          <target state="translated">La proprietà nella classe di base è impostata e viene visualizzato il valore.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Next Steps</source>
          <target state="translated">Passaggi successivi</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>You may have noticed that the overloaded <ph id="ph1">`AddNumbers`</ph> function appears to have the same data type as the method inherited from the base class of the COM object.</source>
          <target state="translated">Si è notato che il metodo di overload <ph id="ph1">`AddNumbers`</ph> funzione sembra avere dati dello stesso tipo del metodo ereditato dalla classe di base dell'oggetto COM.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>This is because the arguments and parameters of the base class method are defined as 16-bit integers in Visual Basic 6.0, but they are exposed as 16-bit integers of type <ph id="ph1">`Short`</ph> in later versions of Visual Basic.</source>
          <target state="translated">Questo avviene perché gli argomenti e parametri del metodo della classe base sono definiti come numeri interi a 16 bit in Visual Basic 6.0, ma sono esposti come integer a 16 bit di tipo <ph id="ph1">`Short`</ph> nelle versioni successive di Visual Basic.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The new function accepts 32-bit integers, and overloads the base class function.</source>
          <target state="translated">La nuova funzione accetta valori integer a 32 bit ed esegue l'overload di funzione di classe base.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>When working with COM objects, make sure that you verify the size and data types of parameters.</source>
          <target state="translated">Quando si utilizzano oggetti COM, assicurarsi di verificare le dimensioni e tipi di dati dei parametri.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>For example, when you are using a COM object that accepts a Visual Basic 6.0 collection object as an argument, you cannot provide a collection from a later version of Visual Basic.</source>
          <target state="translated">Ad esempio, quando si utilizza un oggetto COM che accetta un oggetto raccolta di Visual Basic 6.0 come argomento, è possibile fornire un insieme di una versione successiva di Visual Basic.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Properties and methods inherited from COM classes can be overridden, meaning that you can declare a local property or method that replaces a property or method inherited from a base COM class.</source>
          <target state="translated">Possono essere ignorati le proprietà e metodi ereditati dalle classi COM, vale a dire che è possibile dichiarare una proprietà locale o un metodo che sostituisce una proprietà o metodo ereditato da una classe COM.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The rules for overriding inherited COM properties are similar to the rules for overriding other properties and methods with the following exceptions:</source>
          <target state="translated">Le regole per eseguire l'override delle proprietà COM ereditate sono simili alle regole per eseguire l'override di altre proprietà e metodi con le eccezioni seguenti:</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>If you override any property or method inherited from a COM class, you must override all the other inherited properties and methods.</source>
          <target state="translated">Se si esegue l'override di proprietà o metodi ereditati da una classe COM, è necessario sostituire tutte le altre proprietà ereditate e metodi.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Properties that use <ph id="ph1">`ByRef`</ph> parameters cannot be overridden.</source>
          <target state="translated">Le proprietà che utilizzano <ph id="ph1">`ByRef`</ph> parametri non possono essere sottoposto a override.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">Vedere anche</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COM Interoperability in .NET Framework Applications<ept id="p1">](../../../visual-basic/programming-guide/com-interop/com-interoperability-in-net-framework-applications.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Interoperabilità COM nelle applicazioni .NET Framework<ept id="p1">](../../../visual-basic/programming-guide/com-interop/com-interoperability-in-net-framework-applications.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Inherits Statement<ept id="p1">](../../../visual-basic/language-reference/statements/inherits-statement.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Inherits (istruzione)<ept id="p1">](../../../visual-basic/language-reference/statements/inherits-statement.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Short Data Type<ept id="p1">](../../../visual-basic/language-reference/data-types/short-data-type.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>Tipo di dati Short<ept id="p1">](../../../visual-basic/language-reference/data-types/short-data-type.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>