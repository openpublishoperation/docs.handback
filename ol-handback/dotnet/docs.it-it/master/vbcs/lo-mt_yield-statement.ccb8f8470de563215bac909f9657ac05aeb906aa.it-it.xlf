<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">393a9f4de3e801aed5932aef0e2b13d76b003965</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\language-reference\statements\yield-statement.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9aa7f5eca0e90f985f0439498e7f6d92264e691c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">87744186bd82998c784c9cdfc5d0c36f594c7267</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Yield Statement (Visual Basic) | Microsoft Docs</source>
          <target state="translated">Istruzione yield (Visual Basic) | Documenti di Microsoft</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Yield Statement (Visual Basic)</source>
          <target state="translated">Istruzione Yield (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Sends the next element of a collection to a <ph id="ph1">`For Each...Next`</ph> statement.</source>
          <target state="translated">Invia l'elemento successivo di una raccolta a un <ph id="ph1">`For Each...Next`</ph> istruzione.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
          <target state="translated">Sintassi</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
          <target state="translated">Parametri</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Term</source>
          <target state="translated">Termine</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Definition</source>
          <target state="translated">Definizione</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Required.</source>
          <target state="translated">Obbligatorio.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>An expression that is implicitly convertible to the type of the iterator function or <ph id="ph1">`Get`</ph> accessor that contains the <ph id="ph2">`Yield`</ph> statement.</source>
          <target state="translated">Un'espressione che è implicitamente convertibile nel tipo di funzione iteratore o <ph id="ph1">`Get`</ph> funzione di accesso che contiene il <ph id="ph2">`Yield`</ph> istruzione.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Remarks</source>
          <target state="translated">Note</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Yield`</ph> statement returns one element of a collection at a time.</source>
          <target state="translated">Il <ph id="ph1">`Yield`</ph> istruzione restituisce un elemento di una raccolta in una fase.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Yield`</ph> statement is included in an iterator function or <ph id="ph2">`Get`</ph> accessor, which perform custom iterations over a collection.</source>
          <target state="translated">Il <ph id="ph1">`Yield`</ph> istruzione è inclusa in una funzione iteratore o <ph id="ph2">`Get`</ph> funzione di accesso, che consentono di eseguire iterazioni personalizzate su una raccolta.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You consume an iterator function by using a <bpt id="p1">[</bpt>For Each...Next Statement<ept id="p1">](../../../visual-basic/language-reference/statements/for-each-next-statement.md)</ept> or a LINQ query.</source>
          <target state="translated">Si utilizza una funzione iteratore tramite un <bpt id="p1">[</bpt>For Each... Istruzione successiva<ept id="p1">](../../../visual-basic/language-reference/statements/for-each-next-statement.md)</ept> o una query LINQ.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Each iteration of the <ph id="ph1">`For Each`</ph> loop calls the iterator function.</source>
          <target state="translated">Ogni iterazione del <ph id="ph1">`For Each`</ph> ciclo chiama la funzione iteratore.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>When a <ph id="ph1">`Yield`</ph> statement is reached in the iterator function, <ph id="ph2">`expression`</ph> is returned, and the current location in code is retained.</source>
          <target state="translated">Quando un <ph id="ph1">`Yield`</ph> viene raggiunta l'istruzione nella funzione iteratore <ph id="ph2">`expression`</ph> viene restituito, e viene mantenuta la posizione corrente nel codice.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Execution is restarted from that location the next time that the iterator function is called.</source>
          <target state="translated">L'esecuzione viene riavviata a partire da quella posizione la volta successiva che viene chiamata la funzione iteratore.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>An implicit conversion must exist from the type of <ph id="ph1">`expression`</ph> in the <ph id="ph2">`Yield`</ph> statement to the return type of the iterator.</source>
          <target state="translated">Deve esistere una conversione implicita dal tipo di <ph id="ph1">`expression`</ph> nel <ph id="ph2">`Yield`</ph> istruzione per il tipo restituito dell'iteratore.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You can use an <ph id="ph1">`Exit Function`</ph> or <ph id="ph2">`Return`</ph> statement to end the iteration.</source>
          <target state="translated">È possibile utilizzare un <ph id="ph1">`Exit Function`</ph> o <ph id="ph2">`Return`</ph> istruzione per terminare l'iterazione.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>"Yield" is not a reserved word and has special meaning only when it is used in an <ph id="ph1">`Iterator`</ph> function or <ph id="ph2">`Get`</ph> accessor.</source>
          <target state="translated">"Rendimento" non è una parola riservata e ha un significato speciale solo quando viene utilizzato in un <ph id="ph1">`Iterator`</ph> funzione o <ph id="ph2">`Get`</ph> della funzione di accesso.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For more information about iterator functions and <ph id="ph1">`Get`</ph> accessors, see <bpt id="p1">[</bpt>Iterators<ept id="p1">](http://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7)</ept>.</source>
          <target state="translated">Per ulteriori informazioni sulle funzioni di iteratore e <ph id="ph1">`Get`</ph> funzioni di accesso, vedere <bpt id="p1">[</bpt>iteratori<ept id="p1">](http://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7)</ept>.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Iterator Functions and Get Accessors</source>
          <target state="translated">Funzioni di iteratore e funzioni di accesso Get</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The declaration of an iterator function or <ph id="ph1">`Get`</ph> accessor must meet the following requirements:</source>
          <target state="translated">La dichiarazione di una funzione iteratore o <ph id="ph1">`Get`</ph> della funzione di accesso deve soddisfare i requisiti seguenti:</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>It must include an <bpt id="p1">[</bpt>Iterator<ept id="p1">](../../../visual-basic/language-reference/modifiers/iterator.md)</ept> modifier.</source>
          <target state="translated">Deve includere un <bpt id="p1">[</bpt>iteratore<ept id="p1">](../../../visual-basic/language-reference/modifiers/iterator.md)</ept> modificatore.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The return type must be &lt;xref:System.Collections.IEnumerable&gt;, &lt;xref:System.Collections.Generic.IEnumerable%601&gt;, &lt;xref:System.Collections.IEnumerator&gt;, or &lt;xref:System.Collections.Generic.IEnumerator%601&gt;.</source>
          <target state="translated">Il tipo restituito deve essere &lt;xref:System.Collections.IEnumerable&gt;, &lt;xref:System.Collections.Generic.IEnumerable%601&gt;, &lt;xref:System.Collections.IEnumerator&gt;, o &lt;xref:System.Collections.Generic.IEnumerator%601&gt;.&lt;/xref:System.Collections.Generic.IEnumerator%601&gt; &lt;/xref:System.Collections.IEnumerator&gt; &lt;/xref:System.Collections.Generic.IEnumerable%601&gt; &lt;/xref:System.Collections.IEnumerable&gt;</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>It cannot have any <ph id="ph1">`ByRef`</ph> parameters.</source>
          <target state="translated">Non può avere qualsiasi <ph id="ph1">`ByRef`</ph> parametri.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>An iterator function cannot occur in an event, instance constructor, static constructor, or static destructor.</source>
          <target state="translated">Una funzione iteratore non può trovarsi in un evento, costruttore di istanza, un costruttore statico o distruttore statico.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>An iterator function can be an anonymous function.</source>
          <target state="translated">Una funzione iteratore può essere una funzione anonima.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Iterators<ept id="p1">](http://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7)</ept>.</source>
          <target state="translated">Per altre informazioni, vedere <bpt id="p1">[</bpt>Iteratori<ept id="p1">](http://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7)</ept>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Exception Handling</source>
          <target state="translated">Gestione delle eccezioni</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Yield`</ph> statement can be inside a <ph id="ph2">`Try`</ph> block of a <bpt id="p1">[</bpt>Try...Catch...Finally Statement<ept id="p1">](../../../visual-basic/language-reference/statements/try-catch-finally-statement.md)</ept>.</source>
          <target state="translated">Un <ph id="ph1">`Yield`</ph> istruzione può essere contenuta in un <ph id="ph2">`Try`</ph> blocco di un <bpt id="p1">[</bpt>Try... Catch... Istruzione finally<ept id="p1">](../../../visual-basic/language-reference/statements/try-catch-finally-statement.md)</ept>.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Try`</ph> block that has a <ph id="ph2">`Yield`</ph> statement can have <ph id="ph3">`Catch`</ph> blocks, and can have a <ph id="ph4">`Finally`</ph> block.</source>
          <target state="translated">Oggetto <ph id="ph1">`Try`</ph> blocco che ha un <ph id="ph2">`Yield`</ph> istruzione possono essere presenti <ph id="ph3">`Catch`</ph> blocca e può avere un <ph id="ph4">`Finally`</ph> blocco.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Yield`</ph> statement cannot be inside a <ph id="ph2">`Catch`</ph> block or a <ph id="ph3">`Finally`</ph> block.</source>
          <target state="translated">Oggetto <ph id="ph1">`Yield`</ph> istruzione non può essere all'interno di un <ph id="ph2">`Catch`</ph> blocco o un <ph id="ph3">`Finally`</ph> blocco.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`For Each`</ph> body (outside of the iterator function) throws an exception, a <ph id="ph2">`Catch`</ph> block in the iterator function is not executed, but a <ph id="ph3">`Finally`</ph> block in the iterator function is executed.</source>
          <target state="translated">Se il <ph id="ph1">`For Each`</ph> corpo (all'esterno della funzione iteratore) genera un'eccezione, un <ph id="ph2">`Catch`</ph> blocco nella funzione iteratore non viene eseguita, ma un <ph id="ph3">`Finally`</ph> try nella funzione iteratore.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Catch`</ph> block inside an iterator function catches only exceptions that occur inside the iterator function.</source>
          <target state="translated">Oggetto <ph id="ph1">`Catch`</ph> blocco all'interno di una funzione iteratore intercetta solo le eccezioni che si verificano all'interno della funzione iteratore.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Technical Implementation</source>
          <target state="translated">Implementazione tecnica</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The following code returns an <ph id="ph1">`IEnumerable (Of String)`</ph> from an iterator function and then iterates through the elements of the <ph id="ph2">`IEnumerable (Of String)`</ph>.</source>
          <target state="translated">Il codice seguente restituisce un <ph id="ph1">`IEnumerable (Of String)`</ph> da una funzione iteratore e quindi scorre gli elementi del <ph id="ph2">`IEnumerable (Of String)`</ph>.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The call to <ph id="ph1">`MyIteratorFunction`</ph> doesn't execute the body of the function.</source>
          <target state="translated">La chiamata a <ph id="ph1">`MyIteratorFunction`</ph> non esegue il corpo della funzione.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Instead the call returns an <ph id="ph1">`IEnumerable(Of String)`</ph> into the <ph id="ph2">`elements`</ph> variable.</source>
          <target state="translated">La chiamata restituisce invece <ph id="ph1">`IEnumerable(Of String)`</ph> nella variabile <ph id="ph2">`elements`</ph>.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>On an iteration of the <ph id="ph1">`For Each`</ph> loop, the &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; method is called for <ph id="ph2">`elements`</ph>.</source>
          <target state="translated">In un'iterazione del <ph id="ph1">`For Each`</ph> ciclo, il &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;viene chiamato per <ph id="ph2">`elements`</ph>.&lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt;</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This call executes the body of <ph id="ph1">`MyIteratorFunction`</ph> until the next <ph id="ph2">`Yield`</ph> statement is reached.</source>
          <target state="translated">Questa chiamata esegue il corpo di <ph id="ph1">`MyIteratorFunction`</ph> fino a quando non viene raggiunta l'istruzione <ph id="ph2">`Yield`</ph> successiva.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Yield`</ph> statement returns an expression that determines not only the value of the <ph id="ph2">`element`</ph> variable for consumption by the loop body but also the &lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt; property of elements, which is an <ph id="ph3">`IEnumerable (Of String)`</ph>.</source>
          <target state="translated">Il <ph id="ph1">`Yield`</ph> l'istruzione restituisce un'espressione che determina non solo il valore del <ph id="ph2">`element`</ph> variabile per l'utilizzo dal corpo del ciclo, ma anche la &lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;proprietà degli elementi, ovvero un <ph id="ph3">`IEnumerable (Of String)`</ph>.&lt;/xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>On each subsequent iteration of the <ph id="ph1">`For Each`</ph> loop, the execution of the iterator body continues from where it left off, again stopping when it reaches a <ph id="ph2">`Yield`</ph> statement.</source>
          <target state="translated">In ogni iterazione successiva del ciclo <ph id="ph1">`For Each`</ph>, l'esecuzione del corpo dell'iteratore continua da dove è stata interrotta, fermandosi ancora quando raggiunge un'istruzione <ph id="ph2">`Yield`</ph>.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`For Each`</ph> loop completes when the end of the iterator function or a <ph id="ph2">`Return`</ph> or <ph id="ph3">`Exit Function`</ph> statement is reached.</source>
          <target state="translated">Il <ph id="ph1">`For Each`</ph> ciclo viene completato quando la fine della funzione iteratore o un <ph id="ph2">`Return`</ph> o <ph id="ph3">`Exit Function`</ph> viene raggiunta l'istruzione.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Esempio</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The following example has a <ph id="ph1">`Yield`</ph> statement that is inside a <bpt id="p1">[</bpt>For…Next<ept id="p1">](../../../visual-basic/language-reference/statements/for-next-statement.md)</ept> loop.</source>
          <target state="translated">Nell'esempio seguente è presente un <ph id="ph1">`Yield`</ph> istruzione all'interno di un <bpt id="p1">[</bpt>per... Avanti<ept id="p1">](../../../visual-basic/language-reference/statements/for-next-statement.md)</ept> ciclo.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Each iteration of the <bpt id="p1">[</bpt>For Each<ept id="p1">](../../../visual-basic/language-reference/statements/for-each-next-statement.md)</ept> statement body in <ph id="ph1">`Main`</ph> creates a call to the <ph id="ph2">`Power`</ph> iterator function.</source>
          <target state="translated">Ogni iterazione del <bpt id="p1">[</bpt>per ogni<ept id="p1">](../../../visual-basic/language-reference/statements/for-each-next-statement.md)</ept> corpo dell'istruzione in <ph id="ph1">`Main`</ph> crea una chiamata per il <ph id="ph2">`Power`</ph> funzione iteratore.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Each call to the iterator function proceeds to the next execution of the <ph id="ph1">`Yield`</ph> statement, which occurs during the next iteration of the <ph id="ph2">`For…Next`</ph> loop.</source>
          <target state="translated">Ogni chiamata alla funzione iteratore procede fino alla prossima esecuzione dell'istruzione <ph id="ph1">`Yield`</ph>, che si verifica durante l'iterazione successiva del ciclo <ph id="ph2">`For…Next`</ph>.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The return type of the iterator method is &lt;xref:System.Collections.Generic.IEnumerable%601&gt;, an iterator interface type.</source>
          <target state="translated">Il tipo restituito del metodo iteratore è &lt;xref:System.Collections.Generic.IEnumerable%601&gt;, un tipo di interfaccia iteratore.&lt;/xref:System.Collections.Generic.IEnumerable%601&gt;</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>When the iterator method is called, it returns an enumerable object that contains the powers of a number.</source>
          <target state="translated">Quando il metodo iteratore viene chiamato, restituisce un oggetto enumerabile che contiene le potenze di un numero.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#98<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/yield-statement_1.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>&amp;#98; VbVbalrStatements<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/yield-statement_1.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Esempio</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The following example demonstrates a <ph id="ph1">`Get`</ph> accessor that is an iterator.</source>
          <target state="translated">Nell'esempio seguente viene illustrata una funzione di accesso <ph id="ph1">`Get`</ph> che è un iteratore.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The property declaration includes an <ph id="ph1">`Iterator`</ph> modifier.</source>
          <target state="translated">La dichiarazione di proprietà include un <ph id="ph1">`Iterator`</ph> modificatore.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#99<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/yield-statement_2.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements&amp;#99;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/yield-statement_2.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>For additional examples, see <bpt id="p1">[</bpt>Iterators<ept id="p1">](http://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7)</ept>.</source>
          <target state="translated">Per ulteriori esempi, vedere <bpt id="p1">[</bpt>iteratori<ept id="p1">](http://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7)</ept>.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Requirements</source>
          <target state="translated">Requisiti</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">Vedere anche</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Iterators<ept id="p1">](http://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Iteratori<ept id="p1">](http://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Statements<ept id="p1">](../../../visual-basic/language-reference/statements/index.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>Istruzioni<ept id="p1">](../../../visual-basic/language-reference/statements/index.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>