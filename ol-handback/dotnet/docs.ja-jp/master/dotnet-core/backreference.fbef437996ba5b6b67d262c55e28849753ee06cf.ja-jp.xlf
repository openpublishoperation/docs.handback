<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-47f9650" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d6fdf23898cacc7ce569f868b3a31b71eff5c716</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\base-types\backreference.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6628804140049da2a1904cb6c8399e1d5cba1252</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cac0dac93dabde40c1dcb18f3523884b61422107</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Backreference constructs in regular expressions</source>
          <target state="translated">正規表現での前方参照構成体</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Backreference constructs in regular expressions</source>
          <target state="translated">正規表現での前方参照構成体</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Backreference constructs in regular expressions</source>
          <target state="translated">正規表現での前方参照構成体</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Backreferences provide a convenient way to identify a repeated character or substring within a string.</source>
          <target state="translated">前方参照は、文字列内の繰り返しの文字または部分文字列を識別するために便利な方法を提供します。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For example, if the input string contains multiple occurrences of an arbitrary substring, you can match the first occurrence with a capturing group, and then use a backreference to match subsequent occurrences of the substring.</source>
          <target state="translated">たとえば、入力文字列に複数回出現する任意の部分文字列が含まれている場合は、キャプチャ グループを使用して最初の一致を検出し、前方参照を使用して部分文字列の後続の出現箇所を見つけます。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>A separate syntax is used to refer to named and numbered capturing groups in replacement strings.</source>
          <target state="translated">別の構文を使用して、置換文字列内の名前付きおよび番号付きのキャプチャ グループを参照します。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Substitutions in regular expressions<ept id="p1">](substitutions.md)</ept>.</source>
          <target state="translated">詳細については、「<bpt id="p1">[</bpt>正規表現での置換<ept id="p1">](substitutions.md)</ept>」を参照してください。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>.NET defines separate language elements to refer to numbered and named capturing groups.</source>
          <target state="translated">.NET では、番号付きおよび名前付きのキャプチャ グループを参照する個別の言語要素が定義されています。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For more information about capturing groups, see <bpt id="p1">[</bpt>Grouping constructs in regular expressions<ept id="p1">](grouping.md)</ept>.</source>
          <target state="translated">キャプチャ グループの詳細については、「<bpt id="p1">[</bpt>正規表現でのグループ化構成体<ept id="p1">](grouping.md)</ept>」を参照してください。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Numbered Backreferences</source>
          <target state="translated">番号付き前方参照</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A numbered backreference uses the following syntax:</source>
          <target state="translated">番号付き前方参照は、次の構文を使用します。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><ph id="ph1">*</ph><bpt id="p1">*</bpt><ph id="ph2">\*</ph><ept id="p1">*</ept><bpt id="p2">_</bpt>number<ept id="p2">_</ept></source>
          <target state="translated"><ph id="ph1">*</ph><bpt id="p1">*</bpt><ph id="ph2">\*</ph><ept id="p1">*</ept><bpt id="p2">_</bpt>number<ept id="p2">_</ept></target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>where <bpt id="p1">*</bpt>number<ept id="p1">*</ept> is the ordinal position of the capturing group in the regular expression.</source>
          <target state="translated">ここで、<bpt id="p1">*</bpt>number<ept id="p1">*</ept> は、正規表現でのキャプチャ グループの位置を表す序数です。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`\4`</ph> matches the contents of the fourth capturing group.</source>
          <target state="translated">たとえば、<ph id="ph1">`\4`</ph> は&amp;4; 番目のキャプチャ グループの内容と一致します。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">*</bpt>number<ept id="p1">*</ept> is not defined in the regular expression pattern, a parsing error occurs, and the regular expression engine throws an <bpt id="p2">[</bpt>ArgumentException<ept id="p2">](xref:System.ArgumentException)</ept>.</source>
          <target state="translated"><bpt id="p1">*</bpt>number<ept id="p1">*</ept> が正規表現パターンで定義されていない場合は、解析エラーが発生し、正規表現エンジンが <bpt id="p2">[</bpt>ArgumentException<ept id="p2">](xref:System.ArgumentException)</ept> をスローします。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For example, the regular expression <ph id="ph1">`\b(\w+)\s\1`</ph> is valid, because <ph id="ph2">`(\w+)`</ph> is the first and only capturing group in the expression.</source>
          <target state="translated">たとえば、正規表現 <ph id="ph1">`\b(\w+)\s\1`</ph> は有効です (<ph id="ph2">`(\w+)`</ph> が式の中の最初で唯一のキャプチャ グループであるため)。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>On the other hand, <ph id="ph1">`\b(\w+)\s\2`</ph> is invalid and throws an argument exception, because there is no capturing group numbered <ph id="ph2">`\2`</ph>.</source>
          <target state="translated">これに対して、<ph id="ph1">`\b(\w+)\s\2`</ph> は無効であり、引数の例外がスローされます (<ph id="ph2">`\2`</ph> という番号のキャプチャ グループは存在しないため)。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Note the ambiguity between octal escape codes (such as <ph id="ph1">`\16`</ph>) and *<bpt id="p1">*</bpt><ph id="ph2">\*</ph><ept id="p1">*</ept><bpt id="p2">_</bpt>number<ept id="p2">_</ept> backreferences that use the same notation.</source>
          <target state="translated">同じ表記法を使用した、8 進数のエスケープ コード (<ph id="ph1">`\16`</ph> など) と *<bpt id="p1">*</bpt><ph id="ph2">\*</ph><ept id="p1">*</ept><bpt id="p2">_</bpt>number<ept id="p2">_</ept> 前方参照との間には、あいまいさがあることに注意してください。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This ambiguity is resolved as follows:</source>
          <target state="translated">このあいまいさは、次のように解決されます。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The expressions <ph id="ph1">`\1`</ph> through <ph id="ph2">`\9`</ph> are always interpreted as backreferences, and not as octal codes.</source>
          <target state="translated"><ph id="ph1">`\1`</ph> から <ph id="ph2">`\9`</ph> までの式は、8 進数コードとしてではなく、常に前方参照として解釈されます。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If the first digit of a multidigit expression is 8 or 9 (such as <ph id="ph1">`\80`</ph> or <ph id="ph2">`\91`</ph>), the expression as interpreted as a literal.</source>
          <target state="translated">複数桁の式の最初の桁が 8 または 9 (<ph id="ph1">`\80`</ph>や <ph id="ph2">`\91`</ph>) の場合、式はリテラルとして解釈されます。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Expressions from <ph id="ph1">`\10`</ph> and greater are considered backreferences if there is a backreference corresponding to that number; otherwise, they are interpreted as octal codes.</source>
          <target state="translated"><ph id="ph1">`\10`</ph> 以降の式は、その番号に対応する前方参照がある場合、前方参照として解釈されます。それ以外の場合は、8 進数のコードとして解釈されます。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If a regular expression contains a backreference to an undefined group number, a parsing error occurs, and the regular expression engine throws an <bpt id="p1">[</bpt>ArgumentException<ept id="p1">](xref:System.ArgumentException)</ept>.</source>
          <target state="translated">正規表現に未定義のグループ番号への前方参照が含まれる場合、解析エラーが発生し、正規表現エンジンが <bpt id="p1">[</bpt>ArgumentException<ept id="p1">](xref:System.ArgumentException)</ept> をスローします。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If the ambiguity is a problem, you can use the <bpt id="p1">**</bpt>\k&lt;<ept id="p1">**</ept><bpt id="p2">_</bpt>name<ept id="p2">_</ept><bpt id="p3">**</bpt><ph id="ph1">&gt;</ph><ept id="p3">**</ept> notation, which is unambiguous and cannot be confused with octal character codes.</source>
          <target state="translated">あいまいさが問題になる場合は、<bpt id="p1">**</bpt>\k&lt;<ept id="p1">**</ept><bpt id="p2">_</bpt>name<ept id="p2">_</ept><bpt id="p3">**</bpt><ph id="ph1">&gt;</ph><ept id="p3">**</ept> という表記を使用できます。この表記はあいまいではなく、8 進数の文字コードと混同することはありません。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Similarly, hexadecimal codes such as <ph id="ph1">`\xdd`</ph> are unambiguous and cannot be confused with backreferences.</source>
          <target state="translated">同様に、<ph id="ph1">`\xdd`</ph> などの&amp;16; 進数コードはあいまいではなく、前方参照と混同することはありません。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The following example finds doubled word characters in a string.</source>
          <target state="translated">次の例では、文字列内の単語に使用される重複した文字を検索します。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>It defines a regular expression, <ph id="ph1">`(\w)\1,`</ph> which consists of the following elements.</source>
          <target state="translated">例で定義している正規表現 <ph id="ph1">`(\w)\1,`</ph> は、次の要素で構成されています。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Element</source>
          <target state="translated">要素</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">説明</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Match a word character and assign it to the first capturing group.</source>
          <target state="translated">単語文字を検出し、最初のキャプチャ グループに割り当てます。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Match the next character that is the same as the value of the first capturing group.</source>
          <target state="translated">最初のキャプチャ グループの値と同じ次の文字を検出します。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Named Backreferences</source>
          <target state="translated">名前付き前方参照</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>A named backreference is defined by using the following syntax:</source>
          <target state="translated">名前付き前方参照は、次の構文を使用して定義します。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>\k&lt;<ept id="p1">**</ept><bpt id="p2">_</bpt>name<ept id="p2">_</ept><bpt id="p3">**</bpt><ph id="ph1">&gt;</ph><ept id="p3">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>\k&lt;<ept id="p1">**</ept><bpt id="p2">_</bpt>name<ept id="p2">_</ept><bpt id="p3">**</bpt><ph id="ph1">&gt;</ph><ept id="p3">**</ept></target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>or:</source>
          <target state="translated">または</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>\k'<ept id="p1">**</ept><bpt id="p2">_</bpt>name<ept id="p2">_</ept><bpt id="p3">**</bpt>'<ept id="p3">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>\k'<ept id="p1">**</ept><bpt id="p2">_</bpt>name<ept id="p2">_</ept><bpt id="p3">**</bpt>'<ept id="p3">**</ept></target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>where <bpt id="p1">*</bpt>name<ept id="p1">*</ept> is the name of a capturing group defined in the regular expression pattern.</source>
          <target state="translated">ここで、<bpt id="p1">*</bpt>name<ept id="p1">*</ept> は正規表現パターンで定義されたキャプチャ グループの名前です。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">*</bpt>name<ept id="p1">*</ept> is not defined in the regular expression pattern, a parsing error occurs, and the regular expression engine throws an <bpt id="p2">[</bpt>ArgumentException<ept id="p2">](xref:System.ArgumentException)</ept>.</source>
          <target state="translated"><bpt id="p1">*</bpt>name<ept id="p1">*</ept> が正規表現パターンで定義されていない場合は、解析エラーが発生し、正規表現エンジンが <bpt id="p2">[</bpt>ArgumentException<ept id="p2">](xref:System.ArgumentException)</ept> をスローします。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The following example finds doubled word characters in a string.</source>
          <target state="translated">次の例では、文字列内の単語に使用される重複した文字を検索します。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>It defines a regular expression, <ph id="ph1">`(?&lt;char&gt;\w)\k&lt;char&gt;`</ph>, which consists of the following elements.</source>
          <target state="translated">例で定義している正規表現 <ph id="ph1">`(?&lt;char&gt;\w)\k&lt;char&gt;`</ph> は、次の要素で構成されています。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Element</source>
          <target state="translated">要素</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">説明</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Match a word character and assign it to a capturing group named char.</source>
          <target state="translated">単語文字を検出し、char という名前のキャプチャ グループに割り当てます。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Match the next character that is the same as the value of the char capturing group.</source>
          <target state="translated">char キャプチャ グループの値と同じ次の文字を検出します。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Note that <bpt id="p1">*</bpt>name<ept id="p1">*</ept> can also be the string representation of a number.</source>
          <target state="translated"><bpt id="p1">*</bpt>name<ept id="p1">*</ept> は数字の文字列表現とすることもできます。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For example, the following example uses the regular expression <ph id="ph1">`(?&lt;2&gt;\w)\k&lt;2&gt;`</ph> to find doubled word characters in a string.</source>
          <target state="translated">たとえば、次の例では正規表現 <ph id="ph1">`(?&lt;2&gt;\w)\k&lt;2&gt;`</ph> を使用して、文字列内の単語の重複した文字を検索します。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>What Backreferences Match</source>
          <target state="translated">前方参照と一致する内容</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>A backreference refers to the most recent definition of a group (the definition most immediately to the left, when matching left to right).</source>
          <target state="translated">前方参照は、グループの最新の定義 (左から右に検出する場合は、すぐ左にある定義) を参照します。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>When a group makes multiple captures, a backreference refers to the most recent capture.</source>
          <target state="translated">1 つのグループで複数のキャプチャが発生した場合、前方参照は最新のキャプチャを参照します。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The following example includes a regular expression pattern, <ph id="ph1">`(?&lt;1&gt;a)(?&lt;1&gt;\1b)*`</ph>, which redefines the \1 named group.</source>
          <target state="translated">次の例には、正規表現パターン <ph id="ph1">`(?&lt;1&gt;a)(?&lt;1&gt;\1b)*`</ph> が含まれています。このパターンは \1 の名前付きグループを再定義します。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The following table describes each pattern in the regular expression.</source>
          <target state="translated">正規表現の各パターンは、次の表に示すように定義されています。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">パターン</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">説明</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Match the character "a" and assign the result to the capturing group named 1.</source>
          <target state="translated">文字 "a" を検出し、結果を 1 という名前のキャプチャ グループに割り当てます。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Match 0 or 1 occurrence of the group named 1 along with a "b", and assign the result to the capturing group named 1.</source>
          <target state="translated">1 という名前のグループの 0 個または 1 個の出現箇所を "b" と共に検出し、結果を 1 という名前のキャプチャ グループに割り当てます。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>In comparing the regular expression with the input string ("aababb"), the regular expression engine performs the following operations:</source>
          <target state="translated">正規表現を入力文字列 ("aababb") と比較する際、正規表現エンジンは次の操作を実行します。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>It starts at the beginning of the string, and successfully matches "a" with the expression <ph id="ph1">`(?&lt;1&gt;a)`</ph>.</source>
          <target state="translated">文字列の先頭から開始し、式 <ph id="ph1">`(?&lt;1&gt;a)`</ph> で "a" を検出します。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The value of the 1 group is now "a".</source>
          <target state="translated">グループ 1 の値が "a" になります。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>It advances to the second character, and successfully matches the string "ab" with the expression <ph id="ph1">`\1b`</ph>, or "ab".</source>
          <target state="translated">次の文字に進み、式 <ph id="ph1">`\1b`</ph> で文字列 "ab" を検出します。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>It then assigns the result, "ab" to <ph id="ph1">`\1`</ph>.</source>
          <target state="translated">次に、その結果 "ab" を <ph id="ph1">`\1`</ph> に割り当てます。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>It advances to the fourth character.</source>
          <target state="translated">これにより&amp;4; 番目の文字に進みます。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The expression <ph id="ph1">`(?&lt;1&gt;\1b)`</ph> is to be matched zero or more times, so it successfully matches the string "abb" with the expression <ph id="ph2">`\1b`</ph>.</source>
          <target state="translated">式 <ph id="ph1">`(?&lt;1&gt;\1b)`</ph> を&amp;0; 回以上照合し、式 <ph id="ph2">`\1b`</ph> で文字列 "abb" を検出します。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>It assigns the result, "abb", back to <ph id="ph1">`\1`</ph>.</source>
          <target state="translated">その結果 "abb" を <ph id="ph1">`\1`</ph> に割り当てます。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>In this example, <ph id="ph1">\*</ph> is a looping quantifier -- it is evaluated repeatedly until the regular expression engine cannot match the pattern it defines.</source>
          <target state="translated">この例では、<ph id="ph1">\*</ph> はループ量指定子であり、正規表現エンジンが定義したパターンを照合できなくなるまで、繰り返し評価されます。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Looping quantifiers do not clear group definitions.</source>
          <target state="translated">ループ量指定子によってグループの定義はクリアされません。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>If a group has not captured any substrings, a backreference to that group is undefined and never matches.</source>
          <target state="translated">グループで部分文字列がキャプチャされなかった場合、そのグループへの前方参照は未定義になり、一致することはありません。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>This is illustrated by the regular expression pattern <ph id="ph1">`\b(\p{Lu}{2})(\d{2})?(\p{Lu}{2})\b,`</ph> which is defined as follows:</source>
          <target state="translated">次のように定義されている正規表現パターン <ph id="ph1">`\b(\p{Lu}{2})(\d{2})?(\p{Lu}{2})\b,`</ph> を例として示します。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">パターン</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">説明</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Begin the match on a word boundary.</source>
          <target state="translated">ワード境界から照合を開始します。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Match two uppercase letters.</source>
          <target state="translated">2 つの大文字と一致します。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>This is the first capturing group.</source>
          <target state="translated">これが最初のキャプチャ グループです。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Match zero or one occurrence of two decimal digits.</source>
          <target state="translated">2 桁の&amp;10; 進数の&amp;0; 回または&amp;1; 回の出現と一致します。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>This is the second capturing group.</source>
          <target state="translated">これが&amp;2; 番目のキャプチャ グループです。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Match two uppercase letters.</source>
          <target state="translated">2 つの大文字と一致します。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>This is the third capturing group.</source>
          <target state="translated">これが&amp;3; 番目のキャプチャ グループです。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>End the match on a word boundary.</source>
          <target state="translated">ワード境界で照合を終了します。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>An input string can match this regular expression even if the two decimal digits that are defined by the second capturing group are not present.</source>
          <target state="translated">2 番目のキャプチャ グループによって定義されている&amp;2; 桁の&amp;10; 進数が存在しない場合でも、入力文字列はこの正規表現を照合できます。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The following example shows that even though the match is successful, an empty capturing group is found between two successful capturing groups.</source>
          <target state="translated">次の例では、一致が見つかった場合でも、成功した&amp;2; つのキャプチャ グループの間に空のキャプチャ グループが検出されます。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">関連項目</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Regular expression language - quick reference<ept id="p1">](quick-ref.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>正規表現言語 - クイック リファレンス<ept id="p1">](quick-ref.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>