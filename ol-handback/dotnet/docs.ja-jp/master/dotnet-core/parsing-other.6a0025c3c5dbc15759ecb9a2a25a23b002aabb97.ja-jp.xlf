<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-47f9650" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">db80cc5f37e814f224ff76b14a906bb4d41064fb</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\base-types\parsing-other.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3cd429d222cddf9e62a8858f819beed957527bee</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1405ab0e971bc580ee83d984b30d55200641d5f1</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Parsing other strings in .NET</source>
          <target state="translated">.NET でのその他の文字列の解析</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Parsing other strings in .NET</source>
          <target state="translated">.NET でのその他の文字列の解析</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Parsing other strings in .NET</source>
          <target state="translated">.NET でのその他の文字列の解析</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In addition to numeric and <bpt id="p1">[</bpt>DateTime<ept id="p1">](xref:System.DateTime)</ept> strings, you can also parse strings that represent the types <bpt id="p2">[</bpt>Char<ept id="p2">](xref:System.Char)</ept>, <bpt id="p3">[</bpt>Boolean<ept id="p3">](xref:System.Boolean)</ept>, and <bpt id="p4">[</bpt>Enum<ept id="p4">](xref:System.Enum)</ept> into data types.</source>
          <target state="translated">数値および <bpt id="p1">[</bpt>DateTime<ept id="p1">](xref:System.DateTime)</ept> 文字列だけでなく、<bpt id="p2">[</bpt>Char<ept id="p2">](xref:System.Char)</ept>、<bpt id="p3">[</bpt>Boolean<ept id="p3">](xref:System.Boolean)</ept>、および <bpt id="p4">[</bpt>Enum<ept id="p4">](xref:System.Enum)</ept> 型を表す文字列をデータ型に解析することもできます。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Char</source>
          <target state="translated">Char</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The static parse method associated with the <bpt id="p1">[</bpt>Char<ept id="p1">](xref:System.Char)</ept> data type is useful for converting a string that contains a single character into its Unicode value.</source>
          <target state="translated"><bpt id="p1">[</bpt>Char<ept id="p1">](xref:System.Char)</ept> データ型に関連付けられている静的解析メソッドは、1 つの文字を含む文字列をUnicode 値に変換するのに便利です。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The following code example parses a string into a Unicode character.</source>
          <target state="translated">次のコードの例では、文字列を Unicode 文字に解析します。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Boolean</source>
          <target state="translated">ブール型</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Boolean<ept id="p1">](xref:System.Boolean)</ept> data type contains a <bpt id="p2">[</bpt>Parse<ept id="p2">](xref:System.Boolean.Parse(System.String))</ept> method that you can use to convert a string that represents a <ph id="ph1">`Boolean`</ph> value into an actual <ph id="ph2">`Boolean`</ph> type.</source>
          <target state="translated"><bpt id="p1">[</bpt>Boolean<ept id="p1">](xref:System.Boolean)</ept> データ型には、<bpt id="p2">[</bpt>Parse<ept id="p2">](xref:System.Boolean.Parse(System.String))</ept> メソッドが含まれ、<ph id="ph1">`Boolean`</ph> 値を示す文字列を実際の <ph id="ph2">`Boolean`</ph> 型に変換するために使用できます。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This method is not case-sensitive and can successfully parse a string containing "True" or "False."</source>
          <target state="translated">このメソッドは大文字と小文字を区別しません。また、"True" または "False" を含む文字列を正常に解析することができます。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Parse`</ph> method associated with the <ph id="ph2">`Boolean`</ph> type can also parse strings that are surrounded by white spaces.</source>
          <target state="translated"><ph id="ph2">`Boolean`</ph> 型に関連付けられる <ph id="ph1">`Parse`</ph> メソッドは、空白で囲まれた文字列を解析することもできます。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If any other string is passed, a <bpt id="p1">[</bpt>FormatException<ept id="p1">](xref:System.FormatException)</ept> is thrown.</source>
          <target state="translated">その他の文字列が渡された場合、<bpt id="p1">[</bpt>FormatException<ept id="p1">](xref:System.FormatException)</ept> がスローされます。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The following code example uses the <ph id="ph1">`Parse`</ph> method to convert a string into a <ph id="ph2">`Boolean`</ph> value.</source>
          <target state="translated">次のコードの例では、<ph id="ph1">`Parse`</ph> メソッドを使用して、文字列を <ph id="ph2">`Boolean`</ph> 値に変換します。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Enumeration</source>
          <target state="translated">列挙</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You can use the static <bpt id="p1">[</bpt>Parse<ept id="p1">](xref:System.Enum.Parse(System.Type,System.String))</ept> method to initialize an enumeration type to the value of a string.</source>
          <target state="translated">静的 <bpt id="p1">[</bpt>Parse<ept id="p1">](xref:System.Enum.Parse(System.Type,System.String))</ept> メソッドを使用して、列挙型を文字列の値に初期化できます。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This method accepts the enumeration type you are parsing, the string to parse, and an optional <ph id="ph1">`Boolean`</ph> flag indicating whether or not the parse is case-sensitive.</source>
          <target state="translated">このメソッドでは、解析している列挙型、解析する文字列、および解析が大文字小文字を区別するかどうかを示す省略可能な <ph id="ph1">`Boolean`</ph> フラグを受け入れます。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The string you are parsing can contain several values separated by commas, which can be preceded or followed by one or more empty spaces (also called white spaces).</source>
          <target state="translated">解析している文字列は、コンマで区切られた複数の値を含めることができます。これは、1 つ以上の空の領域 (空白とも呼ばれます) が前後にある場合があります。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>When the string contains multiple values, the value of the returned object is the value of all specified values combined with a bitwise OR operation.</source>
          <target state="translated">文字列に複数の値がある場合、返されたオブジェクトの値は、ビット演算 OR 演算と組み合わされたすべての指定された値の値です。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The following example uses the <ph id="ph1">`Parse`</ph> method to convert a string representation into an enumeration value.</source>
          <target state="translated">次の例では、<ph id="ph1">`Parse`</ph> メソッドを使用して、文字列形式を列挙値に変換します。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>DayOfWeek<ept id="p1">](xref:System.DayOfWeek)</ept> enumeration is initialized to Thursday from a string.</source>
          <target state="translated"><bpt id="p1">[</bpt>DayOfWeek<ept id="p1">](xref:System.DayOfWeek)</ept> 列挙体は、文字列から Thursday に初期化されます。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">関連項目</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Parsing strings in .NET<ept id="p1">](parsing-strings.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>.NET での文字列の解析<ept id="p1">](parsing-strings.md)</ept></target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Formatting types in .NET<ept id="p1">](formatting-types.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>.NET での型の書式設定<ept id="p1">](formatting-types.md)</ept></target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Type conversion in .NET<ept id="p1">](type-conversion.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>.NET での型変換<ept id="p1">](type-conversion.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>