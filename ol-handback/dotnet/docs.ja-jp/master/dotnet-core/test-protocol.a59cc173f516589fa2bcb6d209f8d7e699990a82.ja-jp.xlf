<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-f0362aa" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">83555650a5a3ce9ed28d329aa82f5ead75e2d9cb</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\tools\test-protocol.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e618b25e49aa9cb637676c5386d24f07f432c88f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a314c30f40aa822195fbc4b01331f6093852380c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>.NET Core CLI test communication protocol | Microsoft Docs</source>
          <target state="translated">.NET Core CLI テスト通信プロトコル | Microsoft Docs</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>.NET Core CLI test communication protocol</source>
          <target state="translated">.NET Core CLI テスト通信プロトコル</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>.NET Core CLI test communication protocol</source>
          <target state="translated">.NET Core CLI テスト通信プロトコル</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This topic applies to .NET Core Tools Preview 2.</source>
          <target state="translated">このトピックは .NET Core Tools Preview 2 を対象としています。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For the .NET Core Tools RC4 documentation, see the <bpt id="p1">[</bpt>.NET Core command-line interface tools (.NET Core Tools RC4)<ept id="p1">](../preview3/tools/index.md)</ept> section.</source>
          <target state="translated">.NET Core Tools RC4 ドキュメントについては、「<bpt id="p1">[</bpt>.NET Core コマンドライン インターフェイス ツール (.NET Core Tools RC4)<ept id="p1">](../preview3/tools/index.md)</ept>」セクションを参照してください。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Introduction</source>
          <target state="translated">はじめに</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Anytime you pass a port to dotnet test, the command will run in design time.</source>
          <target state="translated">dotnet テストにポートを渡すときはいつでも、デザイン時、このコマンドが実行されます。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>That means that <ph id="ph1">`dotnet test`</ph> will connect to that port using TCP and will then exchange an established set of messages with whatever else is connected to that port.</source>
          <target state="translated">つまり、<ph id="ph1">`dotnet test`</ph> は TCP を利用してそのポートに接続し、そのポートに接続されている要素と確立済みの一連のメッセージを交換します。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>When this happens, the runner also receives a new port that <ph id="ph1">`dotnet test`</ph> will use to communicate with it.</source>
          <target state="translated">これが行われるとき、ランナーも、<ph id="ph1">`dotnet test`</ph> がそれとの通信に使用する新しいポートを受け取ります。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The reason why the runner also uses TCP to communicate with <ph id="ph1">`dotnet test`</ph> is because in design mode, it is not sufficient to just output results to the console.</source>
          <target state="translated">ランナーも TCP を利用して <ph id="ph1">`dotnet test`</ph> と通信する理由は、デザイン モードでは、コンソールに結果を出力するだけでは十分ではないためです。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The command needs to send the adapter structure messages containing the results of the test execution.</source>
          <target state="translated">このコマンドは、テスト実行の結果を含むアダプター構造メッセージを送信する必要があります。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Communication protocol at design time.</source>
          <target state="translated">デザイン時の通信プロトコル。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Because during design time, <ph id="ph1">`dotnet test`</ph> connects to a port when it starts up, the adapter needs to be listening on that port otherwise <ph id="ph2">`dotnet test`</ph> will fail.</source>
          <target state="translated">デザイン時に、<ph id="ph1">`dotnet test`</ph> は起動するとポートに接続するため、アダプターはそのポートでリッスンする必要があります。そうでない場合、<ph id="ph2">`dotnet test`</ph> は失敗します。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>We did it like this so that the adapter could reserve all the ports it needs by binding and listening to them before <ph id="ph1">`dotnet test`</ph> ran and tried to get ports for the runner.</source>
          <target state="translated">アダプターが必要なすべてのポートを予約できるように、そのような措置を行いました。<ph id="ph1">`dotnet test`</ph> が実行され、ランナーのポートを取得しようとする前に、アダプターは必要なすべてのポートをバインドし、リッスンします。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Once <ph id="ph1">`dotnet test`</ph> starts, it sends a TestSession.Connected message to the adapter indicating that it is ready to receive messages.</source>
          <target state="translated"><ph id="ph1">`dotnet test`</ph> が開始されると、TestSession.Connected メッセージをアダプターに送信し、メッセージの受信準備ができていることを示します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>It is possible to send an optional <bpt id="p1">[</bpt>version check<ept id="p1">](https://github.com/dotnet/cli/blob/rel/1.0.0-preview2/src/Microsoft.Extensions.Testing.Abstractions/Messages/ProtocolVersionMessage.cs)</ept> message with the adapter version of the protocol in it.</source>
          <target state="translated">プロトコルのアダプター バージョンを含む任意の<bpt id="p1">[</bpt>バージョン チェック<ept id="p1">](https://github.com/dotnet/cli/blob/rel/1.0.0-preview2/src/Microsoft.Extensions.Testing.Abstractions/Messages/ProtocolVersionMessage.cs)</ept> メッセージを送信できます。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`dotnet test`</ph> will send back the version of the protocol that it supports.</source>
          <target state="translated"><ph id="ph1">`dotnet test`</ph> は、それがサポートするプロトコルのバージョンを返します。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>All messages have the format described here: <bpt id="p1">[</bpt>Message.cs<ept id="p1">](https://github.com/dotnet/cli/blob/rel/1.0.0-preview2/src/Microsoft.Extensions.Testing.Abstractions/Messages/Message.cs)</ept>.</source>
          <target state="translated">すべてのメッセージにここで説明する形式が与えられます: <bpt id="p1">[</bpt>Message.cs<ept id="p1">](https://github.com/dotnet/cli/blob/rel/1.0.0-preview2/src/Microsoft.Extensions.Testing.Abstractions/Messages/Message.cs)</ept>。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The payload formats for each message is described in links to the classes used to serialize/deserialize the information in the description of the protocol.</source>
          <target state="translated">各メッセージのペイロード形式は、プロトコルの説明の情報をシリアル化/逆シリアル化するためのクラスのリンクで説明されます。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Test Execution</source>
          <target state="translated">テストの実行</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Test Execution</source>
          <target state="translated">テストの実行</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>After the optional version check, the adapter sends a TestExecution.GetTestRunnerProcessStartInfo, with the <bpt id="p1">[</bpt>tests<ept id="p1">](https://github.com/dotnet/cli/blob/rel/1.0.0-preview2/src/Microsoft.Extensions.Testing.Abstractions/Messages/RunTestsMessage.cs)</ept> it wants to execute inside of it.</source>
          <target state="translated">任意のバージョン チェック後、アダプターは TestExecution.GetTestRunnerProcessStartInfo を送信します。その中で実行する<bpt id="p1">[</bpt>テスト<ept id="p1">](https://github.com/dotnet/cli/blob/rel/1.0.0-preview2/src/Microsoft.Extensions.Testing.Abstractions/Messages/RunTestsMessage.cs)</ept>が含まれます。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`dotnet test`</ph> sends back a FileName and Arguments inside a <bpt id="p1">[</bpt>TestStartInfo<ept id="p1">](https://github.com/dotnet/cli/blob/rel/1.0.0-preview2/src/dotnet/commands/dotnet-test/TestStartInfo.cs)</ept> payload that the adapter can use to start the runner.</source>
          <target state="translated"><ph id="ph1">`dotnet test`</ph> は <bpt id="p1">[</bpt>TestStartInfo<ept id="p1">](https://github.com/dotnet/cli/blob/rel/1.0.0-preview2/src/dotnet/commands/dotnet-test/TestStartInfo.cs)</ept> ペイロード内で FileName と Arguments を返します。アダプターはこれを利用し、ランナーを開始できます。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In the past, we would send the list of tests to run as part of that argument, but we were actually going over the command line size limit for some test projects.</source>
          <target state="translated">以前は、この引数の一部として実行するテストの一覧を送信していました。しかしながら、実際は、一部のテスト プロジェクトでは、コマンド ラインのサイズ上限を超えていました。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>As part of the arguments, we send a port that the runner should connect to and for executing tests, a --wait-command flag, that indicates that the runner should connect to the port and wait for commands, instead of going ahead and executing the tests.</source>
          <target state="translated">引数の一部として、ランナーが接続するべきポートを送信し、テストを実行するために、--wait-command フラグを送信します。このフラグは、ランナーはポートに接続したら先に進んでテストを実行する代わりにコマンドを待つことを指示します。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>At this point, the adapter can launch the runner (and attach to it for debugging if it chooses to).</source>
          <target state="translated">この時点で、アダプターはランナーを起動できます (選択した場合、ランナーに接続し、デバッグします)。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Once the runner starts, it sends <ph id="ph1">`dotnet test`</ph> a TestRunner.WaitCommand message that indicates it is ready to receive commands, at which point <ph id="ph2">`dotnet test`</ph> sends a TestRunner.Execute with the list of <bpt id="p1">[</bpt>tests<ept id="p1">](https://github.com/dotnet/cli/blob/rel/1.0.0-preview2/src/Microsoft.Extensions.Testing.Abstractions/Messages/RunTestsMessage.cs)</ept> to run.</source>
          <target state="translated">ランナーが起動すると、<ph id="ph1">`dotnet test`</ph>に TestRunner.WaitCommand メッセージを送信し、コマンドの受信準備ができていることを示します。その時点で、<ph id="ph2">`dotnet test`</ph>は TestRunner.Execute と実行する<bpt id="p1">[</bpt>テスト<ept id="p1">](https://github.com/dotnet/cli/blob/rel/1.0.0-preview2/src/Microsoft.Extensions.Testing.Abstractions/Messages/RunTestsMessage.cs)</ept>の一覧を送信します。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>This bypasses the command line size limit described above.</source>
          <target state="translated">これは前述のコマンド ラインのサイズ上限を無視します。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The runner then sends <ph id="ph1">`dotnet test`</ph> (and it passes forward to the adapter) a TestExecution.TestStarted for each tests as they start with the <bpt id="p1">[</bpt>test<ept id="p1">](https://github.com/dotnet/cli/blob/rel/1.0.0-preview2/src/Microsoft.Extensions.Testing.Abstractions/Test.cs)</ept> information inside of it.</source>
          <target state="translated">次にランナーは <ph id="ph1">`dotnet test`</ph> に各テストの TestExecution.TestStarted を送信します (その後、アダプターに転送されます)。各テストはその中の<bpt id="p1">[</bpt>テスト<ept id="p1">](https://github.com/dotnet/cli/blob/rel/1.0.0-preview2/src/Microsoft.Extensions.Testing.Abstractions/Test.cs)</ept>情報で開始します。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The runner also sends <ph id="ph1">`dotnet test`</ph> (and it forwards to the adapter) a TestExecution.TestResult for each test with the <bpt id="p1">[</bpt>individual result<ept id="p1">](https://github.com/dotnet/cli/blob/rel/1.0.0-preview2/src/Microsoft.Extensions.Testing.Abstractions/TestResult.cs)</ept> of the test.</source>
          <target state="translated">ランナーはまた、<ph id="ph1">`dotnet test`</ph> に各テストの TestExecution.TestResult を送信します (その後、アダプターに転送されます)。これにはテストの<bpt id="p1">[</bpt>個別結果<ept id="p1">](https://github.com/dotnet/cli/blob/rel/1.0.0-preview2/src/Microsoft.Extensions.Testing.Abstractions/TestResult.cs)</ept>が含まれます。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>After all tests finish, the runner sends a TestRunner.Completed message to dotnet test, which <ph id="ph1">`dotnet test`</ph> sends as TestExecution.Completed to the adapter.</source>
          <target state="translated">すべてのテストが完了すると、ランナーは TestRunner.Completed メッセージを dotnet テストに送信します。これを <ph id="ph1">`dotnet test`</ph> は TestExecution.Completed としてアダプターに送信します。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Once the adapter is done, it sends <ph id="ph1">`dotnet test`</ph> a TestSession.Terminate which will cause <ph id="ph2">`dotnet test`</ph> to shutdown.</source>
          <target state="translated">アダプターが完了すると、<ph id="ph1">`dotnet test`</ph> に TestSession.Terminate を送信します。これで <ph id="ph2">`dotnet test`</ph> はシャットダウンします。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Test discovery</source>
          <target state="translated">テスト探索</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Test discovery</source>
          <target state="translated">テスト探索</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>After the optional version check, the adapter sends a TestDiscovery.Start message.</source>
          <target state="translated">任意のバージョン チェック後、アダプターは TestDiscovery.Start メッセージを送信します。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Because in this case, the adapter does not need to attach to the process, <ph id="ph1">`dotnet test`</ph> will start the runner itself.</source>
          <target state="translated">この場合、アダプターはプロセスに接続する必要がないため、<ph id="ph1">`dotnet test`</ph> はランナー自体を起動しません。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Also, since there is no long list of arguments to be passed to the runner, no --wait-command flag is needed to be passed to the runner.</source>
          <target state="translated">また、ランナーに渡す引数の長い一覧がないため、--wait-command フラグをランナーに渡す必要がありません。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`dotnet test`</ph> only passes a --list argument to the runner, which means the runner should not run the tests, just list them.</source>
          <target state="translated"><ph id="ph1">`dotnet test`</ph> は --list 引数のみをランナーに渡します。つまり、ランナーはテストを実行する必要がなく、一覧表示するだけです。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The runner then sends <ph id="ph1">`dotnet test`</ph> (and it passes forward to the adapter) a TestDiscovery.TestFound for each <bpt id="p1">[</bpt>test<ept id="p1">](https://github.com/dotnet/cli/blob/rel/1.0.0-preview2/src/Microsoft.Extensions.Testing.Abstractions/Test.cs)</ept> found.</source>
          <target state="translated">次にランナーは <ph id="ph1">`dotnet test`</ph> に、見つかった<bpt id="p1">[</bpt>テスト<ept id="p1">](https://github.com/dotnet/cli/blob/rel/1.0.0-preview2/src/Microsoft.Extensions.Testing.Abstractions/Test.cs)</ept>ごとに、TestDiscovery.TestFound を送信します (その後、アダプターに転送されます)。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>After all tests are discovered, the runner sends a TestRunner.Completed message to dotnet test, which <ph id="ph1">`dotnet test`</ph> sends as TestDiscovery.Completed to the adapter.</source>
          <target state="translated">すべてのテストが検出されると、ランナーは TestRunner.Completed メッセージを dotnet テストに送信します。これを <ph id="ph1">`dotnet test`</ph> は TestDiscovery.Completed としてアダプターに送信します。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Once the adapter is done, it sends <ph id="ph1">`dotnet test`</ph> a TestSession.Terminate which will cause <ph id="ph2">`dotnet test`</ph> to shutdown.</source>
          <target state="translated">アダプターが完了すると、<ph id="ph1">`dotnet test`</ph> に TestSession.Terminate を送信します。これで <ph id="ph2">`dotnet test`</ph> はシャットダウンします。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>