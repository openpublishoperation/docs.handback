<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b5c25fc" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4ffc7dd4e11820a3c50ca83847a7ab418bf2faf3</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\testing\unit-testing-with-mstest.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b9d9c252ddab26f09e9cb360e50e92bf6e42d964</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">de6c81c00579e90fdd555189fb28f2452abcd894</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Use MSTest with .NET Core | Microsoft Docs</source>
          <target state="translated">MSTest と .NET Core を使用する | Microsoft Docs</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to use MSTest with .NET Core</source>
          <target state="translated">MSTest と .NET Core を使用する方法</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>MSTest, .NET, .NET Core</source>
          <target state="translated">MSTest, .NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Unit testing with MSTest and .NET Core</source>
          <target state="translated">MSTest と .NET Core による単体テスト</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Creating the projects</source>
          <target state="translated">プロジェクトの作成</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Writing Libraries with Cross Platform Tools<ept id="p1">](../tutorials/libraries.md)</ept> has information on organizing multi-project solutions for both the source and the tests.</source>
          <target state="translated">「<bpt id="p1">[</bpt>クロス プラットフォーム ツールを使用したライブラリの記述<ept id="p1">](../tutorials/libraries.md)</ept>」に関するページには、ソースとテストの両方に複数のプロジェクトから成るソリューションを構成するための情報が含まれています。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This article follows those conventions.</source>
          <target state="translated">この記事は、この規則に従います。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The final project structure will be something like this:</source>
          <target state="translated">最終的なプロジェクト構造は、次のようになります。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Creating the source project</source>
          <target state="translated">ソース プロジェクトの作成</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Open a shell window.</source>
          <target state="translated">シェル ウィンドウを開きます。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Start in the <bpt id="p1">*</bpt>unit-testing-using-mstest<ept id="p1">*</ept> directory, create the <bpt id="p2">*</bpt>PrimeService<ept id="p2">*</ept> directory.</source>
          <target state="translated"><bpt id="p1">*</bpt>unit-testing-using-mstest<ept id="p1">*</ept> ディレクトリで開始し、<bpt id="p2">*</bpt>PrimeService<ept id="p2">*</ept> ディレクトリを作成します。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Make <bpt id="p1">*</bpt>PrimeService<ept id="p1">*</ept> the current directory, and run <ph id="ph1">`dotnet new classlib`</ph> to create the source project.</source>
          <target state="translated"><bpt id="p1">*</bpt>PrimeService<ept id="p1">*</ept> を現在のディレクトリにします。それから <ph id="ph1">`dotnet new classlib`</ph> を実行してソース プロジェクトを作成します。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Rename <bpt id="p1">*</bpt>Class1.cs<ept id="p1">*</ept> as <bpt id="p2">*</bpt>PrimeService.cs<ept id="p2">*</ept>.</source>
          <target state="translated"><bpt id="p1">*</bpt>Class1.cs<ept id="p1">*</ept> の名前を <bpt id="p2">*</bpt>PrimeService.cs<ept id="p2">*</ept> に変更します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>To use test-driven development (TDD), you'll create a failing implementation of the <ph id="ph1">`PrimeService`</ph> class:</source>
          <target state="translated">テスト駆動開発 (TDD) を使用するため、<ph id="ph1">`PrimeService`</ph> クラスのエラーが発生する実装を作成します。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Creating the test project</source>
          <target state="translated">テスト プロジェクトの作成</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Next, change directory back into the <bpt id="p1">*</bpt>unit-testing-using-mstest<ept id="p1">*</ept> directory, and create the <bpt id="p2">*</bpt>PrimeServices.Tests<ept id="p2">*</ept> directory.</source>
          <target state="translated">次に、<bpt id="p1">*</bpt>unit-testing-using-mstest<ept id="p1">*</ept> ディレクトリに戻り、<bpt id="p2">*</bpt>PrimeServices.Tests<ept id="p2">*</ept> ディレクトリを作成します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Make the <bpt id="p1">*</bpt>PrimeService.Tests<ept id="p1">*</ept> directory the current directory and create a new project using <ph id="ph1">`dotnet new mstest`</ph>.</source>
          <target state="translated"><bpt id="p1">*</bpt>PrimeService.Tests<ept id="p1">*</ept> ディレクトリを現在のディレクトリにします。それから <ph id="ph1">`dotnet new mstest`</ph> を利用して新しいプロジェクトを作成します。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This creates a test project that uses MStest as the test library.</source>
          <target state="translated">これにより、テスト ライブラリとして MStest を使用するテスト プロジェクトが作成されます。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The generated template configured the test runner in the <bpt id="p1">*</bpt>PrimeServiceTests.csproj<ept id="p1">*</ept> file:</source>
          <target state="translated">生成されたテンプレートで、<bpt id="p1">*</bpt>PrimeServiceTests.csproj<ept id="p1">*</ept> ファイルのテスト ランナーが構成されました。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The test project requires other packages to create and run unit tests.</source>
          <target state="translated">テスト プロジェクトには、単体テストを作成して実行するための、他のパッケージが必要です。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`dotnet new`</ph> added the MSTest SDK, the MSTest test framework and the MSTest runner.</source>
          <target state="translated"><ph id="ph1">`dotnet new`</ph> により、MSTest SDK、MSTest テスト フレームワーク、MSTest ランナーが追加されました。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>You need to add the PrimeService package as another dependency to the project.</source>
          <target state="translated">別の依存関係として PrimeService パッケージをプロジェクトに追加する必要があります。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You can do that using the <ph id="ph1">`dotnet`</ph> CLI:</source>
          <target state="translated">これは <ph id="ph1">`dotnet`</ph> CLI を利用して実行できます。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Or, you can manually edit the <bpt id="p1">*</bpt>PrimeService.Tests.csproj<ept id="p1">*</ept> file.</source>
          <target state="translated">あるいは、<bpt id="p1">*</bpt>PrimeService.Tests.csproj<ept id="p1">*</ept> ファイルを手動で編集できます。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Directly under the first <ph id="ph1">`&lt;ItemGroup&gt;`</ph> node, add another <ph id="ph2">`&lt;ItemGroup&gt;`</ph> node with a reference to the library project:</source>
          <target state="translated">最初の <ph id="ph1">`&lt;ItemGroup&gt;`</ph> ノードの下で直接、ライブラリ プロジェクトを参照する別の <ph id="ph2">`&lt;ItemGroup&gt;`</ph> ノードを追加します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You can see the entire file in the <bpt id="p1">[</bpt>samples repository<ept id="p1">](https://github.com/dotnet/docs/blob/master/samples/core/getting-started/unit-testing-using-mstest/PrimeService.Tests/PrimeService.Tests.csproj)</ept> on GitHub.</source>
          <target state="translated">全体のファイルは GitHub の<bpt id="p1">[</bpt>サンプル リポジトリ<ept id="p1">](https://github.com/dotnet/docs/blob/master/samples/core/getting-started/unit-testing-using-mstest/PrimeService.Tests/PrimeService.Tests.csproj)</ept>で確認できます。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>After this initial structure is in place, you can write your first test.</source>
          <target state="translated">この初期構造が配置された後、最初のテストを記述することができます。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Once you verify that first unit test, everything is configured and should run smoothly as you add features and tests.</source>
          <target state="translated">その最初の単体テストを確認すると、すべてが構成され、機能とテストを追加しても、スムーズに実行されるようになります。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Creating the first test</source>
          <target state="translated">最初のテストの作成</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Before building the library or the tests, you need to run <ph id="ph1">`dotnet restore`</ph> in both the <bpt id="p1">*</bpt>PrimeService<ept id="p1">*</ept> and <bpt id="p2">*</bpt>PrimeService.Tests<ept id="p2">*</ept> directories.</source>
          <target state="translated">ライブラリまたはテストを構築する前に、<bpt id="p1">*</bpt>PrimeService<ept id="p1">*</ept> ディレクトリと <bpt id="p2">*</bpt>PrimeService.Tests<ept id="p2">*</ept> ディレクトリの両方で <ph id="ph1">`dotnet restore`</ph> を実行する必要があります。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This command restores all the necessary NuGet packages for each project.</source>
          <target state="translated">このコマンドにより、各プロジェクトの必要なすべての NuGet パッケージが復元されます。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The TDD approach calls for writing one failing test, then making it pass, then repeating the process.</source>
          <target state="translated">TDD のアプローチでは、失敗するテストを&amp;1; つ記述することを要求し、それを渡し、プロセスを繰り返します。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>So, let's write that one failing test.</source>
          <target state="translated">ですから、失敗するテストを&amp;1; つ記述しましょう。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Remove <bpt id="p1">*</bpt>UnitTest1.cs<ept id="p1">*</ept> from the <bpt id="p2">*</bpt>PrimeService.Tests<ept id="p2">*</ept> directory, and create a new C# file named <bpt id="p3">*</bpt>PrimeService_IsPrimeShould.cs<ept id="p3">*</ept> with the following content:</source>
          <target state="translated"><bpt id="p2">*</bpt>PrimeService.Tests<ept id="p2">*</ept> ディレクトリから <bpt id="p1">*</bpt>UnitTest1.cs<ept id="p1">*</ept> を削除し、<bpt id="p3">*</bpt>PrimeService_IsPrimeShould.cs<ept id="p3">*</ept> という名前の新しい C# ファイルを作成します。コンテンツは次のようになります。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`[TestClass]`</ph> attributes denotes a class that contains unit tests.</source>
          <target state="translated"><ph id="ph1">`[TestClass]`</ph> 属性は、単体テストを含むクラスを表します。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`[TestMethod]`</ph> attribute denotes a method as a single test.</source>
          <target state="translated"><ph id="ph1">`[TestMethod]`</ph> 属性は、単一のテストとしてメソッドを表します。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Save this file, then run <ph id="ph1">`dotnet build`</ph> to build the test project.</source>
          <target state="translated">このファイルを保存し、<ph id="ph1">`dotnet build`</ph> を実行して、テスト プロジェクトを構築します。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If you have not already built the <ph id="ph1">`PrimeService`</ph> project, the build system will detect that and build it because it is a dependency of the test project.</source>
          <target state="translated"><ph id="ph1">`PrimeService`</ph> プロジェクトをまだ構築していない場合、ビルド システムがこのことを検出して構築します。これは、テスト プロジェクトの依存関係によるものです。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Now, execute <ph id="ph1">`dotnet test`</ph> to run the tests from the console.</source>
          <target state="translated">では、<ph id="ph1">`dotnet test`</ph> を実行してコンソールからテストを実行しましょう。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The MSTest test runner has the program entry point to run your tests from the Console.</source>
          <target state="translated">MSTest テスト ランナーには、コンソールからテストを実行するための、プログラムのエントリ ポイントがあります。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`dotnet test`</ph> starts the test runner, and provides a command-line argument to the test runner indicating the assembly that contains your tests.</source>
          <target state="translated"><ph id="ph1">`dotnet test`</ph> がテスト ランナーを開始し、テストを含むアセンブリを示すテストランナーにコマンド ライン引数を提供します。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Your test fails.</source>
          <target state="translated">テストが失敗します。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You haven't created the implementation yet.</source>
          <target state="translated">実装はまだ作成していません。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Write the simplest code to make this one test pass:</source>
          <target state="translated">このテストを成功させるための、最も簡単なコードを記述します。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">*</bpt>PrimeService.Tests<ept id="p1">*</ept> directory, run <ph id="ph1">`dotnet test`</ph> again.</source>
          <target state="translated"><bpt id="p1">*</bpt>PrimeService.Tests<ept id="p1">*</ept> ディレクトリで、<ph id="ph1">`dotnet test`</ph> をもう一度実行します。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`dotnet test`</ph> command will first run a build for the Prime.Services project, and then for PrimeService.Tests project.</source>
          <target state="translated"><ph id="ph1">`dotnet test`</ph> コマンドは最初に Prime.Services プロジェクトのビルドを実行し、それから PrimeService.Tests プロジェクトのビルドを実行します。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>After building both projects, it will run this single test.</source>
          <target state="translated">両方のプロジェクトをビルドすると、この単一テストが実行されます。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>It passes.</source>
          <target state="translated">成功します。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Adding more features</source>
          <target state="translated">他の機能の追加</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Now, that you've made one test pass, it's time to write more.</source>
          <target state="translated">テストが成功したので、他のテストも記述してみましょう。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>There are a few other simple cases for prime numbers: 0, -1.</source>
          <target state="translated">素数に関する、いくつかの単純なケースが他にもあります (0、-1)。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>You could add those as new tests, with the <ph id="ph1">`[TestMethod]`</ph> attribute, but that quickly becomes tedious.</source>
          <target state="translated">これらは <ph id="ph1">`[TestMethod]`</ph> 属性を使用して新しいテストとして追加できますが、すぐに煩雑になります。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>There are other MSTest attributes that enable you to write a suite of similar tests.</source>
          <target state="translated">一連の類似のテストを記述できるようになる、他の MSTest 属性があります。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`DataTestMethod`</ph> represents a suite of tests that execute the same code, but have different input arguments.</source>
          <target state="translated"><ph id="ph1">`DataTestMethod`</ph> は同じコードを実行するものの、異なる入力引数が含まれる一連のテストを表します。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">`[DataRow]`</ph> attribute to specify values for those inputs.</source>
          <target state="translated"><ph id="ph1">`[DataRow]`</ph> 属性を使用して、そのような入力の値を指定することができます。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Instead of creating new tests, leverage these two attributes to create a single data test method that tests some values less than 2, which is the lowest prime number:</source>
          <target state="translated">新しいテストを作成する代わりに、この 2 つの属性を活用して、最も小さな素数である 2 未満の複数の値をテストするデータ テスト メソッドを 1 つ作成しましょう。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Sample_TestCode<ept id="p2">]</ept><bpt id="p3">(../../../samples/core/getting-started/unit-testing-using-mstest/PrimeService.Tests/PrimeService_IsPrimeShould.cs#Sample_TestCode "</bpt>First tests<ept id="p3">")</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Sample_TestCode<ept id="p2">]</ept><bpt id="p3">(../../../samples/core/getting-started/unit-testing-using-mstest/PrimeService.Tests/PrimeService_IsPrimeShould.cs#Sample_TestCode "</bpt>最初のテスト<ept id="p3">")</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Run <ph id="ph1">`dotnet test`</ph> and you'll see that two of these tests fail.</source>
          <target state="translated"><ph id="ph1">`dotnet test`</ph> を実行すると、このテストのうち&amp;2; つが失敗したことがわかります。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>You can make them pass by changing the service.</source>
          <target state="translated">サービスを変更することで、失敗したテストを成功させることができます。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>You need to change the <ph id="ph1">`if`</ph> clause at the beginning of the method:</source>
          <target state="translated">メソッドの先頭にある <ph id="ph1">`if`</ph> 句を変更する必要があります。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Now, these tests all pass.</source>
          <target state="translated">これで、すべてのテストが合格します。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>You continue to iterate by adding more tests, more theories, and more code in the main library.</source>
          <target state="translated">他のテスト、理論、コードをメイン ライブラリに追加して、反復を続けます。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>You'll quickly end up with the <bpt id="p1">[</bpt>finished version of the tests<ept id="p1">](https://github.com/dotnet/docs/blob/master/samples/core/getting-started/unit-testing-using-mstest/PrimeService.Tests/PrimeService_IsPrimeShould.cs)</ept> and the <bpt id="p2">[</bpt>complete implementation of the library<ept id="p2">](https://github.com/dotnet/docs/blob/master/samples/core/getting-started/unit-testing-using-mstest/PrimeService/PrimeService.cs)</ept>.</source>
          <target state="translated">間もなく、<bpt id="p1">[</bpt>テストの最終版<ept id="p1">](https://github.com/dotnet/docs/blob/master/samples/core/getting-started/unit-testing-using-mstest/PrimeService.Tests/PrimeService_IsPrimeShould.cs)</ept>と<bpt id="p2">[</bpt>ライブラリの完全な実装<ept id="p2">](https://github.com/dotnet/docs/blob/master/samples/core/getting-started/unit-testing-using-mstest/PrimeService/PrimeService.cs)</ept>により終了します。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>You've built a small library and a set of unit tests for that library.</source>
          <target state="translated">これで、小さなライブラリとそのライブラリの単体テストのセットが構築されました。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>You've structured this solution so that adding new packages and tests will be seamless, and you can concentrate on the problem at hand.</source>
          <target state="translated">このソリューションは、新しいパッケージとテストの追加がシームレスになり、当面の問題に集中できるように構成しました。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The tools will run automatically.</source>
          <target state="translated">ツールは自動的に実行されます。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>