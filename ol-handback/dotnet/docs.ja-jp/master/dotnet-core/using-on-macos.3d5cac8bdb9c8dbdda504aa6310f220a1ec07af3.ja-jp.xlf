<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-188fee3" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">33d87c3236e5f592cd59eab77df1059ac089b88c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\tutorials\using-on-macos.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d5e955770ff2289bd6da683d9778214ee98f19e2</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5e1389d93c7d60b7103dcfa3600bd4d24f906b72</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Getting started with .NET Core on macOS</source>
          <target state="translated">macOS での .NET Core の概要</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Getting started with .NET Core on macOS, using Visual Studio Code</source>
          <target state="translated">Visual Studio Code を使用した macOS での .NET Core の概要</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Getting started with .NET Core on macOS, using Visual Studio Code</source>
          <target state="translated">Visual Studio Code を使用した macOS での .NET Core の概要</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>by <bpt id="p1">[</bpt>Bertrand Le Roy<ept id="p1">](https://github.com/bleroy)</ept>,  <bpt id="p2">[</bpt>Phillip Carter<ept id="p2">](https://github.com/cartermp)</ept>, <bpt id="p3">[</bpt>Bill Wagner<ept id="p3">](https://github.com/billwagner)</ept></source>
          <target state="translated">著者: <bpt id="p1">[</bpt>Bertrand Le Roy<ept id="p1">](https://github.com/bleroy)</ept>、<bpt id="p2">[</bpt>Phillip Carter<ept id="p2">](https://github.com/cartermp)</ept>、<bpt id="p3">[</bpt>Bill Wagner<ept id="p3">](https://github.com/billwagner)</ept></target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Contributions by <bpt id="p1">[</bpt>Toni Solarin-Sodara<ept id="p1">](https://github.com/tsolarin)</ept></source>
          <target state="translated">協力: <bpt id="p1">[</bpt>Toni Solarin-Sodara<ept id="p1">](https://github.com/tsolarin)</ept></target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This document provides a tour of the steps and workflow to create a .NET Core Solution using <bpt id="p1">[</bpt>Visual Studio Code<ept id="p1">](http://code.visualstudio.com)</ept>.</source>
          <target state="translated">このドキュメントでは、<bpt id="p1">[</bpt>Visual Studio Code<ept id="p1">](http://code.visualstudio.com)</ept> を使用して .NET Core ソリューションを作成する手順とワークフローを説明します。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You'll learn how to create projects, create unit tests, use the debugging tools, and incorporate third-party libraries via <bpt id="p1">[</bpt>NuGet<ept id="p1">](http://nuget.org)</ept>.</source>
          <target state="translated">プロジェクトを作成し、単体テストを作成し、デバッグ ツールを使用し、<bpt id="p1">[</bpt>NuGet<ept id="p1">](http://nuget.org)</ept> からサードパーティ製ライブラリを組み込む方法について説明します。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This article uses Visual Studio Code on Mac OS.</source>
          <target state="translated">この記事では、Mac OS で Visual Studio Code を使用します。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Where there are differences, it points out the differences for the Windows platform.</source>
          <target state="translated">Windows プラットフォームと違う場合は指摘します。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
          <target state="translated">必須コンポーネント</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Before starting, you'll need to install the <bpt id="p1">[</bpt>.NET Core SDK<ept id="p1">](https://www.microsoft.com/net/core)</ept>, currently in a preview release.</source>
          <target state="translated">始める前に、現在はプレビュー リリースである <bpt id="p1">[</bpt>.NET Core SDK<ept id="p1">](https://www.microsoft.com/net/core)</ept> をインストールする必要があります。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The .NET Core SDK includes the latest release of the .NET Core framework and runtime.</source>
          <target state="translated">.NET Core SDK には、.NET Core のフレームワークとランタイムの最新リリースが含まれています。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You'll also need to install <bpt id="p1">[</bpt>Visual Studio Code<ept id="p1">](http://code.visualstudio.com)</ept>.</source>
          <target state="translated"><bpt id="p1">[</bpt>Visual Studio Code<ept id="p1">](http://code.visualstudio.com)</ept> のインストールも必要です。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>During the course of this article, you'll also install extensions that will improve the .NET Core development experience.</source>
          <target state="translated">この記事の中では、.NET Core の開発エクスペリエンスが向上する拡張機能もインストールします。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You can find the links to all of these at the <bpt id="p1">[</bpt>.NET home page<ept id="p1">](http://dot.net)</ept>.</source>
          <target state="translated">これらへのリンクはすべて、<bpt id="p1">[</bpt>.NET のホーム ページ<ept id="p1">](http://dot.net)</ept>にあります。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Getting Started</source>
          <target state="translated">作業の開始</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The source for this tutorial is available on <bpt id="p1">[</bpt>GitHub<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/getting-started/golden)</ept>.</source>
          <target state="translated">このチュートリアルのソースは、<bpt id="p1">[</bpt>GitHub<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/getting-started/golden)</ept> で提供されています。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Start Visual Studio Code.</source>
          <target state="translated">Visual Studio Code を開始します。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Press Ctrl + '<ph id="ph1">\`</ph>' (the back-quote character) to open an embedded terminal in VS Code.</source>
          <target state="translated">Ctrl + <ph id="ph1">\`</ph> (逆引用符) キーを押して、VS Code で埋め込みターミナルを開きます</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>(Alternatively, you can use a separate terminal window, if you prefer).</source>
          <target state="translated">(または、その方がよければ別のターミナル ウィンドウを使うこともできます)。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>By the time we're done, you'll create three projects: a library project, tests for that library project, and a console application that makes use of the library.</source>
          <target state="translated">このガイドでは 3 つのプロジェクトを作成します。ライブラリ プロジェクト、そのライブラリ プロジェクトのテスト、ライブラリを使用するコンソール アプリケーションです。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You'll follow a standard folder structure for the three projects.</source>
          <target state="translated">これら 3 つのプロジェクトには標準的なフォルダー構造を使用します。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Following this standard folder structure means that the .NET Core SDK tools understand the relationship between your production code projects and your test code projects.</source>
          <target state="translated">この標準フォルダー構造に従うことで、.NET Core SDK のツールは、運用コード プロジェクトとテスト コード プロジェクトの間の関係を理解できます。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>That makes your development experience more productive.</source>
          <target state="translated">これにより、開発環境の生産性が向上します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Let's start by creating those folders.</source>
          <target state="translated">最初にこれらのフォルダーを作成します。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In the terminal, create a 'golden' directory.</source>
          <target state="translated">ターミナルで、"golden" ディレクトリを作成します。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Under that directory create <ph id="ph1">`src`</ph> and <ph id="ph2">`test`</ph> directories.</source>
          <target state="translated">そのディレクトリの下に、<ph id="ph1">`src`</ph> ディレクトリと <ph id="ph2">`test`</ph> ディレクトリを作成します。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Under <ph id="ph1">`src`</ph> create <ph id="ph2">`app`</ph> and <ph id="ph3">`library`</ph> directories.</source>
          <target state="translated"><ph id="ph1">`src`</ph> の下に、<ph id="ph2">`app`</ph> ディレクトリと <ph id="ph3">`library`</ph> ディレクトリを作成します。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">`test`</ph> create a <ph id="ph2">`test-library`</ph> directory.</source>
          <target state="translated"><ph id="ph1">`test`</ph> に、<ph id="ph2">`test-library`</ph> ディレクトリを作成します。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You can do this either using the terminal in VS code, or by clicking on the parent folder in VS Code and selecting the "New Folder" icon.</source>
          <target state="translated">これは、VS Code のターミナルを使用して、または VS Code で親フォルダーをクリックして [新しいフォルダー] アイコンをクリックすることにより、行うことができます。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>In VS Code, open the 'golden' directory.</source>
          <target state="translated">VS Code で、"golden" ディレクトリを開きます。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This directory is the root of your solution.</source>
          <target state="translated">このディレクトリはソリューションのルートです。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Next, create a <ph id="ph1">`global.json`</ph> file in the root directory for your solution.</source>
          <target state="translated">次に、ソリューションのルート ディレクトリに <ph id="ph1">`global.json`</ph> ファイルを作成します。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The contents of <ph id="ph1">`global.json`</ph> are:</source>
          <target state="translated"><ph id="ph1">`global.json`</ph> の内容は次のとおりです。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>At this point, your directory tree should look like this:</source>
          <target state="translated">この時点で、ディレクトリ ツリーは次のようになります。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Writing the library</source>
          <target state="translated">ライブラリの作成</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Your next task is to create the library.</source>
          <target state="translated">次にライブラリを作成します。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>In the terminal window (either the embedded terminal in VS code, or another terminal), cd to <ph id="ph1">`golden/src/library`</ph> and type the command <ph id="ph2">`dotnet new -t lib`</ph>.</source>
          <target state="translated">ターミナル ウィンドウ (VS Code の埋め込みターミナルまたは別のターミナル) で、ディレクトリを <ph id="ph1">`golden/src/library`</ph> に移動し、<ph id="ph2">`dotnet new -t lib`</ph> コマンドを入力します。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This creates a library project, with two files: <ph id="ph1">`project.json`</ph> and <ph id="ph2">`Library.cs`</ph>.</source>
          <target state="translated">2 つのファイル <ph id="ph1">`project.json`</ph> と <ph id="ph2">`Library.cs`</ph> を含むライブラリ プロジェクトが作成されます。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`project.json`</ph> contains the following information:</source>
          <target state="translated"><ph id="ph1">`project.json`</ph>には次の情報が含まれます。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This library project will make use of JSON representation of objects, so you'll want to add a reference to the <ph id="ph1">`Newtonsoft.Json`</ph> NuGet package.</source>
          <target state="translated">このライブラリ プロジェクトはオブジェクトの JSON 表現を使用するので、<ph id="ph1">`Newtonsoft.Json`</ph> NuGet パッケージへの参照を追加します。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>In<ph id="ph1">`project.json`</ph> add the latest pre-release version of the package as a dependency:</source>
          <target state="translated"><ph id="ph1">`project.json`</ph> に、パッケージの最新プレリリース バージョンを依存関係として追加します。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>After you've finished adding those dependencies, you need to install those packages into workspace.</source>
          <target state="translated">これらの依存関係の追加が完了した後、ワークスペースにこれらのパッケージをインストールする必要があります。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Run the <ph id="ph1">`dotnet restore`</ph> command to updates all dependencies, and write a <ph id="ph2">`project.lock.json`</ph> file in the project directory.</source>
          <target state="translated"><ph id="ph1">`dotnet restore`</ph> コマンドを実行してすべての依存関係を更新し、<ph id="ph2">`project.lock.json`</ph> ファイルをプロジェクト ディレクトリに書き込みます。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>This file contains the full dependency tree of all the dependencies in your project.</source>
          <target state="translated">このファイルには、プロジェクト内のすべての依存関係の完全な依存関係ツリーが含まれています。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>You don't need to read this file, it's used by tools in the .NET Core SDK.</source>
          <target state="translated">このファイルを読む必要はありません。.NET Core SDK のツールによって使用されます。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Now, let's update the C# code.</source>
          <target state="translated">次に、C# のコードを更新します。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Let's create a <ph id="ph1">`Thing`</ph> class that contains one public method.</source>
          <target state="translated">パブリック メソッドを 1 つ含む <ph id="ph1">`Thing`</ph> クラスを作成します。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>This method will return the sum of two numbers, but will do so by converting that number to a JSON string, and then deserializing it.</source>
          <target state="translated">このメソッドは 2 つの数値の合計を返しますが、そのためには、値を JSON 文字列に変換した後、それを逆シリアル化します。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Rename the file <ph id="ph1">`Library.cs`</ph> to <ph id="ph2">`Thing.cs`</ph>.</source>
          <target state="translated">ファイルの名前を <ph id="ph1">`Library.cs`</ph> から <ph id="ph2">`Thing.cs`</ph> に変更します。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Then, replace the existing code (for the template-generated Class1) with the following:</source>
          <target state="translated">次に、既存のコード (テンプレートによって生成された Class1) を次のように置き換えます。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>This makes use of a number of modern C# features, such as static usings, expression-bodied members, and interpolated strings, that you can learn about in the <bpt id="p1">[</bpt>Learn C#<ept id="p1">](../../csharp/index.md)</ept> section.</source>
          <target state="translated">このコードでは、静的な using、式本体のメンバー、補間文字列など、C# の最新の機能を利用しています。これらについては、<bpt id="p1">[</bpt>C# の詳細<ept id="p1">](../../csharp/index.md)</ept>に関するセクションを参照してください。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Now that you've updated the code, you can build the library using <ph id="ph1">`dotnet build`</ph>.</source>
          <target state="translated">コードを更新したので、<ph id="ph1">`dotnet build`</ph> を使用してライブラリをビルドできます。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>You now have a built <ph id="ph1">`library.dll`</ph> file under <ph id="ph2">`golden/src/library/bin/Debug/netstandard1.6`</ph>.</source>
          <target state="translated">ビルドされた <ph id="ph1">`library.dll`</ph> ファイルは <ph id="ph2">`golden/src/library/bin/Debug/netstandard1.6`</ph> にあります。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Writing the test project</source>
          <target state="translated">テスト プロジェクトの作成</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Let's build a test project for this library that you've build.</source>
          <target state="translated">ビルドしたライブラリのテスト プロジェクトを作成します。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Cd into the <ph id="ph1">`test/test-library`</ph> directory.</source>
          <target state="translated"><ph id="ph1">`test/test-library`</ph> ディレクトリに移動します。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Run <ph id="ph1">`dotnet new -t xunittest`</ph> to create a new test project.</source>
          <target state="translated"><ph id="ph1">`dotnet new -t xunittest`</ph> を実行して新しいテスト プロジェクトを作成します。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>You'll need to add a dependency node for the library you wrote in the steps above.</source>
          <target state="translated">前の手順で作成したライブラリの依存関係ノードを追加する必要があります。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Open <ph id="ph1">`project.json`</ph> and update the dependencies section to the following (including the <ph id="ph2">`library`</ph> node, which is the last node below):</source>
          <target state="translated"><ph id="ph1">`project.json`</ph> を開き、dependencies セクションを次のように更新します (最後の <ph id="ph2">`library`</ph> ノードも含みます)。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`library`</ph> node specifies that this dependency should resolve to a project in the current workspace.</source>
          <target state="translated"><ph id="ph1">`library`</ph> ノードでは、この依存関係を現在のワークスペースのプロジェクトに解決する必要があることが指定されています。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Without explicitly specifying this, it's possible that the test project would build against a NuGet package of the same name.</source>
          <target state="translated">これを明示的に指定しないと、同じ名前の NuGet パッケージに対してテスト プロジェクトがビルドされる可能性があります。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Now that the dependencies have been properly configured, let's create the tests for your library.</source>
          <target state="translated">依存関係を正しく構成したので、ライブラリのテストを作成します。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Open <ph id="ph1">`Tests.cs`</ph> and replace its contents with the following code:</source>
          <target state="translated"><ph id="ph1">`Tests.cs`</ph> を開き、内容を次のコードに置き換えます。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Now, run <ph id="ph1">`dotnet restore`</ph>, <ph id="ph2">`dotnet build`</ph> and <ph id="ph3">`dotnet test`</ph>.</source>
          <target state="translated">次に、<ph id="ph1">`dotnet restore`</ph>、<ph id="ph2">`dotnet build`</ph>、<ph id="ph3">`dotnet test`</ph> を実行します。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The xUnit console test runner will run the one test, and report that it is passing.</source>
          <target state="translated">XUnit コンソールのテスト ランナーは、1 つのテストを実行して合格したことをレポートします。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Writing the console app</source>
          <target state="translated">コンソール アプリの作成</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>In your terminal, cd to the <ph id="ph1">`golden/src/app`</ph> directory.</source>
          <target state="translated">ターミナルで、<ph id="ph1">`golden/src/app`</ph> ディレクトリに移動します。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Run <ph id="ph1">`dotnet new`</ph> to create a new console application.</source>
          <target state="translated"><ph id="ph1">`dotnet new`</ph> を実行して新しいコンソール アプリケーションを作成します。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Your console application depends on the library you built and tested in the previous steps.</source>
          <target state="translated">コンソール アプリケーションは、前の手順でビルドしてテストしたライブラリに依存します。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>You need to indicate that by editing <ph id="ph1">`project.json`</ph> to add this dependency.</source>
          <target state="translated"><ph id="ph1">`project.json`</ph> を編集してこの依存関係を追加することにより、そのことを示す必要があります。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">`dependencies`</ph> node, add the <ph id="ph2">`library`</ph> node as follows:</source>
          <target state="translated"><ph id="ph1">`dependencies`</ph> ノードで、次のように <ph id="ph2">`library`</ph> ノードを追加します。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`project`</ph> node is important here, as it was in the test library.</source>
          <target state="translated">テスト ライブラリのときと同じように、ここでも <ph id="ph1">`project`</ph> ノードが重要です。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>It indicates that this is a project in the current solution, and not a NuGet package.</source>
          <target state="translated">これが現在のソリューションのプロジェクトであり、NuGet パッケージのプロジェクトではないことを示します。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Run <ph id="ph1">`dotnet restore`</ph> to restore all dependencies.</source>
          <target state="translated"><ph id="ph1">`dotnet restore`</ph> を実行してすべての依存関係を復元します。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Open <ph id="ph1">`program.cs`</ph> and replace the contents of the <ph id="ph2">`Main`</ph> method with this line:</source>
          <target state="translated"><ph id="ph1">`program.cs`</ph> を開き、<ph id="ph2">`Main`</ph> メソッドの内容を次の行に置き換えます。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>You'll need to add a couple <ph id="ph1">`using`</ph> directives to the top of the file:</source>
          <target state="translated">2 つの <ph id="ph1">`using`</ph> ディレクティブをファイルの先頭に追加する必要があります。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Then, run <ph id="ph1">`dotnet build`</ph>.</source>
          <target state="translated">その後、<ph id="ph1">`dotnet build`</ph> を実行します。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>That creates the assemblies, and you can type <ph id="ph1">`dotnet run`</ph> to run the executable.</source>
          <target state="translated">アセンブリが作成されるので、「<ph id="ph1">`dotnet run`</ph>」と入力して実行可能ファイルを実行できます。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Debugging your application</source>
          <target state="translated">アプリケーションのデバッグ</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>You can debug your code in VS Code using the C# extension.</source>
          <target state="translated">C# の拡張機能を使用して VS Code でコードをデバッグできます。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>You install this extension by pressing <ph id="ph1">`F1`</ph> to open the VS Code palette.</source>
          <target state="translated">この拡張機能をインストールするには、<ph id="ph1">`F1`</ph> キーを押して VS Code パレットを開きます。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Type <ph id="ph1">`ext install`</ph> to see the list of extensions.</source>
          <target state="translated">「<ph id="ph1">`ext install`</ph>」と入力して、拡張機能の一覧を表示します。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Select the C# extension.</source>
          <target state="translated">C# 拡張機能を選択します。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>(More details are available on the <bpt id="p1">[</bpt>Visual Studio Code C# Extension documentation<ept id="p1">](https://github.com/OmniSharp/omnisharp-vscode/blob/master/debugger.md)</ept> page.)</source>
          <target state="translated">詳細については、<bpt id="p1">[</bpt>Visual Studio Code C# 拡張機能のドキュメント<ept id="p1">](https://github.com/OmniSharp/omnisharp-vscode/blob/master/debugger.md)</ept>を参照してください。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>After you install the extension, VS Code will ask that you restart the application to load the new extension.</source>
          <target state="translated">拡張機能をインストールした後、VS Code でアプリケーションを再起動して新しい拡張機能を読み込むように求められます。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Once the extension is installed, you can open the debugger tab (see figure).</source>
          <target state="translated">拡張機能のインストールが済むと、デバッガー タブを開くことができます (図を参照)。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>VS Code Debugger</source>
          <target state="translated">VS Code のデバッガー</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>When you start the debugger, VS Code will instruct you to configure the debugger.</source>
          <target state="translated">デバッガーを起動すると、デバッガーを構成するように指示されます。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>When you do, it creates a <ph id="ph1">`.vscode`</ph> directory with two files: <ph id="ph2">`tasks.json`</ph> and <ph id="ph3">`launch.json`</ph>.</source>
          <target state="translated">構成を行うと、<ph id="ph1">`.vscode`</ph> ディレクトリと 2 つのファイル <ph id="ph2">`tasks.json`</ph> および <ph id="ph3">`launch.json`</ph> が作成されます。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>These two files control the debugger configuration.</source>
          <target state="translated">これら 2 つのファイルはデバッガーの構成を制御します。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>In most projects, this directory is not included in source control.</source>
          <target state="translated">ほとんどのプロジェクトでは、このディレクトリはソース管理に含まれません。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>It is included in the sample associated with this walk through so you can see the edits you need to make.</source>
          <target state="translated">このチュートリアルに関連付けられているサンプルに含まれるので、必要な編集を確認できます。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Your solution contains multiple projects, so you'll want to modify each of these files to perform the correct commands.</source>
          <target state="translated">ソリューションには複数のプロジェクトが含まれているので、正しいコマンドを実行するには各ファイルを変更する必要があります。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>First, open <ph id="ph1">`tasks.json`</ph>.</source>
          <target state="translated">最初に、<ph id="ph1">`tasks.json`</ph> を開きます。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The default build task runs <ph id="ph1">`dotnet build`</ph> in the workspace source directory.</source>
          <target state="translated">既定のビルド タスクは、ワークスペースのソース ディレクトリの <ph id="ph1">`dotnet build`</ph> を実行します。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Instead, you want to run it in the <ph id="ph1">`src/app`</ph> directory.</source>
          <target state="translated">代わりに、<ph id="ph1">`src/app`</ph> ディレクトリのものを実行する必要があります。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>You need to add a <ph id="ph1">`options`</ph> node to set the current working directory to that:</source>
          <target state="translated"><ph id="ph1">`options`</ph> ノードを追加し、現在の作業ディレクトリをそれに設定します。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Next, you'll need to open <ph id="ph1">`launch.json`</ph> and update the program path.</source>
          <target state="translated">次に、<ph id="ph1">`launch.json`</ph> を開き、プログラムのパスを更新します。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>You'll see a node under "configurations" that describes the program.</source>
          <target state="translated">"configurations" の下にプログラムを記述しているノードがあります。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>You'll see:</source>
          <target state="translated">次のように表示されます。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>You'll change this to:</source>
          <target state="translated">これを次のように変更します。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>If you are running on Windows, you'll need to update the Application's <ph id="ph1">`project.json`</ph> (in the <ph id="ph2">`src/app`</ph> directory) to generate portable PDB files (this happens by default on Mac OSX and Linux).</source>
          <target state="translated">Windows で実行している場合は、アプリケーションの <ph id="ph1">`project.json`</ph> (<ph id="ph2">`src/app`</ph> ディレクトリにあります) を更新し、ポータブル PDB ファイルを生成する必要があります (Mac OSX と Linux では既定でこのようになります)。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Add the <ph id="ph1">`debugType`</ph> node inside <ph id="ph2">`buildOptions`</ph>.</source>
          <target state="translated"><ph id="ph2">`buildOptions`</ph> に <ph id="ph1">`debugType`</ph> ノードを追加します。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>You'll need to add the <ph id="ph1">`debugType`</ph> node in <ph id="ph2">`project.json`</ph> for both the <ph id="ph3">`src/app`</ph> and <ph id="ph4">`src/library`</ph> folders.</source>
          <target state="translated"><ph id="ph3">`src/app`</ph> フォルダーと <ph id="ph4">`src/library`</ph> フォルダー両方の <ph id="ph2">`project.json`</ph> に <ph id="ph1">`debugType`</ph> ノードを追加します。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Set a breakpoint at the <ph id="ph1">`WriteLine`</ph> statement in <ph id="ph2">`Main`</ph>.</source>
          <target state="translated"><ph id="ph2">`Main`</ph> の <ph id="ph1">`WriteLine`</ph> ステートメントにブレークポイントを設定します。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>You do this by pressing the <ph id="ph1">`F9`</ph> key, or by clicking the mouse in the left margin on the line you want the breakpoint.</source>
          <target state="translated">そのためには、<ph id="ph1">`F9`</ph> キーを押すか、ブレークポイントを設定する行の左側の余白をクリックします。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Open the debugger by pressing the debug icon on the left of the VS Code screen (see figure).</source>
          <target state="translated">VS Code 画面左側のデバッグ アイコンをクリックしてデバッガーを開きます (図を参照)。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Then, press the Play button to start the application under the debugger.</source>
          <target state="translated">その後、[再生] ボタンをクリックしてデバッガーでアプリケーションを開始します。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>You should hit the breakpoint.</source>
          <target state="translated">ブレークポイントがヒットします。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Step into the <ph id="ph1">`Get`</ph> method and make sure that you have passed in the correct arguments.</source>
          <target state="translated"><ph id="ph1">`Get`</ph> メソッドにステップ インし、正しい引数を渡したことを確認します。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Make sure that the answer is actually 42.</source>
          <target state="translated">答えが実際に 42 であることを確認してください。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>