<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b5c25fc" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c4d1b7690ca87f2a1a9ced4d82e47aee2f7ecc9f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\tutorials\using-on-macos.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">db4157484ae74d7f79225467e7f5832db16b921a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8f7e4628651fc64cf3b80bffadf0ba2902254246</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Getting started with .NET Core on macOS</source>
          <target state="translated">macOS での .NET Core の概要</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Getting started with .NET Core on macOS, using Visual Studio Code</source>
          <target state="translated">Visual Studio Code を使用した macOS での .NET Core の概要</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Getting started with .NET Core on macOS, using Visual Studio Code</source>
          <target state="translated">Visual Studio Code を使用した macOS での .NET Core の概要</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This document provides a tour of the steps and workflow to create a .NET Core Solution using <bpt id="p1">[</bpt>Visual Studio Code<ept id="p1">](http://code.visualstudio.com)</ept>.</source>
          <target state="translated">このドキュメントでは、<bpt id="p1">[</bpt>Visual Studio Code<ept id="p1">](http://code.visualstudio.com)</ept> を使用して .NET Core ソリューションを作成する手順とワークフローを説明します。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You'll learn how to create projects, create unit tests, use the debugging tools, and incorporate third-party libraries via <bpt id="p1">[</bpt>NuGet<ept id="p1">](http://nuget.org)</ept>.</source>
          <target state="translated">プロジェクトを作成し、単体テストを作成し、デバッグ ツールを使用し、<bpt id="p1">[</bpt>NuGet<ept id="p1">](http://nuget.org)</ept> からサードパーティ製ライブラリを組み込む方法について説明します。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This article uses Visual Studio Code on Mac OS.</source>
          <target state="translated">この記事では、Mac OS で Visual Studio Code を使用します。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Where there are differences, it points out the differences for the Windows platform.</source>
          <target state="translated">Windows プラットフォームと違う場合は指摘します。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
          <target state="translated">必須コンポーネント</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Before starting, you'll need to install the <bpt id="p1">[</bpt>.NET Core SDK<ept id="p1">](https://www.microsoft.com/net/core)</ept>.</source>
          <target state="translated">始める前に、<bpt id="p1">[</bpt>.NET Core SDK<ept id="p1">](https://www.microsoft.com/net/core)</ept> をインストールする必要があります。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The .NET Core SDK includes the latest release of the .NET Core framework and runtime.</source>
          <target state="translated">.NET Core SDK には、.NET Core のフレームワークとランタイムの最新リリースが含まれています。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You'll also need to install <bpt id="p1">[</bpt>Visual Studio Code<ept id="p1">](http://code.visualstudio.com)</ept>.</source>
          <target state="translated"><bpt id="p1">[</bpt>Visual Studio Code<ept id="p1">](http://code.visualstudio.com)</ept> のインストールも必要です。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>During the course of this article, you'll also install extensions that will improve the .NET Core development experience.</source>
          <target state="translated">この記事の中では、.NET Core の開発エクスペリエンスが向上する拡張機能もインストールします。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Getting Started</source>
          <target state="translated">作業の開始</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The source for this tutorial is available on <bpt id="p1">[</bpt>GitHub<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/getting-started/golden)</ept>.</source>
          <target state="translated">このチュートリアルのソースは、<bpt id="p1">[</bpt>GitHub<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/getting-started/golden)</ept> で提供されています。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Start Visual Studio Code.</source>
          <target state="translated">Visual Studio Code を開始します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Press Ctrl + '<ph id="ph1">\`</ph>' (the back-quote character) to open an embedded terminal in VS Code.</source>
          <target state="translated">Ctrl + <ph id="ph1">\`</ph> (逆引用符) キーを押して、VS Code で埋め込みターミナルを開きます</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>(Alternatively, you can use a separate terminal window, if you prefer).</source>
          <target state="translated">(または、その方がよければ別のターミナル ウィンドウを使うこともできます)。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>By the time we're done, you'll create three projects: a library project, tests for that library project, and a console application that makes use of the library.</source>
          <target state="translated">このガイドでは&amp;3; つのプロジェクトを作成します。ライブラリ プロジェクト、そのライブラリ プロジェクトのテスト、ライブラリを使用するコンソール アプリケーションです。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Let's start by creating those folders.</source>
          <target state="translated">最初にこれらのフォルダーを作成します。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In the terminal, create a 'golden' directory.</source>
          <target state="translated">ターミナルで、"golden" ディレクトリを作成します。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In VS Code, open the <bpt id="p1">*</bpt>golden<ept id="p1">*</ept> directory.</source>
          <target state="translated">VS Code で、<bpt id="p1">*</bpt>golden<ept id="p1">*</ept> ディレクトリを開きます。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This directory is the root of your solution.</source>
          <target state="translated">このディレクトリはソリューションのルートです。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Run the <bpt id="p1">[</bpt><ph id="ph1">`dotnet new`</ph><ept id="p1">](../tools/dotnet-new.md)</ept> command to create a new solution:</source>
          <target state="translated"><bpt id="p1">[</bpt><ph id="ph1">`dotnet new`</ph><ept id="p1">](../tools/dotnet-new.md)</ept> コマンドを実行して新しいソリューションを作成する:</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This command creates a <bpt id="p1">*</bpt>golden.sln<ept id="p1">*</ept> file for the entire solution.</source>
          <target state="translated">このコマンドにより、ソリューション全体の <bpt id="p1">*</bpt>golden.sln<ept id="p1">*</ept> ファイルが作成されます。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Your next task is to create the library.</source>
          <target state="translated">次にライブラリを作成します。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In the terminal window (either the embedded terminal in VS code, or another terminal), cd to <bpt id="p1">*</bpt>golden/<ept id="p1">*</ept> and type the command:</source>
          <target state="translated">ターミナル ウィンドウ (VS Code の埋め込みターミナルまたは別のターミナル) で、ディレクトリを <bpt id="p1">*</bpt>golden/<ept id="p1">*</ept> に移動し、コマンドを入力します。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This creates a library project, with two files: <bpt id="p1">*</bpt>library.csproj<ept id="p1">*</ept> and <bpt id="p2">*</bpt>Class1.cs<ept id="p2">*</ept> in the <bpt id="p3">*</bpt>library<ept id="p3">*</ept> directory.</source>
          <target state="translated">これでライブラリ プロジェクトと&amp;2; つのファイル (<bpt id="p1">*</bpt>library.csproj<ept id="p1">*</ept> と <bpt id="p2">*</bpt>Class1.cs<ept id="p2">*</ept>) が <bpt id="p3">*</bpt>library<ept id="p3">*</ept> ディレクトリに作成されます。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You want that library project included in your solution.</source>
          <target state="translated">そのライブラリ プロジェクトをソリューションに追加します。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Run the <bpt id="p1">[</bpt><ph id="ph1">`dotnet sln`</ph><ept id="p1">](../tools/dotnet-sln.md)</ept> command to add the newly created <bpt id="p2">*</bpt>library.csproj<ept id="p2">*</ept> project to the solution:</source>
          <target state="translated"><bpt id="p1">[</bpt><ph id="ph1">`dotnet sln`</ph><ept id="p1">](../tools/dotnet-sln.md)</ept> コマンドを実行し、新しく作成された <bpt id="p2">*</bpt>library.csproj<ept id="p2">*</ept> プロジェクトをソリューションに追加します。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Let's examine the project that you've created.</source>
          <target state="translated">作成したプロジェクトを確認しましょう。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>library.csproj<ept id="p1">*</ept> file contains the following information:</source>
          <target state="translated"><bpt id="p1">*</bpt>library.csproj<ept id="p1">*</ept> ファイルには、次の情報が含まれています。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This library project will make use of JSON representation of objects, so you'll want to add a reference to the <ph id="ph1">`Newtonsoft.Json`</ph> NuGet package.</source>
          <target state="translated">このライブラリ プロジェクトはオブジェクトの JSON 表現を使用するので、<ph id="ph1">`Newtonsoft.Json`</ph> NuGet パッケージへの参照を追加します。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`dotnet add`</ph> command adds new items to a project.</source>
          <target state="translated"><ph id="ph1">`dotnet add`</ph> コマンドにより、新しい項目がプロジェクトに追加されます。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>To add a reference to a NuGet package, you use the <ph id="ph1">`package`</ph> command and specify the name of the package.</source>
          <target state="translated">NuGet パッケージに参照を追加するには、<ph id="ph1">`package`</ph> コマンドを使用し、パッケージの名前を指定します。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This adds <ph id="ph1">`Newtonsoft.Json`</ph> and its dependencies to the Library project.</source>
          <target state="translated">これにより <ph id="ph1">`Newtonsoft.Json`</ph> とその依存関係がライブラリ プロジェクトに追加されます。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Alternatively, you could manually edit the <bpt id="p1">*</bpt>library.csproj<ept id="p1">*</ept> file and add the following node:</source>
          <target state="translated">あるいは、<bpt id="p1">*</bpt>library.csproj<ept id="p1">*</ept> ファイルを手動で編集し、次のノードを追加できます。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>After you've finished adding those dependencies, you need to install those packages into workspace.</source>
          <target state="translated">これらの依存関係の追加が完了した後、ワークスペースにこれらのパッケージをインストールする必要があります。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Run the <ph id="ph1">`dotnet restore`</ph> command to updates all dependencies, and write a <bpt id="p1">*</bpt>obj/project.assets.json<ept id="p1">*</ept> file under the project directory.</source>
          <target state="translated"><ph id="ph1">`dotnet restore`</ph> コマンドを実行してすべての依存関係を更新し、<bpt id="p1">*</bpt>obj/project.assets.json<ept id="p1">*</ept> ファイルをプロジェクト ディレクトリに書き込みます。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This file contains the full dependency tree of all the dependencies in your project.</source>
          <target state="translated">このファイルには、プロジェクト内のすべての依存関係の完全な依存関係ツリーが含まれています。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>You don't need to read this file, it's used by tools in the .NET Core SDK.</source>
          <target state="translated">このファイルを読む必要はありません。.NET Core SDK のツールによって使用されます。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Now, let's update the C# code.</source>
          <target state="translated">次に、C# のコードを更新します。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Let's create a <ph id="ph1">`Thing`</ph> class that contains one public method.</source>
          <target state="translated">パブリック メソッドを&amp;1; つ含む <ph id="ph1">`Thing`</ph> クラスを作成します。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>This method will return the sum of two numbers, but will do so by converting that number to a JSON string, and then deserializing it.</source>
          <target state="translated">このメソッドは&amp;2; つの数値の合計を返しますが、そのためには、値を JSON 文字列に変換した後、それを逆シリアル化します。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Rename the file <bpt id="p1">*</bpt>Class1.cs<ept id="p1">*</ept> to <bpt id="p2">*</bpt>Thing.cs<ept id="p2">*</ept>.</source>
          <target state="translated">ファイル <bpt id="p1">*</bpt>Class1.cs<ept id="p1">*</ept> の名前を <bpt id="p2">*</bpt>Thing.cs<ept id="p2">*</ept> に変更します。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Then, replace the existing code (for the template-generated Class1) with the following:</source>
          <target state="translated">次に、既存のコード (テンプレートによって生成された Class1) を次のように置き換えます。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This makes use of a number of modern C# features, such as static usings, expression-bodied members, and interpolated strings, that you can learn about in the <bpt id="p1">[</bpt>Learn C#<ept id="p1">](../../csharp/index.md)</ept> section.</source>
          <target state="translated">このコードでは、静的な using、式本体のメンバー、補間文字列など、C# の最新の機能を利用しています。これらについては、<bpt id="p1">[</bpt>C# の詳細<ept id="p1">](../../csharp/index.md)</ept>に関するセクションを参照してください。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Now that you've updated the code, you can build the library using <ph id="ph1">`dotnet build`</ph>.</source>
          <target state="translated">コードを更新したので、<ph id="ph1">`dotnet build`</ph> を使用してライブラリをビルドできます。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>You now have a built <bpt id="p1">*</bpt>library.dll<ept id="p1">*</ept> file under <bpt id="p2">*</bpt>golden/library/bin/Debug/netstandard1.4<ept id="p2">*</ept>.</source>
          <target state="translated">これで <bpt id="p2">*</bpt>golden/library/bin/Debug/netstandard1.4<ept id="p2">*</ept> に <bpt id="p1">*</bpt>library.dll<ept id="p1">*</ept> ファイルがビルドされました。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Writing the test project</source>
          <target state="translated">テスト プロジェクトの作成</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Let's build a test project for this library that you've build.</source>
          <target state="translated">ビルドしたライブラリのテスト プロジェクトを作成します。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Change to the <bpt id="p1">*</bpt>golden<ept id="p1">*</ept> directory.</source>
          <target state="translated"><bpt id="p1">*</bpt>golden<ept id="p1">*</ept> ディレクトリに移動します。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Run <ph id="ph1">`dotnet new xunit -o test-library`</ph> to create a new test project.</source>
          <target state="translated"><ph id="ph1">`dotnet new xunit -o test-library`</ph> を実行して新しいテスト プロジェクトを作成します。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>You'll want to add this project to the solution as well by running <ph id="ph1">`dotnet sln add test-library/test-library.csproj`</ph>.</source>
          <target state="translated"><ph id="ph1">`dotnet sln add test-library/test-library.csproj`</ph> を実行し、このプロジェクトをソリューションに追加することもできます。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>You'll need to add a dependency node for the library you wrote in the steps above.</source>
          <target state="translated">前の手順で作成したライブラリの依存関係ノードを追加する必要があります。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`dotnet add reference`</ph> command does that:</source>
          <target state="translated"><ph id="ph1">`dotnet add reference`</ph> コマンドで次が実行されます。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Or, you can manually edit the <bpt id="p1">*</bpt>test-library.csproj<ept id="p1">*</ept> file and add the following node:</source>
          <target state="translated">あるいは、<bpt id="p1">*</bpt>test-library.csproj<ept id="p1">*</ept> ファイルを手動で編集し、次のノードを追加できます。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`library`</ph> node specifies that this dependency should resolve to a project in the current workspace.</source>
          <target state="translated"><ph id="ph1">`library`</ph> ノードでは、この依存関係を現在のワークスペースのプロジェクトに解決する必要があることが指定されています。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Without explicitly specifying this, it's possible that the test project would build against a NuGet package of the same name.</source>
          <target state="translated">これを明示的に指定しないと、同じ名前の NuGet パッケージに対してテスト プロジェクトがビルドされる可能性があります。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Now that the dependencies have been properly configured, let's create the tests for your library.</source>
          <target state="translated">依存関係を正しく構成したので、ライブラリのテストを作成します。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Open <bpt id="p1">*</bpt>UnitTest1.cs<ept id="p1">*</ept> and replace its contents with the following code:</source>
          <target state="translated"><bpt id="p1">*</bpt>UnitTest1.cs<ept id="p1">*</ept> を開き、内容を次のコードに置き換えます。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Now, run <ph id="ph1">`dotnet restore`</ph> and <ph id="ph2">`dotnet build`</ph>.</source>
          <target state="translated">次に、<ph id="ph1">`dotnet restore`</ph> と <ph id="ph2">`dotnet build`</ph> を実行します。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>These commands will recursively find all projects to restore dependencies and build them.</source>
          <target state="translated">これらのコマンドにより、依存関係を復元し、ビルドするためのすべてのプロジェクトが再帰的に検索されます。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Finally, run <ph id="ph1">`dotnet test test-library/test-library.csproj`</ph> to run the tests.</source>
          <target state="translated">最後に、<ph id="ph1">`dotnet test test-library/test-library.csproj`</ph> を実行し、テストを実行します。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The xUnit console test runner will run the one test, and report that it is passing.</source>
          <target state="translated">XUnit コンソールのテスト ランナーは、1 つのテストを実行して合格したことをレポートします。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Writing the console app</source>
          <target state="translated">コンソール アプリの作成</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>In your terminal run <ph id="ph1">`dotnet new console -o app`</ph> to create a new console application.</source>
          <target state="translated">端末で <ph id="ph1">`dotnet new console -o app`</ph> を実行して新しいコンソール アプリケーションを作成します。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>This project is also part of the solution, so run <ph id="ph1">`dotnet sln add app/app.csproj`</ph> to add the project to the solution.</source>
          <target state="translated">このプロジェクトはソリューションの一部でもあります。そのため、<ph id="ph1">`dotnet sln add app/app.csproj`</ph> を実行し、プロジェクトをソリューションに追加します。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Your console application depends on the library you built and tested in the previous steps.</source>
          <target state="translated">コンソール アプリケーションは、前の手順でビルドしてテストしたライブラリに依存します。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>You need to indicate that by running <ph id="ph1">`dotnet add reference`</ph> again:</source>
          <target state="translated"><ph id="ph1">`dotnet add reference`</ph> をもう一度実行し、それを示す必要があります。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Run <ph id="ph1">`dotnet restore`</ph> to restore all dependencies.</source>
          <target state="translated"><ph id="ph1">`dotnet restore`</ph> を実行してすべての依存関係を復元します。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Open <bpt id="p1">*</bpt>program.cs<ept id="p1">*</ept> and replace the contents of the <ph id="ph1">`Main`</ph> method with this line:</source>
          <target state="translated"><bpt id="p1">*</bpt>program.cs<ept id="p1">*</ept> を開き、<ph id="ph1">`Main`</ph> メソッドの内容を次の行に置き換えます。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>You'll need to add a couple <ph id="ph1">`using`</ph> directives to the top of the file:</source>
          <target state="translated">2 つの <ph id="ph1">`using`</ph> ディレクティブをファイルの先頭に追加する必要があります。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Then, run <ph id="ph1">`dotnet build`</ph>.</source>
          <target state="translated">その後、<ph id="ph1">`dotnet build`</ph> を実行します。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>That creates the assemblies, and you can type <ph id="ph1">`dotnet run -p app/app.csproj`</ph> to run the executable.</source>
          <target state="translated">アセンブリが作成されるので、「<ph id="ph1">`dotnet run -p app/app.csproj`</ph>」と入力して実行可能ファイルを実行できます。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`-p`</ph> argument to <ph id="ph2">`dotnet run`</ph> specifies the project for the main application.</source>
          <target state="translated"><ph id="ph2">`dotnet run`</ph> の <ph id="ph1">`-p`</ph> 引数は、メイン アプリケーションのプロジェクトを指定します。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Debugging your application</source>
          <target state="translated">アプリケーションのデバッグ</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>You can debug your code in VS Code using the C# extension.</source>
          <target state="translated">C# の拡張機能を使用して VS Code でコードをデバッグできます。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>You install this extension by pressing <ph id="ph1">`F1`</ph> to open the VS Code palette.</source>
          <target state="translated">この拡張機能をインストールするには、<ph id="ph1">`F1`</ph> キーを押して VS Code パレットを開きます。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Type <ph id="ph1">`ext install`</ph> to see the list of extensions.</source>
          <target state="translated">「<ph id="ph1">`ext install`</ph>」と入力して、拡張機能の一覧を表示します。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Select the C# extension.</source>
          <target state="translated">C# 拡張機能を選択します。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>(More details are available on the <bpt id="p1">[</bpt>Visual Studio Code C# Extension documentation<ept id="p1">](https://github.com/OmniSharp/omnisharp-vscode/blob/master/debugger.md)</ept> page.)</source>
          <target state="translated">詳細については、<bpt id="p1">[</bpt>Visual Studio Code C# 拡張機能のドキュメント<ept id="p1">](https://github.com/OmniSharp/omnisharp-vscode/blob/master/debugger.md)</ept>を参照してください。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>After you install the extension, VS Code will ask that you restart the application to load the new extension.</source>
          <target state="translated">拡張機能をインストールした後、VS Code でアプリケーションを再起動して新しい拡張機能を読み込むように求められます。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Once the extension is installed, you can open the debugger tab (see figure).</source>
          <target state="translated">拡張機能のインストールが済むと、デバッガー タブを開くことができます (図を参照)。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>VS Code Debugger</source>
          <target state="translated">VS Code のデバッガー</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Set a breakpoint at the <ph id="ph1">`WriteLine`</ph> statement in <ph id="ph2">`Main`</ph>.</source>
          <target state="translated"><ph id="ph2">`Main`</ph> の <ph id="ph1">`WriteLine`</ph> ステートメントにブレークポイントを設定します。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>You do this by pressing the <ph id="ph1">`F9`</ph> key, or by clicking the mouse in the left margin on the line you want the breakpoint.</source>
          <target state="translated">そのためには、<ph id="ph1">`F9`</ph> キーを押すか、ブレークポイントを設定する行の左側の余白をクリックします。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Open the debugger by pressing the debug icon on the left of the VS Code screen (see figure).</source>
          <target state="translated">VS Code 画面左側のデバッグ アイコンをクリックしてデバッガーを開きます (図を参照)。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Then, press the Play button to start the application under the debugger.</source>
          <target state="translated">その後、[再生] ボタンをクリックしてデバッガーでアプリケーションを開始します。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>You should hit the breakpoint.</source>
          <target state="translated">ブレークポイントがヒットします。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Step into the <ph id="ph1">`Get`</ph> method and make sure that you have passed in the correct arguments.</source>
          <target state="translated"><ph id="ph1">`Get`</ph> メソッドにステップ インし、正しい引数を渡したことを確認します。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Make sure that the answer is actually 42.</source>
          <target state="translated">答えが実際に 42 であることを確認してください。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>