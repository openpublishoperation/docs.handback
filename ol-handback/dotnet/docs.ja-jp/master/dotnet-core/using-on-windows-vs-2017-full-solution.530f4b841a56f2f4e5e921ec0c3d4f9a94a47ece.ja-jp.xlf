<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-71050dc" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02c48cd7e2fc551b82bb7afa53a3dd228e02dca1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\preview3\tutorials\using-on-windows-vs-2017-full-solution.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">44e2182ca54f1059624de644a8baf01f08b52212</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6ca080e8e237db36659b3126e7976901ffd2f084</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Building a complete .NET Core solution on Windows, using Visual Studio 2017 | Microsoft Docs</source>
          <target state="translated">Visual Studio 2017 を使用した Windows での完全な .NET Core ソリューションの構築 | Microsoft Docs</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Building a complete .NET Core solution on Windows, using Visual Studio 2017</source>
          <target state="translated">Visual Studio 2017 を使用した Windows での完全な .NET Core ソリューションの構築</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Building a complete .NET Core solution on Windows, using Visual Studio 2017 (Tooling Preview 4)</source>
          <target state="translated">Visual Studio 2017 を使用した Windows での完全な .NET Core ソリューションの構築 (Tooling Preview 4)</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This topic applies to Visual Studio 2017 RC - .NET Core Tools Preview 4.</source>
          <target state="translated">このトピックは、Visual Studio 2017 RC - .NET Core Tools Preview 4 を対象としています。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For the .NET Core Tools Preview 2 version, see the <bpt id="p1">[</bpt>Getting started with .NET Core on Windows, using Visual Studio 2015<ept id="p1">](../../tutorials/using-on-windows.md)</ept> topic.</source>
          <target state="translated">.NET Core Tools Preview 2 バージョンについては、「<bpt id="p1">[</bpt>Visual Studio 2015 を使用した Windows での .NET Core の概要<ept id="p1">](../../tutorials/using-on-windows.md)</ept>」トピックを参照してください。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Visual Studio 2017 provides a full-featured development environment for developing .NET Core applications.</source>
          <target state="translated">Visual Studio 2017 は、.NET Core アプリケーション開発用の機能をすべて備えた開発環境を提供します。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The procedures in this document describe the steps necessary to build a typical .NET Core solution that includes reusable libraries, testing, and using third-party libraries.</source>
          <target state="translated">このドキュメントでは、再利用可能なライブラリ、サードパーティ製ライブラリのテストと使用を含む、一般的な .NET Core ソリューションをビルドするために必要な手順について説明します。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
          <target state="translated">前提条件</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Follow the instructions on <bpt id="p1">[</bpt>our prerequisites page<ept id="p1">](../windows-prerequisites.md)</ept> to update your environment.</source>
          <target state="translated"><bpt id="p1">[</bpt>前提条件のページ<ept id="p1">](../windows-prerequisites.md)</ept>の指示に従って、環境を更新します。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>A solution using only .NET Core projects</source>
          <target state="translated">.NET Core プロジェクトのみを使用するソリューション</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Writing the library</source>
          <target state="translated">ライブラリの作成</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In Visual Studio, choose <bpt id="p1">**</bpt>File<ept id="p1">**</ept>, <bpt id="p2">**</bpt>New<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Project<ept id="p3">**</ept>.</source>
          <target state="translated">Visual Studio で、<bpt id="p1">**</bpt>[ファイル]<ept id="p1">**</ept>、<bpt id="p2">**</bpt>[新規作成]<ept id="p2">**</ept>、<bpt id="p3">**</bpt>[プロジェクト]<ept id="p3">**</ept> の順に選択します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>New Project<ept id="p1">**</ept> dialog, expand the <bpt id="p2">**</bpt>Visual C#<ept id="p2">**</ept> node and choose the <bpt id="p3">**</bpt>.NET Core<ept id="p3">**</ept> node, and then choose <bpt id="p4">**</bpt>Class Library (.NET Standard)<ept id="p4">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>[新しいプロジェクト]<ept id="p1">**</ept> ダイアログで <bpt id="p2">**</bpt>[Visual C#]<ept id="p2">**</ept> ノードを展開し、<bpt id="p3">**</bpt>[.NET Core]<ept id="p3">**</ept> ノードを選択して <bpt id="p4">**</bpt>[クラス ライブラリ (.NET Standard)]<ept id="p4">**</ept> を選択します。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Name the project "Library" and the solution "Golden".</source>
          <target state="translated">プロジェクトの名前を "Library" に、ソリューションの名前を "Golden" に設定します。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Leave <bpt id="p1">**</bpt>Create directory for solution<ept id="p1">**</ept> checked.</source>
          <target state="translated"><bpt id="p1">**</bpt>[ソリューションのディレクトリを作成]<ept id="p1">**</ept> はオンのままにします。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>OK<ept id="p1">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>[OK]<ept id="p1">**</ept> をクリックします。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In Solution Explorer, open the context menu for the <bpt id="p1">**</bpt>Dependencies<ept id="p1">**</ept> node and choose <bpt id="p2">**</bpt>Manage NuGet Packages<ept id="p2">**</ept>.</source>
          <target state="translated">ソリューション エクスプローラーで <bpt id="p1">**</bpt>[依存関係]<ept id="p1">**</ept> ノードのコンテキスト メニューを開き、<bpt id="p2">**</bpt>[NuGet パッケージの管理]<ept id="p2">**</ept> を選択します。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Choose "nuget.org" as the <bpt id="p1">**</bpt>Package source<ept id="p1">**</ept>, and choose the <bpt id="p2">**</bpt>Browse<ept id="p2">**</ept> tab.</source>
          <target state="translated"><bpt id="p1">**</bpt>[パッケージ ソース]<ept id="p1">**</ept> として "nuget.org" を選択し、<bpt id="p2">**</bpt>[参照]<ept id="p2">**</ept> タブを選択します。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Browse for <bpt id="p1">**</bpt>Newtonsoft.Json<ept id="p1">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>Newtonsoft.Json<ept id="p1">**</ept> を参照します。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Install<ept id="p1">**</ept>, and accept the license agreement.</source>
          <target state="translated"><bpt id="p1">**</bpt>[インストール]<ept id="p1">**</ept> をクリックして、使用許諾契約に同意します。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The package should now appear under <bpt id="p1">**</bpt>Dependencies/NuGet<ept id="p1">**</ept> and be automatically restored.</source>
          <target state="translated">これで、<bpt id="p1">**</bpt>[依存関係] の [NuGet]<ept id="p1">**</ept> にパッケージが表示され、自動的に復元されるようになります。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Rename the <ph id="ph1">`Class1.cs`</ph> file to <ph id="ph2">`Thing.cs`</ph>.</source>
          <target state="translated">ファイルの名前を <ph id="ph1">`Class1.cs`</ph> から <ph id="ph2">`Thing.cs`</ph> に変更します。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Accept the rename of the class.</source>
          <target state="translated">クラス名の変更をそのまま使用します。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Add a method: <ph id="ph1">`public int Get(int number) =&gt; Newtonsoft.Json.JsonConvert.DeserializeObject&lt;int&gt;($"{number}");`</ph></source>
          <target state="translated">メソッドの追加: <ph id="ph1">`public int Get(int number) =&gt; Newtonsoft.Json.JsonConvert.DeserializeObject&lt;int&gt;($"{number}");`</ph></target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>Build<ept id="p1">**</ept> menu, choose <bpt id="p2">**</bpt>Build Solution<ept id="p2">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>[ビルド]<ept id="p1">**</ept> メニューの <bpt id="p2">**</bpt>[ソリューションのビルド]<ept id="p2">**</ept>をクリックします。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The solution should build without error.</source>
          <target state="translated">ソリューションがエラーのない状態でビルドされます。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Writing the test project</source>
          <target state="translated">テスト プロジェクトの作成</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In Solution Explorer, open the context menu for the <bpt id="p1">**</bpt>Solution<ept id="p1">**</ept> node and choose <bpt id="p2">**</bpt>Add<ept id="p2">**</ept>, <bpt id="p3">**</bpt>New Project<ept id="p3">**</ept>.</source>
          <target state="translated">ソリューション エクスプローラーで、<bpt id="p1">**</bpt>[ソリューション]<ept id="p1">**</ept> ノードのコンテキスト メニューを開き、<bpt id="p2">**</bpt>[追加]<ept id="p2">**</ept>、<bpt id="p3">**</bpt>[新しいプロジェクト]<ept id="p3">**</ept> の順に選択します。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>New Project<ept id="p1">**</ept> dialog, under <bpt id="p2">**</bpt>Visual C# / .NET Core<ept id="p2">**</ept>, choose <bpt id="p3">**</bpt>Unit Test Project (.NET Core)<ept id="p3">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>[新しいプロジェクト]<ept id="p1">**</ept> ダイアログ ボックスにある <bpt id="p2">**</bpt>[Visual C#] の [.NET Core]<ept id="p2">**</ept> で、<bpt id="p3">**</bpt>[単体テスト プロジェクト (.NET Core)]<ept id="p3">**</ept> を選択します。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Name it "TestLibrary" and click OK.</source>
          <target state="translated">"TestLibrary" という名前を付けて [OK] をクリックします。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>TestLibrary<ept id="p1">**</ept> project, open the context menu for the <bpt id="p2">**</bpt>Dependencies<ept id="p2">**</ept> node and choose <bpt id="p3">**</bpt>Add Reference<ept id="p3">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>TestLibrary<ept id="p1">**</ept> プロジェクトで、<bpt id="p2">**</bpt>[依存関係]<ept id="p2">**</ept> ノードのコンテキスト メニューを開き、<bpt id="p3">**</bpt>[参照の追加]<ept id="p3">**</ept> を選択します。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Projects<ept id="p1">**</ept>, then check the Library project and click OK.</source>
          <target state="translated"><bpt id="p1">**</bpt>[プロジェクト]<ept id="p1">**</ept> をクリックし、ライブラリ プロジェクトを確認して [OK] をクリックします。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This adds a reference to your library from the test project.</source>
          <target state="translated">これで、テスト プロジェクトからライブラリに参照が追加されます。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Rename the <ph id="ph1">`UnitTest1.cs`</ph> file to <ph id="ph2">`LibraryTests.cs`</ph> and accept the class rename.</source>
          <target state="translated"><ph id="ph1">`UnitTest1.cs`</ph> ファイルの名前を <ph id="ph2">`LibraryTests.cs`</ph> に変更して、クラスの名前変更を承諾します。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Add <ph id="ph1">`using Library;`</ph> to the top of the file, and replace the <ph id="ph2">`TestMethod1`</ph> method with the following code:</source>
          <target state="translated">ファイルの先頭に <ph id="ph1">`using Library;`</ph> を追加し、<ph id="ph2">`TestMethod1`</ph> メソッドを次のコードに置き換えます。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You should now be able to build the solution.</source>
          <target state="translated">ソリューションをビルドできるようになります。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>Test<ept id="p1">**</ept> menu, choose <bpt id="p2">**</bpt>Windows<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Test Explorer<ept id="p3">**</ept> in order to get the test explorer window into your workspace.</source>
          <target state="translated"><bpt id="p1">**</bpt>[テスト]<ept id="p1">**</ept> メニューで、<bpt id="p2">**</bpt>[Windows]<ept id="p2">**</ept>、<bpt id="p3">**</bpt>[テスト エクスプローラー]<ept id="p3">**</ept> の順に選択し、テスト エクスプローラー ウィンドウをワークスペースに取り込みます。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>After a few seconds, the <ph id="ph1">`ThingGetsObjectValFromNumber`</ph> test should appear in the test explorer.</source>
          <target state="translated">数秒後に、<ph id="ph1">`ThingGetsObjectValFromNumber`</ph> テストがテスト エクスプローラーに表示されます。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Choose <bpt id="p1">**</bpt>Run All<ept id="p1">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>[すべて実行]<ept id="p1">**</ept>をクリックします。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The test should pass.</source>
          <target state="translated">テストで問題がないことを確認します。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Writing the console app</source>
          <target state="translated">コンソール アプリの作成</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>In Solution Explorer, open the context menu for the solution, and add a new <bpt id="p1">**</bpt>Console App (.NET Core)<ept id="p1">**</ept> project.</source>
          <target state="translated">ソリューション エクスプローラーで、ソリューションのコンテキスト メニューを開き、新しい<bpt id="p1">**</bpt>コンソール アプリケーション (.NET Core)<ept id="p1">**</ept> プロジェクトを追加します。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Name it "App".</source>
          <target state="translated">それに "App" という名前を付けます。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>App<ept id="p1">**</ept> project, open the context menu for the <bpt id="p2">**</bpt>Dependencies<ept id="p2">**</ept> node and choose <bpt id="p3">**</bpt>Add<ept id="p3">**</ept>,  <bpt id="p4">**</bpt>Reference<ept id="p4">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>App<ept id="p1">**</ept> プロジェクトで、<bpt id="p2">**</bpt>[依存関係]<ept id="p2">**</ept> ノードのコンテキスト メニューを開き、<bpt id="p3">**</bpt>[追加]<ept id="p3">**</ept>、<bpt id="p4">**</bpt>[参照]<ept id="p4">**</ept> の順に選択します。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Reference Manager<ept id="p1">**</ept> dialog, check <bpt id="p2">**</bpt>Library<ept id="p2">**</ept> under the <bpt id="p3">**</bpt>Projects<ept id="p3">**</ept>, <bpt id="p4">**</bpt>Solution<ept id="p4">**</ept> node, and then click <bpt id="p5">**</bpt>OK<ept id="p5">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>[参照マネージャー]<ept id="p1">**</ept> ダイアログ ボックスで、<bpt id="p3">**</bpt>[プロジェクト]<ept id="p3">**</ept>、<bpt id="p4">**</bpt>[ソリューション]<ept id="p4">**</ept> ノードの <bpt id="p2">**</bpt>[ライブラリ]<ept id="p2">**</ept> をオンにして、<bpt id="p5">**</bpt>[OK]<ept id="p5">**</ept> をクリックします。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Open the context menu for the <bpt id="p1">**</bpt>App<ept id="p1">**</ept> node and choose <bpt id="p2">**</bpt>Set as StartUp Project<ept id="p2">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>App<ept id="p1">**</ept> ノードのコンテキスト メニューを開き、<bpt id="p2">**</bpt>[スタートアップ プロジェクトに設定]<ept id="p2">**</ept> を選択します。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>This ensures that hitting F5 or CTRL+F5 will start the console app.</source>
          <target state="translated">これで、F5 キーまたは Ctrl + F5 キーを押したときにコンソール アプリケーションが起動します。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Open the <ph id="ph1">`Program.cs`</ph> file, add a <ph id="ph2">`using Library;`</ph> directive to the top of the file, and then add <ph id="ph3">`Console.WriteLine($"The answer is {new Thing().Get(42)}.");`</ph> to the <ph id="ph4">`Main`</ph> method.</source>
          <target state="translated"><ph id="ph1">`Program.cs`</ph> ファイルを開き、<ph id="ph2">`using Library;`</ph> ディレクティブをファイルの先頭に追加して、<ph id="ph3">`Console.WriteLine($"The answer is {new Thing().Get(42)}.");`</ph> を <ph id="ph4">`Main`</ph> メソッドに追加します。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Set a breakpoint after the line that you just added.</source>
          <target state="translated">追加した行の後にブレークポイントを設定します。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Press F5 to run the application..</source>
          <target state="translated">F5 キーを押してアプリケーションを実行します。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The application should build without error, and should hit the breakpoint.</source>
          <target state="translated">アプリケーションがエラーのない状態でビルドされ、ブレークポイントがヒットします。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>You should also be able to check that the application output "The answer is 42.".</source>
          <target state="translated">また、アプリケーションが "The answer is 42." と出力することを確認します。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>