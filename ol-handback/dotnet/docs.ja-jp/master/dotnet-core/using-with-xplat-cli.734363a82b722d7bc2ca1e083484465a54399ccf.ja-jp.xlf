<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b5c25fc" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">240061d2515c14ba7ab733f4cc9e7e38fb2a5c7c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\tutorials\using-with-xplat-cli.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">50f255f8880345510e614e3e132acf26be8dcb51</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">841571b86aa8d1a6231726592248ae06e34dfb1d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Getting started with .NET Core using the CLI | Microsoft Docs</source>
          <target state="translated">CLI を使用する .NET Core に関する概要 | Microsoft Docs</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>A step-by-step tutorial showing how to get started with .NET Core on Windows, Linux, or macOS using the .NET Core command-line interface (CLI).</source>
          <target state="translated">Windows、Linux、または macOS の .NET Core での、.NET Core コマンド ライン インターフェイス (CLI) の使用方法を段階的に説明するチュートリアル。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET Core, CLI</source>
          <target state="translated">.NET Core, CLI</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Getting started with .NET Core on Windows/Linux/macOS using the command line</source>
          <target state="translated">Windows/Linux/macOS の .NET Core でのコマンド ラインの使用に関する概要</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This topic will show you how to start developing cross-platforms apps in your machine using the .NET Core CLI tools.</source>
          <target state="translated">このトピックでは、.NET Core CLI ツールを利用し、自分のコンピューターでプラットフォームに依存しないアプリを開発する方法について説明します。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>If you're unfamiliar with the .NET Core CLI toolset, read the <bpt id="p1">[</bpt>.NET Core SDK overview<ept id="p1">](../tools/index.md)</ept>.</source>
          <target state="translated">.NET Core CLI ツールセットに慣れていない場合は、「<bpt id="p1">[</bpt>.NET Core SDK overview<ept id="p1">](../tools/index.md)</ept>」(.NET Core SDK の概要) を参照してください。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
          <target state="translated">必須コンポーネント</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>.NET Core SDK 1.0.0<ept id="p1">](https://www.microsoft.com/net/download/core)</ept>.</source>
          <target state="translated"><bpt id="p1">[</bpt>.NET Core SDK 1.0.0<ept id="p1">](https://www.microsoft.com/net/download/core)</ept>。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A text editor or code editor of your choice.</source>
          <target state="translated">ユーザーが選んだテキスト エディターまたはコード エディター。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Hello, Console App!</source>
          <target state="translated">Hello コンソール アプリ</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>First, navigate to or create a new folder with a name you like.</source>
          <target state="translated">最初に、適切な名前のフォルダーに移動するか、新しく作成します。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Hello<ept id="p1">*</ept> is the name chosen for the sample code, which can be found <bpt id="p2">[</bpt>here<ept id="p2">](https://github.com/dotnet/docs/tree/master/samples/core/console-apps/HelloMsBuild)</ept>.</source>
          <target state="translated">サンプル コードでは <bpt id="p1">*</bpt>Hello<ept id="p1">*</ept> という名前を使用しています (<bpt id="p2">[</bpt>こちら<ept id="p2">](https://github.com/dotnet/docs/tree/master/samples/core/console-apps/HelloMsBuild)</ept>を参照)。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Open up a command prompt and type the following:</source>
          <target state="translated">コマンド プロンプトを開いて次のように入力します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Let's do a quick walkthrough:</source>
          <target state="translated">簡単に説明します。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">`dotnet new`</ph><ept id="p1">](../tools/dotnet-new.md)</ept> creates an up-to-date <ph id="ph2">`Hello.csproj`</ph> project file with the dependencies necessary to build a console app.</source>
          <target state="translated"><bpt id="p1">[</bpt><ph id="ph1">`dotnet new`</ph><ept id="p1">](../tools/dotnet-new.md)</ept> は、コンソール アプリのビルドに必要な依存関係を含む最新の <ph id="ph2">`Hello.csproj`</ph> プロジェクト ファイルを作成します。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>It also creates a <ph id="ph1">`Program.cs`</ph>, a basic file containing the entry point for the application.</source>
          <target state="translated">また、アプリケーションのエントリ ポイントを含む基本的なファイルである <ph id="ph1">`Program.cs`</ph> も作成します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Hello.csproj`</ph>:</source>
          <target state="translated"><ph id="ph1">`Hello.csproj`</ph>:</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The project file specifies everything that's needed to restore dependencies and build the program.</source>
          <target state="translated">プロジェクト ファイルでは、依存関係を復元し、プログラムをビルドするために必要なすべてのものを指定します。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`OutputType`</ph> tag specifies that we're building an executable, in other words a console application.</source>
          <target state="translated"><ph id="ph1">`OutputType`</ph> タグは、実行可能ファイル (つまり、コンソール アプリケーション) をビルドすることを示します。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`TargetFramework`</ph> tag specifies what .NET runtime we're targeting.</source>
          <target state="translated"><ph id="ph1">`TargetFramework`</ph> タグは、対象の .NET ランタイムを指定します。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In an advance scenario, you can specify multiple target frameworks and build to all those in a single operation.</source>
          <target state="translated">高度なシナリオでは、複数の対象フレームワークを指定し、1 回の操作でそれらすべてにビルドすることができます。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In this tutorial, we'll stick to building only for .NET Core 1.0.</source>
          <target state="translated">このチュートリアルでは、.NET Core 1.0 の場合のビルドについてのみ説明します。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Program.cs`</ph>:</source>
          <target state="translated"><ph id="ph1">`Program.cs`</ph>:</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Program.cs<ept id="p2">](../../../samples/core/console-apps/HelloMsBuild/Program.cs)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Program.cs<ept id="p2">](../../../samples/core/console-apps/HelloMsBuild/Program.cs)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The program starts by <ph id="ph1">`using System`</ph>, which means "bring everything in the <ph id="ph2">`System`</ph> namespace into scope for this file".</source>
          <target state="translated">プログラムは <ph id="ph1">`using System`</ph> で始まります。これは、"<ph id="ph2">`System`</ph> 名前空間のすべてがこのファイルのスコープになる" こと意味します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`System`</ph> namespace includes basic constructs such as <ph id="ph2">`string`</ph>, or numeric types.</source>
          <target state="translated"><ph id="ph1">`System`</ph> 名前空間には、<ph id="ph2">`string`</ph> などの基本的な構造、または数値型が含まれます。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>We then define a namespace called <ph id="ph1">`Hello`</ph>.</source>
          <target state="translated">次に、<ph id="ph1">`Hello`</ph> という名前空間を定義します。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You can change this to anything you want.</source>
          <target state="translated">これを必要なものに変更できます。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>A class named <ph id="ph1">`Program`</ph> is defined within that namespace, with a <ph id="ph2">`Main`</ph> method that takes an array of strings as its argument.</source>
          <target state="translated"><ph id="ph1">`Program`</ph> という名前のクラスは、引数として文字列配列を使用する <ph id="ph2">`Main`</ph> メソッドで、その名前空間内に定義されます。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This array contains the list of arguments passed in when the compiled program is called.</source>
          <target state="translated">この配列には、コンパイル済みプログラムの呼び出し時に渡される引数のリストが含まれます。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>As it is, this array is not used: all the program is doing is to write "Hello World!"</source>
          <target state="translated">実際は、この配列は使用されません。プログラムはコンソールに "Hello World!" と</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>to the console.</source>
          <target state="translated">記述するだけです。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Later, we'll make changes to the code that will make use of this argument.</source>
          <target state="translated">後に、この引数を利用するようにコードを変更します。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">`dotnet restore`</ph><ept id="p1">](../tools/dotnet-restore.md)</ept> calls into <bpt id="p2">[</bpt>NuGet<ept id="p2">](http://nuget.org)</ept> (.NET package manager) to restore the tree of dependencies.</source>
          <target state="translated"><bpt id="p1">[</bpt><ph id="ph1">`dotnet restore`</ph><ept id="p1">](../tools/dotnet-restore.md)</ept> は、<bpt id="p2">[</bpt>NuGet<ept id="p2">](http://nuget.org)</ept> (.NET パッケージ マネージャー) を参照して依存関係のツリーを復元します。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>NuGet analyzes the <bpt id="p1">*</bpt>Hello.csproj<ept id="p1">*</ept> file, downloads the dependencies stated in the file (or grabs them from a cache on your machine), and writes the <bpt id="p2">*</bpt>obj/project.assets.json<ept id="p2">*</ept> file.</source>
          <target state="translated">NuGet は、<bpt id="p1">*</bpt>Hello.csproj<ept id="p1">*</ept> ファイルを分析し、ファイルに記載されている依存関係をダウンロードして (またはコンピューターのキャッシュから取得して)、<bpt id="p2">*</bpt>obj/project.assets.json<ept id="p2">*</ept> ファイルを書き込みます。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>project.assets.json<ept id="p1">*</ept> file is necessary to be able to compile and run.</source>
          <target state="translated"><bpt id="p1">*</bpt>project.assets.json<ept id="p1">*</ept> ファイルをコンパイルして実行できる必要があります。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>project.assets.json<ept id="p1">*</ept> file is a persisted and complete set of the graph of NuGet dependencies and other information describing an app.</source>
          <target state="translated"><bpt id="p1">*</bpt>project.assets.json<ept id="p1">*</ept> ファイルは、NuGet の依存関係およびアプリについて記述するその他の情報のグラフの永続的で完全なセットです。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>This file is read by other tools, such as <bpt id="p1">[</bpt><ph id="ph1">`dotnet build`</ph><ept id="p1">](../tools/dotnet-build.md)</ept> and <bpt id="p2">[</bpt><ph id="ph2">`dotnet run`</ph><ept id="p2">](../tools/dotnet-run.md)</ept>, enabling them to process the source code with a correct set of NuGet dependencies and binding resolutions.</source>
          <target state="translated">このファイルは、<bpt id="p1">[</bpt><ph id="ph1">`dotnet build`</ph><ept id="p1">](../tools/dotnet-build.md)</ept> や <bpt id="p2">[</bpt><ph id="ph2">`dotnet run`</ph><ept id="p2">](../tools/dotnet-run.md)</ept> などの他のツールによって読み取られ、これらのツールが NuGet の依存関係とバインド解決の正しいセットでソース コードを処理できるようにします。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">`dotnet run`</ph><ept id="p1">](../tools/dotnet-run.md)</ept> calls <bpt id="p2">[</bpt><ph id="ph2">`dotnet build`</ph><ept id="p2">](../tools/dotnet-build.md)</ept> to ensure that the build targets have been built, and then calls <ph id="ph3">`dotnet &lt;assembly.dll&gt;`</ph> to run the target application.</source>
          <target state="translated"><bpt id="p1">[</bpt><ph id="ph1">`dotnet run`</ph><ept id="p1">](../tools/dotnet-run.md)</ept> は、<bpt id="p2">[</bpt><ph id="ph2">`dotnet build`</ph><ept id="p2">](../tools/dotnet-build.md)</ept> を呼び出してビルド ターゲットがビルドされていることを確認した後、<ph id="ph3">`dotnet &lt;assembly.dll&gt;`</ph> を呼び出してターゲット アプリケーションを実行します。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Alternatively, you can also execute <bpt id="p1">[</bpt><ph id="ph1">`dotnet build`</ph><ept id="p1">](../tools/dotnet-build.md)</ept> to compile the code without running the build console applications.</source>
          <target state="translated"><bpt id="p1">[</bpt><ph id="ph1">`dotnet build`</ph><ept id="p1">](../tools/dotnet-build.md)</ept> を実行し、ビルド コンソール アプリケーションを実行しないでコードをコンパイルすることもできます。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This results in a compiled application as a DLL file that can be run with <ph id="ph1">`dotnet bin\Debug\netcoreapp1.0\Hello.dll`</ph> on Windows (use <ph id="ph2">`/`</ph> for non-Windows systems).</source>
          <target state="translated">これで、Windows で <ph id="ph1">`dotnet bin\Debug\netcoreapp1.0\Hello.dll`</ph> を使用して (Windows 以外のシステムの場合は <ph id="ph2">`/`</ph> を使用して) 実行できる DLL ファイルとしてアプリケーションがコンパイルされます。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>You may specify also specify arguments to the application as you'll see later on the topic.</source>
          <target state="translated">アプリケーションには引数を指定することもできます。それについてはこのトピックの後半で説明します。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>As an advanced scenario, it's possible to build the application as a self-contained set of platform-specific files that can be deployed and run to a machine that doesn't necessarily have .NET Core installed.</source>
          <target state="translated">高度なシナリオでは、展開可能なプラットフォーム固有のファイルの自己完結型セットとしてアプリケーションをビルドし、.NET Core が必ずしもインストールされているとは限らないコンピューターに対して実行することができます。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>.NET Core Application Deployment<ept id="p1">](../deploying/index.md)</ept> for details.</source>
          <target state="translated">詳細については、「<bpt id="p1">[</bpt>.NET Core アプリケーション展開<ept id="p1">](../deploying/index.md)</ept>」を参照してください。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Augmenting the program</source>
          <target state="translated">プログラムの拡張</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Let's change the program a bit.</source>
          <target state="translated">プログラムを少し変更してみましょう。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Fibonacci numbers are fun, so let's add that in addition to use the argument to greet the person running the app.</source>
          <target state="translated">フィボナッチ数は面白いです。アプリを実行した人に挨拶をする引数を使用するためにフィボナッチ数も追加しましょう。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Replace the contents of your <bpt id="p1">*</bpt>Program.cs<ept id="p1">*</ept>  file with the following code:</source>
          <target state="translated"><bpt id="p1">*</bpt>Program.cs<ept id="p1">*</ept> ファイルの内容を次のコードで置き換えます。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Fibonacci<ept id="p2">](../../../samples/core/console-apps/fibonacci-msbuild/Program.cs)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>フィボナッチ<ept id="p2">](../../../samples/core/console-apps/fibonacci-msbuild/Program.cs)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Execute <bpt id="p1">[</bpt><ph id="ph1">`dotnet build`</ph><ept id="p1">](../tools/dotnet-build.md)</ept> to compile the changes.</source>
          <target state="translated"><bpt id="p1">[</bpt><ph id="ph1">`dotnet build`</ph><ept id="p1">](../tools/dotnet-build.md)</ept> を実行し、変更内容をコンパイルします。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Run the program passing a parameter to the app:</source>
          <target state="translated">アプリにパラメーターを渡すプログラムを実行します。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>And that's it!</source>
          <target state="translated">以上です。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>You can augment <ph id="ph1">`Program.cs`</ph> any way you like.</source>
          <target state="translated">自由に <ph id="ph1">`Program.cs`</ph> を拡張できます。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Working with multiple files</source>
          <target state="translated">複数のファイルの操作</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Single files are fine for simple one-off programs, but if you're building a more complex app, you're probably going to have multiple source files on your project Let's build off of the previous Fibonacci example by caching some Fibonacci values and add some recursive features.</source>
          <target state="translated">単純な&amp;1; 回だけのプログラムには&amp;1; つのファイルで十分ですが、より複雑なアプリを開発する場合、プロジェクトに複数のソース ファイルを用意する必要があるでしょう。先のフィボナッチのサンプルから作成してみましょう。いくつかのフィボナッチ値をキャッシュしてから、再帰機能を追加します。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Add a new file inside the <bpt id="p1">*</bpt>Hello<ept id="p1">*</ept> directory named <bpt id="p2">*</bpt>FibonacciGenerator.cs<ept id="p2">*</ept> with the following code:</source>
          <target state="translated">次のコードを利用し、<bpt id="p2">*</bpt>FibonacciGenerator.cs<ept id="p2">*</ept> という名前の <bpt id="p1">*</bpt>Hello<ept id="p1">*</ept> ディレクトリ内に新しいファイルを追加します。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Fibonacci Generator<ept id="p2">](../../../samples/core/console-apps/FibonacciBetterMsBuild/FibonacciGenerator.cs)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>フィボナッチ ジェネレーター<ept id="p2">](../../../samples/core/console-apps/FibonacciBetterMsBuild/FibonacciGenerator.cs)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Change the <ph id="ph1">`Main`</ph> method in your <bpt id="p1">*</bpt>Program.cs<ept id="p1">*</ept> file to instantiate the new class and call its method as in the following example:</source>
          <target state="translated"><bpt id="p1">*</bpt>Program.cs<ept id="p1">*</ept> ファイルの <ph id="ph1">`Main`</ph> メソッドを変更し、次の例のように新しいクラスをインスタンス化し、そのメソッドを呼び出します。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>New Program.cs<ept id="p2">](../../../samples/core/console-apps/FibonacciBetterMsBuild/Program.cs)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>新しい Program.cs<ept id="p2">](../../../samples/core/console-apps/FibonacciBetterMsBuild/Program.cs)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Execute <bpt id="p1">[</bpt><ph id="ph1">`dotnet build`</ph><ept id="p1">](../tools/dotnet-build.md)</ept> to compile the changes.</source>
          <target state="translated"><bpt id="p1">[</bpt><ph id="ph1">`dotnet build`</ph><ept id="p1">](../tools/dotnet-build.md)</ept> を実行し、変更内容をコンパイルします。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Run your app by executing <bpt id="p1">[</bpt><ph id="ph1">`dotnet run`</ph><ept id="p1">](../tools/dotnet-run.md)</ept>.</source>
          <target state="translated"><bpt id="p1">[</bpt><ph id="ph1">`dotnet run`</ph><ept id="p1">](../tools/dotnet-run.md)</ept> を実行し、アプリを実行します。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The following shows the program output:</source>
          <target state="translated">プログラムの出力は次のようになります。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>And that's it!</source>
          <target state="translated">以上です。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Now, you can start using the basic concepts learned here to create your own programs.</source>
          <target state="translated">これで、ここで学習した基本的な概念を利用し、自分だけのプログラムを作成できます。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Note that the commands and steps shown in this tutorial to run your application are used during development time only.</source>
          <target state="translated">このチュートリアルで紹介した、アプリケーションを実行するコマンドと手順は、開発時にのみ利用されます。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Once you're ready to deploy your app, you'll want to take a look at the different <bpt id="p1">[</bpt>deployment strategies<ept id="p1">](../deploying/index.md)</ept> for .NET Core apps and the <bpt id="p2">[</bpt><ph id="ph1">`dotnet publish`</ph><ept id="p2">](../tools/dotnet-publish.md)</ept> command.</source>
          <target state="translated">アプリの展開に進むときは、.NET Core アプリの別の<bpt id="p1">[</bpt>展開方法<ept id="p1">](../deploying/index.md)</ept>や <bpt id="p2">[</bpt><ph id="ph1">`dotnet publish`</ph><ept id="p2">](../tools/dotnet-publish.md)</ept> コマンドを利用した方が効果的な場合もあります。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>See also</source>
          <target state="translated">関連項目</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Organizing and testing projects with the .NET Core CLI tools<ept id="p1">](testing-with-cli.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>.NET Core CLI ツールを使用したプロジェクトの整理およびテスト<ept id="p1">](testing-with-cli.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>