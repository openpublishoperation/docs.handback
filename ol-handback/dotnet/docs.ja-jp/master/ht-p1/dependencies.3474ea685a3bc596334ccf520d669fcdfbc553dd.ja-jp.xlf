<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-6a73dd2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e04d5f3b08c7f6885ed9914a91fc308234e6ce3b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\preview3\tools\dependencies.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p1</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fc9d6ce3df104e95d7a86ace7cec5ce6b8035a20</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0d0e2fc93c7a1a6541f179cfebce1e46d8f0149b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Managing dependencies in .NET Core Preview 3 tooling</source>
          <target state="translated">.NET Core Preview 3 ツールでの依存関係の管理</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Preview 3 brings about changes to how dependencies are managed</source>
          <target state="translated">Preview 3 では、依存関係の管理方法が変更されています</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>CLI, extensibility, custom commands, .NET Core</source>
          <target state="translated">CLI, 拡張, カスタム コマンド, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Managing dependencies in .NET Core Preview 3 tooling</source>
          <target state="translated">.NET Core Preview 3 ツールでの依存関係の管理</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="translated">概要</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>With the move of .NET Core projects from project.json to csproj and MSBuild, a significant invesment also happened that resulted in unification of the project file and assets that allow tracking of depenencies.</source>
          <target state="translated">.NET Core プロジェクトでの project.json から csproj と MSBuild への移行では、プロジェクト ファイルとアセットの統合も行われ、依存関係を追跡できるようになりました。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For .NET Core projects this is similar to what project.json did.</source>
          <target state="translated">.NET Core プロジェクトでの依存関係の追跡は、project.json と似ています。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>There is no separate JSON or XML file that tracks NuGet dependencies.</source>
          <target state="translated">NuGet の依存関係を追跡するための独立した JSON または XML ファイルはありません。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>With this change, we've also introduced another type of <bpt id="p1">*</bpt>reference<ept id="p1">*</ept> into the csproj syntax called the <ph id="ph1">`&lt;PackageReference&gt;`</ph>.</source>
          <target state="translated">この変更により、<ph id="ph1">`&lt;PackageReference&gt;`</ph> と呼ばれる別の<bpt id="p1">*</bpt>参照<ept id="p1">*</ept>の型も csproj 構文に導入されました。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This document describes the new reference type.</source>
          <target state="translated">ここでは、新しい参照型について説明します。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>It also shows how to add a package dependency using this new reference type to your project.</source>
          <target state="translated">また、この新しい参照型を使ってプロジェクトにパッケージの依存関係を追加する方法も示します。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The new <ph id="ph1">&lt;PackageReference&gt;</ph> element</source>
          <target state="translated">新しい <ph id="ph1">&lt;PackageReference&gt;</ph> 要素</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`&lt;PackageReference&gt;`</ph> has the following basic structure:</source>
          <target state="translated"><ph id="ph1">`&lt;PackageReference&gt;`</ph> の基本的な構造は次のとおりです。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If you are familiar with MSBuild, it will look familiar to the other <bpt id="p1">[</bpt>reference types<ept id="p1">]()</ept> that already exist.</source>
          <target state="translated">MSBuild に詳しい場合は、既に存在する他の<bpt id="p1">[</bpt>参照型<ept id="p1">]()</ept>と似ていることが分かります。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The key is the <ph id="ph1">`Include`</ph> statement which specifies the package id that you wish to add to the project.</source>
          <target state="translated">重要なのは、<ph id="ph1">`Include`</ph> ステートメントではプロジェクトに追加するパッケージ ID を指定することです。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`&lt;Version&gt;`</ph> child element specified the version to get.</source>
          <target state="translated"><ph id="ph1">`&lt;Version&gt;`</ph> 子要素は取得するバージョンを指定します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The versions are specified as per <bpt id="p1">[</bpt>NuGet version rules<ept id="p1">](https://docs.nuget.org/ndocs/create-packages/dependency-versions#version-ranges)</ept>.</source>
          <target state="translated">バージョンは、<bpt id="p1">[</bpt>NuGet のバージョン ルール<ept id="p1">](https://docs.nuget.org/ndocs/create-packages/dependency-versions#version-ranges)</ept>に従って指定します。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note:<ept id="p1">**</ept> if you are not faimilar with the overall <ph id="ph1">`csproj`</ph> syntax, you can use the <bpt id="p2">[</bpt>MSBuild project reference documentation<ept id="p2">]()</ept> to get acquainted.</source>
          <target state="translated"><bpt id="p1">**</bpt>注:<ept id="p1">**</ept> <ph id="ph1">`csproj`</ph> の構文に詳しくない場合は、<bpt id="p2">[</bpt>MSBuild プロジェクトのリファレンス ドキュメント<ept id="p2">]()</ept>をご覧ください。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Adding a dependency that is available only in a specific target is done using conditions:</source>
          <target state="translated">特定のターゲットでのみ使用可能な依存関係を追加するには、次の条件を使います。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The above means that the dependency will only be valid if the build is happening for that given target.</source>
          <target state="translated">これは、ビルドがその特定のターゲットに対して行われる場合にのみ依存関係が有効であることを意味します。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`$(TargetFramework)`</ph> in the condition is a MSBuild property that is being set in the project.</source>
          <target state="translated">条件の <ph id="ph1">`$(TargetFramework)`</ph> は、プロジェクトで設定されている MSBuild プロパティです。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For most common .NET Core applications, you will not need to do this.</source>
          <target state="translated">最も一般的な .NET Core アプリケーションの場合、これを行う必要はありません。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Adding a dependency to your project</source>
          <target state="translated">プロジェクトへの依存関係の追加</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Adding a dependency to your project is straightforward.</source>
          <target state="translated">簡単に依存関係をプロジェクトに追加できます。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Here is an example of how to add <ph id="ph1">`JSON.net`</ph> version <ph id="ph2">`9.0.1`</ph> to your project.</source>
          <target state="translated">ここでは、<ph id="ph1">`JSON.net`</ph> バージョン <ph id="ph2">`9.0.1`</ph> をプロジェクトに追加する方法の例を示します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Of course, it is applicable to any other NuGet dependency.</source>
          <target state="translated">もちろん、NuGet の他の依存関係にも適用できます。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>When you open your project file, you will see two or more <ph id="ph1">`&lt;ItemGroup&gt;`</ph> nodes.</source>
          <target state="translated">プロジェクト ファイルを開くと、2 つ以上の <ph id="ph1">`&lt;ItemGroup&gt;`</ph> ノードがあります。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You will notice that one of the nodes already has <ph id="ph1">`&lt;PackageReference&gt;`</ph> elements in it.</source>
          <target state="translated">ノードの 1 つには <ph id="ph1">`&lt;PackageReference&gt;`</ph> 要素が既にあります。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You can add your new dependency to this node, or create a new one; it is completely up to you as the result will be the same.</source>
          <target state="translated">このノードに新しい依存関係を追加することも、新しいノードを追加することもできます。結果は同じなので開発者次第です。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In this example we will use the default template that is dropped by <ph id="ph1">`dotnet new`</ph>.</source>
          <target state="translated">この例では、<ph id="ph1">`dotnet new`</ph> によって削除される既定のテンプレートを使います。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This is a simple console application.</source>
          <target state="translated">これは、簡単なコンソール アプリケーションです。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>When we open up the project, we first find the <ph id="ph1">`&lt;ItemGroup&gt;`</ph> with already existing <ph id="ph2">`&lt;PackageReference&gt;`</ph> in it.</source>
          <target state="translated">プロジェクトを開き、最初に <ph id="ph2">`&lt;PackageReference&gt;`</ph> が既に存在する <ph id="ph1">`&lt;ItemGroup&gt;`</ph> を探します。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>We then add the following to it:</source>
          <target state="translated">次に、以下のコードをそれに追加します。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>After this, we save the project and run the <ph id="ph1">`dotnet restore`</ph> command to install the dependency.</source>
          <target state="translated">その後、プロジェクトを保存し、<ph id="ph1">`dotnet restore`</ph> コマンドを実行して依存関係をインストールします。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The full project looks like this:</source>
          <target state="translated">完全なプロジェクトは次のようになります。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Removing a dependency from the project</source>
          <target state="translated">プロジェクトからの依存関係の削除</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Removing a dependency from the project file involves simply removing the <ph id="ph1">`&lt;PackageReference&gt;`</ph> from the project file.</source>
          <target state="translated">プロジェクト ファイルから依存関係を削除するには、プロジェクト ファイルから <ph id="ph1">`&lt;PackageReference&gt;`</ph> を削除するだけです。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>