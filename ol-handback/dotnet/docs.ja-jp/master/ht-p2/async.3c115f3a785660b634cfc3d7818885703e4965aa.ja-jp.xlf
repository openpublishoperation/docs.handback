<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-eac019f" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">39dc9e8599daea86b48d864179c13c5ae965876b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\async.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p2</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">74d71d4e2aa585e11dc262a435752fd4363fefda</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">40f8f2d7398cc8f3f4e9ffede16ad2606700da0f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Async Overview</source>
          <target state="translated">非同期の概要</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Async Overview</source>
          <target state="translated">非同期の概要</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Async Overview</source>
          <target state="translated">非同期の概要</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Not so long ago, apps got faster simply by buying a newer PC or server and then that trend stopped.</source>
          <target state="translated">少し前まで、アプリの高速化は、より新しい PC やサーバーを購入することによって単純に実現されていましたが、その傾向は終わりました。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>In fact, it reversed.</source>
          <target state="translated">実際には、逆転しました。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Mobile phones appeared with 1ghz single core ARM chips and server workloads transitioned to VMs.</source>
          <target state="translated">1 GHz のシングル コア ARM チップを搭載した携帯電話が登場し、サーバーのワークロードは VM に移行されました。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Users still want responsive UI and business owners want servers that scale with their business.</source>
          <target state="translated">ユーザーは引き続き応答速度の速い UI を望み、ビジネス オーナーは業務の拡大に合わせて拡張できるサーバーを必要としています。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The transition to mobile and cloud and an internet-connected population of &gt;3B users has resulted in a new set of software patterns.</source>
          <target state="translated">モバイルおよびクラウドへの移行が進み、インターネット接続ユーザーが 30 億人を超えた結果、新しいソフトウェア パターンが生まれました。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Client applications are expected to be always-on, always-connected and constantly responsive to user interaction (e.g. touch) with high app store ratings!</source>
          <target state="translated">クライアント アプリケーションには、アプリ ストアの高い評価と共に、常時オンで常時接続であること、そのうえでユーザーの操作 (タッチなど) に対する応答性を常に維持することが期待されます。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Services are expected to handle spikes in traffic by gracefully scaling up and down.</source>
          <target state="translated">サービスは、適切にスケールアップおよびスケールダウンしてトラフィックの急増に対処することが期待されます。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Async programming is a key technique that makes it straightforward to handle blocking I/O and concurrent operations on multiple cores.</source>
          <target state="translated">非同期プログラミングは、ブロッキング I/O と複数コアでの同時操作の処理を容易にする鍵となる手法です。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>.NET provides the capability for apps and services to be responsive and elastic with easy-to-use, language-level asynchronous programming models in C#, VB, and F#.</source>
          <target state="translated">.NET では、C#、VB、F# で簡単に使用できる言語レベルの非同期プログラミング モデルにより、アプリやサービスの応答性と弾力性を実現する機能を提供します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Why Write Async Code?</source>
          <target state="translated">非同期コードを記述する理由</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Modern apps make extensive use of file and networking I/O.</source>
          <target state="translated">最新アプリでは、ファイルおよびネットワーク I/O を広範囲に使用します。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>I/O APIs traditionally block by default, resulting in poor user experiences and hardware utilization unless you want to learn and use challenging patterns.</source>
          <target state="translated">従来の I/O API は既定によりブロックし、困難なパターンを学習して使用しない限り、結果的にユーザー エクスペリエンスとハードウェア使用率が不適切になっていました。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Async APIs and the language-level asynchronous programming model invert this model, making async execution the default with few new concepts to learn.</source>
          <target state="translated">このモデルを逆転させたのが非同期 API と言語レベルの非同期プログラミング モデルであり、非同期実行が既定になりました。これに関して新たに学習する必要がある概念はほとんどありません。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Async code has the following characteritics:</source>
          <target state="translated">非同期コードの特性は次のとおりです。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Handles more server requests by yielding threads to handle more requests while waiting for I/O requests to return.</source>
          <target state="translated">スレッドを生成することによって、I/O 要求が戻るのを待つ間により多くのサーバー要求を処理します。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Enables UIs to be more responsive by yielding threads to UI interaction while waiting for I/O requests and by transitioning long-running work to other CPU cores.</source>
          <target state="translated">I/O 要求の待機中に UI 操作に対してスレッドを生成し、実行時間の長い作業を他の CPU コアに移行することによって、UI の応答性を高めます。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Many of the newer .NET APIs are asynchronous.</source>
          <target state="translated">新しい .NET API の多くは非同期です。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>It’s super easy to write async code in .NET!</source>
          <target state="translated">.NET で非同期コードを記述するのはとても簡単です。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>What’s next?</source>
          <target state="translated">次の内容</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For a deep dive into async concepts and programming, see <bpt id="p1">[</bpt>Async in depth<ept id="p1">](async-in-depth.md)</ept>.</source>
          <target state="translated">非同期の概念とプログラミングの詳細については、「<bpt id="p1">[</bpt>非同期の詳細<ept id="p1">](async-in-depth.md)</ept>」を参照してください。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>