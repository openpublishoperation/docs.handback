<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-eac019f" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e055475200c55c2e2f890ac63b8b258aeacfae75</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\testing\index.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fc0e8642cdae3d67d32b00e5d197983ba1468121</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">26460639dafd62c96abc0f95a21c2940a86241f1</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Unit Testing in .NET Core</source>
          <target state="translated">.NET Core での単体テスト</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Unit Testing in .NET Core</source>
          <target state="translated">.NET Core での単体テスト</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Unit Testing in .NET Core</source>
          <target state="translated">.NET Core での単体テスト</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>By <bpt id="p1">[</bpt>Steve Smith<ept id="p1">](http://ardalis.com)</ept> and <bpt id="p2">[</bpt>Bill Wagner<ept id="p2">](https://github.com/BillWagner)</ept></source>
          <target state="translated">執筆: <bpt id="p1">[</bpt>Steve Smith<ept id="p1">](http://ardalis.com)</ept> / <bpt id="p2">[</bpt>Bill Wagner<ept id="p2">](https://github.com/BillWagner)</ept></target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>.NET Core has been designed with testability in mind, so that creating unit tests for your applications is easier than ever before.</source>
          <target state="translated">.NET Core は、アプリケーションの単体テストを従来よりも簡単に作成できるように、テストの容易性を考慮して設計されています。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This article briefly introduces unit tests (and how they differ from other kinds of tests).</source>
          <target state="translated">この記事では、単体テスト (およびその他の種類のテストとの違い) について簡単に紹介します。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Linked resources demonstrates how to add a test project to your solution and then run unit tests using either the command line or Visual Studio.</source>
          <target state="translated">リンクされたリソースは、テスト プロジェクトをソリューションに追加してから、コマンドラインまたは Visual Studio を使用して単体テストを実行する方法を示します。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Getting Started with Testing</source>
          <target state="translated">テストの概要</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Having a suite of automated tests is one of the best ways to ensure a software application does what its authors intended it to do.</source>
          <target state="translated">自動テストのスイートを備えることは、ソフトウェア アプリケーションが作成者の意図どおりに動作することを確認する最良の方法の 1 つです。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>There are many different kinds of tests for software applications, including integration tests, web tests, load tests, and many others.</source>
          <target state="translated">統合テスト、Web テスト、ロード テスト、その他の多くのテストを含め、ソフトウェア アプリケーション用のテストにはさまざまな種類があります。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>At the lowest level are unit tests, which test individual software components or methods.</source>
          <target state="translated">最下位レベルには、個々のソフトウェア コンポーネントまたはメソッドをテストする単体テストがあります。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Unit tests should only test code within the developer’s control, and should not test infrastructure concerns, like databases, file systems, or network resources.</source>
          <target state="translated">単体テストでは、開発者のコントロール内のコードのみをテストし、データベース、ファイル システム、ネットワーク リソースなどのインフラストラクチャ上の問題はテストしません。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Unit tests may be written using <bpt id="p1">[</bpt>Test Driven Development (TDD)<ept id="p1">](http://deviq.com/test-driven-development/)</ept>, or they can be added to existing code to confirm its correctness.</source>
          <target state="translated">単体テストは、<bpt id="p1">[</bpt>テスト駆動開発 (TDD)<ept id="p1">](http://deviq.com/test-driven-development/)</ept> を使用して記述することも、既存のコードに追加してその正確性を確認することもできます。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In either case, they should be small, well-named, and fast, since ideally you will want to be able to run hundreds of them before pushing your changes into the project’s shared code repository.</source>
          <target state="translated">いずれの場合にも、プロジェクトの共有コード リポジトリに変更をプッシュする前に数百もの単体テストを実行できることが理想的なので、単体テストは小規模で高速かつ名前が適切である必要があります。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Developers often struggle with coming up with good names for their test classes and methods.</source>
          <target state="translated">多くの場合、開発者はテストのクラスやメソッドに適した名前を考え出すのに苦心します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>As a starting point, the ASP.NET product team follows <bpt id="p1">[</bpt>these conventions<ept id="p1">](https://github.com/aspnet/Home/wiki/Engineering-guidelines#unit-tests-and-functional-tests)</ept>.</source>
          <target state="translated">開始点として、ASP.NET 製品チームは<bpt id="p1">[</bpt>これらの規則<ept id="p1">](https://github.com/aspnet/Home/wiki/Engineering-guidelines#unit-tests-and-functional-tests)</ept>に従います。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>When writing unit tests, be careful you don’t accidentally introduce dependencies on infrastructure.</source>
          <target state="translated">単体テストを記述するときは、インフラストラクチャに対する依存関係を誤って導入しないように注意してください。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>These tend to make tests slower and more brittle, and thus should be reserved for integration tests.</source>
          <target state="translated">これらを導入すると、テストが低速で不安定になるので、統合テスト用に残しておく必要があります。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You can avoid these hidden dependencies in your application code by following the <bpt id="p1">[</bpt>Explicit Dependencies Principle<ept id="p1">](http://deviq.com/explicit-dependencies-principle/)</ept> and using <bpt id="p2">[</bpt>Dependency Injection<ept id="p2">](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection)</ept> to request your dependencies from the framework.</source>
          <target state="translated">アプリケーション コードでこれらの非表示の依存関係を回避するには、<bpt id="p1">[</bpt>明示的な依存関係の原則<ept id="p1">](http://deviq.com/explicit-dependencies-principle/)</ept>に従い、<bpt id="p2">[</bpt>依存関係の挿入<ept id="p2">](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection)</ept>を使用して、フレームワークに依存関係を要求します。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You can also keep your unit tests in a separate project from your integration tests, and ensure your unit test project doesn’t have references to or dependencies on infrastructure packages.</source>
          <target state="translated">また、統合テストとは別個のプロジェクト内に単体テストを保持し、単体テスト プロジェクトがインフラストラクチャ パッケージへの参照または依存関係を確実に含まないようにできます。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Learn more about unit testing in .NET Core projects:</source>
          <target state="translated">.NET Core プロジェクトでの単体テストの詳細については、次を参照してください。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Try this <bpt id="p1">[</bpt>walkthrough creating unit tests with xunit and the .NET CLI<ept id="p1">](unit-testing-with-dotnet-test.md)</ept>.</source>
          <target state="translated">この <bpt id="p1">[</bpt>xunit と .NET CLI による単体テストの作成チュートリアル<ept id="p1">](unit-testing-with-dotnet-test.md)</ept>を試してみてください。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The XUnit team has written a tutorial that shows <bpt id="p1">[</bpt>how to use xunit with .NET Core and Visual Studio<ept id="p1">](http://xunit.github.io/docs/getting-started-dotnet-core.html)</ept>.</source>
          <target state="translated">XUnit チームは、書き込みが <bpt id="p1">[</bpt>.NET Core および Visual Studio で xunit を使用する方法<ept id="p1">](http://xunit.github.io/docs/getting-started-dotnet-core.html)</ept>を示すチュートリアルを作成しました。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>