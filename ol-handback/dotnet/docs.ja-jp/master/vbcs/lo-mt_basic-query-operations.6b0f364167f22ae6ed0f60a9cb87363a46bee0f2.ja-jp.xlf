<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">87ff9173b5ff72385c8ecdc3ff13735e7be2a21d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\linq\basic-query-operations.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3479d10206398b8494c046ec70c5b847cca51999</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c2fa599856b8b3913d2dd2aa9673ab7282698d62</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Basic Query Operations (Visual Basic) | Microsoft Docs</source>
          <target state="translated">基本的なクエリ操作 (Visual Basic) |Microsoft ドキュメント</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Basic Query Operations (Visual Basic)</source>
          <target state="translated">基本的なクエリ操作 (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic provides a brief introduction to <ph id="ph1">[!INCLUDE[vbteclinqext](../../../../csharp/getting-started/includes/vbteclinqext_md.md)]</ph> expressions in Visual Basic, and to some of the typical kinds of operations that you perform in a query.</source>
          <target state="translated">このトピックでは、概要を<ph id="ph1">[!INCLUDE[vbteclinqext](../../../../csharp/getting-started/includes/vbteclinqext_md.md)]</ph>Visual Basic、およびクエリで実行される演算の一般的な種類の式。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For more information, see the following topics:</source>
          <target state="translated">詳細については、次のトピックを参照してください。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Introduction to LINQ in Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/language-features/linq/introduction-to-linq.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Visual Basic における LINQ の概要<ept id="p1">](../../../../visual-basic/programming-guide/language-features/linq/introduction-to-linq.md)</ept></target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Queries<ept id="p1">](../../../../visual-basic/language-reference/queries/queries.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>クエリ<ept id="p1">](../../../../visual-basic/language-reference/queries/queries.md)</ept></target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Walkthrough: Writing Queries in Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/walkthrough-writing-queries.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>チュートリアル: Visual Basic でのクエリの作成<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/walkthrough-writing-queries.md)</ept></target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Specifying the Data Source (From)</source>
          <target state="translated">(From) データ ソースを指定します。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In a <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> query, the first step is to specify the data source that you want to query.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph>クエリでは、まず、クエリを実行するデータ ソースを指定します。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Therefore, the <ph id="ph1">`From`</ph> clause in a query always comes first.</source>
          <target state="translated">したがって、<ph id="ph1">`From`</ph>クエリ内の句は常に最初にします。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Query operators select and shape the result based on the type of the source.</source>
          <target state="translated">クエリ演算子は、選択し、ソースの種類に基づく結果を形成します。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQBasicOps#1<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/basic-query-operations_1.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQBasicOps&amp;#1;<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/basic-query-operations_1.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`From`</ph> clause specifies the data source, <ph id="ph2">`customers`</ph>, and a <bpt id="p1">*</bpt>range variable<ept id="p1">*</ept>, <ph id="ph3">`cust`</ph>.</source>
          <target state="translated"><ph id="ph1">`From`</ph>句データ ソースを指定<ph id="ph2">`customers`</ph>、および<bpt id="p1">*</bpt>範囲変数<ept id="p1">*</ept>、<ph id="ph3">`cust`</ph>です。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The range variable is like a loop iteration variable, except that in a query expression, no actual iteration occurs.</source>
          <target state="translated">範囲変数ですが、ループの反復変数のように、クエリ式で実際の反復は行われません。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>When the query is executed, often by using a <ph id="ph1">`For Each`</ph> loop, the range variable serves as a reference to each successive element in <ph id="ph2">`customers`</ph>.</source>
          <target state="translated">ときに、クエリを実行する多くの場合を使用して、<ph id="ph1">`For Each`</ph>ループ、連続する各要素への参照として範囲変数<ph id="ph2">`customers`</ph>します。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Because the compiler can infer the type of <ph id="ph1">`cust`</ph>, you do not have to specify it explicitly.</source>
          <target state="translated">コンパイラの型を推論できるため<ph id="ph1">`cust`</ph>、明示的に指定する必要はありません。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For examples of queries written with and without explicit typing, see <bpt id="p1">[</bpt>Type Relationships in Query Operations (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/type-relationships-in-query-operations.md)</ept>.</source>
          <target state="translated">明示的な型指定の有無に記述されたクエリの例については、次を参照してください。<bpt id="p1">[</bpt>クエリ操作 (Visual Basic) での型の関係<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/type-relationships-in-query-operations.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For more information about how to use the <ph id="ph1">`From`</ph> clause in Visual Basic, see <bpt id="p1">[</bpt>From Clause<ept id="p1">](../../../../visual-basic/language-reference/queries/from-clause.md)</ept>.</source>
          <target state="translated">使用する方法の詳細についての<ph id="ph1">`From`</ph>Visual basic での句を参照してください<bpt id="p1">[</bpt>From 句<ept id="p1">](../../../../visual-basic/language-reference/queries/from-clause.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Filtering Data (Where)</source>
          <target state="translated">データのフィルター処理 (場所)</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Probably the most common query operation is applying a filter in the form of a Boolean expression.</source>
          <target state="translated">可能性があります、最も一般的なクエリ操作には、ブール式の形式でフィルターが適用しています。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The query then returns only those elements for which the expression is true.</source>
          <target state="translated">クエリは、式が true の要素のみを返します。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Where`</ph> clause is used to perform the filtering.</source>
          <target state="translated">A<ph id="ph1">`Where`</ph>句を使用して、フィルター処理を実行します。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The filter specifies which elements in the data source to include in the resulting sequence.</source>
          <target state="translated">フィルターは、結果のシーケンスに含めるデータ ソース内のどの要素を指定します。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In the following example, only those customers who have an address in London are included.</source>
          <target state="translated">次の例では、ロンドンにあるアドレスを持っている顧客のみが含まれます。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQBasicOps#2<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/basic-query-operations_2.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQBasicOps&amp;#2;<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/basic-query-operations_2.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You can use logical operators such as <ph id="ph1">`And`</ph> and <ph id="ph2">`Or`</ph> to combine filter expressions in a <ph id="ph3">`Where`</ph> clause.</source>
          <target state="translated">などの論理演算子を使用する<ph id="ph1">`And`</ph>と<ph id="ph2">`Or`</ph>でフィルター式を組み合わせて、<ph id="ph3">`Where`</ph>句。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For example, to return only those customers who are from London and whose name is Devon, use the following code:</source>
          <target state="translated">たとえば、ロンドン、およびメンバー名が Devon 顧客のみを返すには、次のコードを使用します。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>To return customers from London or Paris, use the following code:</source>
          <target state="translated">ロンドンまたはパリにある顧客を取得するには、次のコードを使用します。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For more information about how to use the <ph id="ph1">`Where`</ph> clause in Visual Basic, see <bpt id="p1">[</bpt>Where Clause<ept id="p1">](../../../../visual-basic/language-reference/queries/where-clause.md)</ept>.</source>
          <target state="translated">使用する方法の詳細についての<ph id="ph1">`Where`</ph>Visual basic での句を参照してください<bpt id="p1">[</bpt>Where 句の<ept id="p1">](../../../../visual-basic/language-reference/queries/where-clause.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Ordering Data (Order By)</source>
          <target state="translated">データ (Order By) の並べ替え</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>It often is convenient to sort returned data into a particular order.</source>
          <target state="translated">多くの場合は、特定の順序に返されるデータを並べ替えると便利なです。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Order By`</ph> clause will cause the elements in the returned sequence to be sorted on a specified field or fields.</source>
          <target state="translated"><ph id="ph1">`Order By`</ph>句が指定されたフィールドでソートされた、返されるシーケンスの要素を発生します。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For example, the following query sorts the results based on the <ph id="ph1">`Name`</ph> property.</source>
          <target state="translated">たとえば、次のクエリがに基づいて結果を並べ替えます、<ph id="ph1">`Name`</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">`Name`</ph> is a string, the returned data will be sorted alphabetically, from A to Z.</source>
          <target state="translated"><ph id="ph1">`Name`</ph>文字列では、a ~ Z、返されるデータは、アルファベット順に並べ替えられます。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQBasicOps#3<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/basic-query-operations_3.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQBasicOps&amp;#3;<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/basic-query-operations_3.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>To order the results in reverse order, from Z to A, use the <ph id="ph1">`Order By...Descending`</ph> clause.</source>
          <target state="translated">Z から A、逆の順序で結果の順序を使用して、<ph id="ph1">`Order By...Descending`</ph>句。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`Ascending`</ph> when neither <ph id="ph2">`Ascending`</ph> nor <ph id="ph3">`Descending`</ph> is specified.</source>
          <target state="translated">既定値は<ph id="ph1">`Ascending`</ph>がいずれも<ph id="ph2">`Ascending`</ph>も<ph id="ph3">`Descending`</ph>を指定します。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>For more information about how to use the <ph id="ph1">`Order By`</ph> clause in Visual Basic, see <bpt id="p1">[</bpt>Order By Clause<ept id="p1">](../../../../visual-basic/language-reference/queries/order-by-clause.md)</ept>.</source>
          <target state="translated">使用する方法の詳細についての<ph id="ph1">`Order By`</ph>Visual basic での句を参照してください<bpt id="p1">[</bpt>Order By 句<ept id="p1">](../../../../visual-basic/language-reference/queries/order-by-clause.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Selecting Data (Select)</source>
          <target state="translated">データ (Select) を選択します。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Select`</ph> clause specifies the form and content of returned elements.</source>
          <target state="translated"><ph id="ph1">`Select`</ph>句は、フォームと返される要素の内容を指定します。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For example, you can specify whether your results will consist of complete <ph id="ph1">`Customer`</ph> objects, just one <ph id="ph2">`Customer`</ph> property, a subset of properties, a combination of properties from various data sources, or some new result type based on a computation.</source>
          <target state="translated">完全な結果がで構成されているかどうかを指定するたとえば、<ph id="ph1">`Customer`</ph>オブジェクト、1 つにすぎません<ph id="ph2">`Customer`</ph>計算に基づいて、プロパティ、プロパティのサブセット、さまざまなデータ ソース、または新しい結果の種類からのプロパティの組み合わせ。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">`Select`</ph> clause produces something other than a copy of the source element, the operation is called a <bpt id="p1">*</bpt>projection<ept id="p1">*</ept>.</source>
          <target state="translated">ときに、<ph id="ph1">`Select`</ph>句がソース要素のコピー以外のものを発生した場合、操作が呼び出される、<bpt id="p1">*</bpt>投影<ept id="p1">*</ept>します。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>To retrieve a collection that consists of complete <ph id="ph1">`Customer`</ph> objects, select the range variable itself:</source>
          <target state="translated">完全なので構成されるコレクションを取得する<ph id="ph1">`Customer`</ph>オブジェクトを範囲変数自体を選択します。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQBasicOps#4<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/basic-query-operations_4.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQBasicOps&amp;4;<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/basic-query-operations_4.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If a <ph id="ph1">`Customer`</ph> instance is a large object that has many fields, and all that you want to retrieve is the name, you can select <ph id="ph2">`cust.Name`</ph>, as shown in the following example.</source>
          <target state="translated">場合、<ph id="ph1">`Customer`</ph>インスタンスは、多くのフィールドを持つ大きいオブジェクトと名前を取得することだけが、選択できるように<ph id="ph2">`cust.Name`</ph>の次の例に示すようにします。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Local type inference recognizes that this changes the result type from a collection of <ph id="ph1">`Customer`</ph> objects to a collection of strings.</source>
          <target state="translated">ローカル型推論のコレクションから結果の型が変更される<ph id="ph1">`Customer`</ph>オブジェクトを文字列のコレクション。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQBasicOps#5<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/basic-query-operations_5.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQBasicOps&amp;#5;<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/basic-query-operations_5.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>To select multiple fields from the data source, you have two choices:</source>
          <target state="translated">データ ソースから複数のフィールドを選択するには、2 つの選択肢があります。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">`Select`</ph> clause, specify the fields you want to include in the result.</source>
          <target state="translated"><ph id="ph1">`Select`</ph>句、結果に含めるフィールドを指定します。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The compiler will define an anonymous type that has those fields as its properties.</source>
          <target state="translated">コンパイラは、プロパティとしてこれらのフィールドを持つ匿名型を定義します。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Anonymous Types<ept id="p1">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/anonymous-types.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>匿名型<ept id="p1">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/anonymous-types.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Because the returned elements in the following example are instances of an anonymous type, you cannot refer to the type by name elsewhere in your code.</source>
          <target state="translated">次の例で返される要素は、匿名型のインスタンスであるためにことはできません参照する型名で別の場所で、コード内。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The compiler-designated name for the type contains characters that are not valid in normal Visual Basic code.</source>
          <target state="translated">型のコンパイラが指定の名前には、通常の Visual Basic コードでは無効な文字が含まれています。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>In the following example, the elements in the collection that is returned by the query in <ph id="ph1">`londonCusts4`</ph> are instances of an anonymous type</source>
          <target state="translated">次の例のクエリによって返されるコレクション内の要素で<ph id="ph1">`londonCusts4`</ph>匿名型のインスタンス</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQBasicOps#6<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/basic-query-operations_6.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQBasicOps&amp;6;<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/basic-query-operations_6.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>-or-</source>
          <target state="translated">または</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Define a named type that contains the particular fields that you want to include in the result, and create and initialize instances of the type in the <ph id="ph1">`Select`</ph> clause.</source>
          <target state="translated">結果に含めるを作成し、型のインスタンスを初期化する特定のフィールドを含む名前付きの型を定義、<ph id="ph1">`Select`</ph>句。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Use this option only if you have to use individual results outside the collection in which they are returned, or if you have to pass them as parameters in method calls.</source>
          <target state="translated">これらは、返されますが、コレクションの外部の個別の結果を使用している場合にのみ、またはメソッドの呼び出しでパラメーターとして渡すことがある場合は、このオプションを使用します。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The type of <ph id="ph1">`londonCusts5`</ph> in the following example is IEnumerable(Of NamePhone).</source>
          <target state="translated">型<ph id="ph1">`londonCusts5`</ph>次の例では、IEnumerable (Of NamePhone)。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQBasicOps#7<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/basic-query-operations_7.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQBasicOps&amp;#7;<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/basic-query-operations_7.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQBasicOps#8<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/basic-query-operations_8.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQBasicOps&amp;#8;<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/basic-query-operations_8.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>For more information about how to use the <ph id="ph1">`Select`</ph> clause in Visual Basic, see <bpt id="p1">[</bpt>Select Clause<ept id="p1">](../../../../visual-basic/language-reference/queries/select-clause.md)</ept>.</source>
          <target state="translated">使用する方法の詳細についての<ph id="ph1">`Select`</ph>Visual basic での句を参照してください<bpt id="p1">[</bpt>Select 句<ept id="p1">](../../../../visual-basic/language-reference/queries/select-clause.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Joining Data (Join and Group Join)</source>
          <target state="translated">結合のデータ (結合と Group Join)</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>You can combine more than one data source in the <ph id="ph1">`From`</ph> clause in several ways.</source>
          <target state="translated">1 つ以上のデータ ソースを組み合わせることができます、<ph id="ph1">`From`</ph>方法はいくつかの句。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>For example, the following code uses two data sources and implicitly combines properties from both of them in the result.</source>
          <target state="translated">たとえば、次のコードでは、2 つのデータ ソースを使用して、結果に、これらの両方からのプロパティを暗黙的に結合します。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The query selects students whose last names start with a vowel.</source>
          <target state="translated">クエリでは、姓が母音で始まる受講者を選択します。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQBasicOps#9<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/basic-query-operations_9.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQBasicOps&amp;#9;<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/basic-query-operations_9.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>You can run this code with the list of students created in <bpt id="p1">[</bpt>How to: Create a List of Items<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/how-to-create-a-list-of-items.md)</ept>.</source>
          <target state="translated">作成した学生の一覧にこのコードを実行する<bpt id="p1">[</bpt>方法: 項目の一覧を作成<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/how-to-create-a-list-of-items.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Join`</ph> keyword is equivalent to an <ph id="ph2">`INNER JOIN`</ph> in SQL.</source>
          <target state="translated"><ph id="ph1">`Join`</ph>キーワードは、 <ph id="ph2">`INNER JOIN`</ph> sql です。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>It combines two collections based on matching key values between elements in the two collections.</source>
          <target state="translated">これは、2 つのコレクション内の要素間の一致するキー値に基づいて&amp;2; つのコレクションを結合します。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The query returns all or part of the collection elements that have matching key values.</source>
          <target state="translated">このクエリは、キーの値が一致するコレクションの要素のすべてまたは一部を返します。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>For example, the following code duplicates the action of the previous implicit join.</source>
          <target state="translated">たとえば、次のコードでは、前の暗黙的な結合の操作が重複しています。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQBasicOps#10<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/basic-query-operations_10.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQBasicOps&amp;#10;<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/basic-query-operations_10.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Group Join`</ph> combines collections into a single hierarchical collection, just like a <ph id="ph2">`LEFT JOIN`</ph> in SQL.</source>
          <target state="translated"><ph id="ph1">`Group Join`</ph>同じように単一の階層コレクションにコレクションを結合、 <ph id="ph2">`LEFT JOIN`</ph> sql です。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Join Clause<ept id="p1">](../../../../visual-basic/language-reference/queries/join-clause.md)</ept> and <bpt id="p2">[</bpt>Group Join Clause<ept id="p2">](../../../../visual-basic/language-reference/queries/group-join-clause.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。 <bpt id="p1">[</bpt>Join 句<ept id="p1">](../../../../visual-basic/language-reference/queries/join-clause.md)</ept>と<bpt id="p2">[</bpt>Group Join 句<ept id="p2">](../../../../visual-basic/language-reference/queries/group-join-clause.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Grouping Data (Group By)</source>
          <target state="translated">データのグループ化 (グループ化)</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>You can add a <ph id="ph1">`Group By`</ph> clause to group the elements in a query result according to one or more fields of the elements.</source>
          <target state="translated">追加することができます、<ph id="ph1">`Group By`</ph>句、クエリ結果の要素の&amp;1; つまたは複数のフィールドに従って要素をグループ化します。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>For example, the following code groups students by class year.</source>
          <target state="translated">たとえば、次のコードでは、クラス、年ごと受講者をグループ化します。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQBasicOps#11<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/basic-query-operations_11.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQBasicOps&amp;#11;<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/basic-query-operations_11.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>If you run this code using the list of students created in <bpt id="p1">[</bpt>How to: Create a List of Items<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/how-to-create-a-list-of-items.md)</ept>, the output from the <ph id="ph1">`For Each`</ph> statement is:</source>
          <target state="translated">作成した生徒のリストを使用してこのコードを実行するかどうかは<bpt id="p1">[</bpt>する方法: 項目の一覧を作成する<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/how-to-create-a-list-of-items.md)</ept>からの出力、<ph id="ph1">`For Each`</ph>ステートメントは。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Year: Junior</source>
          <target state="translated">年: Junior</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Tucker, Michael</source>
          <target state="translated">Tucker、Michael</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Garcia, Hugo</source>
          <target state="translated">Garcia、Hugo</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Garcia, Debra</source>
          <target state="translated">Garcia Debra</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Tucker, Lance</source>
          <target state="translated">Tucker Lance</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Year: Senior</source>
          <target state="translated">年: シニア</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Omelchenko, Svetlana</source>
          <target state="translated">Omelchenko Svetlana</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Osada, Michiko</source>
          <target state="translated">田山 Michiko</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Fakhouri, Fadi</source>
          <target state="translated">Fakhouri Fadi</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Feng, Hanying</source>
          <target state="translated">Hanying Feng</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Adams, Terry</source>
          <target state="translated">Terry Adams</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Year: Freshman</source>
          <target state="translated">年: Freshman</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Mortensen, Sven</source>
          <target state="translated">Mortensen Sven</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Garcia, Cesar</source>
          <target state="translated">Garcia Cesar</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The variation shown in the following code orders the class years, and then orders the students within each year by last name.</source>
          <target state="translated">次のコードに示すように変化は、クラス年を注文し、各学年の姓の順、受講者を並べ替えます。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQBasicOps#12<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/basic-query-operations_12.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQBasicOps&amp;#12;<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/basic-query-operations_12.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>For more information about <ph id="ph1">`Group By`</ph>, see <bpt id="p1">[</bpt>Group By Clause<ept id="p1">](../../../../visual-basic/language-reference/queries/group-by-clause.md)</ept>.</source>
          <target state="translated">詳細については<ph id="ph1">`Group By`</ph>を参照してください<bpt id="p1">[</bpt>グループ By 句<ept id="p1">](../../../../visual-basic/language-reference/queries/group-by-clause.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">関連項目</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</source>
          <target state="translated">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;&lt;/xref:System.Collections.Generic.IEnumerable%601&gt;</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Getting Started with LINQ in Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/getting-started-with-linq.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Visual Basic における LINQ の概要<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/getting-started-with-linq.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Queries<ept id="p1">](../../../../visual-basic/language-reference/queries/queries.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>クエリ<ept id="p1">](../../../../visual-basic/language-reference/queries/queries.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Standard Query Operators Overview (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/standard-query-operators-overview.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>標準クエリ演算子の概要 (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/standard-query-operators-overview.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>LINQ<ept id="p1">](../../../../visual-basic/programming-guide/language-features/linq/index.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>LINQ<ept id="p1">](../../../../visual-basic/programming-guide/language-features/linq/index.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>