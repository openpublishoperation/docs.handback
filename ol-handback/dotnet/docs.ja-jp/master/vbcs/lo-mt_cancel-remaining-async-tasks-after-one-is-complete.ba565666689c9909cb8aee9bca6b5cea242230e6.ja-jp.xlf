<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1b70822edd972ac33614ab49faad6ff50b0e80b7</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\async\cancel-remaining-async-tasks-after-one-is-complete.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b63bc483eb5845d7bb3872636b21fe3b057c2c69</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">322df83f9249cfb434fbff5e8b1167b7b10f17e5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Cancel Remaining Async Tasks after One Is Complete (Visual Basic) | Microsoft Docs</source>
          <target state="translated">1 つは、(Visual Basic) の完了後の残りの非同期タスクを取り消す |Microsoft ドキュメント</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Cancel Remaining Async Tasks after One Is Complete (Visual Basic)</source>
          <target state="translated">1 つは、(Visual Basic) の完了後の残りの非同期タスクのキャンセルします。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>By using the &lt;xref:System.Threading.Tasks.Task.WhenAny%2A?displayProperty=fullName&gt; method together with a &lt;xref:System.Threading.CancellationToken&gt;, you can cancel all remaining tasks when one task is complete.</source>
          <target state="translated">使用して、&lt;xref:System.Threading.Tasks.Task.WhenAny%2A?displayProperty=fullName&gt;メソッドと共に、 &lt;xref:System.Threading.CancellationToken&gt;、1 つのタスクが完了すると、残りのすべてのタスクを取り消すことができます&lt;/xref:System.Threading.CancellationToken&gt;&lt;/xref:System.Threading.Tasks.Task.WhenAny%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`WhenAny`</ph> method takes an argument that’s a collection of tasks.</source>
          <target state="translated"><ph id="ph1">`WhenAny`</ph> メソッドは、タスクのコレクションである引数を受け取ります。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The method starts all the tasks and returns a single task.</source>
          <target state="translated">このメソッドは、すべてのタスクを開始し、単一のタスクを返します。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The single task is complete when any task in the collection is complete.</source>
          <target state="translated">単一のタスクは、コレクションのいずれかのタスクが完了すると完了します。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This example demonstrates how to use a cancellation token in conjunction with <ph id="ph1">`WhenAny`</ph> to hold onto the first task to finish from the collection of tasks and to cancel the remaining tasks.</source>
          <target state="translated">この例では、キャンセル トークンを <ph id="ph1">`WhenAny`</ph> と共に使用して、タスクのコレクションから最初のタスクを終了まで保持し、残りのタスクを取り消す方法を示しています。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Each task downloads the contents of a website.</source>
          <target state="translated">各タスクは、Web サイトのコンテンツをダウンロードします。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The example displays the length of the contents of the first download to complete and cancels the other downloads.</source>
          <target state="translated">この例は最初のダウンロードが完了したコンテンツの長さを表示し、他のダウンロードを取り消します。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>To run the examples, you must have Visual Studio 2012 or newer and the .NET Framework 4.5 or newer installed on your computer.</source>
          <target state="translated">例を実行するには、Visual Studio 2012 以降と .NET Framework 4.5 が必要または以降のコンピューターにインストールします。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Downloading the Example</source>
          <target state="translated">例をダウンロードする</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You can download the complete Windows Presentation Foundation (WPF) project from <bpt id="p1">[</bpt>Async Sample: Fine Tuning Your Application<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=255046)</ept> and then follow these steps.</source>
          <target state="translated">完全な Windows Presentation Foundation (WPF) プロジェクトをダウンロードすることができます<bpt id="p1">[</bpt>Async サンプル: 細かいアプリケーションの調整<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=255046)</ept>し次の手順に従います。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Decompress the file that you downloaded, and then start Visual Studio.</source>
          <target state="translated">ダウンロードしたファイルを圧縮解除し、Visual Studio を起動します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>On the menu bar, choose <bpt id="p1">**</bpt>File<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Open<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Project/Solution<ept id="p3">**</ept>.</source>
          <target state="translated">メニュー バーで <bpt id="p1">**</bpt>[ファイル]<ept id="p1">**</ept>、 <bpt id="p2">**</bpt>[開く]<ept id="p2">**</ept>、 <bpt id="p3">**</bpt>[プロジェクト/ソリューション]<ept id="p3">**</ept>の順に選択します。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Open Project<ept id="p1">**</ept> dialog box, open the folder that holds the sample code that you decompressed, and then open the solution (.sln) file for AsyncFineTuningVB.</source>
          <target state="translated"><bpt id="p1">**</bpt>プロジェクトを開く<ept id="p1">**</ept> ダイアログ ボックスでは、圧縮解除したサンプル コードが含まれるフォルダーを開き、AsyncFineTuningVB のソリューション (.sln) ファイルを開きます。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, open the shortcut menu for the <bpt id="p2">**</bpt>CancelAfterOneTask<ept id="p2">**</ept> project, and then choose <bpt id="p3">**</bpt>Set as StartUp Project<ept id="p3">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>ソリューション エクスプ ローラー<ept id="p1">**</ept>、ショートカット メニューを開き、 <bpt id="p2">**</bpt>CancelAfterOneTask<ept id="p2">**</ept>プロジェクトを開いて、<bpt id="p3">**</bpt>スタートアップ プロジェクトとして設定<ept id="p3">**</ept>します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Choose the F5 key to run the project.</source>
          <target state="translated">F5 キーを押してプロジェクトを実行します。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Choose the Ctrl+F5 keys to run the project without debugging it.</source>
          <target state="translated">Ctrl + F5 キーを押して、デバッグを行わずにプロジェクトを実行します。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Run the program several times to verify that different downloads finish first.</source>
          <target state="translated">プログラムを複数回実行し、最初に終了するダウンロードが異なることを確認します。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If you don't want to download the project, you can review the MainWindow.xaml.vb file at the end of this topic.</source>
          <target state="translated">プロジェクトをダウンロードできない場合は、このトピックの最後の MainWindow.xaml.vb ファイルを確認できます。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Building the Example</source>
          <target state="translated">例のビルド</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The example in this topic adds to the project that's developed in <bpt id="p1">[</bpt>Cancel an Async Task or a List of Tasks<ept id="p1">](http://msdn.microsoft.com/library/d6e4e801-df64-4705-98fc-df725a577fb0)</ept> to cancel a list of tasks.</source>
          <target state="translated">このトピックの例で開発されたプロジェクトに追加<bpt id="p1">[</bpt>非同期タスクまたはタスクの一覧を取り消す<ept id="p1">](http://msdn.microsoft.com/library/d6e4e801-df64-4705-98fc-df725a577fb0)</ept>タスクのリストを取り消します。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The example uses the same UI, although the <bpt id="p1">**</bpt>Cancel<ept id="p1">**</ept> button isn’t used explicitly.</source>
          <target state="translated">この例には、同じ UI が使用されますが、<bpt id="p1">**</bpt>キャンセル<ept id="p1">**</ept>ボタンは明示的に使用します。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>To build the example yourself, step by step, follow the instructions in the "Downloading the Example" section, but choose <bpt id="p1">**</bpt>CancelAListOfTasks<ept id="p1">**</ept> as the <bpt id="p2">**</bpt>StartUp Project<ept id="p2">**</ept>.</source>
          <target state="translated">例をビルドする、自分のステップ バイ ステップ「例をダウンロードする」セクション指示従いますが、選択<bpt id="p1">**</bpt>CancelAListOfTasks<ept id="p1">**</ept>として、<bpt id="p2">**</bpt>スタートアップ プロジェクト<ept id="p2">**</ept>します。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Add the changes in this topic to that project.</source>
          <target state="translated">そのプロジェクトに、このトピックでの変更を追加します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In the MainWindow.xaml.vb file of the <bpt id="p1">**</bpt>CancelAListOfTasks<ept id="p1">**</ept> project, start the transition by moving the processing steps for each website from the loop in <ph id="ph1">`AccessTheWebAsync`</ph> to the following async method.</source>
          <target state="translated">MainWindow.xaml.vb ファイルで、 <bpt id="p1">**</bpt>CancelAListOfTasks<ept id="p1">**</ept>プロジェクトでのループを各 web サイトの処理手順を移動して、移行を開始<ph id="ph1">`AccessTheWebAsync`</ph>次の非同期メソッドにします。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">`AccessTheWebAsync`</ph>, this example uses a query, the  &lt;xref:System.Linq.Enumerable.ToArray%2A&gt; method, and the <ph id="ph2">`WhenAny`</ph> method to create and start an array of tasks.</source>
          <target state="translated"><ph id="ph1">`AccessTheWebAsync`</ph>、この例は、クエリを使用して、&lt;xref:System.Linq.Enumerable.ToArray%2A&gt;メソッド、および<ph id="ph2">`WhenAny`</ph>メソッドを作成し、タスクの配列を起動します&lt;/xref:System.Linq.Enumerable.ToArray%2A&gt;。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The application of <ph id="ph1">`WhenAny`</ph> to the array returns a single task that, when awaited, evaluates to the first task to reach completion in the array of tasks.</source>
          <target state="translated">配列への <ph id="ph1">`WhenAny`</ph> のアプリケーションは、待機したときに、タスクの配列で完了に到達する最初のタスクを評価する&amp;1; つのタスクを返します。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Make the following changes in <ph id="ph1">`AccessTheWebAsync`</ph>.</source>
          <target state="translated"><ph id="ph1">`AccessTheWebAsync`</ph> で次の変更を行います。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Asterisks mark the changes in the code file.</source>
          <target state="translated">アスタリスクはコード ファイルの変更点を示しています。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Comment out or delete the loop.</source>
          <target state="translated">ループをコメント アウトするか、削除します。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Create a query that, when executed, produces a collection of generic tasks.</source>
          <target state="translated">実行されると、一般的なタスクのコレクションを生成するクエリを作成します。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Each call to <ph id="ph1">`ProcessURLAsync`</ph> returns a &lt;xref:System.Threading.Tasks.Task%601&gt; where <ph id="ph2">`TResult`</ph> is an integer.</source>
          <target state="translated">呼び出すたび<ph id="ph1">`ProcessURLAsync`</ph>返します、&lt;xref:System.Threading.Tasks.Task%601&gt;場所<ph id="ph2">`TResult`</ph>整数します&lt;/xref:System.Threading.Tasks.Task%601&gt;。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>1<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>1<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Call <ph id="ph1">`ToArray`</ph> to execute the query and start the tasks.</source>
          <target state="translated"><ph id="ph1">`ToArray`</ph> を呼び出してクエリを実行し、タスクを開始します。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The application of the <ph id="ph1">`WhenAny`</ph> method in the next step would execute the query and start the tasks without using <ph id="ph2">`ToArray`</ph>, but other methods might not.</source>
          <target state="translated">次の手順で <ph id="ph1">`WhenAny`</ph> メソッドのアプリケーションは、<ph id="ph2">`ToArray`</ph> を使用せずにクエリを実行してタスクを開始しますが、他のメソッドはそうでない場合があります。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The safest practice is to force execution of the query explicitly.</source>
          <target state="translated">最も安全な方法は、クエリの実行を明示的に強制することです。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>2<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>2<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Call <ph id="ph1">`WhenAny`</ph> on the collection of tasks.</source>
          <target state="translated">タスクのコレクションで <ph id="ph1">`WhenAny`</ph> を呼び出します。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`WhenAny`</ph> returns a <ph id="ph2">`Task(Of Task(Of Integer))`</ph> or <ph id="ph3">`Task&lt;Task&lt;int&gt;&gt;`</ph>.</source>
          <target state="translated"><ph id="ph1">`WhenAny`</ph> は <ph id="ph2">`Task(Of Task(Of Integer))`</ph> または <ph id="ph3">`Task&lt;Task&lt;int&gt;&gt;`</ph> を返します。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>That is, <ph id="ph1">`WhenAny`</ph> returns a task that evaluates to a single <ph id="ph2">`Task(Of Integer)`</ph> or <ph id="ph3">`Task&lt;int&gt;`</ph> when it’s awaited.</source>
          <target state="translated">つまり、<ph id="ph1">`WhenAny`</ph> は、待機すると、単一の <ph id="ph2">`Task(Of Integer)`</ph> または <ph id="ph3">`Task&lt;int&gt;`</ph> に評価するタスクを返します。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>That single task is the first task in the collection to finish.</source>
          <target state="translated">その単一のタスクが、コレクションで最初に終了するタスクです。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The task that finished first is assigned to <ph id="ph1">`firstFinishedTask`</ph>.</source>
          <target state="translated">最初に終了したタスクは <ph id="ph1">`firstFinishedTask`</ph> に割り当てられます。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The type of <ph id="ph1">`firstFinishedTask`</ph> is &lt;xref:System.Threading.Tasks.Task%601&gt; where <ph id="ph2">`TResult`</ph> is an integer because that's the return type of <ph id="ph3">`ProcessURLAsync`</ph>.</source>
          <target state="translated">型<ph id="ph1">`firstFinishedTask`</ph>は&lt;xref:System.Threading.Tasks.Task%601&gt;、<ph id="ph2">`TResult`</ph>の戻り値の型であるため、整数は、 <ph id="ph3">`ProcessURLAsync`</ph>&lt;/xref:System.Threading.Tasks.Task%601&gt; 。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>In this example, you’re interested only in the task that finishes first.</source>
          <target state="translated">この例では、最初に終了したタスクにのみ焦点を当てています。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Therefore, use &lt;xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=fullName&gt; to cancel the remaining tasks.</source>
          <target state="translated">そのため、使用&lt;xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=fullName&gt;残りのタスクを取り消す&lt;/xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Finally, await <ph id="ph1">`firstFinishedTask`</ph> to retrieve the length of the downloaded content.</source>
          <target state="translated">最後に、<ph id="ph1">`firstFinishedTask`</ph> を待機して、ダウンロードされたコンテンツの長さを取得します。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Run the program several times to verify that different downloads finish first.</source>
          <target state="translated">プログラムを複数回実行し、最初に終了するダウンロードが異なることを確認します。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Complete Example</source>
          <target state="translated">コード例全体</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The following code is the complete MainWindow.xaml.vb or MainWindow.xaml.cs file for the example.</source>
          <target state="translated">次のコードは、この例での MainWindow.xaml.vb または MainWindow.xaml.cs ファイルの全体です。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Asterisks mark the elements that were added for this example.</source>
          <target state="translated">アスタリスクはこの例のために追加された要素を示しています。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Notice that you must add a reference for &lt;xref:System.Net.Http&gt;.</source>
          <target state="translated">&lt;xref:System.Net.Http&gt;。&lt;/xref:System.Net.Http&gt;への参照を追加する必要があることに注意してください。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>You can download the project from <bpt id="p1">[</bpt>Async Sample: Fine Tuning Your Application<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=255046)</ept>.</source>
          <target state="translated">プロジェクトをダウンロードする<bpt id="p1">[</bpt>Async サンプル: 細かいアプリケーションの調整<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=255046)</ept>します。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">関連項目</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Threading.Tasks.Task.WhenAny%2A&gt;</source>
          <target state="translated">&lt;xref:System.Threading.Tasks.Task.WhenAny%2A&gt;&lt;/xref:System.Threading.Tasks.Task.WhenAny%2A&gt;</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Fine-Tuning Your Async Application (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/fine-tuning-your-async-application.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>非同期アプリケーション (Visual Basic) の微調整<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/fine-tuning-your-async-application.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Asynchronous Programming with Async and Await (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/index.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>非同期プログラミングを Async と Await (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/index.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Async Sample: Fine Tuning Your Application<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=255046)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>アプリケーションの微調整の非同期のサンプル:<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=255046)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>