<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">324e2a906e84950aa9019bbf68a524458492646e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\covariance-contravariance\creating-variant-generic-interfaces.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4748efc2272cea31453c707fd4ca5824c125559e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4c9fa8213011d5c7ad80a87da806939ef200db19</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Creating Variant Generic Interfaces (Visual Basic) | Microsoft Docs</source>
          <target state="translated">バリアント ジェネリック インターフェイス (Visual Basic) を作成する |Microsoft ドキュメント</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Creating Variant Generic Interfaces (Visual Basic)</source>
          <target state="translated">バリアント ジェネリック インターフェイス (Visual Basic) の作成</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You can declare generic type parameters in interfaces as covariant or contravariant.</source>
          <target state="translated">共変性のインターフェイスのジェネリック型パラメーターを宣言するまたは反変です。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Covariance<ept id="p1">*</ept> allows interface methods to have more derived return types than that defined by the generic type parameters.</source>
          <target state="translated"><bpt id="p1">*</bpt>ジェネリックの共変性<ept id="p1">*</ept>インターフェイス メソッドのジェネリック型パラメーターで定義されているよりも戻り値の型の派生を許可します。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Contravariance<ept id="p1">*</ept> allows interface methods to have argument types that are less derived than that specified by the generic parameters.</source>
          <target state="translated"><bpt id="p1">*</bpt>反変性<ept id="p1">*</ept>インターフェイス メソッドには、ジェネリック パラメーターで指定されているよりも弱い派生の引数の型を持つことができます。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>A generic interface that has covariant or contravariant generic type parameters is called <bpt id="p1">*</bpt>variant<ept id="p1">*</ept>.</source>
          <target state="translated">ジェネリック インターフェイスを持つ共変または反変のジェネリック型パラメーターと呼ばれる<bpt id="p1">*</bpt>バリアント<ept id="p1">*</ept>します。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>.NET Framework 4 introduced variance support for several existing generic interfaces.</source>
          <target state="translated">.NET framework 4 には、いくつかの既存のジェネリック インターフェイスの分散のサポートが導入されました。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For the list of the variant interfaces in the .NET Framework, see <bpt id="p1">[</bpt>Variance in Generic Interfaces (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/covariance-contravariance/variance-in-generic-interfaces.md)</ept>.</source>
          <target state="translated">.NET Framework のバリアントのインターフェイスの一覧で、次を参照してください。<bpt id="p1">[</bpt>ジェネリック インターフェイス (Visual Basic) の分散<ept id="p1">](../../../../visual-basic/programming-guide/concepts/covariance-contravariance/variance-in-generic-interfaces.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Declaring Variant Generic Interfaces</source>
          <target state="translated">バリアント ジェネリック インターフェイスを宣言します。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You can declare variant generic interfaces by using the <ph id="ph1">`in`</ph> and <ph id="ph2">`out`</ph> keywords for generic type parameters.</source>
          <target state="translated">バリアント ジェネリック インターフェイスを宣言するにを使用して、<ph id="ph1">`in`</ph>と<ph id="ph2">`out`</ph>ジェネリック型パラメーターのキーワードです。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><ph id="ph1"> `ByRef`</ph> parameters in Visual Basic cannot be variant.</source>
          <target state="translated"><ph id="ph1"> `ByRef`</ph>Visual Basic でのパラメーターは、バリアント型にすることはできません。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Value types also do not support variance.</source>
          <target state="translated">また、値型では、分散はサポートされません。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You can declare a generic type parameter covariant by using the <ph id="ph1">`out`</ph> keyword.</source>
          <target state="translated">宣言するジェネリック型パラメーター共変性を使用して、<ph id="ph1">`out`</ph>キーワードです。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The covariant type must satisfy the following conditions:</source>
          <target state="translated">共変の型は、次の条件を満たしている必要があります。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The type is used only as a return type of interface methods and not used as a type of method arguments.</source>
          <target state="translated">型がインターフェイス メソッドの戻り値の型としてのみ使用され、メソッド引数の型として使用できません。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This is illustrated in the following example, in which the type <ph id="ph1">`R`</ph> is declared covariant.</source>
          <target state="translated">これで、次の例に示すは種類<ph id="ph1">`R`</ph>共変で宣言されています。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>There is one exception to this rule.</source>
          <target state="translated">この規則には例外が&amp;1; つあります。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If you have a contravariant generic delegate as a method parameter, you can use the type as a generic type parameter for the delegate.</source>
          <target state="translated">メソッド パラメーターとして反変のジェネリック デリゲートをした場合は、デリゲートのジェネリック型パラメーターとして型を使用できます。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This is illustrated by the type <ph id="ph1">`R`</ph> in the following example.</source>
          <target state="translated">型でその例を示します<ph id="ph1">`R`</ph>次の例です。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Variance in Delegates (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/covariance-contravariance/variance-in-delegates.md)</ept> and <bpt id="p2">[</bpt>Using Variance for Func and Action Generic Delegates (Visual Basic)<ept id="p2">](../../../../visual-basic/programming-guide/concepts/covariance-contravariance/using-variance-for-func-and-action-generic-delegates.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>デリゲート (Visual Basic) の分散<ept id="p1">](../../../../visual-basic/programming-guide/concepts/covariance-contravariance/variance-in-delegates.md)</ept>と<bpt id="p2">[</bpt>用 Func および Action 汎用デリゲート (Visual Basic) を使用して分散<ept id="p2">](../../../../visual-basic/programming-guide/concepts/covariance-contravariance/using-variance-for-func-and-action-generic-delegates.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The type is not used as a generic constraint for the interface methods.</source>
          <target state="translated">種類は、インターフェイス メソッドのジェネリック制約として使用されません。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This is illustrated in the following code.</source>
          <target state="translated">これは、次のコードに示します。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You can declare a generic type parameter contravariant by using the <ph id="ph1">`in`</ph> keyword.</source>
          <target state="translated">使用してジェネリック型パラメーターの反変性を宣言することができます、<ph id="ph1">`in`</ph>キーワードです。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The contravariant type can be used only as a type of method arguments and not as a return type of interface methods.</source>
          <target state="translated">反変の型は、インターフェイス メソッドの戻り値の型としてではなく、メソッド引数の型としてのみ使用できます。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The contravariant type can also be used for generic constraints.</source>
          <target state="translated">反変の型は、ジェネリック制約にも使用できます。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The following code shows how to declare a contravariant interface and use a generic constraint for one of its methods.</source>
          <target state="translated">次のコードでは、反変のインターフェイスを宣言し、そのメソッドのいずれかに汎用的な制約を使用する方法を示します。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>It is also possible to support both covariance and contravariance in the same interface, but for different type parameters, as shown in the following code example.</source>
          <target state="translated">次のコード例のようには、同じインターフェイスが異なる型のパラメーターの共変性と反変性の両方をサポートすることもです。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In Visual Basic, you can't declare events in variant interfaces without specifying the delegate type.</source>
          <target state="translated">Visual Basic では、デリゲート型を指定することがなくバリアント インターフェイスのイベントを宣言できません。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Also, a variant interface can't have nested classes, enums, or structures, but it can have nested interfaces.</source>
          <target state="translated">また、variant インターフェイスがクラス、列挙、または構造体で入れ子になっている必要しますが、インターフェイスを入れ子にできます。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This is illustrated in the following code.</source>
          <target state="translated">これは、次のコードに示します。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Implementing Variant Generic Interfaces</source>
          <target state="translated">バリアント ジェネリック インターフェイスを実装します。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You implement variant generic interfaces in classes by using the same syntax that is used for invariant interfaces.</source>
          <target state="translated">クラスのバリアント ジェネリック インターフェイスを実装するには、ロケールに依存しないインターフェイスに使用されるのと同じ構文を使用します。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The following code example shows how to implement a covariant interface in a generic class.</source>
          <target state="translated">次のコード例では、ジェネリック クラスに、共変のインターフェイスを実装する方法を示します。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Classes that implement variant interfaces are invariant.</source>
          <target state="translated">バリアント型のインターフェイスを実装するクラスは変化しません。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For example, consider the following code.</source>
          <target state="translated">次に例を示します。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Extending Variant Generic Interfaces</source>
          <target state="translated">バリアント ジェネリック インターフェイスの拡張</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>When you extend a variant generic interface, you have to use the <ph id="ph1">`in`</ph> and <ph id="ph2">`out`</ph> keywords to explicitly specify whether the derived interface supports variance.</source>
          <target state="translated">使用する必要があるバリアント ジェネリック インターフェイスを拡張するときに、<ph id="ph1">`in`</ph>と<ph id="ph2">`out`</ph>派生インターフェイスで変性をサポートするかどうかを明示的に指定するキーワードです。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The compiler does not infer the variance from the interface that is being extended.</source>
          <target state="translated">コンパイラは、拡張されているインターフェイスからの差異を推論できません。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For example, consider the following interfaces.</source>
          <target state="translated">たとえば、次のインターフェイスがあるとします。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">`Invariant(Of T)`</ph> interface, the generic type parameter <ph id="ph2">`T`</ph> is invariant, whereas in <ph id="ph3">`IExtCovariant (Of Out T)`</ph>the type parameter is covariant, although both interfaces extend the same interface.</source>
          <target state="translated"><ph id="ph1">`Invariant(Of T)`</ph>インターフェイス、ジェネリック型パラメーター<ph id="ph2">`T`</ph>バリアントで<ph id="ph3">`IExtCovariant (Of Out T)`</ph>型パラメーターが共変で両方のインターフェイスは、同じインターフェイスを拡張します。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The same rule is applied to contravariant generic type parameters.</source>
          <target state="translated">同じ規則には、反変のジェネリック型パラメーターに適用されます。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>You can create an interface that extends both the interface where the generic type parameter <ph id="ph1">`T`</ph> is covariant and the interface where it is contravariant if in the extending interface the generic type parameter <ph id="ph2">`T`</ph> is invariant.</source>
          <target state="translated">ジェネリック型パラメーターで、インターフェイスを拡張するインターフェイスを作成する<ph id="ph1">`T`</ph>が共変とインターフェイスのジェネリック型パラメーターの場合の反変、拡張の場合は、インターフェイス<ph id="ph2">`T`</ph>バリアント型ではありません。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This is illustrated in the following code example.</source>
          <target state="translated">これは、次のコード例に示します。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>However, if a generic type parameter <ph id="ph1">`T`</ph> is declared covariant in one interface, you cannot declare it contravariant in the extending interface, or vice versa.</source>
          <target state="translated">ただし、ジェネリック型パラメーター<ph id="ph1">`T`</ph>は&amp;1; つのインターフェイスの宣言と共変は宣言できません反変拡張するインターフェイスまたはその逆です。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This is illustrated in the following code example.</source>
          <target state="translated">これは、次のコード例に示します。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Avoiding Ambiguity</source>
          <target state="translated">あいまいさを回避します。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>When you implement variant generic interfaces, variance can sometimes lead to ambiguity.</source>
          <target state="translated">バリアント ジェネリック インターフェイスを実装するときに分散できる場合もありますわかりにくくなる場合します。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>This should be avoided.</source>
          <target state="translated">このような状況は回避する必要があります。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For example, if you explicitly implement the same variant generic interface with different generic type parameters in one class, it can create ambiguity.</source>
          <target state="translated">たとえば、1 つのクラスで明示的に別のジェネリック型パラメーターを持つ同じバリアント ジェネリック インターフェイスを実装する場合のあいまいさを作成できます。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The compiler does not produce an error in this case, but it is not specified which interface implementation will be chosen at runtime.</source>
          <target state="translated">コンパイラ エラーは発生しませんが、ここでは、するインターフェイスの実装は、実行時に選択が指定されていません。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>This could lead to subtle bugs in your code.</source>
          <target state="translated">これにより、コードで軽度のバグです。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Consider the following code example.</source>
          <target state="translated">次のコード例を検討してください。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>With <ph id="ph1">`Option Strict Off`</ph>, Visual Basic generates a compiler warning when there is an ambiguous interface implementation.</source>
          <target state="translated"><ph id="ph1">`Option Strict Off`</ph>、Visual Basic では、あいまいなインターフェイスの実装がある場合に、コンパイラの警告が生成されます。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>With <ph id="ph1">`Option Strict On`</ph>, Visual Basic generates a compiler error.</source>
          <target state="translated"><ph id="ph1">`Option Strict On`</ph>、Visual Basic コンパイラ エラーが生成されます。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>In this example, it is unspecified how the <ph id="ph1">`pets.GetEnumerator`</ph> method chooses between <ph id="ph2">`Cat`</ph> and <ph id="ph3">`Dog`</ph>.</source>
          <target state="translated">この例では指定されていないか、<ph id="ph1">`pets.GetEnumerator`</ph>メソッドによって選択される<ph id="ph2">`Cat`</ph>と<ph id="ph3">`Dog`</ph>です。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>This could cause problems in your code.</source>
          <target state="translated">これにより、コードで問題が発生する可能性があります。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">関連項目</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Variance in Generic Interfaces (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/covariance-contravariance/variance-in-generic-interfaces.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>ジェネリック インターフェイス (Visual Basic) の分散<ept id="p1">](../../../../visual-basic/programming-guide/concepts/covariance-contravariance/variance-in-generic-interfaces.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Using Variance for Func and Action Generic Delegates (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/covariance-contravariance/using-variance-for-func-and-action-generic-delegates.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>Func および Action 汎用デリゲート (Visual Basic) に対する分散の使用<ept id="p1">](../../../../visual-basic/programming-guide/concepts/covariance-contravariance/using-variance-for-func-and-action-generic-delegates.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>