<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9ac9e28c82f8a6b5a9c1398961d831c956a649e0</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\language-reference\statements\delegate-statement.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f79df1431ef06be0f073a308dc55a84b5b9a867d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1472fef7aede60b0312fe41694c5c80ed20dfef9</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Delegate Statement | Microsoft Docs</source>
          <target state="translated">Delegate ステートメント |Microsoft ドキュメント</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Delegate Statement</source>
          <target state="translated">Delegate ステートメント</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Used to declare a delegate.</source>
          <target state="translated">デリゲートを宣言するために使用します。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>A delegate is a reference type that refers to a <ph id="ph1">`Shared`</ph> method of a type or to an instance method of an object.</source>
          <target state="translated">デリゲートは、参照型を参照する、<ph id="ph1">`Shared`</ph>メソッド、型またはオブジェクトのインスタンス メソッドにします。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Any procedure with matching parameter and return types can be used to create an instance of this delegate class.</source>
          <target state="translated">パラメーターと戻り値の型が一致するプロシージャは、このデリゲート クラスのインスタンスを作成するために使用します。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The procedure can then later be invoked by means of the delegate instance.</source>
          <target state="translated">プロシージャし、後で呼び出せるデリゲート インスタンスの作成。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Syntax</source>
          <target state="translated">構文</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Parts</source>
          <target state="translated">指定項目</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Term</source>
          <target state="translated">用語</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Definition</source>
          <target state="translated">定義</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">省略可能です。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>List of attributes that apply to this delegate.</source>
          <target state="translated">このデリゲートに適用される属性の一覧です。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Multiple attributes are separated by commas.</source>
          <target state="translated">複数の属性を指定するときは、コンマで区切ります。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You must enclose the <bpt id="p1">[</bpt>Attribute List<ept id="p1">](../../../visual-basic/language-reference/statements/attribute-list.md)</ept> in angle brackets ("<ph id="ph1">`&lt;`</ph>" and "<ph id="ph2">`&gt;`</ph>").</source>
          <target state="translated">囲む必要があります、<bpt id="p1">[</bpt>属性リスト<ept id="p1">](../../../visual-basic/language-reference/statements/attribute-list.md)</ept>山かっこで ("<ph id="ph1">`&lt;`</ph>「と」<ph id="ph2">`&gt;`</ph>") です。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">省略可能です。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Specifies what code can access the delegate.</source>
          <target state="translated">デリゲートにアクセスできるコードを指定します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Can be one of the following:</source>
          <target state="translated">次のいずれかの値を指定します。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><ph id="ph1"> -   </ph><bpt id="p1">[</bpt>Public<ept id="p1">](../../../visual-basic/language-reference/modifiers/public.md)</ept>.</source>
          <target state="translated"><ph id="ph1"> -   </ph><bpt id="p1">[</bpt>パブリック<ept id="p1">](../../../visual-basic/language-reference/modifiers/public.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Any code that can access the element that declares the delegate can access it.</source>
          <target state="translated">デリゲートを宣言した要素にアクセスするすべてのコードにアクセスできます。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><ph id="ph1">-   </ph><bpt id="p1">[</bpt>Protected<ept id="p1">](../../../visual-basic/language-reference/modifiers/protected.md)</ept>.</source>
          <target state="translated"><ph id="ph1">-   </ph><bpt id="p1">[</bpt>保護されている<ept id="p1">](../../../visual-basic/language-reference/modifiers/protected.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Only code within the delegate's class or a derived class can access it.</source>
          <target state="translated">唯一のコードは、デリゲートのクラスまたは派生クラスでは、それにアクセスできます。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><ph id="ph1">-   </ph><bpt id="p1">[</bpt>Friend<ept id="p1">](../../../visual-basic/language-reference/modifiers/friend.md)</ept>.</source>
          <target state="translated"><ph id="ph1">-   </ph><bpt id="p1">[</bpt>フレンド<ept id="p1">](../../../visual-basic/language-reference/modifiers/friend.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Only code within the same assembly can access the delegate.</source>
          <target state="translated">デリゲートが同じアセンブリ内のコードだけにアクセスできます。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><ph id="ph1">-   </ph><bpt id="p1">[</bpt>Private<ept id="p1">](../../../visual-basic/language-reference/modifiers/private.md)</ept>.</source>
          <target state="translated"><ph id="ph1">-   </ph><bpt id="p1">[</bpt>プライベート<ept id="p1">](../../../visual-basic/language-reference/modifiers/private.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Only code within the element that declares the delegate can access it.</source>
          <target state="translated">デリゲートを宣言する要素内のコードだけがアクセスできます。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You can specify <ph id="ph1">`Protected Friend`</ph> to enable access from code within the delegate's class, a derived class, or the same assembly.</source>
          <target state="translated">指定できます<ph id="ph1">`Protected Friend`</ph>デリゲートのクラスや派生クラスでは、同じアセンブリ内のコードからのアクセスを有効にします。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">省略可能です。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Indicates that this delegate redeclares and hides an identically named programming element, or set of overloaded elements, in a base class.</source>
          <target state="translated">このデリゲートを宣言し、同じ名前を持つプログラミング要素、または基底クラスのオーバー ロードされた要素のセットを非表示にすることを示します。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You can shadow any kind of declared element with any other kind.</source>
          <target state="translated">宣言された要素は、他の任意の種類の要素でシャドウできます。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>A shadowed element is unavailable from within the derived class that shadows it, except from where the shadowing element is inaccessible.</source>
          <target state="translated">シャドウされた要素は、その要素をシャドウする派生クラスからは使用できません。ただし、シャドウする要素がアクセスできない要素の場合は例外です。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For example, if a <ph id="ph1">`Private`</ph> element shadows a base class element, code that does not have permission to access the <ph id="ph2">`Private`</ph> element accesses the base class element instead.</source>
          <target state="translated">たとえば場合、<ph id="ph1">`Private`</ph>要素をシャドウする基本クラスの要素では、コードへのアクセス許可がない、<ph id="ph2">`Private`</ph>要素は、基本クラスの要素を代わりにアクセスします。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Optional, but either <ph id="ph1">`Sub`</ph> or <ph id="ph2">`Function`</ph> must appear.</source>
          <target state="translated">省略可能、ただし、いずれかの<ph id="ph1">`Sub`</ph>または<ph id="ph2">`Function`</ph>必要があります。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Declares this procedure as a delegate <ph id="ph1">`Sub`</ph> procedure that does not return a value.</source>
          <target state="translated">このプロシージャがデリゲートとしてを宣言<ph id="ph1">`Sub`</ph>値を返さないプロシージャです。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Optional, but either <ph id="ph1">`Sub`</ph> or <ph id="ph2">`Function`</ph> must appear.</source>
          <target state="translated">省略可能、ただし、いずれかの<ph id="ph1">`Sub`</ph>または<ph id="ph2">`Function`</ph>必要があります。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Declares this procedure as a delegate <ph id="ph1">`Function`</ph> procedure that returns a value.</source>
          <target state="translated">このプロシージャがデリゲートとしてを宣言<ph id="ph1">`Function`</ph>値を返すプロシージャです。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Required.</source>
          <target state="translated">必須です。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Name of the delegate type; follows standard variable naming conventions.</source>
          <target state="translated">デリゲートの型の名前標準的な変数の名前付け規則に従います。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">省略可能です。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>List of type parameters for this delegate.</source>
          <target state="translated">このデリゲートの型パラメーターの一覧です。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Multiple type parameters are separated by commas.</source>
          <target state="translated">複数の型パラメーターは、コンマで区切られます。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Optionally, each type parameter can be declared variant by using <ph id="ph1">`In`</ph> and <ph id="ph2">`Out`</ph> generic modifiers.</source>
          <target state="translated">必要に応じて、それぞれの型パラメーター宣言できますバリアントを使用して<ph id="ph1">`In`</ph>と<ph id="ph2">`Out`</ph>汎用修飾子です。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>You must enclose the <bpt id="p1">[</bpt>Type List<ept id="p1">](../../../visual-basic/language-reference/statements/type-list.md)</ept> in parentheses and introduce it with the <ph id="ph1">`Of`</ph> keyword.</source>
          <target state="translated">囲む必要があります、<bpt id="p1">[</bpt>型リスト<ept id="p1">](../../../visual-basic/language-reference/statements/type-list.md)</ept>かっこで囲まれたを導入し、<ph id="ph1">`Of`</ph>キーワードです。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">省略可能です。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>List of parameters that are passed to the procedure when it is called.</source>
          <target state="translated">呼び出されると、プロシージャに渡されるパラメーターの一覧。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>You must enclose the <bpt id="p1">[</bpt>Parameter List<ept id="p1">](../../../visual-basic/language-reference/statements/parameter-list.md)</ept> in parentheses.</source>
          <target state="translated">囲む必要があります、<bpt id="p1">[</bpt>パラメーター リスト<ept id="p1">](../../../visual-basic/language-reference/statements/parameter-list.md)</ept>かっこ内に示します。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Required if you specify a <ph id="ph1">`Function`</ph> procedure.</source>
          <target state="translated">指定するかどうかは必須、<ph id="ph1">`Function`</ph>プロシージャです。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Data type of the return value.</source>
          <target state="translated">戻り値のデータ型。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Remarks</source>
          <target state="translated">コメント</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Delegate`</ph> statement defines the parameter and return types of a delegate class.</source>
          <target state="translated"><ph id="ph1">`Delegate`</ph>ステートメントは、デリゲート クラスのパラメーターと戻り値の種類を定義します。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Any procedure with matching parameters and return types can be used to create an instance of this delegate class.</source>
          <target state="translated">パラメーターと戻り値の型が一致するプロシージャは、このデリゲート クラスのインスタンスを作成するために使用します。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The procedure can then later be invoked by means of the delegate instance, by calling the delegate's <ph id="ph1">`Invoke`</ph> method.</source>
          <target state="translated">プロシージャし、後で呼び出せるように、デリゲート インスタンスを使用して、デリゲートを呼び出すことによって<ph id="ph1">`Invoke`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Delegates can be declared at the namespace, module, class, or structure level, but not within a procedure.</source>
          <target state="translated">プロシージャ内ではありませんが、名前空間、モジュール、クラスまたは構造のレベルでは、デリゲートを宣言できます。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Each delegate class defines a constructor that is passed the specification of an object method.</source>
          <target state="translated">各デリゲート クラスでは、オブジェクト メソッドの仕様を渡すコンストラクターを定義します。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>An argument to a delegate constructor must be a reference to a method, or a lambda expression.</source>
          <target state="translated">デリゲート コンス トラクターに渡す引数は、メソッドまたはラムダ式への参照である必要があります。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>To specify a reference to a method, use the following syntax:</source>
          <target state="translated">メソッドへの参照を指定するには、次の構文を使用します。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`AddressOf`</ph> [<ph id="ph2">`expression`</ph>.]<ph id="ph3">`methodname`</ph></source>
          <target state="translated"><ph id="ph1">`AddressOf`</ph> [<ph id="ph2">`expression`</ph>.]<ph id="ph3">`methodname`</ph></target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The compile-time type of the <ph id="ph1">`expression`</ph> must be the name of a class or an interface that contains a method of the specified name whose signature matches the signature of the delegate class.</source>
          <target state="translated">コンパイル時の型、<ph id="ph1">`expression`</ph>クラスまたはそのシグネチャがデリゲート クラスのシグネチャと一致する指定した名前のメソッドを格納しているインターフェイスの名前を指定する必要があります。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`methodname`</ph> can be either a shared method or an instance method.</source>
          <target state="translated"><ph id="ph1">`methodname`</ph>共有メソッドまたはインスタンス メソッドのいずれかにすることができます。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`methodname`</ph> is not optional, even if you create a delegate for the default method of the class.</source>
          <target state="translated"><ph id="ph1">`methodname`</ph>クラスの既定のメソッドのデリゲートを作成した場合でも、省略可能ではありません。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>To specify a lambda expression, use the following syntax:</source>
          <target state="translated">ラムダ式を指定するには、次の構文を使用します。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Function`</ph> ([<ph id="ph2">`parm`</ph> As <ph id="ph3">`type`</ph>, <ph id="ph4">`parm2`</ph> As <ph id="ph5">`type2`</ph>, ...]) <ph id="ph6">`expression`</ph></source>
          <target state="translated"><ph id="ph1">`Function`</ph>([<ph id="ph2">`parm`</ph> As <ph id="ph3">`type`</ph>, <ph id="ph4">`parm2`</ph> As <ph id="ph5">`type2`</ph>, ...])<ph id="ph6">`expression`</ph></target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The signature of the function must match that of the delegate type.</source>
          <target state="translated">デリゲート型の関数の署名が一致する必要があります。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>For more information about lambda expressions, see <bpt id="p1">[</bpt>Lambda Expressions<ept id="p1">](../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)</ept>.</source>
          <target state="translated">ラムダ式について詳しくは、「<bpt id="p1">[</bpt>ラムダ式<ept id="p1">](../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)</ept>」をご覧ください。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>For more information about delegates, see <bpt id="p1">[</bpt>Delegates<ept id="p1">](../../../visual-basic/programming-guide/language-features/delegates/index.md)</ept>.</source>
          <target state="translated">デリゲートの詳細については、次を参照してください。<bpt id="p1">[</bpt>デリゲート<ept id="p1">](../../../visual-basic/programming-guide/language-features/delegates/index.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">例</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The following example uses the <ph id="ph1">`Delegate`</ph> statement to declare a delegate for operating on two numbers and returning a number.</source>
          <target state="translated">次の例では、<ph id="ph1">`Delegate`</ph>の&amp;2; つの数値で動作している数値を返すデリゲートを宣言するステートメントです。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`DelegateTest`</ph> method takes an instance of a delegate of this type and uses it to operate on pairs of numbers.</source>
          <target state="translated"><ph id="ph1">`DelegateTest`</ph>メソッドは、この型のデリゲートのインスタンスを使用し、番号のペアで動作するように使用します。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrDelegates#14<ept id="p2">](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/delegate-statement_1.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrDelegates&amp;#14;<ept id="p2">](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/delegate-statement_1.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">関連項目</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>AddressOf Operator<ept id="p1">](../../../visual-basic/language-reference/operators/addressof-operator.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>AddressOf 演算子<ept id="p1">](../../../visual-basic/language-reference/operators/addressof-operator.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Of<ept id="p1">](../../../visual-basic/language-reference/statements/of-clause.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Of<ept id="p1">](../../../visual-basic/language-reference/statements/of-clause.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Delegates<ept id="p1">](../../../visual-basic/programming-guide/language-features/delegates/index.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>デリゲート<ept id="p1">](../../../visual-basic/programming-guide/language-features/delegates/index.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Use a Generic Class<ept id="p1">](../../../visual-basic/programming-guide/language-features/data-types/how-to-use-a-generic-class.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>方法: ジェネリック クラスを使用して<ept id="p1">](../../../visual-basic/programming-guide/language-features/data-types/how-to-use-a-generic-class.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Generic Types in Visual Basic<ept id="p1">](../../../visual-basic/programming-guide/language-features/data-types/generic-types.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Visual Basic におけるジェネリック型<ept id="p1">](../../../visual-basic/programming-guide/language-features/data-types/generic-types.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Covariance and Contravariance<ept id="p1">](http://msdn.microsoft.com/library/a58cc086-276f-4f91-a366-85b7f95f38b8)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>ジェネリックの共変性と反変性<ept id="p1">](http://msdn.microsoft.com/library/a58cc086-276f-4f91-a366-85b7f95f38b8)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>In<ept id="p1">](../../../visual-basic/language-reference/modifiers/in-generic-modifier.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>で<ept id="p1">](../../../visual-basic/language-reference/modifiers/in-generic-modifier.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Out<ept id="p1">](../../../visual-basic/language-reference/modifiers/out-generic-modifier.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>チェック アウトします。<ept id="p1">](../../../visual-basic/language-reference/modifiers/out-generic-modifier.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>