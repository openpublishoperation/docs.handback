<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3bca15a07a88195589b9c9de5f9842eea42912f1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\linq\features-that-support-linq.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f5e1abe3f7b181cf54800f1df0e8469b67a68679</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">51e2853e5c347f4876ecde17a06a7497bf97eeb6</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Visual Basic Features That Support LINQ | Microsoft Docs</source>
          <target state="translated">Visual Basic の LINQ をサポートする機能 |Microsoft ドキュメント</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Visual Basic Features That Support LINQ</source>
          <target state="translated">LINQ をサポートする Visual Basic の機能</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The name <ph id="ph1">[!INCLUDE[vbteclinqext](../../../../csharp/getting-started/includes/vbteclinqext_md.md)]</ph> refers to technology in Visual Basic that supports query syntax and other language constructs directly in the language.</source>
          <target state="translated">名前<ph id="ph1">[!INCLUDE[vbteclinqext](../../../../csharp/getting-started/includes/vbteclinqext_md.md)]</ph>サポートしているクエリの構文を言語内で直接その他の言語構造は、Visual Basic での技術を参照します。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>With <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph>, you do not have to learn a new language to query against an external data source.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph>、外部データ ソースに対してクエリを新しい言語を習得する必要はありません。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You can query against data in relational databases, XML stores, or objects by using Visual Basic.</source>
          <target state="translated">リレーショナル データベース、XML ストア、またはオブジェクトのデータを照会するには、Visual Basic を使用します。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This integration of query capabilities into the language enables compile-time checking for syntax errors and type safety.</source>
          <target state="translated">この統合言語クエリ機能のにより、コンパイル時の構文エラーと型の安全性をチェックします。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This integration also ensures that you already know most of what you have to know to write rich, varied queries in Visual Basic.</source>
          <target state="translated">この統合は、Visual Basic で豊富なさまざまなクエリを記述しておく必要があるのほとんどを既に理解しているようにもなります。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The following sections describe the language constructs that support LINQ in enough detail to enable you to get started in reading the introductory documentation, code examples, and sample applications.</source>
          <target state="translated">次のセクションでは、概要ドキュメント、コード例については、およびサンプル アプリケーションの読み取りを開始するために十分な詳細情報で LINQ をサポートする言語構成要素について説明します。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You can also click the links to find more detailed explanations of how the language features come together to enable language-integrated query.</source>
          <target state="translated">また、どの言語機能が連携する統合言語クエリを有効にするのより詳細な説明を検索するリンクをクリックします。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A good place to start is <bpt id="p1">[</bpt>Walkthrough: Writing Queries in Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/walkthrough-writing-queries.md)</ept>.</source>
          <target state="translated">開始するが最適<bpt id="p1">[</bpt>チュートリアル: Visual Basic でクエリを記述<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/walkthrough-writing-queries.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Query Expressions</source>
          <target state="translated">クエリ式</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Query expressions in Visual Basic can be expressed in a declarative syntax similar to that of SQL or XQuery.</source>
          <target state="translated">Visual Basic のクエリ式は、SQL や XQuery などのような宣言型の構文で表現できます。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>At compile time, query syntax is converted into method calls to a LINQ provider's implementation of the standard query operator extension methods.</source>
          <target state="translated">コンパイル時に、クエリの構文は、標準クエリ演算子の拡張メソッドの LINQ プロバイダーの実装に対するメソッド呼び出しに変換されます。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Applications control which standard query operators are in scope by specifying the appropriate namespace with an <ph id="ph1">`Imports`</ph> statement.</source>
          <target state="translated">標準クエリ演算子がスコープ内で適切な名前空間を指定することによって、アプリケーションを制御、<ph id="ph1">`Imports`</ph>ステートメントです。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Syntax for a Visual Basic query expression looks like this:</source>
          <target state="translated">Visual Basic のクエリ式の構文は、次のようにはなります。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQVbFeatures#1<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/features-that-support-linq_1.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQVbFeatures&amp;#1;<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/features-that-support-linq_1.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Introduction to LINQ in Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/language-features/linq/introduction-to-linq.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。 <bpt id="p1">[</bpt>Visual Basic における LINQ の概要<ept id="p1">](../../../../visual-basic/programming-guide/language-features/linq/introduction-to-linq.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Implicitly Typed Variables</source>
          <target state="translated">暗黙的に型指定された変数</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Instead of explicitly specifying a type when you declare and initialize a variable, you can enable the compiler to infer and assign the type.</source>
          <target state="translated">明示的に宣言して、変数を初期化するときに、型を指定する、代わりに、型をコンパイラが有効にできます。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This is referred to as <bpt id="p1">*</bpt>local type inference<ept id="p1">*</ept>.</source>
          <target state="translated">これとして参照は<bpt id="p1">*</bpt>ローカル型推論<ept id="p1">*</ept>します。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Variables whose types are inferred are strongly typed, just like variables whose type you specify explicitly.</source>
          <target state="translated">変数の型は推論される厳密に型指定、型を明示的に指定した変数と同じようにします。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Local type inference works only when you are defining a local variable inside a method body.</source>
          <target state="translated">ローカル型推論は、メソッドの本文内のローカル変数を定義するときにのみ機能します。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Option Infer Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/option-infer-statement.md)</ept> and <bpt id="p2">[</bpt>Local Type Inference<ept id="p2">](../../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。 <bpt id="p1">[</bpt>Option Infer ステートメント<ept id="p1">](../../../../visual-basic/language-reference/statements/option-infer-statement.md)</ept>と<bpt id="p2">[</bpt>ローカル型推論<ept id="p2">](../../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The following example illustrates local type inference.</source>
          <target state="translated">次の例では、ローカル型推論を示しています。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>To use this example, you must set <ph id="ph1">`Option Infer`</ph> to <ph id="ph2">`On`</ph>.</source>
          <target state="translated">この例を使用するに設定する必要があります<ph id="ph1">`Option Infer`</ph>に<ph id="ph2">`On`</ph>します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQVbFeatures#2<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/features-that-support-linq_2.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQVbFeatures&amp;#2;<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/features-that-support-linq_2.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Local type inference also makes it possible to create anonymous types, which are described later in this section and are necessary for LINQ queries.</source>
          <target state="translated">ローカル型推論では、このセクションで後で説明し、LINQ クエリに必要な匿名型を作成することです。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In the following LINQ example, type inference occurs if <ph id="ph1">`Option Infer`</ph> is either <ph id="ph2">`On`</ph> or <ph id="ph3">`Off`</ph>.</source>
          <target state="translated">場合は次の LINQ の例では型の推定が発生した<ph id="ph1">`Option Infer`</ph>か<ph id="ph2">`On`</ph>または<ph id="ph3">`Off`</ph>です。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>A compile-time error occurs if <ph id="ph1">`Option Infer`</ph> is <ph id="ph2">`Off`</ph> and <ph id="ph3">`Option Strict`</ph> is <ph id="ph4">`On`</ph>.</source>
          <target state="translated">コンパイル時エラーが発生<ph id="ph1">`Option Infer`</ph>は<ph id="ph2">`Off`</ph>と<ph id="ph3">`Option Strict`</ph>は<ph id="ph4">`On`</ph>です。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQVbFeatures#3<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/features-that-support-linq_3.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQVbFeatures&amp;#3;<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/features-that-support-linq_3.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Object Initializers</source>
          <target state="translated">オブジェクト初期化子</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Object initializers are used in query expressions when you have to create an anonymous type to hold the results of a query.</source>
          <target state="translated">オブジェクト初期化子は、クエリの結果を保持するために匿名型を作成するときに、クエリ式で使用されます。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>They also can be used to initialize objects of named types outside of queries.</source>
          <target state="translated">これらも使用できますクエリの外部で名前付きの型のオブジェクトを初期化します。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>By using an object initializer, you can initialize an object in a single line without explicitly calling a constructor.</source>
          <target state="translated">オブジェクト初期化子を使用するは、明示的にコンス トラクターを呼び出さずに、1 行でオブジェクトを初期化します。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Assuming that you have a class named <ph id="ph1">`Customer`</ph> that has public <ph id="ph2">`Name`</ph> and <ph id="ph3">`Phone`</ph> properties, along with other properties, an object initializer can be used in this manner:</source>
          <target state="translated">という名前のクラスがある場合<ph id="ph1">`Customer`</ph>を持つパブリック<ph id="ph2">`Name`</ph>と<ph id="ph3">`Phone`</ph>プロパティとその他のプロパティでは、この方法でオブジェクト初期化子を使用できます。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQVbFeatures#4<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/features-that-support-linq_4.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQVbFeatures&amp;4;<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/features-that-support-linq_4.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Object Initializers: Named and Anonymous Types<ept id="p1">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/object-initializers-named-and-anonymous-types.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>オブジェクト初期化子: 名前付きおよび匿名型<ept id="p1">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/object-initializers-named-and-anonymous-types.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Anonymous Types</source>
          <target state="translated">匿名型</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Anonymous types provide a convenient way to temporarily group a set of properties into an element that you want to include in a query result.</source>
          <target state="translated">匿名型は、クエリ結果に追加する要素にプロパティのセットを一時的にグループ化する便利な手段を提供します。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This enables you to choose any combination of available fields in the query, in any order, without defining a named data type for the element.</source>
          <target state="translated">これにより、要素の名前付きのデータ型を定義することがなく任意の順序で、クエリで使用できるフィールドの任意の組み合わせを選択できます。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">*</bpt>anonymous type<ept id="p1">*</ept> is constructed dynamically by the compiler.</source>
          <target state="translated"><bpt id="p1">*</bpt>匿名型<ept id="p1">*</ept>はコンパイラによって動的に構築します。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The name of the type is assigned by the compiler, and it might change with each new compilation.</source>
          <target state="translated">型の名前は、コンパイラによって割り当てられ、新しいコンパイルのたびに変更があります。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Therefore, the name cannot be used directly.</source>
          <target state="translated">そのため、名前は直接使用できません。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Anonymous types are initialized in the following way:</source>
          <target state="translated">匿名型は、次のように初期化されます。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQVbFeatures#5<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/features-that-support-linq_5.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQVbFeatures&amp;#5;<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/features-that-support-linq_5.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Anonymous Types<ept id="p1">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/anonymous-types.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>匿名型<ept id="p1">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/anonymous-types.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Extension Methods</source>
          <target state="translated">拡張メソッド</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Extension methods enable you to add methods to a data type or interface from outside the definition.</source>
          <target state="translated">拡張メソッドを使用すると、データ型またはインターフェイスの元の定義の外部にメソッドを追加できます。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This feature enables you to, in effect, add new methods to an existing type without actually modifying the type.</source>
          <target state="translated">この機能では、実際には、新しいメソッドを実際には、型を変更しなくても既存の型に追加することができます。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The standard query operators are themselves a set of extension methods that provide <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> query functionality for any type that implements &lt;xref:System.Collections.Generic.IEnumerable%601&gt;.</source>
          <target state="translated">標準クエリ演算子自体が提供する拡張メソッドのセット<ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> &lt;xref:System.Collections.Generic.IEnumerable%601&gt;.&lt;/xref:System.Collections.Generic.IEnumerable%601&gt;を実装する任意の型のクエリ機能</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Other extensions to &lt;xref:System.Collections.Generic.IEnumerable%601&gt; include &lt;xref:System.Linq.Enumerable.Count%2A&gt;, &lt;xref:System.Linq.Enumerable.Union%2A&gt;, and &lt;xref:System.Linq.Enumerable.Intersect%2A&gt;.</source>
          <target state="translated">他の拡張機能に&lt;xref:System.Collections.Generic.IEnumerable%601&gt;含める&lt;xref:System.Linq.Enumerable.Count%2A&gt;、 &lt;xref:System.Linq.Enumerable.Union%2A&gt;、 &lt;xref:System.Linq.Enumerable.Intersect%2A&gt;.&lt;/xref:System.Linq.Enumerable.Intersect%2A&gt; &lt;/xref:System.Linq.Enumerable.Union%2A&gt; &lt;/xref:System.Linq.Enumerable.Count%2A&gt; &lt;/xref:System.Collections.Generic.IEnumerable%601&gt;</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The following extension method adds a print method to the &lt;xref:System.String&gt; class.</source>
          <target state="translated">次の拡張メソッドでは、印刷メソッドを&lt;xref:System.String&gt;クラス&lt;/xref:System.String&gt;に追加します。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQVbFeatures#6<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/features-that-support-linq_6.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQVbFeatures&amp;6;<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/features-that-support-linq_6.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The method is called like an ordinary instance method of &lt;xref:System.String&gt;:</source>
          <target state="translated">&lt;xref:System.String&gt;::&lt;/xref:System.String&gt;の通常のインスタンス メソッドのように、メソッドが呼び出されます</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQVbFeatures#7<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/features-that-support-linq_7.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQVbFeatures&amp;#7;<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/features-that-support-linq_7.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Extension Methods<ept id="p1">](../../../../visual-basic/programming-guide/language-features/procedures/extension-methods.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>拡張メソッド<ept id="p1">](../../../../visual-basic/programming-guide/language-features/procedures/extension-methods.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Lambda Expressions</source>
          <target state="translated">ラムダ式</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>A lambda expression is a function without a name that calculates and returns a single value.</source>
          <target state="translated">ラムダ式は、計算して、単一の値を返す名前のない関数です。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Unlike named functions, a lambda expression can be defined and executed at the same time.</source>
          <target state="translated">名前付きの関数とは異なり、ラムダ式の定義し、同時に実行します。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The following example displays 4.</source>
          <target state="translated">次の例では、4 を表示します。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQVbFeatures#8<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/features-that-support-linq_8.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQVbFeatures&amp;#8;<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/features-that-support-linq_8.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>You can assign the lambda expression definition to a variable name and then use the name to call the function.</source>
          <target state="translated">変数名にラムダ式の定義を割り当てるでき、名前を使用して、関数を呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The following example also displays 4.</source>
          <target state="translated">次の例では、4 も表示されます。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQVbFeatures#12<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/features-that-support-linq_9.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQVbFeatures&amp;#12;<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/features-that-support-linq_9.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph>, lambda expressions underlie many of the standard query operators.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph>ラムダ式には、標準クエリ演算子の多くが基本となります。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The compiler creates lambda expressions to capture the calculations that are defined in fundamental query methods such as <ph id="ph1">`Where`</ph>, <ph id="ph2">`Select`</ph>, <ph id="ph3">`Order By`</ph>, <ph id="ph4">`Take While`</ph>, and others.</source>
          <target state="translated">コンパイラなど、基本的なクエリ メソッドで定義されている計算をキャプチャするラムダ式を作成する<ph id="ph1">`Where`</ph>、 <ph id="ph2">`Select`</ph>、 <ph id="ph3">`Order By`</ph>、 <ph id="ph4">`Take While`</ph>、およびその他。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>For example, the following code defines a query that returns all senior students from a list of students.</source>
          <target state="translated">たとえば、次のコードでは、学生の一覧から上級生を返すクエリを定義します。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQVbFeatures#9<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/features-that-support-linq_10.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQVbFeatures&amp;#9;<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/features-that-support-linq_10.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The query definition is compiled into code that is similar to the following example, which uses two lambda expressions to specify the arguments for <ph id="ph1">`Where`</ph> and <ph id="ph2">`Select`</ph>.</source>
          <target state="translated">クエリ定義は次の例は、2 つのラムダ式を使用して引数を指定する次のようなコードにコンパイル<ph id="ph1">`Where`</ph>と<ph id="ph2">`Select`</ph>です。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQVbFeatures#10<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/features-that-support-linq_11.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQVbFeatures&amp;#10;<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/features-that-support-linq_11.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Either version can be run by using a <ph id="ph1">`For Each`</ph> loop:</source>
          <target state="translated">いずれかのバージョンを使用して実行できる、<ph id="ph1">`For Each`</ph>ループします。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQVbFeatures#11<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/features-that-support-linq_12.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQVbFeatures&amp;#11;<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/features-that-support-linq_12.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Lambda Expressions<ept id="p1">](../../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>ラムダ式<ept id="p1">](../../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">関連項目</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Language-Integrated Query (LINQ) (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/index.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>統合言語クエリ (LINQ) (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/index.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Getting Started with LINQ in Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/getting-started-with-linq.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Visual Basic における LINQ の概要<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/getting-started-with-linq.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>LINQ and Strings (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/linq-and-strings.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>LINQ と文字列 (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/linq-and-strings.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Option Infer Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/option-infer-statement.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Option Infer ステートメント<ept id="p1">](../../../../visual-basic/language-reference/statements/option-infer-statement.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Option Strict Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/option-strict-statement.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>Option Strict ステートメント<ept id="p1">](../../../../visual-basic/language-reference/statements/option-strict-statement.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>