<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b4a71f961d39d0cf34922ee3bf498e89a1288995</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\linq\finding-text-in-word-documents.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1debcfde1047de92d27eac4c58b048d94b8c7e41</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4ac9fcd30b9faf8ddc5c2caec7c149179ca96320</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Finding Text in Word Documents (Visual Basic) | Microsoft Docs</source>
          <target state="translated">(Visual Basic) の Word 文書でテキストの検索 |Microsoft ドキュメント</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Finding Text in Word Documents (Visual Basic)</source>
          <target state="translated">(Visual Basic) の Word 文書でテキストの検索</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic extends the previous queries to do something useful: find all occurrences of a string in the document.</source>
          <target state="translated">このトピックでは、以前のクエリを拡張して、ドキュメント内で特定の文字列の出現箇所をすべて検索します。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">例</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This example processes a WordprocessingML document, to find all the occurences of a specific piece of text in the document.</source>
          <target state="translated">この例では、WordprocessingML ドキュメントを処理して、ドキュメント内で特定のテキストの出現箇所をすべて検索します。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>To do this, we use a query that finds the string "Hello".</source>
          <target state="translated">ここではそのために、"Hello" という文字列を検索するクエリを使用します。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This example builds on the previous examples in this tutorial.</source>
          <target state="translated">この例は、このチュートリアルのこれまでの例に基づいています。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The new query is called out in comments in the code below.</source>
          <target state="translated">新しいクエリについては、以下のコード内にあるコメントで説明が示されています。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For instructions for creating the source document for this example, see <bpt id="p1">[</bpt>Creating the Source Office Open XML Document (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/creating-the-source-office-open-xml-document.md)</ept>.</source>
          <target state="translated">この例のソース ドキュメントを作成する方法の詳細については、次を参照してください。<bpt id="p1">[</bpt>ソース Office Open XML ドキュメント (Visual Basic) を作成する<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/creating-the-source-office-open-xml-document.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This example uses classes found in the WindowsBase assembly.</source>
          <target state="translated">この例では、WindowsBase アセンブリに含まれるクラスを使用します。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>It uses types in the &lt;xref:System.IO.Packaging?displayProperty=fullName&gt; namespace.</source>
          <target state="translated">内の型を使用して、&lt;xref:System.IO.Packaging?displayProperty=fullName&gt;名前空間&lt;/xref:System.IO.Packaging?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You can, of course, modify the search so that it searches for lines with a specific style.</source>
          <target state="translated">この検索に変更を加えて、特定のスタイルの行を検索することもできます。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The following query finds all blank lines that have the Code style:</source>
          <target state="translated">次のクエリは、Code スタイルの空白行をすべて検索します。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Of course, this example could be enhanced in a number of ways.</source>
          <target state="translated">この例はさまざまな形で強化できます。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For example, we could use regular expressions to search for text, we could iterate through all the Word files in a particular directory, and so on.</source>
          <target state="translated">たとえば、正規表現を使用してテキストを検索したり、特定のディレクトリにあるすべての Word ファイルを反復処理したりすることができます。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Note that this example performs approximately as well as if it were written as a single query.</source>
          <target state="translated">この例は、1 つのクエリとして記述された場合とほぼ同程度のパフォーマンスを発揮します。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Because each query is implemented in a lazy, deferred fashion, each query does not yield its results until the query is iterated.</source>
          <target state="translated">各クエリはレイジー遅延方式で実装されているため、反復処理されるまで結果は生成されません。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For more information about execution and lazy evaluation, see <bpt id="p1">[</bpt>Deferred Execution and Lazy Evaluation in LINQ to XML (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/deferred-execution-and-lazy-evaluation-in-linq-to-xml.md)</ept>.</source>
          <target state="translated">実行とレイジー評価の詳細については、次を参照してください。<bpt id="p1">[</bpt>遅延実行とレイジー評価 linq to XML (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/deferred-execution-and-lazy-evaluation-in-linq-to-xml.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Next Steps</source>
          <target state="translated">次の手順</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The next section provides more information about WordprocessingML documents:</source>
          <target state="translated">次のセクションでは、WordprocessingML ドキュメントについて詳細に説明します。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Details of Office Open XML WordprocessingML Documents (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/details-of-office-open-xml-wordprocessingml-documents.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Office の詳細については Open XML WordprocessingML ドキュメント (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/details-of-office-open-xml-wordprocessingml-documents.md)</ept></target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">関連項目</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Tutorial: Manipulating Content in a WordprocessingML Document (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/tutorial-manipulating-content-in-a-wordprocessingml-document.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>チュートリアル: WordprocessingML ドキュメント (Visual Basic) 内のコンテンツの操作<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/tutorial-manipulating-content-in-a-wordprocessingml-document.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Refactoring Using a Pure Function (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/refactoring-using-a-pure-function.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>純粋関数 (Visual Basic) を使用してリファクタリングします。<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/refactoring-using-a-pure-function.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Deferred Execution and Lazy Evaluation in LINQ to XML (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/deferred-execution-and-lazy-evaluation-in-linq-to-xml.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>遅延実行とレイジー評価 linq to XML (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/deferred-execution-and-lazy-evaluation-in-linq-to-xml.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>