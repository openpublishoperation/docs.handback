<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">71b4f64f6deeb334412c87131ccd9480620f284f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\language-reference\operators\floating-point-division-operator.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9c4e6fe2d68f7279616d50e857366983419b1e62</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6a25525c92ef6d214c6c7523e9c084e4d741950b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>/ Operator (Visual Basic) | Microsoft Docs</source>
          <target state="translated">/演算子 (Visual Basic) |Microsoft ドキュメント</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>/ Operator (Visual Basic)</source>
          <target state="translated">/ 演算子 (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Divides two numbers and returns a floating-point result.</source>
          <target state="translated">2 つの数値を除算して、浮動小数点の結果を返します。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
          <target state="translated">構文</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parts</source>
          <target state="translated">指定項目</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Required.</source>
          <target state="translated">必須です。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Any numeric expression.</source>
          <target state="translated">任意の数式。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Required.</source>
          <target state="translated">必須です。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Any numeric expression.</source>
          <target state="translated">任意の数式。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Supported Types</source>
          <target state="translated">サポートされている型</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>All numeric types, including the unsigned and floating-point types and <ph id="ph1">`Decimal`</ph>.</source>
          <target state="translated">署名なしで、浮動小数点型を含むすべての数値型と<ph id="ph1">`Decimal`</ph>です。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Result</source>
          <target state="translated">結果</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The result is the full quotient of <ph id="ph1">`expression1`</ph> divided by <ph id="ph2">`expression2`</ph>, including any remainder.</source>
          <target state="translated">結果は、すべての商<ph id="ph1">`expression1`</ph>で割った値<ph id="ph2">`expression2`</ph>、小数部分を含みます。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>\ Operator (Visual Basic)<ept id="p1">](../../../visual-basic/language-reference/operators/integer-division-operator.md)</ept> returns the integer quotient, which drops the remainder.</source>
          <target state="translated"><bpt id="p1">[</bpt>\ 演算子 (Visual Basic)<ept id="p1">](../../../visual-basic/language-reference/operators/integer-division-operator.md)</ept>残りの部分を削除する整数の商を返します。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Remarks</source>
          <target state="translated">コメント</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The data type of the result depends on the types of the operands.</source>
          <target state="translated">結果のデータ型は、オペランドの型によって異なります。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The following table shows how the data type of the result is determined.</source>
          <target state="translated">次の表では、結果のデータ型を決定する方法を示します。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Operand data types</source>
          <target state="translated">オペランドのデータ型</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Result data type</source>
          <target state="translated">結果のデータ型</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Both expressions are integral data types (<bpt id="p1">[</bpt>SByte<ept id="p1">](../../../visual-basic/language-reference/data-types/sbyte-data-type.md)</ept>, <bpt id="p2">[</bpt>Byte<ept id="p2">](../../../visual-basic/language-reference/data-types/byte-data-type.md)</ept>, <bpt id="p3">[</bpt>Short<ept id="p3">](../../../visual-basic/language-reference/data-types/short-data-type.md)</ept>, <bpt id="p4">[</bpt>UShort<ept id="p4">](../../../visual-basic/language-reference/data-types/ushort-data-type.md)</ept>, <bpt id="p5">[</bpt>Integer<ept id="p5">](../../../visual-basic/language-reference/data-types/integer-data-type.md)</ept>, <bpt id="p6">[</bpt>UInteger<ept id="p6">](../../../visual-basic/language-reference/data-types/uinteger-data-type.md)</ept>, <bpt id="p7">[</bpt>Long<ept id="p7">](../../../visual-basic/language-reference/data-types/long-data-type.md)</ept>, <bpt id="p8">[</bpt>ULong<ept id="p8">](../../../visual-basic/language-reference/data-types/ulong-data-type.md)</ept>)</source>
          <target state="translated">両方の式が整数データ型 (<bpt id="p1">[</bpt>SByte<ept id="p1">](../../../visual-basic/language-reference/data-types/sbyte-data-type.md)</ept>、<bpt id="p2">[</bpt>バイト<ept id="p2">](../../../visual-basic/language-reference/data-types/byte-data-type.md)</ept>、<bpt id="p3">[</bpt>短い<ept id="p3">](../../../visual-basic/language-reference/data-types/short-data-type.md)</ept>、 <bpt id="p4">[</bpt>UShort<ept id="p4">](../../../visual-basic/language-reference/data-types/ushort-data-type.md)</ept>、<bpt id="p5">[</bpt>整数<ept id="p5">](../../../visual-basic/language-reference/data-types/integer-data-type.md)</ept>、 <bpt id="p6">[</bpt>UInteger<ept id="p6">](../../../visual-basic/language-reference/data-types/uinteger-data-type.md)</ept>、<bpt id="p7">[</bpt>長い<ept id="p7">](../../../visual-basic/language-reference/data-types/long-data-type.md)</ept>、 <bpt id="p8">[</bpt>ULong<ept id="p8">](../../../visual-basic/language-reference/data-types/ulong-data-type.md)</ept>)</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>One expression is a <bpt id="p1">[</bpt>Single<ept id="p1">](../../../visual-basic/language-reference/data-types/single-data-type.md)</ept> data type and the other is not a <bpt id="p2">[</bpt>Double<ept id="p2">](../../../visual-basic/language-reference/data-types/double-data-type.md)</ept></source>
          <target state="translated">1 つの式は、<bpt id="p1">[</bpt>単一<ept id="p1">](../../../visual-basic/language-reference/data-types/single-data-type.md)</ept>データ型と、その他は、<bpt id="p2">[</bpt>二重<ept id="p2">](../../../visual-basic/language-reference/data-types/double-data-type.md)</ept></target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>One expression is a <bpt id="p1">[</bpt>Decimal<ept id="p1">](../../../visual-basic/language-reference/data-types/decimal-data-type.md)</ept> data type and the other is not a <bpt id="p2">[</bpt>Single<ept id="p2">](../../../visual-basic/language-reference/data-types/single-data-type.md)</ept> or a <bpt id="p3">[</bpt>Double<ept id="p3">](../../../visual-basic/language-reference/data-types/double-data-type.md)</ept></source>
          <target state="translated">1 つの式は、 <bpt id="p1">[</bpt>Decimal<ept id="p1">](../../../visual-basic/language-reference/data-types/decimal-data-type.md)</ept>データ型とその他のではありません、<bpt id="p2">[</bpt>単一<ept id="p2">](../../../visual-basic/language-reference/data-types/single-data-type.md)</ept>または<bpt id="p3">[</bpt>二重<ept id="p3">](../../../visual-basic/language-reference/data-types/double-data-type.md)</ept></target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Either expression is a <bpt id="p1">[</bpt>Double<ept id="p1">](../../../visual-basic/language-reference/data-types/double-data-type.md)</ept> data type</source>
          <target state="translated">いずれかの式、<bpt id="p1">[</bpt>二重<ept id="p1">](../../../visual-basic/language-reference/data-types/double-data-type.md)</ept>データ型</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Before division is performed, any integral numeric expressions are widened to <ph id="ph1">`Double`</ph>.</source>
          <target state="translated">整数の数式に拡大変換除算を実行する前に<ph id="ph1">`Double`</ph>します。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If you assign the result to an integral data type, Visual Basic attempts to convert the result from <ph id="ph1">`Double`</ph> to that type.</source>
          <target state="translated">Visual Basic がから結果を変換しようとした場合は、結果を整数データ型を割り当てると、<ph id="ph1">`Double`</ph>その型にします。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This can throw an exception if the result does not fit in that type.</source>
          <target state="translated">結果がその型に収まらない場合は、例外がスローすることができます。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In particular, see "Attempted Division by Zero" on this Help page.</source>
          <target state="translated">具体的には、このページで「0 による除算」を参照してください。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`expression1`</ph> or <ph id="ph2">`expression2`</ph> evaluates to <bpt id="p1">[</bpt>Nothing<ept id="p1">](../../../visual-basic/language-reference/nothing.md)</ept>, it is treated as zero.</source>
          <target state="translated">場合<ph id="ph1">`expression1`</ph>または<ph id="ph2">`expression2`</ph>に評価<bpt id="p1">[</bpt>Nothing<ept id="p1">](../../../visual-basic/language-reference/nothing.md)</ept>、0 として扱われます。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Attempted Division by Zero</source>
          <target state="translated">0 による除算</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`expression2`</ph> evaluates to zero, the <ph id="ph2">`/`</ph> operator behaves differently for different operand data types.</source>
          <target state="translated">場合<ph id="ph1">`expression2`</ph>をゼロに評価される、<ph id="ph2">`/`</ph>演算子がオペランドのデータ型の動作とは異なります。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The following table shows the possible behaviors.</source>
          <target state="translated">次の表は、それぞれの動作を示します。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Operand data types</source>
          <target state="translated">オペランドのデータ型</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Behavior if <ph id="ph1">`expression2`</ph> is zero</source>
          <target state="translated">動作場合<ph id="ph1">`expression2`</ph>ゼロ</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Floating-point (<ph id="ph1">`Single`</ph> or <ph id="ph2">`Double`</ph>)</source>
          <target state="translated">浮動小数点 (<ph id="ph1">`Single`</ph>または<ph id="ph2">`Double`</ph>)</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Returns infinity (&lt;xref:System.Double.PositiveInfinity&gt; or &lt;xref:System.Double.NegativeInfinity&gt;), or &lt;xref:System.Double.NaN&gt; (not a number) if <ph id="ph1">`expression1`</ph> is also zero</source>
          <target state="translated">無限大が返されます (&lt;xref:System.Double.PositiveInfinity&gt;または&lt;xref:System.Double.NegativeInfinity&gt;)、または&lt;xref:System.Double.NaN&gt;(非数) 場合<ph id="ph1">`expression1`</ph>も&amp;0; である&lt;/xref:System.Double.NaN&gt;&lt;/xref:System.Double.NegativeInfinity&gt;&lt;/xref:System.Double.PositiveInfinity&gt;</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Throws &lt;xref:System.DivideByZeroException&gt;</source>
          <target state="translated">スローされます。&lt;xref:System.DivideByZeroException&gt;&lt;/xref:System.DivideByZeroException&gt;</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Integral (signed or unsigned)</source>
          <target state="translated">整数 (符号付きまたは符号なし)</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Attempted conversion back to integral type throws &lt;xref:System.OverflowException&gt; because integral types cannot accept &lt;xref:System.Double.PositiveInfinity&gt;, &lt;xref:System.Double.NegativeInfinity&gt;, or &lt;xref:System.Double.NaN&gt;</source>
          <target state="translated">整数型への変換を試行&lt;xref:System.OverflowException&gt;整数型を受け入れることはできませんので&lt;xref:System.Double.PositiveInfinity&gt;、 &lt;xref:System.Double.NegativeInfinity&gt;、または&lt;xref:System.Double.NaN&gt;&lt;/xref:System.Double.NaN&gt;&lt;/xref:System.Double.NegativeInfinity&gt;&lt;/xref:System.Double.PositiveInfinity&gt;&lt;/xref:System.OverflowException&gt;</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`/`</ph> operator can be <bpt id="p1">*</bpt>overloaded<ept id="p1">*</ept>, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure.</source>
          <target state="translated"><ph id="ph1">`/`</ph>演算子を指定できます<bpt id="p1">*</bpt>オーバー ロードされた<ept id="p1">*</ept>、つまり、クラスまたは構造体を再定義できます動作オペランドは、そのクラスまたは構造体の型を持つ場合です。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If your code uses this operator on such a class or structure, be sure you understand its redefined behavior.</source>
          <target state="translated">コードは、このようなクラスまたは構造体で、この演算子を使用する場合は、再定義される動作を確認ください。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Operator Procedures<ept id="p1">](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>演算子プロシージャ<ept id="p1">](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">例</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This example uses the <ph id="ph1">`/`</ph> operator to perform floating-point division.</source>
          <target state="translated">この例では、<ph id="ph1">`/`</ph>浮動小数点除算を実行する演算子です。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The result is the quotient of the two operands.</source>
          <target state="translated">結果は、2 つのオペランドの商です。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrOperators#16<ept id="p2">](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/floating-point-division-operator_1.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrOperators&amp;#16;<ept id="p2">](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/floating-point-division-operator_1.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The expressions in the preceding example return values of 2.5 and 3.333333.</source>
          <target state="translated">前の例の式では、2.5 と 3.333333 の値を返します。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Note that the result is always floating-point (<ph id="ph1">`Double`</ph>), even though both operands are integer constants.</source>
          <target state="translated">結果が常に浮動小数点型ことに注意してください (<ph id="ph1">`Double`</ph>) 場合でも、両方のオペランドが整数の定数、します。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">関連項目</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>/= Operator (Visual Basic)<ept id="p1">](../../../visual-basic/language-reference/operators/floating-point-division-assignment-operator.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>/= 演算子 (Visual Basic)<ept id="p1">](../../../visual-basic/language-reference/operators/floating-point-division-assignment-operator.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>\ Operator (Visual Basic)<ept id="p1">](../../../visual-basic/language-reference/operators/integer-division-operator.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>\ 演算子 (Visual Basic)<ept id="p1">](../../../visual-basic/language-reference/operators/integer-division-operator.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Data Types of Operator Results<ept id="p1">](../../../visual-basic/language-reference/operators/data-types-of-operator-results.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>演算子の結果のデータ型<ept id="p1">](../../../visual-basic/language-reference/operators/data-types-of-operator-results.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Arithmetic Operators<ept id="p1">](../../../visual-basic/language-reference/operators/arithmetic-operators.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>算術演算子<ept id="p1">](../../../visual-basic/language-reference/operators/arithmetic-operators.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Operator Precedence in Visual Basic<ept id="p1">](../../../visual-basic/language-reference/operators/operator-precedence.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Visual Basic の演算子の優先順位<ept id="p1">](../../../visual-basic/language-reference/operators/operator-precedence.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Operators Listed by Functionality<ept id="p1">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>機能別の演算子一覧<ept id="p1">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Arithmetic Operators in Visual Basic<ept id="p1">](../../../visual-basic/programming-guide/language-features/operators-and-expressions/arithmetic-operators.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>Visual Basic における算術演算子<ept id="p1">](../../../visual-basic/programming-guide/language-features/operators-and-expressions/arithmetic-operators.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>