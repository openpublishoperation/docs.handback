<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9b181b18a28a8b92a392fffdc10e08690d54f545</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\language-reference\operators\function-expression.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e1763aee995853adc0e68e511d4e95b9db0352ee</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5d5ce2e9cc737f8579efc7bd8eeaa4b181c75b18</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Function Expression (Visual Basic) | Microsoft Docs</source>
          <target state="translated">関数式 (Visual Basic) |Microsoft ドキュメント</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Function Expression (Visual Basic)</source>
          <target state="translated">Function 式 (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Declares the parameters and code that define a function lambda expression.</source>
          <target state="translated">パラメーターと関数のラムダ式を定義するコードを宣言します。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
          <target state="translated">構文</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parts</source>
          <target state="translated">指定項目</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Term</source>
          <target state="translated">用語</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Definition</source>
          <target state="translated">定義</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">省略可能です。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A list of local variable names that represent the parameters of this procedure.</source>
          <target state="translated">このプロシージャのパラメーターを表すローカル変数名の一覧。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The parentheses must be present even when the list is empty.</source>
          <target state="translated">かっこは、リストが空の場合にも存在する必要があります。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Parameter List<ept id="p1">](../../../visual-basic/language-reference/statements/parameter-list.md)</ept>.</source>
          <target state="translated">参照してください<bpt id="p1">[</bpt>パラメーター リスト<ept id="p1">](../../../visual-basic/language-reference/statements/parameter-list.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Required.</source>
          <target state="translated">必須です。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>A single expression.</source>
          <target state="translated">1 つの式。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The type of the expression is the return type of the function.</source>
          <target state="translated">式の型は、関数の戻り値の型です。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Required.</source>
          <target state="translated">必須です。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>A list of statements that returns a value by using the <ph id="ph1">`Return`</ph> statement.</source>
          <target state="translated">使用して値を返すステートメントの一覧、<ph id="ph1">`Return`</ph>ステートメントです。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>(See <bpt id="p1">[</bpt>Return Statement<ept id="p1">](../../../visual-basic/language-reference/statements/return-statement.md)</ept>.) The type of the value returned is the return type of the function.</source>
          <target state="translated">(参照<bpt id="p1">[</bpt>Return ステートメント<ept id="p1">](../../../visual-basic/language-reference/statements/return-statement.md)</ept>)。返される値の型は、関数の戻り値の型です。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Remarks</source>
          <target state="translated">コメント</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>lambda expression<ept id="p1">*</ept> is a function without a name that calculates and returns a value.</source>
          <target state="translated">A<bpt id="p1">*</bpt>ラムダ式<ept id="p1">*</ept>を計算し、値を返し、名前を持たない関数です。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You can use a lambda expression anywhere you can use a delegate type, except as an argument to <ph id="ph1">`RemoveHandler`</ph>.</source>
          <target state="translated">ラムダ式を使用する引数として使用する以外にデリゲート型を使用する任意の場所<ph id="ph1">`RemoveHandler`</ph>します。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For more information about delegates, and the use of lambda expressions with delegates, see <bpt id="p1">[</bpt>Delegate Statement<ept id="p1">](../../../visual-basic/language-reference/statements/delegate-statement.md)</ept> and <bpt id="p2">[</bpt>Relaxed Delegate Conversion<ept id="p2">](../../../visual-basic/programming-guide/language-features/delegates/relaxed-delegate-conversion.md)</ept>.</source>
          <target state="translated">詳細については、デリゲート、およびデリゲートでのラムダ式を使用する、次を参照してください。 <bpt id="p1">[</bpt>Delegate ステートメント<ept id="p1">](../../../visual-basic/language-reference/statements/delegate-statement.md)</ept>と<bpt id="p2">[</bpt>厳密でないデリゲート変換<ept id="p2">](../../../visual-basic/programming-guide/language-features/delegates/relaxed-delegate-conversion.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Lambda Expression Syntax</source>
          <target state="translated">ラムダ式の構文</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The syntax of a lambda expression resembles that of a standard function.</source>
          <target state="translated">標準的な関数のラムダ式の構文に似ています。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The differences are as follows:</source>
          <target state="translated">相違点は次のとおりです。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>A lambda expression does not have a name.</source>
          <target state="translated">ラムダ式には、名前がありません。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Lambda expressions cannot have modifiers, such as <ph id="ph1">`Overloads`</ph> or <ph id="ph2">`Overrides`</ph>.</source>
          <target state="translated">ラムダ式がなど、修飾子を持つことはできません<ph id="ph1">`Overloads`</ph>または<ph id="ph2">`Overrides`</ph>です。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Lambda expressions do not use an <ph id="ph1">`As`</ph> clause to designate the return type of the function.</source>
          <target state="translated">ラムダ式は使用しないでください、<ph id="ph1">`As`</ph>関数の戻り値の型を指定する句。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Instead, the type is inferred from the value that the body of a single-line lambda expression evaluates to, or the return value of a multiline lambda expression.</source>
          <target state="translated">代わりに、型は、単一行のラムダ式の本体に評価される値または複数行のラムダ式の戻り値から推論されます。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For example, if the body of a single-line lambda expression is <ph id="ph1">`Where cust.City = "London"`</ph>, its return type is <ph id="ph2">`Boolean`</ph>.</source>
          <target state="translated">たとえば、単一行のラムダ式の本体が<ph id="ph1">`Where cust.City = "London"`</ph>、戻り値の型<ph id="ph2">`Boolean`</ph>します。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The body of a single-line lambda expression must be an expression, not a statement.</source>
          <target state="translated">単一行のラムダ式の本体は、ステートメントではなく、式である必要があります。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The body can consist of a call to a function procedure, but not a call to a sub procedure.</source>
          <target state="translated">本文は、関数プロシージャへの呼び出しがない sub プロシージャの呼び出しで構成できます。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Either all parameters must have specified data types or all must be inferred.</source>
          <target state="translated">データ型、またはすべてを推論する必要がありますかすべてパラメーターが指定する必要があります。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Optional and Paramarray parameters are not permitted.</source>
          <target state="translated">省略可能と Paramarray パラメーターを指定することはできません。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Generic parameters are not permitted.</source>
          <target state="translated">ジェネリック パラメーターを指定することはできません。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">例</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The following examples show two ways to create simple lambda expressions.</source>
          <target state="translated">次の例では、単純なラムダ式を作成する&amp;2; つの方法を示します。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The first uses a <ph id="ph1">`Dim`</ph> to provide a name for the function.</source>
          <target state="translated">最初の使用、<ph id="ph1">`Dim`</ph>関数の名前を指定します。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>To call the function, you send in a value for the parameter.</source>
          <target state="translated">関数を呼び出すには、パラメーターの値で送信します。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLambdas#1<ept id="p2">](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/function-expression_1.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLambdas&amp;#1;<ept id="p2">](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/function-expression_1.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLambdas#2<ept id="p2">](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/function-expression_2.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLambdas&amp;#2;<ept id="p2">](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/function-expression_2.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">例</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Alternatively, you can declare and run the function at the same time.</source>
          <target state="translated">またはを宣言し、同時に、関数を実行します。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLambdas#3<ept id="p2">](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/function-expression_3.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLambdas&amp;#3;<ept id="p2">](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/function-expression_3.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">例</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Following is an example of a lambda expression that increments its argument and returns the value.</source>
          <target state="translated">引数をインクリメントし、値を返すラムダ式の例を次に示します。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The example shows both the single-line and multiline lambda expression syntax for a function.</source>
          <target state="translated">この例では、単一行および複数行のラムダ式の両方の構文、関数を示します。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For more examples, see <bpt id="p1">[</bpt>Lambda Expressions<ept id="p1">](../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)</ept>.</source>
          <target state="translated">例については、次を参照してください。<bpt id="p1">[</bpt>ラムダ式<ept id="p1">](../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLambdas#14<ept id="p2">](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/function-expression_4.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLambdas&amp;#14;<ept id="p2">](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/function-expression_4.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">例</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Lambda expressions underlie many of the query operators in <ph id="ph1">[!INCLUDE[vbteclinqext](../../../csharp/getting-started/includes/vbteclinqext_md.md)]</ph>, and can be used explicitly in method-based queries.</source>
          <target state="translated">ラムダ式では、多くのクエリ演算子の基本となる<ph id="ph1">[!INCLUDE[vbteclinqext](../../../csharp/getting-started/includes/vbteclinqext_md.md)]</ph>、メソッド ベースのクエリで明示的に使用できます。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The following example shows a typical <ph id="ph1">[!INCLUDE[vbteclinq](../../../csharp/includes/vbteclinq_md.md)]</ph> query, followed by the translation of the query into method format.</source>
          <target state="translated">次の例は、標準的な<ph id="ph1">[!INCLUDE[vbteclinq](../../../csharp/includes/vbteclinq_md.md)]</ph>メソッド形式に、クエリの変換後にクエリします。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>For more information about query methods, see <bpt id="p1">[</bpt>Queries<ept id="p1">](../../../visual-basic/language-reference/queries/queries.md)</ept>.</source>
          <target state="translated">クエリ メソッドの詳細については、次を参照してください。<bpt id="p1">[</bpt>クエリ<ept id="p1">](../../../visual-basic/language-reference/queries/queries.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>For more information about standard query operators, see <bpt id="p1">[</bpt>Standard Query Operators Overview<ept id="p1">](http://msdn.microsoft.com/library/24cda21e-8af8-4632-b519-c404a839b9b2)</ept>.</source>
          <target state="translated">標準クエリ演算子の詳細については、次を参照してください。<bpt id="p1">[</bpt>標準クエリ演算子の概要<ept id="p1">](http://msdn.microsoft.com/library/24cda21e-8af8-4632-b519-c404a839b9b2)</ept>します。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">関連項目</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Function Statement<ept id="p1">](../../../visual-basic/language-reference/statements/function-statement.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Function ステートメント<ept id="p1">](../../../visual-basic/language-reference/statements/function-statement.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Lambda Expressions<ept id="p1">](../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>ラムダ式<ept id="p1">](../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Operators and Expressions<ept id="p1">](../../../visual-basic/programming-guide/language-features/operators-and-expressions/index.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>演算子よぶ式<ept id="p1">](../../../visual-basic/programming-guide/language-features/operators-and-expressions/index.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Statements<ept id="p1">](../../../visual-basic/programming-guide/language-features/statements.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>ステートメント<ept id="p1">](../../../visual-basic/programming-guide/language-features/statements.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Value Comparisons<ept id="p1">](../../../visual-basic/programming-guide/language-features/operators-and-expressions/value-comparisons.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>値の比較<ept id="p1">](../../../visual-basic/programming-guide/language-features/operators-and-expressions/value-comparisons.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Boolean Expressions<ept id="p1">](../../../visual-basic/programming-guide/language-features/operators-and-expressions/boolean-expressions.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>ブール式<ept id="p1">](../../../visual-basic/programming-guide/language-features/operators-and-expressions/boolean-expressions.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>If Operator<ept id="p1">](../../../visual-basic/language-reference/operators/if-operator.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>場合演算子<ept id="p1">](../../../visual-basic/language-reference/operators/if-operator.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Relaxed Delegate Conversion<ept id="p1">](../../../visual-basic/programming-guide/language-features/delegates/relaxed-delegate-conversion.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>厳密でないデリゲート変換<ept id="p1">](../../../visual-basic/programming-guide/language-features/delegates/relaxed-delegate-conversion.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>