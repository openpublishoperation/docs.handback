<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">af87477f81fab8406d726ebc8c81260b371d71c8</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\language-reference\statements\function-statement.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c76ec667ed9ef8cdc7a385362dd954d63d9654ec</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">611b7943d1c8ba99e94e6410229905a635fad405</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Function Statement (Visual Basic) | Microsoft Docs</source>
          <target state="translated">ステートメント (Visual Basic) の機能 |Microsoft ドキュメント</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Function Statement (Visual Basic)</source>
          <target state="translated">Function ステートメント (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Declares the name, parameters, and code that define a <ph id="ph1">`Function`</ph> procedure.</source>
          <target state="translated">名前、パラメーター、および定義するコードを宣言して、<ph id="ph1">`Function`</ph>プロシージャです。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
          <target state="translated">構文</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parts</source>
          <target state="translated">指定項目</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">省略可能です。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Attribute List<ept id="p1">](attribute-list.md)</ept>.</source>
          <target state="translated">参照してください<bpt id="p1">[</bpt>属性一覧<ept id="p1">](attribute-list.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">省略可能です。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Can be one of the following:</source>
          <target state="translated">次のいずれかの値を指定します。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Public<ept id="p1">](../../../visual-basic/language-reference/modifiers/public.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Public<ept id="p1">](../../../visual-basic/language-reference/modifiers/public.md)</ept></target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Protected<ept id="p1">](../../../visual-basic/language-reference/modifiers/protected.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Protected<ept id="p1">](../../../visual-basic/language-reference/modifiers/protected.md)</ept></target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Friend<ept id="p1">](../../../visual-basic/language-reference/modifiers/friend.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Friend<ept id="p1">](../../../visual-basic/language-reference/modifiers/friend.md)</ept></target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Private<ept id="p1">](../../../visual-basic/language-reference/modifiers/private.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Private<ept id="p1">](../../../visual-basic/language-reference/modifiers/private.md)</ept></target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Access Levels in Visual Basic<ept id="p1">](../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md)</ept>.</source>
          <target state="translated">参照してください<bpt id="p1">[</bpt>Visual Basic でのレベルのアクセス<ept id="p1">](../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">省略可能です。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Can be one of the following:</source>
          <target state="translated">次のいずれかの値を指定します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Overloads<ept id="p1">](../../../visual-basic/language-reference/modifiers/overloads.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>オーバーロード<ept id="p1">](../../../visual-basic/language-reference/modifiers/overloads.md)</ept></target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Overrides<ept id="p1">](../../../visual-basic/language-reference/modifiers/overrides.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Overrides<ept id="p1">](../../../visual-basic/language-reference/modifiers/overrides.md)</ept></target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Overridable<ept id="p1">](../../../visual-basic/language-reference/modifiers/overridable.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Overridable<ept id="p1">](../../../visual-basic/language-reference/modifiers/overridable.md)</ept></target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>NotOverridable<ept id="p1">](../../../visual-basic/language-reference/modifiers/notoverridable.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>NotOverridable<ept id="p1">](../../../visual-basic/language-reference/modifiers/notoverridable.md)</ept></target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>MustOverride<ept id="p1">](../../../visual-basic/language-reference/modifiers/mustoverride.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>MustOverride<ept id="p1">](../../../visual-basic/language-reference/modifiers/mustoverride.md)</ept></target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">省略可能です。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Shared<ept id="p1">](../../../visual-basic/language-reference/modifiers/shared.md)</ept>.</source>
          <target state="translated">参照してください<bpt id="p1">[</bpt>共有<ept id="p1">](../../../visual-basic/language-reference/modifiers/shared.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">省略可能です。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Shadows<ept id="p1">](../../../visual-basic/language-reference/modifiers/shadows.md)</ept>.</source>
          <target state="translated">参照してください<bpt id="p1">[</bpt>シャドウ<ept id="p1">](../../../visual-basic/language-reference/modifiers/shadows.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">省略可能です。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Async<ept id="p1">](../../../visual-basic/language-reference/modifiers/async.md)</ept>.</source>
          <target state="translated">参照してください<bpt id="p1">[</bpt>Async<ept id="p1">](../../../visual-basic/language-reference/modifiers/async.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">省略可能です。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Iterator<ept id="p1">](../../../visual-basic/language-reference/modifiers/iterator.md)</ept>.</source>
          <target state="translated">参照してください<bpt id="p1">[</bpt>反復子<ept id="p1">](../../../visual-basic/language-reference/modifiers/iterator.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Required.</source>
          <target state="translated">必須です。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Name of the procedure.</source>
          <target state="translated">プロシージャの名前。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Declared Element Names<ept id="p1">](../../../visual-basic/programming-guide/language-features/declared-elements/declared-element-names.md)</ept>.</source>
          <target state="translated">参照してください<bpt id="p1">[</bpt>宣言された要素の名前<ept id="p1">](../../../visual-basic/programming-guide/language-features/declared-elements/declared-element-names.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">省略可能です。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>List of type parameters for a generic procedure.</source>
          <target state="translated">手順については、ジェネリック型パラメーターの一覧です。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Type List<ept id="p1">](type-list.md)</ept>.</source>
          <target state="translated">参照してください<bpt id="p1">[</bpt>のリストを入力<ept id="p1">](type-list.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">省略可能です。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>List of local variable names representing the parameters of this procedure.</source>
          <target state="translated">このプロシージャのパラメーターを表すローカル変数名の一覧です。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Parameter List<ept id="p1">](parameter-list.md)</ept>.</source>
          <target state="translated">参照してください<bpt id="p1">[</bpt>パラメーター リスト<ept id="p1">](parameter-list.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Required if <ph id="ph1">`Option Strict`</ph> is <ph id="ph2">`On`</ph>.</source>
          <target state="translated">必要な場合<ph id="ph1">`Option Strict`</ph>は<ph id="ph2">`On`</ph>です。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Data type of the value returned by this procedure.</source>
          <target state="translated">このプロシージャによって返される値のデータ型。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">省略可能です。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Indicates that this procedure implements one or more <ph id="ph1">`Function`</ph> procedures, each one defined in an interface implemented by this procedure's containing class or structure.</source>
          <target state="translated">この手順が&amp;1; つまたは複数を実装することを示します<ph id="ph1">`Function`</ph>の手順は、この手順を含むクラスまたは構造体によって実装されるインターフェイスで定義されている&amp;1; つずつです。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Implements Statement<ept id="p1">](implements-statement.md)</ept>.</source>
          <target state="translated">参照してください<bpt id="p1">[</bpt>ステートメントを実装します<ept id="p1">](implements-statement.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Required if <ph id="ph1">`Implements`</ph> is supplied.</source>
          <target state="translated"><ph id="ph1">`Implements`</ph> を指定する場合は、必ず指定します。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>List of <ph id="ph1">`Function`</ph> procedures being implemented.</source>
          <target state="translated">実装される <ph id="ph1">`Function`</ph> プロシージャのリストです。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Each <ph id="ph1">`implementedprocedure`</ph> has the following syntax and parts:</source>
          <target state="translated"><ph id="ph1">`implementedprocedure`</ph> の構文と指定項目は次のとおりです。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Part</source>
          <target state="translated">パーツ</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">説明</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Required.</source>
          <target state="translated">必須です。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Name of an interface implemented by this procedure's containing class or structure.</source>
          <target state="translated">このプロシージャによって実装されるインターフェイスの名前には、クラスまたは構造体を含むのです。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Required.</source>
          <target state="translated">必須です。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Name by which the procedure is defined in <ph id="ph1">`interface`</ph>.</source>
          <target state="translated"><ph id="ph1">`interface`</ph> の中でプロシージャを定義するために使用する名前。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">省略可能です。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Indicates that this procedure can handle one or more specific events.</source>
          <target state="translated">この手順が&amp;1; つまたは複数の特定のイベントを処理できることを示します。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Handles<ept id="p1">](handles-clause.md)</ept>.</source>
          <target state="translated">参照してください<bpt id="p1">[</bpt>処理<ept id="p1">](handles-clause.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Required if <ph id="ph1">`Handles`</ph> is supplied.</source>
          <target state="translated"><ph id="ph1">`Handles`</ph> を指定する場合は、必ず指定します。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>List of events this procedure handles.</source>
          <target state="translated">このプロシージャを処理するイベントのリスト。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Each <ph id="ph1">`eventspecifier`</ph> has the following syntax and parts:</source>
          <target state="translated"><ph id="ph1">`eventspecifier`</ph> の構文と指定項目は次のとおりです。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Part</source>
          <target state="translated">パーツ</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">説明</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Required.</source>
          <target state="translated">必須です。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Object variable declared with the data type of the class or structure that raises the event.</source>
          <target state="translated">オブジェクト変数がクラスまたはイベントを発生させる構造体のデータ型で宣言します。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Required.</source>
          <target state="translated">必須です。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Name of the event this procedure handles.</source>
          <target state="translated">このプロシージャを処理するイベントの名前。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">省略可能です。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Block of statements to be executed within this procedure.</source>
          <target state="translated">このプロシージャ内で実行されるステートメントのブロックです。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Terminates the definition of this procedure.</source>
          <target state="translated">このプロシージャの定義を終了します。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Remarks</source>
          <target state="translated">コメント</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>All executable code must be inside a procedure.</source>
          <target state="translated">すべての実行可能コードは、プロシージャの中にする必要があります。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Each procedure, in turn, is declared within a class, a structure, or a module that is referred to as the containing class, structure, or module.</source>
          <target state="translated">さらに、各プロシージャは、クラス、構造体またはクラス、構造体、またはモジュールとして参照されているモジュール内で宣言されます。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>To return a value to the calling code, use a <ph id="ph1">`Function`</ph> procedure; otherwise, use a <ph id="ph2">`Sub`</ph> procedure.</source>
          <target state="translated">呼び出し元のコードに値を返すには使用、<ph id="ph1">`Function`</ph>プロシージャです。 それ以外の場合、を使用して、<ph id="ph2">`Sub`</ph>プロシージャです。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Defining a Function</source>
          <target state="translated">関数を定義します。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>You can define a <ph id="ph1">`Function`</ph> procedure only at the module level.</source>
          <target state="translated">定義する、<ph id="ph1">`Function`</ph>手順をモジュール レベルでのみです。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Therefore, the declaration context for a function must be a class, a structure, a module, or an interface and can't be a source file, a namespace, a procedure, or a block.</source>
          <target state="translated">そのため、関数の宣言コンテキストを使用して、クラス、構造体、モジュールの場合、またはインターフェイスがあります、ソース ファイル、名前空間、プロシージャ、またはブロックすることはできません。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Declaration Contexts and Default Access Levels<ept id="p1">](declaration-contexts-and-default-access-levels.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>宣言コンテキストとアクセス レベルの既定の<ept id="p1">](declaration-contexts-and-default-access-levels.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Function`</ph> procedures default to public access.</source>
          <target state="translated"><ph id="ph1">`Function`</ph>パブリック アクセスを既定値をプロシージャです。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>You can adjust their access levels with the access modifiers.</source>
          <target state="translated">アクセス修飾子を使用してこれらのアクセス レベルを調整できます。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Function`</ph> procedure can declare the data type of the value that the procedure returns.</source>
          <target state="translated">A<ph id="ph1">`Function`</ph>プロシージャがプロシージャが返す値のデータ型を宣言できます。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>You can specify any data type or the name of an enumeration, a structure, a class, or an interface.</source>
          <target state="translated">任意のデータ型または列挙体、構造体、クラスまたはインターフェイスの名前を指定することができます。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>If you don't specify the <ph id="ph1">`returntype`</ph> parameter, the procedure returns <ph id="ph2">`Object`</ph>.</source>
          <target state="translated">指定しない場合、<ph id="ph1">`returntype`</ph>プロシージャは、パラメーターを返します<ph id="ph2">`Object`</ph>します。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>If this procedure uses the <ph id="ph1">`Implements`</ph> keyword, the containing class or structure must also have an <ph id="ph2">`Implements`</ph> statement that immediately follows its <ph id="ph3">`Class`</ph> or <ph id="ph4">`Structure`</ph> statement.</source>
          <target state="translated">この手順で使用する場合、<ph id="ph1">`Implements`</ph>キーワードを含むクラスまたは構造体があります、<ph id="ph2">`Implements`</ph>直後に続くステートメントの<ph id="ph3">`Class`</ph>または<ph id="ph4">`Structure`</ph>ステートメントです。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Implements`</ph> statement must include each interface that's specified in <ph id="ph2">`implementslist`</ph>.</source>
          <target state="translated"><ph id="ph1">`Implements`</ph>ステートメントで指定されている各インターフェイスを含める必要があります<ph id="ph2">`implementslist`</ph>します。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>However, the name by which an interface defines the <ph id="ph1">`Function`</ph> (in <ph id="ph2">`definedname`</ph>) doesn't need to match the name of this procedure (in <ph id="ph3">`name`</ph>).</source>
          <target state="translated">ただし、インターフェイスを定義する名前、 <ph id="ph1">`Function`</ph> (で<ph id="ph2">`definedname`</ph>) このプロシージャの名前と一致する必要はありません (で<ph id="ph3">`name`</ph>)。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>You can use lambda expressions to define function expressions inline.</source>
          <target state="translated">ラムダ式を使用すると、関数の式のインラインを定義します。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Function Expression<ept id="p1">](../../../visual-basic/language-reference/operators/function-expression.md)</ept> and <bpt id="p2">[</bpt>Lambda Expressions<ept id="p2">](../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>関数式<ept id="p1">](../../../visual-basic/language-reference/operators/function-expression.md)</ept>と<bpt id="p2">[</bpt>ラムダ式<ept id="p2">](../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Returning from a Function</source>
          <target state="translated">関数から戻る</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">`Function`</ph> procedure returns to the calling code, execution continues with the statement that follows the statement that called the procedure.</source>
          <target state="translated">ときに、<ph id="ph1">`Function`</ph>プロシージャを呼び出したステートメントに続くステートメントを使用して、プロシージャ呼び出し元のコードに戻ると、実行が継続します。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>To return a value from a function, you can either assign the value to the function name or include it in a <ph id="ph1">`Return`</ph> statement.</source>
          <target state="translated">関数から値を返す、関数名に値を割り当てるか、含めることで、<ph id="ph1">`Return`</ph>ステートメントです。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Return`</ph> statement simultaneously assigns the return value and exits the function, as the following example shows.</source>
          <target state="translated"><ph id="ph1">`Return`</ph>ステートメントは、同時に戻り値を割り当てるし、次の例のように、関数が終了します。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#24<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/function-statement_1.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements #&amp;24;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/function-statement_1.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The following example assigns the return value to the function name <ph id="ph1">`myFunction`</ph> and then uses the <ph id="ph2">`Exit Function`</ph> statement to return.</source>
          <target state="translated">次の例では、戻り値を割り当てて、関数名に<ph id="ph1">`myFunction`</ph>し、使用して、<ph id="ph2">`Exit Function`</ph>を返すステートメントです。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#23<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/function-statement_2.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements 第&amp;23;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/function-statement_2.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Exit Function`</ph> and <ph id="ph2">`Return`</ph> statements cause an immediate exit from a <ph id="ph3">`Function`</ph> procedure.</source>
          <target state="translated"><ph id="ph1">`Exit Function`</ph>と<ph id="ph2">`Return`</ph>ステートメントからすぐに終了が発生する、<ph id="ph3">`Function`</ph>プロシージャです。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Any number of <ph id="ph1">`Exit Function`</ph> and <ph id="ph2">`Return`</ph> statements can appear anywhere in the procedure, and you can mix <ph id="ph3">`Exit Function`</ph> and <ph id="ph4">`Return`</ph> statements.</source>
          <target state="translated">任意の数の<ph id="ph1">`Exit Function`</ph>と<ph id="ph2">`Return`</ph>ステートメントが任意の場所で、手順と混在させることが<ph id="ph3">`Exit Function`</ph>と<ph id="ph4">`Return`</ph>ステートメントです。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>If you use <ph id="ph1">`Exit Function`</ph> without assigning a value to <ph id="ph2">`name`</ph>, the procedure returns the default value for the data type that's specified in <ph id="ph3">`returntype`</ph>.</source>
          <target state="translated">使用する場合<ph id="ph1">`Exit Function`</ph>、値を割り当てることがなく<ph id="ph2">`name`</ph>で指定されているデータ型の既定値を返し<ph id="ph3">`returntype`</ph>します。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`returntype`</ph> isn't specified, the procedure returns <ph id="ph2">`Nothing`</ph>, which is the default value for <ph id="ph3">`Object`</ph>.</source>
          <target state="translated">場合<ph id="ph1">`returntype`</ph>を返し、指定されていない<ph id="ph2">`Nothing`</ph>の既定値は<ph id="ph3">`Object`</ph>です。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Calling a Function</source>
          <target state="translated">関数を呼び出す</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>You call a <ph id="ph1">`Function`</ph> procedure by using the procedure name, followed by the argument list in parentheses, in an expression.</source>
          <target state="translated">呼び出す、<ph id="ph1">`Function`</ph>プロシージャ名、式の中で、かっこで囲まれた引数のリストを使用してプロシージャです。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>You can omit the parentheses only if you aren't supplying any arguments.</source>
          <target state="translated">すべての引数を指定していない場合にのみ、かっこを省略することができます。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>However, your code is more readable if you always include the parentheses.</source>
          <target state="translated">ただし、コードは常にかっこを含める場合は、読みやすくします。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>You call a <ph id="ph1">`Function`</ph> procedure the same way that you call any library function such as <ph id="ph2">`Sqrt`</ph>, <ph id="ph3">`Cos`</ph>, or <ph id="ph4">`ChrW`</ph>.</source>
          <target state="translated">呼び出す、<ph id="ph1">`Function`</ph>プロシージャなどの任意のライブラリを呼び出すことと同様の関数<ph id="ph2">`Sqrt`</ph>、 <ph id="ph3">`Cos`</ph>、または<ph id="ph4">`ChrW`</ph>です。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>You can also call a function by using the <ph id="ph1">`Call`</ph> keyword.</source>
          <target state="translated">使用して関数を呼び出すことができます、<ph id="ph1">`Call`</ph>キーワードです。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>In that case, the return value is ignored.</source>
          <target state="translated">その場合は、戻り値は無視されます。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Use of the <ph id="ph1">`Call`</ph> keyword isn't recommended in most cases.</source>
          <target state="translated">使用、<ph id="ph1">`Call`</ph>キーワードは、ほとんどの場合にお勧めしません。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Call Statement<ept id="p1">](call-statement.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。 <bpt id="p1">[</bpt>Call ステートメント<ept id="p1">](call-statement.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Visual Basic sometimes rearranges arithmetic expressions to increase internal efficiency.</source>
          <target state="translated">Visual Basic では、算術式内部の効率を向上させることがあります再配置します。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>For that reason, you shouldn't use a <ph id="ph1">`Function`</ph> procedure in an arithmetic expression when the function changes the value of variables in the same expression.</source>
          <target state="translated">そのため、使用しないでください、<ph id="ph1">`Function`</ph>算術式、関数には、同じ式内の変数の値が変更されたときの手順です。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Async Functions</source>
          <target state="translated">Async 関数</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>Async<ept id="p1">*</ept> feature allows you to invoke asynchronous functions without using explicit callbacks or manually splitting your code across multiple functions or lambda expressions.</source>
          <target state="translated"><bpt id="p1">*</bpt>Async<ept id="p1">*</ept>機能は、明示的なコールバックの使用や複数の関数やラムダ式で、コードを手動で分割を行わず、非同期関数を呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>If you mark a function with the <bpt id="p1">[</bpt>Async<ept id="p1">](../../../visual-basic/language-reference/modifiers/async.md)</ept> modifier, you can use the <bpt id="p2">[</bpt>Await<ept id="p2">](../../../visual-basic/language-reference/operators/await-operator.md)</ept> operator in the function.</source>
          <target state="translated">持つ関数をマークした場合、 <bpt id="p1">[</bpt>Async<ept id="p1">](../../../visual-basic/language-reference/modifiers/async.md)</ept>修飾子は、使用できます、 <bpt id="p2">[</bpt>Await<ept id="p2">](../../../visual-basic/language-reference/operators/await-operator.md)</ept>関数内の演算子です。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>When control reaches an <ph id="ph1">`Await`</ph> expression in the <ph id="ph2">`Async`</ph> function, control returns to the caller, and progress in the function is suspended until the awaited task completes.</source>
          <target state="translated">達するとを制御すると、<ph id="ph1">`Await`</ph>内の式、<ph id="ph2">`Async`</ph>関数は、呼び出し元に制御が戻るし、関数で進展が待機中のタスクが完了するまでです。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>When the task is complete, execution can resume in the function.</source>
          <target state="translated">タスクが完了すると、関数の実行を再開できます。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`Async`</ph> procedure returns to the caller when either it encounters the first awaited object that’s not yet complete, or it gets to the end of the <ph id="ph2">`Async`</ph> procedure, whichever occurs first.</source>
          <target state="translated"><ph id="ph1">`Async`</ph>がまだ完了していない最初の待機中のオブジェクトを検出するかとプロシージャを呼び出し元に返しますまたはの最後に、<ph id="ph2">`Async`</ph>プロシージャか早い方です。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`Async`</ph> function can have a return type of &lt;xref:System.Threading.Tasks.Task%601&gt; or &lt;xref:System.Threading.Tasks.Task&gt;.</source>
          <target state="translated"><ph id="ph1">`Async`</ph>関数&lt;xref:System.Threading.Tasks.Task%601&gt;または&lt;xref:System.Threading.Tasks.Task&gt;.&lt;/xref:System.Threading.Tasks.Task&gt;&lt;/xref:System.Threading.Tasks.Task%601&gt;の戻り値の型を設定できます</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>An example of an <ph id="ph1">`Async`</ph> function that has a return type of &lt;xref:System.Threading.Tasks.Task%601&gt; is provided below.</source>
          <target state="translated">例、<ph id="ph1">`Async`</ph>関数の戻り値の型を持つ&lt;xref:System.Threading.Tasks.Task%601&gt;を次に示します&lt;/xref:System.Threading.Tasks.Task%601&gt;。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`Async`</ph> function cannot declare any <bpt id="p1">[</bpt>ByRef<ept id="p1">](../../../visual-basic/language-reference/modifiers/byref.md)</ept> parameters.</source>
          <target state="translated"><ph id="ph1">`Async`</ph>関数は、いずれかを宣言できません<bpt id="p1">[</bpt>ByRef<ept id="p1">](../../../visual-basic/language-reference/modifiers/byref.md)</ept>パラメーター。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>Sub Statement<ept id="p1">](sub-statement.md)</ept> can also be marked with the <ph id="ph1">`Async`</ph> modifier.</source>
          <target state="translated">A <bpt id="p1">[</bpt>Sub ステートメント<ept id="p1">](sub-statement.md)</ept>でマークできるも、<ph id="ph1">`Async`</ph>修飾子です。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>This is primarily used for event handlers, where a value cannot be returned.</source>
          <target state="translated">これは主に使用、イベント ハンドラーの値が返されることはできません。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`Async``Sub`</ph> procedure can't be awaited, and the caller of an <ph id="ph2">`Async``Sub`</ph> procedure can't catch exceptions that are thrown by the <ph id="ph3">`Sub`</ph> procedure.</source>
          <target state="translated"><ph id="ph1">`Async``Sub`</ph>プロシージャを待機することはできないと、呼び出し元の<ph id="ph2">`Async``Sub`</ph>プロシージャによってスローされる例外をキャッチできません、<ph id="ph3">`Sub`</ph>プロシージャです。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>For more information about <ph id="ph1">`Async`</ph> functions, see <bpt id="p1">[</bpt>Asynchronous Programming with Async and Await<ept id="p1">](../../../visual-basic/programming-guide/concepts/async/index.md)</ept>, <bpt id="p2">[</bpt>Control Flow in Async Programs<ept id="p2">](../../../visual-basic/programming-guide/concepts/async/control-flow-in-async-programs.md)</ept>, and <bpt id="p3">[</bpt>Async Return Types<ept id="p3">](../../../visual-basic/programming-guide/concepts/async/async-return-types.md)</ept>.</source>
          <target state="translated">詳細については<ph id="ph1">`Async`</ph>関数を参照してください<bpt id="p1">[</bpt>Async および Await を使用した非同期プログラミング<ept id="p1">](../../../visual-basic/programming-guide/concepts/async/index.md)</ept>、<bpt id="p2">[</bpt>非同期プログラムにおける制御のフロー<ept id="p2">](../../../visual-basic/programming-guide/concepts/async/control-flow-in-async-programs.md)</ept>、および<bpt id="p3">[</bpt>Async を返す型<ept id="p3">](../../../visual-basic/programming-guide/concepts/async/async-return-types.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Iterator Functions</source>
          <target state="translated">反復子関数</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">*</bpt>iterator<ept id="p1">*</ept> function performs a custom iteration over a collection, such as a list or array.</source>
          <target state="translated"><bpt id="p1">*</bpt>反復子<ept id="p1">*</ept>関数は、リストや配列などのコレクションに対するカスタムの反復を実行します。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>An iterator function uses the <bpt id="p1">[</bpt>Yield<ept id="p1">](yield-statement.md)</ept> statement to return each element one at a time.</source>
          <target state="translated">Iterator 関数を使用して、 <bpt id="p1">[</bpt>Yield<ept id="p1">](yield-statement.md)</ept>ステートメントを一度に&amp;1; つの各要素を返します。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>When a <bpt id="p1">[</bpt>Yield<ept id="p1">](yield-statement.md)</ept> statement is reached, the current location in code is remembered.</source>
          <target state="translated">ときに、 <bpt id="p1">[</bpt>Yield<ept id="p1">](yield-statement.md)</ept>ステートメントに達すると、コード内の現在位置が記憶されます。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Execution is restarted from that location the next time the iterator function is called.</source>
          <target state="translated">次回の反復子関数が呼び出されたとき、その場所から実行が再開されます。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>You call an iterator from client code by using a <bpt id="p1">[</bpt>For Each…Next<ept id="p1">](for-each-next-statement.md)</ept> statement.</source>
          <target state="translated">使用して、クライアント コードから反復子を呼び出す、<bpt id="p1">[</bpt>ごとにしています.次<ept id="p1">](for-each-next-statement.md)</ept>ステートメントです。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The return type of an iterator function can be &lt;xref:System.Collections.IEnumerable&gt;, &lt;xref:System.Collections.Generic.IEnumerable%601&gt;, &lt;xref:System.Collections.IEnumerator&gt;, or &lt;xref:System.Collections.Generic.IEnumerator%601&gt;.</source>
          <target state="translated">反復子関数の戻り値の型を指定できます&lt;xref:System.Collections.IEnumerable&gt;、 &lt;xref:System.Collections.Generic.IEnumerable%601&gt;、 &lt;xref:System.Collections.IEnumerator&gt;、または&lt;xref:System.Collections.Generic.IEnumerator%601&gt;.&lt;/xref:System.Collections.Generic.IEnumerator%601&gt; &lt;/xref:System.Collections.IEnumerator&gt; &lt;/xref:System.Collections.Generic.IEnumerable%601&gt; &lt;/xref:System.Collections.IEnumerable&gt;</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Iterators<ept id="p1">](http://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7)</ept>.</source>
          <target state="translated">詳細については、「<bpt id="p1">[</bpt>反復子<ept id="p1">](http://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7)</ept>」をご覧ください。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">例</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The following example uses the <ph id="ph1">`Function`</ph> statement to declare the name, parameters, and code that form the body of a <ph id="ph2">`Function`</ph> procedure.</source>
          <target state="translated">次の例では、<ph id="ph1">`Function`</ph>を名前、パラメーター、およびコードの本体を形成する宣言ステートメント、<ph id="ph2">`Function`</ph>プロシージャです。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ParamArray`</ph> modifier enables the function to accept a variable number of arguments.</source>
          <target state="translated"><ph id="ph1">`ParamArray`</ph>修飾子により、可変個の引数を受け入れるように機能します。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#25<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/function-statement_3.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements&amp;#25;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/function-statement_3.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">例</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The following example invokes the function declared in the preceding example.</source>
          <target state="translated">次の例では、前の例で宣言された関数を呼び出します。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#26<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/function-statement_4.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements #&amp;26;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/function-statement_4.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">例</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>In the following example, <ph id="ph1">`DelayAsync`</ph> is an <ph id="ph2">`Async``Function`</ph> that has a return type of &lt;xref:System.Threading.Tasks.Task%601&gt;.</source>
          <target state="translated">次の例で<ph id="ph1">`DelayAsync`</ph>は、 <ph id="ph2">`Async``Function`</ph> &lt;xref:System.Threading.Tasks.Task%601&gt;.&lt;/xref:System.Threading.Tasks.Task%601&gt;の戻り値の型を持つ</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DelayAsync`</ph> has a <ph id="ph2">`Return`</ph> statement that returns an integer.</source>
          <target state="translated"><ph id="ph1">`DelayAsync`</ph> には、整数を返す <ph id="ph2">`Return`</ph> ステートメントがあります。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Therefore the function declaration of <ph id="ph1">`DelayAsync`</ph> needs to have a return type of <ph id="ph2">`Task(Of Integer)`</ph>.</source>
          <target state="translated">したがって、関数宣言の<ph id="ph1">`DelayAsync`</ph>の戻り値の型を持っている必要がある<ph id="ph2">`Task(Of Integer)`</ph>です。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Because the return type is <ph id="ph1">`Task(Of Integer)`</ph>, the evaluation of the <ph id="ph2">`Await`</ph> expression in <ph id="ph3">`DoSomethingAsync`</ph> produces an integer.</source>
          <target state="translated">戻り値の型である<ph id="ph1">`Task(Of Integer)`</ph>の評価、<ph id="ph2">`Await`</ph>式<ph id="ph3">`DoSomethingAsync`</ph>整数値を生成します。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>This is demonstrated in this statement: <ph id="ph1">`Dim result As Integer = Await delayTask`</ph>.</source>
          <target state="translated">これを次のステートメントに示します:<ph id="ph1">`Dim result As Integer = Await delayTask`</ph>です。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`startButton_Click`</ph> procedure is an example of an <ph id="ph2">`Async Sub`</ph> procedure.</source>
          <target state="translated"><ph id="ph1">`startButton_Click`</ph>手順の例は、<ph id="ph2">`Async Sub`</ph>プロシージャです。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">`DoSomethingAsync`</ph> is an <ph id="ph2">`Async`</ph> function, the task for the call to <ph id="ph3">`DoSomethingAsync`</ph> must be awaited, as the following statement demonstrates: <ph id="ph4">`Await DoSomethingAsync()`</ph>.</source>
          <target state="translated"><ph id="ph1">`DoSomethingAsync`</ph>は、<ph id="ph2">`Async`</ph>関数への呼び出しのタスク<ph id="ph3">`DoSomethingAsync`</ph>、次のステートメントで示すように、待機する必要があります:<ph id="ph4">`Await DoSomethingAsync()`</ph>です。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`startButton_Click``Sub`</ph> procedure must be defined with the <ph id="ph2">`Async`</ph> modifier because it has an <ph id="ph3">`Await`</ph> expression.</source>
          <target state="translated"><ph id="ph1">`startButton_Click``Sub`</ph>でプロシージャを定義する必要があります、<ph id="ph2">`Async`</ph>修飾子があるため、<ph id="ph3">`Await`</ph>式です。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>csAsyncMethod#1<ept id="p2">](../../../csharp/programming-guide/classes-and-structs/codesnippet/VisualBasic/function-statement_5.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>csAsyncMethod&amp;1;<ept id="p2">](../../../csharp/programming-guide/classes-and-structs/codesnippet/VisualBasic/function-statement_5.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">関連項目</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Sub Statement<ept id="p1">](sub-statement.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Sub ステートメント<ept id="p1">](sub-statement.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Function Procedures<ept id="p1">](../../../visual-basic/programming-guide/language-features/procedures/function-procedures.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Function プロシージャ<ept id="p1">](../../../visual-basic/programming-guide/language-features/procedures/function-procedures.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Parameter List<ept id="p1">](parameter-list.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>パラメーター リスト<ept id="p1">](parameter-list.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Dim Statement<ept id="p1">](dim-statement.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Dim ステートメント<ept id="p1">](dim-statement.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Call Statement<ept id="p1">](call-statement.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Call ステートメント<ept id="p1">](call-statement.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Of<ept id="p1">](of-clause.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Of<ept id="p1">](of-clause.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Parameter Arrays<ept id="p1">](../../../visual-basic/programming-guide/language-features/procedures/parameter-arrays.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>パラメーター配列<ept id="p1">](../../../visual-basic/programming-guide/language-features/procedures/parameter-arrays.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Use a Generic Class<ept id="p1">](../../../visual-basic/programming-guide/language-features/data-types/how-to-use-a-generic-class.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>方法: ジェネリック クラスを使用して<ept id="p1">](../../../visual-basic/programming-guide/language-features/data-types/how-to-use-a-generic-class.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Troubleshooting Procedures<ept id="p1">](../../../visual-basic/programming-guide/language-features/procedures/troubleshooting-procedures.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>トラブルシューティングの手順<ept id="p1">](../../../visual-basic/programming-guide/language-features/procedures/troubleshooting-procedures.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Lambda Expressions<ept id="p1">](../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>ラムダ式<ept id="p1">](../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Function Expression<ept id="p1">](../../../visual-basic/language-reference/operators/function-expression.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>Function 式<ept id="p1">](../../../visual-basic/language-reference/operators/function-expression.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>