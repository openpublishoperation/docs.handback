<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8ff8bf2df39bed0597740bcda968283ec854f447</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\constants-enums\how-to-declare-enumerations.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">65fcbd427aa2dc7857237f27c7062c62cf14bace</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d5255fb54685ea38ed3b029132c90ad06bc21a59</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Declare Enumerations (Visual Basic) | Microsoft Docs</source>
          <target state="translated">方法: 列挙型 (Visual Basic) を宣言 |Microsoft ドキュメント</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Declare Enumerations (Visual Basic)</source>
          <target state="translated">方法: 列挙型を宣言する (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You create an enumeration with the <ph id="ph1">`Enum`</ph> statement in the declarations section of a class or module.</source>
          <target state="translated">持つ列挙体を作成する、<ph id="ph1">`Enum`</ph>クラスまたはモジュールの宣言セクション内のステートメントです。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You cannot declare an enumeration within a method.</source>
          <target state="translated">メソッド内で列挙体を宣言することはできません。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>To specify the appropriate level of access, use <ph id="ph1">`Private`</ph>, <ph id="ph2">`Protected`</ph>, <ph id="ph3">`Friend`</ph>, or <ph id="ph4">`Public`</ph>.</source>
          <target state="translated">適切なアクセス レベルを指定する<ph id="ph1">`Private`</ph>、 <ph id="ph2">`Protected`</ph>、 <ph id="ph3">`Friend`</ph>、または<ph id="ph4">`Public`</ph>です。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`Enum`</ph> type has a name, an underlying type, and a set of fields, each representing a constant.</source>
          <target state="translated"><ph id="ph1">`Enum`</ph>型は、名前、基になる型では、および一連のフィールド、それぞれが表す定数。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The name must be a valid <ph id="ph1">[!INCLUDE[vbprvblong](../../../../visual-basic/developing-apps/customizing-extending-my/includes/vbprvblong_md.md)]</ph> qualifier.</source>
          <target state="translated">名前を有効にする必要があります<ph id="ph1">[!INCLUDE[vbprvblong](../../../../visual-basic/developing-apps/customizing-extending-my/includes/vbprvblong_md.md)]</ph>修飾子です。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The underlying type must be one of the integer types—<ph id="ph1">`Byte`</ph>, <ph id="ph2">`Short`</ph>, <ph id="ph3">`Long`</ph> or <ph id="ph4">`Integer`</ph>.</source>
          <target state="translated">基になる型は整数型のいずれかを指定する必要があります:<ph id="ph1">`Byte`</ph>、 <ph id="ph2">`Short`</ph>、<ph id="ph3">`Long`</ph>または<ph id="ph4">`Integer`</ph>です。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Integer`</ph> is the default.</source>
          <target state="translated"><ph id="ph1">`Integer`</ph> が既定値です。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Enumerations are always strongly typed and are not interchangeable with integer number types.</source>
          <target state="translated">列挙型は、常に厳密に型指定し、整数の数値型に置き換えることはできません。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Enumerations cannot have floating-point values.</source>
          <target state="translated">列挙体には、浮動小数点値を持つことはできません。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If an enumeration is assigned a floating-point value with <ph id="ph1">`Option Strict On`</ph>, a compiler error results.</source>
          <target state="translated">列挙体には、浮動小数点値が割り当てられる場合<ph id="ph1">`Option Strict On`</ph>、コンパイラ エラーが発生します。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Option Strict`</ph> is <ph id="ph2">`Off`</ph>, the value is automatically converted to the <ph id="ph3">`Enum`</ph> type.</source>
          <target state="translated">場合<ph id="ph1">`Option Strict`</ph>は<ph id="ph2">`Off`</ph>、値が自動的に変換する、<ph id="ph3">`Enum`</ph>型です。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For information on names, and how to use the <ph id="ph1">`Imports`</ph> statement to make name qualification unnecessary, see <bpt id="p1">[</bpt>Enumerations and Name Qualification<ept id="p1">](../../../../visual-basic/programming-guide/language-features/constants-enums/enumerations-and-name-qualification.md)</ept>.</source>
          <target state="translated">使用する方法および名について、<ph id="ph1">`Imports`</ph>ステートメントを名前の修飾を不要なを参照してください<bpt id="p1">[</bpt>列挙型と名前修飾<ept id="p1">](../../../../visual-basic/programming-guide/language-features/constants-enums/enumerations-and-name-qualification.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>To declare an enumeration</source>
          <target state="translated">列挙型を宣言するには</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Write a declaration that includes a code access level, the <ph id="ph1">`Enum`</ph> keyword, and a valid name, as in the following examples, each of which declares a different <ph id="ph2">`Enum`</ph>.</source>
          <target state="translated">コード アクセス レベルでは、宣言を書き込む、<ph id="ph1">`Enum`</ph>キーワード、および有効な名前、次の例のように、別の宣言<ph id="ph2">`Enum`</ph>します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbEnumsTask#3<ept id="p2">](../../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/how-to-declare-enumerations_1.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbEnumsTask&amp;#3;<ept id="p2">](../../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/how-to-declare-enumerations_1.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Define the constants in the enumeration.</source>
          <target state="translated">列挙型の定数を定義します。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>By default, the first constant in an enumeration is initialized to <ph id="ph1">`0`</ph>, and subsequent constants are initialized to a value of one more than the previous constant.</source>
          <target state="translated">既定では、列挙体の最初の定数に初期化<ph id="ph1">`0`</ph>、それに続く定数よりも前の定数のいずれかの値に初期化されます。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For example, the following enumeration, <ph id="ph1">`Days`</ph>, contains a constant named <ph id="ph2">`Sunday`</ph> with the value <ph id="ph3">`0`</ph>, a constant named <ph id="ph4">`Monday`</ph> with the value <ph id="ph5">`1`</ph>, a constant named <ph id="ph6">`Tuesday`</ph> with the value of <ph id="ph7">`2`</ph>, and so on.</source>
          <target state="translated">たとえば、次の列挙<ph id="ph1">`Days`</ph>、という名前の定数が含まれています<ph id="ph2">`Sunday`</ph>値を持つ<ph id="ph3">`0`</ph>、という名前の定数<ph id="ph4">`Monday`</ph>値を持つ<ph id="ph5">`1`</ph>、という名前の定数<ph id="ph6">`Tuesday`</ph>の値を持つ<ph id="ph7">`2`</ph>、という具合です。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbEnumsTask#4<ept id="p2">](../../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/how-to-declare-enumerations_2.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbEnumsTask&amp;4;<ept id="p2">](../../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/how-to-declare-enumerations_2.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>You can explicitly assign values to constants in an enumeration by using an assignment statement.</source>
          <target state="translated">代入ステートメントを使用して列挙で定数に値を明示的に代入できます。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You can assign any integer value, including negative numbers.</source>
          <target state="translated">負の数値を含む任意の整数値を割り当てることができます。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For example, you may want constants with values less than zero to represent error conditions.</source>
          <target state="translated">たとえば、エラー状態を表す&amp;0; より小さい値を持つ定数ができます。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In the following enumeration, the constant <ph id="ph1">`Invalid`</ph> is explicitly assigned the value <ph id="ph2">`–1`</ph>, and the constant <ph id="ph3">`Sunday`</ph> is assigned the value <ph id="ph4">`0`</ph>.</source>
          <target state="translated">次の列挙型定数<ph id="ph1">`Invalid`</ph>、値が明示的に割り当てられた<ph id="ph2">`–1`</ph>と定数<ph id="ph3">`Sunday`</ph>、値が割り当てられた<ph id="ph4">`0`</ph>します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Because it is the first constant in the enumeration, <ph id="ph1">`Saturday`</ph> is also initialized to the value <ph id="ph2">`0`</ph>.</source>
          <target state="translated">最初の定数、列挙型であるため<ph id="ph1">`Saturday`</ph>は、値に初期化も<ph id="ph2">`0`</ph>です。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The value of <ph id="ph1">`Monday`</ph> is <ph id="ph2">`1`</ph> (one more than the value of <ph id="ph3">`Sunday`</ph>); the value of <ph id="ph4">`Tuesday`</ph> is <ph id="ph5">`2`</ph>, and so on.</source>
          <target state="translated">値<ph id="ph1">`Monday`</ph>は<ph id="ph2">`1`</ph>(いずれかの値よりも詳細<ph id="ph3">`Sunday`</ph>); の値<ph id="ph4">`Tuesday`</ph>は<ph id="ph5">`2`</ph>、という具合です。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbEnumsTask#5<ept id="p2">](../../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/how-to-declare-enumerations_3.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbEnumsTask&amp;#5;<ept id="p2">](../../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/how-to-declare-enumerations_3.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>To declare an enumeration as an explicit type</source>
          <target state="translated">明示的な型として列挙型を宣言するには</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Specify the type of the enum by using the <ph id="ph1">`As`</ph> clause, as shown in the following example.</source>
          <target state="translated">使用して列挙型の型を指定する、<ph id="ph1">`As`</ph>句は、次の例で示すようにします。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbEnumsTask#6<ept id="p2">](../../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/how-to-declare-enumerations_4.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbEnumsTask&amp;6;<ept id="p2">](../../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/how-to-declare-enumerations_4.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">関連項目</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Enumerations and Name Qualification<ept id="p1">](../../../../visual-basic/programming-guide/language-features/constants-enums/enumerations-and-name-qualification.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>列挙型と名前修飾<ept id="p1">](../../../../visual-basic/programming-guide/language-features/constants-enums/enumerations-and-name-qualification.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Refer to an Enumeration Member<ept id="p1">](../../../../visual-basic/programming-guide/language-features/constants-enums/how-to-refer-to-an-enumeration-member.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>方法: 列挙型のメンバーを参照してください<ept id="p1">](../../../../visual-basic/programming-guide/language-features/constants-enums/how-to-refer-to-an-enumeration-member.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Iterate Through An Enumeration in Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/language-features/constants-enums/how-to-iterate-through-an-enumeration.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>方法: Visual Basic で列挙型を反復処理します。<ept id="p1">](../../../../visual-basic/programming-guide/language-features/constants-enums/how-to-iterate-through-an-enumeration.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Determine the String Associated with an Enumeration Value<ept id="p1">](../../../../visual-basic/programming-guide/language-features/constants-enums/how-to-determine-the-string-associated-with-an-enumeration-value.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>方法: 列挙値に関連付けられている文字列を確認します。<ept id="p1">](../../../../visual-basic/programming-guide/language-features/constants-enums/how-to-determine-the-string-associated-with-an-enumeration-value.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>When to Use an Enumeration<ept id="p1">](../../../../visual-basic/programming-guide/language-features/constants-enums/when-to-use-an-enumeration.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>列挙体を使用する場合<ept id="p1">](../../../../visual-basic/programming-guide/language-features/constants-enums/when-to-use-an-enumeration.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Constants Overview<ept id="p1">](../../../../visual-basic/programming-guide/language-features/constants-enums/constants-overview.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>定数の概要<ept id="p1">](../../../../visual-basic/programming-guide/language-features/constants-enums/constants-overview.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Constant and Literal Data Types<ept id="p1">](../../../../visual-basic/programming-guide/language-features/constants-enums/constant-and-literal-data-types.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>定数とリテラルのデータ型<ept id="p1">](../../../../visual-basic/programming-guide/language-features/constants-enums/constant-and-literal-data-types.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Constants and Enumerations<ept id="p1">](../../../../visual-basic/language-reference/constants-and-enumerations.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>定数と列挙体<ept id="p1">](../../../../visual-basic/language-reference/constants-and-enumerations.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>