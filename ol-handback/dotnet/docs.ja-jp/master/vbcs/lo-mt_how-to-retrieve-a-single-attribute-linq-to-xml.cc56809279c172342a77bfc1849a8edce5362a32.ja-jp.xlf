<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">35f477ead2bdcfdf78781459f93a755dbc89e5cc</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\linq\how-to-retrieve-a-single-attribute-linq-to-xml.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a39cfbf1629af79bcee92ba4c6c79e58b48446fe</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4c57dccfd336fc2100f710f7d4af8bdf9a971b8f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Retrieve a Single Attribute (LINQ to XML) (Visual Basic) | Microsoft Docs</source>
          <target state="translated">方法: 単一の属性 (LINQ to XML) を取得する (Visual Basic) |Microsoft ドキュメント</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Retrieve a Single Attribute (LINQ to XML) (Visual Basic)</source>
          <target state="translated">方法: 単一の属性 (LINQ to XML) を取得する (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic explains how to retrieve a single attribute of an element, given the attribute name.</source>
          <target state="translated">このトピックでは、属性名を指定して要素の単一の属性を取得する方法について説明します。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This is useful for writing query expressions where you want to find an element that has a particular attribute.</source>
          <target state="translated">これは、特定の属性を持つ要素を検索するクエリ式を記述する場合に便利です。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Xml.Linq.XElement.Attribute%2A&gt; method of the &lt;xref:System.Xml.Linq.XElement&gt; class returns the &lt;xref:System.Xml.Linq.XAttribute&gt; with the specified name.</source>
          <target state="translated">&lt;xref:System.Xml.Linq.XElement.Attribute%2A&gt;のメソッド、&lt;xref:System.Xml.Linq.XElement&gt;クラスを返します、&lt;xref:System.Xml.Linq.XAttribute&gt;指定した名前です。&lt;/xref:System.Xml.Linq.XAttribute&gt; &lt;/xref:System.Xml.Linq.XElement&gt; &lt;/xref:System.Xml.Linq.XElement.Attribute%2A&gt; 。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">例</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The following example uses the &lt;xref:System.Xml.Linq.XElement.Attribute%2A&gt; method.</source>
          <target state="translated">次の例では、&lt;xref:System.Xml.Linq.XElement.Attribute%2A&gt;メソッド&lt;/xref:System.Xml.Linq.XElement.Attribute%2A&gt;。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This example finds all the descendants in the tree named <ph id="ph1">`Phone`</ph>, and then finds the attribute named <ph id="ph2">`type`</ph>.</source>
          <target state="translated">この例では、<ph id="ph1">`Phone`</ph> という名前のツリー内のすべての子孫を検索し、次に <ph id="ph2">`type`</ph> という名前の属性を検索します。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This code produces the following output:</source>
          <target state="translated">このコードを実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">例</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If you want to retrieve the value of the attribute, you can cast it, just as you do for with &lt;xref:System.Xml.Linq.XElement&gt; objects.</source>
          <target state="translated">属性の値を取得する場合は、キャストできますで場合と同様&lt;xref:System.Xml.Linq.XElement&gt;オブジェクト&lt;/xref:System.Xml.Linq.XElement&gt;。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The following example demonstrates this.</source>
          <target state="translated">次に例を示します。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This code produces the following output:</source>
          <target state="translated">このコードを実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> provides explicit cast operators for the &lt;xref:System.Xml.Linq.XAttribute&gt; class to <ph id="ph2">`string`</ph>, <ph id="ph3">`bool`</ph>, <ph id="ph4">`bool?`</ph>, <ph id="ph5">`int`</ph>, <ph id="ph6">`int?`</ph>, <ph id="ph7">`uint`</ph>, <ph id="ph8">`uint?`</ph>, <ph id="ph9">`long`</ph>, <ph id="ph10">`long?`</ph>, <ph id="ph11">`ulong`</ph>, <ph id="ph12">`ulong?`</ph>, <ph id="ph13">`float`</ph>, <ph id="ph14">`float?`</ph>, <ph id="ph15">`double`</ph>, <ph id="ph16">`double?`</ph>, <ph id="ph17">`decimal`</ph>, <ph id="ph18">`decimal?`</ph>, <ph id="ph19">`DateTime`</ph>, <ph id="ph20">`DateTime?`</ph>, <ph id="ph21">`TimeSpan`</ph>, <ph id="ph22">`TimeSpan?`</ph>, <ph id="ph23">`GUID`</ph>, and <ph id="ph24">`GUID?`</ph>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph>provides explicit cast operators for the &lt;xref:System.Xml.Linq.XAttribute&gt; class to <ph id="ph2">`string`</ph>, <ph id="ph3">`bool`</ph>, <ph id="ph4">`bool?`</ph>, <ph id="ph5">`int`</ph>, <ph id="ph6">`int?`</ph>, <ph id="ph7">`uint`</ph>, <ph id="ph8">`uint?`</ph>, <ph id="ph9">`long`</ph>, <ph id="ph10">`long?`</ph>, <ph id="ph11">`ulong`</ph>, <ph id="ph12">`ulong?`</ph>, <ph id="ph13">`float`</ph>, <ph id="ph14">`float?`</ph>, <ph id="ph15">`double`</ph>, <ph id="ph16">`double?`</ph>, <ph id="ph17">`decimal`</ph>, <ph id="ph18">`decimal?`</ph>, <ph id="ph19">`DateTime`</ph>, <ph id="ph20">`DateTime?`</ph>, <ph id="ph21">`TimeSpan`</ph>, <ph id="ph22">`TimeSpan?`</ph>, <ph id="ph23">`GUID`</ph>, and <ph id="ph24">`GUID?`</ph>.&lt;/xref:System.Xml.Linq.XAttribute&gt;</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">例</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The following example shows the same code for an attribute that is in a namespace.</source>
          <target state="translated">上記と同じコードを使用して、名前空間内の属性を取得する例を次に示します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Working with XML Namespaces (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/working-with-xml-namespaces.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。 <bpt id="p1">[</bpt>XML 名前空間 (Visual Basic) の使用<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/working-with-xml-namespaces.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This code produces the following output:</source>
          <target state="translated">このコードを実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">関連項目</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>LINQ to XML Axes (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/linq-to-xml-axes.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>LINQ to XML 軸 (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/linq-to-xml-axes.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>