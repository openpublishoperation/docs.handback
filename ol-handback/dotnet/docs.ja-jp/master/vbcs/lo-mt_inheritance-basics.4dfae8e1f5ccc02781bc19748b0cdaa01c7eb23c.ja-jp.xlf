<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">58aee9f8c348eb06daec2b8c9e332f3f2775bcb6</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\objects-and-classes\inheritance-basics.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">84d342f99e10401a2018edb38b730dd4cf0a4552</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bbb4dd46a018dab0ad9bdfa89c3338a69e016210</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Inheritance Basics (Visual Basic) | Microsoft Docs</source>
          <target state="translated">継承の基本 (Visual Basic) |Microsoft ドキュメント</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Inheritance Basics (Visual Basic)</source>
          <target state="translated">継承の基本 (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Inherits`</ph> statement is used to declare a new class, called a <bpt id="p1">*</bpt>derived class<ept id="p1">*</ept>, based on an existing class, known as a <bpt id="p2">*</bpt>base class<ept id="p2">*</ept>.</source>
          <target state="translated"><ph id="ph1">`Inherits`</ph>という新しいクラスを宣言するステートメントが使用される、<bpt id="p1">*</bpt>クラスを派生<ept id="p1">*</ept>と呼ばれる、既存のクラスに基づいて、<bpt id="p2">*</bpt>基本クラス<ept id="p2">*</ept>します。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Derived classes inherit, and can extend, the properties, methods, events, fields, and constants defined in the base class.</source>
          <target state="translated">派生クラスでは、継承、およびプロパティ、メソッド、イベント、フィールド、および基本クラスで定義された定数は、拡張できます。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The following section describes some of the rules for inheritance, and the modifiers you can use to change the way classes inherit or are inherited:</source>
          <target state="translated">次のセクションが、継承の規則のいくつかを説明し、方法クラスを変更するのに使用できる修飾子を継承または継承されます。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>By default, all classes are inheritable unless marked with the <ph id="ph1">`NotInheritable`</ph> keyword.</source>
          <target state="translated">既定では、すべてクラスは継承とマークされていない限り、<ph id="ph1">`NotInheritable`</ph>キーワードです。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Classes can inherit from other classes in your project or from classes in other assemblies that your project references.</source>
          <target state="translated">クラスは、プロジェクト内の他のクラスまたはその他のプロジェクトで参照されるアセンブリのクラスから継承できます。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Unlike languages that allow multiple inheritance, <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> allows only single inheritance in classes; that is, derived classes can have only one base class.</source>
          <target state="translated">複数の継承を許可する言語とは異なり<ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>のみ単一継承クラスでは、1 つの基本クラスを派生クラスでは、あることができます。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Although multiple inheritance is not allowed in classes, classes can implement multiple interfaces, which can effectively accomplish the same ends.</source>
          <target state="translated">クラスに複数の継承は許可されていませんが、クラスは、複数のインターフェイスは、同じ結果を効果的に実現できますを実装できます。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>To prevent exposing restricted items in a base class, the access type of a derived class must be equal to or more restrictive than its base class.</source>
          <target state="translated">基底クラスでの制限付きの項目を公開することを防ぐためには、派生クラスのアクセスの種類がありますと等しいかそれより制限の厳しい、基本クラス。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For example, a <ph id="ph1">`Public`</ph> class cannot inherit a <ph id="ph2">`Friend`</ph> or a <ph id="ph3">`Private`</ph> class, and a <ph id="ph4">`Friend`</ph> class cannot inherit a <ph id="ph5">`Private`</ph> class.</source>
          <target state="translated">たとえば、<ph id="ph1">`Public`</ph>クラスは継承できません、<ph id="ph2">`Friend`</ph>または<ph id="ph3">`Private`</ph>クラス、および<ph id="ph4">`Friend`</ph>クラスは継承できません、<ph id="ph5">`Private`</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Inheritance Modifiers</source>
          <target state="translated">継承の修飾子</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> introduces the following class-level statements and modifiers to support inheritance:</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>次のクラス レベルのステートメントおよび継承をサポートする修飾子が導入されています。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Inherits`</ph> statement — Specifies the base class.</source>
          <target state="translated"><ph id="ph1">`Inherits`</ph>ステートメント: 基本クラスを指定します。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`NotInheritable`</ph> modifier — Prevents programmers from using the class as a base class.</source>
          <target state="translated"><ph id="ph1">`NotInheritable`</ph>修飾子、プログラマがクラスの基底クラスとして使用することを防止します。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MustInherit`</ph> modifier — Specifies that the class is intended for use as a base class only.</source>
          <target state="translated"><ph id="ph1">`MustInherit`</ph>修飾子: ことクラスは、基底クラスとしてのみ使用するものを指定します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Instances of <ph id="ph1">`MustInherit`</ph> classes cannot be created directly; they can only be created as base class instances of a derived class.</source>
          <target state="translated">インスタンスを<ph id="ph1">`MustInherit`</ph>クラスを直接作成することはできません。 派生クラスの基本クラスのインスタンス作成できるだけです。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>(Other programming languages, such as C++ and C#, use the term <bpt id="p1">*</bpt>abstract class<ept id="p1">*</ept> to describe such a class.)</source>
          <target state="translated">(C++ や c# など他のプログラミング言語の用語が使用され<bpt id="p1">*</bpt>抽象クラス<ept id="p1">*</ept>をこのようなクラスを記述します)。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Overriding Properties and Methods in Derived Classes</source>
          <target state="translated">派生クラスのプロパティとメソッドをオーバーライドします。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>By default, a derived class inherits properties and methods from its base class.</source>
          <target state="translated">既定では、派生クラスは基底クラスのプロパティとメソッドを継承します。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If an inherited property or method has to behave differently in the derived class it can be <bpt id="p1">*</bpt>overridden<ept id="p1">*</ept>.</source>
          <target state="translated">ある場合、継承されたプロパティまたはメソッドが派生クラスで動作を変えるがある<bpt id="p1">*</bpt>オーバーライド<ept id="p1">*</ept>します。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>That is, you can define a new implementation of the method in the derived class.</source>
          <target state="translated">つまり、派生クラスでメソッドの新しい実装を定義することができます。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The following modifiers are used to control how properties and methods are overridden:</source>
          <target state="translated">プロパティやメソッドのオーバーライド方法を制御するには、次の修飾子を使用します。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Overridable`</ph> — Allows a property or method in a class to be overridden in a derived class.</source>
          <target state="translated"><ph id="ph1">`Overridable`</ph>-派生クラスでオーバーライドするクラスでプロパティまたはメソッドを使用します。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Overrides`</ph> — Overrides an <ph id="ph2">`Overridable`</ph> property or method defined in the base class.</source>
          <target state="translated"><ph id="ph1">`Overrides`</ph>— オーバーライド、<ph id="ph2">`Overridable`</ph>プロパティまたはメソッドの基本クラスで定義します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`NotOverridable`</ph> — Prevents a property or method from being overridden in an inheriting class.</source>
          <target state="translated"><ph id="ph1">`NotOverridable`</ph>-プロパティまたはメソッドの継承クラスでオーバーライドを禁止します。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>By default, <ph id="ph1">`Public`</ph> methods are <ph id="ph2">`NotOverridable`</ph>.</source>
          <target state="translated">既定では、<ph id="ph1">`Public`</ph>メソッドは、<ph id="ph2">`NotOverridable`</ph>です。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MustOverride`</ph> — Requires that a derived class override the property or method.</source>
          <target state="translated"><ph id="ph1">`MustOverride`</ph>派生クラスでプロパティまたはメソッドをオーバーライドする必要があります。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">`MustOverride`</ph> keyword is used, the method definition consists of just the <ph id="ph2">`Sub`</ph>, <ph id="ph3">`Function`</ph>, or <ph id="ph4">`Property`</ph> statement.</source>
          <target state="translated">ときに、<ph id="ph1">`MustOverride`</ph>キーワードを使用すると、メソッドの定義から成るだけ<ph id="ph2">`Sub`</ph>、 <ph id="ph3">`Function`</ph>、または<ph id="ph4">`Property`</ph>ステートメントです。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>No other statements are allowed, and specifically there is no <ph id="ph1">`End Sub`</ph> or <ph id="ph2">`End Function`</ph> statement.</source>
          <target state="translated">その他のステートメントは許可されませんし、具体的にはない<ph id="ph1">`End Sub`</ph>または<ph id="ph2">`End Function`</ph>ステートメントです。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MustOverride`</ph> methods must be declared in <ph id="ph2">`MustInherit`</ph> classes.</source>
          <target state="translated"><ph id="ph1">`MustOverride`</ph>メソッドを宣言する必要があります<ph id="ph2">`MustInherit`</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Suppose you want to define classes to handle payroll.</source>
          <target state="translated">給与支払いを処理するクラスを定義するとします。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You could define a generic <ph id="ph1">`Payroll`</ph> class that contains a <ph id="ph2">`RunPayroll`</ph> method that calculates payroll for a typical week.</source>
          <target state="translated">ジェネリック型を定義することが<ph id="ph1">`Payroll`</ph>を含むクラス、<ph id="ph2">`RunPayroll`</ph>典型的な&amp;1; 週間の給与を計算する方法です。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>You could then use <ph id="ph1">`Payroll`</ph> as a base class for a more specialized <ph id="ph2">`BonusPayroll`</ph> class, which could be used when distributing employee bonuses.</source>
          <target state="translated">使用して<ph id="ph1">`Payroll`</ph>より特化されたの基本クラスとして<ph id="ph2">`BonusPayroll`</ph>従業員のボーナスを配布するときに使用できるクラスです。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`BonusPayroll`</ph> class can inherit, and override, the <ph id="ph2">`PayEmployee`</ph> method defined in the base <ph id="ph3">`Payroll`</ph> class.</source>
          <target state="translated"><ph id="ph1">`BonusPayroll`</ph>クラスが継承、および、上書き、<ph id="ph2">`PayEmployee`</ph>ベースで定義されているメソッド<ph id="ph3">`Payroll`</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The following example defines a base class, <ph id="ph1">`Payroll,`</ph> and a derived class, <ph id="ph2">`BonusPayroll`</ph>, which overrides an inherited method, <ph id="ph3">`PayEmployee`</ph>.</source>
          <target state="translated">次の例は、基本クラスを定義<ph id="ph1">`Payroll,`</ph>と派生クラスでは、 <ph id="ph2">`BonusPayroll`</ph>、継承されたメソッドをオーバーライド<ph id="ph3">`PayEmployee`</ph>します。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>A procedure, <ph id="ph1">`RunPayroll`</ph>, creates and then passes a <ph id="ph2">`Payroll`</ph> object and a <ph id="ph3">`BonusPayroll`</ph> object to a function, <ph id="ph4">`Pay`</ph>, that executes the <ph id="ph5">`PayEmployee`</ph> method of both objects.</source>
          <target state="translated">プロシージャ、<ph id="ph1">`RunPayroll`</ph>を作成し、渡します、<ph id="ph2">`Payroll`</ph>オブジェクトと<ph id="ph3">`BonusPayroll`</ph>関数の場合、オブジェクト<ph id="ph4">`Pay`</ph>を実行する、<ph id="ph5">`PayEmployee`</ph>両方のオブジェクトのメソッドです。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrOOP#28<ept id="p2">](../../../../visual-basic/misc/codesnippet/VisualBasic/inheritance-basics_1.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrOOP #&amp;28;<ept id="p2">](../../../../visual-basic/misc/codesnippet/VisualBasic/inheritance-basics_1.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The MyBase Keyword</source>
          <target state="translated">MyBase キーワード</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`MyBase`</ph> keyword behaves like an object variable that refers to the base class of the current instance of a class.</source>
          <target state="translated"><ph id="ph1">`MyBase`</ph>キーワードはクラスの現在のインスタンスの基底クラスを参照するオブジェクト変数のように動作します。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MyBase`</ph> is frequently used to access base class members that are overridden or shadowed in a derived class.</source>
          <target state="translated"><ph id="ph1">`MyBase`</ph>オーバーライドまたは派生クラスでシャドウされている基本クラスのメンバーにアクセスする頻繁に使用します。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>In particular, <ph id="ph1">`MyBase.New`</ph> is used to explicitly call a base class constructor from a derived class constructor.</source>
          <target state="translated">具体的には、<ph id="ph1">`MyBase.New`</ph>を派生クラスのコンス トラクターから基本クラス コンス トラクターを明示的に呼び出すために使用します。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For example, suppose you are designing a derived class that overrides a method inherited from the base class.</source>
          <target state="translated">たとえば、基本クラスから継承されたメソッドをオーバーライドする派生クラスをデザインするとします。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The overridden method can call the method in the base class and modify the return value as shown in the following code fragment:</source>
          <target state="translated">オーバーライドされたメソッドは、基本クラスのメソッドを呼び出すおよび次のコード フラグメントで示すように、戻り値を変更できます。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrOOP#109<ept id="p2">](../../../../visual-basic/misc/codesnippet/VisualBasic/inheritance-basics_2.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrOOP #&amp;109;<ept id="p2">](../../../../visual-basic/misc/codesnippet/VisualBasic/inheritance-basics_2.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The following list describes restrictions on using <ph id="ph1">`MyBase`</ph>:</source>
          <target state="translated">次のリストの使用に関する制限を説明する<ph id="ph1">`MyBase`</ph>:</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MyBase`</ph> refers to the immediate base class and its inherited members.</source>
          <target state="translated"><ph id="ph1">`MyBase`</ph>直接の基本クラスとその継承されたメンバーを参照します。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>It cannot be used to access <ph id="ph1">`Private`</ph> members in the class.</source>
          <target state="translated">使用することはできませんにアクセスする<ph id="ph1">`Private`</ph>クラスのメンバーです。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MyBase`</ph> is a keyword, not a real object.</source>
          <target state="translated"><ph id="ph1">`MyBase`</ph>実際のオブジェクトではなく、キーワードとなります。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MyBase`</ph> cannot be assigned to a variable, passed to procedures, or used in an <ph id="ph2">`Is`</ph> comparison.</source>
          <target state="translated"><ph id="ph1">`MyBase`</ph>変数に割り当てられている、プロシージャに渡されるまたはで使用されることはできません、<ph id="ph2">`Is`</ph>比較します。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The method that <ph id="ph1">`MyBase`</ph> qualifies does not have to be defined in the immediate base class; it may instead be defined in an indirectly inherited base class.</source>
          <target state="translated">メソッドを<ph id="ph1">`MyBase`</ph>が適用される直接の基本クラスで定義する必要はありません、間接的に継承された基本クラスで定義することがあります。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>In order for a reference qualified by <ph id="ph1">`MyBase`</ph> to compile correctly, some base class must contain a method matching the name and types of parameters that appear in the call.</source>
          <target state="translated">修飾された参照の順序で<ph id="ph1">`MyBase`</ph>正しくコンパイルするため、いくつかの基本クラスが、呼び出しに使用されるパラメーターの型と名前に一致するメソッドを含める必要があります。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>You cannot use <ph id="ph1">`MyBase`</ph> to call <ph id="ph2">`MustOverride`</ph> base class methods.</source>
          <target state="translated">使用することはできません<ph id="ph1">`MyBase`</ph>を呼び出す<ph id="ph2">`MustOverride`</ph>基本クラスのメソッドです。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MyBase`</ph> cannot be used to qualify itself.</source>
          <target state="translated"><ph id="ph1">`MyBase`</ph>それ自体を修飾するために使用できません。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Therefore, the following code is not valid:</source>
          <target state="translated">したがって、次のコードは有効ではありません。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MyBase`</ph> cannot be used in modules.</source>
          <target state="translated"><ph id="ph1">`MyBase`</ph>モジュールでは使用できません。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MyBase`</ph> cannot be used to access base class members that are marked as <ph id="ph2">`Friend`</ph> if the base class is in a different assembly.</source>
          <target state="translated"><ph id="ph1">`MyBase`</ph>としてマークされている基本クラスのメンバーにアクセスするために使用できない<ph id="ph2">`Friend`</ph>基本クラスが別のアセンブリ内にある場合。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>For more information and another example, see <bpt id="p1">[</bpt>How to: Access a Variable Hidden by a Derived Class<ept id="p1">](../../../../visual-basic/programming-guide/language-features/declared-elements/how-to-access-a-variable-hidden-by-a-derived-class.md)</ept>.</source>
          <target state="translated">別の例と詳細については、次を参照してください。<bpt id="p1">[</bpt>方法: 派生クラスによって非表示変数にアクセス<ept id="p1">](../../../../visual-basic/programming-guide/language-features/declared-elements/how-to-access-a-variable-hidden-by-a-derived-class.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The MyClass Keyword</source>
          <target state="translated">MyClass キーワード</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`MyClass`</ph> keyword behaves like an object variable that refers to the current instance of a class as originally implemented.</source>
          <target state="translated"><ph id="ph1">`MyClass`</ph>キーワードが最初に実装されているクラスの現在のインスタンスを参照するオブジェクト変数のように動作します。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MyClass`</ph> resembles <ph id="ph2">`Me`</ph>, but every method and property call on <ph id="ph3">`MyClass`</ph> is treated as if the method or property were <bpt id="p1">[</bpt>NotOverridable<ept id="p1">](../../../../visual-basic/language-reference/modifiers/notoverridable.md)</ept>.</source>
          <target state="translated"><ph id="ph1">`MyClass`</ph>ようになります<ph id="ph2">`Me`</ph>ですべてのメソッドおよびプロパティを呼び出すが、<ph id="ph3">`MyClass`</ph>メソッドまたはプロパティが場合と同様に扱われる<bpt id="p1">[</bpt>NotOverridable<ept id="p1">](../../../../visual-basic/language-reference/modifiers/notoverridable.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Therefore, the method or property is not affected by overriding in a derived class.</source>
          <target state="translated">そのため、メソッドまたはプロパティは左右されない派生クラスでオーバーライドします。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MyClass`</ph> is a keyword, not a real object.</source>
          <target state="translated"><ph id="ph1">`MyClass`</ph>実際のオブジェクトではなく、キーワードとなります。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MyClass`</ph> cannot be assigned to a variable, passed to procedures, or used in an <ph id="ph2">`Is`</ph> comparison.</source>
          <target state="translated"><ph id="ph1">`MyClass`</ph>変数に割り当てられている、プロシージャに渡されるまたはで使用されることはできません、<ph id="ph2">`Is`</ph>比較します。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MyClass`</ph> refers to the containing class and its inherited members.</source>
          <target state="translated"><ph id="ph1">`MyClass`</ph>外側のクラスとその継承されたメンバーを参照します。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MyClass`</ph> can be used as a qualifier for <ph id="ph2">`Shared`</ph> members.</source>
          <target state="translated"><ph id="ph1">`MyClass`</ph>修飾子として使用できる<ph id="ph2">`Shared`</ph>メンバーです。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MyClass`</ph> cannot be used inside a <ph id="ph2">`Shared`</ph> method, but can be used inside an instance method to access a shared member of a class.</source>
          <target state="translated"><ph id="ph1">`MyClass`</ph>内で使用できません、<ph id="ph2">`Shared`</ph>メソッドがインスタンス メソッドの内部クラスの共有メンバーにアクセスするのに使用できます。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MyClass`</ph> cannot be used in standard modules.</source>
          <target state="translated"><ph id="ph1">`MyClass`</ph>標準的なモジュールでは使用できません。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MyClass`</ph> can be used to qualify a method that is defined in a base class and that has no implementation of the method provided in that class.</source>
          <target state="translated"><ph id="ph1">`MyClass`</ph>基本クラスで定義されていると、そのクラスで提供されるメソッドの実装を持たないメソッドを修飾するために使用できます。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Such a reference has the same meaning as <ph id="ph1">`MyBase.`</ph><bpt id="p1">*</bpt>Method<ept id="p1">*</ept>.</source>
          <target state="translated">このような参照と同じ意味を持つ<ph id="ph1">`MyBase.`</ph><bpt id="p1">*</bpt>メソッド<ept id="p1">*</ept>します。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The following example compares <ph id="ph1">`Me`</ph> and <ph id="ph2">`MyClass`</ph>.</source>
          <target state="translated">次の例を比較<ph id="ph1">`Me`</ph>と<ph id="ph2">`MyClass`</ph>です。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Even though <ph id="ph1">`derivedClass`</ph> overrides <ph id="ph2">`testMethod`</ph>, the <ph id="ph3">`MyClass`</ph> keyword in <ph id="ph4">`useMyClass`</ph> nullifies the effects of overriding, and the compiler resolves the call to the base class version of <ph id="ph5">`testMethod`</ph>.</source>
          <target state="translated">にもかかわらず<ph id="ph1">`derivedClass`</ph>オーバーライド<ph id="ph2">`testMethod`</ph>、<ph id="ph3">`MyClass`</ph>キーワード<ph id="ph4">`useMyClass`</ph>オーバーライド、およびコンパイラの解決の効果の基底クラスのバージョンへの呼び出しを無効<ph id="ph5">`testMethod`</ph>します。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">関連項目</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Inherits Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/inherits-statement.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Inherits ステートメント<ept id="p1">](../../../../visual-basic/language-reference/statements/inherits-statement.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Me, My, MyBase, and MyClass<ept id="p1">](../../../../visual-basic/programming-guide/program-structure/me-my-mybase-and-myclass.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>Me、My、MyBase、および MyClass<ept id="p1">](../../../../visual-basic/programming-guide/program-structure/me-my-mybase-and-myclass.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>