<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">559bf330640840a310ff947cac118953d1df1a13</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\linq\linq-to-xml-security.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c3e028d278a890879da49e91d70c71f00e01a53d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">69b11564e33037fecb602325ee5331c54238dde3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>LINQ to XML Security (Visual Basic) | Microsoft Docs</source>
          <target state="translated">LINQ to XML のセキュリティ (Visual Basic) |Microsoft ドキュメント</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>LINQ to XML Security (Visual Basic)</source>
          <target state="translated">LINQ to XML のセキュリティ (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic describes security issues associated with LINQ to XML.</source>
          <target state="translated">ここでは、LINQ to XML に関連するセキュリティの問題について説明し、</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In addition, it provides some guidance for mitigating security exposure.</source>
          <target state="translated">セキュリティ上の脆弱性を緩和するためのガイドラインを紹介します。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>LINQ to XML Security Overview</source>
          <target state="translated">LINQ to XML のセキュリティの概要</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>LINQ to XML is designed more for programming convenience than for server-side applications with stringent security requirements.</source>
          <target state="translated">LINQ to XML は、厳密なセキュリティ要件が必要なサーバー側アプリケーション向けというよりも、プログラミングの利便性に重点を置いて設計されています。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Most XML scenarios consist of processing trusted XML documents, rather than processing untrusted XML documents that are uploaded to a server.</source>
          <target state="translated">ほとんどの XML のシナリオでは、サーバーにアップロードされる信頼できない XML ドキュメントではなく、信頼できる XML ドキュメントが処理されます。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>LINQ to XML is optimized for these scenarios.</source>
          <target state="translated">LINQ to XML は、こうした一般的なシナリオに最適化されています。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If you must process untrusted data from unknown sources, Microsoft recommends that you use an instance of the &lt;xref:System.Xml.XmlReader&gt; class that has been configured to filter out known XML denial of service (DoS) attacks.</source>
          <target state="translated">マイクロソフトは、のインスタンスを使用することをお勧め場合は、不明なソースから信頼されていないデータを処理する必要があります、&lt;xref:System.Xml.XmlReader&gt;既知 XML サービス拒否 (DoS) 攻撃を除外するように構成されたクラスです&lt;/xref:System.Xml.XmlReader&gt;。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If you have configured an &lt;xref:System.Xml.XmlReader&gt; to mitigate denial of service attacks, you can use that reader to populate a LINQ to XML tree and still benefit from the programmer productivity enhancements of LINQ to XML.</source>
          <target state="translated">構成した場合、&lt;xref:System.Xml.XmlReader&gt;サービス拒否攻撃を軽減するために、LINQ to XML ツリーを設定し、XML への LINQ のプログラマの生産性向上のメリットもそのリーダーを使用することができます&lt;/xref:System.Xml.XmlReader&gt;。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Many mitigation techniques involve creating readers that are configured to mitigate the security issue, and then instantiating an XML tree through the configured reader.</source>
          <target state="translated">このように、セキュリティの問題を緩和するように構成されたリーダーを作成し、その構成済みのリーダーを使用して XML ツリーをインスタンス化する方法は、多くの軽減技法で利用されています。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>XML is intrinsically vulnerable to denial of service attacks because documents are unbounded in size, depth, element name size, and more.</source>
          <target state="translated">XML は、ドキュメントのサイズ、深さ、要素名のサイズなどの制限がないため、サービス拒否攻撃に対して本質的に脆弱です。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Regardless of the component that you use to process XML, you should always be prepared to recycle the application domain if it uses excessive resources.</source>
          <target state="translated">XML の処理に使用するコンポーネントに関係なく、リソースが過剰に使用されている場合は、常にアプリケーション ドメインを再利用できるようにしておく必要があります。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Mitigation of XML, XSD, XPath, and XSLT Attacks</source>
          <target state="translated">XML、XSD、XPath、および XSLT の攻撃の緩和</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>LINQ to XML is built upon &lt;xref:System.Xml.XmlReader&gt; and &lt;xref:System.Xml.XmlWriter&gt;.</source>
          <target state="translated">LINQ to XML の作成&lt;xref:System.Xml.XmlReader&gt;と&lt;xref:System.Xml.XmlWriter&gt;&lt;/xref:System.Xml.XmlWriter&gt;&lt;/xref:System.Xml.XmlReader&gt;対象</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>LINQ to XML supports XSD and XPath through extension methods in the &lt;xref:System.Xml.Schema?displayProperty=fullName&gt; and &lt;xref:System.Xml.XPath?displayProperty=fullName&gt; namespaces.</source>
          <target state="translated">LINQ to XML が拡張メソッドによって XSD と XPath をサポートしている、&lt;xref:System.Xml.Schema?displayProperty=fullName&gt;と&lt;xref:System.Xml.XPath?displayProperty=fullName&gt;名前空間&lt;/xref:System.Xml.XPath?displayProperty=fullName&gt;&lt;/xref:System.Xml.Schema?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Using the &lt;xref:System.Xml.XmlReader&gt;, &lt;xref:System.Xml.XPath.XPathNavigator&gt;, and &lt;xref:System.Xml.XmlWriter&gt; classes in conjunction with LINQ to XML, you can invoke XSLT to transform XML trees.</source>
          <target state="translated">使用して、 &lt;xref:System.Xml.XmlReader&gt;、 &lt;xref:System.Xml.XPath.XPathNavigator&gt;、および&lt;xref:System.Xml.XmlWriter&gt;クラスは LINQ to XML と組み合わせて、XML ツリーを変換する XSLT を呼び出すことができます&lt;/xref:System.Xml.XmlWriter&gt;&lt;/xref:System.Xml.XPath.XPathNavigator&gt;&lt;/xref:System.Xml.XmlReader&gt;。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If you are operating in a less secure environment, there are a number of security issues that are associated with XML and the use of the classes in &lt;xref:System.Xml?displayProperty=fullName&gt;, &lt;xref:System.Xml.Schema?displayProperty=fullName&gt;, &lt;xref:System.Xml.XPath?displayProperty=fullName&gt;, and &lt;xref:System.Xml.Xsl?displayProperty=fullName&gt;.</source>
          <target state="translated">安全性の低い環境で運用している場合があるさまざまな XML に関連付けられているセキュリティの問題とのクラスを使用して&lt;xref:System.Xml?displayProperty=fullName&gt;、 &lt;xref:System.Xml.Schema?displayProperty=fullName&gt;、 &lt;xref:System.Xml.XPath?displayProperty=fullName&gt;、 &lt;xref:System.Xml.Xsl?displayProperty=fullName&gt;.&lt;/xref:System.Xml.Xsl?displayProperty=fullName&gt; &lt;/xref:System.Xml.XPath?displayProperty=fullName&gt; &lt;/xref:System.Xml.Schema?displayProperty=fullName&gt; &lt;/xref:System.Xml?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>These issues include, but are not limited to, the following:</source>
          <target state="translated">そのような問題の一部を次に示します。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>XSD, XPath, and XSLT are string-based languages in which you can specify operations that consume a lot of time or memory.</source>
          <target state="translated">XSD、XPath、および XSLT は文字列に基づく言語であり、時間やメモリを大量に消費する操作を指定することができます。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>It is the responsibility of application programmers who take XSD, XPath, or XSLT strings from untrusted sources to validate that the strings are not malicious, or to monitor and mitigate the possibility that evaluating these strings will lead to excessive system resource consumption.</source>
          <target state="translated">信頼されていないソースの XSD、XPath、または XSLT の文字列を受け取る場合、アプリケーション プログラマは、その文字列が悪意のあるものでないかどうかを検証する必要があります。また、その文字列の評価によってシステム リソースが過剰に消費されないように監視し、過剰に消費された場合はその状況を緩和する必要があります。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>XSD schemas (including inline schemas) are inherently vulnerable to denial of service attacks; you should not accept schemas from untrusted sources.</source>
          <target state="translated">XSD スキーマ (インライン スキーマを含む) は、サービス拒否攻撃に対して本質的に脆弱です。信頼できないソースのスキーマは受け入れないようにしてください。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>XSD and XSLT can include references to other files, and such references can result in cross-zone and cross-domain attacks.</source>
          <target state="translated">XSD や XSLT には他のファイルへの参照が含まれている場合があり、それらの参照が原因で、ゾーンやドメインを越えた攻撃を受ける可能性があります。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>External entities in DTDs can result in cross-zone and cross-domain attacks.</source>
          <target state="translated">DTD 内の外部エンティティが原因で、ゾーンやドメインを越えた攻撃を受ける可能性があります。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>DTDs are vulnerable to denial of service attacks.</source>
          <target state="translated">DTD はサービス拒否攻撃に対して脆弱です。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Exceptionally deep XML documents can pose denial of service issues; you might want to limit the depth of XML documents.</source>
          <target state="translated">極端に階層の深い XML ドキュメントが原因で、サービス拒否攻撃を受ける可能性があります。XML ドキュメントの階層を制限することをお勧めします。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Do not accept supporting components, such as &lt;xref:System.Xml.NameTable&gt;, &lt;xref:System.Xml.XmlNamespaceManager&gt;, and &lt;xref:System.Xml.XmlResolver&gt; objects, from untrusted assemblies.</source>
          <target state="translated">など、サポート コンポーネントは受け入れない&lt;xref:System.Xml.NameTable&gt;、 &lt;xref:System.Xml.XmlNamespaceManager&gt;、および&lt;xref:System.Xml.XmlResolver&gt;信頼できないアセンブリからのオブジェクト&lt;/xref:System.Xml.XmlResolver&gt;&lt;/xref:System.Xml.XmlNamespaceManager&gt;&lt;/xref:System.Xml.NameTable&gt;。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Read data in chunks to mitigate large document attacks.</source>
          <target state="translated">サイズの大きなドキュメントによる攻撃を緩和するためにデータをチャンク単位で読み取ります。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Script blocks in XSLT style sheets can expose a number of attacks.</source>
          <target state="translated">XSLT スタイル シート内のスクリプト ブロックが原因で、多くの攻撃を受ける場合があります。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Validate carefully before constructing dynamic XPath expressions.</source>
          <target state="translated">動的な XPath 式を作成する場合は事前に慎重に検証します。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>LINQ to XML Security Issues</source>
          <target state="translated">LINQ to XML のセキュリティの問題</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The security issues in this topic are not presented in any particular order.</source>
          <target state="translated">ここに示されているセキュリティの問題には、特に優先順位はありません。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>All issues are important and should be addressed as appropriate.</source>
          <target state="translated">すべての問題が重要であり、それぞれに適切に対処する必要があります。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>A successful elevation of privilege attack gives a malicious assembly more control over its environment.</source>
          <target state="translated">権限の昇格攻撃が成功すると、悪意のあるアセンブリがその環境をより自由に制御できるようになります。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>A successful elevation of privilege attack can result in disclosure of data, denial of service, and more.</source>
          <target state="translated">その結果、データの公開攻撃やサービス拒否攻撃などを受ける可能性があります。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Applications should not disclose data to users who are not authorized to see that data.</source>
          <target state="translated">アプリケーションでは、権限のないユーザーにデータを公開しないようにする必要があります。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Denial of service attacks cause the XML parser or LINQ to XML to consume excessive amounts of memory or CPU time.</source>
          <target state="translated">サービス拒否攻撃を受けると、XML パーサーや LINQ to XML がメモリや CPU 時間を大量に消費するようになります。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Denial of service attacks are considered to be less severe than elevation of privilege attacks or disclosure of data attacks.</source>
          <target state="translated">サービス拒否攻撃は、権限の昇格攻撃やデータの公開攻撃ほど重大に捉えられていませんが、</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>However, they are important in a scenario where a server needs to process XML documents from untrusted sources.</source>
          <target state="translated">信頼できないソースからの XML ドキュメントをサーバーで処理する必要があるシナリオでは重大な問題です。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Exceptions and Error Messages Might Reveal Data</source>
          <target state="translated">例外やエラー メッセージによってデータが漏洩する可能性がある</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The description of an error might reveal data, such as the data being transformed, file names, or implementation details.</source>
          <target state="translated">変換されるデータ、ファイル名、実装の詳細などのデータが、エラーの説明から漏洩する可能性があります。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Error messages should not be exposed to callers that are not trusted.</source>
          <target state="translated">信頼されていない呼び出し元に対してはエラー メッセージが表示されないようにする必要があります。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You should catch all errors and report errors with your own custom error messages.</source>
          <target state="translated">すべてのエラーをキャッチして、カスタム エラー メッセージでエラーを報告するようにしてください。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Do Not Call CodeAccessPermissions.Assert in an Event Handler</source>
          <target state="translated">イベント ハンドラーで CodeAccessPermissions.Assert を呼び出さない</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>An assembly can have lesser or greater permissions.</source>
          <target state="translated">アセンブリの権限は、低い場合もあれば高い場合もあります。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>An assembly that has greater permissions has greater control over the computer and its environments.</source>
          <target state="translated">高い権限を持つアセンブリは、コンピューターやその環境をより自由に制御できます。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>If code in an assembly with greater permissions calls &lt;xref:System.Security.CodeAccessPermission.Assert%2A?displayProperty=fullName&gt; in an event handler, and then the XML tree is passed to a malicious assembly that has restricted permissions, the malicious assembly can cause an event to be raised.</source>
          <target state="translated">高い権限を持つアセンブリのコードを呼び出す場合&lt;xref:System.Security.CodeAccessPermission.Assert%2A?displayProperty=fullName&gt;のイベント ハンドラーをし、XML ツリーが渡される悪意のあるアセンブリにことが制限されたアクセス許可、悪意のあるアセンブリが発生するイベントが発生する&lt;/xref:System.Security.CodeAccessPermission.Assert%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Because the event runs code that is in the assembly with greater permissions, the malicious assembly would then be operating with elevated privileges.</source>
          <target state="translated">このイベントは、高い権限を持つアセンブリ内のコードを実行するため、悪意のあるアセンブリが高度な特権で動作するようになります。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Microsoft recommends that you never call &lt;xref:System.Security.CodeAccessPermission.Assert%2A?displayProperty=fullName&gt; in an event handler.</source>
          <target state="translated">マイクロソフトは呼び出さないようにすることをお勧め&lt;xref:System.Security.CodeAccessPermission.Assert%2A?displayProperty=fullName&gt;イベント ハンドラーで&lt;/xref:System.Security.CodeAccessPermission.Assert%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>DTDs are Not Secure</source>
          <target state="translated">DTD は安全ではない</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Entities in DTDs are inherently not secure.</source>
          <target state="translated">DTD 内のエンティティは、本質的に安全ではありません。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>It is possible for a malicious XML document that contains a DTD to cause the parser to use all memory and CPU time, causing a denial of service attack.</source>
          <target state="translated">DTD を含む悪意のある XML ドキュメントが原因で、サービス拒否攻撃を受け、メモリと CPU 時間のすべてがパーサーによって使用されるといった状況が発生する可能性があります。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Therefore, in LINQ to XML, DTD processing is turned off by default.</source>
          <target state="translated">このため、LINQ to XML では DTD の処理が既定で無効になっています。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>You should not accept DTDs from untrusted sources.</source>
          <target state="translated">信頼されていないソースの DTD は受け入れないようにしてください。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>One example of accepting DTDs from untrusted sources is a Web application that allows Web users to upload an XML file that references a DTD and a DTD file.</source>
          <target state="translated">たとえば、DTD を参照する XML ファイルと DTD ファイルをアップロードすることを Web ユーザーに対して許可する Web アプリケーションは、信頼されていないソースの DTD を受け入れる例の&amp;1; つです。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Upon validation of the file, a malicious DTD could execute a denial of service attack on your server.</source>
          <target state="translated">この場合は、ファイルの検証の際に、悪意のある DTD によってサーバーに対するサービス拒否攻撃が行われる可能性があります。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Another example of accepting DTDs from untrusted sources is to reference a DTD on a network share that also allows anonymous FTP access.</source>
          <target state="translated">そのほか、匿名 FTP アクセスが許可されているネットワーク共有の DTD を参照する場合も、信頼されていないソースの DTD を受け入れる例になります。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Avoid Excessive Buffer Allocation</source>
          <target state="translated">過剰なバッファーの割り当てを回避する</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Application developers should be aware that extremely large data sources can lead to resource exhaustion and denial of service attacks.</source>
          <target state="translated">アプリケーション開発者は、極端に大きなデータ ソースが原因でリソース消費攻撃やサービス拒否攻撃を受ける可能性があることを認識しておく必要があります。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>If a malicious user submits or uploads a very large XML document, it could cause LINQ to XML to consume excessive system resources.</source>
          <target state="translated">悪意のあるユーザーによって非常に大きな XML ドキュメントが送信されたり、アップロードされたりすると、LINQ to XML がシステム リソースを過剰に消費するようになります。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>This can constitute a denial of service attack.</source>
          <target state="translated">このような状況が、サービス拒否攻撃の原因となる場合があります。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>To prevent this, you can set the &lt;xref:System.Xml.XmlReaderSettings.MaxCharactersInDocument%2A?displayProperty=fullName&gt; property, and create a reader that is then limited in the size of document that it can load.</source>
          <target state="translated">これを防ぐためには、設定することができます、&lt;xref:System.Xml.XmlReaderSettings.MaxCharactersInDocument%2A?displayProperty=fullName&gt;プロパティには、読み込むことのできるドキュメントのサイズが制限されたリーダーを作成します&lt;/xref:System.Xml.XmlReaderSettings.MaxCharactersInDocument%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>You then use the reader to create the XML tree.</source>
          <target state="translated">その後、そのリーダーを使用して XML ツリーを作成します。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>For example, if you know that the maximum expected size of your XML documents coming from an untrusted source will be less than 50K bytes, set &lt;xref:System.Xml.XmlReaderSettings.MaxCharactersInDocument%2A?displayProperty=fullName&gt; to 100,000.</source>
          <target state="translated">たとえば、最大値が信頼できないソースからの XML ドキュメントのサイズを想定していることがわかっている場合は 50 K バイト未満、設定&lt;xref:System.Xml.XmlReaderSettings.MaxCharactersInDocument%2A?displayProperty=fullName&gt;100,000&lt;/xref:System.Xml.XmlReaderSettings.MaxCharactersInDocument%2A?displayProperty=fullName&gt; 。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>This will not encumber your processing of XML documents, and at the same time it will mitigate denial of service threats where documents might be uploaded that would consume large amounts of memory.</source>
          <target state="translated">これにより、XML ドキュメントの処理を妨げずに、大量のメモリを消費するドキュメントがアップロードされるサービス拒否攻撃の脅威を緩和できます。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Avoid Excess Entity Expansion</source>
          <target state="translated">過剰なエンティティの展開を回避する</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>One of the known denial of service attacks when using a DTD is a document that causes excessive entity expansion.</source>
          <target state="translated">DTD の使用時に発生するサービス拒否攻撃の&amp;1; つに、エンティティを過剰に展開するドキュメントによる攻撃があります。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>To prevent this, you can set the &lt;xref:System.Xml.XmlReaderSettings.MaxCharactersFromEntities%2A?displayProperty=fullName&gt; property, and create a reader that is then limited in the number of characters that result from entity expansion.</source>
          <target state="translated">これを防ぐためには、設定することができます、&lt;xref:System.Xml.XmlReaderSettings.MaxCharactersFromEntities%2A?displayProperty=fullName&gt;プロパティには、エンティティの展開により生成される文字の数が制限されたリーダーを作成します&lt;/xref:System.Xml.XmlReaderSettings.MaxCharactersFromEntities%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>You then use the reader to create the XML tree.</source>
          <target state="translated">その後、そのリーダーを使用して XML ツリーを作成します。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Limit the Depth of the XML Hierarchy</source>
          <target state="translated">XML 階層の深さを制限する</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>One possible denial of service attack is when a document is submitted that has excessive depth of hierarchy.</source>
          <target state="translated">サービス拒否攻撃は、極端に深い階層を持つドキュメントが送信された場合にも発生します。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>To prevent this, you can wrap a &lt;xref:System.Xml.XmlReader&gt; in your own class that counts the depth of elements.</source>
          <target state="translated">これを防ぐためには、ラップすることができます、&lt;xref:System.Xml.XmlReader&gt;要素の深さをカウントする独自のクラスにします&lt;/xref:System.Xml.XmlReader&gt;。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>If the depth exceeds a predetermined reasonable level, you can terminate the processing of the malicious document.</source>
          <target state="translated">これにより、要素の深さが事前に設定したレベルを超えている場合に、その悪意のあるドキュメントの処理を終了できます。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Protect Against Untrusted XmlReader or XmlWriter Implementations</source>
          <target state="translated">信頼されていない XmlReader や XmlWriter の実装から保護する</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Administrators should verify that any externally supplied &lt;xref:System.Xml.XmlReader&gt; or &lt;xref:System.Xml.XmlWriter&gt; implementations have strong names and have been registered in the machine configuration.</source>
          <target state="translated">管理者が、外部から指定されたいずれかを確認する必要があります&lt;xref:System.Xml.XmlReader&gt;または&lt;xref:System.Xml.XmlWriter&gt;の実装は、厳密な名前があるし、マシンの構成に登録されている&lt;/xref:System.Xml.XmlWriter&gt;&lt;/xref:System.Xml.XmlReader&gt;。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>This prevents malicious code masquerading as a reader or writer from being loaded.</source>
          <target state="translated">これにより、リーダーやライターを装った悪意のあるコードが読み込まれるのを防ぐことができます。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Periodically Free Objects that Reference XName</source>
          <target state="translated">XName を参照するオブジェクトを定期的に解放する</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>To protect against certain kinds of attacks, application programmers should free all objects that reference an &lt;xref:System.Xml.Linq.XName&gt; object in the application domain on a regular basis.</source>
          <target state="translated">ある種の攻撃を防ぐために、アプリケーション プログラマを参照するすべてのオブジェクトを解放する必要があります、&lt;xref:System.Xml.Linq.XName&gt;を定期的にアプリケーション ドメイン内のオブジェクト&lt;/xref:System.Xml.Linq.XName&gt;。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Protect Against Random XML Names</source>
          <target state="translated">ランダムな XML 名から保護する</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Applications that take data from untrusted sources should consider using an &lt;xref:System.Xml.XmlReader&gt; that is wrapped in custom code to inspect for the possibility of random XML names and namespaces.</source>
          <target state="translated">信頼されていないソースからデータを取得するアプリケーションを使用して、&lt;xref:System.Xml.XmlReader&gt;はカスタム コードでラップするランダムな XML 名と名前空間の検査します&lt;/xref:System.Xml.XmlReader&gt;。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>If such random XML names and namespaces are detected, the application can then terminate the processing of the malicious document.</source>
          <target state="translated">これにより、ランダムな XML 名や XML 名前空間が検出された場合に、アプリケーションでその悪意のあるドキュメントの処理を終了できます。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>You might want to limit the number of names in any given namespace (including names in no namespace) to a reasonable limit.</source>
          <target state="translated">特定の名前空間の名前の数 (および名前空間に含まれない名前の数) を制限することをお勧めします。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Annotations Are Accessible by Software Components that Share a LINQ to XML Tree</source>
          <target state="translated">LINQ to XML ツリーを共有するソフトウェア コンポーネントは注釈にアクセスできる</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>LINQ to XML could be used to build processing pipelines in which different application components load, validate, query, transform, update, and save XML data that is passed between components as XML trees.</source>
          <target state="translated">LINQ to XML を使用すると、さまざまなアプリケーション コンポーネントによって XML データの読み込み、検証、クエリ、変換、更新、および保存が行われる処理パイプラインを構築できます。XML データは、XML ツリーとしてコンポーネント間で受け渡されます。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>This can help optimize performance, because the overhead of loading and serializing objects to XML text is done only at the ends of the pipeline.</source>
          <target state="translated">この場合、オブジェクトを読み込んで XML テキストにシリアル化する際のオーバーヘッドがパイプラインの最後にしか発生しないため、パフォーマンスを最適化することができます。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Developers must be aware, however, that all annotations and event handlers created by one component are accessible to other components.</source>
          <target state="translated">ただし、開発者は、あるコンポーネントによって作成される注釈やイベント ハンドラーはすべて、他のコンポーネントからもアクセスできることを認識しておく必要があります。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>This can create a number of vulnerabilities if the components have different levels of trust.</source>
          <target state="translated">このことは、異なる信頼レベルのコンポーネントが混在している場合に数々の脆弱性の原因になります。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>To build secure pipelines across less trusted components, you must serialize LINQ to XML objects to XML text before passing the data to an untrusted component.</source>
          <target state="translated">信頼レベルの低いコンポーネントが含まれる場合に安全なパイプラインを構築するには、信頼されていないコンポーネントにデータを渡す前に LINQ to XML オブジェクトを XML テキストにシリアル化する必要があります。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Some security is provided by the common language runtime (CLR).</source>
          <target state="translated">ある程度のセキュリティが共通言語ランタイム (CLR) によって提供されます。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>For example, a component that does not include a private class cannot access annotations keyed by that class.</source>
          <target state="translated">たとえば、プライベート クラスを含まないコンポーネントは、そのクラスによってキー指定された注釈にはアクセスできません。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>However, annotations can be deleted by components that cannot read them.</source>
          <target state="translated">ただし、注釈を読み取れないコンポーネントでも、注釈を削除することはできます。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>This could be used as a tampering attack.</source>
          <target state="translated">このことが、改ざん攻撃に利用される可能性があります。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">関連項目</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Programming Guide (LINQ to XML) (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/programming-guide-linq-to-xml.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>プログラミング ガイド (LINQ to XML) (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/programming-guide-linq-to-xml.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>