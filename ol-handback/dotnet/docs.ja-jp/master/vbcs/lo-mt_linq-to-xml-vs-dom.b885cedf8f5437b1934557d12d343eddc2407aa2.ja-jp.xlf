<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">88b6bddcdeec2859844f5d5f94777146d488b5fb</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\linq\linq-to-xml-vs-dom.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f2c2cdc40489a532d8f326c6c5e4f0549bafc0a9</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a240e3e78b46cbd0414aa63daed0a4271195b57c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>LINQ to XML vs. DOM (Visual Basic) | Microsoft Docs</source>
          <target state="translated">LINQ to XML およびDOM (Visual Basic) |Microsoft ドキュメント</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>LINQ to XML vs. DOM (Visual Basic)</source>
          <target state="translated">LINQ to XML およびDOM (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This section describes some key differences between <ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> and the current predominant XML programming API, the W3C Document Object Model (DOM).</source>
          <target state="translated">このセクションでは、主な違いを説明<ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph>と、現在主流の XML プログラミング API、W3C ドキュメント オブジェクト モデル (DOM) とします。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>New Ways to Construct XML Trees</source>
          <target state="translated">XML ツリーを構築するための新しい方法</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In the W3C DOM, you build an XML tree from the bottom up; that is, you create a document, you create elements, and then you add the elements to the document.</source>
          <target state="translated">W3C DOM では、XML ツリーをボトムアップ方式で作成します。つまり、ドキュメントを作成し、要素を作成して、要素をドキュメントに追加することによって作成します。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For example, the following would be a typical way to create an XML tree using the Microsoft implementation of DOM, &lt;xref:System.Xml.XmlDocument&gt;:</source>
          <target state="translated">たとえば、次になります: &lt;xref:System.Xml.XmlDocument&gt;:&lt;/xref:System.Xml.XmlDocument&gt; 、DOM の Microsoft 実装を使用して XML ツリーを作成する一般的な方法</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This style of coding does not visually provide much information about the structure of the XML tree.</source>
          <target state="translated">このコーディング スタイルでは、XML ツリーの構造の多くを視覚的に認識できません。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> supports this approach to constructing an XML tree, but also supports an alternative approach, <bpt id="p1">*</bpt>functional construction<ept id="p1">*</ept>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph>XML ツリーを構築するには、このアプローチをサポートしていますが、別の方法でをもサポート<bpt id="p1">*</bpt>関数型構築<ept id="p1">*</ept>します。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In Visual Basic, functional construction uses XML literals to build an XML tree.</source>
          <target state="translated">Visual basic では、関数型構築は、XML ツリーを構築するのに XML リテラルを使用します。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Here is how you would construct the same XML tree by using <ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> functional construction:</source>
          <target state="translated">使用して、同じ XML ツリーを構築する方法を次に示します<ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph>関数型構築します。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Notice that indenting the code to construct the XML tree shows the structure of the underlying XML.</source>
          <target state="translated">このように、XML ツリーを構築するコードのインデントにより、基になる XML の構造が示されます。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Creating XML Trees (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/creating-xml-trees.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。 <bpt id="p1">[</bpt>XML ツリーを作成する」(Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/creating-xml-trees.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Working Directly with XML Elements</source>
          <target state="translated">XML 要素の直接操作</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>When you program with XML, your primary focus is usually on XML elements and perhaps on attributes.</source>
          <target state="translated">一般に、XML によるプログラミングで重視されるのは XML 要素であり、その属性が重要となる場合が多くあります。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph>, you can work directly with XML elements and attributes.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> では、XML 要素と XML 属性を直接操作できます。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For example, you can do the following:</source>
          <target state="translated">たとえば、次のようなことが可能です。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Create XML elements without using a document object at all.</source>
          <target state="translated">ドキュメント オブジェクトを一切使用せずに XML 要素を作成する。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This simplifies programming when you have to work with fragments of XML trees.</source>
          <target state="translated">これにより、XML ツリーのフラグメントを操作する際のプログラミングが単純化されます。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Load <ph id="ph1">`T:System.Xml.Linq.XElement`</ph> objects directly from an XML file.</source>
          <target state="translated"><ph id="ph1">`T:System.Xml.Linq.XElement`</ph> オブジェクトを直接 XML ファイルから読み込む。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Serialize <ph id="ph1">`T:System.Xml.Linq.XElement`</ph> objects to a file or a stream.</source>
          <target state="translated"><ph id="ph1">`T:System.Xml.Linq.XElement`</ph> オブジェクトをファイルやストリームにシリアル化する。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Compare this to the W3C DOM, in which the XML document is used as a logical container for the XML tree.</source>
          <target state="translated">これに対して、XML ドキュメントが XML ツリーの論理的コンテナーとして使用される W3C DOM では、</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In DOM, XML nodes, including elements and attributes, must be created in the context of an XML document.</source>
          <target state="translated">XML ノード (要素や属性を含む) は XML ドキュメントのコンテキストで作成する必要があります。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Here is a fragment of the code to create a name element in DOM:</source>
          <target state="translated">DOM で name 要素を作成するコード フラグメントを以下に示します。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If you want to use an element across multiple documents, you must import the nodes across documents.</source>
          <target state="translated">要素を複数のドキュメントで使用する場合は、ノードをドキュメント間でインポートする必要があります。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> avoids this layer of complexity.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph>このレイヤーの複雑さを回避できます。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>When using LINQ to XML, you use the &lt;xref:System.Xml.Linq.XDocument&gt; class only if you want to add a comment or processing instruction at the root level of the document.</source>
          <target state="translated">使用する LINQ to XML を使用する場合、&lt;xref:System.Xml.Linq.XDocument&gt;クラスのドキュメントのルート レベルにコメントや処理命令を追加する場合のみです&lt;/xref:System.Xml.Linq.XDocument&gt;。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Simplified Handling of Names and Namespaces</source>
          <target state="translated">名前と名前空間の処理の単純化</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Handling names, namespaces, and namespace prefixes is generally a complex part of XML programming.</source>
          <target state="translated">一般に XML プログラミングでは、名前、名前空間、および名前空間プレフィックスの処理が複雑になります。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> simplifies names and namespaces by eliminating the requirement to deal with namespace prefixes.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph>名前空間プレフィックスを処理する必要がなくなるため、名前と名前空間を簡単になります。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If you want to control namespace prefixes, you can.</source>
          <target state="translated">必要に応じて名前空間プレフィックスを制御することはできますが、</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>But if you decide to not explicitly control namespace prefixes, <ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> will assign namespace prefixes during serialization if they are required, or will serialize using default namespaces if they are not.</source>
          <target state="translated">名前空間プレフィックスを明示的に制御する場合、<ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph>が必要な場合は、かではシリアル化されていない場合は、既定の名前空間を使用する場合、シリアル化中に名前空間プレフィックスを割り当てられます。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If default namespaces are used, there will be no namespace prefixes in the resulting document.</source>
          <target state="translated">既定の名前空間が使用された場合は、結果のドキュメントには名前空間プレフィックスは含まれません。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Working with XML Namespaces (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/working-with-xml-namespaces.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。 <bpt id="p1">[</bpt>XML 名前空間 (Visual Basic) の使用<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/working-with-xml-namespaces.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Another problem with the DOM is that it does not let you change the name of a node.</source>
          <target state="translated">DOM にはその他に、ノードの名前を変更できないという問題もあります。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Instead, you have to create a new node and copy all the child nodes to it, losing the original node identity.</source>
          <target state="translated">ノード名の変更が必要な場合は、新しいノードを作成し、そこにすべての子ノードをコピーする必要があります。この場合、元のノード固有の特性は失われます。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> avoids this problem by enabling you to set the &lt;xref:System.Xml.Linq.XName&gt; property on a node.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph>設定できるようにすることによってこの問題を回避、 &lt;xref:System.Xml.Linq.XName&gt;、ノードのプロパティ&lt;/xref:System.Xml.Linq.XName&gt;。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Static Method Support for Loading XML</source>
          <target state="translated">XML を読み込むための静的メソッドのサポート</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> lets you load XML by using static methods, instead of instance methods.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph>インスタンス メソッドの代わりに、静的メソッドを使用して、XML を読み込むことができます。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>This simplifies loading and parsing.</source>
          <target state="translated">これにより、読み込みと解析が簡略化されます。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Load XML from a File (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/how-to-load-xml-from-a-file.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>方法: ロード XML ファイル (Visual Basic の場合) から<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/how-to-load-xml-from-a-file.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Removal of Support for DTD Constructs</source>
          <target state="translated">DTD の構成要素に関するサポートの削除</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> further simplifies XML programming by removing support for entities and entity references.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> では、XML プログラミングのさらなる簡略化のために、エンティティとエンティティ参照のサポートが削除されています。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The management of entities is complex, and is rarely used.</source>
          <target state="translated">エンティティの管理は複雑で、ほとんど利用されていません。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Removing their support increases performance and simplifies the programming interface.</source>
          <target state="translated">これらのサポートを削除することにより、パフォーマンスが向上し、プログラミング インターフェイスが簡略化されます。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>When a <ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> tree is populated, all DTD entities are expanded.</source>
          <target state="translated">ときに、<ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph>ツリーが設定されると、すべての DTD エンティティが展開します。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Support for Fragments</source>
          <target state="translated">フラグメントのサポート</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> does not provide an equivalent for the <ph id="ph2">`XmlDocumentFragment`</ph> class.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph>対応する要素の管轄外の<ph id="ph2">`XmlDocumentFragment`</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>In many cases, however, the <ph id="ph1">`XmlDocumentFragment`</ph> concept can be handled by the result of a query that is typed as &lt;xref:System.Collections.Generic.IEnumerable%601&gt; of &lt;xref:System.Xml.Linq.XNode&gt;, or &lt;xref:System.Collections.Generic.IEnumerable%601&gt; of &lt;xref:System.Xml.Linq.XElement&gt;.</source>
          <target state="translated">ただし、多くの場合、<ph id="ph1">`XmlDocumentFragment`</ph>概念として型指定されたクエリの結果によって処理できる&lt;xref:System.Collections.Generic.IEnumerable%601&gt;の&lt;xref:System.Xml.Linq.XNode&gt;、または&lt;xref:System.Collections.Generic.IEnumerable%601&gt;&lt;xref:System.Xml.Linq.XElement&gt;&lt;/xref:System.Xml.Linq.XElement&gt;&lt;/xref:System.Collections.Generic.IEnumerable%601&gt;&lt;/xref:System.Xml.Linq.XNode&gt;&lt;/xref:System.Collections.Generic.IEnumerable%601&gt;。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Support for XPathNavigator</source>
          <target state="translated">XPathNavigator のサポート</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> provides support for &lt;xref:System.Xml.XPath.XPathNavigator&gt; through extension methods in the &lt;xref:System.Xml.XPath?displayProperty=fullName&gt; namespace.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph>サポートを提供&lt;xref:System.Xml.XPath.XPathNavigator&gt;拡張メソッドによって、&lt;xref:System.Xml.XPath?displayProperty=fullName&gt;名前空間&lt;/xref:System.Xml.XPath?displayProperty=fullName&gt;&lt;/xref:System.Xml.XPath.XPathNavigator&gt;。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;xref:System.Xml.XPath.Extensions?displayProperty=fullName&gt;.</source>
          <target state="translated">詳細については、 &lt;xref:System.Xml.XPath.Extensions?displayProperty=fullName&gt;。&lt;/xref:System.Xml.XPath.Extensions?displayProperty=fullName&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Support for White Space and Indentation</source>
          <target state="translated">空白とインデントのサポート</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> handles white space more simply than the DOM.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph>空白をもっと簡単に処理 DOM より</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>A common scenario is to read indented XML, create an in-memory XML tree without any white space text nodes (that is, not preserving white space), perform some operations on the XML, and then save the XML with indentation.</source>
          <target state="translated">一般的なシナリオでは、インデントされた XML を読み取り、メモリ内に空白のテキスト ノードなしで (つまり空白を維持せずに) XML ツリーを作成し、XML に対して何らかの操作を実行し、インデント付きで XML を保存します。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>When you serialize the XML with formatting, only significant white space in the XML tree is preserved.</source>
          <target state="translated">書式を設定して XML をシリアル化する場合は、XML ツリー内の有意の空白のみが維持されます。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>This is the default behavior for <ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph>.</source>
          <target state="translated">これが <ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> の既定の動作です。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Another common scenario is to read and modify XML that has already been intentionally indented.</source>
          <target state="translated">もう&amp;1; つのよくあるシナリオは、意図的にインデントされた XML を読み取って変更する場合です。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>You might not want to change this indentation in any way.</source>
          <target state="translated">場合によっては、このインデントを一切変更しないようにする必要があります。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph>, you can do this by preserving white space when you load or parse the XML and disabling formatting when you serialize the XML.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> でこれを実現するには、XML を読み込む際または解析する際に空白を維持し、XML をシリアル化するときに書式設定を無効にします。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> stores white space as an &lt;xref:System.Xml.Linq.XText&gt; node, instead of having a specialized &lt;xref:System.Xml.XmlNodeType&gt; node type, as the DOM does.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph>として空白文字を格納、&lt;xref:System.Xml.Linq.XText&gt;ノード、特殊な&lt;xref:System.Xml.XmlNodeType&gt;は dom ノード型&lt;/xref:System.Xml.XmlNodeType&gt;&lt;/xref:System.Xml.Linq.XText&gt;。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Support for Annotations</source>
          <target state="translated">注釈のサポート</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> elements support an extensible set of annotations.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> 要素は、注釈の拡張可能なセットをサポートしています。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>This is useful for tracking miscellaneous information about an element, such as schema information, information about whether the element is bound to a UI, or any other kind of application-specific information.</source>
          <target state="translated">このサポートは、スキーマの情報、要素が UI にバインドされているかどうかの情報、またはアプリケーション固有のその他の情報など、要素に関するさまざまな情報を追跡する場合に利用できます。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>LINQ to XML Annotations<ept id="p1">](http://msdn.microsoft.com/library/e2f0052d-61e2-48d4-9ea4-356c9cab35d5)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。 <bpt id="p1">[</bpt>LINQ to XML の注釈<ept id="p1">](http://msdn.microsoft.com/library/e2f0052d-61e2-48d4-9ea4-356c9cab35d5)</ept>します。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Support for Schema Information</source>
          <target state="translated">スキーマ情報のサポート</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> provides support for XSD validation through extension methods in the &lt;xref:System.Xml.Schema?displayProperty=fullName&gt; namespace.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph>拡張メソッドによって XSD 検証のサポートを提供、&lt;xref:System.Xml.Schema?displayProperty=fullName&gt;名前空間&lt;/xref:System.Xml.Schema?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>You can validate that an XML tree complies with an XSD.</source>
          <target state="translated">これにより、XML ツリーが XSD に準拠しているかどうかを検証できます。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>You can populate the XML tree with the post-schema-validation infoset (PSVI).</source>
          <target state="translated">また、スキーマ検証後の情報セット (PSVI) を使用して XML ツリーを設定できます。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Validate Using XSD<ept id="p1">](http://msdn.microsoft.com/library/481a97fa-6e96-46f2-8c9a-415555fac33b)</ept> and &lt;xref:System.Xml.Schema.Extensions&gt;.</source>
          <target state="translated">詳細については、次を参照してください<bpt id="p1">[</bpt>方法: 検証を使用して XSD<ept id="p1">](http://msdn.microsoft.com/library/481a97fa-6e96-46f2-8c9a-415555fac33b)</ept> &lt;xref:System.Xml.Schema.Extensions&gt;.&lt;/xref:System.Xml.Schema.Extensions&gt; 。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">関連項目</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Getting Started (LINQ to XML)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/getting-started-linq-to-xml.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>はじめに (LINQ to XML)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/getting-started-linq-to-xml.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>