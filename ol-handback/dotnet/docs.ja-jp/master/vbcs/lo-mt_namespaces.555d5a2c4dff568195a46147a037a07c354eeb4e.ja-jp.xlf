<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fe94e65ddbb4ebd2f7d26e8750a0a7ef5d3153af</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\program-structure\namespaces.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1df1310800b346c30e77a36efce7960c6758241c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8e8779e9be1353371434a5926db0cc821f779de0</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Namespaces in Visual Basic | Microsoft Docs</source>
          <target state="translated">Visual Basic における名前空間 |Microsoft ドキュメント</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Namespaces in Visual Basic</source>
          <target state="translated">Visual Basic における名前空間</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Namespaces organize the objects defined in an assembly.</source>
          <target state="translated">アセンブリ内で定義されているオブジェクトは、名前空間によって編成されています。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Assemblies can contain multiple namespaces, which can in turn contain other namespaces.</source>
          <target state="translated">アセンブリには複数の名前空間を含めることができます。さらに、名前空間の中に他の名前空間を含めることもできます。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Namespaces prevent ambiguity and simplify references when using large groups of objects such as class libraries.</source>
          <target state="translated">名前空間を使用するとあいまいさがなくなるため、クラス ライブラリを使用する場合など、多数のオブジェクトを使用する場合に参照が簡単になります。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">[!INCLUDE[dnprdnshort](../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph> defines the &lt;xref:System.Windows.Forms.ListBox&gt; class in the &lt;xref:System.Windows.Forms?displayProperty=fullName&gt; namespace.</source>
          <target state="translated">たとえば、<ph id="ph1">[!INCLUDE[dnprdnshort](../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph>を定義、&lt;xref:System.Windows.Forms.ListBox&gt;クラス、&lt;xref:System.Windows.Forms?displayProperty=fullName&gt;名前空間&lt;/xref:System.Windows.Forms?displayProperty=fullName&gt;&lt;/xref:System.Windows.Forms.ListBox&gt;。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The following code fragment shows how to declare a variable using the fully qualified name for this class:</source>
          <target state="translated">次のコードは、このクラスの完全修飾名を使用して変数を宣言する方法を示しています。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrApplication#6<ept id="p2">](../../../visual-basic/programming-guide/program-structure/codesnippet/VisualBasic/namespaces_1.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrApplication&amp;6;<ept id="p2">](../../../visual-basic/programming-guide/program-structure/codesnippet/VisualBasic/namespaces_1.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Avoiding Name Collisions</source>
          <target state="translated">名前の競合の回避</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[dnprdnshort](../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph> namespaces address a problem sometimes called <bpt id="p1">*</bpt>namespace pollution<ept id="p1">*</ept>, in which the developer of a class library is hampered by the use of similar names in another library.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[dnprdnshort](../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph>名前空間とも呼ばれる問題に対処<bpt id="p1">*</bpt>名前空間の汚染<ept id="p1">*</ept>で別のライブラリでの類似した名前を使用してクラス ライブラリの開発者が妨げられます。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>These conflicts with existing components are sometimes called <bpt id="p1">*</bpt>name collisions<ept id="p1">*</ept>.</source>
          <target state="translated">このような既存コンポーネントとの競合は、 <bpt id="p1">*</bpt>名前の競合<ept id="p1">*</ept>とも呼ばれます。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For example, if you create a new class named <ph id="ph1">`ListBox`</ph>, you can use it inside your project without qualification.</source>
          <target state="translated">たとえば、 <ph id="ph1">`ListBox`</ph>という名前の新しいクラスを作成した場合、プロジェクト内ではこのクラスを修飾子を付けずに使用できます。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>However, if you want to use the <ph id="ph1">[!INCLUDE[dnprdnshort](../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph> &lt;xref:System.Windows.Forms.ListBox&gt; class in the same project, you must use a fully qualified reference to make the reference unique.</source>
          <target state="translated">ただし、使用する場合、 <ph id="ph1">[!INCLUDE[dnprdnshort](../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph> &lt;xref:System.Windows.Forms.ListBox&gt;クラス同じプロジェクト内の参照を一意にするための完全修飾参照を使用する必要があります&lt;/xref:System.Windows.Forms.ListBox&gt;。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If the reference is not unique, <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> produces an error stating that the name is ambiguous.</source>
          <target state="translated">参照が一意でない場合、<ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> は、名前があいまいであることを示すエラーを生成します。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The following code example demonstrates how to declare these objects:</source>
          <target state="translated">次のコード例では、これらのオブジェクトを宣言する方法を示しています。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrApplication#7<ept id="p2">](../../../visual-basic/programming-guide/program-structure/codesnippet/VisualBasic/namespaces_2.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrApplication&amp;#7;<ept id="p2">](../../../visual-basic/programming-guide/program-structure/codesnippet/VisualBasic/namespaces_2.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The following illustration shows two namespace hierarchies, both containing an object named <ph id="ph1">`ListBox`</ph>.</source>
          <target state="translated">次の図は、いずれも <ph id="ph1">`ListBox`</ph>という名前のオブジェクトを持つ、2 つの名前空間の階層を表しています。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Namespace Hierarchy<ept id="p1">]</ept><bpt id="p2">(../../../visual-basic/programming-guide/program-structure/media/vanamespacehierarchy.gif "</bpt>vaNamespaceHierarchy<ept id="p2">")</ept></source>
          <target state="translated"><bpt id="p1">![</bpt>Namespace 階層<ept id="p1">]</ept><bpt id="p2">(../../../visual-basic/programming-guide/program-structure/media/vanamespacehierarchy.gif "</bpt>vaNamespaceHierarchy<ept id="p2">")</ept></target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>By default, every executable file you create with <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> contains a namespace with the same name as your project.</source>
          <target state="translated">既定では、<ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> で作成するすべての実行可能ファイルには、プロジェクトと同名の名前空間が含まれます。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For example, if you define an object within a project named <ph id="ph1">`ListBoxProject`</ph>, the executable file ListBoxProject.exe contains a namespace called <ph id="ph2">`ListBoxProject`</ph>.</source>
          <target state="translated">たとえば、 <ph id="ph1">`ListBoxProject`</ph>という名前のプロジェクト内でオブジェクトを定義した場合、実行可能ファイル ListBoxProject.exe には <ph id="ph2">`ListBoxProject`</ph>という名前空間が含まれます。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Multiple assemblies can use the same namespace.</source>
          <target state="translated">複数のアセンブリで同じ名前空間を使用することができます。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> treats them as a single set of names.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> はこれらを&amp;1; つの名前セットとして扱います。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For example, you can define classes for a namespace called <ph id="ph1">`SomeNameSpace`</ph> in an assembly named <ph id="ph2">`Assemb1`</ph>, and define additional classes for the same namespace from an assembly named <ph id="ph3">`Assemb2`</ph>.</source>
          <target state="translated">たとえば、<ph id="ph2">`Assemb1`</ph> というアセンブリの <ph id="ph1">`SomeNameSpace`</ph> という名前空間のクラスを定義した後に、<ph id="ph3">`Assemb2`</ph> というアセンブリの同じ名前空間のクラスを定義できます。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Fully Qualified Names</source>
          <target state="translated">完全修飾名</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Fully qualified names are object references that are prefixed with the name of the namespace in which the object is defined.</source>
          <target state="translated">完全修飾名は、オブジェクトが定義されている名前空間の名前で始まるオブジェクト参照です。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You can use objects defined in other projects if you create a reference to the class (by choosing <bpt id="p1">**</bpt>Add Reference<ept id="p1">**</ept> from the <bpt id="p2">**</bpt>Project<ept id="p2">**</ept> menu) and then use the fully qualified name for the object in your code.</source>
          <target state="translated">他のプロジェクトで定義されているオブジェクトを使用するには、 <bpt id="p1">**</bpt>[プロジェクト]<ept id="p1">**</ept> メニューの <bpt id="p2">**</bpt>[参照の追加]<ept id="p2">**</ept> をクリックしてそのクラスへの参照を作成し、コード内でそのオブジェクトの完全修飾名を使用します。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The following code fragment shows how to use the fully qualified name for an object from another project's namespace:</source>
          <target state="translated">次のコードは、別のプロジェクトの名前空間のオブジェクトを使用して完全修飾名を使用する方法を示しています。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrApplication#8<ept id="p2">](../../../visual-basic/programming-guide/program-structure/codesnippet/VisualBasic/namespaces_3.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrApplication&amp;#8;<ept id="p2">](../../../visual-basic/programming-guide/program-structure/codesnippet/VisualBasic/namespaces_3.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Fully qualified names prevent naming conflicts because they make it possible for the compiler to determine which object is being used.</source>
          <target state="translated">完全修飾名を使用すると、どのオブジェクトを使用するかをコンパイラが認識できるため、名前の競合を防止できます。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>However, the names themselves can get long and cumbersome.</source>
          <target state="translated">ただし、名前自体が長くなるため、使いにくくなります。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>To get around this, you can use the <ph id="ph1">`Imports`</ph> statement to define an <bpt id="p1">*</bpt>alias<ept id="p1">*</ept>—an abbreviated name you can use in place of a fully qualified name.</source>
          <target state="translated">この問題を回避するには、 <ph id="ph1">`Imports`</ph> ステートメントを使って <bpt id="p1">*</bpt>エイリアス<ept id="p1">*</ept>を定義します。エイリアスとは、完全修飾名の代わりに使用できる短い名前です。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For example, the following code example creates aliases for two fully qualified names, and uses these aliases to define two objects.</source>
          <target state="translated">たとえば、次のコード例では、2 つの完全修飾名に対してエイリアスを作成し、作成したエイリアスを使って&amp;2; つのオブジェクトを定義しています。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrApplication#9<ept id="p2">](../../../visual-basic/programming-guide/program-structure/codesnippet/VisualBasic/namespaces_4.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrApplication&amp;#9;<ept id="p2">](../../../visual-basic/programming-guide/program-structure/codesnippet/VisualBasic/namespaces_4.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrApplication#10<ept id="p2">](../../../visual-basic/programming-guide/program-structure/codesnippet/VisualBasic/namespaces_5.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrApplication&amp;#10;<ept id="p2">](../../../visual-basic/programming-guide/program-structure/codesnippet/VisualBasic/namespaces_5.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>If you use the <ph id="ph1">`Imports`</ph> statement without an alias, you can use all the names in that namespace without qualification, provided they are unique to the project.</source>
          <target state="translated">エイリアスを指定せずに <ph id="ph1">`Imports`</ph> ステートメントを使用すると、インポートした名前空間のすべての名前を修飾子を付けずに使用できます。ただし、それらの名前がプロジェクト内で一意であることが必要です。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If your project contains <ph id="ph1">`Imports`</ph> statements for namespaces that contain items with the same name, you must fully qualify that name when you use it.</source>
          <target state="translated">プロジェクトに、同じ名前の複数の項目を持つ名前空間をインポートする <ph id="ph1">`Imports`</ph> ステートメントがある場合は、それらの名前を使用するときに完全修飾名を使用する必要があります。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Suppose, for example, your project contained the following two <ph id="ph1">`Imports`</ph> statements:</source>
          <target state="translated">たとえば、プロジェクトに次の&amp;2; つの <ph id="ph1">`Imports`</ph> ステートメントがあるとします。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrApplication#11<ept id="p2">](../../../visual-basic/programming-guide/program-structure/codesnippet/VisualBasic/namespaces_6.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrApplication&amp;#11;<ept id="p2">](../../../visual-basic/programming-guide/program-structure/codesnippet/VisualBasic/namespaces_6.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If you attempt to use <ph id="ph1">`Class1`</ph> without fully qualifying it, <ph id="ph2">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> produces an error stating that the name <ph id="ph3">`Class1`</ph> is ambiguous.</source>
          <target state="translated">この場合、完全修飾名を使わずに <ph id="ph1">`Class1`</ph> を使おうとすると、<ph id="ph2">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> から、<ph id="ph3">`Class1`</ph> という名前があいまいであることを指摘するエラーが生成されます。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Namespace Level Statements</source>
          <target state="translated">名前空間レベルのステートメント</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Within a namespace, you can define items such as modules, interfaces, classes, delegates, enumerations, structures, and other namespaces.</source>
          <target state="translated">名前空間内では、モジュール、インターフェイス、クラス、デリゲート、列挙体、構造体、他の名前空間などの項目を定義できます。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>You cannot define items such as properties, procedures, variables and events at the namespace level.</source>
          <target state="translated">プロパティ、プロシージャ、変数、イベントなどの項目を名前空間のレベルで定義することはできません。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>These items must be declared within containers such as modules, structures, or classes.</source>
          <target state="translated">これらの項目は、モジュール、構造体、クラスなどのコンテナー内で宣言する必要があります。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Global Keyword in Fully Qualified Names</source>
          <target state="translated">完全修飾名の Global キーワード</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If you have defined a nested hierarchy of namespaces, code inside that hierarchy might be blocked from accessing the &lt;xref:System?displayProperty=fullName&gt; namespace of the .NET Framework.</source>
          <target state="translated">その階層内のコードがへのアクセスをブロックされている名前空間の入れ子になった階層を定義している場合、 &lt;xref:System?displayProperty=fullName&gt;.NET Framework の名前空間&lt;/xref:System?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The following example illustrates a hierarchy in which the <ph id="ph1">`SpecialSpace.System`</ph> namespace blocks access to &lt;xref:System?displayProperty=fullName&gt;.</source>
          <target state="translated">次の例では、階層を<ph id="ph1">`SpecialSpace.System`</ph> &lt;xref:System?displayProperty=fullName&gt;.&lt;/xref:System?displayProperty=fullName&gt;へのアクセスをブロックの名前空間</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>As a result, the Visual Basic compiler cannot successfully resolve the reference to &lt;xref:System.Int32?displayProperty=fullName&gt;, because <ph id="ph1">`SpecialSpace.System`</ph> does not define <ph id="ph2">`Int32`</ph>.</source>
          <target state="translated">その結果、Visual Basic コンパイラにはへの参照が解決できない正常に&lt;xref:System.Int32?displayProperty=fullName&gt;ので、<ph id="ph1">`SpecialSpace.System`</ph>が定義されていません<ph id="ph2">`Int32`</ph>&lt;/xref:System.Int32?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">`Global`</ph> keyword to start the qualification chain at the outermost level of the .NET Framework class library.</source>
          <target state="translated"><ph id="ph1">`Global`</ph> キーワードを使用すると、修飾チェーンを .NET Framework クラス ライブラリの最も外側のレベルで開始できます。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This allows you to specify the &lt;xref:System?displayProperty=fullName&gt; namespace or any other namespace in the class library.</source>
          <target state="translated">これによりを指定する、&lt;xref:System?displayProperty=fullName&gt;名前空間またはクラス ライブラリの他の名前空間&lt;/xref:System?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The following example illustrates this.</source>
          <target state="translated">次に例を示します。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>You can use <ph id="ph1">`Global`</ph> to access other root-level namespaces, such as &lt;xref:Microsoft.VisualBasic?displayProperty=fullName&gt;, and any namespace associated with your project.</source>
          <target state="translated">使用することができます<ph id="ph1">`Global`</ph>などにアクセスする他のルート レベルの名前空間&lt;xref:Microsoft.VisualBasic?displayProperty=fullName&gt;、およびプロジェクトに関連付けられている任意の名前空間&lt;/xref:Microsoft.VisualBasic?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Global Keyword in Namespace Statements</source>
          <target state="translated">名前空間のステートメントでの Global キーワード</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>You can also use the <ph id="ph1">`Global`</ph> keyword in a <bpt id="p1">[</bpt>Namespace Statement<ept id="p1">](../../../visual-basic/language-reference/statements/namespace-statement.md)</ept>.</source>
          <target state="translated">使用することも、<ph id="ph1">`Global`</ph>のキーワード、 <bpt id="p1">[</bpt>Namespace ステートメント<ept id="p1">](../../../visual-basic/language-reference/statements/namespace-statement.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>This lets you define a namespace out of the root namespace of your project.</source>
          <target state="translated">これにより、プロジェクトのルート名前空間から名前空間を定義できます。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>All namespaces in your project are based on the root namespace for the project.</source>
          <target state="translated">プロジェクト内のすべての名前空間は、プロジェクトのルート名前空間に基づいています。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Visual Studio assigns your project name as the default root namespace for all code in your project.</source>
          <target state="translated">Visual Studio では、プロジェクト内のすべてのコードで、既定のルート名前空間としてプロジェクト名が割り当てられます。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>For example, if your project is named <ph id="ph1">`ConsoleApplication1`</ph>, its programming elements belong to namespace <ph id="ph2">`ConsoleApplication1`</ph>.</source>
          <target state="translated">たとえば、プロジェクト名が <ph id="ph1">`ConsoleApplication1`</ph>である場合、そのプログラミング要素は <ph id="ph2">`ConsoleApplication1`</ph>名前空間に属します。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>If you declare <ph id="ph1">`Namespace Magnetosphere`</ph>, references to <ph id="ph2">`Magnetosphere`</ph> in the project will access <ph id="ph3">`ConsoleApplication1.Magnetosphere`</ph>.</source>
          <target state="translated"><ph id="ph1">`Namespace Magnetosphere`</ph>を宣言すると、プロジェクトの <ph id="ph2">`Magnetosphere`</ph> への参照は <ph id="ph3">`ConsoleApplication1.Magnetosphere`</ph>にアクセスします。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The following examples use the <ph id="ph1">`Global`</ph> keyword to declare a namespace out of the root namespace for the project.</source>
          <target state="translated">次の例では、プロジェクトのルート名前空間から名前空間を宣言するために <ph id="ph1">`Global`</ph> キーワードを使用しています。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrApplication#22<ept id="p2">](../../../visual-basic/programming-guide/program-structure/codesnippet/VisualBasic/namespaces_7.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrApplication #&amp;22;<ept id="p2">](../../../visual-basic/programming-guide/program-structure/codesnippet/VisualBasic/namespaces_7.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>In a namespace declaration, <ph id="ph1">`Global`</ph> cannot be nested in another namespace.</source>
          <target state="translated">名前空間宣言では、 <ph id="ph1">`Global`</ph> を別の名前空間に入れ子にすることはできません。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>You can use the <bpt id="p1">[</bpt>Application Page, Project Designer (Visual Basic)<ept id="p1">](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic)</ept> to view and modify the <bpt id="p2">**</bpt>Root Namespace<ept id="p2">**</ept> of the project.</source>
          <target state="translated">使用することができます、<bpt id="p1">[</bpt>アプリケーション ページで、プロジェクト デザイナー) (Visual Basic)<ept id="p1">](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic)</ept>を表示および変更、<bpt id="p2">**</bpt>ルート Namespace<ept id="p2">**</ept>プロジェクトのです。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>For new projects, the <bpt id="p1">**</bpt>Root Namespace<ept id="p1">**</ept> defaults to the project name.</source>
          <target state="translated">新しいプロジェクトの場合、 <bpt id="p1">**</bpt>ルート名前空間<ept id="p1">**</ept> の既定値は、プロジェクト名です。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>To cause <ph id="ph1">`Global`</ph> to be the top-level namespace, you can clear the <bpt id="p1">**</bpt>Root Namespace<ept id="p1">**</ept> entry so that the box is empty.</source>
          <target state="translated"><ph id="ph1">`Global`</ph> を最上位レベルの名前空間にするには、 <bpt id="p1">**</bpt>ルート名前空間<ept id="p1">**</ept> のエントリを消去して、ボックスを空にします。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Clearing <bpt id="p1">**</bpt>Root Namespace<ept id="p1">**</ept> removes the need for the <ph id="ph1">`Global`</ph> keyword in namespace declarations.</source>
          <target state="translated"><bpt id="p1">**</bpt>ルート名前空間<ept id="p1">**</ept> を消去すると、名前空間の宣言で <ph id="ph1">`Global`</ph> キーワードの必要がなくなります。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>If a <ph id="ph1">`Namespace`</ph> statement declares a name that is also a namespace in the .NET Framework, the .NET Framework namespace becomes unavailable if the <ph id="ph2">`Global`</ph> keyword is not used in a fully qualified name.</source>
          <target state="translated"><ph id="ph1">`Namespace`</ph> ステートメントで .NET framework の名前空間にもなっている名前を宣言する場合、 <ph id="ph2">`Global`</ph> キーワードが完全修飾名で使用されていない場合、.NET Framework 名前空間は使用できなくなります。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>To enable access to that .NET Framework namespace without using the <ph id="ph1">`Global`</ph> keyword, you can include the <ph id="ph2">`Global`</ph> keyword in the <ph id="ph3">`Namespace`</ph> statement.</source>
          <target state="translated"><ph id="ph1">`Global`</ph> キーワードを使用せずに、.NET Framework 名前空間へのアクセスを有効にするには、 <ph id="ph2">`Global`</ph> キーワードを <ph id="ph3">`Namespace`</ph> ステートメントに含めます。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The following example has the <ph id="ph1">`Global`</ph> keyword in the <ph id="ph2">`System.Text`</ph> namespace declaration.</source>
          <target state="translated">次の例では、 <ph id="ph1">`Global`</ph> 名前空間の宣言で、 <ph id="ph2">`System.Text`</ph> キーワードを使用しています。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`Global`</ph> keyword was not present in the namespace declaration, &lt;xref:System.Text.StringBuilder&gt; could not be accessed without specifying <ph id="ph2">`Global.System.Text.StringBuilder`</ph>.</source>
          <target state="translated">場合、<ph id="ph1">`Global`</ph>キーワードが名前空間宣言に存在しなかった&lt;xref:System.Text.StringBuilder&gt;を指定せずにアクセスできませんでした<ph id="ph2">`Global.System.Text.StringBuilder`</ph>&lt;/xref:System.Text.StringBuilder&gt;。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>For a project named <ph id="ph1">`ConsoleApplication1`</ph>, references to <ph id="ph2">`System.Text`</ph> would access <ph id="ph3">`ConsoleApplication1.System.Text`</ph> if the <ph id="ph4">`Global`</ph> keyword was not used.</source>
          <target state="translated"><ph id="ph1">`ConsoleApplication1`</ph>という名前のプロジェクトで、 <ph id="ph2">`System.Text`</ph> キーワードが使用されていない場合、 <ph id="ph3">`ConsoleApplication1.System.Text`</ph> を参照すると、 <ph id="ph4">`Global`</ph> にアクセスすることになります。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrApplication#21<ept id="p2">](../../../visual-basic/programming-guide/program-structure/codesnippet/VisualBasic/namespaces_8.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrApplication #&amp;21;<ept id="p2">](../../../visual-basic/programming-guide/program-structure/codesnippet/VisualBasic/namespaces_8.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">関連項目</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Forms.ListBox&gt;</source>
          <target state="translated">&lt;xref:System.Windows.Forms.ListBox&gt;&lt;/xref:System.Windows.Forms.ListBox&gt;</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Forms?displayProperty=fullName&gt;</source>
          <target state="translated">&lt;xref:System.Windows.Forms?displayProperty=fullName&gt;&lt;/xref:System.Windows.Forms?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Assemblies and the Global Assembly Cache<ept id="p1">](../../../visual-basic/programming-guide/concepts/assemblies-gac/index.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>アセンブリとグローバル アセンブリ キャッシュ<ept id="p1">](../../../visual-basic/programming-guide/concepts/assemblies-gac/index.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Create and Use Assemblies Using the Command Line<ept id="p1">](http://msdn.microsoft.com/library/70f65026-3687-4e9c-ab79-c18b97dd8be4)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>方法: を作成し、コマンドラインを使用してアセンブリを使用します。<ept id="p1">](http://msdn.microsoft.com/library/70f65026-3687-4e9c-ab79-c18b97dd8be4)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>References and the Imports Statement<ept id="p1">](../../../visual-basic/programming-guide/program-structure/references-and-the-imports-statement.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>参照と Imports ステートメント<ept id="p1">](../../../visual-basic/programming-guide/program-structure/references-and-the-imports-statement.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Imports Statement (.NET Namespace and Type)<ept id="p1">](../../../visual-basic/language-reference/statements/imports-statement-net-namespace-and-type.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Imports ステートメント (.NET 名前空間および型)<ept id="p1">](../../../visual-basic/language-reference/statements/imports-statement-net-namespace-and-type.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Writing Code in Office Solutions<ept id="p1">](https://msdn.microsoft.com/library/bb608596)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>Office ソリューションのコードの記述<ept id="p1">](https://msdn.microsoft.com/library/bb608596)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>