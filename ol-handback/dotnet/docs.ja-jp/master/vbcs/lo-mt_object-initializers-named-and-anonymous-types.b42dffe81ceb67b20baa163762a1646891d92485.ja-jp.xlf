<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d684ad4f3dd47dc7400ea401a94660af832ef866</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\objects-and-classes\object-initializers-named-and-anonymous-types.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8f07e3062df4ad6b96805e338032222151546daa</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f05c0b363d5b2cc2c3125c0f98d68a8de274a04a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Object Initializers: Named and Anonymous Types (Visual Basic) | Microsoft Docs</source>
          <target state="translated">オブジェクト初期化子: 名前付きで匿名型 (Visual Basic) |Microsoft ドキュメント</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Object Initializers: Named and Anonymous Types (Visual Basic)</source>
          <target state="translated">オブジェクト初期化子: 名前付きの型と匿名型 (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Object initializers enable you to specify properties for a complex object by using a single expression.</source>
          <target state="translated">オブジェクト初期化子を使用すると、1 つの式を使用して、複雑なオブジェクトのプロパティを指定できます。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>They can be used to create instances of named types and of anonymous types.</source>
          <target state="translated">名前付きの型と匿名型のインスタンスを作成して、使用できます。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Declarations</source>
          <target state="translated">宣言</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Declarations of instances of named and anonymous types can look almost identical, but their effects are not the same.</source>
          <target state="translated">名前付きで匿名型のインスタンスの宣言はほとんど同じように確認できますが、その効果が同じではありません。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Each category has abilities and restrictions of its own.</source>
          <target state="translated">各カテゴリには、独自の機能と制限があります。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The following example shows a convenient way to declare and initialize an instance of a named class, <ph id="ph1">`Customer`</ph>, by using an object initializer list.</source>
          <target state="translated">次の例を宣言し、名前付きクラスのインスタンスを初期化するための便利な方法を示しています。 <ph id="ph1">`Customer`</ph>、オブジェクト初期化子リストを使用しています。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Notice that the name of the class is specified after the keyword <ph id="ph1">`New`</ph>.</source>
          <target state="translated">キーワードの後に、クラスの名前が指定されていることに注意してください。<ph id="ph1">`New`</ph>します。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrObjectInit#1<ept id="p2">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/codesnippet/VisualBasic/object-initializers-named-and-anonymous-types_1.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrObjectInit&amp;#1;<ept id="p2">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/codesnippet/VisualBasic/object-initializers-named-and-anonymous-types_1.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>An anonymous type has no usable name.</source>
          <target state="translated">匿名型には、使用可能な名前がありません。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Therefore an instantiation of an anonymous type cannot include a class name.</source>
          <target state="translated">そのため、匿名型のインスタンス化では、クラス名を含めることはできません。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrObjectInit#2<ept id="p2">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/codesnippet/VisualBasic/object-initializers-named-and-anonymous-types_2.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrObjectInit&amp;#2;<ept id="p2">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/codesnippet/VisualBasic/object-initializers-named-and-anonymous-types_2.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The requirements and results of the two declarations are not the same.</source>
          <target state="translated">要件と&amp;2; つの宣言の結果は同じです。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For <ph id="ph1">`namedCust`</ph>, a <ph id="ph2">`Customer`</ph> class that has a <ph id="ph3">`Name`</ph> property must already exist, and the declaration creates an instance of that class.</source>
          <target state="translated"><ph id="ph1">`namedCust`</ph>、<ph id="ph2">`Customer`</ph>を持つクラス、<ph id="ph3">`Name`</ph>プロパティが既に存在し、宣言は、そのクラスのインスタンスを作成します。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For <ph id="ph1">`anonymousCust`</ph>, the compiler defines a new class that has one property, a string called <ph id="ph2">`Name`</ph>, and creates a new instance of that class.</source>
          <target state="translated"><ph id="ph1">`anonymousCust`</ph>、コンパイラと呼ばれる文字列の&amp;1; つのプロパティを使用する新しいクラスを定義<ph id="ph2">`Name`</ph>、し、そのクラスの新しいインスタンスを作成します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Named Types</source>
          <target state="translated">名前付きの型</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Object initializers provide a simple way to call the constructor of a type and then set the values of some or all properties in a single statement.</source>
          <target state="translated">オブジェクト初期化子は、型のコンス トラクターを呼び出すし、単一のステートメントでの一部またはすべてのプロパティの値を設定する簡単な方法を提供します。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The compiler invokes the appropriate constructor for the statement: the default constructor if no arguments are presented, or a parameterized constructor if one or more arguments are sent.</source>
          <target state="translated">コンパイラは、ステートメントの適切なコンス トラクターを呼び出します。 既定のコンス トラクターの引数が何も表示されない場合、または&amp;1; つまたは複数の引数を渡す場合にパラメーター化されたコンス トラクターです。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>After that, the specified properties are initialized in the order in which they are presented in the initializer list.</source>
          <target state="translated">その後、指定したプロパティは、初期化子リストに示されている順序で初期化されます。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Each initialization in the initializer list consists of the assignment of an initial value to a member of the class.</source>
          <target state="translated">初期化子リスト内の各初期化は、クラスのメンバーへの初期値の割り当てで構成されます。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The names and data types of the members are determined when the class is defined.</source>
          <target state="translated">クラスが定義されている場合、名前と、メンバーのデータ型が決まります。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In the following examples, the <ph id="ph1">`Customer`</ph> class must exist, and must have members named <ph id="ph2">`Name`</ph> and <ph id="ph3">`City`</ph> that can accept string values.</source>
          <target state="translated">次の例で、<ph id="ph1">`Customer`</ph>クラスが存在し、あるメンバーという名前の必要があります<ph id="ph2">`Name`</ph>と<ph id="ph3">`City`</ph>文字列の値を受け取ることができます。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrObjectInit#3<ept id="p2">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/codesnippet/VisualBasic/object-initializers-named-and-anonymous-types_3.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrObjectInit&amp;#3;<ept id="p2">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/codesnippet/VisualBasic/object-initializers-named-and-anonymous-types_3.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Alternatively, you can obtain the same result by using the following code:</source>
          <target state="translated">または、次のコードを使用して、同じ結果を取得できます。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrObjectInit#4<ept id="p2">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/codesnippet/VisualBasic/object-initializers-named-and-anonymous-types_4.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrObjectInit&amp;4;<ept id="p2">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/codesnippet/VisualBasic/object-initializers-named-and-anonymous-types_4.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Each of these declarations is equivalent to the following example, which creates a <ph id="ph1">`Customer`</ph> object by using the default constructor, and then specifies initial values for the <ph id="ph2">`Name`</ph> and <ph id="ph3">`City`</ph> properties by using a <ph id="ph4">`With`</ph> statement.</source>
          <target state="translated">これらの宣言は次の例は、作成に相当する<ph id="ph1">`Customer`</ph>既定のコンス トラクターを使用して、オブジェクトし、の初期値を指定、<ph id="ph2">`Name`</ph>と<ph id="ph3">`City`</ph>プロパティを使用して、<ph id="ph4">`With`</ph>ステートメントです。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrObjectInit#5<ept id="p2">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/codesnippet/VisualBasic/object-initializers-named-and-anonymous-types_5.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrObjectInit&amp;#5;<ept id="p2">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/codesnippet/VisualBasic/object-initializers-named-and-anonymous-types_5.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`Customer`</ph> class contains a parameterized constructor that enables you to send in a value for <ph id="ph2">`Name`</ph>, for example, you can also declare and initialize a <ph id="ph3">`Customer`</ph> object in the following ways:</source>
          <target state="translated">場合、<ph id="ph1">`Customer`</ph>クラスには、パラメーター化されたコンス トラクター値を送信することができますにはが含まれています。 <ph id="ph2">`Name`</ph>、なども宣言して初期化、<ph id="ph3">`Customer`</ph>次の方法でオブジェクト。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrObjectInit#6<ept id="p2">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/codesnippet/VisualBasic/object-initializers-named-and-anonymous-types_6.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrObjectInit&amp;6;<ept id="p2">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/codesnippet/VisualBasic/object-initializers-named-and-anonymous-types_6.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You do not have to initialize all properties, as the following code shows.</source>
          <target state="translated">次のコードに示すように、すべてのプロパティを初期化する必要はありません。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrObjectInit#7<ept id="p2">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/codesnippet/VisualBasic/object-initializers-named-and-anonymous-types_7.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrObjectInit&amp;#7;<ept id="p2">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/codesnippet/VisualBasic/object-initializers-named-and-anonymous-types_7.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>However, the initialization list cannot be empty.</source>
          <target state="translated">ただし、初期化リストを空にすることはできません。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Uninitialized properties retain their default values.</source>
          <target state="translated">初期化されていないプロパティは、既定値を保持します。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Type Inference with Named Types</source>
          <target state="translated">名前付きの型と型の推論</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>You can shorten the code for the declaration of <ph id="ph1">`cust1`</ph> by combining object initializers and local type inference.</source>
          <target state="translated">宣言のコードを短く<ph id="ph1">`cust1`</ph>オブジェクト初期化子とローカル型推論を結合します。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This enables you to omit the <ph id="ph1">`As`</ph> clause in the variable declaration.</source>
          <target state="translated">これは、省略することにより、<ph id="ph1">`As`</ph>変数の宣言内の句。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The data type of the variable is inferred from the type of the object that is created by the assignment.</source>
          <target state="translated">変数のデータ型は、代入によって作成されるオブジェクトの型から推論されます。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>In the following example, the type of <ph id="ph1">`cust6`</ph> is <ph id="ph2">`Customer`</ph>.</source>
          <target state="translated">次の例の種類で<ph id="ph1">`cust6`</ph>は<ph id="ph2">`Customer`</ph>です。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrObjectInit#8<ept id="p2">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/codesnippet/VisualBasic/object-initializers-named-and-anonymous-types_8.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrObjectInit&amp;#8;<ept id="p2">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/codesnippet/VisualBasic/object-initializers-named-and-anonymous-types_8.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Remarks About Named Types</source>
          <target state="translated">名前付きの型についての解説</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>A class member cannot be initialized more than one time in the object initializer list.</source>
          <target state="translated">クラスのメンバーには、オブジェクト初期化子リストに&amp;1; つ以上の時間を初期化できません。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The declaration of <ph id="ph1">`cust7`</ph> causes an error.</source>
          <target state="translated">宣言<ph id="ph1">`cust7`</ph>エラーが発生します。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrObjectInit#9<ept id="p2">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/codesnippet/VisualBasic/object-initializers-named-and-anonymous-types_9.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrObjectInit&amp;#9;<ept id="p2">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/codesnippet/VisualBasic/object-initializers-named-and-anonymous-types_9.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>A member can be used to initialize itself or another field.</source>
          <target state="translated">メンバーは、そのリング自体または別のフィールドを初期化するために使用できます。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>If a member is accessed before it has been initialized, as in the following declaration for <ph id="ph1">`cust8`</ph>, the default value will be used.</source>
          <target state="translated">初期化された、次の宣言と同様にする前に、メンバーがアクセスされる場合<ph id="ph1">`cust8`</ph>既定値が使用されます。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Remember that when a declaration that uses an object initializer is processed, the first thing that happens is that the appropriate constructor is invoked.</source>
          <target state="translated">オブジェクト初期化子を使用する宣言が処理されるときに最初に行われるが適切なコンス トラクターが呼び出されることに注意してください。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>After that, the individual fields in the initializer list are initialized.</source>
          <target state="translated">その後は、初期化子リスト内の各フィールドが初期化されます。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>In the following examples, the default value for <ph id="ph1">`Name`</ph> is assigned for <ph id="ph2">`cust8`</ph>, and an initialized value is assigned in <ph id="ph3">`cust9`</ph>.</source>
          <target state="translated">既定値を次の例で<ph id="ph1">`Name`</ph>が割り当てられている<ph id="ph2">`cust8`</ph>、しで初期化された値を割り当てる<ph id="ph3">`cust9`</ph>します。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrObjectInit#10<ept id="p2">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/codesnippet/VisualBasic/object-initializers-named-and-anonymous-types_10.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrObjectInit&amp;#10;<ept id="p2">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/codesnippet/VisualBasic/object-initializers-named-and-anonymous-types_10.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The following example uses the parameterized constructor from <ph id="ph1">`cust3`</ph> and <ph id="ph2">`cust4`</ph> to declare and initialize <ph id="ph3">`cust10`</ph> and <ph id="ph4">`cust11`</ph>.</source>
          <target state="translated">次の例は、パラメーター化されたコンス トラクターから<ph id="ph1">`cust3`</ph>と<ph id="ph2">`cust4`</ph>を宣言して初期化<ph id="ph3">`cust10`</ph>と<ph id="ph4">`cust11`</ph>です。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrObjectInit#11<ept id="p2">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/codesnippet/VisualBasic/object-initializers-named-and-anonymous-types_11.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrObjectInit&amp;#11;<ept id="p2">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/codesnippet/VisualBasic/object-initializers-named-and-anonymous-types_11.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Object initializers can be nested.</source>
          <target state="translated">オブジェクト初期化子が入れ子にすることができます。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>In the following example, <ph id="ph1">`AddressClass`</ph> is a class that has two properties, <ph id="ph2">`City`</ph> and <ph id="ph3">`State`</ph>, and the <ph id="ph4">`Customer`</ph> class has an <ph id="ph5">`Address`</ph> property that is an instance of <ph id="ph6">`AddressClass`</ph>.</source>
          <target state="translated">次の例で<ph id="ph1">`AddressClass`</ph>を&amp;2; つのプロパティを持つクラスは、<ph id="ph2">`City`</ph>と<ph id="ph3">`State`</ph>、および<ph id="ph4">`Customer`</ph>クラスには、<ph id="ph5">`Address`</ph>のインスタンスであるプロパティ<ph id="ph6">`AddressClass`</ph>します。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrObjectInit#12<ept id="p2">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/codesnippet/VisualBasic/object-initializers-named-and-anonymous-types_12.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrObjectInit&amp;#12;<ept id="p2">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/codesnippet/VisualBasic/object-initializers-named-and-anonymous-types_12.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The initialization list cannot be empty.</source>
          <target state="translated">初期化リストを空にすることはできません。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The instance being initialized cannot be of type Object.</source>
          <target state="translated">初期化中のインスタンスは、Object 型のすることはできません。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Class members being initialized cannot be shared members, read-only members, constants, or method calls.</source>
          <target state="translated">クラスのメンバーの初期化中には、共有メンバー、読み取り専用のメンバー、定数、またはメソッドの呼び出しをすることはできません。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Class members being initialized cannot be indexed or qualified.</source>
          <target state="translated">クラスのメンバーの初期化中は、インデックス付きまたは修飾ことはできません。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The following examples raise compiler errors:</source>
          <target state="translated">次の例では、コンパイラ エラーが発生します。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Anonymous Types</source>
          <target state="translated">匿名型</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Anonymous types use object initializers to create instances of new types that you do not explicitly define and name.</source>
          <target state="translated">匿名型では、オブジェクト初期化子を使用して、明示的に定義していない新しい型と名前のインスタンスを作成します。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Instead, the compiler generates a type according to the properties you designate in the object initializer list.</source>
          <target state="translated">代わりに、コンパイラは、オブジェクト初期化子リストに指定されているプロパティに従って型を生成します。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Because the name of the type is not specified, it is referred to as an <bpt id="p1">*</bpt>anonymous type<ept id="p1">*</ept>.</source>
          <target state="translated">型の名前が指定されていないためと呼びます、<bpt id="p1">*</bpt>匿名型<ept id="p1">*</ept>します。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>For example, compare the following declaration to the earlier one for <ph id="ph1">`cust6`</ph>.</source>
          <target state="translated">たとえば、前に、次の宣言を比較<ph id="ph1">`cust6`</ph>します。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrObjectInit#13<ept id="p2">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/codesnippet/VisualBasic/object-initializers-named-and-anonymous-types_13.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrObjectInit&amp;#13;<ept id="p2">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/codesnippet/VisualBasic/object-initializers-named-and-anonymous-types_13.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The only difference syntactically is that no name is specified after <ph id="ph1">`New`</ph> for the data type.</source>
          <target state="translated">唯一の違いが構文的に後に名前が指定されていないことは<ph id="ph1">`New`</ph>データ型にします。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>However, what happens is quite different.</source>
          <target state="translated">ただし、動作は大きく異なります。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The compiler defines a new anonymous type that has two properties, <ph id="ph1">`Name`</ph> and <ph id="ph2">`City`</ph>, and creates an instance of it with the specified values.</source>
          <target state="translated">コンパイラは次の&amp;2; つのプロパティを持つ新しい匿名型を定義<ph id="ph1">`Name`</ph>と<ph id="ph2">`City`</ph>、し、値を指定して、そのインスタンスを作成します。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Type inference determines the types of <ph id="ph1">`Name`</ph> and <ph id="ph2">`City`</ph> in the example to be strings.</source>
          <target state="translated">型の推定の種類を決定する<ph id="ph1">`Name`</ph>と<ph id="ph2">`City`</ph>文字列の例です。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The name of the anonymous type is generated by the compiler, and may vary from compilation to compilation.</source>
          <target state="translated">匿名型の名前は、コンパイラによって生成され、コンパイルするたびに異なる場合があります。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Your code should not use or rely on the name of an anonymous type.</source>
          <target state="translated">コード使用したり、避けて、匿名型の名前に依存します。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Because the name of the type is not available, you cannot use an <ph id="ph1">`As`</ph> clause to declare <ph id="ph2">`cust13`</ph>.</source>
          <target state="translated">型の名前を使用できないために使用できません、<ph id="ph1">`As`</ph>を宣言する句<ph id="ph2">`cust13`</ph>します。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Its type must be inferred.</source>
          <target state="translated">その型を推論する必要があります。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Without using late binding, this limits the use of anonymous types to local variables.</source>
          <target state="translated">遅延バインディングを使用しない場合は、ローカル変数に匿名型の使用を制限します。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Anonymous types provide critical support for <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> queries.</source>
          <target state="translated">匿名型の重要なサポートは提供<ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph>クエリ。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>For more information about the use of anonymous types in queries, see <bpt id="p1">[</bpt>Anonymous Types<ept id="p1">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/anonymous-types.md)</ept> and <bpt id="p2">[</bpt>Introduction to LINQ in Visual Basic<ept id="p2">](../../../../visual-basic/programming-guide/language-features/linq/introduction-to-linq.md)</ept>.</source>
          <target state="translated">クエリ内で匿名型の使用に関する詳細については、次を参照してください。<bpt id="p1">[</bpt>匿名型<ept id="p1">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/anonymous-types.md)</ept>と<bpt id="p2">[</bpt>Visual Basic における LINQ の概要<ept id="p2">](../../../../visual-basic/programming-guide/language-features/linq/introduction-to-linq.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Remarks About Anonymous Types</source>
          <target state="translated">匿名型についての解説</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Typically, all or most of the properties in an anonymous type declaration will be key properties, which are indicated by typing the keyword <ph id="ph1">`Key`</ph> in front of the property name.</source>
          <target state="translated">通常、匿名型の宣言におけるプロパティのほとんどまたはすべてでは、キーワードを入力して示されるキー プロパティ<ph id="ph1">`Key`</ph>プロパティ名の前にします。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrObjectInit#14<ept id="p2">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/codesnippet/VisualBasic/object-initializers-named-and-anonymous-types_14.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrObjectInit&amp;#14;<ept id="p2">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/codesnippet/VisualBasic/object-initializers-named-and-anonymous-types_14.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>For more information about key properties, see <bpt id="p1">[</bpt>Key<ept id="p1">](../../../../visual-basic/language-reference/modifiers/key.md)</ept>.</source>
          <target state="translated">キー プロパティの詳細については、次を参照してください。<bpt id="p1">[</bpt>キー<ept id="p1">](../../../../visual-basic/language-reference/modifiers/key.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Like named types, initializer lists for anonymous type definitions must declare at least one property.</source>
          <target state="translated">このような名前付きの型、初期化子リスト匿名型の定義は、少なくとも&amp;1; つのプロパティを宣言する必要があります。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrObjectInit#2<ept id="p2">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/codesnippet/VisualBasic/object-initializers-named-and-anonymous-types_2.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrObjectInit&amp;#2;<ept id="p2">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/codesnippet/VisualBasic/object-initializers-named-and-anonymous-types_2.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>When an instance of an anonymous type is declared, the compiler generates a matching anonymous type definition.</source>
          <target state="translated">匿名型のインスタンスを宣言すると、コンパイラは、一致する匿名型の定義を生成します。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The names and data types of the properties are taken from the instance declaration, and are included by the compiler in the definition.</source>
          <target state="translated">名前とプロパティのデータ型インスタンスの宣言から取得され、定義のコンパイラでは追加します。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The properties are not named and defined in advance, as they would be for a named type.</source>
          <target state="translated">プロパティがないという名前し、名前付きの型とは異なり、事前に定義されています。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Their types are inferred.</source>
          <target state="translated">その型が推論されます。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>You cannot specify the data types of the properties by using an <ph id="ph1">`As`</ph> clause.</source>
          <target state="translated">使用して、プロパティのデータ型を指定することはできません、<ph id="ph1">`As`</ph>句。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Anonymous types can also establish the names and values of their properties in several other ways.</source>
          <target state="translated">匿名型は、その他のいくつかの方法で、名前とそのプロパティの値を確立できますもします。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>For example, an anonymous type property can take both the name and the value of a variable, or the name and value of a property of another object.</source>
          <target state="translated">たとえば、匿名型のプロパティには、名前と、変数、または名前の値と別のオブジェクトのプロパティの値の両方がかかります。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrObjectInit#15<ept id="p2">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/codesnippet/VisualBasic/object-initializers-named-and-anonymous-types_15.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrObjectInit&amp;#15;<ept id="p2">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/codesnippet/VisualBasic/object-initializers-named-and-anonymous-types_15.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>For more information about the options for defining properties in anonymous types, see <bpt id="p1">[</bpt>How to: Infer Property Names and Types in Anonymous Type Declarations<ept id="p1">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/how-to-infer-property-names-and-types-in-anonymous-type-declarations.md)</ept>.</source>
          <target state="translated">匿名型のプロパティを定義するためのオプションの詳細については、次を参照してください。<bpt id="p1">[</bpt>方法: 匿名型の宣言におけるプロパティ名の推論と型<ept id="p1">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/how-to-infer-property-names-and-types-in-anonymous-type-declarations.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">関連項目</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Local Type Inference<ept id="p1">](../../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>ローカル型推論<ept id="p1">](../../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Anonymous Types<ept id="p1">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/anonymous-types.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>匿名型<ept id="p1">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/anonymous-types.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Introduction to LINQ in Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/language-features/linq/introduction-to-linq.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Visual Basic における LINQ の概要<ept id="p1">](../../../../visual-basic/programming-guide/language-features/linq/introduction-to-linq.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Infer Property Names and Types in Anonymous Type Declarations<ept id="p1">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/how-to-infer-property-names-and-types-in-anonymous-type-declarations.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>方法: 匿名型の宣言におけるプロパティ名と型の推論<ept id="p1">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/how-to-infer-property-names-and-types-in-anonymous-type-declarations.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Key<ept id="p1">](../../../../visual-basic/language-reference/modifiers/key.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>キー<ept id="p1">](../../../../visual-basic/language-reference/modifiers/key.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Declare an Object by Using an Object Initializer<ept id="p1">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/how-to-declare-an-object-by-using-an-object-initializer.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>方法 : オブジェクト初期化子を使用してオブジェクトを宣言する<ept id="p1">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/how-to-declare-an-object-by-using-an-object-initializer.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>