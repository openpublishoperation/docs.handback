<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d5491b3bd5a25908194d02063f688a319509bb77</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\object-oriented-programming.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">247c95a78f51f0c54560faa85fd2d320a0ca0218</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2c21998c7daccdc53003ba72fc80342b8f4d552f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Object-Oriented Programming (Visual Basic) | Microsoft Docs</source>
          <target state="translated">オブジェクト指向プログラミング (Visual Basic) |Microsoft ドキュメント</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Object-Oriented Programming (Visual Basic)</source>
          <target state="translated">オブジェクト指向プログラミング (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Visual Basic provides full support for object-oriented programming including encapsulation, inheritance, and polymorphism.</source>
          <target state="translated">Visual Basic では、カプセル化、継承、多態性などオブジェクト指向プログラミングに完全にサポートを提供します。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Encapsulation<ept id="p1">*</ept> means that a group of related properties, methods, and other members are treated as a single unit or object.</source>
          <target state="translated"><bpt id="p1">*</bpt>カプセル化<ept id="p1">*</ept>関連するプロパティ、メソッド、およびその他のメンバーのグループが&amp;1; つの単位またはオブジェクトとして扱われることを意味します。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Inheritance<ept id="p1">*</ept> describes the ability to create new classes based on an existing class.</source>
          <target state="translated"><bpt id="p1">*</bpt>継承<ept id="p1">*</ept>既存のクラスに基づいて新しいクラスを作成する機能について説明します。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Polymorphism<ept id="p1">*</ept> means that you can have multiple classes that can be used interchangeably, even though each class implements the same properties or methods in different ways.</source>
          <target state="translated"><bpt id="p1">*</bpt>ポリモーフィズム<ept id="p1">*</ept>同じ意味で使用できる複数のクラスが持てる場合でも、各クラスがさまざまな方法で同じプロパティまたはメソッドを実装することを意味します。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This section describes the following concepts:</source>
          <target state="translated">このセクションでは、次の概念について説明します。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Classes and Objects<ept id="p1">](#Classes)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>クラスとオブジェクト<ept id="p1">](#Classes)</ept></target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Class Members<ept id="p1">](#Members)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>クラス メンバー<ept id="p1">](#Members)</ept></target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Properties and Fields<ept id="p1">](#Properties)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>プロパティとパブリック フィールド<ept id="p1">](#Properties)</ept></target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Methods<ept id="p1">](#Methods)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>メソッド<ept id="p1">](#Methods)</ept></target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Constructors<ept id="p1">](#Constructors)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>コンストラクター<ept id="p1">](#Constructors)</ept></target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Destructors<ept id="p1">](#Destructors)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>デストラクター<ept id="p1">](#Destructors)</ept></target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Events<ept id="p1">](#Events)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>イベント<ept id="p1">](#Events)</ept></target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Nested Classes<ept id="p1">](#NestedClasses)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>入れ子になったクラス<ept id="p1">](#NestedClasses)</ept></target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Access Modifiers and Access Levels<ept id="p1">](#AccessModifiers)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>アクセス修飾子とアクセス レベル<ept id="p1">](#AccessModifiers)</ept></target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Instantiating Classes<ept id="p1">](#InstantiatingClasses)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>クラスをインスタンス化します。<ept id="p1">](#InstantiatingClasses)</ept></target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Shared Classes and Members<ept id="p1">](#Static)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>共有クラスおよびメンバー<ept id="p1">](#Static)</ept></target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Anonymous Types<ept id="p1">](#AnonymousTypes)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>匿名型<ept id="p1">](#AnonymousTypes)</ept></target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Inheritance<ept id="p1">](#Inheritance)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>継承<ept id="p1">](#Inheritance)</ept></target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Overriding Members<ept id="p1">](#Overriding)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>メンバーをオーバーライドします。<ept id="p1">](#Overriding)</ept></target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Interfaces<ept id="p1">](#Interfaces)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>インターフェイス<ept id="p1">](#Interfaces)</ept></target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Generics<ept id="p1">](#Generics)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>ジェネリック<ept id="p1">](#Generics)</ept></target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Delegates<ept id="p1">](#Delegates)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>デリゲート<ept id="p1">](#Delegates)</ept></target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="Classes"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Classes and Objects</source>
          <target state="translated"><bpt id="p1">&lt;a name="Classes"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>クラスとオブジェクト</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The terms <bpt id="p1">*</bpt>class<ept id="p1">*</ept> and <bpt id="p2">*</bpt>object<ept id="p2">*</ept> are sometimes used interchangeably, but in fact, classes describe the <bpt id="p3">*</bpt>type<ept id="p3">*</ept> of objects, while objects are usable <bpt id="p4">*</bpt>instances<ept id="p4">*</ept> of classes.</source>
          <target state="translated">条件<bpt id="p1">*</bpt>クラス<ept id="p1">*</ept>と<bpt id="p2">*</bpt>オブジェクト<ept id="p2">*</ept>ときどき使われる、交換が、実際には、クラスを表す、<bpt id="p3">*</bpt>型<ept id="p3">*</ept>オブジェクトは使用中に、オブジェクトの<bpt id="p4">*</bpt>インスタンス<ept id="p4">*</ept>クラスのです。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>So, the act of creating an object is called <bpt id="p1">*</bpt>instantiation<ept id="p1">*</ept>.</source>
          <target state="translated">そのため、オブジェクトを作成する機能といいます<bpt id="p1">*</bpt>インスタンス化<ept id="p1">*</ept>します。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Using the blueprint analogy, a class is a blueprint, and an object is a building made from that blueprint.</source>
          <target state="translated">設計図との対比を使って説明すると、クラスは設計図であり、オブジェクトはその設計図を基にした建築物です。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>To define a class:</source>
          <target state="translated">クラスを定義するコード例を次に示します。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Visual Basic also provides a light version of classes called <bpt id="p1">*</bpt>structures<ept id="p1">*</ept> that are useful when you need to create large array of objects and do not want to consume too much memory for that.</source>
          <target state="translated">Visual Basic は、軽量のバージョンのと呼ばれるクラスも用意されています。<bpt id="p1">*</bpt>構造<ept id="p1">*</ept>をは、オブジェクトの大きな配列を作成し操作する必要がある場合に役立ちますが大量のメモリを使用しません。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>To define a structure:</source>
          <target state="translated">構造体を定義するコード例を次に示します。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For more information, see:</source>
          <target state="translated">詳細については次を参照してください:</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Class Statement<ept id="p1">](../../../visual-basic/language-reference/statements/class-statement.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Class ステートメント<ept id="p1">](../../../visual-basic/language-reference/statements/class-statement.md)</ept></target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Structure Statement<ept id="p1">](../../../visual-basic/language-reference/statements/structure-statement.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Structure ステートメント<ept id="p1">](../../../visual-basic/language-reference/statements/structure-statement.md)</ept></target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="Members"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Class Members</source>
          <target state="translated"><bpt id="p1">&lt;a name="Members"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>クラス メンバー</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Each class can have different <bpt id="p1">*</bpt>class members<ept id="p1">*</ept> that include properties that describe class data, methods that define class behavior, and events that provide communication between different classes and objects.</source>
          <target state="translated">各クラスが異なることができますが<bpt id="p1">*</bpt>クラス メンバー<ept id="p1">*</ept>クラスのデータや、クラスの動作を定義するメソッドをさまざまなクラスとオブジェクト間の通信を提供するイベントを記述するプロパティが含まれています。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="Properties"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Properties and Fields</source>
          <target state="translated"><bpt id="p1">&lt;a name="Properties"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>プロパティとパブリック フィールド</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Fields and properties represent information that an object contains.</source>
          <target state="translated">フィールドとプロパティは、オブジェクトに格納されている情報を表します。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Fields are like variables because they can be read or set directly.</source>
          <target state="translated">フィールドは、直接読み取ったり設定したりできるので変数と似ています。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>To define a field:</source>
          <target state="translated">フィールドを定義するコード例を次に示します。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Properties have get and set procedures, which provide more control on how values are set or returned.</source>
          <target state="translated">プロパティには get プロシージャと set プロシージャがあり、これらを使用することで値の設定方法や戻り値をより細かく制御できます。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Visual Basic allows you either to create a private field for storing the property value or use so-called auto-implemented properties that create this field automatically behind the scenes and provide the basic logic for the property procedures.</source>
          <target state="translated">Visual Basic ではプロパティの値を格納するためのプライベート フィールドを作成するかバック グラウンドで自動的には、このフィールドを作成し、プロパティ プロシージャの基本的なロジックを提供と呼ばれる自動実装プロパティを使用することができます。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>To define an auto-implemented property:</source>
          <target state="translated">自動実装プロパティを定義するコード例を次に示します。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If you need to perform some additional operations for reading and writing the property value, define a field for storing the property value and provide the basic logic for storing and retrieving it:</source>
          <target state="translated">プロパティ値の読み取りと書き込みのために追加の操作を実行する必要がある場合は、プロパティ値を格納するフィールドを定義し、値を格納および取得する基本的なロジックを実装します。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Most properties have methods or procedures to both set and get the property value.</source>
          <target state="translated">ほとんどのプロパティには、プロパティ値の設定と取得を行うための両方のメソッドまたはプロシージャがあります。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>However, you can create read-only or write-only properties to restrict them from being modified or read.</source>
          <target state="translated">ただし、読み取り専用または書き込み専用のプロパティを作成して、プロパティの変更や読み取りを制限することもできます。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>In Visual Basic you can use <ph id="ph1">`ReadOnly`</ph> and <ph id="ph2">`WriteOnly`</ph> keywords.</source>
          <target state="translated">そのためには、Visual Basic では <ph id="ph1">`ReadOnly`</ph> キーワードと <ph id="ph2">`WriteOnly`</ph> キーワードを使用します。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>However, auto-implemented properties cannot be read-only or write-only.</source>
          <target state="translated">ただし、自動実装プロパティは、読み取り専用または書き込み専用にすることはできません。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For more information, see:</source>
          <target state="translated">詳細については次を参照してください:</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Property Statement<ept id="p1">](../../../visual-basic/language-reference/statements/property-statement.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Property ステートメント<ept id="p1">](../../../visual-basic/language-reference/statements/property-statement.md)</ept></target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Get Statement<ept id="p1">](../../../visual-basic/language-reference/statements/get-statement.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Get ステートメント<ept id="p1">](../../../visual-basic/language-reference/statements/get-statement.md)</ept></target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Set Statement<ept id="p1">](../../../visual-basic/language-reference/statements/set-statement.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Set ステートメント<ept id="p1">](../../../visual-basic/language-reference/statements/set-statement.md)</ept></target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ReadOnly<ept id="p1">](../../../visual-basic/language-reference/modifiers/readonly.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>ReadOnly<ept id="p1">](../../../visual-basic/language-reference/modifiers/readonly.md)</ept></target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>WriteOnly<ept id="p1">](../../../visual-basic/language-reference/modifiers/writeonly.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>WriteOnly<ept id="p1">](../../../visual-basic/language-reference/modifiers/writeonly.md)</ept></target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="Methods"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Methods</source>
          <target state="translated"><bpt id="p1">&lt;a name="Methods"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>メソッド</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>method<ept id="p1">*</ept> is an action that an object can perform.</source>
          <target state="translated">A<bpt id="p1">*</bpt>メソッド<ept id="p1">*</ept>オブジェクトが実行できる操作します。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>In Visual Basic, there are two ways to create a method: the <ph id="ph1">`Sub`</ph> statement is used if the method does not return a value; the <ph id="ph2">`Function`</ph> statement is used if a method returns a value.</source>
          <target state="translated">Visual Basic には、メソッドを作成する方法が&amp;2; つあります。メソッドが値を返さない場合は <ph id="ph1">`Sub`</ph> ステートメントを使用し、メソッドが値を返す場合は <ph id="ph2">`Function`</ph> ステートメントを使用します。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>To define a method of a class:</source>
          <target state="translated">クラスのメソッドを定義するコード例を次に示します。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>A class can have several implementations, or <bpt id="p1">*</bpt>overloads<ept id="p1">*</ept>, of the same method that differ in the number of parameters or parameter types.</source>
          <target state="translated">クラスは、いくつかの実装を持つことができますか<bpt id="p1">*</bpt>オーバー ロード<ept id="p1">*</ept>のパラメーターまたはパラメーターの型の数が異なるものと同じ方法です。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>To overload a method:</source>
          <target state="translated">メソッドをオーバーロードするコード例を次に示します。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>In most cases you declare a method within a class definition.</source>
          <target state="translated">ほとんどの場合、メソッドはクラス定義内で宣言します。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>However, Visual Basic also supports <bpt id="p1">*</bpt>extension methods<ept id="p1">*</ept> that allow you to add methods to an existing class outside the actual definition of the class.</source>
          <target state="translated">ただし、Visual Basic もサポートしています<bpt id="p1">*</bpt>拡張メソッド<ept id="p1">*</ept>既存のクラス、クラスの実際の定義の外部にメソッドを追加するためのです。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>For more information, see:</source>
          <target state="translated">詳細については次を参照してください:</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Function Statement<ept id="p1">](../../../visual-basic/language-reference/statements/function-statement.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Function ステートメント<ept id="p1">](../../../visual-basic/language-reference/statements/function-statement.md)</ept></target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Sub Statement<ept id="p1">](../../../visual-basic/language-reference/statements/sub-statement.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Sub ステートメント<ept id="p1">](../../../visual-basic/language-reference/statements/sub-statement.md)</ept></target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Overloads<ept id="p1">](../../../visual-basic/language-reference/modifiers/overloads.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>オーバーロード<ept id="p1">](../../../visual-basic/language-reference/modifiers/overloads.md)</ept></target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Extension Methods<ept id="p1">](../../../visual-basic/programming-guide/language-features/procedures/extension-methods.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>拡張メソッド<ept id="p1">](../../../visual-basic/programming-guide/language-features/procedures/extension-methods.md)</ept></target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="Constructors"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Constructors</source>
          <target state="translated"><bpt id="p1">&lt;a name="Constructors"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>コンス トラクター</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Constructors are class methods that are executed automatically when an object of a given type is created.</source>
          <target state="translated">コンストラクターは、特定の型のオブジェクトを作成するときに自動的に実行されるクラス メソッドです。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Constructors usually initialize the data members of the new object.</source>
          <target state="translated">コンストラクターは、通常、新しいオブジェクトのデータ メンバーを初期化します。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>A constructor can run only once when a class is created.</source>
          <target state="translated">コンストラクターは、クラスの作成時に&amp;1; 回だけ実行できます。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Furthermore, the code in the constructor always runs before any other code in a class.</source>
          <target state="translated">また、コンストラクター内のコードは常に、クラス内の他のすべてのコードより先に実行されます。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>However, you can create multiple constructor overloads in the same way as for any other method.</source>
          <target state="translated">他のメソッドと同じように、コンストラクターにも複数のオーバーロードを作成できます。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>To define a constructor for a class:</source>
          <target state="translated">クラスのコンストラクターを定義するコード例を次に示します。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>For more information, see: <bpt id="p1">[</bpt>Object Lifetime: How Objects Are Created and Destroyed<ept id="p1">](../../../visual-basic/programming-guide/language-features/objects-and-classes/object-lifetime-how-objects-are-created-and-destroyed.md)</ept>.</source>
          <target state="translated">詳細についてを参照してください:<bpt id="p1">[</bpt>オブジェクトの有効期間: オブジェクトが作成と破棄方法<ept id="p1">](../../../visual-basic/programming-guide/language-features/objects-and-classes/object-lifetime-how-objects-are-created-and-destroyed.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="Destructors"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Destructors</source>
          <target state="translated"><bpt id="p1">&lt;a name="Destructors"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>デストラクター</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Destructors are used to destruct instances of classes.</source>
          <target state="translated">デストラクターは、クラスのインスタンスを消滅させるために使用します。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>In the .NET Framework, the garbage collector automatically manages the allocation and release of memory for the managed objects in your application.</source>
          <target state="translated">.NET Framework では、アプリケーション内のマネージ オブジェクトのメモリの割り当てと解放は、ガベージ コレクターによって自動的に管理されます。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>However, you may still need destructors to clean up any unmanaged resources that your application creates.</source>
          <target state="translated">ただし、アプリケーションで作成されるアンマネージ リソースを適切にクリーンアップするために、デストラクターも必要になることがあります。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>There can be only one destructor for a class.</source>
          <target state="translated">1 つのクラスに定義できるデストラクターは&amp;1; つだけです。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>For more information about destructors and garbage collection in the .NET Framework, see <bpt id="p1">[</bpt>Garbage Collection<ept id="p1">](../../../standard/garbagecollection/index.md)</ept>.</source>
          <target state="translated">デストラクターおよび .NET Framework のガベージ コレクションの詳細については、次を参照してください。<bpt id="p1">[</bpt>ガベージ コレクション<ept id="p1">](../../../standard/garbagecollection/index.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="Events"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Events</source>
          <target state="translated"><bpt id="p1">&lt;a name="Events"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>イベント</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Events enable a class or object to notify other classes or objects when something of interest occurs.</source>
          <target state="translated">クラスやオブジェクトは、何か重要なことが起こった場合に、イベントを使用して他のクラスまたはオブジェクトに通知を送ります。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The class that sends (or raises) the event is called the <bpt id="p1">*</bpt>publisher<ept id="p1">*</ept> and the classes that receive (or handle) the event are called <bpt id="p2">*</bpt>subscribers<ept id="p2">*</ept>.</source>
          <target state="translated">イベントを送信する (またはを発生させます) クラスと呼ばれる、<bpt id="p1">*</bpt>パブリッシャー<ept id="p1">*</ept>し、受信する (処理) イベント クラスと呼ばれます<bpt id="p2">*</bpt>サブスクライバー<ept id="p2">*</ept>します。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>For more information about events, how they are raised and handled, see <bpt id="p1">[</bpt>Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
          <target state="translated">イベントに関する詳細については、どのように発生し、処理を参照してください<bpt id="p1">[</bpt>イベント<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>です。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>To declare events, use the <bpt id="p1">[</bpt>Event Statement<ept id="p1">](../../../visual-basic/language-reference/statements/event-statement.md)</ept>.</source>
          <target state="translated">イベントを宣言するには、使用、 <bpt id="p1">[</bpt>Event ステートメント<ept id="p1">](../../../visual-basic/language-reference/statements/event-statement.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>To raise events, use the <bpt id="p1">[</bpt>RaiseEvent Statement<ept id="p1">](../../../visual-basic/language-reference/statements/raiseevent-statement.md)</ept>.</source>
          <target state="translated">イベントを発生させるを使用して、 <bpt id="p1">[</bpt>RaiseEvent ステートメント<ept id="p1">](../../../visual-basic/language-reference/statements/raiseevent-statement.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>To specify event handlers using a declarative way, use the <bpt id="p1">[</bpt>WithEvents<ept id="p1">](../../../visual-basic/language-reference/modifiers/withevents.md)</ept> statement and the <bpt id="p2">[</bpt>Handles<ept id="p2">](../../../visual-basic/language-reference/statements/handles-clause.md)</ept> clause.</source>
          <target state="translated">宣言型の方法を使用してイベント ハンドラーを指定するには、使用、 <bpt id="p1">[</bpt>WithEvents<ept id="p1">](../../../visual-basic/language-reference/modifiers/withevents.md)</ept>ステートメントおよび<bpt id="p2">[</bpt>処理<ept id="p2">](../../../visual-basic/language-reference/statements/handles-clause.md)</ept>句。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>To be able to dynamically add, remove, and change the event handler associated with an event, use the <bpt id="p1">[</bpt>AddHandler Statement<ept id="p1">](../../../visual-basic/language-reference/statements/addhandler-statement.md)</ept> and <bpt id="p2">[</bpt>RemoveHandler Statement<ept id="p2">](../../../visual-basic/language-reference/statements/removehandler-statement.md)</ept> together with the <bpt id="p3">[</bpt>AddressOf Operator<ept id="p3">](../../../visual-basic/language-reference/operators/addressof-operator.md)</ept>.</source>
          <target state="translated">動的に追加、削除、およびイベントに関連付けられているイベント ハンドラーを変更するを使用して、 <bpt id="p1">[</bpt>AddHandler ステートメント<ept id="p1">](../../../visual-basic/language-reference/statements/addhandler-statement.md)</ept>と<bpt id="p2">[</bpt>RemoveHandler ステートメント<ept id="p2">](../../../visual-basic/language-reference/statements/removehandler-statement.md)</ept>と共に、 <bpt id="p3">[</bpt>AddressOf 演算子<ept id="p3">](../../../visual-basic/language-reference/operators/addressof-operator.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="NestedClasses"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Nested Classes</source>
          <target state="translated"><bpt id="p1">&lt;a name="NestedClasses"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>入れ子になったクラス</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>A class defined within another class is called <bpt id="p1">*</bpt>nested<ept id="p1">*</ept>.</source>
          <target state="translated">別のクラス内で定義されたクラスと呼びます<bpt id="p1">*</bpt>入れ子になった<ept id="p1">*</ept>します。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>By default, the nested class is private.</source>
          <target state="translated">既定では、入れ子になったクラスはプライベートです。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>To create an instance of the nested class, use the name of the container class followed by the dot and then followed by the name of the nested class:</source>
          <target state="translated">入れ子になったクラスのインスタンスを作成するには、コンテナー クラスの名前に続けて、ドットと入れ子になったクラスの名前を指定します。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="AccessModifiers"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Access Modifiers and Access Levels</source>
          <target state="translated"><bpt id="p1">&lt;a name="AccessModifiers"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>アクセス修飾子とアクセス レベル</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>All classes and class members can specify what access level they provide to other classes by using <bpt id="p1">*</bpt>access modifiers<ept id="p1">*</ept>.</source>
          <target state="translated">すべてのクラスおよびクラス メンバーを使用して、その他のクラスに提供するアクセス レベルを指定できます<bpt id="p1">*</bpt>アクセス修飾子<ept id="p1">*</ept>します。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The following access modifiers are available:</source>
          <target state="translated">次のアクセス修飾子を使用できます。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Visual Basic Modifier</source>
          <target state="translated">Visual Basic の修飾子</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Definition</source>
          <target state="translated">定義</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Public<ept id="p1">](../../../visual-basic/language-reference/modifiers/public.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Public<ept id="p1">](../../../visual-basic/language-reference/modifiers/public.md)</ept></target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The type or member can be accessed by any other code in the same assembly or another assembly that references it.</source>
          <target state="translated">この型またはメンバーには、同じアセンブリ内の他のコードや、そのアセンブリを参照する別のアセンブリ内の任意のコードからアクセスできます。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Private<ept id="p1">](../../../visual-basic/language-reference/modifiers/private.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Private<ept id="p1">](../../../visual-basic/language-reference/modifiers/private.md)</ept></target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The type or member can only be accessed by code in the same class.</source>
          <target state="translated">この型またはメンバーには、同じクラスのコードのみがアクセスできます。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Protected<ept id="p1">](../../../visual-basic/language-reference/modifiers/protected.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Protected<ept id="p1">](../../../visual-basic/language-reference/modifiers/protected.md)</ept></target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The type or member can only be accessed by code in the same class or in a derived class.</source>
          <target state="translated">この型またはメンバーには、同じクラスまたは派生クラスのコードのみがアクセスできます。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Friend<ept id="p1">](../../../visual-basic/language-reference/modifiers/friend.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Friend<ept id="p1">](../../../visual-basic/language-reference/modifiers/friend.md)</ept></target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The type or member can be accessed by any code in the same assembly, but not from another assembly.</source>
          <target state="translated">この型またはメンバーには、同じアセンブリ内の任意のコードからアクセスできますが、別のアセンブリからはアクセスできません。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The type or member can be accessed by any code in the same assembly, or by any derived class in another assembly.</source>
          <target state="translated">この型またはメンバーには、同じアセンブリ内の任意のコード、または別のアセンブリ内の任意の派生クラスからアクセスできます。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Access Levels in Visual Basic<ept id="p1">](../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。 <bpt id="p1">[</bpt>Visual Basic でのアクセス レベル<ept id="p1">](../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="InstantiatingClasses"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Instantiating Classes</source>
          <target state="translated"><bpt id="p1">&lt;a name="InstantiatingClasses"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>クラスをインスタンス化します。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>To create an object, you need to instantiate a class, or create a class instance.</source>
          <target state="translated">オブジェクトを作成するには、クラスをインスタンス化する (クラスのインスタンスを作成する) 必要があります。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>After instantiating a class, you can assign values to the instance's properties and fields and invoke class methods.</source>
          <target state="translated">クラスをインスタンス化した後は、インスタンスのプロパティやフィールドに値を割り当てたり、クラスのメソッドを呼び出したりできます。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>To assign values to properties during the class instantiation process, use object initializers:</source>
          <target state="translated">クラスのインスタンス化のプロセスでプロパティに値を割り当てるには、オブジェクト初期化子を使用します。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>For more information, see:</source>
          <target state="translated">詳細については次を参照してください:</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>New Operator<ept id="p1">](../../../visual-basic/language-reference/operators/new-operator.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>New 演算子<ept id="p1">](../../../visual-basic/language-reference/operators/new-operator.md)</ept></target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Object Initializers: Named and Anonymous Types<ept id="p1">](../../../visual-basic/programming-guide/language-features/objects-and-classes/object-initializers-named-and-anonymous-types.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>オブジェクト初期化子 : 名前付きの型と匿名型<ept id="p1">](../../../visual-basic/programming-guide/language-features/objects-and-classes/object-initializers-named-and-anonymous-types.md)</ept></target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="Static"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Shared Classes and Members</source>
          <target state="translated"><bpt id="p1">&lt;a name="Static"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>共有クラスおよびメンバー</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>A shared member of the class is a property, procedure, or field that is shared by all instances of a class.</source>
          <target state="translated">クラスの共有メンバーは、プロパティ、プロシージャ、またはクラスのすべてのインスタンスによって共有されているフィールドです。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>To define a shared member:</source>
          <target state="translated">共有メンバーを定義します。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>To access the shared member, use the name of the class without creating an object of this class:</source>
          <target state="translated">共有メンバーにアクセスするには、このクラスのオブジェクトを作成せず、クラスの名前を使用します。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Shared modules in Visual Basic have shared members only and cannot be instantiated.</source>
          <target state="translated">Visual Basic での共有のモジュールは、メンバーのみを共有しており、インスタンス化することはできません。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Shared members also cannot access non-shared properties, fields or methods</source>
          <target state="translated">非共有のプロパティ、フィールド、またはメソッドに、共有メンバーもアクセスできません。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>For more information, see:</source>
          <target state="translated">詳細については次を参照してください:</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Shared<ept id="p1">](../../../visual-basic/language-reference/modifiers/shared.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Shared<ept id="p1">](../../../visual-basic/language-reference/modifiers/shared.md)</ept></target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Module Statement<ept id="p1">](../../../visual-basic/language-reference/statements/module-statement.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Module ステートメント<ept id="p1">](../../../visual-basic/language-reference/statements/module-statement.md)</ept></target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="AnonymousTypes"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Anonymous Types</source>
          <target state="translated"><bpt id="p1">&lt;a name="AnonymousTypes"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>匿名型</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Anonymous types enable you to create objects without writing a class definition for the data type.</source>
          <target state="translated">匿名型を使用すると、データ型のクラス定義を記述せずにオブジェクトを作成できます。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Instead, the compiler generates a class for you.</source>
          <target state="translated">クラスは、コンパイラによって生成されます。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The class has no usable name and contains the properties you specify in declaring the object.</source>
          <target state="translated">このクラスには使用可能な名前がなく、オブジェクトの宣言時に指定したプロパティが格納されます。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>To create an instance of an anonymous type:</source>
          <target state="translated">匿名型のインスタンスを作成するコード例を次に示します。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>For more information, see: <bpt id="p1">[</bpt>Anonymous Types<ept id="p1">](../../../visual-basic/programming-guide/language-features/objects-and-classes/anonymous-types.md)</ept>.</source>
          <target state="translated">詳細についてを参照してください:<bpt id="p1">[</bpt>匿名型<ept id="p1">](../../../visual-basic/programming-guide/language-features/objects-and-classes/anonymous-types.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="Inheritance"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Inheritance</source>
          <target state="translated"><bpt id="p1">&lt;a name="Inheritance"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>継承</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Inheritance enables you to create a new class that reuses, extends, and modifies the behavior that is defined in another class.</source>
          <target state="translated">継承を使用すると、他のクラスで定義されている動作を再利用、拡張、および変更する新しいクラスを作成できます。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The class whose members are inherited is called the <bpt id="p1">*</bpt>base class<ept id="p1">*</ept>, and the class that inherits those members is called the <bpt id="p2">*</bpt>derived class<ept id="p2">*</ept>.</source>
          <target state="translated">メンバーが継承するクラスが呼び出されます、<bpt id="p1">*</bpt>基本クラス<ept id="p1">*</ept>、メンバーを継承するクラスを呼び出すと、<bpt id="p2">*</bpt>クラスを派生<ept id="p2">*</ept>します。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>However, all classes in Visual Basic implicitly inherit from the &lt;xref:System.Object&gt; class that supports .NET class hierarchy and provides low-level services to all classes.</source>
          <target state="translated">ただし、Visual Basic のすべてのクラスを暗黙的に継承、 &lt;xref:System.Object&gt;.NET クラスの階層構造をサポートし、すべてのクラスに下位レベルのサービスを提供するクラス&lt;/xref:System.Object&gt;。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Visual Basic doesn't support multiple inheritance.</source>
          <target state="translated">Visual Basic では、多重継承をサポートしていません。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>That is, you can specify only one base class for a derived class.</source>
          <target state="translated">つまり、派生クラスの&amp;1; つだけの基本クラスを指定できます。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>To inherit from a base class:</source>
          <target state="translated">基底クラスを継承するコード例を次に示します。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>By default all classes can be inherited.</source>
          <target state="translated">既定では、すべてのクラスが継承可能になります。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>However, you can specify whether a class must not be used as a base class, or create a class that can be used as a base class only.</source>
          <target state="translated">ただし、クラスを基底クラスとして使用できないように指定したり、基底クラスとしてのみ使用できるクラスを作成したりできます。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>To specify that a class cannot be used as a base class:</source>
          <target state="translated">クラスを基底クラスとして使用できないように指定する方法を次に示します。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>To specify that a class can be used as a base class only and cannot be instantiated:</source>
          <target state="translated">クラスが基底クラスとしてのみ使用され、インスタンス化できないように指定する方法を次に示します。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>For more information, see:</source>
          <target state="translated">詳細については次を参照してください:</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Inherits Statement<ept id="p1">](../../../visual-basic/language-reference/statements/inherits-statement.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Inherits ステートメント<ept id="p1">](../../../visual-basic/language-reference/statements/inherits-statement.md)</ept></target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>NotInheritable<ept id="p1">](../../../visual-basic/language-reference/modifiers/notinheritable.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>NotInheritable<ept id="p1">](../../../visual-basic/language-reference/modifiers/notinheritable.md)</ept></target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>MustInherit<ept id="p1">](../../../visual-basic/language-reference/modifiers/mustinherit.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>MustInherit<ept id="p1">](../../../visual-basic/language-reference/modifiers/mustinherit.md)</ept></target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="Overriding"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Overriding Members</source>
          <target state="translated"><bpt id="p1">&lt;a name="Overriding"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>メンバーをオーバーライドします。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>By default, a derived class inherits all members from its base class.</source>
          <target state="translated">既定では、派生クラスは基底クラスのすべてのメンバーを継承します。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>If you want to change the behavior of the inherited member, you need to override it.</source>
          <target state="translated">継承したメンバーの動作を変更する場合は、そのメンバーをオーバーライドする必要があります。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>That is, you can define a new implementation of the method, property or event in the derived class.</source>
          <target state="translated">つまり、派生クラスに、メソッド、プロパティ、またはイベントの新しい実装を定義できます。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>The following modifiers are used to control how properties and methods are overridden:</source>
          <target state="translated">プロパティやメソッドのオーバーライド方法を制御するには、次の修飾子を使用します。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Visual Basic Modifier</source>
          <target state="translated">Visual Basic の修飾子</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Definition</source>
          <target state="translated">定義</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Overridable<ept id="p1">](../../../visual-basic/language-reference/modifiers/overridable.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Overridable<ept id="p1">](../../../visual-basic/language-reference/modifiers/overridable.md)</ept></target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Allows a class member to be overridden in a derived class.</source>
          <target state="translated">派生クラスでのクラス メンバーのオーバーライドを許可します。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Overrides<ept id="p1">](../../../visual-basic/language-reference/modifiers/overrides.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Overrides<ept id="p1">](../../../visual-basic/language-reference/modifiers/overrides.md)</ept></target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Overrides a virtual (overridable) member defined in the base class.</source>
          <target state="translated">基底クラスで定義されている仮想メンバー (オーバーライドできるメンバー) をオーバーライドします。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>NotOverridable<ept id="p1">](../../../visual-basic/language-reference/modifiers/notoverridable.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>NotOverridable<ept id="p1">](../../../visual-basic/language-reference/modifiers/notoverridable.md)</ept></target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Prevents a member from being overridden in an inheriting class.</source>
          <target state="translated">継承するクラスでのメンバーのオーバーライドを禁止します。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>MustOverride<ept id="p1">](../../../visual-basic/language-reference/modifiers/mustoverride.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>MustOverride<ept id="p1">](../../../visual-basic/language-reference/modifiers/mustoverride.md)</ept></target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Requires that a class member to be overridden in the derived class.</source>
          <target state="translated">派生クラスでのクラス メンバーのオーバーライドを必須にします。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Shadows<ept id="p1">](../../../visual-basic/language-reference/modifiers/shadows.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Shadows<ept id="p1">](../../../visual-basic/language-reference/modifiers/shadows.md)</ept></target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Hides a member inherited from a base class</source>
          <target state="translated">基底クラスから継承されたメンバーを隠ぺいします。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="Interfaces"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Interfaces</source>
          <target state="translated"><bpt id="p1">&lt;a name="Interfaces"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>インターフェイス</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Interfaces, like classes, define a set of properties, methods, and events.</source>
          <target state="translated">インターフェイスは、クラスと同様にプロパティ、メソッド、およびイベントのセットを定義します。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>But unlike classes, interfaces do not provide implementation.</source>
          <target state="translated">ただし、クラスとは異なり、インターフェイスは実装を提供しません。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>They are implemented by classes, and defined as separate entities from classes.</source>
          <target state="translated">インターフェイスはクラスによって実装され、クラスとは別のエンティティとして定義されます。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>An interface represents a contract, in that a class that implements an interface must implement every aspect of that interface exactly as it is defined.</source>
          <target state="translated">インターフェイスを実装するクラスは、そのインターフェイスのあらゆる機能を定義に従って厳密に実装する必要があります。この点で、インターフェイスはコントラクトを表しています。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>To define an interface:</source>
          <target state="translated">インターフェイスを定義するコード例を次に示します。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>To implement an interface in a class:</source>
          <target state="translated">クラスにインターフェイスを実装するコード例を次に示します。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>For more information, see:</source>
          <target state="translated">詳細については次を参照してください:</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Interfaces<ept id="p1">](../../../visual-basic/programming-guide/language-features/interfaces/index.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>インターフェイス<ept id="p1">](../../../visual-basic/programming-guide/language-features/interfaces/index.md)</ept></target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Interface Statement<ept id="p1">](../../../visual-basic/language-reference/statements/interface-statement.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Interface ステートメント<ept id="p1">](../../../visual-basic/language-reference/statements/interface-statement.md)</ept></target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Implements Statement<ept id="p1">](../../../visual-basic/language-reference/statements/implements-statement.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Implements ステートメント<ept id="p1">](../../../visual-basic/language-reference/statements/implements-statement.md)</ept></target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="Generics"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Generics</source>
          <target state="translated"><bpt id="p1">&lt;a name="Generics"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>ジェネリック</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Classes, structures, interfaces and methods in the .NET Framework can include <bpt id="p1">*</bpt>type parameters<ept id="p1">*</ept> that define types of objects that they can store or use.</source>
          <target state="translated">クラス、構造体、インターフェイスおよび .NET Framework のメソッドを含めることができます<bpt id="p1">*</bpt>パラメーター入力<ept id="p1">*</ept>格納または使用できるオブジェクトの種類を定義します。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>The most common example of generics is a collection, where you can specify the type of objects to be stored in a collection.</source>
          <target state="translated">ジェネリックの最も一般的な例として、コレクションがあります。コレクションには、その中に格納されるオブジェクトの型を指定できます。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>To define a generic class:</source>
          <target state="translated">ジェネリック クラスを定義するコード例を次に示します。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>To create an instance of a generic class:</source>
          <target state="translated">ジェネリック クラスのインスタンスを作成するコード例を次に示します。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>For more information, see:</source>
          <target state="translated">詳細については次を参照してください:</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Generics<ept id="p1">](https://msdn.microsoft.com/library/ms172192)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>ジェネリック<ept id="p1">](https://msdn.microsoft.com/library/ms172192)</ept></target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Generic Types in Visual Basic<ept id="p1">](../../../visual-basic/programming-guide/language-features/data-types/generic-types.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Visual Basic におけるジェネリック型<ept id="p1">](../../../visual-basic/programming-guide/language-features/data-types/generic-types.md)</ept></target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="Delegates"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Delegates</source>
          <target state="translated"><bpt id="p1">&lt;a name="Delegates"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>デリゲート</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>delegate<ept id="p1">*</ept> is a type that defines a method signature, and can provide a reference to any method with a compatible signature.</source>
          <target state="translated">A<bpt id="p1">*</bpt>委任<ept id="p1">*</ept>メソッドのシグネチャを定義する型は、互換性のあるシグネチャを持つ任意のメソッドへの参照を提供することができます。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>You can invoke (or call) the method through the delegate.</source>
          <target state="translated">メソッドは、デリゲートを使用して起動する (呼び出す) ことができます。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Delegates are used to pass methods as arguments to other methods.</source>
          <target state="translated">デリゲートは、他のメソッドへの引数としてメソッドを渡すために使用されます。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Event handlers are nothing more than methods that are invoked through delegates.</source>
          <target state="translated">イベント ハンドラーは、デリゲートを介して呼び出されるメソッドにすぎません。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>For more information about using delegates in event handling, see <bpt id="p1">[</bpt>Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
          <target state="translated">イベント処理でデリゲートを使用する方法の詳細については、次を参照してください。<bpt id="p1">[</bpt>イベント<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>です。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>To create a delegate:</source>
          <target state="translated">デリゲートを作成するコード例を次に示します。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>To create a reference to a method that matches the signature specified by the delegate:</source>
          <target state="translated">デリゲートで指定されたシグネチャに一致するメソッドへの参照を作成するコード例を次に示します。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>For more information, see:</source>
          <target state="translated">詳細については次を参照してください:</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Delegates<ept id="p1">](../../../visual-basic/programming-guide/language-features/delegates/index.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>デリゲート<ept id="p1">](../../../visual-basic/programming-guide/language-features/delegates/index.md)</ept></target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Delegate Statement<ept id="p1">](../../../visual-basic/language-reference/statements/delegate-statement.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Delegate ステートメント<ept id="p1">](../../../visual-basic/language-reference/statements/delegate-statement.md)</ept></target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>AddressOf Operator<ept id="p1">](../../../visual-basic/language-reference/operators/addressof-operator.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>AddressOf 演算子<ept id="p1">](../../../visual-basic/language-reference/operators/addressof-operator.md)</ept></target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">関連項目</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Visual Basic Programming Guide<ept id="p1">](../../../visual-basic/programming-guide/index.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Visual Basic のプログラミング ガイド<ept id="p1">](../../../visual-basic/programming-guide/index.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>