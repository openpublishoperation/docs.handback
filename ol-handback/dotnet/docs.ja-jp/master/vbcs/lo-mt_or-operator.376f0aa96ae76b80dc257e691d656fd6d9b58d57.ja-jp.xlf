<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f3f6c013df6cd5c3b99e465bdc8bb0b4ead6bdf4</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\language-reference\operators\or-operator.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7f88203eda8280251783c0b2949104adf8fe1607</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7cb0c73fd5f46973c5c461fb360a6df2a63e3070</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Or Operator (Visual Basic) | Microsoft Docs</source>
          <target state="translated">Or 演算子 (Visual Basic) |Microsoft ドキュメント</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Or Operator (Visual Basic)</source>
          <target state="translated">Or 演算子 (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Performs a logical disjunction on two <ph id="ph1">`Boolean`</ph> expressions, or a bitwise disjunction on two numeric expressions.</source>
          <target state="translated">2 つの論理和を実行<ph id="ph1">`Boolean`</ph>式、または&amp;2; つの数値式に対してビット単位の論理和。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
          <target state="translated">構文</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parts</source>
          <target state="translated">指定項目</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Required.</source>
          <target state="translated">必須です。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Any <ph id="ph1">`Boolean`</ph> or numeric expression.</source>
          <target state="translated">どの<ph id="ph1">`Boolean`</ph>または数値式です。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For <ph id="ph1">`Boolean`</ph> comparison, <ph id="ph2">`result`</ph> is the inclusive logical disjunction of two <ph id="ph3">`Boolean`</ph> values.</source>
          <target state="translated"><ph id="ph1">`Boolean`</ph>比較については、<ph id="ph2">`result`</ph>は&amp;2; つの包括的論理和<ph id="ph3">`Boolean`</ph>値。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For bitwise operations, <ph id="ph1">`result`</ph> is a numeric value representing the inclusive bitwise disjunction of two numeric bit patterns.</source>
          <target state="translated">ビットごとの演算<ph id="ph1">`result`</ph>は&amp;2; つの数値のビット パターンの包括的論理和を表す数値を指定します。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Required.</source>
          <target state="translated">必須です。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Any <ph id="ph1">`Boolean`</ph> or numeric expression.</source>
          <target state="translated">どの<ph id="ph1">`Boolean`</ph>または数値式です。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Required.</source>
          <target state="translated">必須です。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Any <ph id="ph1">`Boolean`</ph> or numeric expression.</source>
          <target state="translated">どの<ph id="ph1">`Boolean`</ph>または数値式です。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Remarks</source>
          <target state="translated">コメント</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For <ph id="ph1">`Boolean`</ph> comparison, <ph id="ph2">`result`</ph> is <ph id="ph3">`False`</ph> if and only if both <ph id="ph4">`expression1`</ph> and <ph id="ph5">`expression2`</ph> evaluate to <ph id="ph6">`False`</ph>.</source>
          <target state="translated"><ph id="ph1">`Boolean`</ph>比較については、<ph id="ph2">`result`</ph>は<ph id="ph3">`False`</ph>場合にのみ、両方<ph id="ph4">`expression1`</ph>と<ph id="ph5">`expression2`</ph>に評価される<ph id="ph6">`False`</ph>します。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The following table illustrates how <ph id="ph1">`result`</ph> is determined.</source>
          <target state="translated">次の表に示す方法<ph id="ph1">`result`</ph>決定されます。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`expression1`</ph> is</source>
          <target state="translated">If <ph id="ph1">`expression1`</ph> is</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>And <ph id="ph1">`expression2`</ph> is</source>
          <target state="translated"><ph id="ph1">`expression2`</ph>は</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The value of <ph id="ph1">`result`</ph> is</source>
          <target state="translated">値<ph id="ph1">`result`</ph>は</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In a <ph id="ph1">`Boolean`</ph> comparison, the <ph id="ph2">`Or`</ph> operator always evaluates both expressions, which could include making procedure calls.</source>
          <target state="translated"><ph id="ph1">`Boolean`</ph> 、比較、<ph id="ph2">`Or`</ph>演算子では、両方の式では、プロシージャの呼び出しを含めることが常に評価されます。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>OrElse Operator<ept id="p1">](../../../visual-basic/language-reference/operators/orelse-operator.md)</ept> performs <bpt id="p2">*</bpt>short-circuiting<ept id="p2">*</ept>, which means that if <ph id="ph1">`expression1`</ph> is <ph id="ph2">`True`</ph>, then <ph id="ph3">`expression2`</ph> is not evaluated.</source>
          <target state="translated"><bpt id="p1">[</bpt>OrElse 演算子<ept id="p1">](../../../visual-basic/language-reference/operators/orelse-operator.md)</ept>実行<bpt id="p2">*</bpt>ショート サーキット<ept id="p2">*</ept>、いる場合は<ph id="ph1">`expression1`</ph>は<ph id="ph2">`True`</ph>、し<ph id="ph3">`expression2`</ph>は評価されません。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For bitwise operations, the <ph id="ph1">`Or`</ph> operator performs a bitwise comparison of identically positioned bits in two numeric expressions and sets the corresponding bit in <ph id="ph2">`result`</ph> according to the following table.</source>
          <target state="translated">ビットごとの演算、<ph id="ph1">`Or`</ph>演算子が&amp;2; つの数値式の同じ位置にビットのビットごとの比較を実行し、対応するでビットを設定<ph id="ph2">`result`</ph>次の表に従ってします。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If bit in <ph id="ph1">`expression1`</ph> is</source>
          <target state="translated">場合にビット<ph id="ph1">`expression1`</ph>は</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>And bit in <ph id="ph1">`expression2`</ph> is</source>
          <target state="translated">でビット<ph id="ph1">`expression2`</ph>は</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The bit in <ph id="ph1">`result`</ph> is</source>
          <target state="translated">内のビット<ph id="ph1">`result`</ph>は</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>1</source>
          <target state="translated">1</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>1</source>
          <target state="translated">1</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>1</source>
          <target state="translated">1</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>1</source>
          <target state="translated">1</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>0</source>
          <target state="translated">0</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>1</source>
          <target state="translated">1</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>0</source>
          <target state="translated">0</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>1</source>
          <target state="translated">1</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>1</source>
          <target state="translated">1</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>0</source>
          <target state="translated">0</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>0</source>
          <target state="translated">0</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>0</source>
          <target state="translated">0</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Since the logical and bitwise operators have a lower precedence than other arithmetic and relational operators, any bitwise operations should be enclosed in parentheses to ensure accurate execution.</source>
          <target state="translated">論理/ビット処理演算子は、他の算術演算子や関係演算子より優先順位が低いため、ビットごとの演算を正確に実行されるようにかっこで囲む必要があります。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Data Types</source>
          <target state="translated">データ型</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If the operands consist of one <ph id="ph1">`Boolean`</ph> expression and one numeric expression, Visual Basic converts the <ph id="ph2">`Boolean`</ph> expression to a numeric value (–1 for <ph id="ph3">`True`</ph> and 0 for <ph id="ph4">`False`</ph>) and performs a bitwise operation.</source>
          <target state="translated">1 つのオペランドで構成される場合<ph id="ph1">`Boolean`</ph>式と 1 つの数値式では、Visual Basic に変換します、<ph id="ph2">`Boolean`</ph>数値を指定する式 (– 1<ph id="ph3">`True`</ph>および 0 を<ph id="ph4">`False`</ph>) し、ビットごとの演算を実行します。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For a <ph id="ph1">`Boolean`</ph> comparison, the data type of the result is <ph id="ph2">`Boolean`</ph>.</source>
          <target state="translated"><ph id="ph1">`Boolean`</ph>比較については、結果のデータ型は<ph id="ph2">`Boolean`</ph>です。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>For a bitwise comparison, the result data type is a numeric type appropriate for the data types of <ph id="ph1">`expression1`</ph> and <ph id="ph2">`expression2`</ph>.</source>
          <target state="translated">ビットごとの比較結果のデータ型は、数値型のデータ型に適した<ph id="ph1">`expression1`</ph>と<ph id="ph2">`expression2`</ph>です。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>See the "Relational and Bitwise Comparisons" table in <bpt id="p1">[</bpt>Data Types of Operator Results<ept id="p1">](../../../visual-basic/language-reference/operators/data-types-of-operator-results.md)</ept>.</source>
          <target state="translated">「リレーショナルとビットごとの比較」表を参照して<bpt id="p1">[</bpt>データ型の演算子の結果<ept id="p1">](../../../visual-basic/language-reference/operators/data-types-of-operator-results.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Overloading</source>
          <target state="translated">オーバーロード</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Or`</ph> operator can be <bpt id="p1">*</bpt>overloaded<ept id="p1">*</ept>, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure.</source>
          <target state="translated"><ph id="ph1">`Or`</ph>演算子を指定できます<bpt id="p1">*</bpt>オーバー ロードされた<ept id="p1">*</ept>、つまり、クラスまたは構造体を再定義できます動作オペランドは、そのクラスまたは構造体の型を持つ場合です。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>If your code uses this operator on such a class or structure, be sure you understand its redefined behavior.</source>
          <target state="translated">コードは、このようなクラスまたは構造体で、この演算子を使用する場合は、再定義される動作を確認ください。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Operator Procedures<ept id="p1">](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>演算子プロシージャ<ept id="p1">](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">例</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The following example uses the <ph id="ph1">`Or`</ph> operator to perform an inclusive logical disjunction on two expressions.</source>
          <target state="translated">次の例では、<ph id="ph1">`Or`</ph>オペレーターが&amp;2; つの式の包括的論理和を実行します。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The result is a <ph id="ph1">`Boolean`</ph> value that represents whether either of the two expressions is <ph id="ph2">`True`</ph>.</source>
          <target state="translated">結果は、<ph id="ph1">`Boolean`</ph>を表す値が&amp;2; つの式のいずれかのかどうか<ph id="ph2">`True`</ph>します。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrOperators#35<ept id="p2">](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/or-operator_1.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrOperators&amp;#35;<ept id="p2">](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/or-operator_1.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The preceding example produces results of <ph id="ph1">`True`</ph>, <ph id="ph2">`True`</ph>, and <ph id="ph3">`False`</ph>, respectively.</source>
          <target state="translated">前の例の結果を生成する<ph id="ph1">`True`</ph>、 <ph id="ph2">`True`</ph>、および<ph id="ph3">`False`</ph>、それぞれします。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">例</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The following example uses the <ph id="ph1">`Or`</ph> operator to perform inclusive logical disjunction on the individual bits of two numeric expressions.</source>
          <target state="translated">次の例では、<ph id="ph1">`Or`</ph>オペレーターが&amp;2; つの数値式のビットごとの包括的論理和を実行します。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The bit in the result pattern is set if either of the corresponding bits in the operands is set to 1.</source>
          <target state="translated">結果パターン内のビットは、オペランドの対応するビットのいずれか 1 に設定されている場合に設定されます。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrOperators#36<ept id="p2">](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/or-operator_2.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrOperators&amp;#36;<ept id="p2">](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/or-operator_2.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The preceding example produces results of 10, 14, and 14, respectively.</source>
          <target state="translated">前の例では、それぞれ 10、14 日、14 の結果を生成します。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">関連項目</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Logical/Bitwise Operators (Visual Basic)<ept id="p1">](../../../visual-basic/language-reference/operators/logical-bitwise-operators.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>論理/ビット演算子 (Visual Basic)<ept id="p1">](../../../visual-basic/language-reference/operators/logical-bitwise-operators.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Operator Precedence in Visual Basic<ept id="p1">](../../../visual-basic/language-reference/operators/operator-precedence.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Visual Basic の演算子の優先順位<ept id="p1">](../../../visual-basic/language-reference/operators/operator-precedence.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Operators Listed by Functionality<ept id="p1">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>機能別の演算子一覧<ept id="p1">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>OrElse Operator<ept id="p1">](../../../visual-basic/language-reference/operators/orelse-operator.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>OrElse 演算子<ept id="p1">](../../../visual-basic/language-reference/operators/orelse-operator.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Logical and Bitwise Operators in Visual Basic<ept id="p1">](../../../visual-basic/programming-guide/language-features/operators-and-expressions/logical-and-bitwise-operators.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>Visual Basic での論理/ビット処理演算子<ept id="p1">](../../../visual-basic/programming-guide/language-features/operators-and-expressions/logical-and-bitwise-operators.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>