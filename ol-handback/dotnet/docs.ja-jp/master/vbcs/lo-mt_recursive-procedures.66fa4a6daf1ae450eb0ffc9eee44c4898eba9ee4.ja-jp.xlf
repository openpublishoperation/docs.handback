<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9fc95cd5f7cfd5637f6282c6ef571eb81bac1816</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\procedures\recursive-procedures.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fe08d283738dba319fbbebb24b7abc69c04266ca</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5eebabfe97fe54a0d78f3b3ed4a8dafad0bbb24b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Recursive Procedures (Visual Basic) | Microsoft Docs</source>
          <target state="translated">再帰プロシージャ (Visual Basic) |Microsoft ドキュメント</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Recursive Procedures (Visual Basic)</source>
          <target state="translated">再帰プロシージャ (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>recursive<ept id="p1">*</ept> procedure is one that calls itself.</source>
          <target state="translated">A<bpt id="p1">*</bpt>再帰<ept id="p1">*</ept>手順は、自分自身を呼び出します。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In general, this is not the most effective way to write <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> code.</source>
          <target state="translated">一般に、これは最も効果的な方法を記述する<ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>コードです。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The following procedure uses recursion to calculate the factorial of its original argument.</source>
          <target state="translated">次の手順では、再帰を使用して、元の引数の階乗を計算します。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnProcedures#51<ept id="p2">](./codesnippet/VisualBasic/recursive-procedures_1.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnProcedures&amp;51;<ept id="p2">](./codesnippet/VisualBasic/recursive-procedures_1.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Considerations with Recursive Procedures</source>
          <target state="translated">再帰プロシージャに関する考慮事項</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Limiting Conditions<ept id="p1">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>制限条件<ept id="p1">**</ept>します。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You must design a recursive procedure to test for at least one condition that can terminate the recursion, and you must also handle the case where no such condition is satisfied within a reasonable number of recursive calls.</source>
          <target state="translated">再帰を終了するには、少なくとも&amp;1; つの条件をテストする再帰的な手順を設計する必要があり、再帰呼び出しの適切な数値の中でこのような条件が満たされるないケースを行う必要があります。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Without at least one condition that can be met without fail, your procedure runs a high risk of executing in an infinite loop.</source>
          <target state="translated">失敗せずに満たすことのできる、少なくとも&amp;1; つの条件がない、プロシージャは、無限ループで実行するリスクが高くを実行します。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Memory Usage<ept id="p1">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>メモリ使用量<ept id="p1">**</ept>します。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Your application has a limited amount of space for local variables.</source>
          <target state="translated">アプリケーションでは、ローカル変数の領域量が制限を持ちます。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Each time a procedure calls itself, it uses more of that space for additional copies of its local variables.</source>
          <target state="translated">プロシージャが自分自身を呼び出すたびに、ローカル変数の追加のコピーの領域を使用します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If this process continues indefinitely, it eventually causes a &lt;xref:System.StackOverflowException&gt; error.</source>
          <target state="translated">最終的と、この処理がいつまでも続く場合、&lt;xref:System.StackOverflowException&gt;エラー&lt;/xref:System.StackOverflowException&gt; 。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Efficiency<ept id="p1">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>効率性<ept id="p1">**</ept>します。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You can almost always substitute a loop for recursion.</source>
          <target state="translated">ほとんどの場合、再帰はループを置換できます。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>A loop does not have the overhead of passing arguments, initializing additional storage, and returning values.</source>
          <target state="translated">ループには、引数の受け渡し、追加のストレージを初期化し、値を返すのオーバーヘッドはありません。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Your performance can be much better without recursive calls.</source>
          <target state="translated">パフォーマンスは、再帰呼び出しなしの方があります。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Mutual Recursion<ept id="p1">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>相互再帰<ept id="p1">**</ept>します。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You might observe very poor performance, or even an infinite loop, if two procedures call each other.</source>
          <target state="translated">2 つの手順では、互いを呼び出す場合は、パフォーマンスが大きく低下または無限ループではあってを監視することがあります。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Such a design presents the same problems as a single recursive procedure, but can be harder to detect and debug.</source>
          <target state="translated">このような設計は、1 つの再帰プロシージャと同じ問題を提示しますが、検出およびデバッグが困難になることができます。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Calling with Parentheses<ept id="p1">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>かっこを使った呼び出し<ept id="p1">**</ept>します。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>When a <ph id="ph1">`Function`</ph> procedure calls itself recursively, you must follow the procedure name with parentheses, even if there is no argument list.</source>
          <target state="translated">ときに、<ph id="ph1">`Function`</ph>プロシージャを呼び出す再帰的に、引数リストがない場合でも、かっこを付けて、プロシージャ名を従う必要があります。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Otherwise, the function name is taken as representing the return value of the function.</source>
          <target state="translated">関数名を取得する場合は、関数の戻り値を表しているとします。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Testing<ept id="p1">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>テスト<ept id="p1">**</ept>します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If you write a recursive procedure, you should test it very carefully to make sure it always meets some limiting condition.</source>
          <target state="translated">再帰プロシージャを記述する場合に、非常に慎重に常にいくつかの制限の条件を満たしているかどうかを確認するテスト必要があります。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>You should also ensure that you cannot run out of memory due to having too many recursive calls.</source>
          <target state="translated">多すぎるの再帰呼び出しのためのメモリ不足が実行できないということを確認する必要があります。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">関連項目</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.StackOverflowException&gt;</source>
          <target state="translated">&lt;xref:System.StackOverflowException&gt;&lt;/xref:System.StackOverflowException&gt;</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Procedures<ept id="p1">](./index.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>手順<ept id="p1">](./index.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Sub Procedures<ept id="p1">](./sub-procedures.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Sub プロシージャ<ept id="p1">](./sub-procedures.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Function Procedures<ept id="p1">](./function-procedures.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Function プロシージャ<ept id="p1">](./function-procedures.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Property Procedures<ept id="p1">](./property-procedures.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>プロパティ プロシージャ<ept id="p1">](./property-procedures.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Operator Procedures<ept id="p1">](./operator-procedures.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>演算子プロシージャ<ept id="p1">](./operator-procedures.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Procedure Parameters and Arguments<ept id="p1">](./procedure-parameters-and-arguments.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>プロシージャのパラメーターと引数<ept id="p1">](./procedure-parameters-and-arguments.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Procedure Overloading<ept id="p1">](./procedure-overloading.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>プロシージャのオーバー ロード<ept id="p1">](./procedure-overloading.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Troubleshooting Procedures<ept id="p1">](./troubleshooting-procedures.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>トラブルシューティングの手順<ept id="p1">](./troubleshooting-procedures.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Loop Structures<ept id="p1">](../../../../visual-basic/programming-guide/language-features/control-flow/loop-structures.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>ループ構造<ept id="p1">](../../../../visual-basic/programming-guide/language-features/control-flow/loop-structures.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Troubleshooting Exceptions: System.StackOverflowException<ept id="p1">](http://msdn.microsoft.com/library/51b71217-c507-4f5b-bc35-0236180d7968)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>例外のトラブルシューティング : System.StackOverflowException<ept id="p1">](http://msdn.microsoft.com/library/51b71217-c507-4f5b-bc35-0236180d7968)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>