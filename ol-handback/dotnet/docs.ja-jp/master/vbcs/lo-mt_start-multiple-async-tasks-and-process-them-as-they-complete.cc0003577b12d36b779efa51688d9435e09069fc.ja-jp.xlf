<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6fbf4611ecd64abfd016963dff887d82aad333b7</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\async\start-multiple-async-tasks-and-process-them-as-they-complete.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dd0170ae283ca0c8cb8551e1d4ba91059e67f3f9</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">781fd99b94b88117e51f3fb19fc94e7ab2b2d29c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Start Multiple Async Tasks and Process Them As They Complete (Visual Basic) | Microsoft Docs</source>
          <target state="translated">複数の同期タスクし、プロセスの完了 (Visual Basic) |Microsoft ドキュメント</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Start Multiple Async Tasks and Process Them As They Complete (Visual Basic)</source>
          <target state="translated">複数の同期タスクし、プロセスの完了 (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>By using &lt;xref:System.Threading.Tasks.Task.WhenAny%2A?displayProperty=fullName&gt;, you can start multiple tasks at the same time and process them one by one as they’re completed rather than process them in the order in which they're started.</source>
          <target state="translated">使用して&lt;xref:System.Threading.Tasks.Task.WhenAny%2A?displayProperty=fullName&gt;、同時に複数のタスクを開始し、起動している順序で処理するのではなく、完了すると、1 つずつを処理することができます&lt;/xref:System.Threading.Tasks.Task.WhenAny%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The following example uses a query to create a collection of tasks.</source>
          <target state="translated">クエリを使用して、タスクのコレクションを作成する例を次に示します。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Each task downloads the contents of a specified website.</source>
          <target state="translated">各タスクは、指定された Web サイトのコンテンツをダウンロードします。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>In each iteration of a while loop, an awaited call to <ph id="ph1">`WhenAny`</ph> returns the task in the collection of tasks that finishes its download first.</source>
          <target state="translated">while ループの各反復で、待機されている <ph id="ph1">`WhenAny`</ph> への呼び出しは、最初にダウンロードを終了するタスクのコレクションにあるタスクを返します。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>That task is removed from the collection and processed.</source>
          <target state="translated">タスクはコレクションから削除され、処理されます。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The loop repeats until the collection contains no more tasks.</source>
          <target state="translated">ループは、コレクションのタスクがなくなるまで繰り返されます。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>To run the examples, you must have Visual Studio 2012 or newer and  the .NET Framework 4.5 or newer installed on your computer.</source>
          <target state="translated">例を実行するには、Visual Studio 2012 以降と .NET Framework 4.5 が必要または以降のコンピューターにインストールします。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Downloading the Example</source>
          <target state="translated">例をダウンロードする</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You can download the complete Windows Presentation Foundation (WPF) project from <bpt id="p1">[</bpt>Async Sample: Fine Tuning Your Application<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=255046)</ept> and then follow these steps.</source>
          <target state="translated">完全な Windows Presentation Foundation (WPF) プロジェクトをダウンロードすることができます<bpt id="p1">[</bpt>Async サンプル: 細かいアプリケーションの調整<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=255046)</ept>し次の手順に従います。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Decompress the file that you downloaded, and then start Visual Studio.</source>
          <target state="translated">ダウンロードしたファイルを圧縮解除し、Visual Studio を起動します。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>On the menu bar, choose <bpt id="p1">**</bpt>File<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Open<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Project/Solution<ept id="p3">**</ept>.</source>
          <target state="translated">メニュー バーで <bpt id="p1">**</bpt>[ファイル]<ept id="p1">**</ept>、 <bpt id="p2">**</bpt>[開く]<ept id="p2">**</ept>、 <bpt id="p3">**</bpt>[プロジェクト/ソリューション]<ept id="p3">**</ept>の順に選択します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Open Project<ept id="p1">**</ept> dialog box, open the folder that holds the sample code that you decompressed, and then open the solution (.sln) file for AsyncFineTuningVB.</source>
          <target state="translated"><bpt id="p1">**</bpt>プロジェクトを開く<ept id="p1">**</ept> ダイアログ ボックスでは、圧縮解除したサンプル コードが含まれるフォルダーを開き、AsyncFineTuningVB のソリューション (.sln) ファイルを開きます。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, open the shortcut menu for the <bpt id="p2">**</bpt>ProcessTasksAsTheyFinish<ept id="p2">**</ept> project, and then choose <bpt id="p3">**</bpt>Set as StartUp Project<ept id="p3">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>ソリューション エクスプ ローラー<ept id="p1">**</ept>、ショートカット メニューを開き、 <bpt id="p2">**</bpt>ProcessTasksAsTheyFinish<ept id="p2">**</ept>プロジェクトを開いて、<bpt id="p3">**</bpt>スタートアップ プロジェクトとして設定<ept id="p3">**</ept>します。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Choose the F5 key to run the project.</source>
          <target state="translated">F5 キーを押してプロジェクトを実行します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Choose the Ctrl+F5 keys to run the project without debugging it.</source>
          <target state="translated">Ctrl + F5 キーを押して、デバッグを行わずにプロジェクトを実行します。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Run the project several times to verify that the downloaded lengths don't always appear in the same order.</source>
          <target state="translated">ダウンロードの長さが常に同じ順序では表示されないことを確認するために、プロジェクトを複数回実行します。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If you don't want to download the project, you can review the MainWindow.xaml.vb file at the end of this topic.</source>
          <target state="translated">プロジェクトをダウンロードできない場合は、このトピックの最後の MainWindow.xaml.vb ファイルを確認できます。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Building the Example</source>
          <target state="translated">例のビルド</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This example adds to the code that’s developed in <bpt id="p1">[</bpt>Cancel Remaining Async Tasks after One Is Complete (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/cancel-remaining-async-tasks-after-one-is-complete.md)</ept> and uses the same UI.</source>
          <target state="translated">この例で開発されたコードを追加<bpt id="p1">[</bpt>1 つの完了 (Visual Basic) の後に残りの非同期タスクのキャンセル<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/cancel-remaining-async-tasks-after-one-is-complete.md)</ept>し、同じ UI を使用します。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>To build the example yourself, step by step, follow the instructions in the "Downloading the Example" section, but choose <bpt id="p1">**</bpt>CancelAfterOneTask<ept id="p1">**</ept> as the <bpt id="p2">**</bpt>StartUp Project<ept id="p2">**</ept>.</source>
          <target state="translated">例をビルドする、自分のステップ バイ ステップ「例をダウンロードする」セクション指示従いますが、選択<bpt id="p1">**</bpt>CancelAfterOneTask<ept id="p1">**</ept>として、<bpt id="p2">**</bpt>スタートアップ プロジェクト<ept id="p2">**</ept>します。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Add the changes in this topic to the <ph id="ph1">`AccessTheWebAsync`</ph> method in that project.</source>
          <target state="translated">そのプロジェクトの <ph id="ph1">`AccessTheWebAsync`</ph> メソッドに、このトピックでの変更を追加します。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The changes are marked with asterisks.</source>
          <target state="translated">変更部分にはアスタリスクが付いています。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>CancelAfterOneTask<ept id="p1">**</ept> project already includes a query that, when executed, creates a collection of tasks.</source>
          <target state="translated"><bpt id="p1">**</bpt>CancelAfterOneTask<ept id="p1">**</ept>プロジェクトに既にクエリが含まれている、実行すると、タスクのコレクションを作成します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Each call to <ph id="ph1">`ProcessURLAsync`</ph> in the following code returns a &lt;xref:System.Threading.Tasks.Task%601&gt; where <ph id="ph2">`TResult`</ph> is an integer.</source>
          <target state="translated">各呼び出し<ph id="ph1">`ProcessURLAsync`</ph>次のコードを返します、 &lt;xref:System.Threading.Tasks.Task%601&gt;、<ph id="ph2">`TResult`</ph>整数です。&lt;/xref:System.Threading.Tasks.Task%601&gt; 。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>0<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>0<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In the MainWindow.xaml.vb file of the  project, make the following changes to the <ph id="ph1">`AccessTheWebAsync`</ph> method.</source>
          <target state="translated">プロジェクトの MainWindow.xaml.vb ファイルで次の変更を<ph id="ph1">`AccessTheWebAsync`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Execute the query by applying &lt;xref:System.Linq.Enumerable.ToList%2A?displayProperty=fullName&gt; instead of &lt;xref:System.Linq.Enumerable.ToArray%2A&gt;.</source>
          <target state="translated">&lt;xref:System.Linq.Enumerable.ToList%2A?displayProperty=fullName&gt; &lt;xref:System.Linq.Enumerable.ToArray%2A&gt;。&lt;/xref:System.Linq.Enumerable.ToArray%2A&gt;の代わりに&lt;/xref:System.Linq.Enumerable.ToList%2A?displayProperty=fullName&gt;適用することで、クエリを実行します。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>1<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>1<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Add a while loop that performs the following steps for each task in the collection.</source>
          <target state="translated">コレクションの各タスクで次の手順を実行する while ループを追加します。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Awaits a call to <ph id="ph1">`WhenAny`</ph> to identify the first task in the collection to finish its download.</source>
          <target state="translated"><ph id="ph1">`WhenAny`</ph> への呼び出しを待機し、ダウンロードを終了する、コレクションの最初のタスクを識別します。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>2<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>2<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Removes that task from the collection.</source>
          <target state="translated">コレクションからそのタスクを削除します。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>3<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>3<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Awaits <ph id="ph1">`firstFinishedTask`</ph>, which is returned by a call to <ph id="ph2">`ProcessURLAsync`</ph>.</source>
          <target state="translated"><ph id="ph1">`firstFinishedTask`</ph> への呼び出しから返される、<ph id="ph2">`ProcessURLAsync`</ph> を待機します。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`firstFinishedTask`</ph> variable is a &lt;xref:System.Threading.Tasks.Task%601&gt; where <ph id="ph2">`TReturn`</ph> is an integer.</source>
          <target state="translated"><ph id="ph1">`firstFinishedTask`</ph>変数は、 &lt;xref:System.Threading.Tasks.Task%601&gt;、<ph id="ph2">`TReturn`</ph>整数です&lt;/xref:System.Threading.Tasks.Task%601&gt;。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The task is already complete, but you await it to retrieve the length of the downloaded website, as the following example shows.</source>
          <target state="translated">次の例に示すように、タスクは既に完了していますが、ダウンロードした Web サイトの長さの取得を待機します。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>You should run the project several times to verify that the downloaded lengths don't always appear in the same order.</source>
          <target state="translated">ダウンロードの長さが常に同じ順序では表示されないことを確認するために、プロジェクトを複数回実行します。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>You can use <ph id="ph1">`WhenAny`</ph> in a loop, as described in the example, to solve problems that involve a small number of tasks.</source>
          <target state="translated">ループで <ph id="ph1">`WhenAny`</ph> を使って、例に示すように、いくつかのタスクを格納する問題を解決できます。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>However, other approaches are more efficient if you have a large number of tasks to process.</source>
          <target state="translated">ただし、多数のタスクが処理する場合、他のアプローチがより効率的です。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>For more information and examples, see <bpt id="p1">[</bpt>Processing Tasks as they complete<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=260810)</ept>.</source>
          <target state="translated">詳細と例については、次を参照してください。<bpt id="p1">[</bpt>としてそれらの完全な処理タスク<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=260810)</ept>します。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Complete Example</source>
          <target state="translated">コード例全体</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The following code is the complete text of the MainWindow.xaml.vb file for the example.</source>
          <target state="translated">次のコードは、たとえば、MainWindow.xaml.vb ファイルの完全なテキストです。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Asterisks mark the elements that were added for this example.</source>
          <target state="translated">アスタリスクはこの例のために追加された要素を示しています。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Notice that you must add a reference for &lt;xref:System.Net.Http&gt;.</source>
          <target state="translated">&lt;xref:System.Net.Http&gt;。&lt;/xref:System.Net.Http&gt;への参照を追加する必要があることに注意してください。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>You can download the project from <bpt id="p1">[</bpt>Async Sample: Fine Tuning Your Application<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=255046)</ept>.</source>
          <target state="translated">プロジェクトをダウンロードする<bpt id="p1">[</bpt>Async サンプル: 細かいアプリケーションの調整<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=255046)</ept>します。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">関連項目</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Threading.Tasks.Task.WhenAny%2A&gt;</source>
          <target state="translated">&lt;xref:System.Threading.Tasks.Task.WhenAny%2A&gt;&lt;/xref:System.Threading.Tasks.Task.WhenAny%2A&gt;</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Fine-Tuning Your Async Application (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/fine-tuning-your-async-application.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>非同期アプリケーション (Visual Basic) の微調整<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/fine-tuning-your-async-application.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Asynchronous Programming with Async and Await (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/index.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>非同期プログラミングを Async と Await (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/index.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Async Sample: Fine Tuning Your Application<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=255046)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>アプリケーションの微調整の非同期のサンプル:<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=255046)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>