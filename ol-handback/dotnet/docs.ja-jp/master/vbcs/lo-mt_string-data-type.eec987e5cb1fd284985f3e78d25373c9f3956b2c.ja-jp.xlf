<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9221a89a1fb46609b4b8550968e3a2bbe874772c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\language-reference\data-types\string-data-type.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a251e581e97d781d5906456b86af619d365f78a2</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04e1aea8ffadc2303c4682a05cede01a48bcd0de</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>String Data Type (Visual Basic) | Microsoft Docs</source>
          <target state="translated">文字列データ型 (Visual Basic) |Microsoft ドキュメント</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>String Data Type (Visual Basic)</source>
          <target state="translated">文字列型 (String) (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Holds sequences of unsigned 16-bit (2-byte) code points that range in value from 0 through 65535.</source>
          <target state="translated">0 ~ 65535 の値の符号なし 16 ビット (2 バイト) コード ポイントのシーケンスの範囲を保持します。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Each <bpt id="p1">*</bpt>code point<ept id="p1">*</ept>, or character code, represents a single Unicode character.</source>
          <target state="translated">各<bpt id="p1">*</bpt>コード ポイントが<ept id="p1">*</ept>、または文字コード&amp;1; つの Unicode 文字を表します。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>A string can contain from 0 to approximately two billion (2 ^ 31) Unicode characters.</source>
          <target state="translated">文字列は、およそ 20億に 0 を含むことができます (2 ^31) の Unicode 文字。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Remarks</source>
          <target state="translated">コメント</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`String`</ph> data type to hold multiple characters without the array management overhead of <ph id="ph2">`Char()`</ph>, an array of <ph id="ph3">`Char`</ph> elements.</source>
          <target state="translated">使用して、<ph id="ph1">`String`</ph>の配列の管理のオーバーヘッドなしに複数の文字を格納するデータ型<ph id="ph2">`Char()`</ph>、配列の<ph id="ph3">`Char`</ph>要素。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The default value of <ph id="ph1">`String`</ph> is <ph id="ph2">`Nothing`</ph> (a null reference).</source>
          <target state="translated">既定値の<ph id="ph1">`String`</ph>は<ph id="ph2">`Nothing`</ph>(null 参照)。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Note that this is not the same as the empty string (value <ph id="ph1">`""`</ph>).</source>
          <target state="translated">これはいない空の文字列と同じ (値<ph id="ph1">`""`</ph>)。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Unicode Characters</source>
          <target state="translated">Unicode 文字</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The first 128 code points (0–127) of Unicode correspond to the letters and symbols on a standard U.S. keyboard.</source>
          <target state="translated">Unicode の最初の 128 個のコード ポイント (0 ~ 127) は、文字および記号の標準的な US キーボード上に対応します。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>These first 128 code points are the same as those the ASCII character set defines.</source>
          <target state="translated">これらの最初の 128 個のコード ポイントでは、ASCII 文字セットの定義と同じです。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The second 128 code points (128–255) represent special characters, such as Latin-based alphabet letters, accents, currency symbols, and fractions.</source>
          <target state="translated">2 番目の 128 個のコード ポイント (128 ~ 255) では、ラテン語系のアルファベット文字、アクセント記号、通貨記号、および分数などの特殊文字を表します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Unicode uses the remaining code points (256-65535) for a wide variety of symbols.</source>
          <target state="translated">Unicode は、さまざまなシンボルを他のコード ポイント (256 ~&amp;65535;) を使用します。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This includes worldwide textual characters, diacritics, and mathematical and technical symbols.</source>
          <target state="translated">これには、文字、分音文字、および数学と技術的な記号が含まれます。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You can use methods such as &lt;xref:System.Char.IsDigit%2A&gt; and &lt;xref:System.Char.IsPunctuation%2A&gt; on an individual character in a <ph id="ph1">`String`</ph> variable to determine its Unicode classification.</source>
          <target state="translated">などのメソッドを使用することができます&lt;xref:System.Char.IsDigit%2A&gt;と&lt;xref:System.Char.IsPunctuation%2A&gt;で個々 の文字で、<ph id="ph1">`String`</ph>変数を Unicode の分類を決定します&lt;/xref:System.Char.IsPunctuation%2A&gt;&lt;/xref:System.Char.IsDigit%2A&gt;。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Format Requirements</source>
          <target state="translated">書式の要件</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You must enclose a <ph id="ph1">`String`</ph> literal within quotation marks (<ph id="ph2">`" "`</ph>).</source>
          <target state="translated">囲む必要があります、<ph id="ph1">`String`</ph>引用符で囲まれたリテラル (<ph id="ph2">`" "`</ph>)。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If you must include a quotation mark as one of the characters in the string, you use two contiguous quotation marks (<ph id="ph1">`""`</ph>).</source>
          <target state="translated">2 つの連続する引用符を使用する場合は、文字列内の文字の&amp;1; つとして、引用符を含める必要があります、(<ph id="ph1">`""`</ph>)。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The following example illustrates this.</source>
          <target state="translated">次に例を示します。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Note that the contiguous quotation marks that represent a quotation mark in the string are independent of the quotation marks that begin and end the <ph id="ph1">`String`</ph> literal.</source>
          <target state="translated">表す文字列の引用符、二重引用符は開始と終了引用符に依存しないことに注意してください、<ph id="ph1">`String`</ph>リテラルです。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>String Manipulations</source>
          <target state="translated">文字列操作</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Once you assign a string to a <ph id="ph1">`String`</ph> variable, that string is <bpt id="p1">*</bpt>immutable<ept id="p1">*</ept>, which means you cannot change its length or contents.</source>
          <target state="translated">文字列を代入すると、<ph id="ph1">`String`</ph>変数、その文字列は<bpt id="p1">*</bpt>不変<ept id="p1">*</ept>長さや内容を変更することができることはできません。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>When you alter a string in any way, Visual Basic creates a new string and abandons the previous one.</source>
          <target state="translated">任意の方法で文字列を変更すると、Visual Basic は新しい文字列を作成し、1 つ前を破棄します。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`String`</ph> variable then points to the new string.</source>
          <target state="translated"><ph id="ph1">`String`</ph>変数をポイントし、新しい文字列。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You can manipulate the contents of a <ph id="ph1">`String`</ph> variable by using a variety of string functions.</source>
          <target state="translated">内容を操作できる、<ph id="ph1">`String`</ph>さまざまな文字列関数を使用して変数です。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The following example illustrates the &lt;xref:Microsoft.VisualBasic.Strings.Left%2A&gt; function</source>
          <target state="translated">次の例は、&lt;xref:Microsoft.VisualBasic.Strings.Left%2A&gt;関数&lt;/xref:Microsoft.VisualBasic.Strings.Left%2A&gt;を示しています。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>A string created by another component might be padded with leading or trailing spaces.</source>
          <target state="translated">別のコンポーネントによって作成される文字列は、先頭または末尾のスペースが埋め込まれている可能性があります。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If you receive such a string, you can use the &lt;xref:Microsoft.VisualBasic.Strings.Trim%2A&gt;, &lt;xref:Microsoft.VisualBasic.Strings.LTrim%2A&gt;, and &lt;xref:Microsoft.VisualBasic.Strings.RTrim%2A&gt; functions to remove these spaces.</source>
          <target state="translated">このような文字列が表示される場合を使用できます、 &lt;xref:Microsoft.VisualBasic.Strings.Trim%2A&gt;、 &lt;xref:Microsoft.VisualBasic.Strings.LTrim%2A&gt;、および&lt;xref:Microsoft.VisualBasic.Strings.RTrim%2A&gt;これらのスペースを削除する関数&lt;/xref:Microsoft.VisualBasic.Strings.RTrim%2A&gt;&lt;/xref:Microsoft.VisualBasic.Strings.LTrim%2A&gt;&lt;/xref:Microsoft.VisualBasic.Strings.Trim%2A&gt;。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For more information about string manipulations, see <bpt id="p1">[</bpt>Strings<ept id="p1">](../../../visual-basic/programming-guide/language-features/strings/index.md)</ept>.</source>
          <target state="translated">文字列操作の詳細については、次を参照してください。<bpt id="p1">[</bpt>文字列<ept id="p1">](../../../visual-basic/programming-guide/language-features/strings/index.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Programming Tips</source>
          <target state="translated">プログラミングのヒント</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Negative Numbers.<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>負の数。<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Remember that the characters held by <ph id="ph1">`String`</ph> are unsigned and cannot represent negative values.</source>
          <target state="translated">文字が保持していることに注意してください<ph id="ph1">`String`</ph>署名されておらず、負の値を表すことはできません。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>In any case, you should not use <ph id="ph1">`String`</ph> to hold numeric values.</source>
          <target state="translated">いずれの場合は、使用しないでください<ph id="ph1">`String`</ph>数値を格納します。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Interop Considerations.<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>相互運用の考慮事項。<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If you are interfacing with components not written for the .NET Framework, for example Automation or COM objects, remember that string characters have a different data width (8 bits) in other environments.</source>
          <target state="translated">オートメーション オブジェクトや COM オブジェクトなど、.NET Framework 用に作成されていないコンポーネントとやり取りする場合、他の環境では文字列の文字の別のデータ幅 (8 ビット) ことに注意してください。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If you are passing a string argument of 8-bit characters to such a component, declare it as <ph id="ph1">`Byte()`</ph>, an array of <ph id="ph2">`Byte`</ph> elements, instead of <ph id="ph3">`String`</ph> in your new Visual Basic code.</source>
          <target state="translated">このようなコンポーネントに 8 ビット文字の文字列引数を渡す場合として宣言<ph id="ph1">`Byte()`</ph>、配列の<ph id="ph2">`Byte`</ph>、要素の代わりに<ph id="ph3">`String`</ph>新しい Visual Basic コードでします。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Type Characters.<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>型宣言文字。<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Appending the identifier type character <ph id="ph1">`$`</ph> to any identifier forces it to the <ph id="ph2">`String`</ph> data type.</source>
          <target state="translated">識別子の型文字を追加する<ph id="ph1">`$`</ph>任意の識別子にリテラルに、<ph id="ph2">`String`</ph>データ型。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`String`</ph> has no literal type character.</source>
          <target state="translated"><ph id="ph1">`String`</ph>リテラルの型文字がありません。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>However, the compiler treats literals enclosed in quotation marks (<ph id="ph1">`" "`</ph>) as <ph id="ph2">`String`</ph>.</source>
          <target state="translated">ただし、コンパイラは、引用符で囲まれたリテラルを扱います (<ph id="ph1">`" "`</ph>) として<ph id="ph2">`String`</ph>します。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Framework Type.<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>Framework のデータ型<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The corresponding type in the .NET Framework is the &lt;xref:System.String?displayProperty=fullName&gt; class.</source>
          <target state="translated">.NET Framework において対応する型が&lt;xref:System.String?displayProperty=fullName&gt;クラスです。&lt;/xref:System.String?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">関連項目</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.String?displayProperty=fullName&gt;</source>
          <target state="translated">&lt;xref:System.String?displayProperty=fullName&gt;&lt;/xref:System.String?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Data Types<ept id="p1">](../../../visual-basic/language-reference/data-types/data-type-summary.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>データ型<ept id="p1">](../../../visual-basic/language-reference/data-types/data-type-summary.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Char Data Type<ept id="p1">](../../../visual-basic/language-reference/data-types/char-data-type.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Char データ型<ept id="p1">](../../../visual-basic/language-reference/data-types/char-data-type.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Type Conversion Functions<ept id="p1">](../../../visual-basic/language-reference/functions/type-conversion-functions.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>型変換関数<ept id="p1">](../../../visual-basic/language-reference/functions/type-conversion-functions.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Conversion Summary<ept id="p1">](../../../visual-basic/language-reference/keywords/conversion-summary.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>変換の概要<ept id="p1">](../../../visual-basic/language-reference/keywords/conversion-summary.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Call a Windows Function that Takes Unsigned Types<ept id="p1">](../../../visual-basic/programming-guide/com-interop/how-to-call-a-windows-function-that-takes-unsigned-types.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>方法: 符号なしの型、Windows 関数を呼び出す<ept id="p1">](../../../visual-basic/programming-guide/com-interop/how-to-call-a-windows-function-that-takes-unsigned-types.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Efficient Use of Data Types<ept id="p1">](../../../visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>データ型の有効な使用方法<ept id="p1">](../../../visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>