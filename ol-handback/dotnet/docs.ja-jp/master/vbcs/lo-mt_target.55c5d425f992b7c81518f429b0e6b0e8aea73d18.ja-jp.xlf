<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ccdb87188b924303057d5867dccece937defe74d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\reference\command-line-compiler\target.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9410af692b0477cf13d7747f0c1f53251f463b76</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">aea18e677c5e98f2b9cb9c87feb45b0e2e1cf678</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>/target (Visual Basic) | Microsoft Docs</source>
          <target state="translated">/target (Visual Basic) |Microsoft ドキュメント</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>/target (Visual Basic)</source>
          <target state="translated">/target (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Specifies the format of compiler output.</source>
          <target state="translated">コンパイラの出力形式を指定します。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
          <target state="translated">構文</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Remarks</source>
          <target state="translated">コメント</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The following table summarizes the effect of the <ph id="ph1">`/target`</ph> option.</source>
          <target state="translated">次の表に、影響、 <ph id="ph1">`/target`</ph>  オプション。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Option<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>オプション<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Behavior<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>動作<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Causes the compiler to create an executable console application.</source>
          <target state="translated">コンパイラが、可能なコンソール アプリケーションを作成します。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This is the default option when no <ph id="ph1">`/target`</ph> option is specified.</source>
          <target state="translated">これはない場合は、既定オプション<ph id="ph1">`/target`</ph>オプションを指定します。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The executable file is created with an .exe extension.</source>
          <target state="translated">拡張子が .exe の実行可能ファイルが作成されます。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Unless otherwise specified with the <ph id="ph1">`/out`</ph> option, the output file name takes the name of the input file that contains the <ph id="ph2">`Sub Main`</ph> procedure.</source>
          <target state="translated">それ以外の場合を指定しない限り、<ph id="ph1">`/out`</ph>オプション、出力ファイル名を含む入力ファイルの名前を受け取り、<ph id="ph2">`Sub Main`</ph>プロシージャです。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Only one <ph id="ph1">`Sub Main`</ph> procedure is required in the source-code files that are compiled into an .exe file.</source>
          <target state="translated">1 つだけ<ph id="ph1">`Sub Main`</ph>.exe ファイルにコンパイルされるソース コード ファイル内のプロシージャが必要です。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`/main`</ph> compiler option to specify which class contains the <ph id="ph2">`Sub Main`</ph> procedure.</source>
          <target state="translated">使用して、<ph id="ph1">`/main`</ph>コンパイラ オプションを指定するクラスを含む、<ph id="ph2">`Sub Main`</ph>プロシージャです。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Causes the compiler to create a dynamic-link library (DLL).</source>
          <target state="translated">コンパイラがダイナミック リンク ライブラリ (DLL) を作成します。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The dynamic-link library file is created with a .dll extension.</source>
          <target state="translated">ダイナミック リンク ライブラリ ファイルは、拡張子が .dll で作成されます。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Unless otherwise specified with the <ph id="ph1">`/out`</ph> option, the output file name takes the name of the first input file.</source>
          <target state="translated">それ以外の場合を指定しない限り、<ph id="ph1">`/out`</ph>オプション、出力ファイル名は最初の入力ファイルの名前。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>When building a DLL, a <ph id="ph1">`Sub Main`</ph> procedure is not required.</source>
          <target state="translated">DLL を作成するときに、<ph id="ph1">`Sub Main`</ph>手順は必要ありません。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Causes the compiler to generate a module that can be added to an assembly.</source>
          <target state="translated">コンパイラでアセンブリに追加できるモジュールを生成します。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The output file is created with an extension of .netmodule.</source>
          <target state="translated">.Netmodule の拡張子を持つ出力ファイルが作成されます。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The .NET common language runtime cannot load a file that does not have an assembly.</source>
          <target state="translated">.NET 共通言語ランタイムは、アセンブリがないファイルを読み込めませんでした。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>However, you can incorporate such a file into the assembly manifest of an assembly by using <ph id="ph1">`/reference`</ph>.</source>
          <target state="translated">ただし、組み込むことができます、このようなファイル、アセンブリのアセンブリ マニフェストを使用して<ph id="ph1">`/reference`</ph>します。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>When code in one module references internal types in another module, both modules must be incorporated into an assembly manifest by using <ph id="ph1">`/reference`</ph>.</source>
          <target state="translated">使用して、アセンブリ マニフェストに両方のモジュールを組み込む必要が&amp;1; つのモジュール内のコードでは、別のモジュールの内部型を参照する場合<ph id="ph1">`/reference`</ph>します。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>/addmodule<ept id="p1">](../../../visual-basic/reference/command-line-compiler/addmodule.md)</ept> option imports metadata from a module.</source>
          <target state="translated"><bpt id="p1">[</bpt>/Addmodule<ept id="p1">](../../../visual-basic/reference/command-line-compiler/addmodule.md)</ept>オプションは、モジュールからメタデータをインポートします。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Causes the compiler to create an executable Windows-based application.</source>
          <target state="translated">コンパイラが実行可能ファイルの Windows ベースのアプリケーションを作成します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The executable file is created with an .exe extension.</source>
          <target state="translated">拡張子が .exe の実行可能ファイルが作成されます。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A Windows-based application is one that provides a user interface from either the <ph id="ph1">[!INCLUDE[dnprdnshort](../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph> class library or with the Win32 APIs.</source>
          <target state="translated">Windows ベースのアプリケーションは、いずれかのいずれかのユーザー インターフェイスを提供する、<ph id="ph1">[!INCLUDE[dnprdnshort](../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph>クラス ライブラリまたは Win32 Api を使用します。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Unless otherwise specified with the <ph id="ph1">`/out`</ph> option, the output file name takes the name of the input file that contains the <ph id="ph2">`Sub Main`</ph> procedure.</source>
          <target state="translated">それ以外の場合を指定しない限り、<ph id="ph1">`/out`</ph>オプション、出力ファイル名を含む入力ファイルの名前を受け取り、<ph id="ph2">`Sub Main`</ph>プロシージャです。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Only one <ph id="ph1">`Sub Main`</ph> procedure is required in the source-code files that are compiled into an .exe file.</source>
          <target state="translated">1 つだけ<ph id="ph1">`Sub Main`</ph>.exe ファイルにコンパイルされるソース コード ファイル内のプロシージャが必要です。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In cases where your code has more than one class that has a <ph id="ph1">`Sub Main`</ph> procedure, use the <ph id="ph2">`/main`</ph> compiler option to specify which class contains the <ph id="ph3">`Sub Main`</ph> procedure</source>
          <target state="translated">内に、コードが&amp;1; つ以上のクラスを持つ場合、<ph id="ph1">`Sub Main`</ph>プロシージャを使用して、<ph id="ph2">`/main`</ph>コンパイラ オプションを指定するクラスを含む、<ph id="ph3">`Sub Main`</ph>プロシージャ</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Causes the compiler to create an executable Windows-based application that must be run in an app container.</source>
          <target state="translated">コンパイラは、実行可能な Windows ベース アプリケーションを作成するアプリ コンテナー内で実行する必要があります。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This setting is designed to be used for <ph id="ph1">[!INCLUDE[win8_appname_long](../../../csharp/includes/win8_appname_long_md.md)]</ph> applications.</source>
          <target state="translated">この設定が使用するように設計<ph id="ph1">[!INCLUDE[win8_appname_long](../../../csharp/includes/win8_appname_long_md.md)]</ph>アプリケーションです。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>appcontainerexe<ept id="p1">**</ept> setting sets a bit in the Characteristics field of the <bpt id="p2">[</bpt>Portable Executable<ept id="p2">](http://go.microsoft.com/fwlink/p/?LinkId=236960)</ept> file.</source>
          <target state="translated"><bpt id="p1">**</bpt>Appcontainerexe<ept id="p1">**</ept>設定では、少しの特性 フィールドに、<bpt id="p2">[</bpt>ポータブル実行可能<ept id="p2">](http://go.microsoft.com/fwlink/p/?LinkId=236960)</ept>ファイルです。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This bit indicates that the app must be run in an app container.</source>
          <target state="translated">このビットは、アプリがアプリ コンテナー内で実行される必要があることを示します。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>When this bit is set, an error occurs if the <ph id="ph1">`CreateProcess`</ph> method tries to launch the application outside of an app container.</source>
          <target state="translated">場合にエラーが発生したこのビットが設定されている場合、<ph id="ph1">`CreateProcess`</ph>メソッドはアプリケーション コンテナーの外部でアプリケーションを起動しようとしています。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Aside from this bit setting, <bpt id="p1">**</bpt>/target:appcontainerexe<ept id="p1">**</ept> is equivalent to <bpt id="p2">**</bpt>/target:winexe<ept id="p2">**</ept>.</source>
          <target state="translated">このビットを設定するとは別<bpt id="p1">**</bpt>/target:appcontainerexe<ept id="p1">**</ept>は<bpt id="p2">**</bpt>/target:winexe<ept id="p2">**</ept>します。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The executable file is created with an .exe extension.</source>
          <target state="translated">拡張子が .exe の実行可能ファイルが作成されます。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Unless you specify otherwise by using the <ph id="ph1">`/out`</ph> option, the output file name takes the name of the input file that contains the <ph id="ph2">`Sub Main`</ph> procedure.</source>
          <target state="translated">使用してそれ以外の場合に指定していない限り、 <ph id="ph1">`/out`</ph>  オプションを含む入力ファイルの名前は、出力ファイル名、<ph id="ph2">`Sub Main`</ph>プロシージャです。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Only one <ph id="ph1">`Sub Main`</ph> procedure is required in the source-code files that are compiled into an .exe file.</source>
          <target state="translated">1 つだけ<ph id="ph1">`Sub Main`</ph>.exe ファイルにコンパイルされるソース コード ファイル内のプロシージャが必要です。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If your code contains more than one class that has a <ph id="ph1">`Sub Main`</ph> procedure, use the <ph id="ph2">`/main`</ph> compiler option to specify which class contains the <ph id="ph3">`Sub Main`</ph> procedure</source>
          <target state="translated">コードには複数のクラスが含まれるかどうか、<ph id="ph1">`Sub Main`</ph>プロシージャを使用して、<ph id="ph2">`/main`</ph>コンパイラ オプションを指定するクラスを含む、<ph id="ph3">`Sub Main`</ph>プロシージャ</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Causes the compiler to create an intermediate file that you can convert to a Windows Runtime binary (.winmd) file.</source>
          <target state="translated">コンパイラが、Windows ランタイム バイナリ (.winmd) ファイルに変換できる中間ファイルを作成します。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The .winmd file can be consumed by JavaScript and C++ programs, in addition to managed language programs.</source>
          <target state="translated">.Winmd ファイルは、マネージ言語プログラムだけでなく JavaScript および C++ プログラムで使用できます。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The intermediate file is created with a .winmdobj extension.</source>
          <target state="translated">.Winmdobj 拡張子を持つ中間ファイルが作成されます。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Unless you specify otherwise by using the <ph id="ph1">`/out`</ph> option, the output file name takes the name of the first input file.</source>
          <target state="translated">使用してそれ以外の場合に指定していない限り、<ph id="ph1">`/out`</ph>オプション、出力ファイル名は最初の入力ファイルの名前。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Sub Main`</ph> procedure isn’t required.</source>
          <target state="translated">A<ph id="ph1">`Sub Main`</ph>手順は必要ありません。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The .winmdobj file is designed to be used as input for the &lt;xref:Microsoft.Build.Tasks.WinMDExp&gt; export tool to produce a Windows metadata (WinMD) file.</source>
          <target state="translated">.Winmdobj ファイルが入力として使用するように設計、 &lt;xref:Microsoft.Build.Tasks.WinMDExp&gt;Windows メタデータ (WinMD) ファイルを作成するツールをエクスポートします&lt;/xref:Microsoft.Build.Tasks.WinMDExp&gt;。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The WinMD file has a .winmd extension and contains both the code from the original library and the WinMD definitions that JavaScript, C++, and  the Windows Runtime use.</source>
          <target state="translated">WinMD ファイルは、.winmd 拡張子を持ち、その JavaScript、C++、および、Windows ランタイムで使用する、元のライブラリと WinMD 定義から、コード両方にはが含まれています。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Unless you specify <ph id="ph1">`/target:module`</ph>, <ph id="ph2">`/target`</ph> causes a <ph id="ph3">[!INCLUDE[dnprdnshort](../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph> assembly manifest to be added to an output file.</source>
          <target state="translated">指定しない限り<ph id="ph1">`/target:module`</ph>、<ph id="ph2">`/target`</ph>により、<ph id="ph3">[!INCLUDE[dnprdnshort](../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph>出力ファイルに追加するアセンブリのマニフェスト。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Each instance of Vbc.exe produces, at most, one output file.</source>
          <target state="translated">Vbc.exe の各インスタンスが発生した場合、最大で&amp;1; つの出力ファイル。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>If you specify a compiler option such as <ph id="ph1">`/out`</ph> or <ph id="ph2">`/target`</ph> more than one time, the last one the compiler processes is put into effect.</source>
          <target state="translated">コンパイラ オプションを指定する場合は、<ph id="ph1">`/out`</ph>または<ph id="ph2">`/target`</ph>2 回以上、最後の&amp;1; つは、コンパイラのプロセスを有効にします。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Information about all files in a compilation is added to the manifest.</source>
          <target state="translated">コンパイルですべてのファイルに関する情報は、マニフェストに追加します。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>All output files except those created with <ph id="ph1">`/target:module`</ph> contain assembly metadata in the manifest.</source>
          <target state="translated">すべての出力ファイルで作成されたものを除く<ph id="ph1">`/target:module`</ph>マニフェストでアセンブリ メタデータが含まれます。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">[</bpt>Ildasm.exe (IL Disassembler)<ept id="p1">](https://msdn.microsoft.com/library/f7dy01k1)</ept> to view the metadata in an output file.</source>
          <target state="translated">使用<bpt id="p1">[</bpt>Ildasm.exe (IL 逆アセンブラー)<ept id="p1">](https://msdn.microsoft.com/library/f7dy01k1)</ept>出力ファイルにメタデータを表示します。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The short form of <ph id="ph1">`/target`</ph> is <ph id="ph2">`/t`</ph>.</source>
          <target state="translated">短い形式の<ph id="ph1">`/target`</ph>は<ph id="ph2">`/t`</ph>です。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>To set /target in the Visual Studio IDE</source>
          <target state="translated">Visual Studio IDE 内/target:publish を設定するには</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Have a project selected in <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>ソリューション エクスプローラー<ept id="p1">**</ept>でプロジェクトを選択します。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>Project<ept id="p1">**</ept> menu, click <bpt id="p2">**</bpt>Properties<ept id="p2">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>プロジェクト<ept id="p1">**</ept> メニューのをクリックして<bpt id="p2">**</bpt>プロパティ<ept id="p2">**</ept>します。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Introduction to the Project Designer<ept id="p1">](http://msdn.microsoft.com/en-us/898dd854-c98d-430c-ba1b-a913ce3c73d7)</ept>.</source>
          <target state="translated">詳細については、「<bpt id="p1">[</bpt>プロジェクト デザイナーの概要<ept id="p1">](http://msdn.microsoft.com/en-us/898dd854-c98d-430c-ba1b-a913ce3c73d7)</ept>」を参照してください。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Click the <bpt id="p1">**</bpt>Application<ept id="p1">**</ept> tab.</source>
          <target state="translated"><bpt id="p1">**</bpt>[アプリケーション]<ept id="p1">**</ept> タブをクリックします。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Modify the value in the <bpt id="p1">**</bpt>Application Type<ept id="p1">**</ept> box.</source>
          <target state="translated">値を変更、<bpt id="p1">**</bpt>アプリケーションの種類<ept id="p1">**</ept>ボックス。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">例</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The following code compiles <ph id="ph1">`in.vb`</ph>, creating <ph id="ph2">`in.dll`</ph>:</source>
          <target state="translated">次のコードのコンパイル<ph id="ph1">`in.vb`</ph>作成、 <ph id="ph2">`in.dll`</ph>:</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">関連項目</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Visual Basic Command-Line Compiler<ept id="p1">](../../../visual-basic/reference/command-line-compiler/index.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Visual Basic のコマンド ライン コンパイラ<ept id="p1">](../../../visual-basic/reference/command-line-compiler/index.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>/main<ept id="p1">](../../../visual-basic/reference/command-line-compiler/main.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>/main<ept id="p1">](../../../visual-basic/reference/command-line-compiler/main.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>/out (Visual Basic)<ept id="p1">](../../../visual-basic/reference/command-line-compiler/out.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>/out (Visual Basic)<ept id="p1">](../../../visual-basic/reference/command-line-compiler/out.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>/reference (Visual Basic)<ept id="p1">](../../../visual-basic/reference/command-line-compiler/reference.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>/reference (Visual Basic)<ept id="p1">](../../../visual-basic/reference/command-line-compiler/reference.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>/addmodule<ept id="p1">](../../../visual-basic/reference/command-line-compiler/addmodule.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>/addmodule<ept id="p1">](../../../visual-basic/reference/command-line-compiler/addmodule.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>/moduleassemblyname<ept id="p1">](../../../visual-basic/reference/command-line-compiler/moduleassemblyname.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>/moduleassemblyname<ept id="p1">](../../../visual-basic/reference/command-line-compiler/moduleassemblyname.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Assemblies and the Global Assembly Cache<ept id="p1">](../../../visual-basic/programming-guide/concepts/assemblies-gac/index.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>アセンブリとグローバル アセンブリ キャッシュ<ept id="p1">](../../../visual-basic/programming-guide/concepts/assemblies-gac/index.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Sample Compilation Command Lines<ept id="p1">](../../../visual-basic/reference/command-line-compiler/sample-compilation-command-lines.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>コンパイル コマンド ラインのサンプル<ept id="p1">](../../../visual-basic/reference/command-line-compiler/sample-compilation-command-lines.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>