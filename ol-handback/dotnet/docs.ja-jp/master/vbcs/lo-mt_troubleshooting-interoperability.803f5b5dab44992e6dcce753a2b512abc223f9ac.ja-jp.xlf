<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cbc37638ed5c57b94356c2d189f36b66202ceba5</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\com-interop\troubleshooting-interoperability.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">028984616a60a729da4e65417c8740568d697268</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5944c149b7d7d438451ceb286886e47b9515e66d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Troubleshooting Interoperability (Visual Basic) | Microsoft Docs</source>
          <target state="translated">相互運用性 (Visual Basic) のトラブルシューティング |Microsoft ドキュメント</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Troubleshooting Interoperability (Visual Basic)</source>
          <target state="translated">相互運用性のトラブルシューティング (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>When you interoperate between COM and the managed code of the <ph id="ph1">[!INCLUDE[dnprdnshort](../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph>, you may encounter one or more of the following common issues.</source>
          <target state="translated">マネージ コードと COM の相互運用するときに、 <ph id="ph1">[!INCLUDE[dnprdnshort](../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph>、次の一般的な問題が発生する可能性があります。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="vbconinteroperabilitymarshalinganchor1"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Interop Marshaling</source>
          <target state="translated"><bpt id="p1">&lt;a name="vbconinteroperabilitymarshalinganchor1"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>相互運用マーシャ リング</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>At times, you may have to use data types that are not part of the <ph id="ph1">[!INCLUDE[dnprdnshort](../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph>.</source>
          <target state="translated">いないデータ型を使用する必要がありますの一部では、<ph id="ph1">[!INCLUDE[dnprdnshort](../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Interop assemblies handle most of the work for COM objects, but you may have to control the data types that are used when managed objects are exposed to COM.</source>
          <target state="translated">相互運用機能アセンブリ、COM オブジェクトに対する作業のほとんどを処理することはマネージ オブジェクトが COM に公開するときに使用されるデータ型を制御する必要があります。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For example, structures in class libraries must specify the <ph id="ph1">`BStr`</ph> unmanaged type on strings sent to COM objects created by Visual Basic 6.0 and earlier versions.</source>
          <target state="translated">たとえば、クラス ライブラリ内の構造体を指定する必要があります、<ph id="ph1">`BStr`</ph>アンマネージ型 Visual Basic 6.0 およびそれ以前のバージョンで作成された COM オブジェクトに送信される文字列。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In such cases, you can use the &lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt; attribute to cause managed types to be exposed as unmanaged types.</source>
          <target state="translated">このような場合に使用することができます、&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;アンマネージ型として公開するマネージ型が発生する属性&lt;/xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="vbconinteroperabilitymarshalinganchor2"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Exporting Fixed-Length Strings to Unmanaged Code</source>
          <target state="translated"><bpt id="p1">&lt;a name="vbconinteroperabilitymarshalinganchor2"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>アンマネージ コードへの固定長文字列のエクスポート</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In Visual Basic 6.0 and earlier versions, strings are exported to COM objects as sequences of bytes without a null termination character.</source>
          <target state="translated">Visual Basic 6.0 およびそれ以前のバージョンでは、文字列は null 終端文字なしバイトのシーケンスとして COM オブジェクトにエクスポートされます。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For compatibility with other languages, <ph id="ph1">[!INCLUDE[vbprvblong](../../../visual-basic/developing-apps/customizing-extending-my/includes/vbprvblong_md.md)]</ph> includes a termination character when exporting strings.</source>
          <target state="translated">他の言語との互換性のため<ph id="ph1">[!INCLUDE[vbprvblong](../../../visual-basic/developing-apps/customizing-extending-my/includes/vbprvblong_md.md)]</ph>文字列をエクスポートするときに終了文字が含まれています。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The best way to address this incompatibility is to export strings that lack the termination character as arrays of <ph id="ph1">`Byte`</ph> or <ph id="ph2">`Char`</ph>.</source>
          <target state="translated">この非互換性に対処する最善の方法は、文字列の配列として、終了文字に関連付けられていないをエクスポートする<ph id="ph1">`Byte`</ph>または<ph id="ph2">`Char`</ph>です。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="vbconinteroperabilitymarshalinganchor3"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Exporting Inheritance Hierarchies</source>
          <target state="translated"><bpt id="p1">&lt;a name="vbconinteroperabilitymarshalinganchor3"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>継承階層のエクスポート</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Managed class hierarchies flatten out when exposed as COM objects.</source>
          <target state="translated">マネージ クラスが COM オブジェクトとして公開されるときに階層が平坦化します。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For example, if you define a base class with a member, and then inherit the base class in a derived class that is exposed as a COM object, clients that use the derived class in the COM object will not be able to use the inherited members.</source>
          <target state="translated">たとえば場合は、メンバーを持つ基本クラスを定義し、COM オブジェクトとして公開されている派生クラスで基本クラスを継承すると、COM オブジェクトに、派生クラスを使用するクライアントされません継承されたメンバーを使用すること。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Base class members can be accessed from COM objects only as instances of a base class, and then only if the base class is also created as a COM object.</source>
          <target state="translated">基本クラスのメンバーは、基底クラスのインスタンスとしてのみ COM オブジェクトからアクセスできるし、基本クラスが COM オブジェクトとしても作成する場合にのみです。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Overloaded Methods</source>
          <target state="translated">オーバーロードされたメソッド</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Although you can create overloaded methods with <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>, they are not supported by COM.</source>
          <target state="translated">オーバー ロードされたでメソッドを作成できますが、 <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>COM でサポートされていません</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>When a class that contains overloaded methods is exposed as a COM object, new method names are generated for the overloaded methods.</source>
          <target state="translated">オーバー ロードされたメソッドを含むクラスが COM オブジェクトとして公開されているオーバー ロードされたメソッドの新しいメソッド名が生成されます。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For example, consider a class that has two overloads of the <ph id="ph1">`Synch`</ph> method.</source>
          <target state="translated">たとえばの&amp;2; つのオーバー ロードを持つクラス、<ph id="ph1">`Synch`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>When the class is exposed as a COM object, the new generated method names could be <ph id="ph1">`Synch`</ph> and <ph id="ph2">`Synch_2`</ph>.</source>
          <target state="translated">新しいの生成されたメソッド名にすることが、クラスが COM オブジェクトとして公開されているときに<ph id="ph1">`Synch`</ph>と<ph id="ph2">`Synch_2`</ph>です。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The renaming can cause two problems for consumers of the COM object.</source>
          <target state="translated">名前を変更すると、COM オブジェクトのコンシューマー向けの&amp;2; つの問題が発生することができます。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Clients might not expect the generated method names.</source>
          <target state="translated">クライアントでは、生成されたメソッド名は予期しない可能性があります。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The generated method names in the class exposed as a COM object can change when new overloads are added to the class or its base class.</source>
          <target state="translated">新しいオーバー ロードがクラスまたはその基本クラスに追加されたときに、COM オブジェクトとして公開するクラスで生成されたメソッド名を変更できます。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This can cause versioning problems.</source>
          <target state="translated">バージョン管理の問題がある可能性があります。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>To solve both problems, give each method a unique name, instead of using overloading, when you develop objects that will be exposed as COM objects.</source>
          <target state="translated">両方の問題を解決するために各メソッドに、COM オブジェクトとして公開されるオブジェクトを開発するときに、オーバー ロードを使用する代わりに、一意の名前を指定します。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="vbconinteroperabilitymarshalinganchor4"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Use of COM Objects Through Interop Assemblies</source>
          <target state="translated"><bpt id="p1">&lt;a name="vbconinteroperabilitymarshalinganchor4"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>相互運用機能アセンブリを介して COM オブジェクトの使用</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You use interop assemblies almost as if they are managed code replacements for the COM objects they represent.</source>
          <target state="translated">表す COM オブジェクトのマネージ コードに置き換わる場合とほとんど同じように相互運用機能アセンブリを使用するとします。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>However, because they are wrappers and not actual COM objects, there are some differences between using interop assemblies and standard assemblies.</source>
          <target state="translated">ただし、これらはのでラッパーと実際の COM オブジェクトは、相互運用機能アセンブリと標準のアセンブリを使用して違いです。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>These areas of difference include the exposure of classes, and data types for parameters and return values.</source>
          <target state="translated">相違点には、クラス、およびパラメーターと戻り値のデータ型の公開が含まれます。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="vbconinteroperabilitymarshalinganchor5"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Classes Exposed as Both Interfaces and Classes</source>
          <target state="translated"><bpt id="p1">&lt;a name="vbconinteroperabilitymarshalinganchor5"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>両方のインターフェイスとして公開されるクラスとクラス</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Unlike classes in standard assemblies, COM classes are exposed in interop assemblies as both an interface and a class that represents the COM class.</source>
          <target state="translated">標準アセンブリのクラスとは異なり、COM クラスは、インターフェイスおよび COM クラスを表すクラスの両方との相互運用機能アセンブリで公開されます。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The interface's name is identical to that of the COM class.</source>
          <target state="translated">インターフェイスの名前は、COM クラスの場合と同じです。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The name of the interop class is the same as that of the original COM class, but with the word "Class" appended.</source>
          <target state="translated">相互運用機能のクラスの名前は元の COM クラスと同じですが、"Class"が追加の単語です。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For example, suppose you have a project with a reference to an interop assembly for a COM object.</source>
          <target state="translated">たとえば、COM オブジェクトの相互運用機能アセンブリへの参照を含むプロジェクトがあるとします。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If the COM class is named <ph id="ph1">`MyComClass`</ph>, IntelliSense and the Object Browser show an interface named <ph id="ph2">`MyComClass`</ph> and a class named <ph id="ph3">`MyComClassClass`</ph>.</source>
          <target state="translated">COM クラスの名前は場合<ph id="ph1">`MyComClass`</ph>、IntelliSense やオブジェクト ブラウザーには、という名前のインターフェイスを表示する<ph id="ph2">`MyComClass`</ph>という名前のクラスと<ph id="ph3">`MyComClassClass`</ph>です。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="vbconinteroperabilitymarshalinganchor6"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Creating Instances of a .NET Framework Class</source>
          <target state="translated"><bpt id="p1">&lt;a name="vbconinteroperabilitymarshalinganchor6"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>.NET Framework クラスのインスタンスを作成します。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Generally, you create an instance of a <ph id="ph1">[!INCLUDE[dnprdnshort](../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph> class using the <ph id="ph2">`New`</ph> statement with a class name.</source>
          <target state="translated">インスタンスを作成する、一般に、<ph id="ph1">[!INCLUDE[dnprdnshort](../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph>クラスを使用して、<ph id="ph2">`New`</ph>クラス名を含むステートメント。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Having a COM class represented by an interop assembly is the one case in which you can use the <ph id="ph1">`New`</ph> statement with an interface.</source>
          <target state="translated">相互運用機能アセンブリによって表される COM クラスは、1 つのケースを使用することができます、<ph id="ph1">`New`</ph>ステートメント インターフェイスを使用します。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Unless you are using the COM class with an <ph id="ph1">`Inherits`</ph> statement, you can use the interface just as you would a class.</source>
          <target state="translated">使用して COM クラスを使用している場合を除き、<ph id="ph1">`Inherits`</ph>ステートメント、クラスと同様に、インターフェイスを使用することができます。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The following code demonstrates how to create a <ph id="ph1">`Command`</ph> object in a project that has a reference to the Microsoft ActiveX Data Objects 2.8 Library COM object:</source>
          <target state="translated">次のコードを作成する方法の例、 <ph id="ph1">`Command`</ph> Microsoft ActiveX データ オブジェクト 2.8 ライブラリ COM オブジェクトへの参照を含むプロジェクト内のオブジェクト。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrInterop#20<ept id="p2">](../../../visual-basic/programming-guide/com-interop/codesnippet/VisualBasic/troubleshooting-interoperability_1.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrInterop&amp;#20;<ept id="p2">](../../../visual-basic/programming-guide/com-interop/codesnippet/VisualBasic/troubleshooting-interoperability_1.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>However, if you are using the COM class as the base for a derived class, you must use the interop class that represents the COM class, as in the following code:</source>
          <target state="translated">ただし、COM クラスは、派生クラスで、ベースとして使用されている場合は、次のコードのように、COM クラスを表す相互運用機能クラスを使用する必要があります。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrInterop#21<ept id="p2">](../../../visual-basic/programming-guide/com-interop/codesnippet/VisualBasic/troubleshooting-interoperability_2.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrInterop #&amp;21;<ept id="p2">](../../../visual-basic/programming-guide/com-interop/codesnippet/VisualBasic/troubleshooting-interoperability_2.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Interop assemblies implicitly implement interfaces that represent COM classes.</source>
          <target state="translated">相互運用機能アセンブリは、暗黙的に COM クラスを表すインターフェイスを実装します。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>You should not try to use the <ph id="ph1">`Implements`</ph> statement to implement these interfaces or an error will result.</source>
          <target state="translated">使用していけません、<ph id="ph1">`Implements`</ph>これらのインターフェイスまたはエラーを実装するステートメントになります。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="vbconinteroperabilitymarshalinganchor7"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Data Types for Parameters and Return Values</source>
          <target state="translated"><bpt id="p1">&lt;a name="vbconinteroperabilitymarshalinganchor7"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>パラメーターと戻り値のデータ型</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Unlike members of standard assemblies, interop assembly members may have data types that differ from those used in the  original object declaration.</source>
          <target state="translated">相互運用機能アセンブリのメンバーは、標準のアセンブリのメンバーとは異なり、元のオブジェクトの宣言で使用されているとは異なるデータ型があります。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Although interop assemblies implicitly convert COM types to compatible common language runtime types, you should pay attention to the data types that are used by both sides to prevent runtime errors.</source>
          <target state="translated">相互運用機能アセンブリは COM 型を互換性のある共通言語ランタイム型に暗黙的に変換しますが、両方の側で実行時エラーを回避するために使用されるデータ型に注意する必要があります。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>For example, in COM objects created in Visual Basic 6.0 and earlier versions, values of type <ph id="ph1">`Integer`</ph> assume the <ph id="ph2">[!INCLUDE[dnprdnshort](../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph> equivalent type, <ph id="ph3">`Short`</ph>.</source>
          <target state="translated">たとえば、Visual Basic 6.0 以前のバージョンでは、型の値で作成された COM オブジェクトで<ph id="ph1">`Integer`</ph>前提としています、<ph id="ph2">[!INCLUDE[dnprdnshort](../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph>同等型<ph id="ph3">`Short`</ph>します。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>It is recommended that you use the Object Browser to examine the characteristics of imported members before you use them.</source>
          <target state="translated">使用する前に、インポートされたメンバーの特性を調べるオブジェクト ブラウザーを使用することをお勧めします。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="vbconinteroperabilitymarshalinganchor8"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Module level COM methods</source>
          <target state="translated"><bpt id="p1">&lt;a name="vbconinteroperabilitymarshalinganchor8"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>モジュール レベルの COM メソッド</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Most COM objects are used by creating an instance of a COM class using the <ph id="ph1">`New`</ph> keyword and then calling methods of the object.</source>
          <target state="translated">使用して COM クラスのインスタンスを作成することでほとんどの COM オブジェクトが使用される、<ph id="ph1">`New`</ph>キーワードと、オブジェクトのメソッドを呼び出しています。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>One exception to this rule involves COM objects that contain <ph id="ph1">`AppObj`</ph> or <ph id="ph2">`GlobalMultiUse`</ph> COM classes.</source>
          <target state="translated">この規則の例外は、COM オブジェクトを含む<ph id="ph1">`AppObj`</ph>または<ph id="ph2">`GlobalMultiUse`</ph>COM クラスです。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Such classes resemble module level methods in <ph id="ph1">[!INCLUDE[vbprvblong](../../../visual-basic/developing-apps/customizing-extending-my/includes/vbprvblong_md.md)]</ph> classes.</source>
          <target state="translated">このようなクラスで、モジュール レベル メソッドのように<ph id="ph1">[!INCLUDE[vbprvblong](../../../visual-basic/developing-apps/customizing-extending-my/includes/vbprvblong_md.md)]</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Visual Basic 6.0 and earlier versions implicitly create instances of such objects for you the first time that you call one of their methods.</source>
          <target state="translated">Visual Basic 6.0 とそれ以前のバージョンが暗黙的に作成このようなオブジェクトのインスタンスを最初にそれらのメソッドのいずれかを呼び出すことです。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>For example, in Visual Basic 6.0 you can add a reference to the Microsoft DAO 3.6 Object Library and call the <ph id="ph1">`DBEngine`</ph> method without first creating an instance:</source>
          <target state="translated">たとえば、Visual Basic 6.0 で、参照を追加できます 3.6 DAO オブジェクト ライブラリを呼び出し、<ph id="ph1">`DBEngine`</ph>インスタンスを作成せずメソッド。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbprvblong](../../../visual-basic/developing-apps/customizing-extending-my/includes/vbprvblong_md.md)]</ph> requires that you always create instances of COM objects before you can use their methods.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vbprvblong](../../../visual-basic/developing-apps/customizing-extending-my/includes/vbprvblong_md.md)]</ph>それらのメソッドを使用する前に常に COM オブジェクトのインスタンスを作成することが必要です。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>To use these methods in <ph id="ph1">[!INCLUDE[vbprvblong](../../../visual-basic/developing-apps/customizing-extending-my/includes/vbprvblong_md.md)]</ph>, declare a variable of the desired class and use the new keyword to assign the object to the object variable.</source>
          <target state="translated">これらのメソッドを使用する<ph id="ph1">[!INCLUDE[vbprvblong](../../../visual-basic/developing-apps/customizing-extending-my/includes/vbprvblong_md.md)]</ph>、目的のクラスの変数を宣言し、新しいキーワードを使用して、オブジェクト変数にオブジェクトを割り当てます。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Shared`</ph> keyword can be used when you want to make sure that only one instance of the class is created.</source>
          <target state="translated"><ph id="ph1">`Shared`</ph>ことを確認する場合に、キーワードを使用できるクラスの&amp;1; つのインスタンスを作成します。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrInterop#23<ept id="p2">](../../../visual-basic/programming-guide/com-interop/codesnippet/VisualBasic/troubleshooting-interoperability_3.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrInterop 第&amp;23;<ept id="p2">](../../../visual-basic/programming-guide/com-interop/codesnippet/VisualBasic/troubleshooting-interoperability_3.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="vbconinteroperabilitymarshalinganchor9"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Unhandled Errors in Event Handlers</source>
          <target state="translated"><bpt id="p1">&lt;a name="vbconinteroperabilitymarshalinganchor9"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>イベント ハンドラーで処理されないエラー</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>One common interop problem involves errors in event handlers that handle events raised by COM objects.</source>
          <target state="translated">1 つの一般的な相互運用機能の問題には、COM オブジェクトによって生成されるイベントを処理するイベント ハンドラーでエラーが含まれています。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Such errors are ignored unless you specifically check for errors using <ph id="ph1">`On Error`</ph> or <ph id="ph2">`Try...Catch...Finally`</ph> statements.</source>
          <target state="translated">具体的にを使用してエラーをチェックする場合を除き、このようなエラーは無視されます<ph id="ph1">`On Error`</ph>または<ph id="ph2">`Try...Catch...Finally`</ph>ステートメントです。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>For example, the following example is from a <ph id="ph1">[!INCLUDE[vbprvblong](../../../visual-basic/developing-apps/customizing-extending-my/includes/vbprvblong_md.md)]</ph> project that has a reference to the Microsoft ActiveX Data Objects 2.8 Library COM object.</source>
          <target state="translated">たとえば、次の例からは、 <ph id="ph1">[!INCLUDE[vbprvblong](../../../visual-basic/developing-apps/customizing-extending-my/includes/vbprvblong_md.md)]</ph> Microsoft ActiveX データ オブジェクト 2.8 ライブラリ COM オブジェクトへの参照を含むプロジェクトです。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrInterop#24<ept id="p2">](../../../visual-basic/programming-guide/com-interop/codesnippet/VisualBasic/troubleshooting-interoperability_4.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrInterop #&amp;24;<ept id="p2">](../../../visual-basic/programming-guide/com-interop/codesnippet/VisualBasic/troubleshooting-interoperability_4.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>This example raises an error as expected.</source>
          <target state="translated">この例では、予期したとおりにエラーが発生します。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>However, if you try the same example without the <ph id="ph1">`Try...Catch...Finally`</ph> block, the error is ignored as if you used the <ph id="ph2">`OnError Resume Next`</ph> statement.</source>
          <target state="translated">ただし、なしの例と同じしようとすると、<ph id="ph1">`Try...Catch...Finally`</ph>使用する場合と同様、ブロック、エラーは無視されます、<ph id="ph2">`OnError Resume Next`</ph>ステートメントです。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Without error handling, the division by zero silently fails.</source>
          <target state="translated">エラー処理がなければ&amp;0; による除算はサイレント モードで失敗します。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Because such errors never raise unhandled exception errors, it is important that you use some form of exception handling in event handlers that handle events from COM objects.</source>
          <target state="translated">このようなエラーが処理されない例外エラーを発生しないことが COM オブジェクトからのイベントを処理するイベント ハンドラーで例外処理のいくつかの形式を使用することが重要です。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Understanding COM interop errors</source>
          <target state="translated">COM 相互運用機能の問題を理解します。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Without error handling, interop calls often generate errors that provide little information.</source>
          <target state="translated">エラー処理がない相互運用呼び出しは多くの場合、ほとんどの情報を提供するエラーを生成します。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Whenever possible, use structured error handling to provide more information about problems when they occur.</source>
          <target state="translated">可能であれば、構造化エラーが発生したときに、問題に関する詳細情報を提供する処理を使用します。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>This can be especially helpful when you debug applications.</source>
          <target state="translated">これはするアプリケーションをデバッグする場合に特に役立ちます。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例:</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrInterop#25<ept id="p2">](../../../visual-basic/programming-guide/com-interop/codesnippet/VisualBasic/troubleshooting-interoperability_5.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrInterop&amp;#25;<ept id="p2">](../../../visual-basic/programming-guide/com-interop/codesnippet/VisualBasic/troubleshooting-interoperability_5.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>You can find information such as the error description, HRESULT, and the source of COM errors by examining the contents of the exception object.</source>
          <target state="translated">例外オブジェクトの内容を確認するには、エラーの説明、HRESULT、および COM エラーのソースなどの情報が表示されます。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="vbconinteroperabilitymarshalinganchor10"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> ActiveX Control Issues</source>
          <target state="translated"><bpt id="p1">&lt;a name="vbconinteroperabilitymarshalinganchor10"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>ActiveX コントロールに関する問題</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Most ActiveX controls that work with Visual Basic 6.0 work with <ph id="ph1">[!INCLUDE[vbprvblong](../../../visual-basic/developing-apps/customizing-extending-my/includes/vbprvblong_md.md)]</ph> without trouble.</source>
          <target state="translated">Visual Basic 6.0 で使用するほとんどの ActiveX コントロールが扱う<ph id="ph1">[!INCLUDE[vbprvblong](../../../visual-basic/developing-apps/customizing-extending-my/includes/vbprvblong_md.md)]</ph>難しくありません。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The main exceptions are container controls, or controls that visually contain other controls.</source>
          <target state="translated">主な例外は、コンテナー コントロールまたはその他のコントロールを視覚的に格納しているコントロールです。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Some examples of older controls that do not work correctly with <ph id="ph1">[!INCLUDE[vsprvs](../../../csharp/includes/vsprvs_md.md)]</ph> are as follows:</source>
          <target state="translated">正しく動作しない古いコントロールの例をいくつか<ph id="ph1">[!INCLUDE[vsprvs](../../../csharp/includes/vsprvs_md.md)]</ph>は次のようになります。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Microsoft Forms 2.0 Frame control</source>
          <target state="translated">Microsoft フォーム 2.0 フレーム コントロール</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Up-Down control, also known as the spin control</source>
          <target state="translated">アップダウン コントロール、スピン コントロールとも呼ばれます</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Sheridan Tab Control</source>
          <target state="translated">Sheridan タブ コントロール</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>There are only a few workarounds for unsupported ActiveX control problems.</source>
          <target state="translated">サポートされていない ActiveX コントロールに関する問題のいくつかの回避策のみがあります。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>You can migrate existing controls to <ph id="ph1">[!INCLUDE[vsprvs](../../../csharp/includes/vsprvs_md.md)]</ph> if you own the original source code.</source>
          <target state="translated">既存のコントロールを移行する<ph id="ph1">[!INCLUDE[vsprvs](../../../csharp/includes/vsprvs_md.md)]</ph>元のソース コードを所有している場合。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Otherwise, you can check with software vendors for updated .NET-compatible versions of controls to replace unsupported ActiveX controls.</source>
          <target state="translated">それ以外の場合、更新、ソフトウェア ベンダーに確認することができます。NET と互換性のあるバージョンの置換をコントロールには、ActiveX コントロールがサポートされていません。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="vbconinteroperabilitymarshalinganchor11"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Passing ReadOnly Properties of Controls ByRef</source>
          <target state="translated"><bpt id="p1">&lt;a name="vbconinteroperabilitymarshalinganchor11"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>コントロールの ByRef の読み取り専用プロパティの引き渡し</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbprvblong](../../../visual-basic/developing-apps/customizing-extending-my/includes/vbprvblong_md.md)]</ph> sometimes raises COM errors such as "Error 0x800A017F CTL_E_SETNOTSUPPORTED" when you pass <ph id="ph2">`ReadOnly`</ph> properties of some older ActiveX controls as <ph id="ph3">`ByRef`</ph> parameters to other procedures.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vbprvblong](../../../visual-basic/developing-apps/customizing-extending-my/includes/vbprvblong_md.md)]</ph>渡すと場合があります"エラー 0x800A017F CTL_E_SETNOTSUPPORTED"などの COM エラーを発生させる<ph id="ph2">`ReadOnly`</ph>として、一部の古い ActiveX コントロールのプロパティ<ph id="ph3">`ByRef`</ph>他のプロシージャのパラメーターです。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Similar procedure calls from Visual Basic 6.0 do not raise an error, and the parameters are treated as if you passed them by value.</source>
          <target state="translated">Visual Basic 6.0 からプロシージャ呼び出しでは、エラーが発生せず、パラメーターとして扱われます値で渡すと同様です。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The error message you see in <ph id="ph1">[!INCLUDE[vbprvblong](../../../visual-basic/developing-apps/customizing-extending-my/includes/vbprvblong_md.md)]</ph> is the COM object reporting that you are trying to change a property that does not have a property <ph id="ph2">`Set`</ph> procedure.</source>
          <target state="translated">表示されるエラー メッセージ、<ph id="ph1">[!INCLUDE[vbprvblong](../../../visual-basic/developing-apps/customizing-extending-my/includes/vbprvblong_md.md)]</ph>プロパティがないプロパティを変更しようとしていることを報告する COM オブジェクトは、<ph id="ph2">`Set`</ph>プロシージャです。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>If you have access to the procedure being called, you can prevent this error by using the <ph id="ph1">`ByVal`</ph> keyword to declare parameters that accept <ph id="ph2">`ReadOnly`</ph> properties.</source>
          <target state="translated">呼び出されるプロシージャにアクセスできる場合を使用してこのエラーを回避できる、<ph id="ph1">`ByVal`</ph>が受け取るパラメーターを宣言するキーワード<ph id="ph2">`ReadOnly`</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例:</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrInterop#26<ept id="p2">](../../../visual-basic/programming-guide/com-interop/codesnippet/VisualBasic/troubleshooting-interoperability_6.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrInterop #&amp;26;<ept id="p2">](../../../visual-basic/programming-guide/com-interop/codesnippet/VisualBasic/troubleshooting-interoperability_6.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>If you do not have access to the source code for the procedure being called, you can force the property to be passed by value by adding an extra set of brackets around the calling procedure.</source>
          <target state="translated">呼び出されるプロシージャのソース コードへのアクセスがあるない場合は、呼び出し元のプロシージャの周囲に角かっこの追加のセットを追加することで値によって渡されるプロパティを強制できます。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>For example, in a project that has a reference to the Microsoft ActiveX Data Objects 2.8 Library COM object, you can use:</source>
          <target state="translated">たとえば、プロジェクトでは、Microsoft ActiveX データ オブジェクト 2.8 ライブラリ COM オブジェクトへの参照を含む、次のように使用します。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrInterop#27<ept id="p2">](../../../visual-basic/programming-guide/com-interop/codesnippet/VisualBasic/troubleshooting-interoperability_7.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrInterop #&amp;27;<ept id="p2">](../../../visual-basic/programming-guide/com-interop/codesnippet/VisualBasic/troubleshooting-interoperability_7.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="vbconinteroperabilitymarshalinganchor12"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Deploying Assemblies That Expose Interop</source>
          <target state="translated"><bpt id="p1">&lt;a name="vbconinteroperabilitymarshalinganchor12"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>相互運用機能を公開するアセンブリを展開します。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Deploying assemblies that expose COM interfaces presents some unique challenges.</source>
          <target state="translated">COM インターフェイスを公開するアセンブリを展開すると、特殊な課題が表示されます。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>For example, a potential problem occurs when separate applications reference the same COM assembly.</source>
          <target state="translated">たとえば、別のアプリケーションは、同じ COM アセンブリを参照と、潜在的な問題が発生します。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>This situation is common when a new version of an assembly is installed and another application is still using the old version of the assembly.</source>
          <target state="translated">新しいバージョンのアセンブリをインストールすると、別のアプリケーションは、アセンブリの旧バージョンを使用しても、このような状況が一般的です。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>If you uninstall an assembly that shares a DLL, you can unintentionally make it unavailable to the other assemblies.</source>
          <target state="translated">DLL を共有するアセンブリをアンインストールする場合することができ意図せずに使用できない他のアセンブリ。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>To avoid this problem, you should install shared assemblies to the Global Assembly Cache (GAC) and use a MergeModule for the component.</source>
          <target state="translated">この問題を回避するには、共有アセンブリをグローバル アセンブリ キャッシュ (GAC) にインストールして、コンポーネントのマージ モジュールを使用する必要があります。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>If you cannot install the application in the GAC, it should be installed to CommonFilesFolder in a version-specific subdirectory.</source>
          <target state="translated">GAC にアプリケーションをインストールできない場合は、これでバージョン固有のサブディレクトリで CommonFilesFolder にインストールしてください。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Assemblies that are not shared should be located side by side in the directory with the calling application.</source>
          <target state="translated">共有されていないアセンブリは、呼び出し元のアプリケーションと同じディレクトリにサイド バイ サイドで配置する必要があります。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">関連項目</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;</source>
          <target state="translated">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;&lt;/xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>COM Interop<ept id="p1">](../../../visual-basic/programming-guide/com-interop/index.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>COM 相互運用機能<ept id="p1">](../../../visual-basic/programming-guide/com-interop/index.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Tlbimp.exe (Type Library Importer)<ept id="p1">](http://msdn.microsoft.com/library/ec0a8d63-11b3-4acd-b398-da1e37e97382)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Tlbimp.exe (タイプ ライブラリ インポーター)<ept id="p1">](http://msdn.microsoft.com/library/ec0a8d63-11b3-4acd-b398-da1e37e97382)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Tlbexp.exe (Type Library Exporter)<ept id="p1">](http://msdn.microsoft.com/library/a487d61b-d166-467b-a7ca-d8b52fbff42d)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Tlbexp.exe (タイプ ライブラリ エクスポーター)<ept id="p1">](http://msdn.microsoft.com/library/a487d61b-d166-467b-a7ca-d8b52fbff42d)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Walkthrough: Implementing Inheritance with COM Objects<ept id="p1">](../../../visual-basic/programming-guide/com-interop/walkthrough-implementing-inheritance-with-com-objects.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>チュートリアル: COM オブジェクトによる継承の実装<ept id="p1">](../../../visual-basic/programming-guide/com-interop/walkthrough-implementing-inheritance-with-com-objects.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Inherits Statement<ept id="p1">](../../../visual-basic/language-reference/statements/inherits-statement.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Inherits ステートメント<ept id="p1">](../../../visual-basic/language-reference/statements/inherits-statement.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Global Assembly Cache<ept id="p1">](http://msdn.microsoft.com/library/cf5eacd0-d3ec-4879-b6da-5fd5e4372202)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>グローバル アセンブリ キャッシュ<ept id="p1">](http://msdn.microsoft.com/library/cf5eacd0-d3ec-4879-b6da-5fd5e4372202)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>