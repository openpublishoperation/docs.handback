<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a5445d6da982e4eea5b1047505e4bee3380ed472</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\procedures\troubleshooting-procedures.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ea4a239464e0128462e89956c162a09e6bf262d4</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1ee14f34c5f46c120e79c05d5ecc71b5f9b3acfb</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Troubleshooting Procedures (Visual Basic) | Microsoft Docs</source>
          <target state="translated">プロシージャのトラブルシューティング (Visual Basic) |Microsoft ドキュメント</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Troubleshooting Procedures (Visual Basic)</source>
          <target state="translated">プロシージャのトラブルシューティング (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This page lists some common problems that can occur when working with procedures.</source>
          <target state="translated">ここでは、プロシージャを使用する場合に発生することが一般的な問題についてを説明します。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Returning an Array Type from a Function Procedure</source>
          <target state="translated">Function プロシージャから、配列型を返す</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>If a <ph id="ph1">`Function`</ph> procedure returns an array data type, you cannot use the <ph id="ph2">`Function`</ph> name to store values in the elements of the array.</source>
          <target state="translated">場合、<ph id="ph1">`Function`</ph>配列のデータ型を返し、使用することはできません、<ph id="ph2">`Function`</ph>配列の要素の値を格納する名前。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>If you attempt to do this, the compiler interprets it as a call to the <ph id="ph1">`Function`</ph>.</source>
          <target state="translated">これを行うしようとすると、コンパイラによって呼び出しとして、<ph id="ph1">`Function`</ph>です。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The following example generates compiler errors.</source>
          <target state="translated">次の例では、コンパイラ エラーを生成します。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`' The following statement generates a`</ph>   <ph id="ph2">`COMPILER ERROR`</ph>  <ph id="ph3">`.`</ph></source>
          <target state="translated"><ph id="ph1">`' The following statement generates a`</ph>   <ph id="ph2">`COMPILER ERROR`</ph>  <ph id="ph3">`.`</ph></target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`' The following statement generates a`</ph>   <ph id="ph2">`COMPILER ERROR`</ph>  <ph id="ph3">`.`</ph></source>
          <target state="translated"><ph id="ph1">`' The following statement generates a`</ph>   <ph id="ph2">`COMPILER ERROR`</ph>  <ph id="ph3">`.`</ph></target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The statement <ph id="ph1">`allOnes(i) = 1`</ph> generates a compiler error because it appears to call <ph id="ph2">`allOnes`</ph> with an argument of the wrong data type (a singleton <ph id="ph3">`Integer`</ph> instead of an <ph id="ph4">`Integer`</ph> array).</source>
          <target state="translated">ステートメント<ph id="ph1">`allOnes(i) = 1`</ph>を呼び出す可能性があるため、コンパイラ エラーが発生<ph id="ph2">`allOnes`</ph>無効なデータ型の引数を持つ (シングルトン<ph id="ph3">`Integer`</ph>の代わりに、<ph id="ph4">`Integer`</ph>配列)。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The statement <ph id="ph1">`Return allOnes()`</ph> generates a compiler error because it appears to call <ph id="ph2">`allOnes`</ph> with no argument.</source>
          <target state="translated">ステートメント<ph id="ph1">`Return allOnes()`</ph>を呼び出す可能性があるため、コンパイラ エラーが発生<ph id="ph2">`allOnes`</ph>引数なしでします。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Correct Approach:<ept id="p1">**</ept> To be able to modify the elements of an array that is to be returned, define an internal array as a local variable.</source>
          <target state="translated"><bpt id="p1">**</bpt>適切なアプローチ。<ept id="p1">**</ept>が返される配列の要素を変更できるようにするには、ローカル変数として内部の配列を定義します。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The following example compiles without error.</source>
          <target state="translated">次の例では、コンパイル エラーが発生します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnProcedures#66<ept id="p2">](./codesnippet/VisualBasic/troubleshooting-procedures_1.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnProcedures #&amp;66;<ept id="p2">](./codesnippet/VisualBasic/troubleshooting-procedures_1.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Argument Not Being Modified by Procedure Call</source>
          <target state="translated">引数は変更されていないプロシージャ呼び出しで</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If you intend to allow a procedure to change a programming element underlying an argument in the calling code, you must pass it by reference.</source>
          <target state="translated">呼び出し元のコードで引数を基になるプログラミングの要素を変更する手順を許可する場合は、参照によって渡す必要があります。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>But a procedure can access the elements of a reference type argument even if you pass it by value.</source>
          <target state="translated">値渡しで渡す場合でも、プロシージャが参照型の引数の要素をアクセスできます。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Underlying Variable<ept id="p1">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>変数を基になる<ept id="p1">**</ept>します。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>To allow the procedure to replace the value of the underlying variable element itself, the procedure must declare the parameter <bpt id="p1">[</bpt>ByRef<ept id="p1">](../../../../visual-basic/language-reference/modifiers/byref.md)</ept>.</source>
          <target state="translated">基になる変数要素自体の値を置き換えるための手順を許可するように、プロシージャには、パラメーターを宣言する必要があります<bpt id="p1">[</bpt>ByRef<ept id="p1">](../../../../visual-basic/language-reference/modifiers/byref.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Also, the calling code must not enclose the argument in parentheses, because that would override the <ph id="ph1">`ByRef`</ph> passing mechanism.</source>
          <target state="translated">また、呼び出し元のコードいない引数かっこで囲んでくださいをオーバーライドするため、<ph id="ph1">`ByRef`</ph>渡す機能します。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Reference Type Elements<ept id="p1">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>型の要素を参照する<ept id="p1">**</ept>です。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If you declare a parameter <bpt id="p1">[</bpt>ByVal<ept id="p1">](../../../../visual-basic/language-reference/modifiers/byval.md)</ept>, the procedure cannot modify the underlying variable element itself.</source>
          <target state="translated">パラメーターを宣言する場合は、 <bpt id="p1">[</bpt>ByVal<ept id="p1">](../../../../visual-basic/language-reference/modifiers/byval.md)</ept>プロシージャは、基になる変数要素自体を変更できません。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>However, if the argument is a reference type, the procedure can modify the members of the object to which it points, even though it cannot replace the variable's value.</source>
          <target state="translated">ただし、引数が参照型の場合、変数の値を置き換えることができない場合でも、プロシージャは、ポイントをするには、オブジェクトのメンバー変更できます。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For example, if the argument is an array variable, the procedure cannot assign a new array to it, but it can change one or more of its elements.</source>
          <target state="translated">たとえば、引数が、配列変数の場合は、プロシージャは、新しい配列を割り当てることはできませんが、1 つまたは複数の要素を変更することができます。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The changed elements are reflected in the underlying array variable in the calling code.</source>
          <target state="translated">変更された要素は、呼び出し元のコードで基になる配列変数に反映されます。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The following example defines two procedures that take an array variable by value and operate on its elements.</source>
          <target state="translated">次の例では、その要素の値によって、配列変数を実行して、操作を&amp;2; つの手順を定義します。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Procedure <ph id="ph1">`increase`</ph> simply adds one to each element.</source>
          <target state="translated">プロシージャ<ph id="ph1">`increase`</ph>単純に各要素に&amp;1; を追加します。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Procedure <ph id="ph1">`replace`</ph> assigns a new array to the parameter <ph id="ph2">`a()`</ph> and then adds one to each element.</source>
          <target state="translated">プロシージャ<ph id="ph1">`replace`</ph>パラメーターに新しい配列を割り当てます<ph id="ph2">`a()`</ph>し、各要素に&amp;1; を追加します。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>However, the reassignment does not affect the underlying array variable in the calling code because <ph id="ph1">`a()`</ph> is declared <ph id="ph2">`ByVal`</ph>.</source>
          <target state="translated">ただし、再割り当ては変わりません呼び出し元のコードで基になる配列変数のため<ph id="ph1">`a()`</ph>が宣言されている<ph id="ph2">`ByVal`</ph>します。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnProcedures#35<ept id="p2">](./codesnippet/VisualBasic/troubleshooting-procedures_2.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnProcedures&amp;#35;<ept id="p2">](./codesnippet/VisualBasic/troubleshooting-procedures_2.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnProcedures#38<ept id="p2">](./codesnippet/VisualBasic/troubleshooting-procedures_3.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnProcedures #&amp;38;<ept id="p2">](./codesnippet/VisualBasic/troubleshooting-procedures_3.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The following example makes calls to <ph id="ph1">`increase`</ph> and <ph id="ph2">`replace`</ph>.</source>
          <target state="translated">に対する呼び出しを次の例<ph id="ph1">`increase`</ph>と<ph id="ph2">`replace`</ph>です。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnProcedures#37<ept id="p2">](./codesnippet/VisualBasic/troubleshooting-procedures_4.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnProcedures #&amp;37;<ept id="p2">](./codesnippet/VisualBasic/troubleshooting-procedures_4.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The first <ph id="ph1">`MsgBox`</ph> call displays "After increase(n): 11, 21, 31, 41".</source>
          <target state="translated">最初の<ph id="ph1">`MsgBox`</ph>表示を呼び出して"increase(n) 後: 11、21、31、41"です。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">`n`</ph> is a reference type, <ph id="ph2">`increase`</ph> can change its members, even though it is passed <ph id="ph3">`ByVal`</ph>.</source>
          <target state="translated"><ph id="ph1">`n`</ph> 、参照型では、<ph id="ph2">`increase`</ph>が渡される場合でも、そのメンバーを変更できます<ph id="ph3">`ByVal`</ph>します。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The second <ph id="ph1">`MsgBox`</ph> call displays "After replace(n): 11, 21, 31, 41".</source>
          <target state="translated">2 番目<ph id="ph1">`MsgBox`</ph>表示を呼び出して"目後: 11、21、31、41"です。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">`n`</ph> is passed <ph id="ph2">`ByVal`</ph>, <ph id="ph3">`replace`</ph> cannot modify the variable <ph id="ph4">`n`</ph> by assigning a new array to it.</source>
          <target state="translated"><ph id="ph1">`n`</ph>は<ph id="ph2">`ByVal`</ph>、<ph id="ph3">`replace`</ph>変数を変更することはできません<ph id="ph4">`n`</ph>を新しい配列を割り当てることで。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`replace`</ph> creates the new array instance <ph id="ph2">`k`</ph> and assigns it to the local variable <ph id="ph3">`a`</ph>, it loses the reference to <ph id="ph4">`n`</ph> passed in by the calling code.</source>
          <target state="translated">ときに<ph id="ph1">`replace`</ph>配列の新しいインスタンスを作成<ph id="ph2">`k`</ph>し、ローカル変数に代入<ph id="ph3">`a`</ph>への参照が失われた<ph id="ph4">`n`</ph>して呼び出し元のコードに渡されます。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>When it increments the members of <ph id="ph1">`a`</ph>, only the local array <ph id="ph2">`k`</ph> is affected.</source>
          <target state="translated">メンバーをインクリメントして<ph id="ph1">`a`</ph>、ローカル配列のみ<ph id="ph2">`k`</ph>が影響を受けます。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Correct Approach:<ept id="p1">**</ept> To be able to modify an underlying variable element itself, pass it by reference.</source>
          <target state="translated"><bpt id="p1">**</bpt>適切なアプローチ。<ept id="p1">**</ept>を基になる変数要素自体を変更するには、参照渡しで渡します。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The following example shows the change in the declaration of <ph id="ph1">`replace`</ph> that allows it to replace one array with another in the calling code.</source>
          <target state="translated">次の例の宣言で、変更を表示する<ph id="ph1">`replace`</ph>を呼び出し元のコードの別の&amp;1; つの配列を置き換えるようになります。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnProcedures#64<ept id="p2">](./codesnippet/VisualBasic/troubleshooting-procedures_5.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnProcedures #&amp;64;<ept id="p2">](./codesnippet/VisualBasic/troubleshooting-procedures_5.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Unable to Define an Overload</source>
          <target state="translated">オーバー ロードを定義できません。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If you want to define an overloaded version of a procedure, you must use the same name but a different signature.</source>
          <target state="translated">プロシージャのオーバー ロードされたバージョンを定義する場合は、同じ名前で別の署名を使用する必要があります。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If the compiler cannot differentiate your declaration from an overload with the same signature, it generates an error.</source>
          <target state="translated">コンパイラは、同じシグネチャを持つオーバー ロードの宣言を区別することはできません、エラーを生成します。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>signature<ept id="p1">*</ept> of a procedure is determined by the procedure name and the parameter list.</source>
          <target state="translated"><bpt id="p1">*</bpt>署名<ept id="p1">*</ept>プロシージャのプロシージャ名とパラメーター リストによって決定されます。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Each overload must have the same name as all the other overloads but must differ from all of them in at least one of the other components of the signature.</source>
          <target state="translated">各オーバー ロードは、他のすべてのオーバー ロードと同じ名前である必要がありますが、署名の他のコンポーネントの少なくとも&amp;1; つにそれらすべてを異なる必要があります。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Procedure Overloading<ept id="p1">](./procedure-overloading.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>プロシージャのオーバー ロード<ept id="p1">](./procedure-overloading.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The following items, even though they pertain to the parameter list, are not components of a procedure's signature:</source>
          <target state="translated">次の項目場合でも、パラメーター リストには関係ないコンポーネントを示しますプロシージャの署名。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Procedure modifier keywords, such as <ph id="ph1">`Public`</ph>, <ph id="ph2">`Shared`</ph>, and <ph id="ph3">`Static`</ph></source>
          <target state="translated">プロシージャ修飾子のキーワードなど<ph id="ph1">`Public`</ph>、<ph id="ph2">`Shared`</ph>と<ph id="ph3">`Static`</ph></target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Parameter names</source>
          <target state="translated">パラメーター名</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Parameter modifier keywords, such as <ph id="ph1">`ByRef`</ph> and <ph id="ph2">`Optional`</ph></source>
          <target state="translated">パラメーター修飾子のキーワードなど<ph id="ph1">`ByRef`</ph>と<ph id="ph2">`Optional`</ph></target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The data type of the return value (except for a conversion operator)</source>
          <target state="translated">(変換演算子) を除く、戻り値のデータ型</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>You cannot overload a procedure by varying only one or more of the preceding items.</source>
          <target state="translated">プロシージャをオーバー ロードするだけで&amp;1; つ以上前の項目のことはできません。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Correct Approach:<ept id="p1">**</ept> To be able to define a procedure overload, you must vary the signature.</source>
          <target state="translated"><bpt id="p1">**</bpt>適切なアプローチ。<ept id="p1">**</ept>プロシージャのオーバー ロードを定義できるようにするには、署名を変更する必要があります。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Because you must use the same name, you must vary the number, order, or data types of the parameters.</source>
          <target state="translated">同じ名前を使用する必要がありますので、数、順序、またはパラメーターのデータ型を変更しなければなりません。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>In a generic procedure, you can vary the number of type parameters.</source>
          <target state="translated">ジェネリック プロシージャでは、型パラメーターの数を変更できます。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>In a conversion operator (<bpt id="p1">[</bpt>CType Function<ept id="p1">](../../../../visual-basic/language-reference/functions/ctype-function.md)</ept>), you can vary the return type.</source>
          <target state="translated">変換演算子で (<bpt id="p1">[</bpt>CType 関数<ept id="p1">](../../../../visual-basic/language-reference/functions/ctype-function.md)</ept>)、戻り値の型を変更することができます。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Overload Resolution with Optional and ParamArray Arguments</source>
          <target state="translated">省略可能な解像度と ParamArray 引数をオーバー ロードします。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>If you are overloading a procedure with one or more <bpt id="p1">[</bpt>Optional<ept id="p1">](../../../../visual-basic/language-reference/modifiers/optional.md)</ept> parameters or a <bpt id="p2">[</bpt>ParamArray<ept id="p2">](../../../../visual-basic/language-reference/modifiers/paramarray.md)</ept> parameter, you must avoid duplicating any of the <bpt id="p3">*</bpt>implicit overloads<ept id="p3">*</ept>.</source>
          <target state="translated">1 つまたは複数のプロシージャをオーバー ロードは場合<bpt id="p1">[</bpt>省略可能<ept id="p1">](../../../../visual-basic/language-reference/modifiers/optional.md)</ept>パラメーターまたは<bpt id="p2">[</bpt>ParamArray<ept id="p2">](../../../../visual-basic/language-reference/modifiers/paramarray.md)</ept>パラメーターのいずれかの複製避ける必要があります、<bpt id="p3">*</bpt>暗黙のオーバー ロード<ept id="p3">*</ept>します。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>For information, see <bpt id="p1">[</bpt>Considerations in Overloading Procedures<ept id="p1">](./considerations-in-overloading-procedures.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>プロシージャのオーバー ロードでの考慮事項<ept id="p1">](./considerations-in-overloading-procedures.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Calling a Wrong Version of an Overloaded Procedure</source>
          <target state="translated">オーバー ロードされたプロシージャの間違ったバージョンの呼び出し</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>If a procedure has several overloaded versions, you should be familiar with all their parameter lists and understand how <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> resolves calls among the overloads.</source>
          <target state="translated">プロシージャにいくつかのオーバー ロードされたバージョンがある場合、すべてのパラメーター リストを理解しておく理解しておいてください方法<ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>オーバー ロード間の呼び出しを解決します。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Otherwise you could call an overload other than the intended one.</source>
          <target state="translated">それ以外の場合、意図したものではないオーバー ロードを呼び出す可能性があります。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>When you have determined which overload you want to call, be careful to observe the following rules:</source>
          <target state="translated">どのオーバー ロードを呼び出そうとするを決定するには、次の規則に従うように注意します。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Supply the correct number of arguments, and in the correct order.</source>
          <target state="translated">引数、および正しい順序で、正確な数を指定します。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Ideally, your arguments should have the exact same data types as the corresponding parameters.</source>
          <target state="translated">理想的には、引数には、対応するパラメーターとまったく同じデータ型が必要です。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>In any case, the data type of each argument must widen to that of its corresponding parameter.</source>
          <target state="translated">いずれの場合は、各引数のデータ型は、対応するパラメーターに拡大変換する必要があります。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>This is true even with the <bpt id="p1">[</bpt>Option Strict Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/option-strict-statement.md)</ept> set to <ph id="ph1">`Off`</ph>.</source>
          <target state="translated">これは、true の場合でも、 <bpt id="p1">[</bpt>Option Strict ステートメント<ept id="p1">](../../../../visual-basic/language-reference/statements/option-strict-statement.md)</ept>に設定<ph id="ph1">`Off`</ph>します。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>If an overload requires any narrowing conversion from your argument list, that overload is not eligible to be called.</source>
          <target state="translated">オーバー ロードをオーバー ロードする引数リストから任意の縮小変換が必要な場合は、呼び出される対象ではありません。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>If you supply arguments that require widening, make their data types as close as possible to the corresponding parameter data types.</source>
          <target state="translated">拡大変換で必要な引数を指定する場合は、対応するパラメーターのデータ型にできるだけ近くにそのデータ型を確認します。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>If two or more overloads accept your argument data types, the compiler resolves your call to the overload that calls for the least amount of widening.</source>
          <target state="translated">2 つまたは複数のオーバー ロードは、引数のデータ型を受け取る、コンパイラは、拡大の最低限の呼び出しのオーバー ロードの呼び出しを解決します。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>You can reduce the chance of data type mismatches by using the <bpt id="p1">[</bpt>CType Function<ept id="p1">](../../../../visual-basic/language-reference/functions/ctype-function.md)</ept> conversion keyword when preparing your arguments.</source>
          <target state="translated">データ型の不一致の可能性を低くにを使用して、 <bpt id="p1">[</bpt>CType 関数<ept id="p1">](../../../../visual-basic/language-reference/functions/ctype-function.md)</ept>引数を指定するとき、変換キーワードです。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Overload Resolution Failure</source>
          <target state="translated">オーバー ロードの解決に失敗しました。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>When you call an overloaded procedure, the compiler attempts to eliminate all but one of the overloads.</source>
          <target state="translated">オーバー ロードされたプロシージャを呼び出すときに、コンパイラは、オーバー ロードの&amp;1; つだけを削除しようとします。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>If it succeeds, it resolves the call to that overload.</source>
          <target state="translated">成功した場合は、そのオーバー ロードの呼び出しを解決します。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>If it eliminates all the overloads, or if it cannot reduce the eligible overloads to a single candidate, it generates an error.</source>
          <target state="translated">すべてのオーバー ロードを排除または、オーバー ロードの候補を&amp;1; つを減らすことができない場合は、エラーを生成します。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The following example illustrates the overload resolution process.</source>
          <target state="translated">次の例では、オーバー ロードの解決プロセスを示します。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnProcedures#62<ept id="p2">](./codesnippet/VisualBasic/troubleshooting-procedures_6.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnProcedures #&amp;62;<ept id="p2">](./codesnippet/VisualBasic/troubleshooting-procedures_6.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnProcedures#63<ept id="p2">](./codesnippet/VisualBasic/troubleshooting-procedures_7.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnProcedures #&amp;63;<ept id="p2">](./codesnippet/VisualBasic/troubleshooting-procedures_7.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>In the first call, the compiler eliminates the first overload because the type of the first argument (<ph id="ph1">`Short`</ph>) narrows to the type of the corresponding parameter (<ph id="ph2">`Byte`</ph>).</source>
          <target state="translated">最初の呼び出しで、コンパイラが最初のオーバー ロードを排除の最初の引数の型 (<ph id="ph1">`Short`</ph>) に対応するパラメーターの型を変更して (<ph id="ph2">`Byte`</ph>)。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>It then eliminates the third overload because each argument type in the second overload (<ph id="ph1">`Short`</ph> and <ph id="ph2">`Single`</ph>) widens to the corresponding type in the third overload (<ph id="ph3">`Integer`</ph> and <ph id="ph4">`Single`</ph>).</source>
          <target state="translated">次に除去&amp;3; 番目のオーバー ロードは、2 番目のオーバー ロードで各引数の型 (<ph id="ph1">`Short`</ph>と<ph id="ph2">`Single`</ph>)&amp;3; 番目のオーバー ロードでは、対応する型に拡大変換 (<ph id="ph3">`Integer`</ph>と<ph id="ph4">`Single`</ph>)。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The second overload requires less widening, so the compiler uses it for the call.</source>
          <target state="translated">2 番目のオーバー ロードが必要な拡大が少ないので、コンパイラは、呼び出しの使用します。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>In the second call, the compiler cannot eliminate any of the overloads on the basis of narrowing.</source>
          <target state="translated">2 番目の呼び出しで、コンパイラは縮小に基づいてオーバー ロードのいずれかを取り除くことはできません。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>It eliminates the third overload for the same reason as in the first call, because it can call the second overload with less widening of the argument types.</source>
          <target state="translated">除外した引数型の&amp;2; 番目のオーバー ロードを呼び出すことがあるため、最初の呼び出しと同様に、同じ理由から&amp;3; 番目のオーバー ロードを除外します。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>However, the compiler cannot resolve between the first and second overloads.</source>
          <target state="translated">ただし、コンパイラは、最初と&amp;2; 番目のオーバー ロードの間で解決できません。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Each has one defined parameter type that widens to the corresponding type in the other (<ph id="ph1">`Byte`</ph> to <ph id="ph2">`Short`</ph>, but <ph id="ph3">`Single`</ph> to <ph id="ph4">`Double`</ph>).</source>
          <target state="translated">もう一方で対応する型を拡張する&amp;1; つの定義済みパラメーターの型を持つ各 (<ph id="ph1">`Byte`</ph>に<ph id="ph2">`Short`</ph>が<ph id="ph3">`Single`</ph>に<ph id="ph4">`Double`</ph>)。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The compiler therefore generates an overload resolution error.</source>
          <target state="translated">そのため、コンパイラは、オーバー ロードの解決エラーを生成します。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Correct Approach:<ept id="p1">**</ept> To be able to call an overloaded procedure without ambiguity, use <bpt id="p2">[</bpt>CType Function<ept id="p2">](../../../../visual-basic/language-reference/functions/ctype-function.md)</ept> to match the argument data types to the parameter types.</source>
          <target state="translated"><bpt id="p1">**</bpt>適切なアプローチ。<ept id="p1">**</ept>あいまいさなしのオーバー ロードされたプロシージャを呼び出すには、次のように使用します。 <bpt id="p2">[</bpt>CType 関数<ept id="p2">](../../../../visual-basic/language-reference/functions/ctype-function.md)</ept>パラメーターの型への引数のデータ型を一致するようにします。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The following example shows a call to <ph id="ph1">`z`</ph> that forces resolution to the second overload.</source>
          <target state="translated">次の例では、呼び出しを<ph id="ph1">`z`</ph>を強制的に&amp;2; 番目のオーバー ロードを解決します。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnProcedures#65<ept id="p2">](./codesnippet/VisualBasic/troubleshooting-procedures_8.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnProcedures #&amp;65;<ept id="p2">](./codesnippet/VisualBasic/troubleshooting-procedures_8.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Overload Resolution with Optional and ParamArray Arguments</source>
          <target state="translated">省略可能な解像度と ParamArray 引数をオーバー ロードします。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>If two overloads of a procedure have identical signatures except that the last parameter is declared <bpt id="p1">[</bpt>Optional<ept id="p1">](../../../../visual-basic/language-reference/modifiers/optional.md)</ept> in one and <bpt id="p2">[</bpt>ParamArray<ept id="p2">](../../../../visual-basic/language-reference/modifiers/paramarray.md)</ept> in the other, the compiler resolves a call to that procedure according to the closest match.</source>
          <target state="translated">最後のパラメーターを宣言する点を除いて、プロシージャの&amp;2; つのオーバー ロードと同じシグネチャを持つ場合<bpt id="p1">[</bpt>省略可能<ept id="p1">](../../../../visual-basic/language-reference/modifiers/optional.md)</ept>いずれかでと<bpt id="p2">[</bpt>ParamArray<ept id="p2">](../../../../visual-basic/language-reference/modifiers/paramarray.md)</ept> 、もう一方で、コンパイラは、最も近いに従ってそのプロシージャを呼び出すを解決します。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Overload Resolution<ept id="p1">](./overload-resolution.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>オーバー ロード解決<ept id="p1">](./overload-resolution.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">関連項目</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Procedures<ept id="p1">](./index.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>手順<ept id="p1">](./index.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Sub Procedures<ept id="p1">](./sub-procedures.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Sub プロシージャ<ept id="p1">](./sub-procedures.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Function Procedures<ept id="p1">](./function-procedures.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Function プロシージャ<ept id="p1">](./function-procedures.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Property Procedures<ept id="p1">](./property-procedures.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>プロパティ プロシージャ<ept id="p1">](./property-procedures.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Operator Procedures<ept id="p1">](./operator-procedures.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>演算子プロシージャ<ept id="p1">](./operator-procedures.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Procedure Parameters and Arguments<ept id="p1">](./procedure-parameters-and-arguments.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>プロシージャのパラメーターと引数<ept id="p1">](./procedure-parameters-and-arguments.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Procedure Overloading<ept id="p1">](./procedure-overloading.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>プロシージャのオーバー ロード<ept id="p1">](./procedure-overloading.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Considerations in Overloading Procedures<ept id="p1">](./considerations-in-overloading-procedures.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>プロシージャのオーバー ロードに関する考慮事項<ept id="p1">](./considerations-in-overloading-procedures.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Overload Resolution<ept id="p1">](./overload-resolution.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>オーバーロードの解決<ept id="p1">](./overload-resolution.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>