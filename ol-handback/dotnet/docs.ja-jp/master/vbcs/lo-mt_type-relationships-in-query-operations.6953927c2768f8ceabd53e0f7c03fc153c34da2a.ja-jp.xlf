<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a966b69feca7a7021cafbccb7971913ea781c479</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\linq\type-relationships-in-query-operations.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">67448ac455263820f6bf6c4aa5dedfa148279d20</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f11474c2b7d5eb9902484fd122f08ef7743f0509</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Type Relationships in Query Operations (Visual Basic) | Microsoft Docs</source>
          <target state="translated">クエリ操作 (Visual Basic) でリレーションシップを入力 |Microsoft ドキュメント</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Type Relationships in Query Operations (Visual Basic)</source>
          <target state="translated">クエリ操作での型の関係 (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Variables used in <ph id="ph1">[!INCLUDE[vbteclinqext](../../../../csharp/getting-started/includes/vbteclinqext_md.md)]</ph> query operations are strongly typed and must be compatible with each other.</source>
          <target state="translated">使用される変数<ph id="ph1">[!INCLUDE[vbteclinqext](../../../../csharp/getting-started/includes/vbteclinqext_md.md)]</ph>クエリ操作は、厳密に型指定し、相互に互換性がある必要があります。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Strong typing is used in the data source, in the query itself, and in the query execution.</source>
          <target state="translated">厳密な型指定は、データ ソース、クエリ自体、およびクエリの実行に使用されます。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The following illustration identifies terms used to describe a <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> query.</source>
          <target state="translated">次の図は、説明に使用される用語の識別、<ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph>クエリ。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For more information about the parts of a query, see <bpt id="p1">[</bpt>Basic Query Operations (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/basic-query-operations.md)</ept>.</source>
          <target state="translated">クエリの部分の詳細については、次を参照してください。<bpt id="p1">[</bpt>基本的なクエリ操作 (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/basic-query-operations.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Pseudocode query with elements highlighted.<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/media/sjltyperels.png "SJLtypeRels")</ept></source>
          <target state="translated"><bpt id="p1">![</bpt>要素が強調表示された擬似コード クエリ。<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/media/sjltyperels.png "SJLtypeRels")</ept></target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Parts of a LINQ query</source>
          <target state="translated">LINQ クエリの部分</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The type of the range variable in the query must be compatible with the type of the elements in the data source.</source>
          <target state="translated">クエリの範囲変数の型のデータ ソース内の要素の型と互換性があります。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The type of the query variable must be compatible with the sequence element defined in the <ph id="ph1">`Select`</ph> clause.</source>
          <target state="translated">クエリ変数の型と互換性があるシーケンスの要素で定義されている、<ph id="ph1">`Select`</ph>句。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Finally, the type of the sequence elements also must be compatible with the type of the loop control variable that is used in the <ph id="ph1">`For Each`</ph> statement that executes the query.</source>
          <target state="translated">最後に、シーケンスの要素の型もする必要がありますで使用されているループ制御変数の型と互換性のある、<ph id="ph1">`For Each`</ph>クエリを実行するステートメントです。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This strong typing facilitates identification of type errors at compile time.</source>
          <target state="translated">この厳密な型指定すると、コンパイル時に型のエラーの識別が容易になります。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> makes strong typing convenient by implementing local type inference, also known as <bpt id="p1">*</bpt>implicit typing<ept id="p1">*</ept>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>により、厳密な型指定便利とも呼ばれるローカル型推論を実装することによって<bpt id="p1">*</bpt>暗黙の型指定<ept id="p1">*</ept>します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>That feature is used in the previous example, and you will see it used throughout the <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> samples and documentation.</source>
          <target state="translated">機能は、前の例で使用して、全体で使用されることが表示されます、<ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph>サンプルとドキュメントです。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In Visual Basic, local type inference is accomplished simply by using a <ph id="ph1">`Dim`</ph> statement without an <ph id="ph2">`As`</ph> clause.</source>
          <target state="translated">Visual basic でローカル型推論を使用するだけで完了、<ph id="ph1">`Dim`</ph>せずステートメント、<ph id="ph2">`As`</ph>句。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In the following example, <ph id="ph1">`city`</ph> is strongly typed as a string.</source>
          <target state="translated">次の例で<ph id="ph1">`city`</ph>を文字列として厳密に型指定します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQTypeRels#1<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/type-relationships-in-query-operations_1.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQTypeRels&amp;#1;<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/type-relationships-in-query-operations_1.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Local type inference works only when <ph id="ph1">`Option Infer`</ph> is set to <ph id="ph2">`On`</ph>.</source>
          <target state="translated">ローカル型推論場合にのみの機能<ph id="ph1">`Option Infer`</ph>に設定されている<ph id="ph2">`On`</ph>します。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Option Infer Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/option-infer-statement.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。 <bpt id="p1">[</bpt>Option Infer ステートメント<ept id="p1">](../../../../visual-basic/language-reference/statements/option-infer-statement.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>However, even if you use local type inference in a query, the same type relationships are present among the variables in the data source, the query variable, and the query execution loop.</source>
          <target state="translated">ただし、クエリでローカル型推論を使用する場合でも、同じ型の関係がデータ ソース内の変数、クエリ変数、およびクエリの実行ループの間存在します。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>It is useful to have a basic understanding of these type relationships when you are writing <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> queries, or working with the samples and code examples in the documentation.</source>
          <target state="translated">作成しているときにこれらの型の関係の基本を理解するおくと便利です<ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph>クエリ、またはサンプルとドキュメントのコード例を使用します。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>You may need to specify an explicit type for a range variable that does not match the type returned from the data source.</source>
          <target state="translated">たとえば、データ ソースから返される型に一致しない範囲変数の明示的な型を指定する必要があります。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You can specify the type of the range variable by using an <ph id="ph1">`As`</ph> clause.</source>
          <target state="translated">範囲変数の型を指定するにを使用して、<ph id="ph1">`As`</ph>句。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>However, this results in an error if the conversion is a <bpt id="p1">[</bpt>narrowing conversion<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md)</ept> and <ph id="ph1">`Option Strict`</ph> is set to <ph id="ph2">`On`</ph>.</source>
          <target state="translated">その結果、エラーに変換すると、<bpt id="p1">[</bpt>縮小変換<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md)</ept>と<ph id="ph1">`Option Strict`</ph>に設定されている<ph id="ph2">`On`</ph>します。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Therefore, we recommend that you perform the conversion on the values retrieved from the data source.</source>
          <target state="translated">そのため、データ ソースから取得した値を変換を実行することをお勧めします。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You can convert the values from the data source to the explicit range variable type by using the &lt;xref:System.Linq.Enumerable.Cast%2A&gt; method.</source>
          <target state="translated">使用して明示的な範囲変数の型へのデータ ソースからの値を変換することができます、&lt;xref:System.Linq.Enumerable.Cast%2A&gt;メソッド&lt;/xref:System.Linq.Enumerable.Cast%2A&gt;。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>You can also cast the values selected in the <ph id="ph1">`Select`</ph> clause to an explicit type that is different from the type of the range variable.</source>
          <target state="translated">選択した値をキャストすることも、<ph id="ph1">`Select`</ph>句の範囲変数の型に違いは、明示的な型にします。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>These points are illustrated in the following code.</source>
          <target state="translated">これらのポイントは、次のコードに示します。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQTypeRels#4<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/type-relationships-in-query-operations_2.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQTypeRels&amp;4;<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/type-relationships-in-query-operations_2.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Queries That Return Entire Elements of the Source Data</source>
          <target state="translated">ソース データの全体の要素を返すクエリ</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The following example shows a <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> query operation that returns a sequence of elements selected from the source data.</source>
          <target state="translated">例を次に、<ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph>をソース データから選択した要素のシーケンスを返す操作のクエリを実行します。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The source, <ph id="ph1">`names`</ph>, contains an array of strings, and the query output is a sequence containing strings that start with the letter M.</source>
          <target state="translated">ソース<ph id="ph1">`names`</ph>文字列の配列が含まれていて、クエリの出力は次の文字 M で始まる文字列を含むシーケンスです。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQTypeRels#2<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/type-relationships-in-query-operations_3.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQTypeRels&amp;#2;<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/type-relationships-in-query-operations_3.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This is equivalent to the following code, but is much shorter and easier to write.</source>
          <target state="translated">これは、次のコードに相当がより短く、簡単に記述します。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Reliance on local type inference in queries is the preferred style in Visual Basic.</source>
          <target state="translated">クエリでローカル型推論に依存するいるとは、Visual Basic では優先スタイルです。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQTypeRels#3<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/type-relationships-in-query-operations_4.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQTypeRels&amp;#3;<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/type-relationships-in-query-operations_4.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The following relationships exist in both of the previous code examples, whether the types are determined implicitly or explicitly.</source>
          <target state="translated">次のリレーションシップは、明示的または暗黙的に型が表示されるかどうか、前のコード例の両方に存在します。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The type of the elements in the data source, <ph id="ph1">`names`</ph>, is the type of the range variable, <ph id="ph2">`name`</ph>, in the query.</source>
          <target state="translated">データ ソース内の要素の種類<ph id="ph1">`names`</ph>、範囲変数の型は、<ph id="ph2">`name`</ph>クエリにします。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The type of the object that is selected, <ph id="ph1">`name`</ph>, determines the type of the query variable, <ph id="ph2">`mNames`</ph>.</source>
          <target state="translated">選択されているオブジェクトの種類<ph id="ph1">`name`</ph>、クエリ変数の種類を決定<ph id="ph2">`mNames`</ph>します。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Here <ph id="ph1">`name`</ph> is a string, so the query variable is IEnumerable(Of String) in Visual Basic.</source>
          <target state="translated">ここで<ph id="ph1">`name`</ph>は文字列であるため、クエリ変数は Visual Basic での IEnumerable (Of String)。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The query defined in <ph id="ph1">`mNames`</ph> is executed in the <ph id="ph2">`For Each`</ph> loop.</source>
          <target state="translated">定義されたクエリ<ph id="ph1">`mNames`</ph>で実行される、<ph id="ph2">`For Each`</ph>ループします。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The loop iterates over the result of executing the query.</source>
          <target state="translated">ループは、クエリの実行の結果を反復処理します。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">`mNames`</ph>, when it is executed, will return a sequence of strings, the loop iteration variable, <ph id="ph2">`nm`</ph>, also is a string.</source>
          <target state="translated"><ph id="ph1">`mNames`</ph>が実行されるときに、ループの反復変数の文字列のシーケンスを返す<ph id="ph2">`nm`</ph>も文字列です。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Queries That Return One Field from Selected Elements</source>
          <target state="translated">選択した要素から&amp;1; つのフィールドを取得するクエリ</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The following example shows a <ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../csharp/includes/vbtecdlinq_md.md)]</ph> query operation that returns a sequence containing only one part of each element selected from the data source.</source>
          <target state="translated">例を次に、<ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../csharp/includes/vbtecdlinq_md.md)]</ph>クエリ データ ソースから選択された各要素の&amp;1; つだけのパーツを含むシーケンスを返す操作。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The query takes a collection of <ph id="ph1">`Customer`</ph> objects as its data source and projects only the <ph id="ph2">`Name`</ph> property in the result.</source>
          <target state="translated">クエリのコレクションを受け取って<ph id="ph1">`Customer`</ph>、データ ソースとしてオブジェクトし、プロジェクトのみ、<ph id="ph2">`Name`</ph>プロパティを結果にします。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Because the customer name is a string, the query produces a sequence of strings as output.</source>
          <target state="translated">顧客名は文字列であるため、クエリは、出力として文字列のシーケンスを生成します。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>0<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>0<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The relationships between variables are like those in the simpler example.</source>
          <target state="translated">変数間のリレーションシップは、単純な例のようです。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The type of the elements in the data source, <ph id="ph1">`customers`</ph>, is the type of the range variable, <ph id="ph2">`cust`</ph>, in the query.</source>
          <target state="translated">データ ソース内の要素の種類<ph id="ph1">`customers`</ph>、範囲変数の型は、<ph id="ph2">`cust`</ph>クエリにします。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>In this example, that type is <ph id="ph1">`Customer`</ph>.</source>
          <target state="translated">型であるこの例では<ph id="ph1">`Customer`</ph>です。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Select`</ph> statement returns the <ph id="ph2">`Name`</ph> property of each <ph id="ph3">`Customer`</ph> object instead of the whole object.</source>
          <target state="translated"><ph id="ph1">`Select`</ph>ステートメントから返される、<ph id="ph2">`Name`</ph>の各プロパティ<ph id="ph3">`Customer`</ph>オブジェクト全体ではなくオブジェクトです。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">`Name`</ph> is a string, the query variable, <ph id="ph2">`custNames`</ph>, will again be IEnumerable(Of String), not of <ph id="ph3">`Customer`</ph>.</source>
          <target state="translated"><ph id="ph1">`Name`</ph>文字列であり、クエリ変数<ph id="ph2">`custNames`</ph>、もう一度されません IEnumerable (Of String) の<ph id="ph3">`Customer`</ph>です。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">`custNames`</ph> represents a sequence of strings, the <ph id="ph2">`For Each`</ph> loop's iteration variable, <ph id="ph3">`custName`</ph>, must be a string.</source>
          <target state="translated"><ph id="ph1">`custNames`</ph> 、文字列のシーケンスを表し、<ph id="ph2">`For Each`</ph>ループの反復変数<ph id="ph3">`custName`</ph>文字列である必要があります。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Without local type inference, the previous example would be more cumbersome to write and to understand, as the following example shows.</source>
          <target state="translated">ローカル型推論では、前の例がなければを記述し、詳細については、次の例のようには煩雑です。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>1<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>1<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Queries That Require Anonymous Types</source>
          <target state="translated">匿名型を必要とするクエリ</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The following example shows a more complex situation.</source>
          <target state="translated">次の例より複雑な状況を示しています。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>In the previous example, it was inconvenient to specify types for all the variables explicitly.</source>
          <target state="translated">前の例では、すべての変数の型を明示的に指定するときに便利でした。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>In this example, it is impossible.</source>
          <target state="translated">この例ではことはできません。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Instead of selecting entire <ph id="ph1">`Customer`</ph> elements from the data source, or a single field from each element, the <ph id="ph2">`Select`</ph> clause in this query returns two properties of the original <ph id="ph3">`Customer`</ph> object: <ph id="ph4">`Name`</ph> and <ph id="ph5">`City`</ph>.</source>
          <target state="translated">全体を選択する代わりに<ph id="ph1">`Customer`</ph>データ ソースまたは各要素から&amp;1; つのフィールドから要素、<ph id="ph2">`Select`</ph>このクエリで句は、元の&amp;2; つのプロパティを返します<ph id="ph3">`Customer`</ph>オブジェクト:<ph id="ph4">`Name`</ph>と<ph id="ph5">`City`</ph>です。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>In response to the <ph id="ph1">`Select`</ph> clause, the compiler defines an anonymous type that contains those two properties.</source>
          <target state="translated">応答で、<ph id="ph1">`Select`</ph>句、コンパイラはこれら&amp;2; つのプロパティを含む匿名型を定義します。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The result of executing <ph id="ph1">`nameCityQuery`</ph> in the <ph id="ph2">`For Each`</ph> loop is a collection of instances of the new anonymous type.</source>
          <target state="translated">実行した結果<ph id="ph1">`nameCityQuery`</ph>で、<ph id="ph2">`For Each`</ph>ループは新しい匿名型のインスタンスのコレクション。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Because the anonymous type has no usable name, you cannot specify the type of <ph id="ph1">`nameCityQuery`</ph> or <ph id="ph2">`custInfo`</ph> explicitly.</source>
          <target state="translated">匿名型に使用可能な名前があるないためにの種類を指定することはできません<ph id="ph1">`nameCityQuery`</ph>または<ph id="ph2">`custInfo`</ph>明示的にします。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>That is, with an anonymous type, you have no type name to use in place of <ph id="ph1">`String`</ph> in <ph id="ph2">`IEnumerable(Of String)`</ph>.</source>
          <target state="translated">匿名の型のない型の名前があるの代わりに使用する<ph id="ph1">`String`</ph>で<ph id="ph2">`IEnumerable(Of String)`</ph>します。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Anonymous Types<ept id="p1">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/anonymous-types.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>匿名型<ept id="p1">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/anonymous-types.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>2<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>2<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Although it is not possible to specify types for all the variables in the previous example, the relationships remain the same.</source>
          <target state="translated">前の例で、すべての変数の型を指定することはありませんが、リレーションシップが同じになります。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The type of the elements in the data source is again the type of the range variable in the query.</source>
          <target state="translated">データ ソース内の要素の型は、クエリの範囲変数の型ではもう一度です。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>In this example, <ph id="ph1">`cust`</ph> is an instance of <ph id="ph2">`Customer`</ph>.</source>
          <target state="translated">この例では<ph id="ph1">`cust`</ph>のインスタンスは、<ph id="ph2">`Customer`</ph>です。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Because the <ph id="ph1">`Select`</ph> statement produces an anonymous type, the query variable, <ph id="ph2">`nameCityQuery`</ph>, must be implicitly typed as an anonymous type.</source>
          <target state="translated"><ph id="ph1">`Select`</ph>ステートメントは、匿名型をクエリ変数を生成する<ph id="ph2">`nameCityQuery`</ph>、匿名型として暗黙的に型指定する必要があります。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>An anonymous type has no usable name, and therefore cannot be specified explicitly.</source>
          <target state="translated">匿名型は、使用可能な名前を持たず、したがって、明示的に指定することはできません。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The type of the iteration variable in the <ph id="ph1">`For Each`</ph> loop is the anonymous type created in step 2.</source>
          <target state="translated">反復変数の種類、<ph id="ph1">`For Each`</ph>ループは、手順 2. で作成された匿名型。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Because the type has no usable name, the type of the loop iteration variable must be determined implicitly.</source>
          <target state="translated">型に使用可能な名前があるないために、ループの反復変数の型は暗黙的に決定する必要があります。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">関連項目</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Getting Started with LINQ in Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/getting-started-with-linq.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Visual Basic における LINQ の概要<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/getting-started-with-linq.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Anonymous Types<ept id="p1">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/anonymous-types.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>匿名型<ept id="p1">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/anonymous-types.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Local Type Inference<ept id="p1">](../../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>ローカル型推論<ept id="p1">](../../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Introduction to LINQ in Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/language-features/linq/introduction-to-linq.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Visual Basic における LINQ の概要<ept id="p1">](../../../../visual-basic/programming-guide/language-features/linq/introduction-to-linq.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>LINQ<ept id="p1">](../../../../visual-basic/programming-guide/language-features/linq/index.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>LINQ<ept id="p1">](../../../../visual-basic/programming-guide/language-features/linq/index.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Queries<ept id="p1">](../../../../visual-basic/language-reference/queries/queries.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>クエリ<ept id="p1">](../../../../visual-basic/language-reference/queries/queries.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>