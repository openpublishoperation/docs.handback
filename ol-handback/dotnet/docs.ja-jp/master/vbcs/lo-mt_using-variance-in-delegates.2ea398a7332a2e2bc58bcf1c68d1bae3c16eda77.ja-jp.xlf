<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5bd3e60031eac713cee3dee1399af8c6b83e6656</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\covariance-contravariance\using-variance-in-delegates.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">da3d1d443910e29d2be6c15786dcc5d5471390a6</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e5279c4389a8de6b292dfedf13aa06ba8d70a2d9</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Using Variance in Delegates (Visual Basic) | Microsoft Docs</source>
          <target state="translated">デリゲート (Visual Basic) の分散の使用 |Microsoft ドキュメント</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Using Variance in Delegates (Visual Basic)</source>
          <target state="translated">デリゲート (Visual Basic) の分散の使用</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>When you assign a method to a delegate, <bpt id="p1">*</bpt>covariance<ept id="p1">*</ept> and <bpt id="p2">*</bpt>contravariance<ept id="p2">*</ept> provide flexibility for matching a delegate type with a method signature.</source>
          <target state="translated">デリゲートにメソッドを割り当てるときに<bpt id="p1">*</bpt>共変性<ept id="p1">*</ept>と<bpt id="p2">*</bpt>反変性<ept id="p2">*</ept>メソッド シグネチャを持つデリゲート型に一致する柔軟性を提供します。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Covariance permits a method to have return type that is more derived than that defined in the delegate.</source>
          <target state="translated">ジェネリックの共変性は、メソッドのデリゲートで定義されているよりも強い派生は、戻り値の型を許可します。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Contravariance permits a method that has parameter types that are less derived than those in the delegate type.</source>
          <target state="translated">反変性により、デリゲート型の場合よりも弱い派生パラメーター型を持つメソッドです。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Example 1: Covariance</source>
          <target state="translated">例 1: 共変性</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">説明</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This example demonstrates how delegates can be used with methods that have return types that are derived from the return type in the delegate signature.</source>
          <target state="translated">この例では、デリゲート シグネチャの戻り値の型から派生した戻り値の型の方法でデリゲートを使用する方法を示します。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The data type returned by <ph id="ph1">`DogsHandler`</ph> is of type <ph id="ph2">`Dogs`</ph>, which derives from the <ph id="ph3">`Mammals`</ph> type that is defined in the delegate.</source>
          <target state="translated">によって返されるデータ型<ph id="ph1">`DogsHandler`</ph>型<ph id="ph2">`Dogs`</ph>から派生した、<ph id="ph3">`Mammals`</ph>デリゲートで定義されている型。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Code</source>
          <target state="translated">コード</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Example 2: Contravariance</source>
          <target state="translated">例 2: 反変性</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">説明</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This example demonstrates how delegates can be used with methods that have parameters of a type that are base types of the delegate signature parameter type.</source>
          <target state="translated">この例では、デリゲート シグネチャのパラメーターの型の基本型である型のパラメーターを持つメソッドでデリゲートを使用する方法を示します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>With contravariance, you can use one event handler instead of separate handlers.</source>
          <target state="translated">反変性により、複数のハンドラーではなく&amp;1; つのイベント ハンドラーを使用することができます。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For example, you can create an event handler that accepts an <ph id="ph1">`EventArgs`</ph> input parameter and use it with a <ph id="ph2">`Button.MouseClick`</ph> event that sends a <ph id="ph3">`MouseEventArgs`</ph> type as a parameter, and also with a <ph id="ph4">`TextBox.KeyDown`</ph> event that sends a <ph id="ph5">`KeyEventArgs`</ph> parameter.</source>
          <target state="translated">受け取るイベント ハンドラーを作成するなど、<ph id="ph1">`EventArgs`</ph>パラメーターを入力し、それを使用、<ph id="ph2">`Button.MouseClick`</ph>イベントを送信する、<ph id="ph3">`MouseEventArgs`</ph>型をパラメーターとして、さらに、<ph id="ph4">`TextBox.KeyDown`</ph>イベントを送信する、<ph id="ph5">`KeyEventArgs`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Code</source>
          <target state="translated">コード</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">関連項目</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Variance in Delegates (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/covariance-contravariance/variance-in-delegates.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>デリゲート (Visual Basic) の分散<ept id="p1">](../../../../visual-basic/programming-guide/concepts/covariance-contravariance/variance-in-delegates.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Using Variance for Func and Action Generic Delegates (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/covariance-contravariance/using-variance-for-func-and-action-generic-delegates.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>Func および Action 汎用デリゲート (Visual Basic) に対する分散の使用<ept id="p1">](../../../../visual-basic/programming-guide/concepts/covariance-contravariance/using-variance-for-func-and-action-generic-delegates.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>