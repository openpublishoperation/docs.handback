<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">48f1c5e15654580b6e4d060860a0d7001af5e2ef</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\linq\writing-your-first-linq-query.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5e792fa9816f1745f047873457d55c13f82ffcba</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">53fca02591400fbdd4a61e27e67bbe5a11f35068</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Writing Your First LINQ Query (Visual Basic) | Microsoft Docs</source>
          <target state="translated">初めて LINQ クエリ (Visual Basic) の作成 |Microsoft ドキュメント</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Writing Your First LINQ Query (Visual Basic)</source>
          <target state="translated">初めての LINQ クエリの作成 (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>query<ept id="p1">*</ept> is an expression that retrieves data from a data source.</source>
          <target state="translated">A<bpt id="p1">*</bpt>クエリ<ept id="p1">*</ept>データ ソースからデータを取得する式を指定します。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Queries are expressed in a dedicated query language.</source>
          <target state="translated">クエリは専用のクエリ言語で表されます。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Over time, different languages have been developed for different types of data sources, for example, SQL for relational databases and XQuery for XML.</source>
          <target state="translated">時間の経過と共にさまざまな言語に合わせて開発されたデータ ソースの種類などのリレーショナル データベース用の SQL や XML 用の XQuery です。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This makes it necessary for the application developer to learn a new query language for each type of data source or data format that is supported.</source>
          <target state="translated">これにより、データ ソースまたはサポートされているデータ形式の種類ごとに新しいクエリ言語を習得するアプリケーション開発者にとって必要です。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbteclinqext](../../../../csharp/getting-started/includes/vbteclinqext_md.md)]</ph> simplifies the situation by offering a consistent model for working with data across various kinds of data sources and formats.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vbteclinqext](../../../../csharp/getting-started/includes/vbteclinqext_md.md)]</ph>データ ソースや形式のさまざまな種類のデータを操作するための一貫したモデルを提供することで、状態の情報を簡単になります。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In a <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> query, you are always working with objects.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> クエリでは、操作の対象は常にオブジェクトになります。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You use the same basic coding patterns to query and transform data in XML documents, SQL databases, ADO.NET datasets and entities, .NET Framework collections, and any other source or format for which a <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> provider is available.</source>
          <target state="translated">同じ基本的なコーディング パターンを使用して、クエリの XML ドキュメント内のデータ、SQL データベース、ADO.NET データセット、エンティティ、.NET Framework のコレクションと、その他のソースや形式を変換する、<ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph>プロバイダーは、使用できます。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This document describes the three phases of the creation and use of basic <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> queries.</source>
          <target state="translated">このドキュメントは、3 つのフェーズの作成と basic の使用について説明します。<ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph>クエリ。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Three Stages of a Query Operation</source>
          <target state="translated">クエリ操作の&amp;3; つの段階</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> query operations consist of three actions:</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph>クエリ操作は、3 つのアクションで構成されます。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Obtain the data source or sources.</source>
          <target state="translated">データ ソースをソースを取得します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Create the query.</source>
          <target state="translated">クエリを作成します。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Execute the query.</source>
          <target state="translated">クエリを実行します。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph>, the execution of a query is distinct from the creation of the query.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph>クエリの実行は、クエリの作成とは異なります。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You do not retrieve any data just by creating a query.</source>
          <target state="translated">クエリを作成するだけでは、すべてのデータは取得しません。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This point is discussed in more detail later in this topic.</source>
          <target state="translated">このポイントは、このトピックで後で詳しく説明します。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The following example illustrates the three parts of a query operation.</source>
          <target state="translated">次の例は、クエリ操作の&amp;3; つの部分を示しています。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The example uses an array of integers as a convenient data source for demonstration purposes.</source>
          <target state="translated">例では、デモンストレーションを目的としての有用なデータ ソースとして整数の配列を使用します。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>However, the same concepts also apply to other data sources.</source>
          <target state="translated">ただし、同じ概念は、他のデータ ソースにも適用されます。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">[</bpt>Compile Page, Project Designer (Visual Basic)<ept id="p1">](https://docs.microsoft.com/visualstudio/ide/reference/compile-page-project-designer-visual-basic)</ept>, ensure that <bpt id="p2">**</bpt>Option infer<ept id="p2">**</ept> is set to <bpt id="p3">**</bpt>On<ept id="p3">**</ept>.</source>
          <target state="translated"><bpt id="p1">[</bpt>コンパイル ページで、プロジェクト デザイナー) (Visual Basic)<ept id="p1">](https://docs.microsoft.com/visualstudio/ide/reference/compile-page-project-designer-visual-basic)</ept>、いることを確認<bpt id="p2">**</bpt>Option infer<ept id="p2">**</ept>に設定されている<bpt id="p3">**</bpt>に<ept id="p3">**</ept>します。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQFirstQuery#1<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/writing-your-first-linq-query_1.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQFirstQuery&amp;#1;<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/writing-your-first-linq-query_1.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Output:</source>
          <target state="translated">Output:</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The Data Source</source>
          <target state="translated">データ ソース</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Because the data source in the previous example is an array, it implicitly supports the generic &lt;xref:System.Collections.Generic.IEnumerable%601&gt; interface.</source>
          <target state="translated">暗黙的にジェネリックをサポート前の例では、データ ソースが配列であるため、&lt;xref:System.Collections.Generic.IEnumerable%601&gt;インターフェイス&lt;/xref:System.Collections.Generic.IEnumerable%601&gt;。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>It is this fact that enables you to use an array as a data source for a <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> query.</source>
          <target state="translated">このファクトのデータ ソースとして配列を使用することができますが、<ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph>クエリ。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Types that support &lt;xref:System.Collections.Generic.IEnumerable%601&gt; or a derived interface such as the generic &lt;xref:System.Linq.IQueryable%601&gt; are called <bpt id="p1">*</bpt>queryable types<ept id="p1">*</ept>.</source>
          <target state="translated">型をサポートする&lt;xref:System.Collections.Generic.IEnumerable%601&gt;またはジェネリックなどの派生インターフェイス&lt;xref:System.Linq.IQueryable%601&gt;と呼ばれます<bpt id="p1">*</bpt>クエリ可能型<ept id="p1">*</ept>&lt;/xref:System.Linq.IQueryable%601&gt;&lt;/xref:System.Collections.Generic.IEnumerable%601&gt;。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>As an implicitly queryable type, the array requires no modification or special treatment to serve as a <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> data source.</source>
          <target state="translated">暗黙的にクエリ可能な型として、配列は必要ありません変更や特別な処理として処理するために、<ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph>データ ソース。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The same is true for any collection type that supports &lt;xref:System.Collections.Generic.IEnumerable%601&gt;, including the generic &lt;xref:System.Collections.Generic.List%601&gt;, &lt;xref:System.Collections.Generic.Dictionary%602&gt;, and other classes in the .NET Framework class library.</source>
          <target state="translated">すべてのコレクション型をサポートしている場合も同様です&lt;xref:System.Collections.Generic.IEnumerable%601&gt;、ジェネリックを含む&lt;xref:System.Collections.Generic.List%601&gt;、 &lt;xref:System.Collections.Generic.Dictionary%602&gt;、および .NET Framework クラス ライブラリの他のクラス&lt;/xref:System.Collections.Generic.Dictionary%602&gt;&lt;/xref:System.Collections.Generic.List%601&gt;&lt;/xref:System.Collections.Generic.IEnumerable%601&gt;。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If the source data does not already implement &lt;xref:System.Collections.Generic.IEnumerable%601&gt;, a <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> provider is needed to implement the functionality of the <bpt id="p1">*</bpt>standard query operators<ept id="p1">*</ept> for that data source.</source>
          <target state="translated">ソース データが既に実装されていない場合&lt;xref:System.Collections.Generic.IEnumerable%601&gt;、<ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph>の機能を実装するプロバイダーが必要な<bpt id="p1">*</bpt>標準クエリ演算子<ept id="p1">*</ept>データ ソースのためです&lt;/xref:System.Collections.Generic.IEnumerable%601&gt;。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> handles the work of loading an XML document into a queryable &lt;xref:System.Xml.Linq.XElement&gt; type, as shown in the following example.</source>
          <target state="translated">たとえば、 <ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> 、クエリ可能な XML ドキュメントを読み込みの作業を行って&lt;xref:System.Xml.Linq.XElement&gt;の次の例に示すように入力します&lt;/xref:System.Xml.Linq.XElement&gt;。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For more information about standard query operators, see <bpt id="p1">[</bpt>Standard Query Operators Overview (Visual Basic)<ept id="p1">](standard-query-operators-overview.md)</ept>.</source>
          <target state="translated">標準クエリ演算子の詳細については、次を参照してください。<bpt id="p1">[</bpt>標準クエリ演算子の概要 (Visual Basic)<ept id="p1">](standard-query-operators-overview.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQFirstQuery#2<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/writing-your-first-linq-query_2.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQFirstQuery&amp;#2;<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/writing-your-first-linq-query_2.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>With <ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../csharp/includes/vbtecdlinq_md.md)]</ph>, you first create an object-relational mapping at design time, either manually or by using the <bpt id="p1">[</bpt>LINQ to SQL Tools in Visual Studio<ept id="p1">](https://docs.microsoft.com/visualstudio/data-tools/linq-to-sql-tools-in-visual-studio2)</ept> in Visual Studio.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../csharp/includes/vbtecdlinq_md.md)]</ph>、最初に、オブジェクト リレーショナル マッピング、デザイン時に手動でまたはを使用して作成する、 <bpt id="p1">[</bpt>LINQ to SQL ツール Visual Studio で<ept id="p1">](https://docs.microsoft.com/visualstudio/data-tools/linq-to-sql-tools-in-visual-studio2)</ept>Visual Studio でします。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>You write your queries against the objects, and at run-time <ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../csharp/includes/vbtecdlinq_md.md)]</ph> handles the communication with the database.</source>
          <target state="translated">オブジェクトに対するクエリを記述すると、実行時には、<ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../csharp/includes/vbtecdlinq_md.md)]</ph> によってデータベースとの通信が処理されます。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>In the following example, <ph id="ph1">`customers`</ph> represents a specific table in the database, and &lt;xref:System.Data.Linq.Table%601&gt; supports generic &lt;xref:System.Linq.IQueryable%601&gt;.</source>
          <target state="translated">次の例で<ph id="ph1">`customers`</ph>データベース、および&lt;xref:System.Data.Linq.Table%601&gt;ジェネリック&lt;xref:System.Linq.IQueryable%601&gt;.&lt;/xref:System.Linq.IQueryable%601&gt;をサポートしている&lt;/xref:System.Data.Linq.Table%601&gt;特定のテーブルを表します</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>0<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>0<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For more information about how to create specific types of data sources, see the documentation for the various <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> providers.</source>
          <target state="translated">それぞれの種類のデータ ソースを作成する方法の詳細については、対応する <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> プロバイダーのドキュメントを参照してください。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>(For a list of these providers, see <bpt id="p1">[</bpt>LINQ (Language-Integrated Query)<ept id="p1">](http://msdn.microsoft.com/library/a73c4aec-5d15-4e98-b962-1274021ea93d)</ept>.) The basic rule is simple: a <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> data source is any object that supports the generic &lt;xref:System.Collections.Generic.IEnumerable%601&gt; interface, or an interface that inherits from it.</source>
          <target state="translated">(これらのプロバイダーの一覧は、次を参照してください<bpt id="p1">[</bpt>LINQ (Language-Integrated Query)<ept id="p1">](http://msdn.microsoft.com/library/a73c4aec-5d15-4e98-b962-1274021ea93d)</ept>。)。基本的な規則は単純です、<ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph>データ ソースが、ジェネリック&lt;xref:System.Collections.Generic.IEnumerable%601&gt;インターフェイス、またはそれを継承するインターフェイス&lt;/xref:System.Collections.Generic.IEnumerable%601&gt;をサポートする任意のオブジェクト。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Types such as &lt;xref:System.Collections.ArrayList&gt; that support the non-generic &lt;xref:System.Collections.IEnumerable&gt; interface can also be used as <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> data sources.</source>
          <target state="translated">などの型&lt;xref:System.Collections.ArrayList&gt;非ジェネリックをサポートする&lt;xref:System.Collections.IEnumerable&gt;としてインターフェイスを使用することも<ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph>データ ソース&lt;/xref:System.Collections.IEnumerable&gt;&lt;/xref:System.Collections.ArrayList&gt;。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>For an example that uses an &lt;xref:System.Collections.ArrayList&gt;, see <bpt id="p1">[</bpt>How to: Query an ArrayList with LINQ (Visual Basic)<ept id="p1">](how-to-query-an-arraylist-with-linq.md)</ept>.</source>
          <target state="translated">使用する例については、&lt;xref:System.Collections.ArrayList&gt;を参照してください<bpt id="p1">[</bpt>方法: LINQ (Visual Basic) で ArrayList を照会<ept id="p1">](how-to-query-an-arraylist-with-linq.md)</ept>&lt;/xref:System.Collections.ArrayList&gt;。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The Query</source>
          <target state="translated">クエリ</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>In the query, you specify what information you want to retrieve from the data source or sources.</source>
          <target state="translated">クエリでは、データ ソースまたはソースから取得する情報を指定します。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>You also have the option of specifying how that information should be sorted, grouped, or structured before it is returned.</source>
          <target state="translated">どのように情報をする必要があります、グループ化、並べ替えたりするが返る前に構造化を指定するオプションもあります。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>To enable query creation, Visual Basic has incorporated new query syntax into the language.</source>
          <target state="translated">クエリの作成を有効にするには、Visual Basic は、言語に新しいクエリ構文を組み込まいます。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>When it is executed, the query in the following example returns all the even numbers from an integer array, <ph id="ph1">`numbers`</ph>.</source>
          <target state="translated">次の例では、クエリでは、整数の配列からすべての偶数が返されますが実行される<ph id="ph1">`numbers`</ph>します。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQFirstQuery#1<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/writing-your-first-linq-query_1.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQFirstQuery&amp;#1;<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/writing-your-first-linq-query_1.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The query expression contains three clauses: <ph id="ph1">`From`</ph>, <ph id="ph2">`Where`</ph>, and <ph id="ph3">`Select`</ph>.</source>
          <target state="translated">クエリ式には、次の&amp;3; つの句が含まれています: <ph id="ph1">`From`</ph>、 <ph id="ph2">`Where`</ph>、および<ph id="ph3">`Select`</ph>です。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The specific function and purpose of each query expression clause is discussed in <bpt id="p1">[</bpt>Basic Query Operations (Visual Basic)<ept id="p1">](basic-query-operations.md)</ept>.</source>
          <target state="translated">特定の機能と各クエリ式の句の目的は、後ほど<bpt id="p1">[</bpt>基本的なクエリ操作 (Visual Basic)<ept id="p1">](basic-query-operations.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Queries<ept id="p1">](../../../../visual-basic/language-reference/queries/queries.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>クエリ<ept id="p1">](../../../../visual-basic/language-reference/queries/queries.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Note that in <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph>, a query definition often is stored in a variable and executed later.</source>
          <target state="translated">において<ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph>、クエリ定義多くの場合は、変数に格納し、後で実行します。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The query variable, such as <ph id="ph1">`evensQuery`</ph> in the previous example, must be a queryable type.</source>
          <target state="translated">クエリ変数など、<ph id="ph1">`evensQuery`</ph>前の例では、クエリ可能な型である必要があります。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The type of <ph id="ph1">`evensQuery`</ph> is <ph id="ph2">`IEnumerable(Of Integer)`</ph>, assigned by the compiler using local type inference.</source>
          <target state="translated">型<ph id="ph1">`evensQuery`</ph>は<ph id="ph2">`IEnumerable(Of Integer)`</ph>、ローカル型推論を使用して、コンパイラによって割り当てられています。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>It is important to remember that the query variable itself takes no action and returns no data.</source>
          <target state="translated">ことが重要で、クエリ変数自体は何も起こりませんとデータは返されません。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>It only stores the query definition.</source>
          <target state="translated">また、クエリの定義のみ格納されます。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>In the previous example, it is the <ph id="ph1">`For Each`</ph> loop that executes the query.</source>
          <target state="translated">前の例では、<ph id="ph1">`For Each`</ph>クエリを実行するループします。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Query Execution</source>
          <target state="translated">クエリの実行</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Query execution is separate from query creation.</source>
          <target state="translated">クエリの実行は、クエリの作成とは別です。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Query creation defines the query, but execution is triggered by a different mechanism.</source>
          <target state="translated">クエリの作成には、クエリが定義されますが、実行は、別のメカニズムによってトリガーされます。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>A query can be executed as soon as it is defined (<bpt id="p1">*</bpt>immediate execution<ept id="p1">*</ept>), or the definition can be stored and the query can be executed later (<bpt id="p2">*</bpt>deferred execution<ept id="p2">*</ept>).</source>
          <target state="translated">定義されていると、すぐには、クエリを実行することができます (<bpt id="p1">*</bpt>即時実行<ept id="p1">*</ept>)、または定義を保存して後でクエリを実行することができます (<bpt id="p2">*</bpt>遅延実行<ept id="p2">*</ept>)。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Deferred Execution</source>
          <target state="translated">遅延実行</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>A typical <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> query resembles the one in the previous example, in which <ph id="ph2">`evensQuery`</ph> is defined.</source>
          <target state="translated">標準的な<ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph>クエリに似ていますが、これで、前の例で<ph id="ph2">`evensQuery`</ph>が定義されています。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>It creates the query but does not execute it immediately.</source>
          <target state="translated">クエリが作成されますが、実行は行いませんすぐに。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Instead, the query definition is stored in the query variable <ph id="ph1">`evensQuery`</ph>.</source>
          <target state="translated">クエリ定義は、クエリ変数に格納する代わりに、<ph id="ph1">`evensQuery`</ph>です。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>You execute the query later, typically by using a <ph id="ph1">`For Each`</ph> loop, which returns a sequence of values, or by applying a standard query operator, such as <ph id="ph2">`Count`</ph> or <ph id="ph3">`Max`</ph>.</source>
          <target state="translated">クエリを実行した後で、通常を使用して、<ph id="ph1">`For Each`</ph>またはなど、標準クエリ演算子を適用することで、値のシーケンスを返すループ<ph id="ph2">`Count`</ph>または<ph id="ph3">`Max`</ph>です。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>This process is referred to as <bpt id="p1">*</bpt>deferred execution<ept id="p1">*</ept>.</source>
          <target state="translated">このプロセスと呼ばれます<bpt id="p1">*</bpt>遅延実行<ept id="p1">*</ept>します。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQFirstQuery#7<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/writing-your-first-linq-query_3.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQFirstQuery&amp;#7;<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/writing-your-first-linq-query_3.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>For a sequence of values, you access the retrieved data by using the iteration variable in the <ph id="ph1">`For Each`</ph> loop (<ph id="ph2">`number`</ph> in the previous example).</source>
          <target state="translated">値のシーケンスに反復変数を使用して取得したデータにアクセスする、<ph id="ph1">`For Each`</ph>ループ (<ph id="ph2">`number`</ph>前の例では)。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Because the query variable, <ph id="ph1">`evensQuery`</ph>, holds the query definition rather than the query results, you can execute a query as often as you want by using the query variable more than one time.</source>
          <target state="translated">クエリ変数<ph id="ph1">`evensQuery`</ph>クエリの結果ではなく、クエリ定義を保持して、クエリ変数を&amp;2; 回以上を使用して、必要な頻度にクエリを実行することができます。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>For example, you might have a database in your application that is being updated continually by a separate application.</source>
          <target state="translated">たとえば、データベースを別のアプリケーションによって継続的に更新されているアプリケーションでがあります。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>After you have created a query that retrieves data from that database, you can use a <ph id="ph1">`For Each`</ph> loop to execute the query repeatedly, retrieving the most recent data every time.</source>
          <target state="translated">そのデータベースからデータを取得するクエリを作成する後は、使用、<ph id="ph1">`For Each`</ph>たびに、最新のデータを取得するクエリを繰り返し実行するループ処理します。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how deferred execution works.</source>
          <target state="translated">次の例では、遅延実行の動作です。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>After <ph id="ph1">`evensQuery2`</ph> is defined and executed with a <ph id="ph2">`For Each`</ph> loop, as in the previous examples, some elements in the data source <ph id="ph3">`numbers`</ph> are changed.</source>
          <target state="translated">後に<ph id="ph1">`evensQuery2`</ph>が定義され、使用して実行される、<ph id="ph2">`For Each`</ph>データ ソースの一部の要素を前の例では、ループ、<ph id="ph3">`numbers`</ph>変更されます。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Then a second <ph id="ph1">`For Each`</ph> loop runs <ph id="ph2">`evensQuery2`</ph> again.</source>
          <target state="translated">1 秒間に、<ph id="ph1">`For Each`</ph>ループを実行<ph id="ph2">`evensQuery2`</ph>再度します。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The results are different the second time, because the <ph id="ph1">`For Each`</ph> loop executes the query again, using the new values in <ph id="ph2">`numbers`</ph>.</source>
          <target state="translated">結果は異なって、2 回目、<ph id="ph1">`For Each`</ph>ループが実行されるクエリ、新しい値を使用する<ph id="ph2">`numbers`</ph>です。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQFirstQuery#3<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/writing-your-first-linq-query_4.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQFirstQuery&amp;#3;<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/writing-your-first-linq-query_4.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Output:</source>
          <target state="translated">Output:</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Immediate Execution</source>
          <target state="translated">即時実行</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>In deferred execution of queries, the query definition is stored in a query variable for later execution.</source>
          <target state="translated">クエリの遅延実行では、クエリ定義は、後で実行するクエリ変数に格納されます。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>In immediate execution, the query is executed at the time of its definition.</source>
          <target state="translated">即時実行は、その定義の時点で、クエリが実行されます。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Execution is triggered when you apply a method that requires access to individual elements of the query result.</source>
          <target state="translated">クエリ結果の個々 の要素へのアクセスを必要とするメソッドを適用すると、実行がトリガーされます。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Immediate execution often is forced by using one of the standard query operators that return single values.</source>
          <target state="translated">単一の値を返す、標準クエリ演算子の&amp;1; つを使用して強制的に多くの場合、即時に実行されます。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Examples are <ph id="ph1">`Count`</ph>, <ph id="ph2">`Max`</ph>, <ph id="ph3">`Average`</ph>, and <ph id="ph4">`First`</ph>.</source>
          <target state="translated">Examples are <ph id="ph1">`Count`</ph>, <ph id="ph2">`Max`</ph>, <ph id="ph3">`Average`</ph>, and <ph id="ph4">`First`</ph>.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>These standard query operators execute the query as soon as they are applied in order to calculate and return a singleton result.</source>
          <target state="translated">これらの標準クエリ演算子は、計算して単一の結果を返すために適用されるとすぐにクエリを実行します。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>For more information about standard query operators that return single values, see <bpt id="p1">[</bpt>Aggregation Operations<ept id="p1">](aggregation-operations.md)</ept>, <bpt id="p2">[</bpt>Element Operations<ept id="p2">](element-operations.md)</ept>, and <bpt id="p3">[</bpt>Quantifier Operations<ept id="p3">](quantifier-operations.md)</ept>.</source>
          <target state="translated">1 つの値を返す標準クエリ演算子の詳細については、次を参照してください。<bpt id="p1">[</bpt>集計操作<ept id="p1">](aggregation-operations.md)</ept>、<bpt id="p2">[</bpt>要素操作<ept id="p2">](element-operations.md)</ept>、および<bpt id="p3">[</bpt>量指定子操作<ept id="p3">](quantifier-operations.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The following query returns a count of the even numbers in an array of integers.</source>
          <target state="translated">次のクエリでは、整数の配列の中に含まれている偶数の数が返されます。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The query definition is not saved, and <ph id="ph1">`numEvens`</ph> is a simple <ph id="ph2">`Integer`</ph>.</source>
          <target state="translated">クエリ定義が保存されていない、および<ph id="ph1">`numEvens`</ph>は、単純な<ph id="ph2">`Integer`</ph>です。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQFirstQuery#4<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/writing-your-first-linq-query_5.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQFirstQuery&amp;4;<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/writing-your-first-linq-query_5.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>You can achieve the same result by using the <ph id="ph1">`Aggregate`</ph> method.</source>
          <target state="translated">使用して同じ結果を得ることができます、<ph id="ph1">`Aggregate`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQFirstQuery#5<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/writing-your-first-linq-query_6.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQFirstQuery&amp;#5;<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/writing-your-first-linq-query_6.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>You can also force execution of a query by calling the <ph id="ph1">`ToList`</ph> or <ph id="ph2">`ToArray`</ph> method on a query (immediate) or query variable (deferred), as shown in the following code.</source>
          <target state="translated">呼び出して、クエリの実行を強制できます、<ph id="ph1">`ToList`</ph>または<ph id="ph2">`ToArray`</ph>クエリ (即時) または次のコードに示すようにクエリ変数 (遅延) のメソッドです。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQFirstQuery#6<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/writing-your-first-linq-query_7.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQFirstQuery&amp;6;<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/writing-your-first-linq-query_7.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>In the previous examples, <ph id="ph1">`evensQuery3`</ph> is a query variable, but <ph id="ph2">`evensList`</ph> is a list and <ph id="ph3">`evensArray`</ph> is an array.</source>
          <target state="translated">前の例で<ph id="ph1">`evensQuery3`</ph>クエリは、変数しますですが、<ph id="ph2">`evensList`</ph>リストと<ph id="ph3">`evensArray`</ph>配列です。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Using <ph id="ph1">`ToList`</ph> or <ph id="ph2">`ToArray`</ph> to force immediate execution is especially useful in scenarios in which you want to execute the query immediately and cache the results in a single collection object.</source>
          <target state="translated">使用して<ph id="ph1">`ToList`</ph>または<ph id="ph2">`ToArray`</ph>を強制的に即時実行は、クエリを直ちに実行し、単一のコレクション オブジェクトの結果をキャッシュするシナリオで特に便利です。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>For more information about these methods, see <bpt id="p1">[</bpt>Converting Data Types<ept id="p1">](converting-data-types.md)</ept>.</source>
          <target state="translated">これらの方法に関する詳細については、次を参照してください。<bpt id="p1">[</bpt>データの種類の変換<ept id="p1">](converting-data-types.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>You can also cause a query to be executed by using an <ph id="ph1">`IEnumerable`</ph> method such as the &lt;xref:Microsoft.VisualBasic.Collection.System%23Collections%23IEnumerable%23GetEnumerator%2A&gt; method.</source>
          <target state="translated">使用して実行するクエリが発生することも、<ph id="ph1">`IEnumerable`</ph>などのメソッド、&lt;xref:Microsoft.VisualBasic.Collection.System%23Collections%23IEnumerable%23GetEnumerator%2A&gt;メソッド&lt;/xref:Microsoft.VisualBasic.Collection.System%23Collections%23IEnumerable%23GetEnumerator%2A&gt;。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">関連項目</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Getting Started with LINQ in Visual Basic<ept id="p1">](getting-started-with-linq.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Visual Basic における LINQ の概要<ept id="p1">](getting-started-with-linq.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Local Type Inference<ept id="p1">](../../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>ローカル型推論<ept id="p1">](../../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Standard Query Operators Overview (Visual Basic)<ept id="p1">](standard-query-operators-overview.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>標準クエリ演算子の概要 (Visual Basic)<ept id="p1">](standard-query-operators-overview.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Introduction to LINQ in Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/language-features/linq/introduction-to-linq.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Visual Basic における LINQ の概要<ept id="p1">](../../../../visual-basic/programming-guide/language-features/linq/introduction-to-linq.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>LINQ<ept id="p1">](../../../../visual-basic/programming-guide/language-features/linq/index.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>LINQ<ept id="p1">](../../../../visual-basic/programming-guide/language-features/linq/index.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Queries<ept id="p1">](../../../../visual-basic/language-reference/queries/queries.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>クエリ<ept id="p1">](../../../../visual-basic/language-reference/queries/queries.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>