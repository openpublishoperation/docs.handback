<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">57d036910ba9e49385caca28de222a8a8e28ec56</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\xml\xml-literals-overview.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8b5b194f9115a2b120035712e244e4e6d4824ac4</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">13ebb0918af9ce9ca039210190a383872d561ce5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>XML Literals Overview (Visual Basic) | Microsoft Docs</source>
          <target state="translated">XML リテラルの概要 (Visual Basic) |Microsoft ドキュメント</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>XML Literals Overview (Visual Basic)</source>
          <target state="translated">XML リテラルの概要 (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">*</bpt>XML literal<ept id="p1">*</ept> allows you to incorporate XML directly into your <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> code.</source>
          <target state="translated"><bpt id="p1">*</bpt>XML リテラル<ept id="p1">*</ept>に直接 XML を組み込むことができます、<ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>コードです。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The XML literal syntax represents <ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> objects, and it is the similar to the XML 1.0 syntax.</source>
          <target state="translated">XML リテラルの構文を表す<ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph>オブジェクト、およびそれには、XML 1.0 の構文に似ています。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This makes it easier to create XML elements and documents programmatically because your code has the same structure as the final XML.</source>
          <target state="translated">これにより、コード、最終的な XML と同じ構造では、XML 要素やドキュメントをプログラムで作成が簡単にします。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> compiles XML literals into <ph id="ph2">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> objects.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>XML リテラルをコンパイル<ph id="ph2">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph>オブジェクトです。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> provides a simple object model for creating and manipulating XML, and this model integrates well with <ph id="ph2">[!INCLUDE[vbteclinqext](../../../../csharp/getting-started/includes/vbteclinqext_md.md)]</ph>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph>作成して、XML を操作するための簡単なオブジェクト モデルとこのモデルとも統合されて提供<ph id="ph2">[!INCLUDE[vbteclinqext](../../../../csharp/getting-started/includes/vbteclinqext_md.md)]</ph>します。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;xref:System.Xml.Linq.XElement&gt;.</source>
          <target state="translated">詳細については、 &lt;xref:System.Xml.Linq.XElement&gt;。&lt;/xref:System.Xml.Linq.XElement&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You can embed a <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> expression in an XML literal.</source>
          <target state="translated">埋め込むことができます、 <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> XML リテラル内の式。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>At run time, your application creates a <ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> object for each literal, incorporating the values of the embedded expressions.</source>
          <target state="translated">アプリケーションの作成、実行時に、<ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph>オブジェクト リテラルごとに、埋め込まれた式の値を組み込むことにします。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This lets you specify dynamic content inside an XML literal.</source>
          <target state="translated">これにより、XML リテラルの中の動的なコンテンツを指定できます。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Embedded Expressions in XML<ept id="p1">](../../../../visual-basic/programming-guide/language-features/xml/embedded-expressions-in-xml.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。 <bpt id="p1">[</bpt>XML での埋め込み式<ept id="p1">](../../../../visual-basic/programming-guide/language-features/xml/embedded-expressions-in-xml.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For more information about the differences between the XML literal syntax and the XML 1.0 syntax, see <bpt id="p1">[</bpt>XML Literals and the XML 1.0 Specification<ept id="p1">](../../../../visual-basic/programming-guide/language-features/xml/xml-literals-and-the-xml-1-0-specification.md)</ept>.</source>
          <target state="translated">XML リテラルの構文と XML 1.0 の構文の違いについての詳細については、次を参照してください。 <bpt id="p1">[</bpt>XML リテラルと XML 1.0 仕様<ept id="p1">](../../../../visual-basic/programming-guide/language-features/xml/xml-literals-and-the-xml-1-0-specification.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Simple Literals</source>
          <target state="translated">単純なリテラル</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You can create a <ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> object in your <ph id="ph2">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> code by typing or pasting in valid XML.</source>
          <target state="translated">作成することができます、<ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph>内のオブジェクト、<ph id="ph2">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>コードを入力するか、有効な XML に貼り付けることです。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>An XML element literal returns an &lt;xref:System.Xml.Linq.XElement&gt; object.</source>
          <target state="translated">リテラル XML 要素を返します、&lt;xref:System.Xml.Linq.XElement&gt;オブジェクト&lt;/xref:System.Xml.Linq.XElement&gt;。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>XML Element Literal<ept id="p1">](../../../../visual-basic/language-reference/xml-literals/xml-element-literal.md)</ept> and <bpt id="p2">[</bpt>XML Literals and the XML 1.0 Specification<ept id="p2">](../../../../visual-basic/programming-guide/language-features/xml/xml-literals-and-the-xml-1-0-specification.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。 <bpt id="p1">[</bpt>XML 要素リテラル<ept id="p1">](../../../../visual-basic/language-reference/xml-literals/xml-element-literal.md)</ept>と<bpt id="p2">[</bpt>XML リテラルと XML 1.0 仕様<ept id="p2">](../../../../visual-basic/programming-guide/language-features/xml/xml-literals-and-the-xml-1-0-specification.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The following example creates an XML element that has several child elements.</source>
          <target state="translated">次の例では、いくつかの子要素を持つ XML 要素を作成します。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbXMLSamples#5<ept id="p2">](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/xml-literals-overview_1.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbXMLSamples&amp;#5;<ept id="p2">](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/xml-literals-overview_1.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You can create an XML document by starting an XML literal with <ph id="ph1">`&lt;?xml version="1.0"?&gt;`</ph>, as shown in the following example.</source>
          <target state="translated">XML ドキュメントを作成して、XML リテラルを開始できます<ph id="ph1">`&lt;?xml version="1.0"?&gt;`</ph>の次の例に示すようにします。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>An XML document literal returns an &lt;xref:System.Xml.Linq.XDocument&gt; object.</source>
          <target state="translated">XML ドキュメント リテラル返します、&lt;xref:System.Xml.Linq.XDocument&gt;オブジェクト&lt;/xref:System.Xml.Linq.XDocument&gt;。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>XML Document Literal<ept id="p1">](../../../../visual-basic/language-reference/xml-literals/xml-document-literal.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。 <bpt id="p1">[</bpt>XML ドキュメント リテラル<ept id="p1">](../../../../visual-basic/language-reference/xml-literals/xml-document-literal.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbXMLSamples#6<ept id="p2">](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/xml-literals-overview_2.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbXMLSamples&amp;6;<ept id="p2">](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/xml-literals-overview_2.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The XML literal syntax in <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> is not identical to the syntax in the XML 1.0 specification.</source>
          <target state="translated">XML リテラルの構文で<ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>XML 1.0 仕様で構文と同じではありません。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>XML Literals and the XML 1.0 Specification<ept id="p1">](../../../../visual-basic/programming-guide/language-features/xml/xml-literals-and-the-xml-1-0-specification.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。 <bpt id="p1">[</bpt>XML リテラルと XML 1.0 仕様<ept id="p1">](../../../../visual-basic/programming-guide/language-features/xml/xml-literals-and-the-xml-1-0-specification.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Line Continuation</source>
          <target state="translated">行の連結</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>An XML literal can span multiple lines without using line continuation characters (the space-underscore-enter sequence).</source>
          <target state="translated">XML リテラルは、行継続文字 (空白のアンダー スコアを入力してシーケンス) を使用することがなく複数行にまたがることができます。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This makes it easier to compare XML literals in code with XML documents.</source>
          <target state="translated">これにより、簡単に XML ドキュメントをコード内の XML リテラルを比較します。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The compiler treats line continuation characters as part of an XML literal.</source>
          <target state="translated">コンパイラは、XML リテラルの一部として、行継続文字を処理します。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Therefore, you should use the space-underscore-enter sequence only when it belongs in the <ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> object.</source>
          <target state="translated">属している場合にのみに領域アンダー スコアを入力シーケンスを使用する必要がありますので、<ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph>オブジェクトです。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>However, you do need line continuation characters if you have a multiline expression in an embedded expression.</source>
          <target state="translated">ただし、組み込み式に複数の行がある場合は、行継続文字を必要操作を行います。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Embedded Expressions in XML<ept id="p1">](../../../../visual-basic/programming-guide/language-features/xml/embedded-expressions-in-xml.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。 <bpt id="p1">[</bpt>XML での埋め込み式<ept id="p1">](../../../../visual-basic/programming-guide/language-features/xml/embedded-expressions-in-xml.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Embedding Queries in XML Literals</source>
          <target state="translated">XML リテラルでクエリの埋め込み</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>You can use a query in an embedded expression.</source>
          <target state="translated">組み込み式では、クエリを使用できます。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>When you do this, the elements returned by the query are added to the XML element.</source>
          <target state="translated">これを行うときに、クエリによって返される要素が XML 要素に追加されます。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This lets you add dynamic content, such as the result of a user's query, to an XML literal.</source>
          <target state="translated">これにより、XML リテラルに、ユーザーのクエリの結果などの動的コンテンツを追加できます。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For example, the following code uses an embedded query to create XML elements from the members of the <ph id="ph1">`phoneNumbers2`</ph> array and then add those elements as children of <ph id="ph2">`contact2`</ph>.</source>
          <target state="translated">メンバーからの XML 要素を作成する次のコードが埋め込まれたクエリを使用するなど、<ph id="ph1">`phoneNumbers2`</ph>配列をそれらの要素の子として追加<ph id="ph2">`contact2`</ph>します。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbXMLSamples#7<ept id="p2">](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/xml-literals-overview_3.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbXMLSamples&amp;#7;<ept id="p2">](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/xml-literals-overview_3.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>How the Compiler Creates Objects from XML Literals</source>
          <target state="translated">コンパイラが XML リテラルからオブジェクトを作成する方法</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> compiler translates XML literals into calls to the equivalent <ph id="ph2">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> constructors to build up the <ph id="ph3">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> object.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>コンパイラでは、XML リテラルを変換と同等の呼び出しに<ph id="ph2">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph>を構築するコンス トラクター、<ph id="ph3">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph>オブジェクトです。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> compiler will translate the following code example into a call to the &lt;xref:System.Xml.Linq.XProcessingInstruction&gt; constructor for the XML version instruction, calls to the &lt;xref:System.Xml.Linq.XElement&gt; constructor for the <ph id="ph2">`&lt;contact&gt;`</ph>, <ph id="ph3">`&lt;name&gt;`</ph>, and <ph id="ph4">`&lt;phone&gt;`</ph> elements, and calls to the &lt;xref:System.Xml.Linq.XAttribute&gt; constructor for the <ph id="ph5">`type`</ph> attribute.</source>
          <target state="translated">たとえば、<ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>コンパイラを使用して、次のコード例をへの呼び出しに変換されます、 &lt;xref:System.Xml.Linq.XProcessingInstruction&gt;XML バージョン手順では、コンス トラクターを呼び出し、&lt;xref:System.Xml.Linq.XElement&gt;のコンス トラクター、 <ph id="ph2">`&lt;contact&gt;`</ph>、<ph id="ph3">`&lt;name&gt;`</ph>と<ph id="ph4">`&lt;phone&gt;`</ph>要素、およびへの呼び出し、&lt;xref:System.Xml.Linq.XAttribute&gt;のコンス トラクター、<ph id="ph5">`type`</ph>属性&lt;/xref:System.Xml.Linq.XAttribute&gt;&lt;/xref:System.Xml.Linq.XElement&gt;&lt;/xref:System.Xml.Linq.XProcessingInstruction&gt;。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Specifically, given the attributes in the following sample, the <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> compiler will call the &lt;xref:System.Xml.Linq.XAttribute.%23ctor%28System.Xml.Linq.XName%2CSystem.Object%29&gt; constructor twice.</source>
          <target state="translated">具体的には、次のサンプルでは、属性から得られる、<ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>コンパイラが呼び出す、&lt;xref:System.Xml.Linq.XAttribute.%23ctor%28System.Xml.Linq.XName%2CSystem.Object%29&gt;コンス トラクターを&amp;2; 回クリックします&lt;/xref:System.Xml.Linq.XAttribute.%23ctor%28System.Xml.Linq.XName%2CSystem.Object%29&gt;。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The first will pass the value <ph id="ph1">`type`</ph> for the <ph id="ph2">`name`</ph> parameter and the value <ph id="ph3">`home`</ph> for the <ph id="ph4">`value`</ph> parameter.</source>
          <target state="translated">最初は値を渡す<ph id="ph1">`type`</ph>の<ph id="ph2">`name`</ph>パラメーターと値の<ph id="ph3">`home`</ph>の<ph id="ph4">`value`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The second will also pass the value <ph id="ph1">`type`</ph> for the <ph id="ph2">`name`</ph> parameter, but the value <ph id="ph3">`work`</ph> for the <ph id="ph4">`value`</ph> parameter.</source>
          <target state="translated">2 つ目は、値を渡すも<ph id="ph1">`type`</ph>の<ph id="ph2">`name`</ph>パラメーターが、値<ph id="ph3">`work`</ph>の<ph id="ph4">`value`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbXMLSamples#6<ept id="p2">](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/xml-literals-overview_2.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbXMLSamples&amp;6;<ept id="p2">](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/xml-literals-overview_2.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">関連項目</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Xml.Linq.XElement&gt;</source>
          <target state="translated">&lt;xref:System.Xml.Linq.XElement&gt;</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Creating XML in Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/language-features/xml/creating-xml.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Visual Basic で XML を作成します。<ept id="p1">](../../../../visual-basic/programming-guide/language-features/xml/creating-xml.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Embedded Expressions in XML<ept id="p1">](../../../../visual-basic/programming-guide/language-features/xml/embedded-expressions-in-xml.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>XML での埋め込み式<ept id="p1">](../../../../visual-basic/programming-guide/language-features/xml/embedded-expressions-in-xml.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>XML Document Literal<ept id="p1">](../../../../visual-basic/language-reference/xml-literals/xml-document-literal.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>XML ドキュメント リテラル<ept id="p1">](../../../../visual-basic/language-reference/xml-literals/xml-document-literal.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>XML Element Literal<ept id="p1">](../../../../visual-basic/language-reference/xml-literals/xml-element-literal.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>XML 要素リテラル<ept id="p1">](../../../../visual-basic/language-reference/xml-literals/xml-element-literal.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>XML Literals<ept id="p1">](../../../../visual-basic/language-reference/xml-literals/index.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>XML リテラル<ept id="p1">](../../../../visual-basic/language-reference/xml-literals/index.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>