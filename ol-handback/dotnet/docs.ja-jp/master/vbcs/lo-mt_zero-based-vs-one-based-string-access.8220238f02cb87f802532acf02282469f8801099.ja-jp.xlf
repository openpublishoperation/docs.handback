<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6cd2cab888bf336151ed26968119431f4ffc75f4</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\strings\zero-based-vs-one-based-string-access.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bd812dab4e7794da3d2d9b7a79b2c05271437103</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a156119e7ed8221e0178579067ec265add505e11</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Zero-based vs. One-based String Access in Visual Basic | Microsoft Docs</source>
          <target state="translated">0 から始まるとします。Visual Basic における文字列の&amp;1; から始まるアクセス |Microsoft ドキュメント</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Zero-based vs. One-based String Access in Visual Basic</source>
          <target state="translated">0 から始まるとします。Visual Basic における文字列の&amp;1; から始まるアクセス</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic compares how <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> and the <ph id="ph2">[!INCLUDE[dnprdnshort](../../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph> provide access to the characters in a string.</source>
          <target state="translated">このトピックでは比較方法<ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>と<ph id="ph2">[!INCLUDE[dnprdnshort](../../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph>文字列内の文字へのアクセスを提供します。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph> always provides zero-based access to the characters in a string, whereas <ph id="ph2">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> provides zero-based and one-based access, depending on the function.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[dnprdnshort](../../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph>が常に、文字列内の文字への&amp;0; から始まるアクセスを提供<ph id="ph2">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>関数によって、0 から始まり、1 つベースのアクセスを提供します。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>One-Based</source>
          <target state="translated">1 から始まる</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For an example of a one-based <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> function, consider the <ph id="ph2">`Mid`</ph> function.</source>
          <target state="translated">たとえば&amp;1; から始まるの<ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>機能を検討してください、<ph id="ph2">`Mid`</ph>関数です。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>It takes an argument that indicates the character position at which the substring will start, starting with position 1.</source>
          <target state="translated">部分文字列が開始する、位置 1 から始まる文字位置を示す引数を受け取る。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph> &lt;xref:System.String.Substring%2A?displayProperty=fullName&gt; method takes an index of the character in the string at which the substring is to start, starting with position 0.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[dnprdnshort](../../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph> &lt;xref:System.String.Substring%2A?displayProperty=fullName&gt;メソッドは、文字のインデックスで部分文字列を開始するには、文字列の位置の 0 から開始します&lt;/xref:System.String.Substring%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Thus, if you have a string "ABCDE", the individual characters are numbered 1,2,3,4,5 for use with the <ph id="ph1">`Mid`</ph> function, but 0,1,2,3,4 for use with the &lt;xref:System.String.Substring%2A?displayProperty=fullName&gt; method.</source>
          <target state="translated">したがって、文字列"ABCDE"がある場合、個々 の文字の番号と 1,2,3,4,5 で使用するため、<ph id="ph1">`Mid`</ph>関数が 0,1,2,3,4 で使用するため、&lt;xref:System.String.Substring%2A?displayProperty=fullName&gt;メソッド&lt;/xref:System.String.Substring%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Zero-Based</source>
          <target state="translated">0 から始まる</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For an example of a zero-based <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> function, consider the <ph id="ph2">`Split`</ph> function.</source>
          <target state="translated">たとえば、0 から始まるの<ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>機能を検討してください、<ph id="ph2">`Split`</ph>関数です。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>It splits a string and returns an array containing the substrings.</source>
          <target state="translated">文字列を分割し、これらの部分文字列を含む配列を返します。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph> &lt;xref:System.String.Split%2A?displayProperty=fullName&gt; method also splits a string and returns an array containing the substrings.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[dnprdnshort](../../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph> &lt;xref:System.String.Split%2A?displayProperty=fullName&gt;もメソッドは文字列を分割し、部分文字列を含む配列を返します&lt;/xref:System.String.Split%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Because the <ph id="ph1">`Split`</ph> function and &lt;xref:System.String.Split%2A&gt; method return <ph id="ph2">[!INCLUDE[dnprdnshort](../../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph> arrays, they must be zero-based.</source>
          <target state="translated"><ph id="ph1">`Split`</ph>関数と&lt;xref:System.String.Split%2A&gt;メソッドの戻り値<ph id="ph2">[!INCLUDE[dnprdnshort](../../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph>配列、必要がある&amp;0; から始まる&lt;/xref:System.String.Split%2A&gt;。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">関連項目</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>&lt;xref:Microsoft.VisualBasic.Strings.Mid%2A&gt;</source>
          <target state="translated">&lt;xref:Microsoft.VisualBasic.Strings.Mid%2A&gt;&lt;/xref:Microsoft.VisualBasic.Strings.Mid%2A&gt;</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>&lt;xref:Microsoft.VisualBasic.Strings.Split%2A&gt;</source>
          <target state="translated">&lt;xref:Microsoft.VisualBasic.Strings.Split%2A&gt;&lt;/xref:Microsoft.VisualBasic.Strings.Split%2A&gt;</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.String.Substring%2A&gt;</source>
          <target state="translated">&lt;xref:System.String.Substring%2A&gt;&lt;/xref:System.String.Substring%2A&gt;</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.String.Split%2A&gt;</source>
          <target state="translated">&lt;xref:System.String.Split%2A&gt;&lt;/xref:System.String.Split%2A&gt;</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Introduction to Strings in Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/language-features/strings/introduction-to-strings.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>Visual Basic における文字列の概要<ept id="p1">](../../../../visual-basic/programming-guide/language-features/strings/introduction-to-strings.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>