<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-47f9650" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">47ee37886fa2662a89730e9d52ee04987e37da2f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\base-types\comparing.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3aeee026d9f0ea2e26a1046cdf56947244e4cb89</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e38260c2022fae2c9830d20fd6e648d4e819c0c0</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Comparing strings</source>
          <target state="translated">문자열 비교</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Comparing strings</source>
          <target state="translated">문자열 비교</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Comparing strings</source>
          <target state="translated">문자열 비교</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>.NET provides several methods to compare the values of strings.</source>
          <target state="translated">.NET에서는 문자열의 값을 비교하는 여러 가지 메서드를 제공합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The following table lists and describes the value-comparison methods.</source>
          <target state="translated">다음 표에서는 값 비교 메서드를 나열하고 설명합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Method name</source>
          <target state="translated">메서드 이름</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Use</source>
          <target state="translated">기능</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>String.Compare<ept id="p1">](xref:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32))</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>String.Compare<ept id="p1">](xref:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32))</ept></target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Compares the values of two strings.</source>
          <target state="translated">두 문자열의 값을 비교합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Returns an integer value.</source>
          <target state="translated">정수 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>String.CompareOrdinal<ept id="p1">](xref:System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32))</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>String.CompareOrdinal<ept id="p1">](xref:System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32))</ept></target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Compares two strings without regard to local culture.</source>
          <target state="translated">로컬 문화권에 관계없이 두 문자열을 비교합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Returns an integer value.</source>
          <target state="translated">정수 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>String.CompareTo<ept id="p1">](xref:System.String.CompareTo(System.String))</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>String.CompareTo<ept id="p1">](xref:System.String.CompareTo(System.String))</ept></target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Compares the current string object to another string.</source>
          <target state="translated">현재 문자열 개체를 다른 문자열과 비교합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Returns an integer value.</source>
          <target state="translated">정수 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>String.StartsWith<ept id="p1">](xref:System.String.StartsWith(System.String))</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>String.StartsWith<ept id="p1">](xref:System.String.StartsWith(System.String))</ept></target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Determines whether a string begins with the string passed.</source>
          <target state="translated">문자열이 전달된 문자열로 시작하는지 여부를 확인합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Returns a Boolean value.</source>
          <target state="translated">부울 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>String.EndsWith<ept id="p1">](xref:System.String.CompareTo(System.String))</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>String.EndsWith<ept id="p1">](xref:System.String.CompareTo(System.String))</ept></target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Determines whether a string ends with the string passed.</source>
          <target state="translated">문자열이 전달된 문자열로 끝나는지 여부를 확인합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Returns a Boolean value.</source>
          <target state="translated">부울 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>String.Equals<ept id="p1">](xref:System.String.CompareTo(System.String))</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>String.Equals<ept id="p1">](xref:System.String.CompareTo(System.String))</ept></target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Determines whether two strings are the same.</source>
          <target state="translated">두 문자열이 같은지 여부를 확인합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Returns a Boolean value.</source>
          <target state="translated">부울 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>String.IndexOf<ept id="p1">](xref:System.String.IndexOf(System.Char))</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>String.IndexOf<ept id="p1">](xref:System.String.IndexOf(System.Char))</ept></target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Returns the index position of a character or string, starting from the beginning of the string you are examining.</source>
          <target state="translated">검사 중인 문자열의 처음부터 시작하여 문자 또는 문자열의 인덱스 위치를 반환합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Returns an integer value.</source>
          <target state="translated">정수 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>String.LastIndexOf<ept id="p1">](xref:System.String.LastIndexOf(System.Char))</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>String.LastIndexOf<ept id="p1">](xref:System.String.LastIndexOf(System.Char))</ept></target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Returns the index position of a character or string, starting from the end of the string you are examining.</source>
          <target state="translated">검사 중인 문자열의 끝부터 시작하여 문자 또는 문자열의 인덱스 위치를 반환합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Returns an integer value.</source>
          <target state="translated">정수 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Compare</source>
          <target state="translated">비교</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The static <bpt id="p1">[</bpt>String.Compare<ept id="p1">](xref:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32))</ept> method provides a thorough way of comparing two strings.</source>
          <target state="translated">정적 <bpt id="p1">[</bpt>String.Compare<ept id="p1">](xref:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32))</ept> 메서드는 두 문자열을 비교하는 철저한 방법을 제공합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This method is culturally aware.</source>
          <target state="translated">이 메서드는 문화권을 인식합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>You can use this function to compare two strings or substrings of two strings.</source>
          <target state="translated">이 함수를 사용하여 두 문자열 또는 두 문자열의 부분 문자열을 비교할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Additionally, overloads are provided that regard or disregard case and cultural variance.</source>
          <target state="translated">또한 대/소문자와 문화권 차이를 반영하거나 무시하는 오버로드가 제공됩니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The following table shows the three integer values that this method might return.</source>
          <target state="translated">다음 표에서는 이 메서드가 반환할 수 있는 세 가지 정수 값을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Return value</source>
          <target state="translated">반환 값</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Condition</source>
          <target state="translated">조건</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>A negative integer</source>
          <target state="translated">음의 정수</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The first string precedes the second string in the sort order, or the first string is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">정렬 순서에서 첫 번째 문자열이 두 번째 문자열 앞에 오거나 첫 번째 문자열이 <ph id="ph1">`null`</ph>입니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>0</source>
          <target state="translated">0</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The first string and the second string are equal, or both strings are <ph id="ph1">`null`</ph>.</source>
          <target state="translated">첫 번째 문자열과 두 번째 문자열이 같거나 두 문자열이 모두 <ph id="ph1">`null`</ph>입니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>A positive integer, or 1</source>
          <target state="translated">양의 정수 또는 1</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The first string follows the second string in the sort order, or the second string is null.</source>
          <target state="translated">정렬 순서에서 첫 번째 문자열이 두 번째 문자열 뒤에 오거나 두 번째 문자열이 null입니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>String.Compare<ept id="p1">](xref:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32))</ept> method is primarily intended for use when ordering or sorting strings.</source>
          <target state="translated"><bpt id="p1">[</bpt>String.Compare<ept id="p1">](xref:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32))</ept> 메서드는 주로 문자열의 순서를 지정하거나 정렬할 때 사용됩니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>You should not use the <bpt id="p1">[</bpt>String.Compare<ept id="p1">](xref:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32))</ept> method to test for equality (that is, to explicitly look for a return value of 0 with no regard for whether one string is less than or greater than the other).</source>
          <target state="translated"><bpt id="p1">[</bpt>String.Compare<ept id="p1">](xref:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32))</ept> 메서드를 통해 같은지 여부를 테스트하면 안 됩니다(즉, 한 문자열이 다른 문자열보다 작거나 큰지에 관계없이 반환 값 0을 명시적으로 찾기 위해 사용하면 안 됨).</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Instead, to determine whether two strings are equal, use the <bpt id="p1">[</bpt>String.Equals(String, String, StringComparison)<ept id="p1">](xref:System.String.Equals(System.String,System.String,System.StringComparison))</ept> method.</source>
          <target state="translated">대신, 두 문자열이 같은지를 확인하려면 <bpt id="p1">[</bpt>String.Equals(String, String, StringComparison)<ept id="p1">](xref:System.String.Equals(System.String,System.String,System.StringComparison))</ept> 메서드를 사용합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The following example uses the <bpt id="p1">[</bpt>String.Compare<ept id="p1">](xref:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32))</ept> method to determine the relative values of two strings.</source>
          <target state="translated">다음 예제에서는 <bpt id="p1">[</bpt>String.Compare<ept id="p1">](xref:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32))</ept> 메서드를 사용하여 두 문자열의 상대 값을 확인합니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>This example displays <ph id="ph1">`-1`</ph> to the console.</source>
          <target state="translated">이 예제에서는 콘솔에 <ph id="ph1">`-1`</ph>을 표시합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>CompareOrdinal</source>
          <target state="translated">CompareOrdinal</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>String.CompareOrdinal<ept id="p1">](xref:System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32))</ept> method compares two string objects without considering the local culture.</source>
          <target state="translated"><bpt id="p1">[</bpt>String.CompareOrdinal<ept id="p1">](xref:System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32))</ept> 메서드는 로컬 문화권을 고려하지 않고 두 문자열 개체를 비교합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The return values of this method are identical to the values returned by the <ph id="ph1">`Compare`</ph> method in the previous table.</source>
          <target state="translated">이 메서드의 반환 값은 앞의 표에서 <ph id="ph1">`Compare`</ph> 메서드가 반환하는 값과 같습니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>String.CompareOrdinal<ept id="p1">](xref:System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32))</ept> method is primarily intended for use when ordering or sorting strings.</source>
          <target state="translated"><bpt id="p1">[</bpt>String.CompareOrdinal<ept id="p1">](xref:System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32))</ept> 메서드는 주로 문자열의 순서를 지정하거나 정렬할 때 사용됩니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>You should not use the <bpt id="p1">[</bpt>String.CompareOrdinal<ept id="p1">](xref:System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32))</ept> method to test for equality (that is, to explicitly look for a return value of 0 with no regard for whether one string is less than or greater than the other).</source>
          <target state="translated"><bpt id="p1">[</bpt>String.CompareOrdinal<ept id="p1">](xref:System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32))</ept> 메서드를 통해 문자열이 같은지를 테스트하면 안 됩니다(즉, 한 문자열이 다른 문자열보다 작거나 큰지에 관계없이 반환 값 0을 명시적으로 찾기 위해 사용하면 안 됨).</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Instead, to determine whether two strings are equal, use the <bpt id="p1">[</bpt>String.Equals(String, String, StringComparison)<ept id="p1">](xref:System.String.Equals(System.String,System.String,System.StringComparison))</ept> method.</source>
          <target state="translated">대신, 두 문자열이 같은지를 확인하려면 <bpt id="p1">[</bpt>String.Equals(String, String, StringComparison)<ept id="p1">](xref:System.String.Equals(System.String,System.String,System.StringComparison))</ept> 메서드를 사용합니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The following example uses the <ph id="ph1">`CompareOrdinal`</ph> method to compare the values of two strings.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">`CompareOrdinal`</ph> 메서드를 사용하여 두 문자열의 값을 비교합니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>This example displays <ph id="ph1">`-32`</ph> to the console.</source>
          <target state="translated">이 예제에서는 콘솔에 <ph id="ph1">`-32`</ph>을 표시합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>CompareTo</source>
          <target state="translated">CompareTo</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>String.CompareTo<ept id="p1">](xref:System.String.CompareTo(System.String))</ept> method compares the string that the current string object encapsulates to another string or object.</source>
          <target state="translated"><bpt id="p1">[</bpt>String.CompareTo<ept id="p1">](xref:System.String.CompareTo(System.String))</ept> 메서드는 현재 문자열 개체가 캡슐화하는 문자열을 다른 문자열 또는 개체와 비교합니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The return values of this method are identical to the values returned by the <ph id="ph1">`String.Compare`</ph> method in the previous table.</source>
          <target state="translated">이 메서드의 반환 값은 앞의 표에서 <ph id="ph1">`String.Compare`</ph> 메서드가 반환하는 값과 같습니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>String.CompareTo<ept id="p1">](xref:System.String.CompareTo(System.String))</ept> method is primarily intended for use when ordering or sorting strings.</source>
          <target state="translated"><bpt id="p1">[</bpt>String.CompareTo<ept id="p1">](xref:System.String.CompareTo(System.String))</ept> 메서드는 주로 문자열의 순서를 지정하거나 정렬할 때 사용됩니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>You should not use the <bpt id="p1">[</bpt>String.CompareTo<ept id="p1">](xref:System.String.CompareTo(System.String))</ept> method to test for equality (that is, to explicitly look for a return value of 0 with no regard for whether one string is less than or greater than the other).</source>
          <target state="translated"><bpt id="p1">[</bpt>String.CompareTo<ept id="p1">](xref:System.String.CompareTo(System.String))</ept> 메서드를 통해 같은지 여부를 테스트하면 안 됩니다(즉, 한 문자열이 다른 문자열보다 작거나 큰지에 관계없이 반환 값 0을 명시적으로 찾기 위해 사용하면 안 됨).</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Instead, to determine whether two strings are equal, use the <bpt id="p1">[</bpt>String.Equals(String, String, StringComparison)<ept id="p1">](xref:System.String.Equals(System.String,System.String,System.StringComparison))</ept> method.</source>
          <target state="translated">대신, 두 문자열이 같은지를 확인하려면 <bpt id="p1">[</bpt>String.Equals(String, String, StringComparison)<ept id="p1">](xref:System.String.Equals(System.String,System.String,System.StringComparison))</ept> 메서드를 사용합니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The following example uses the <ph id="ph1">`String.CompareTo`</ph> method to compare the <ph id="ph2">`string1`</ph> object to the <ph id="ph3">`string2`</ph> object.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">`String.CompareTo`</ph> 메서드를 사용하여 <ph id="ph2">`string1`</ph> 개체를 <ph id="ph3">`string2`</ph> 개체와 비교합니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>This example displays <ph id="ph1">`-1`</ph> to the console.</source>
          <target state="translated">이 예제에서는 콘솔에 <ph id="ph1">`-1`</ph>을 표시합니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Equals</source>
          <target state="translated">같음</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>String.Equals<ept id="p1">](xref:System.String.CompareTo(System.String))</ept> method can easily determine if two strings are the same.</source>
          <target state="translated"><bpt id="p1">[</bpt>String.Equals<ept id="p1">](xref:System.String.CompareTo(System.String))</ept> 메서드는 두 문자열이 같은지 여부를 쉽게 확인할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>This case-sensitive method returns a <ph id="ph1">`true`</ph> or <ph id="ph2">`false`</ph> Boolean value.</source>
          <target state="translated">대/소문자 구분 메서드는 <ph id="ph1">`true`</ph> 또는 <ph id="ph2">`false`</ph> 부울 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>It can be used from an existing class, as illustrated in the next example.</source>
          <target state="translated">다음 예제와 같이 기존 클래스에서 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The following example uses the <ph id="ph1">`Equals`</ph> method to determine whether a string object contains the phrase "Hello World".</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">`Equals`</ph> 메서드를 사용하여 문자열 개체에 "Hello World"라는 구가 포함되어 있는지 여부를 확인합니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>This example displays <ph id="ph1">`true`</ph> to the console.</source>
          <target state="translated">이 예제에서는 콘솔에 <ph id="ph1">`true`</ph>을 표시합니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>This method can also be used as a static method.</source>
          <target state="translated">이 메서드는 정적 메서드로 사용될 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The following example compares two string objects using a static method.</source>
          <target state="translated">다음 예제에서는 정적 메서드를 사용하여 두 문자열 개체를 비교합니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>This example displays <ph id="ph1">`true`</ph> to the console.</source>
          <target state="translated">이 예제에서는 콘솔에 <ph id="ph1">`true`</ph>을 표시합니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>StartsWith and EndsWith</source>
          <target state="translated">StartsWith 및 EndsWith</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>You can use the <bpt id="p1">[</bpt>String.StartsWith<ept id="p1">](xref:System.String.StartsWith(System.String))</ept> method to determine whether a string object begins with the same characters that encompass another string.</source>
          <target state="translated"><bpt id="p1">[</bpt>String.StartsWith<ept id="p1">](xref:System.String.StartsWith(System.String))</ept> 메서드를 사용하여 문자열 개체가 다른 문자열을 포함하는 동일한 문자로 시작하는지 여부를 확인합니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>This case-sensitive method returns <ph id="ph1">`true`</ph> if the current string object begins with the passed string and <ph id="ph2">`false`</ph> if it does not.</source>
          <target state="translated">이 대/소문자 구분 메서드는 현재 문자열 개체가 전달된 문자열로 시작하는 경우 <ph id="ph1">`true`</ph>를 반환하고, 전달된 문자열로 시작하지 않는 경우 <ph id="ph2">`false`</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The following example uses this method to determine if a string object begins with "Hello".</source>
          <target state="translated">다음 예제에서는 이 메서드를 사용하여 문자열 개체가 "Hello"로 시작하는지 여부를 확인합니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>This example displays <ph id="ph1">`true`</ph> to the console.</source>
          <target state="translated">이 예제에서는 콘솔에 <ph id="ph1">`true`</ph>을 표시합니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>String.EndsWith<ept id="p1">](xref:System.String.CompareTo(System.String))</ept> method compares a passed string to the characters that exist at the end of the current string object.</source>
          <target state="translated"><bpt id="p1">[</bpt>String.EndsWith<ept id="p1">](xref:System.String.CompareTo(System.String))</ept> 메서드는 전달된 문자열을 현재 문자열 개체의 끝에 있는 문자와 비교합니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>It also returns a Boolean value.</source>
          <target state="translated">역시 부울 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The following example checks the end of a string using the <ph id="ph1">`EndsWith`</ph> method.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">`EndsWith`</ph> 메서드를 사용하여 문자열의 끝을 검사합니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>This example displays <ph id="ph1">`false`</ph> to the console.</source>
          <target state="translated">이 예제에서는 콘솔에 <ph id="ph1">`false`</ph>을 표시합니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>IndexOf and LastIndexOf</source>
          <target state="translated">IndexOf 및 LastIndexOf</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>You can use the <bpt id="p1">[</bpt>String.IndexOf<ept id="p1">](xref:System.String.IndexOf(System.Char))</ept> method to determine the position of the first occurrence of a particular character within a string.</source>
          <target state="translated"><bpt id="p1">[</bpt>String.IndexOf<ept id="p1">](xref:System.String.IndexOf(System.Char))</ept> 메서드를 사용하여 문자열 내에서 특정 문자의 첫 번째 발생 위치를 확인합니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>This case-sensitive method starts counting from the beginning of a string and returns the position of a passed character using a zero-based index.</source>
          <target state="translated">이 대/소문자 구분 메서드는 문자열의 시작 부분에서 계산을 시작하고&amp;0;부터 시작하는 인덱스를 사용하여 전달된 문자의 위치를 반환합니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>If the character cannot be found, a value of –1 is returned.</source>
          <target state="translated">문자를 찾을 수 없는 경우 -1 값이 반환됩니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The following example uses the <ph id="ph1">`IndexOf`</ph> method to search for the first occurrence of the '<ph id="ph2">`l`</ph>' character in a string.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">`IndexOf`</ph> 메서드를 사용하여 문자열에서 '<ph id="ph2">`l`</ph>' 문자의 첫 번째 발생을 검색합니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>This example displays <ph id="ph1">`2`</ph> to the console.</source>
          <target state="translated">이 예제에서는 콘솔에 <ph id="ph1">`2`</ph>을 표시합니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>String.LastIndexOf<ept id="p1">](xref:System.String.LastIndexOf(System.Char))</ept> method is similar to the <ph id="ph1">`String.IndexOf`</ph> method except that it returns the position of the last occurrence of a particular character within a string.</source>
          <target state="translated"><bpt id="p1">[</bpt>String.LastIndexOf<ept id="p1">](xref:System.String.LastIndexOf(System.Char))</ept> 메서드는 문자열 내에서 특정 문자의 마지막 발생 위치를 반환한다는 점을 제외하고 <ph id="ph1">`String.IndexOf`</ph> 메서드와 비슷합니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>It is case-sensitive and uses a zero-based index.</source>
          <target state="translated">대/소문자를 구분하며&amp;0;부터 시작하는 인덱스를 사용합니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The following example uses the <ph id="ph1">`LastIndexOf`</ph> method to search for the last occurrence of the '<ph id="ph2">`l`</ph>' character in a string.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">`LastIndexOf`</ph> 메서드를 사용하여 문자열에서 '<ph id="ph2">`l`</ph>' 문자의 마지막 발생을 검색합니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>This example displays <ph id="ph1">`9`</ph> to the console.</source>
          <target state="translated">이 예제에서는 콘솔에 <ph id="ph1">`9`</ph>을 표시합니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Both methods are useful when used in conjunction with the <bpt id="p1">[</bpt>String.Remove<ept id="p1">](xref:System.String.Remove(System.Int32))</ept> method.</source>
          <target state="translated">두 메서드는 모두 <bpt id="p1">[</bpt>String.Remove<ept id="p1">](xref:System.String.Remove(System.Int32))</ept> 메서드와 함께 사용할 때 유용합니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>You can use either the <ph id="ph1">`IndexOf`</ph> or <ph id="ph2">`LastIndexOf`</ph> methods to retrieve the position of a character, and then supply that position to the <ph id="ph3">`Remove method`</ph> in order to remove a character or a word that begins with that character.</source>
          <target state="translated">문자 또는 해당 문자로 시작하는 단어를 제거하기 위해 <ph id="ph1">`IndexOf`</ph> 또는 <ph id="ph2">`LastIndexOf`</ph> 메서드 중 하나를 사용하여 문자의 위치를 검색한 다음 해당 위치를 <ph id="ph3">`Remove method`</ph> 메서드에 제공할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">참고 항목</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Basic string operations<ept id="p1">](basic-string-operations.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>기본적인 문자열 작업<ept id="p1">](basic-string-operations.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>