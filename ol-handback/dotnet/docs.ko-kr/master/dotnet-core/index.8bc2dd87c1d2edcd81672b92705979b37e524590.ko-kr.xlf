<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-47f9650" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">be44dce8181be45f6d73fcf498a873fb94aa56a6</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\index.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cfe3d1c91c0d48b3af84237c1cda1453ae48bd1e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">40518b9883242ba4484d0e98f199b5aa77e34fb8</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>About .NET</source>
          <target state="translated">.NET 정보</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Learn about the .NET Platform.</source>
          <target state="translated">.NET 플랫폼에 대해 알아봅니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>.NET Platform Guide</source>
          <target state="translated">.NET 플랫폼 가이드</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This article is going to be rewritten.</source>
          <target state="translated">이 문서는 다시 작성될 예정입니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Check out the <bpt id="p1">[</bpt>"Getting Started with .NET Core" tutorials<ept id="p1">](../core/getting-started.md)</ept> to learn how to create a simple .NET Core application.</source>
          <target state="translated">간단한 .NET Core 응용 프로그램을 만드는 방법을 알아보려면 <bpt id="p1">[</bpt>".NET Core 시작" 자습서<ept id="p1">](../core/getting-started.md)</ept>를 확인해 보세요.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>It only takes a few minutes to get your first app up and running.</source>
          <target state="translated">첫 번째 앱을 만들고 실행하는 데 몇 분밖에 걸리지 않습니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>.NET is a general purpose development platform.</source>
          <target state="translated">.NET은 범용 개발 플랫폼입니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>It can be used for any kind of app type or workload where general purpose solutions are used.</source>
          <target state="translated">범용 솔루션이 사용되는 모든 종류의 앱 유형이나 작업에 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>It has several key features that are attractive to many developers, including automatic memory management and modern programming languages, that make it easier to efficiently build high-quality applications.</source>
          <target state="translated">자동 메모리 관리, 최신 프로그래밍 언어 등 고품질 응용 프로그램을 효율적으로 쉽게 빌드할 수 있게 해주며 대부분의 개발자에게 유용한 몇 가지 주요 기능이 있습니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>.NET enables a high-level programming environment with many convenience features, while providing low-level access to native memory and APIs.</source>
          <target state="translated">.NET은 기본 메모리 및 API에 대한 하위 수준 액세스를 제공하는 동시에 다양한 편의 기능이 있는 상위 수준의 프로그래밍 환경을 지원합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>C#, F# and Visual Basic are popular languages that target and rely on the .NET platform.</source>
          <target state="translated">C#, F# 및 Visual Basic은 .NET 플랫폼을 대상으로 하고 사용하는 인기 있는 언어입니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The .NET languages are known for key features such as their asynchronous programming model, language-integrated query, generic types and type system reflection.</source>
          <target state="translated">.NET 언어는 비동기 프로그래밍 모델, Language-Integrated Query, 제네릭 형식, 형식 시스템 리플렉션 등의 주요 기능으로 알려져 있습니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The languages also provide great options for both object-oriented and functional programming paradigms.</source>
          <target state="translated">이 언어는 개체 지향 및 기능 프로그래밍 패러다임에 대한 유용한 옵션도 제공합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>There is great diversity across these languages, in philosophy and syntax, but also symmetry provided by a shared type system.</source>
          <target state="translated">이러한 언어의 철학과 구문은 다양하지만 공유 형식 시스템에서 제공하는 대칭성도 있습니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This type system is provided by the underlying runtime environment.</source>
          <target state="translated">이 형식 시스템은 기본 런타임 환경에서 제공됩니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>.NET was designed around the idea of a "common language runtime" that could support the requirements of diverse languages -- for example, dynamic and statically typed languages -- and enable interoperability between them.</source>
          <target state="translated">.NET은 다양한 언어(예: 동적 및 정적으로 형식화된 언어)의 요구 사항을 지원하고 언어 간에 상호 운용될 수 있도록 하는 "공용 언어 런타임"의 개념을 중심으로 설계되었습니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For example, it's possible to pass a collection of <ph id="ph1">`People`</ph> objects between languages with no loss in semantics or capability.</source>
          <target state="translated">예를 들어 의미 체계 또는 기능의 손실 없이 언어 간에 <ph id="ph1">`People`</ph> 개체 컬렉션을 전달할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Multiple <bpt id="p1">[</bpt>.NET implementations and products<ept id="p1">](components.md)</ept> are available, based on open <bpt id="p2">[</bpt>.NET Standards<ept id="p2">](https://github.com/dotnet/coreclr/blob/master/Documentation/project-docs/dotnet-standards.md)</ept> that specify the fundamentals of the platform.</source>
          <target state="translated">플랫폼의 기본 사항을 지정하는 개방형 <bpt id="p2">[</bpt>.NET 표준<ept id="p2">](https://github.com/dotnet/coreclr/blob/master/Documentation/project-docs/dotnet-standards.md)</ept>에 따라 여러 <bpt id="p1">[</bpt>.NET 구현 및 제품<ept id="p1">](components.md)</ept>을 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>They are separately optimized for different application types (for example, desktop, mobile, gaming, cloud) and support many chips (for example, x86/x64, ARM) and operating systems (for example, Windows, Linux, iOS, Android, macOS).</source>
          <target state="translated">응용 프로그램 종류(예: 데스크톱, 모바일, 게임, 클라우드)에 따라 개별적으로 최적화되며 많은 칩(예: x86/x64, ARM)과 운영 체제(예: Windows, Linux, iOS, Android, macOS)를 지원합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Open source is also an important part of the .NET ecosystem, with multiple .NET implementations and many libraries available under OSI-approved licenses.</source>
          <target state="translated">오픈 소스도 환경의 OSI 승인 라이선스로 여러 .NET 구현과 많은 라이브러리를 사용할 수 있는 .NET 에코시스템의 중요한 부분입니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Learn about <bpt id="p1">[</bpt>C#<ept id="p1">](../csharp/index.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>C#<ept id="p1">](../csharp/index.md)</ept>에 대한 자세한 정보</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Learn about <bpt id="p1">[</bpt>F#<ept id="p1">](../fsharp/index.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>F#<ept id="p1">](../fsharp/index.md)</ept>에 대한 자세한 정보</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Browse the <bpt id="p1">[</bpt>.NET API Library<ept id="p1">](../../api/index.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>.NET API 라이브러리<ept id="p1">](../../api/index.md)</ept> 찾아보기</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Introduction to the Common Language Runtime<ept id="p1">](https://github.com/dotnet/coreclr/blob/master/Documentation/botr/intro-to-clr.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>공용 언어 런타임 소개<ept id="p1">](https://github.com/dotnet/coreclr/blob/master/Documentation/botr/intro-to-clr.md)</ept></target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Fundamentals</source>
          <target state="translated">기본 사항</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Multi-Language<ept id="p1">**</ept> -- .NET provides a well-defined type system, file formats, runtime, framework and tools that can be used by multiple languages, both for their own execution and also to interoperate with other languages using those same components of .NET as their shared currency.</source>
          <target state="translated"><bpt id="p1">**</bpt>다중 언어<ept id="p1">**</ept> - .NET은 여러 언어에서 자체적으로 실행하거나 동일한 .NET 구성 요소를 공유 통화로 사용하는 다른 언어와 상호 운용하기 위해 사용할 수 있는 잘 정의된 형식 시스템, 파일 형식, 런타임, 프레임워크 및 도구를 제공합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Managed Memory<ept id="p1">**</ept> -- .NET automatically manages memory for you via a garbage collector.</source>
          <target state="translated"><bpt id="p1">**</bpt>관리되는 메모리<ept id="p1">**</ept> - .NET은 가비지 수집기를 통해 메모리를 자동으로 관리합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>It ensures that you always reference live objects, guaranteeing that you avoid nasty problems like buffer overruns and access violations.</source>
          <target state="translated">항상 라이브 개체를 참조하여 버퍼 오버런, 액세스 위반 등의 까다로운 문제를 방지하도록 합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This includes array bounds checking.</source>
          <target state="translated">여기에는 배열 범위 검사가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Type Safety<ept id="p1">**</ept> -- The primary .NET model for functionality and memory representation is "types".</source>
          <target state="translated"><bpt id="p1">**</bpt>형식 안전성<ept id="p1">**</ept> - 기능 및 메모리 표현의 기본 .NET 모델은 "형식"입니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Types define shape and optionally behavior.</source>
          <target state="translated">형식은 모양과 필요에 따라 동작을 정의합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The runtime ensures that calling code can only operate on types according to their definition and specified visibility of members, providing consistent, reliable and secure results.</source>
          <target state="translated">런타임에서는 해당 정의 및 지정된 멤버의 표시 여부에 따라 형식에 호출 코드가 적용되도록 하여 일관성 있고 신뢰할 수 있는 안전한 결과를 제공합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Features</source>
          <target state="translated">기능</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>User-defined Value Types<ept id="p1">**</ept> -- Value types are a useful category of types since they offer the semantic of "pass by value" instead of "pass by reference", as is the case for classes.</source>
          <target state="translated"><bpt id="p1">**</bpt>사용자 정의 값 형식<ept id="p1">**</ept> - 값 형식은 클래스의 경우처럼 "참조로 전달"하지 않고 "값으로 전달"하는 의미 체계를 제공하므로 유용한 형식 범주입니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Value types are most obviously usefully for numeric data.</source>
          <target state="translated">값 형식은 숫자 데이터에 특히 유용합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>.NET enables value types for both primitive types, like integers, and user-defined types.</source>
          <target state="translated">.NET에서는 정수 등의 기본 형식과 사용자 정의 형식 둘 다에 값 형식을 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Generic types<ept id="p1">**</ept> -- Generic types are types with one or more type parameters that can be specified on a per-instantiation basis.</source>
          <target state="translated"><bpt id="p1">**</bpt>제네릭 형식<ept id="p1">**</ept> - 제네릭 형식은 인스턴스화별로 지정할 수 있는 하나 이상의 형식 매개 변수가 있는 형식입니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>This is useful for many types, which otherwise would  expose contents as the Object type or require multiple type definitions.</source>
          <target state="translated">이 형식은 콘텐츠를 개체 형식으로 표시하거나 여러 형식 정의가 필요한 여러 형식에 유용합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>For example, a given instantiation of a collection type can be made specific to People, GPS locations or strings.</source>
          <target state="translated">예를 들어 컬렉션 형식의 지정된 인스턴스화를 사용자, GPS 위치 또는 문자열과 관련된 것으로 설정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Reflection<ept id="p1">**</ept> -- .NET defines a metadata format that describes the types within a binary.</source>
          <target state="translated"><bpt id="p1">**</bpt>리플렉션<ept id="p1">**</ept> - .NET에서는 이진 파일 내의 형식을 설명하는 메타데이터 형식을 정의합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The reflection subsystem uses this data, exposing APIs for both reading and instantiating types at runtime.</source>
          <target state="translated">리플렉션 하위 시스템은 이 데이터를 사용하며 런타임에 형식을 읽고 인스턴스화하기 위한 API를 표시합니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This facility is very useful for dynamic scenarios where it is not convenient to know the exact implementation of a program ahead of time.</source>
          <target state="translated">이 기능은 프로그램의 정확한 구현을 미리 알기 어려운 동적 시나리오에 매우 유용합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Flexible code generation<ept id="p1">**</ept> -- .NET does not prescribe a specific approach to transforming .NET binaries into machine code.</source>
          <target state="translated"><bpt id="p1">**</bpt>유연한 코드 생성<ept id="p1">**</ept> - .NET에서는 .NET 이진 파일을 기계어 코드로 변환하는 특정 방법을 규정하지 않습니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Many approaches have been used successfully, including interpretation, just-in-time (JIT) compilation, ahead-of-time (AOT) compilation with JIT fallback and AOT compilation with no JIT fallback.</source>
          <target state="translated">해석, JIT(Just-In-Time) 컴파일, JIT 대체를 사용한 AOT(Ahead-Of-Time) 컴파일, JIT 대체를 사용하지 않는 AOT 컴파일 등 많은 방법이 성공적으로 사용되었습니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Each of these strategies can be valuable and there are opportunities for using them together.</source>
          <target state="translated">이러한 전략은 각각 중요하며 함께 사용할 수 있는 경우도 있습니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Cross-platform<ept id="p1">**</ept> -- .NET was intended to be cross platform from its inception.</source>
          <target state="translated"><bpt id="p1">**</bpt>플랫폼 간<ept id="p1">**</ept> - .NET은 처음부터 플랫폼 간으로 설계되었습니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The binary format and the instruction set are operating system, CPU and pointer-size agnostic.</source>
          <target state="translated">이진 형식과 명령 집합에 운영 체제, CPU 및 포인터 크기 제약이 없습니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>A given .NET binary built in 2000 to run on a 32-bit Windows machine can run on the ARM64 iOS device on 2016 without modification.</source>
          <target state="translated">32비트 Windows 컴퓨터에서 실행되도록 2000에서 빌드된 지정된 .NET 이진 파일을 수정하지 않고 ARM64 iOS 장치의 2016에서 실행할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Open source</source>
          <target state="translated">소스 열기</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>.NET Core<ept id="p1">](https://github.com/dotnet/core)</ept> and <bpt id="p2">[</bpt>Mono<ept id="p2">](https://github.com/mono/mono)</ept> implementations of .NET are open source, using the MIT license.</source>
          <target state="translated">.NET의 <bpt id="p1">[</bpt>.NET Core<ept id="p1">](https://github.com/dotnet/core)</ept> 및 <bpt id="p2">[</bpt>Mono<ept id="p2">](https://github.com/mono/mono)</ept> 구현은 MIT 라이선스를 사용하는 오픈 소스입니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Documentation uses the <bpt id="p1">[</bpt>Creative Commons CC-BY<ept id="p1">](https://creativecommons.org/licenses/by/4.0/)</ept> license.</source>
          <target state="translated">설명서에서는 <bpt id="p1">[</bpt>Creative Commons CC-BY<ept id="p1">](https://creativecommons.org/licenses/by/4.0/)</ept> 라이선스를 사용합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>.NET Core and Mono are sponsored by Microsoft and have many contributors from the community.</source>
          <target state="translated">.NET Core 및 Mono는 Microsoft의 후원과 많은 커뮤니티 참가자의 도움을 받습니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>These general purpose runtimes can be used as the basis of academic research or teaching/learning or commercial products.</source>
          <target state="translated">이러한 범용 런타임을 학술 연구, 교육/학습 또는 상용 제품의 기초로 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Their open nature also means that anyone can contribute back to the upstream product code given a bug or the desire for a new feature.</source>
          <target state="translated">개방적인 특성 때문에 버그가 있거나 새로운 기능을 원할 경우 누구든지 업스트림 제품 코드에 다시 참가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Projects</source>
          <target state="translated">프로젝트</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CoreCLR<ept id="p1">](https://github.com/dotnet/coreclr)</ept> - .NET runtime, used by .NET Core.</source>
          <target state="translated"><bpt id="p1">[</bpt>CoreCLR<ept id="p1">](https://github.com/dotnet/coreclr)</ept> - .NET Core에서 사용되는 .NET 런타임입니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Mono<ept id="p1">](https://github.com/mono/mono)</ept> - .NET runtime, used by Xamarin and others.</source>
          <target state="translated"><bpt id="p1">[</bpt>Mono<ept id="p1">](https://github.com/mono/mono)</ept> - Xamarin 등에서 사용되는 .NET 런타임입니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CoreFX<ept id="p1">](https://github.com/dotnet/coreclr)</ept> - .NET class libraries, used by .NET Core and to a degree by Mono via source sharing.</source>
          <target state="translated"><bpt id="p1">[</bpt>CoreFX<ept id="p1">](https://github.com/dotnet/coreclr)</ept> - .NET Core에서 사용되며 소스 공유를 통해 Mono에서 부분적으로 사용되는 .NET 클래스 라이브러리입니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Roslyn<ept id="p1">](https://github.com/dotnet/roslyn)</ept> - C# and Visual Basic compilers, used by most .NET platforms and tools.</source>
          <target state="translated"><bpt id="p1">[</bpt>Roslyn<ept id="p1">](https://github.com/dotnet/roslyn)</ept> - 대부분의 .NET 플랫폼과 도구에서 사용되는 C# 및 Visual Basic 컴파일러입니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Exposes APIs for reading, writing and analyzing source code.</source>
          <target state="translated">소스 코드를 읽고, 쓰고, 분석하기 위한 API를 표시합니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>F#<ept id="p1">](https://github.com/microsoft/visualfsharp)</ept> - F# compiler.</source>
          <target state="translated"><bpt id="p1">[</bpt>F#<ept id="p1">](https://github.com/microsoft/visualfsharp)</ept> - F# 컴파일러입니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Xamarin SDK<ept id="p1">](http://open.xamarin.com)</ept> - Tools and libraries needed to write Android, iOS and macOS in C# and F#.</source>
          <target state="translated"><bpt id="p1">[</bpt>Xamarin SDK<ept id="p1">](http://open.xamarin.com)</ept> - C# 및 F#으로 Android, iOS 및 macOS를 작성하는 데 필요한 도구 및 라이브러리입니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Standardized</source>
          <target state="translated">표준화됨</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>.NET is specified via open <bpt id="p1">[</bpt>ECMA standards<ept id="p1">](https://github.com/dotnet/coreclr/blob/master/Documentation/project-docs/dotnet-standards.md)</ept> that outline its capabilities and that can be used to make a new implementation.</source>
          <target state="translated">.NET은 해당 기능을 간략하게 설명하며 새 구현을 만드는 데 사용할 수 있는 개방형 <bpt id="p1">[</bpt>ECMA 표준<ept id="p1">](https://github.com/dotnet/coreclr/blob/master/Documentation/project-docs/dotnet-standards.md)</ept>을 통해 지정됩니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>There are other .NET implementations, with Mono and Unity being the most popular beyond the Microsoft ones.</source>
          <target state="translated">다른 .NET 구현도 있으며, Mono와 Unity가 Microsoft 구현보다 가장 많이 사용됩니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>