<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0ca64c3" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7be49f3ac7a7806e631eacf5004343919654881e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\versions\index.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8a5f7522f63cb591d0a9adc186a15d1e6dcd10f3</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">53f5c861effbcb71a5e4990d0bd2649f45aebb5c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>.NET Core Versioning</source>
          <target state="translated">.NET Core 버전 관리</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>.NET Core Versioning</source>
          <target state="translated">.NET Core 버전 관리</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>.NET Core Versioning</source>
          <target state="translated">.NET Core 버전 관리</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>.NET Core is a platform of <bpt id="p1">[</bpt>NuGet packages<ept id="p1">](../packages.md)</ept>, of frameworks and distributed as a unit.</source>
          <target state="translated">.NET Core는 <bpt id="p1">[</bpt>NuGet 패키지<ept id="p1">](../packages.md)</ept> 및 프레임워크의 플랫폼이며 하나의 단위로 배포됩니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Each of these platform layers can be versioned separately for product agility and to accurately describe product changes.</source>
          <target state="translated">이러한 각 플랫폼 계층의 버전은 제품 민첩성을 제공하고 제품 변경 내용을 정확하게 설명하기 위해 별도로 관리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>While there is significant versioning flexibility, there is a desire to version the platform as a unit to make the product easier to understand.</source>
          <target state="translated">버전 관리 유연성도 중요하지만 제품을 더 쉽게 이해하기 위해 플랫폼의 버전을 하나의 단위로 관리하려고 할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The product is in some respects unique, being described and delivered via a package manager (NuGet) as packages.</source>
          <target state="translated">어떤 점에서 제품은 고유하며, 패키지 관리자(NuGet)을 통해 패키지로 설명되고 제공됩니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>While you typically acquire .NET Core as a standalone SDK, the SDK is largely a convenience experience over NuGet packages and therefore not distinct from packages.</source>
          <target state="translated">일반적으로 독립 실행형 SDK로 .NET Core를 획득하지만 SDK는 대체로 NuGet 패키지를 통해 편리한 환경이 되므로 패키지와 구별되지 않습니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>As a result, versioning is first and foremost in terms of packages and other versioning experiences follow from there.</source>
          <target state="translated">결과적으로 버전 관리는 패키지 측면에서 가장 중요하며 다른 버전 관리 환경은 그 다음입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Semantic Versioning</source>
          <target state="translated">유의적 버전</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>.NET Core uses <bpt id="p1">[</bpt>Semantic Versioning (SemVer)<ept id="p1">](http://semver.org/)</ept>, adopting the use of major.minor.patch versioning, using the various parts of the version number to describe the degree and kind of change.</source>
          <target state="translated">.NET Core는 <bpt id="p1">[</bpt>유의적 버전(SemVer)<ept id="p1">](http://semver.org/)</ept>을 사용하여 major.minor.patch 버전 관리를 사용하고 버전 번호의 다양한 부분으로 변경의 수준 및 종류를 설명합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The following versioning template is generally applied to .NET Core.</source>
          <target state="translated">다음 버전 관리 템플릿은 일반적으로 .NET Core에 적용됩니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>There are cases where it has been adapted to fit with existing versioning.</source>
          <target state="translated">기존 버전 관리에 맞게 조정된 경우가 있습니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>These cases are described later in this document.</source>
          <target state="translated">이러한 경우는 이 문서의 뒷부분에서 설명합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For example, frameworks are only intended to represent platform and API capabilities, which aligns with major/minor versioning.</source>
          <target state="translated">예를 들어 프레임워크는 플랫폼 및 API 기능만 나타내도록 되어 있어 주/부 버전 관리에 맞게 조정됩니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Versioning Form</source>
          <target state="translated">버전 관리 양식</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>MAJOR.MINOR.PATCH[-PRERELEASE-BUILDNUMBER]</source>
          <target state="translated">MAJOR.MINOR.PATCH[-PRERELEASE-BUILDNUMBER]</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Decision Tree</source>
          <target state="translated">의사 결정 트리</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>MAJOR when:</source>
          <target state="translated">MAJOR인 경우:</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>drop support for a platform</source>
          <target state="translated">플랫폼에 대한 지원 삭제</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>adopt a newer MAJOR version of an existing dependency</source>
          <target state="translated">기존 종속성의 최신 MAJOR 버전 채택</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>disable a compatibility quirk off by default</source>
          <target state="translated">기본적으로 호환성 쿼크 해제 사용 안 함</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>MINOR when:</source>
          <target state="translated">MINOR인 경우:</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>add public API surface area</source>
          <target state="translated">공용 API 노출 영역 추가</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>add new behavior</source>
          <target state="translated">새 동작 추가</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>adopt a newer MINOR version of an existing dependency</source>
          <target state="translated">기존 종속성의 최신 MINOR 버전 채택</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>introduce a new dependency</source>
          <target state="translated">새 종속성 도입</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>PATCH when:</source>
          <target state="translated">PATCH인 경우</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>make bug fixes</source>
          <target state="translated">버그 수정</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>add support for a newer platform</source>
          <target state="translated">최신 플랫폼에 대한 지원 추가</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>adopt a newer PATCH version of an existing dependency</source>
          <target state="translated">기존 종속성의 최신 PATCH 버전 채택</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>any other change (not otherwise captured)</source>
          <target state="translated">다른 모든 변경(달리 캡처되지 않음)</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>When determining what to increment when there are multiple changes, choose the highest kind of change.</source>
          <target state="translated">여러 가지 변경 내용이 있는 경우 증분할 항목을 결정할 때 가장 높은 종류의 변경 내용을 선택하세요.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Versioning Scheme</source>
          <target state="translated">버전 관리 체계</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>.NET Core can be defined as and will version in the following way:</source>
          <target state="translated">다음과 같은 방법으로 .NET Core를 정의하고 버전 관리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>A runtime and framework implementation, distributed as packages.</source>
          <target state="translated">패키지로 배포되는 런타임 및 프레임워크 구현.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Each package is versioned independently, particularly for patch versioning.</source>
          <target state="translated">특히 패치 버전 관리의 경우 각 패키지 버전을 독립적으로 관리합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>A set of metapackages that reference fine-grained packages as a versioned unit.</source>
          <target state="translated">세분화된 패키지를 버전이 있는 단위로 참조하는 메타패키지 집합.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Metapackages are versioned separately from packages.</source>
          <target state="translated">메타패키지는 패키지와 별도로 버전 관리합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>A set of frameworks (for example, <ph id="ph1">`netstandard`</ph>) that represent a progressively larger API set, described in a set of versioned snapshots.</source>
          <target state="translated">버전이 있는 스냅숏 집합에 설명된 대로 점점 더 커지는 API 집합을 나타내는 프레임워크 집합(예: <ph id="ph1">`netstandard`</ph>).</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Packages</source>
          <target state="translated">패키지</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Library packages evolve and version independently.</source>
          <target state="translated">라이브러리 패키지는 독립적으로 발전하고 버전 관리됩니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Packages that overlap with .NET Framework System.<ph id="ph1">\*</ph></source>
          <target state="translated">.NET Framework System.<ph id="ph1">\*</ph></target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>assemblies typically use 4.x versions, aligning with the .NET Framework 4.x versioning (a historical choice).</source>
          <target state="translated">어셈블리와 겹치는 패키지는 일반적으로 .NET Framework 4.x 버전 관리(기록 선택)를 지원하는 4.x 버전을 사용합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Packages that do not overlap with the .NET Framework libraries (for example, <bpt id="p1">[</bpt>System.Reflection.Metadata<ept id="p1">](https://www.nuget.org/packages/System.Reflection.Metadata)</ept>) typically start at 1.0 and increment from there.</source>
          <target state="translated">.NET Framework 라이브러리(예: <bpt id="p1">[</bpt>System.Reflection.Metadata<ept id="p1">](https://www.nuget.org/packages/System.Reflection.Metadata)</ept>)와 겹치지 않는 패키지는 일반적으로 1.0에서 시작하여 증가합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The packages described by <bpt id="p1">[</bpt>NETStandard.Library<ept id="p1">](https://www.nuget.org/packages/NETStandard.Library)</ept> are treated specially due to being at the base of the platform.</source>
          <target state="translated"><bpt id="p1">[</bpt>NETStandard.Library<ept id="p1">](https://www.nuget.org/packages/NETStandard.Library)</ept>에 설명된 패키지는 플랫폼의 맨 아래에 있기 때문에 특별하게 처리됩니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>NETStandard.Library packages will typically version as a set, since they have implementation-level dependencies between them.</source>
          <target state="translated">NETStandard.Library 패키지는 해당 패키지 간에 구현 수준 종속성이 있기 때문에 일반적으로 집합으로 버전 관리됩니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>APIs will only be added to NETStandard.Library packages as part of major or minor .NET Core releases, since doing so would require adding a new <ph id="ph1">`netstandard`</ph> version.</source>
          <target state="translated">.NET Core 주 또는 부 릴리스의 일부로 API만 NETStandard.Library 패키지에 추가되는데, 이렇게 하면 새 <ph id="ph1">`netstandard`</ph> 버전을 추가해야 하기 때문입니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>This is in addition to SemVer requirements.</source>
          <target state="translated">이는 SemVer 요구 사항 이외의 추가 요구 사항입니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Metapackages</source>
          <target state="translated">메타패키지</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Versioning for .NET Core metapackages is based on the framework that they map to.</source>
          <target state="translated">.NET Core 메타패키지에 대한 버전 관리는 해당 메타패키지가 매핑되는 프레임워크를 기반으로 합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The metapackages adopt the highest version number of the framework (for example, netstandard1.6) it maps to in its package closure.</source>
          <target state="translated">메타패키지는 패키지 종료 시 매핑되는 프레임워크의 가장 높은 버전 번호(예: netstandard1.6)를 채택합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The patch version for the metapackage is used to represent updates to the metapackage to reference updated packages.</source>
          <target state="translated">메타패키지의 패치 버전은 업데이트된 패키지를 참조하도록 메타패키지에 대한 업데이트를 나타내는 데 사용됩니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Patch versions will never include an updated framework version.</source>
          <target state="translated">패치 버전에는 업데이트된 프레임워크 버전이 포함되지 않습니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>As a result, the metapackages are not strictly SemVer compliant because their versioning scheme doesn't represent the degree of change in the underlying packages, but primarily the API level.</source>
          <target state="translated">결과적으로 메타패키지의 버전 관리 체계에서는 기본 패키지의 변경 수준을 나타내지 않고 주로 API 수준을 나타내기 때문에 메타패키지는 엄격하게 SemVer 규격이 아닙니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>There are two primary metapackages for .NET Core.</source>
          <target state="translated">.NET Core에 대한 주 메타패키지는 두 가지가 있습니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>NETStandard.Library<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>NETStandard.Library<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>v1.6 as of .NET Core 1.0 (these versions won't typically or intentionally match).</source>
          <target state="translated">.NET Core 1.0 기준 v1.6(이러한 버전은 일반적으로나 의도적으로 일치하지 않음).</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Maps to the <ph id="ph1">`netstandard`</ph> framework.</source>
          <target state="translated"><ph id="ph1">`netstandard`</ph> 프레임워크에 매핑됩니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Describes the packages that are considered required for modern app development and that .NET platforms must implement to be considered a <bpt id="p1">[</bpt>.NET Standard<ept id="p1">](../../standard/library.md)</ept> platform.</source>
          <target state="translated">최신 앱 개발에 필요한 것으로 간주되고 .NET 플랫폼에서 <bpt id="p1">[</bpt>.NET 표준<ept id="p1">](../../standard/library.md)</ept> 플랫폼으로 간주되도록 구현해야 하는 패키지를 설명합니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Microsoft.NETCore.App<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>Microsoft.NETCore.App<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>v1.0 as of .NET Core 1.0 (these versions will match).</source>
          <target state="translated">.NET Core 1.0 기준 v1.0(이러한 버전은 일치함).</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Maps to the <ph id="ph1">`netcoreapp`</ph> framework.</source>
          <target state="translated"><ph id="ph1">`netcoreapp`</ph> 프레임워크에 매핑됩니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Describes the packages in the .NET Core distribution.</source>
          <target state="translated">.NET Core 배포의 패키지를 설명합니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Note: <bpt id="p1">[</bpt><ph id="ph1">`Microsoft.NETCore.Portable.Compatibility`</ph><ept id="p1">](https://www.nuget.org/packages/Microsoft.NETCore.Portable.Compatibility)</ept> is another .NET Core metapackage.</source>
          <target state="translated">참고: <bpt id="p1">[</bpt><ph id="ph1">`Microsoft.NETCore.Portable.Compatibility`</ph><ept id="p1">](https://www.nuget.org/packages/Microsoft.NETCore.Portable.Compatibility)</ept>는 또 다른 .NET Core 메타패키지입니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>It doesn't map to a particular framework, so versions like a package.</source>
          <target state="translated">특정 프레임워크에 매핑되지 않으므로 패키지처럼 버전 관리합니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Frameworks</source>
          <target state="translated">프레임워크</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Framework versions are updated when new APIs are added.</source>
          <target state="translated">프레임워크 버전은 새 API가 추가될 때 업데이트됩니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>They have no concept of patch version, since they represent API shape and not implementation concerns.</source>
          <target state="translated">이러한 버전은 구현 관련 사항이 아닌 API 셰이프를 나타내므로 패치 버전에 대한 개념이 없습니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Major and minor versioning will follow the SemVer rules specified earlier.</source>
          <target state="translated">주 및 부 버전 관리는 앞 부분에 지정된 SemVer 규칙을 따릅니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`netcoreapp`</ph> framework is tied to the .NET Core distribution.</source>
          <target state="translated"><ph id="ph1">`netcoreapp`</ph> 프레임워크는 .NET Core 배포에 연결되어 있습니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>It will follow the version numbers used by .NET Core.</source>
          <target state="translated">따라서 .NET Core에서 사용하는 버전 번호를 따릅니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>For example, when .NET Core 2.0 is released, it will target <ph id="ph1">`netcoreapp2.0`</ph>.</source>
          <target state="translated">예를 들어 .NET Core 2.0이 릴리스되면 <ph id="ph1">`netcoreapp2.0`</ph>을 대상으로 합니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`netstandard`</ph> framework will not match the versioning scheme of any .NET runtime, given that it is equally applicable to all of them.</source>
          <target state="translated">모든 프레임워크에 동일하게 적용된다는 점을 고려하면 <ph id="ph1">`netstandard`</ph> 프레임워크는 .NET 런타임의 버전 관리 체계와 일치하지 않습니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Versioning in Practice</source>
          <target state="translated">실제 버전 관리</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>There are commits and PRs on .NET Core repos on GitHub on a daily basis, resulting in new builds of many libraries.</source>
          <target state="translated">GitHub의 .NET Core 리포지토리에는 매일 많은 라이브러리의 새로운 빌드를 생성하는 커밋 및 PR이 있습니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>It is not practical to create new public versions of .NET Core for every change.</source>
          <target state="translated">.NET Core의 모든 변경 내용에 대해 새로운 공개 버전을 만드는 것은 실용적이지 않습니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Instead, changes will be aggregated over some loosely-defined period of time (for example, weeks or months) before making a new public stable .NET Core version.</source>
          <target state="translated">대신 느슨하게 정의된 일정 기간(예: 주 또는 월) 동안 변경 내용을 집계한 후 .NET Core의 안정적인 새 공개 버전을 만듭니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>A new version of .NET Core could mean several things:</source>
          <target state="translated">.NET Core의 새 버전은 다음과 같은 여러 가지를 의미할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>New versions of packages and metapackages.</source>
          <target state="translated">패키지 및 메타패키지의 새 버전.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>New versions of various frameworks, assuming the addition of new APIs.</source>
          <target state="translated">새 API의 추가를 가정하는 다양한 프레임워크의 새 버전.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>New version of the .NET Core distribution.</source>
          <target state="translated">.NET Core 배포의 새 버전.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Shipping a patch release</source>
          <target state="translated">패치 릴리스 전달</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>After shipping a .NET Core v1.0.0 stable version, patch-level changes (no new APIs) are made to .NET Core libraries to fix bugs and improve performance and reliability.</source>
          <target state="translated">.NET Core v1.0.0 안정적 버전을 전달한 후 버그를 수정하고 성능 및 안정성을 개선하기 위해 .NET Core 라이브러리에서 패치 수준 변경(새 API 없음)을 수행합니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The various metapackages are updated to reference the updated .NET Core library packages.</source>
          <target state="translated">다양한 메타패키지가 업데이트된 .NET Core 라이브러리 패키지를 참조하도록 업데이트됩니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The metapackages are versioned as patch updates (x.y.z).</source>
          <target state="translated">이 메타패키지는 패치 업데이트(x.y.z)로 버전 관리됩니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Frameworks are not updated.</source>
          <target state="translated">프레임워크는 업데이트되지 않습니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>A new .NET Core distribution is released with a matching version number to the <ph id="ph1">`Microsoft.NETCore.App`</ph> metapackage.</source>
          <target state="translated">새로운 .NET Core 배포가 <ph id="ph1">`Microsoft.NETCore.App`</ph> 메타패키지와 일치하는 버전 번호로 릴리스됩니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>You can see patch updates demonstrated in the project.json examples below.</source>
          <target state="translated">아래의 project.json 예제에 표시된 패치 업데이트를 확인할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Shipping a minor release</source>
          <target state="translated">부 릴리스 전달</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>After shipping a .NET Core v1.0.0 stable version, new APIs are added to .NET Core libraries to enable new scenarios.</source>
          <target state="translated">.NET Core v1.0.0 안정적 버전을 전달한 후 새 시나리오를 사용하기 위해 새 API를 .NET Core 라이브러리에 추가합니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The various metapackages are updated to reference the updated .NET Core library packages.</source>
          <target state="translated">다양한 메타패키지가 업데이트된 .NET Core 라이브러리 패키지를 참조하도록 업데이트됩니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The metapackages are versioned as patch updates (x.y) to match the higher framework version.</source>
          <target state="translated">메타패키지는 더 높은 프레임워크 버전과 일치하도록 패치 업데이트(x.y)로 버전 관리됩니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The various frameworks are updated to describe the new APIs.</source>
          <target state="translated">새 API를 설명하도록 다양한 프레임워크가 업데이트됩니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>A new .NET Core distribution is released with a matching version number to the <ph id="ph1">`Microsoft.NETCore.App`</ph> metapackage.</source>
          <target state="translated">새로운 .NET Core 배포가 <ph id="ph1">`Microsoft.NETCore.App`</ph> 메타패키지와 일치하는 버전 번호로 릴리스됩니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>You can see minor updates demonstrated in the following project file:</source>
          <target state="translated">다음 프로젝트 파일에 표시된 부분 업데이트를 확인할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Shipping a major release</source>
          <target state="translated">주 릴리스 전달</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Given a .NET Core v1.y.z stable version, new APIs are added to .NET Core libraries to enable major new scenarios.</source>
          <target state="translated">.NET Core v1.y.z 안정적 버전을 지정하고 주요 새 시나리오를 사용하기 위해 새 API를 .NET Core 라이브러리에 추가합니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Perhaps, support is dropped for a platform.</source>
          <target state="translated">플랫폼에 대한 지원이 삭제될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The various metapackages are updated to reference the updated .NET Core library packages.</source>
          <target state="translated">다양한 메타패키지가 업데이트된 .NET Core 라이브러리 패키지를 참조하도록 업데이트됩니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Microsoft.NETCore.App`</ph> metapackage and the <ph id="ph2">`netcore`</ph> framework are versioned as a major update (x.).</source>
          <target state="translated"><ph id="ph1">`Microsoft.NETCore.App`</ph> 메타패키지 및 <ph id="ph2">`netcore`</ph> 프레임워크는 주요 업데이트(x.)로 버전 관리됩니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`NETStandard.Library`</ph> metapackage is likely  versioned as a minor update (x.y) since it applies to multiple .NET implementations.</source>
          <target state="translated"><ph id="ph1">`NETStandard.Library`</ph> 메타패키지는 여러 .NET 구현에 적용되므로 부분 업데이트(x.y)로 버전 관리될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>A new .NET Core distribution would be released with a matching version number to the <ph id="ph1">`Microsoft.NETCore.App`</ph> metapackage.</source>
          <target state="translated">새로운 .NET Core 배포가 <ph id="ph1">`Microsoft.NETCore.App`</ph> 메타패키지와 일치하는 버전 번호로 릴리스됩니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>You can see major updates demonstrated in the following project file.</source>
          <target state="translated">다음 프로젝트 파일에 표시된 주요 업데이트를 확인할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>(Note that <ph id="ph1">`netcoreapp2.0`</ph> has not been released.)</source>
          <target state="translated">(<ph id="ph1">`netcoreapp2.0`</ph>은 릴리스되지 않았습니다.)</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>