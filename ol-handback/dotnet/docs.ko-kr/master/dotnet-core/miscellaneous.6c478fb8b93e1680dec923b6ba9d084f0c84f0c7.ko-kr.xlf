<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-47f9650" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6b8e39902dc735cac72864024033fe5cc14fb55a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\base-types\miscellaneous.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0bf6098ec644670f574509c8d2e79ef7eda34713</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e2e801fedbf89f8301da3d1e24bf4b5f42b42532</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Miscellaneous constructs in regular expressions</source>
          <target state="translated">정규식의 기타 구문</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Miscellaneous constructs in regular expressions</source>
          <target state="translated">정규식의 기타 구문</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Miscellaneous constructs in regular expressions</source>
          <target state="translated">정규식의 기타 구문</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Regular expressions in .NET include three miscellaneous language constructs.</source>
          <target state="translated">.NET의 정규식에는 세 가지 기타 언어 구문이 포함됩니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>One lets you enable or disable particular matching options in the middle of a regular expression pattern.</source>
          <target state="translated">한 구문에서는 정규식 패턴 중간에 특정 일치 옵션을 사용하거나 사용하지 않도록 설정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The remaining two let you include comments in a regular expression.</source>
          <target state="translated">나머지 두 구문에서는 정규식에 주석을 포함할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Inline Options</source>
          <target state="translated">인라인 옵션</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You can set or disable specific pattern matching options for part of a regular expression by using the syntax</source>
          <target state="translated">구문을 사용하여 정규식의 일부에 대해 특정 패턴 일치 옵션을 사용하거나 사용하지 않도록 설정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You list the options you want to enable after the question mark, and the options you want to disable after the minus sign.</source>
          <target state="translated">물음표 뒤에 사용할 옵션을 나열하고, 빼기 기호 뒤에 사용하지 않을 옵션을 나열합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The following table describes each option.</source>
          <target state="translated">다음 표는 각 옵션에 대해 설명합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For more information about each option, see <bpt id="p1">[</bpt>Regular expression options<ept id="p1">](options.md)</ept>.</source>
          <target state="translated">각 옵션에 대한 자세한 내용은 <bpt id="p1">[</bpt>정규식 옵션<ept id="p1">](options.md)</ept>을 참조하세요.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Option</source>
          <target state="translated">옵션</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">설명</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>i<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>i<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Case-insensitive matching.</source>
          <target state="translated">대/소문자를 구분하지 않는 일치입니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>m<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>m<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Multiline mode.</source>
          <target state="translated">여러 줄 모드입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>n<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>n<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Explicit captures only.</source>
          <target state="translated">명시적 캡처만 해당합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>(Parentheses do not act as capturing groups.)</source>
          <target state="translated">괄호는 캡처링 그룹으로 동작하지 않습니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>s<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>s<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Single-line mode.</source>
          <target state="translated">한 줄 모드입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>x<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>x<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Ignore unescaped white space, and allow x-mode comments.</source>
          <target state="translated">이스케이프되지 않은 공백을 무시하고 x-모드 주석을 허용합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Any change in regular expression options defined by the <bpt id="p1">**</bpt>(?imnsx-imnsx)<ept id="p1">**</ept> construct remains in effect until the end of the enclosing group.</source>
          <target state="translated"><bpt id="p1">**</bpt>(?imnsx-imnsx)<ept id="p1">**</ept> 구문에서 정의된 정규식 옵션의 변경 내용은 포함 그룹의 끝까지 계속 적용됩니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>(?imnsx-imnsx<ept id="p1">**</ept>:<bpt id="p2">_</bpt>subexpression<ept id="p2">_</ept><bpt id="p3">**</bpt>)<ept id="p3">**</ept> grouping construct provides identical functionality for a subexpression.</source>
          <target state="translated"><bpt id="p1">**</bpt>(?imnsx-imnsx<ept id="p1">**</ept>:<bpt id="p2">_</bpt>subexpression<ept id="p2">_</ept><bpt id="p3">**</bpt>)<ept id="p3">**</ept> 그룹화 구문은 하위 식에 대해 동일한 기능을 제공합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Grouping constructs in regular expressions<ept id="p1">](grouping.md)</ept>.</source>
          <target state="translated">자세한 내용은 <bpt id="p1">[</bpt>정규식의 그룹화 구문<ept id="p1">](grouping.md)</ept>을 참조하세요.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The following example uses the <bpt id="p1">**</bpt>i<ept id="p1">**</ept>, <bpt id="p2">**</bpt>n<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>x<ept id="p3">**</ept> options to enable case insensitivity and explicit captures, and to ignore white space in the regular expression pattern in the middle of a regular expression.</source>
          <target state="translated">다음 예제에서는 <bpt id="p1">**</bpt>i<ept id="p1">**</ept>, <bpt id="p2">**</bpt>n<ept id="p2">**</ept> 및 <bpt id="p3">**</bpt>x<ept id="p3">**</ept> 옵션을 통해 대/소문자 구분 안 함 및 명시적 캡처를 사용하고 정규식 중간의 정규식 패턴에 있는 공백을 무시합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The example defines two regular expressions.</source>
          <target state="translated">이 예제에서는 두 개의 정규식을 정의합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The first, <ph id="ph1">`\b(D\w+)\s(d\w+)\b`</ph>, matches two consecutive words that begin with an uppercase "D" and a lowercase "d".</source>
          <target state="translated">첫 번째 <ph id="ph1">`\b(D\w+)\s(d\w+)\b`</ph> 정규식은 대문자 "D"와 소문자 "d"로 시작하는 두 개의 연속 단어와 일치합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The second regular expression, <ph id="ph1">`\b(D\w+)(?ixn) \s (d\w+) \b`</ph>, uses inline options to modify this pattern, as described in the following table.</source>
          <target state="translated">두 번째 <ph id="ph1">`\b(D\w+)(?ixn) \s (d\w+) \b`</ph> 정규식은 다음 표에 설명된 대로 인라인 옵션을 사용하여 이 패턴을 수정합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>A comparison of the results confirms the effect of the <ph id="ph1">`(?ixn)`</ph> construct.</source>
          <target state="translated">결과를 비교하면 <ph id="ph1">`(?ixn)`</ph> 구문의 효과를 확인할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">패턴</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">설명</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Start at a word boundary.</source>
          <target state="translated">단어 경계를 시작합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Match a capital "D" followed by one or more word characters.</source>
          <target state="translated">대문자 "D"와 하나 이상의 단어 문자를 찾습니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>This is the first capture group.</source>
          <target state="translated">첫 번째 캡처 그룹입니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>From this point on, make comparisons case-insensitive, make only explicit captures, and ignore white space in the regular expression pattern.</source>
          <target state="translated">이때부터 대/소문자를 구분하지 않고 비교하고, 명시적 캡처만 수행되며, 정규식 패턴의 공백이 무시됩니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Match a white-space character.</source>
          <target state="translated">공백 문자를 찾습니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Match an uppercase or lowercase "d" followed by one or more word characters.</source>
          <target state="translated">대문자 또는 소문자 "d"와 하나 이상의 단어 문자를 찾습니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This group is not captured because the n (explicit capture) option was enabled..</source>
          <target state="translated">이 그룹은 n(명시적 캡처) 옵션이 사용되었으므로 캡처되지 않습니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Match a word boundary.</source>
          <target state="translated">단어 경계를 찾습니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Inline Comment</source>
          <target state="translated">인라인 주석</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>(?#<ept id="p1">**</ept> <bpt id="p2">_</bpt>comment<ept id="p2">_</ept><bpt id="p3">**</bpt>)<ept id="p3">**</ept> construct lets you include an inline comment in a regular expression.</source>
          <target state="translated"><bpt id="p1">**</bpt>(?#<ept id="p1">**</ept> <bpt id="p2">_</bpt>comment<ept id="p2">_</ept><bpt id="p3">**</bpt>)<ept id="p3">**</ept> 구문에서는 정규식에 인라인 주석을 포함할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The regular expression engine does not use any part of the comment in pattern matching, although the comment is included in the string that is returned by the <bpt id="p1">[</bpt>Regex.ToString<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Unescape(System.String))</ept> method.</source>
          <target state="translated"><bpt id="p1">[</bpt>Regex.ToString<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Unescape(System.String))</ept> 메서드에서 반환된 문자열에 주석이 포함되어 있어도 정규식 엔진은 패턴 일치에 주석을 사용하지 않습니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The comment ends at the first closing parenthesis.</source>
          <target state="translated">주석이 첫 번째 닫는 괄호 문자에서 끝납니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The following example repeats the first regular expression pattern from the example in the previous section.</source>
          <target state="translated">다음 예제에서는 이전 섹션의 예제에서 사용된 첫 번째 정규식 패턴을 반복합니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>It adds two inline comments to the regular expression to indicate whether the comparison is case-sensitive.</source>
          <target state="translated">정규식에 두 개의 인라인 주석을 추가하여 비교가 대/소문자를 구분하는지 여부를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The regular expression pattern, <ph id="ph1">`\b((?# case-sensitive comparison)D\w+)\s((?#case-insensitive comparison)d\w+)\b`</ph>, is defined as follows.</source>
          <target state="translated">정규식 패턴 <ph id="ph1">`\b((?# case-sensitive comparison)D\w+)\s((?#case-insensitive comparison)d\w+)\b`</ph>는 다음과 같이 정의됩니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">패턴</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">설명</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Start at a word boundary.</source>
          <target state="translated">단어 경계를 시작합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>A comment.</source>
          <target state="translated">주석입니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>It does not affect pattern-matching behavior.</source>
          <target state="translated">패턴 일치 동작에 영향을 주지 않습니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Match a capital "D" followed by one or more word characters.</source>
          <target state="translated">대문자 "D"와 하나 이상의 단어 문자를 찾습니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>This is the first capturing group.</source>
          <target state="translated">이 그룹은 첫 번째 캡처링 그룹입니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Match a white-space character.</source>
          <target state="translated">공백 문자를 찾습니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>`From this point on, make comparisons case-insensitive, make only explicit captures, and ignore white space in the regular expression pattern.</source>
          <target state="translated">이때부터 대/소문자를 구분하지 않고 비교하고, 명시적 캡처만 수행되며, 정규식 패턴의 공백이 무시됩니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>A comment.</source>
          <target state="translated">주석입니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>It does not affect pattern-matching behavior.</source>
          <target state="translated">패턴 일치 동작에 영향을 주지 않습니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Match an uppercase or lowercase "d" followed by one or more word characters.</source>
          <target state="translated">대문자 또는 소문자 "d"와 하나 이상의 단어 문자를 찾습니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>This is the second capture group.</source>
          <target state="translated">두 번째 캡처 그룹입니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Match a word boundary.</source>
          <target state="translated">단어 경계를 찾습니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>End-of-Line Comment</source>
          <target state="translated">줄의 끝 주석</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>A number sign (<bpt id="p1">**</bpt><ph id="ph1">#</ph><ept id="p1">**</ept>) marks an x-mode comment, which starts at the unescaped # character at the end of the regular expression pattern and continues until the end of the line.</source>
          <target state="translated">숫자 기호(<bpt id="p1">**</bpt><ph id="ph1">#</ph><ept id="p1">**</ept>)는 정규식 패턴의 끝에 있는 이스케이프되지 않은 # 문자에서 시작하고 줄의 끝까지 계속되는 x-mode 주석을 표시합니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>To use this construct, you must either enable the <bpt id="p1">**</bpt>x<ept id="p1">**</ept> option (through inline options) or supply the <bpt id="p2">[</bpt>RegexOptions.IgnorePatternWhitespace<ept id="p2">](xref:System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace)</ept> value to the <bpt id="p3">*</bpt>option<ept id="p3">*</ept> parameter when instantiating the <bpt id="p4">[</bpt>Regex<ept id="p4">](xref:System.Text.RegularExpressions.Regex)</ept> object or calling a static <bpt id="p5">[</bpt>Regex<ept id="p5">](xref:System.Text.RegularExpressions.Regex)</ept> method.</source>
          <target state="translated">이 구문을 사용하려면 인라인 옵션을 통해 <bpt id="p1">**</bpt>x<ept id="p1">**</ept> 옵션을 사용하거나, <bpt id="p4">[</bpt>Regex<ept id="p4">](xref:System.Text.RegularExpressions.Regex)</ept> 개체를 인스턴스화하거나 정적 <bpt id="p5">[</bpt>Regex<ept id="p5">](xref:System.Text.RegularExpressions.Regex)</ept> 메서드를 호출할 때 <bpt id="p2">[</bpt>RegexOptions.IgnorePatternWhitespace<ept id="p2">](xref:System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace)</ept> 값을 <bpt id="p3">*</bpt>option<ept id="p3">*</ept> 매개 변수에 제공해야 합니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The following example illustrates the end-of-line comment construct.</source>
          <target state="translated">다음 예제에서는 줄의 끝 주석 구문을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>It determines whether a string is a composite format string that includes at least one format item.</source>
          <target state="translated">문자열이 하나 이상의 형식 항목을 포함하는 복합 형식 문자열인지 여부를 결정합니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The following table describes the constructs in the regular expression pattern:</source>
          <target state="translated">다음 표에서는 정규식 패턴의 구문을 설명합니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`\{\d+(,-*\d+)*(\:\w{1,4}?)*\}(?x) # Looks for a composite format item`</ph>.</source>
          <target state="translated"><ph id="ph1">`\{\d+(,-*\d+)*(\:\w{1,4}?)*\}(?x) # Looks for a composite format item`</ph>.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">패턴</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">설명</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Match an opening brace.</source>
          <target state="translated">여는 중괄호를 찾습니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Match one or more decimal digits.</source>
          <target state="translated">하나 이상의&amp;10;진수 숫자가 일치하는지 확인합니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Match zero or one occurrence of a comma, followed by an optional minus sign, followed by one or more decimal digits.</source>
          <target state="translated">선택적 빼기 기호, 하나 이상의&amp;10;진수 앞에 나오는 쉼표를&amp;0;번 또는 한 번 찾습니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Match zero or one occurrence of a colon, followed by one to four, but as few as possible, white-space characters.</source>
          <target state="translated">1-4개(최대한 적은 개수)의 공백 문자 앞에 나오는 콜론을&amp;0;번 또는 한 번 찾습니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>An inline comment.</source>
          <target state="translated">인라인 주석입니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>It has no effect on pattern-matching behavior.</source>
          <target state="translated">패턴 일치 동작에 영향을 주지 않습니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Match a closing brace.</source>
          <target state="translated">닫는 중괄호를 찾습니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Enable the ignore pattern white-space option so that the end-of-line comment will be recognized.</source>
          <target state="translated">줄의 끝 주석이 인식되도록 패턴 공백 무시 옵션을 사용하도록 설정합니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>An end-of-line comment.</source>
          <target state="translated">줄의 끝 주석입니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Note that, instead of providing the <ph id="ph1">`(?x)`</ph> construct in the regular expression, the comment could also have been recognized by calling the <bpt id="p1">[</bpt>Regex.IsMatch(String, String, RegexOptions)<ept id="p1">](xref:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions))</ept> method and passing it the <bpt id="p2">[</bpt>RegexOptions.IgnorePatternWhitespace<ept id="p2">](xref:System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace)</ept> enumeration value.</source>
          <target state="translated">정규식에 <ph id="ph1">`(?x)`</ph> 구문을 제공하는 대신 <bpt id="p1">[</bpt>Regex.IsMatch(String, String, RegexOptions)<ept id="p1">](xref:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions))</ept> 메서드를 호출하고 <bpt id="p2">[</bpt>RegexOptions.IgnorePatternWhitespace<ept id="p2">](xref:System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace)</ept> 열거형 값을 전달하여 주석이 인식되었을 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">참고 항목</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Regular expression language - quick reference<ept id="p1">](quick-ref.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>정규식 언어 - 빠른 참조<ept id="p1">](quick-ref.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>