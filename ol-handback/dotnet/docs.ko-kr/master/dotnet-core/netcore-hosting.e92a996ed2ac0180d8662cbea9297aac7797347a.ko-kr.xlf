<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0ca64c3" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">01b3b0e7a0e2d2a330b10b2f3482ddd1ed3d51bf</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\tutorials\netcore-hosting.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7e542b525b8245c7b60beb5f2bf0ec4ec1f8be20</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f82402e2298ea66394108d5b3488949b76dad04d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Hosting .NET Core | Microsoft Docs</source>
          <target state="translated">.NET Core 호스트 | Microsoft 문서</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Hosting the .NET Core runtime from native code</source>
          <target state="translated">네이티브 코드에서 .NET Core 런타임 호스트</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core, Hosting, Hosting .NET Core</source>
          <target state="translated">.NET, .NET Core, 호스트, .NET Core 호스트</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Hosting .NET Core</source>
          <target state="translated">.NET Core 호스트</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Like all managed code, .NET Core applications are executed by a host.</source>
          <target state="translated">모든 관리 코드와 같이 .NET Core 응용 프로그램은 호스트에서 실행됩니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The host is responsible for starting the runtime (including components like the JIT and garbage collector), creating AppDomains, and invoking managed entry points.</source>
          <target state="translated">호스트는 런타임(가비지 수집기 및 JIT와 같은 구성 요소 포함)을 시작하고 AppDomain을 만들고 관리 진입점을 호출합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Hosting the .NET Core runtime is an advanced scenario and, in most cases, .NET Core developers don't need to worry about hosting because .NET Core build processes provide a default host to run .NET Core applications.</source>
          <target state="translated">.NET Core 런타임 호스트는 고급 시나리오이며, .NET Core 빌드 프로세스는 .NET Core 응용 프로그램을 실행하는 기본 호스트를 제공하므로 대부분의 경우 .NET Core 개발자는 호스트에 대해 걱정할 필요가 없습니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In some specialized circumstances, though, it can be useful to explicitly host the .NET Core runtime, either as a means of invoking managed code in a native process or in order to gain more control over how the runtime works.</source>
          <target state="translated">그러나 일부 특수한 경우, 네이티브 프로세스에서 관리 코드를 호출하는 수단으로나 런타임 작동 방식에 대해 더 많은 제어 권한을 얻기 위해 .NET Core 런타임을 명시적으로 호스트한 것이 유용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This article gives an overview of the steps necessary to start the .NET Core runtime from native code, create an initial application domain (<ph id="ph1">@System.AppDomain</ph>), and execute managed code in it.</source>
          <target state="translated">이 문서에서는 네이티브 코드에서 .NET Core 런타임을 시작하고 초기 응용 프로그램 도메인(<ph id="ph1">@System.AppDomain</ph>)을 만들고 관리 코드를 실행하는 데 필요한 단계에 대한 개요를 제공합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
          <target state="translated">필수 조건</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Because hosts are native applications, this tutorial will cover constructing a C++ application to host .NET Core.</source>
          <target state="translated">호스트는 네이티브 응용 프로그램이기 때문에 이 자습서에서는 .NET Core를 호스트하는 C++ 응용 프로그램을 생성을 다룹니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You will need a C++ development environment (such as that provided by <bpt id="p1">[</bpt>Visual Studio<ept id="p1">](https://www.visualstudio.com/downloads/)</ept>).</source>
          <target state="translated"><bpt id="p1">[</bpt>Visual Studio<ept id="p1">](https://www.visualstudio.com/downloads/)</ept>에서 제공하는 C++ 개발 환경 같은 C++ 개발 환경이 필요합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You will also want a simple .NET Core application to test the host with, so you should install the <bpt id="p1">[</bpt>.NET Core SDK<ept id="p1">](https://www.microsoft.com/net/core)</ept> and <bpt id="p2">[</bpt>build a small .NET Core test app<ept id="p2">](https://github.com/dotnet/docs/blob/master/docs/csharp/getting-started/with-visual-studio.md)</ept> (such as a 'Hello World' app).</source>
          <target state="translated">또한 호스트를 테스트할 간단한 .NET Core 응용 프로그램이 필요하므로 <bpt id="p1">[</bpt>.NET Core SDK<ept id="p1">](https://www.microsoft.com/net/core)</ept>를 설치하고 <bpt id="p2">[</bpt>소규모 .NET Core 테스트 앱<ept id="p2">](https://github.com/dotnet/docs/blob/master/docs/csharp/getting-started/with-visual-studio.md)</ept>(예: 'Hello World' 앱)을 빌드해야 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The 'Hello World' app created by the new .NET Core console project template is sufficient.</source>
          <target state="translated">새로운 .NET Core 콘솔 프로젝트 템플릿으로 만든 'Hello World' 앱으로 충분합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This tutorial and its <bpt id="p1">[</bpt>associated sample<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/hosting)</ept> build a Windows host, but please see the notes at the end of this article about hosting on Unix.</source>
          <target state="translated">이 자습서와 해당 <bpt id="p1">[</bpt>관련 샘플<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/hosting)</ept>에서는 Windows 호스트를 빌드합니다. 그러나 Unix에서 호스트에 대해서는 이 문서의 마지막 부분을 참조하세요.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Creating the host</source>
          <target state="translated">호스트 만들기</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>A sample host demonstrating the steps outlined in this article is available in our <bpt id="p1">[</bpt>.NET Core samples<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/hosting)</ept> repository.</source>
          <target state="translated">이 문서에 설명된 단계를 보여 주는 샘플 호스트는 <bpt id="p1">[</bpt>.NET Core 샘플<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/hosting)</ept> 리포지토리에서 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Comments in the sample's host.cpp file clearly associate the numbered steps from this tutorial with where they are performed in the sample.</source>
          <target state="translated">샘플의 host.cpp 파일의 주석은 이 자습서에서 번호가 매겨진 단계를 샘플에서 수행되는 위치와 명확하게 연결합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Keep in mind that the sample host is meant to be used for learning purposes, so it is light on error checking and is designed to emphasize readability over efficiency.</source>
          <target state="translated">샘플 호스트는 학습 목적으로 사용되므로 오류 검사가 부족하며 효율성보다 가독성을 강조하도록 설계되었습니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>More real-world host samples are available in the <bpt id="p1">[</bpt>dotnet/coreclr<ept id="p1">](https://github.com/dotnet/coreclr/tree/master/src/coreclr/hosts)</ept> repository.</source>
          <target state="translated"><bpt id="p1">[</bpt>dotnet/coreclr<ept id="p1">](https://github.com/dotnet/coreclr/tree/master/src/coreclr/hosts)</ept> 리포지토리에서 더 많은 실제 호스트 샘플을 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>CoreRun host<ept id="p1">](https://github.com/dotnet/coreclr/tree/master/src/coreclr/hosts/corerun)</ept>, in particular, is a good general-purpose host to study after reading through the simpler sample.</source>
          <target state="translated">특히 <bpt id="p1">[</bpt>CoreRun 호스트<ept id="p1">](https://github.com/dotnet/coreclr/tree/master/src/coreclr/hosts/corerun)</ept>는 간단한 샘플을 읽은 후 학습하기 좋은 일반 용도의 호스트입니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>A note about mscoree.h</source>
          <target state="translated">mscoree.h에 대한 정보</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The primary .NET Core hosting interface (<ph id="ph1">`ICLRRuntimeHost2`</ph>) is defined in <bpt id="p1">[</bpt>MSCOREE.IDL<ept id="p1">](https://github.com/dotnet/coreclr/blob/master/src/inc/MSCOREE.IDL)</ept>.</source>
          <target state="translated">기본 .NET Core 호스팅 인터페이스(<ph id="ph1">`ICLRRuntimeHost2`</ph>)는 <bpt id="p1">[</bpt>MSCOREE.IDL<ept id="p1">](https://github.com/dotnet/coreclr/blob/master/src/inc/MSCOREE.IDL)</ept>에 정의됩니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>A header version of this file (mscoree.h), which your host will need to reference, is produced via MIDL when the <bpt id="p1">[</bpt>.NET Core runtime<ept id="p1">](https://github.com/dotnet/coreclr/)</ept> is built.</source>
          <target state="translated">호스트에서 참조해야 할 이 파일의 헤더 버전(mscoree.h)은 <bpt id="p1">[</bpt>.NET Core 런타임<ept id="p1">](https://github.com/dotnet/coreclr/)</ept>이 빌드될 때 MIDL을 통해 생성됩니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If you do not want to build the .NET Core runtime, mscoree.h is also available as a <bpt id="p1">[</bpt>pre-built header<ept id="p1">](https://github.com/dotnet/coreclr/tree/master/src/pal/prebuilt/inc)</ept> in the dotnet/coreclr repository.</source>
          <target state="translated">.NET Core 런타임을 빌드하지 않으려는 경우 mscoree.h는 dotnet/coreclr 리포지토리에 <bpt id="p1">[</bpt>미리 빌드된 헤더<ept id="p1">](https://github.com/dotnet/coreclr/tree/master/src/pal/prebuilt/inc)</ept>로 제공됩니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Instructions on building the .NET Core runtime<ept id="p1">](https://github.com/dotnet/coreclr#building-the-repository)</ept> can be found in its GitHub repository.</source>
          <target state="translated"><bpt id="p1">[</bpt>.NET Core 런타임 빌드에 대한 지침<ept id="p1">](https://github.com/dotnet/coreclr#building-the-repository)</ept>은 GitHub 리포지토리에서 찾을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Step 1 - Identify the managed entry point</source>
          <target state="translated">1단계 - 관리되는 진입점 식별</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>After referencing necessary headers (<bpt id="p1">[</bpt>mscoree.h<ept id="p1">](https://github.com/dotnet/coreclr/tree/master/src/pal/prebuilt/inc/mscoree.h)</ept> and stdio.h, for example), one of the first things a .NET Core host must do is locate the managed entry point it will be using.</source>
          <target state="translated">필요한 헤더(예: <bpt id="p1">[</bpt>mscoree.h<ept id="p1">](https://github.com/dotnet/coreclr/tree/master/src/pal/prebuilt/inc/mscoree.h)</ept> 및 stdio.h)를 참조한 후 .NET Core 호스트에서는 가장 먼저 사용할 관리되는 진입점을 찾아야 합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In our sample host, this is done by just taking the first command line argument to our host as the path to a managed binary whose <ph id="ph1">`main`</ph> method will be executed.</source>
          <target state="translated">샘플 호스트에서는 <ph id="ph1">`main`</ph> 메서드가 실행될 관리되는 이진 파일에 대한 경로로 첫 번째 명령줄 인수를 호스트로 사용하여 관리되는 진입점을 찾습니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NetCoreHost#1<ept id="p2">](../../../samples/core/hosting/host.cpp#1)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NetCoreHost#1<ept id="p2">](../../../samples/core/hosting/host.cpp#1)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Step 2 - Find and load CoreCLR.dll</source>
          <target state="translated">2단계 - CoreCLR.dll 찾기 및 로드</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The .NET Core runtime APIs are in <bpt id="p1">*</bpt>CoreCLR.dll<ept id="p1">*</ept> (on Windows).</source>
          <target state="translated">.NET Core 런타임 API는 <bpt id="p1">*</bpt>CoreCLR.dll<ept id="p1">*</ept>(Windows)에 있습니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>To get our hosting interface (<ph id="ph1">`ICLRRuntimeHost2`</ph>), it's necessary to find and load <bpt id="p1">*</bpt>CoreCLR.dll<ept id="p1">*</ept>.</source>
          <target state="translated">호스팅 인터페이스(<ph id="ph1">`ICLRRuntimeHost2`</ph>)를 가져오려면 <bpt id="p1">*</bpt>CoreCLR.dll<ept id="p1">*</ept>를 찾고 로드해야 합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>It is up to the host to define a convention for how it will locate <bpt id="p1">*</bpt>CoreCLR.dll<ept id="p1">*</ept>.</source>
          <target state="translated">호스트에 따라 <bpt id="p1">*</bpt>CoreCLR.dll<ept id="p1">*</ept>을 찾는 방법에 대한 규칙을 정의합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Some hosts expect the file to be present in a well-known machine-wide location (such as %programfiles%\dotnet\shared\Microsoft.NETCore.App\1.1.0).</source>
          <target state="translated">일부 호스트에서는 잘 알려진 컴퓨터 수준의 위치(예: %programfiles%\dotnet\shared\Microsoft.NETCore.App\1.1.0)에 파일이 있습니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Others expect that <bpt id="p1">*</bpt>CoreCLR.dll<ept id="p1">*</ept> will be loaded from a location next to either the host itself or the app to be hosted.</source>
          <target state="translated">다른 호스트에서는 <bpt id="p1">*</bpt>CoreCLR.dll<ept id="p1">*</ept>이 호스트 자체 또는 호스트되는 앱 옆의 위치에서 로드됩니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Still others might consult an environment variable to find the library.</source>
          <target state="translated">라이브러리를 찾기 위해 환경 변수를 참조할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>On Linux or Mac, the core runtime library is <bpt id="p1">*</bpt>libcoreclr.so<ept id="p1">*</ept> or <bpt id="p2">*</bpt>libcoreclr.dylib<ept id="p2">*</ept>, respectively.</source>
          <target state="translated">Linux 또는 Mac에서 핵심 런타임 라이브러리는 각각 <bpt id="p1">*</bpt>libcoreclr.so<ept id="p1">*</ept> 또는 <bpt id="p2">*</bpt>libcoreclr.dylib<ept id="p2">*</ept>입니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Our sample host probes a few common locations for <bpt id="p1">*</bpt>CoreCLR.dll<ept id="p1">*</ept>.</source>
          <target state="translated">샘플 호스트는 <bpt id="p1">*</bpt>CoreCLR.dll<ept id="p1">*</ept>에 대해 몇 가지 일반적인 위치를 검색합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Once found, it must be loaded via <ph id="ph1">`LoadLibrary`</ph> (or <ph id="ph2">`dlopen`</ph> on Linux/Mac).</source>
          <target state="translated">위치를 찾으면 <ph id="ph1">`LoadLibrary`</ph>(또는 Linux/Mac에서<ph id="ph2">`dlopen`</ph>)를 통해 로드되어야 합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NetCoreHost#2<ept id="p2">](../../../samples/core/hosting/host.cpp#2)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NetCoreHost#2<ept id="p2">](../../../samples/core/hosting/host.cpp#2)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Step 3 - Get an ICLRRuntimeHost2 Instance</source>
          <target state="translated">3단계 - ICLRRuntimeHost2 인스턴스 가져오기</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ICLRRuntimeHost2`</ph> hosting interface is retrieved by calling <ph id="ph2">`GetProcAddress`</ph> (or <ph id="ph3">`dlsym`</ph> on Linux/Mac) on <ph id="ph4">`GetCLRRuntimeHost`</ph>, and then invoking that function.</source>
          <target state="translated"><ph id="ph1">`ICLRRuntimeHost2`</ph> 호스팅 인터페이스는 <ph id="ph4">`GetCLRRuntimeHost`</ph>에서 <ph id="ph2">`GetProcAddress`</ph>(또는 Linux/Mac에서 <ph id="ph3">`dlsym`</ph>)를 호출한 다음 해당 함수를 호출하여 검색됩니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NetCoreHost#3<ept id="p2">](../../../samples/core/hosting/host.cpp#3)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NetCoreHost#3<ept id="p2">](../../../samples/core/hosting/host.cpp#3)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Step 4 - Setting startup flags and starting the runtime</source>
          <target state="translated">4단계 - 시작 플래그 설정 및 런타임 시작</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>With an <ph id="ph1">`ICLRRuntimeHost2`</ph> in-hand, we can now specify runtime-wide startup flags and start the runtime.</source>
          <target state="translated"><ph id="ph1">`ICLRRuntimeHost2`</ph>를 사용하여 이제 전체 런타임의 시작 플래그를 지정하고 런타임을 시작할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Startup flags will determine which garbage collector (GC) to use (concurrent or server), whether we will use a single AppDomain or multiple AppDomains, and what loader optimization policy to use (for domain-neutral loading of assemblies).</source>
          <target state="translated">시작 플래그는 사용할 GC(가비지 수집기)(동시 또는 서버), 단일 AppDomain을 사용할지 여러 AppDomain을 사용할지 여부, 사용할 로더 최적화 정책(도메인 중립적인 어셈블리 로드에 대해)을 결정합니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NetCoreHost#4<ept id="p2">](../../../samples/core/hosting/host.cpp#4)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NetCoreHost#4<ept id="p2">](../../../samples/core/hosting/host.cpp#4)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The runtime is started with a call to the <ph id="ph1">`Start`</ph> function.</source>
          <target state="translated">런타임은 <ph id="ph1">`Start`</ph> 함수에 대한 호출로 시작됩니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Step 5 - Preparing AppDomain settings</source>
          <target state="translated">5단계 - AppDomain 설정 준비</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Once the runtime is started, we will want to set up an AppDomain.</source>
          <target state="translated">런타임이 시작되면 AppDomain을 설정합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>There are a number of options that must be specified when creating a .NET AppDomain, however, so it's necessary to prepare those first.</source>
          <target state="translated">.NET AppDomain을 만들 때 지정해야 하는 옵션이 여러 개 있지만 먼저 그러한 옵션을 준비해야 합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>AppDomain flags specify AppDomain behaviors related to security and interop.</source>
          <target state="translated">AppDomain 플래그는 보안 및 interop와 관련된 AppDomain 동작을 지정합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Older Silverlight hosts used these settings to sandbox user code, but most modern .NET Core hosts run user code as full trust and enable interop.</source>
          <target state="translated">이전 Silverlight 호스트는 샌드박스 사용자 코드에 이러한 설정을 사용했지만, 최신.NET Core 호스트는 완전 신뢰 상태로 사용자 코드를 실행하고 interop을 사용하도록 설정합니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NetCoreHost#5<ept id="p2">](../../../samples/core/hosting/host.cpp#5)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NetCoreHost#5<ept id="p2">](../../../samples/core/hosting/host.cpp#5)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>After deciding which AppDomain flags to use, AppDomain properties must be defined.</source>
          <target state="translated">사용할 AppDomain 플래그를 결정한 후 AppDomain 속성을 정의해야 합니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The properties are key/value pairs of strings.</source>
          <target state="translated">속성은 문자열의 키/값 쌍입니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Many of the properties relate to how the AppDomain will load assemblies.</source>
          <target state="translated">많은 속성은 AppDomain이 어셈블리를 로드하는 방법과 관련됩니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Common AppDomain properties include:</source>
          <target state="translated">일반적인 AppDomain 속성에는 다음이 포함됩니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TRUSTED_PLATFORM_ASSEMBLIES`</ph> This is a list of assembly paths (delimited by ';' on Windows and ':' on Unix) which the AppDomain should prioritize loading and give full trust to (even in partially-trusted domains).</source>
          <target state="translated"><ph id="ph1">`TRUSTED_PLATFORM_ASSEMBLIES`</ph> AppDomain에서 로드의 우선 순위를 지정하고 완전 신뢰(부분적으로 신뢰할 수 있는 도메인에서도)를 제공해야 하는 어셈블리 경로 목록입니다(Windows에서 ';'으로 구분되고 Unix에서 ':'으로 구분됨).</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>This list is meant to contain 'Framework' assemblies and other trusted modules, similar to the GAC in .NET Framework scenarios.</source>
          <target state="translated">이 목록에는 'Framework' 어셈블리 및 .NET Framework 시나리오에서 GAC와 비슷한 기타 신뢰할 수 있는 모듈이 포함됩니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Some hosts will put any library next to <bpt id="p1">*</bpt>coreclr.dll<ept id="p1">*</ept> on this list, others have hard-coded manifests listing trusted assemblies for their purposes.</source>
          <target state="translated">일부 호스트는 이 목록에서 <bpt id="p1">*</bpt>coreclr.dll<ept id="p1">*</ept> 옆에 라이브러리를 배치하고, 일부에는 목적에 대해 신뢰할 수 있는 어셈블리를 나열하는 하드 코드된 매니페스트가 있습니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`APP_PATHS`</ph> This is a list of paths to probe in for an assembly if it can't be found in the trusted platform assemblies (TPA) list.</source>
          <target state="translated"><ph id="ph1">`APP_PATHS`</ph> TPA(신뢰할 수 있는 플랫폼 어셈블리) 목록에서 찾을 수 없는 경우 어셈블리에 대해 검색하는 경로 목록입니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>These paths are meant to be the locations where users' assemblies can be found.</source>
          <target state="translated">이러한 경로는 사용자의 어셈블리를 찾을 수 있는 위치입니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>In a sandboxed AppDomain, assemblies loaded from these paths will only be granted partial trust.</source>
          <target state="translated">샌드박스 AppDomain에서 이러한 경로에서 로드된 어셈블리에는 부분 신뢰만 제공됩니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Common APP_PATH paths include the path the target app was loaded from or other locations where user assets are known to live.</source>
          <target state="translated">일반적인 APP_PATH 경로에는 대상 앱이 로드되는 경로 또는 사용자 자산이 있다고 알려진 기타 위치가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`APP_NI_PATHS`</ph> This list is very similar to APP_PATHS except that it's meant to be paths that will be probed for native images.</source>
          <target state="translated"><ph id="ph1">`APP_NI_PATHS`</ph> 이 목록은 네이티브 이미지에 대해 검색되는 경로를 제외하고, APP_PATHS와 아주 비슷합니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`NATIVE_DLL_SEARCH_DIRECTORIES`</ph> This property is a list of paths the loader should probe when looking for native DLLs called via p/invoke.</source>
          <target state="translated"><ph id="ph1">`NATIVE_DLL_SEARCH_DIRECTORIES`</ph> 이 속성은 p/invoke를 통해 호출되는 네이티브 DLL을 찾을 때 로더에서 검색해야 하는 경로 목록입니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`PLATFORM_RESOURCE_ROOTS`</ph> This list includes paths to probe in for resource satellite assemblies (in culture-specific sub-directories).</source>
          <target state="translated"><ph id="ph1">`PLATFORM_RESOURCE_ROOTS`</ph> 이 목록에는 (문화권별 하위 디렉터리에서) 리소스 위성 어셈블리에 대해 검색하는 경로가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`AppDomainCompatSwitch`</ph> This string specifies which compatibility quirks should be used for assemblies without an explicit Target Framework Moniker (an assembly-level attribute indicating which Framework an assembly is meant to run against).</source>
          <target state="translated"><ph id="ph1">`AppDomainCompatSwitch`</ph> 이 문자열은 명시적 대상 프레임워크 모니커(어셈블리에서 실행할 프레임워크를 나타내는 어셈블리 수준 특성)가 없는 어셈블리에 대해 사용해야 할 호환성 쿼크를 지정합니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Typically, this should be set to <ph id="ph1">`"UseLatestBehaviorWhenTFMNotSpecified"`</ph> but some hosts may prefer to get older Silverlight or Windows Phone compatibility quirks, instead.</source>
          <target state="translated">일반적으로 <ph id="ph1">`"UseLatestBehaviorWhenTFMNotSpecified"`</ph>로 설정되어야 하지만 일부 호스트에서는 대신 이전 Silverlight 또는 Windows Phone 호환성 쿼크를 가져올 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>In our <bpt id="p1">[</bpt>simple sample host<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/hosting)</ept>, these properties are set up as follows:</source>
          <target state="translated"><bpt id="p1">[</bpt>간단한 샘플 호스트<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/hosting)</ept>에서는 이러한 속성이 다음과 같이 설정됩니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NetCoreHost#6<ept id="p2">](../../../samples/core/hosting/host.cpp#6)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NetCoreHost#6<ept id="p2">](../../../samples/core/hosting/host.cpp#6)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Step 6 - Create the AppDomain</source>
          <target state="translated">6단계 - AppDomain 만들기</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Once all AppDomain flags and properties are prepared, <ph id="ph1">`ICLRRuntimeHost2::CreateAppDomainWithManager`</ph> can be used to set up the AppDomain.</source>
          <target state="translated">모든 AppDomain 플래그 및 속성이 준비되면 <ph id="ph1">`ICLRRuntimeHost2::CreateAppDomainWithManager`</ph>를 사용하여 AppDomain을 설정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>This function optionally takes a fully qualified assembly name and type name to use as the domain's AppDomain manager.</source>
          <target state="translated">이 함수는 선택적으로 정규화된 어셈블리 이름 및 형식 이름을 가져와서 도메인의 AppDomain 관리자로 사용합니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>An AppDomain manager can allow a host to control some aspects of AppDomain behavior and may provide entry points for launching managed code if the host doesn't intend to invoke user code directly.</source>
          <target state="translated">AppDomain 관리자는 호스트에서 AppDomain 동작의 일부 측면을 제어하도록 허용할 수 있고, 호스트에서 사용자 코드를 직접 호출하지 않는 경우 관리 코드를 실행하기 위한 진입점을 제공할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NetCoreHost#7<ept id="p2">](../../../samples/core/hosting/host.cpp#7)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NetCoreHost#7<ept id="p2">](../../../samples/core/hosting/host.cpp#7)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Step 7 - Run managed code!</source>
          <target state="translated">7단계 - 관리 코드 실행</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>With an AppDomain up and running, the host can now start executing managed code.</source>
          <target state="translated">AppDomain이 실행 중이면 호스트에서 이제 관리 코드를 실행할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The easiest way to do this is to use <ph id="ph1">`ICLRRuntimeHost2::ExecuteAssembly`</ph> to invoke a managed assembly's entry point method.</source>
          <target state="translated"><ph id="ph1">`ICLRRuntimeHost2::ExecuteAssembly`</ph>를 사용하여 관리되는 어셈블리의 진입점 메서드를 호출하면 가장 쉽게 관리 코드를 실행할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Note that this function only works in single-domain scenarios.</source>
          <target state="translated">이 함수는 단일 도메인 시나리오에서만 작동합니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NetCoreHost#8<ept id="p2">](../../../samples/core/hosting/host.cpp#8)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NetCoreHost#8<ept id="p2">](../../../samples/core/hosting/host.cpp#8)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Another option, if <ph id="ph1">`ExecuteAssembly`</ph> doesn't meet your host's needs, is to use <ph id="ph2">`CreateDelegate`</ph> to create a function pointer to a static managed method.</source>
          <target state="translated"><ph id="ph1">`ExecuteAssembly`</ph>가 호스트의 요구 사항을 충족하지 않는 경우 <ph id="ph2">`CreateDelegate`</ph>를 사용하여 정적 관리 메서드에 대한 함수 포인터를 만듭니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>This requires the host to know the signature of the method it is calling into (in order to create the function pointer type) but allows hosts the flexibility to invoke code other than an assembly's entry point.</source>
          <target state="translated">이 경우 호스트에서 호출하는 메서드의 시그니처를 알아야 하지만(함수 포인터 형식을 만들기 위해) 호스트는 어셈블리의 진입점이 아닌 코드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Step 8 - Clean up</source>
          <target state="translated">8단계 - 정리</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Finally, the host should clean up after itself by unloading AppDomains, stopping the runtime, and releasing the <ph id="ph1">`ICLRRuntimeHost2`</ph> reference.</source>
          <target state="translated">마지막으로 호스트는 AppDomain을 언로드하고, 런타임을 중지하고, <ph id="ph1">`ICLRRuntimeHost2`</ph> 참조를 릴리스하여 자체 정리해야 합니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NetCoreHost#9<ept id="p2">](../../../samples/core/hosting/host.cpp#9)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>NetCoreHost#9<ept id="p2">](../../../samples/core/hosting/host.cpp#9)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>About Hosting .NET Core on Unix</source>
          <target state="translated">Unix에서.NET Core 호스트에 대한 정보</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>.NET Core is a cross-platform product, running on Windows, Linux, and Mac operating systems.</source>
          <target state="translated">.NET Core는 Windows, Linux 및 Mac 운영 체제에서 실행되는 플랫폼 간 제품입니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>As native applications, though, hosts for different platforms will have some differences between them.</source>
          <target state="translated">그러나 네이티브 응용 프로그램으로서, 여러 플랫폼의 호스트에는 서로 몇 가지 차이점이 있습니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The process described above of using <ph id="ph1">`ICLRRuntimeHost2`</ph> to start the runtime, create an AppDomain, and execute managed code, should work on any supported operating system.</source>
          <target state="translated">위에서 설명한 <ph id="ph1">`ICLRRuntimeHost2`</ph>를 사용하여 런타임을 시작하고 AppDomain을 만들며 관리 코드를 실행하는 프로세스는 지원되는 운영 체제에서 작동되어야 합니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>However, the interfaces defined in mscoree.h can be cumbersome to work with on Unix platforms since mscoree makes many Win32 assumptions.</source>
          <target state="translated">그러나 mscoree.h에 정의된 인터페이스는 mscoree가 많은 Win32 가정을 만들기 때문에 Unix 플랫폼에서 사용하기 힘들 수 있습니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>To make hosting on Unix platforms easier, a set of more platform-neutral hosting API wrappers are available in <bpt id="p1">[</bpt>coreclrhost.h<ept id="p1">](https://github.com/dotnet/coreclr/blob/master/src/coreclr/hosts/inc/coreclrhost.h)</ept>.</source>
          <target state="translated">Unix 플랫폼에서 더 간단하게 호스트하기 위해 <bpt id="p1">[</bpt>coreclrhost.h<ept id="p1">](https://github.com/dotnet/coreclr/blob/master/src/coreclr/hosts/inc/coreclrhost.h)</ept>에서 더 많은 플랫폼 중립적인 호스팅 API 래퍼 집합을 제공합니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>An example of using coreclrhost.h (instead of mscoree.h directly) can be seen in the <bpt id="p1">[</bpt>UnixCoreRun host<ept id="p1">](https://github.com/dotnet/coreclr/tree/master/src/coreclr/hosts)</ept>.</source>
          <target state="translated">coreclrhost.h를 사용(mscoree.h 대신 직접적으로)하는 예는 <bpt id="p1">[</bpt>UnixCoreRun 호스트<ept id="p1">](https://github.com/dotnet/coreclr/tree/master/src/coreclr/hosts)</ept>에서 확인할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The steps to use the APIs from coreclrhost.h to host the runtime are similar to the steps when using mscoree.h:</source>
          <target state="translated">coreclrhost.h의 API를 사용하여 런타임을 호스트하는 단계는 mscoree.h를 사용할 때의 단계와 비슷합니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Identify the managed code to execute (from command line parameters, for example).</source>
          <target state="translated">실행할 관리 코드를 식별합니다(예: 명령줄 매개 변수에서).</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Load the CoreCLR library.</source>
          <target state="translated">CoreCLR 라이브러리를 로드합니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Get function pointers to CoreCLR's <ph id="ph1">`coreclr_initialize`</ph>, <ph id="ph2">`coreclr_create_delegate`</ph>, <ph id="ph3">`coreclr_execute_assembly`</ph>, and <ph id="ph4">`coreclr_shutdown`</ph> functions using <ph id="ph5">`dlsym`</ph></source>
          <target state="translated"><ph id="ph5">`dlsym`</ph>을 사용하여 CoreCLR의 <ph id="ph1">`coreclr_initialize`</ph>, <ph id="ph2">`coreclr_create_delegate`</ph>, <ph id="ph3">`coreclr_execute_assembly`</ph> 및 <ph id="ph4">`coreclr_shutdown`</ph> 함수에 대한 함수 포인터를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Set up AppDomain properties (such as the TPA list).</source>
          <target state="translated">AppDomain 속성(예: TPA 목록)을 설정합니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>This is the same as step 5 from the mscoree workflow, above.</source>
          <target state="translated">위 mscoree 워크플로의 5단계와 동일합니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`coreclr_initialize`</ph> to start the runtime and create an AppDomain.</source>
          <target state="translated"><ph id="ph1">`coreclr_initialize`</ph>를 사용하여 런타임을 시작하고 AppDomain을 만듭니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>This will also create a <ph id="ph1">`hostHandle`</ph> pointer that will be used in future hosting calls.</source>
          <target state="translated">그러면 향후 호스팅 호출에 사용되는 <ph id="ph1">`hostHandle`</ph> 포인터도 생성됩니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Note that this function performs the roles of both steps 4 and 6 from the previous workflow.</source>
          <target state="translated">이 함수는 이전 워크플로에서 4단계 및 6단계의 역할을 모두 수행합니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Use either <ph id="ph1">`coreclr_execute_assembly`</ph> or <ph id="ph2">`coreclr_create_delegate`</ph> to execute managed code.</source>
          <target state="translated"><ph id="ph1">`coreclr_execute_assembly`</ph> 또는 <ph id="ph2">`coreclr_create_delegate`</ph>를 사용하여 관리 코드를 실행합니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>These functions are analogous to mscoree's <ph id="ph1">`ExecuteAssembly`</ph> and <ph id="ph2">`CreateDelegate`</ph> functions from step 7 of the previous workflow.</source>
          <target state="translated">이러한 함수는 이전 워크플로에서 7단계에 있는 mscoree의 <ph id="ph1">`ExecuteAssembly`</ph> 및 <ph id="ph2">`CreateDelegate`</ph> 함수와 유사합니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`coreclr_shutdown`</ph> to unload the AppDomain and shut down the runtime.</source>
          <target state="translated"><ph id="ph1">`coreclr_shutdown`</ph>을 사용하여 AppDomain을 언로드하고 런타임을 종료합니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Conclusion</source>
          <target state="translated">결론</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Once your host is built, it can be tested by running it from the command line and passing any arguments (like the managed app to run) the host expects.</source>
          <target state="translated">호스트가 빌드되면 명령줄에서 실행하고 호스트에서 예상하는 인수(예: 실행할 관리 앱)를 전달하여 테스트할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>When specifying the .NET Core app for the host to run, be sure to use the .dll that is produced by <ph id="ph1">`dotnet build`</ph>.</source>
          <target state="translated">실행할 호스트에 대해 .NET Core 앱을 지정할 때 <ph id="ph1">`dotnet build`</ph>로 생성된 .dll을 사용하세요.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Executables produced by <ph id="ph1">`dotnet publish`</ph> for self-contained applications are actually the default .NET Core host (so that the app can be launched directly from the command line in mainline scenarios); user code is compiled into a dll of the same name.</source>
          <target state="translated">자체 포함된 응용 프로그램에 대해 <ph id="ph1">`dotnet publish`</ph>로 생성된 실행 파일이 실제로 기본 .NET Core 호스트이며(앱이 주 시나리오의 명령줄에서 직접 실행될 수 있음), 사용자 코드는 동일한 이름의 DLL로 컴파일됩니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>If things don't work initially, double-check that <bpt id="p1">*</bpt>coreclr.dll<ept id="p1">*</ept> is available in the location expected by the host, that all necessary Framework libraries are in the TPA list, and that CoreCLR's bitness (32- or 64-bit) matches how the host was built.</source>
          <target state="translated">처음에 작동되지 않으면, 호스트가 예상한 위치에서 <bpt id="p1">*</bpt>coreclr.dll<ept id="p1">*</ept>을 사용할 수 있고, 필요한 프레임워크 라이브러리가 모두 TPA 목록에 있으며 CoreCLR의 비트 수(32비트 또는 64비트)가 호스트가 빌드된 방식과 일치하는지 다시 확인합니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Hosting the .NET Core runtime is an advanced scenario that many developers won't require, but for those who need to launch managed code from a native process, or who need more control over the .NET Core runtime's behavior, it can be very useful.</source>
          <target state="translated">.NET Core 런타임 호스트는 일부 개발자만 필요로 하는 고급 시나리오이지만, 네이티브 프로세스에서 관리 코드를 실행해야 하거나 .NET Core 런타임의 동작에 대해 더 많은 제어권이 필요한 경우 아주 유용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Because .NET Core is able to run side-by-side with itself, it's even possible to create hosts which initialize and start multiple versions of the .NET Core runtime and execute apps on all of them in the same process.</source>
          <target state="translated">.NET Core는 자체를 나란히 실행할 수 있기 때문에 여러 버전의 .NET Core 런타임을 초기화 및 시작하는 호스트를 만들고 동일한 프로세스로 모든 호스트에서 앱을 실행할 수도 있습니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>