<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-47f9650" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2396b2794e88673afc1973b5bdd1e82c28fe5a13</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\packages.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9656a36e38f1105280cfdc4decf253410b100be6</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8d459e680fbced2a06d06f949789721e5aa0c8c9</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Packages, Metapackages and Frameworks</source>
          <target state="translated">패키지, 메타패키지 및 프레임워크</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Packages, Metapackages and Frameworks</source>
          <target state="translated">패키지, 메타패키지 및 프레임워크</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Packages, Metapackages and Frameworks</source>
          <target state="translated">패키지, 메타패키지 및 프레임워크</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>.NET Core is a platform made of NuGet packages.</source>
          <target state="translated">.NET Core는 NuGet 패키지로 구성된 플랫폼입니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Some product experiences benefit from fine-grained definition of packages while others from coarse-grained.</source>
          <target state="translated">일부 제품은 정교하게 정의된 패키지로 구성되는 반면 다른 제품은 다소 거칠게 정의된 패키지로 구성됩니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>To accommodate this duality, the product is distributed as a fine-grained set of packages and then described in coarser chunks with a package type informally called a "metapackage".</source>
          <target state="translated">이러한 이중성을 수용하기 위해 이 제품은 세분화된 패키지 집합으로 배포되고, 그런 다음 비공식적으로 "메타패키지"라고 하는 패키지 형식의 거친 덩어리로 기술됩니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Each of the .NET Core packages support being run on multiple .NET runtimes, represented as frameworks.</source>
          <target state="translated">각 .NET Core 패키지는 프레임워크라고 하는 여러 .NET 런타임에서의 실행을 지원합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Some of those frameworks are traditional frameworks, like <ph id="ph1">`net46`</ph>, representing the .NET Framework.</source>
          <target state="translated">그러한 프레임워크 중 일부는 <ph id="ph1">`net46`</ph>처럼 .NET Framework를 나타내는 기존의 프레임워크입니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Another set is new frameworks that can be thought of as "package-based frameworks", which establish a new model for defining frameworks.</source>
          <target state="translated">또 다른 집합은 "패키지 기반 프레임워크"로 간주할 수 있는 새로운 프레임워크로, 프레임워크를 정의하기 위한 새 모델을 설정합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>These package-based frameworks are entirely formed and defined as packages, forming a strong relationship between packages and frameworks.</source>
          <target state="translated">이러한 패키지 기반 프레임워크는 패키지로서 완전히 구성 및 정의되어, 패키지와 프레임워크 간에 강력한 관계를 형성합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Packages</source>
          <target state="translated">패키지</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>.NET Core is split into a set of packages, which provide primitives, higher-level data types, app composition types and common utilities.</source>
          <target state="translated">.NET Core는 기본 형식, 더 높은 수준의 데이터 형식, 앱 구성 형식 및 공통 유틸리티를 제공하는 패키지 집합으로 나누어집니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Each of these packages represent a single assembly of the same name.</source>
          <target state="translated">이러한 각 패키지는 동일한 이름의 단일 어셈블리를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For example, <bpt id="p1">[</bpt>System.Runtime<ept id="p1">](https://www.nuget.org/packages/System.Runtime)</ept> contains System.Runtime.dll.</source>
          <target state="translated">예를 들어 <bpt id="p1">[</bpt>System.Runtime<ept id="p1">](https://www.nuget.org/packages/System.Runtime)</ept>은 System.Runtime.dll을 포함합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>There are advantages to defining packages in a fine-grained manner:</source>
          <target state="translated">세분화된 방식으로 패키지를 정의하는 데 따른 이점이 있습니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Fine-grained packages can ship on their own schedule with relatively limited testing of other packages.</source>
          <target state="translated">세분화된 패키지는 비교적 제한적으로 타 패키지를 테스트하며 자체 일정으로 출시될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Fine-grained packages can provide differing OS and CPU support.</source>
          <target state="translated">세분화된 패키지는 다른 OS 및 CPU 지원을 제공할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Fine-grained packages can have dependencies specific to only one library.</source>
          <target state="translated">세분화된 패키지는 하나의 라이브러리에 대한 종속성을 가질 수 있습니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Apps are smaller because unreferenced packages don't become part of the app distribution.</source>
          <target state="translated">참조되지 않은 패키지는 앱 배포에 포함되지 않으므로 앱의 크기가 더 작습니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Some of these benefits are only used in certain circumstances.</source>
          <target state="translated">이러한 혜택 중 일부는 특정 상황에서만 사용됩니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For example, NET Core packages will typically ship on the same schedule with the same platform support.</source>
          <target state="translated">예를 들어 .NET Core 패키지는 일반적으로 동일한 플랫폼 지원과 함께 동일한 일정으로 출시됩니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In the case of servicing, fixes can be distributed and installed as small single package updates.</source>
          <target state="translated">서비스의 경우 수정은 작은 단일 패키지 업데이트로서 배포 및 설치될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Due to the narrow scope of change, the validation and time to make a fix available is limited to what is needed for a single library.</source>
          <target state="translated">변경 범위가 좁기 때문에 수정을 준비하는 시간과 유효성 검사는 단일 라이브러리에 필요한 것으로 제한됩니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The following is a list of the key NuGet packages for .NET Core:</source>
          <target state="translated">다음은 .NET Core용 핵심 NuGet 패키지의 목록입니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.Runtime<ept id="p1">](https://www.nuget.org/packages/System.Runtime)</ept> - The most fundamental .NET Core package, including <bpt id="p2">[</bpt>Object<ept id="p2">](http://docs.microsoft.com/dotnet/core/api/System.Object)</ept>, <bpt id="p3">[</bpt>String<ept id="p3">](http://docs.microsoft.com/dotnet/core/api/System.String)</ept>, <bpt id="p4">[</bpt>Array<ept id="p4">](http://docs.microsoft.com/dotnet/core/api/System.Array)</ept>, <bpt id="p5">[</bpt>Action<ept id="p5">](http://docs.microsoft.com/dotnet/core/api/System.Action)</ept> and <bpt id="p6">[</bpt>IList<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph><ept id="p6">](http://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.IList-1)</ept>.</source>
          <target state="translated"><bpt id="p1">[</bpt>System.Runtime<ept id="p1">](https://www.nuget.org/packages/System.Runtime)</ept> - 가장 기본적인 .NET Core 패키지로 <bpt id="p2">[</bpt>Object<ept id="p2">](http://docs.microsoft.com/dotnet/core/api/System.Object)</ept>, <bpt id="p3">[</bpt>String<ept id="p3">](http://docs.microsoft.com/dotnet/core/api/System.String)</ept>, <bpt id="p4">[</bpt>Array<ept id="p4">](http://docs.microsoft.com/dotnet/core/api/System.Array)</ept>, <bpt id="p5">[</bpt>Action<ept id="p5">](http://docs.microsoft.com/dotnet/core/api/System.Action)</ept> 및 <bpt id="p6">[</bpt>IList<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph><ept id="p6">](http://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.IList-1)</ept> 포함.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.Collections<ept id="p1">](https://www.nuget.org/packages/System.Collections)</ept> - A set of (primarily) generic collections, including <bpt id="p2">[</bpt>List<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph><ept id="p2">](http://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.List-1)</ept> and <bpt id="p3">[</bpt>Dictionary<ph id="ph3">&amp;lt;</ph>K,V<ph id="ph4">&amp;gt;</ph><ept id="p3">](http://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.Dictionary-2)</ept>.</source>
          <target state="translated"><bpt id="p1">[</bpt>System.Collections<ept id="p1">](https://www.nuget.org/packages/System.Collections)</ept> - 주로 제네릭 컬렉션 집합으로 <bpt id="p2">[</bpt>List<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph><ept id="p2">](http://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.List-1)</ept> 및 <bpt id="p3">[</bpt>Dictionary<ph id="ph3">&amp;lt;</ph>K,V<ph id="ph4">&amp;gt;</ph><ept id="p3">](http://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.Dictionary-2)</ept> 포함.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.Net.Http<ept id="p1">](https://www.nuget.org/packages/System.Net.Http)</ept> - A set of types for HTTP network communication, including <bpt id="p2">[</bpt>HttpClient<ept id="p2">](http://docs.microsoft.com/dotnet/core/api/System.Net.Http.HttpClient)</ept> and <bpt id="p3">[</bpt>HttpResponseMessage<ept id="p3">](http://docs.microsoft.com/dotnet/core/api/System.Net.Http.HttpResponseMessage)</ept>.</source>
          <target state="translated"><bpt id="p1">[</bpt>System.Net.Http<ept id="p1">](https://www.nuget.org/packages/System.Net.Http)</ept> - HTTP 네트워크 통신에 대한 형식의 집합으로 <bpt id="p2">[</bpt>HttpClient<ept id="p2">](http://docs.microsoft.com/dotnet/core/api/System.Net.Http.HttpClient)</ept> 및 <bpt id="p3">[</bpt>HttpResponseMessage<ept id="p3">](http://docs.microsoft.com/dotnet/core/api/System.Net.Http.HttpResponseMessage)</ept> 포함.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.IO.FileSystem<ept id="p1">](https://www.nuget.org/packages/System.IO.FileSystem)</ept> - A set of types for reading and writing to local or networked disk-based storage, including <bpt id="p2">[</bpt>File<ept id="p2">](http://docs.microsoft.com/dotnet/core/api/System.IO.File)</ept> and <bpt id="p3">[</bpt>Directory<ept id="p3">](http://docs.microsoft.com/dotnet/core/api/System.IO.Directory)</ept>.</source>
          <target state="translated"><bpt id="p1">[</bpt>System.IO.FileSystem<ept id="p1">](https://www.nuget.org/packages/System.IO.FileSystem)</ept> - 로컬 및 네트워크 디스크 기본 저장소에 대한 읽기 및 쓰기를 위한 형식의 집합으로 <bpt id="p2">[</bpt>File<ept id="p2">](http://docs.microsoft.com/dotnet/core/api/System.IO.File)</ept> 및 <bpt id="p3">[</bpt>Directory<ept id="p3">](http://docs.microsoft.com/dotnet/core/api/System.IO.Directory)</ept> 포함.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.Linq<ept id="p1">](https://www.nuget.org/packages/System.Linq)</ept> - A set of types for querying objects, including Enumerable and <bpt id="p2">[</bpt>ILookup<ph id="ph1">&amp;lt;</ph>TKey, TElement<ph id="ph2">&amp;gt;</ph><ept id="p2">](http://docs.microsoft.com/dotnet/core/api/System.Linq.ILookup-2)</ept>.</source>
          <target state="translated"><bpt id="p1">[</bpt>System.Linq<ept id="p1">](https://www.nuget.org/packages/System.Linq)</ept> - 개체 쿼리를 위한 형식의 집합으로 Enumerable 및 <bpt id="p2">[</bpt>ILookup<ph id="ph1">&amp;lt;</ph>TKey, TElement<ph id="ph2">&amp;gt;</ph><ept id="p2">](http://docs.microsoft.com/dotnet/core/api/System.Linq.ILookup-2)</ept> 포함.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.Reflection<ept id="p1">](https://www.nuget.org/packages/System.Reflection)</ept> - A set of types for loading, inspecting and activating types, including <bpt id="p2">[</bpt>Assembly<ept id="p2">](http://docs.microsoft.com/dotnet/core/api/System.Reflection.Assembly)</ept>, <bpt id="p3">[</bpt>TypeInfo<ept id="p3">](http://docs.microsoft.com/dotnet/core/api/System.Reflection.TypeInfo)</ept> and <bpt id="p4">[</bpt>MethodInfo<ept id="p4">](http://docs.microsoft.com/dotnet/core/api/System.Reflection.MethodInfo)</ept>.</source>
          <target state="translated"><bpt id="p1">[</bpt>System.Reflection<ept id="p1">](https://www.nuget.org/packages/System.Reflection)</ept> - 형식의 로드, 검사 및 활성화를 위한 형식의 집합으로 <bpt id="p2">[</bpt>Assembly<ept id="p2">](http://docs.microsoft.com/dotnet/core/api/System.Reflection.Assembly)</ept>, <bpt id="p3">[</bpt>TypeInfo<ept id="p3">](http://docs.microsoft.com/dotnet/core/api/System.Reflection.TypeInfo)</ept> 및 <bpt id="p4">[</bpt>MethodInfo<ept id="p4">](http://docs.microsoft.com/dotnet/core/api/System.Reflection.MethodInfo)</ept> 포함.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Packages are referenced in project.json.</source>
          <target state="translated">패키지는 project.json에서 참조됩니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>In the example below, the <bpt id="p1">[</bpt>System.Runtime<ept id="p1">](https://www.nuget.org/packages/System.Runtime/)</ept> package is referenced.</source>
          <target state="translated">다음 예제에서는 <bpt id="p1">[</bpt>System.Runtime<ept id="p1">](https://www.nuget.org/packages/System.Runtime/)</ept> 패키지가 참조됩니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>In most cases, you will not reference the lower-level .NET Core packages directly since you'll end up with too many packages to manage.</source>
          <target state="translated">관리할 패키지가 너무 많아지기 때문에 대부분의 경우 하위 수준 .NET Core 패키지를 직접 참조하지 않습니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Instead, you'll reference a metapackage.</source>
          <target state="translated">대신 메타패키지를 참조하게 됩니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Metapackages</source>
          <target state="translated">메타패키지</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Metapackages are a NuGet package convention for describing a set of packages that are meaningful together.</source>
          <target state="translated">메타패키지는 서로 의미가 있는 패키지 집합을 기술하기 위한 NuGet 패키지 규칙입니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>They represent this set of packages by making them dependencies.</source>
          <target state="translated">메타패키지는 종속성을 설정함으로써 이러한 패키지 집합을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>They can optionally establish a framework for this set of packages by specifying a framework.</source>
          <target state="translated">선택적으로, 프레임워크를 지정하여 이 패키지 집합에 대한 프레임워크를 설정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>By referencing a metapackage, you are, in effect, adding a reference to each of its dependent packages as a single gesture.</source>
          <target state="translated">메타패키지를 참조함으로써 각각의 종속된 패키지에 단일 제스처로서 참조를 추가하게 됩니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>That means that all of the libraries in those packages (refs or libs) are available for IntelliSense (or similar experience) and for publishing (libs only) your app.</source>
          <target state="translated">즉, IntelliSense(또는 유사한 경험) 및 앱 게시(lib만)에 대해 해당 패키지의 모든 라이브러리(ref 또는 lib)를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Note: The 'lib' and 'ref' terms refer to folders in NuGet packages.</source>
          <target state="translated">참고: 'lib' 및 'ref' 용어는 NuGet 패키지의 폴더를 가리킵니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>'ref' folders describe the public API of a package via assembly metadata.</source>
          <target state="translated">'ref' 폴더는 어셈블리 메타데이터를 통해 패키지의 공용 API를 설명합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>'lib' folders contain the implementation of that public API for a given framework.</source>
          <target state="translated">'lib' 폴더는 지정된 프레임워크에 대한 해당 공용 API의 구현을 포함합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>There are advantages to using metapackages:</source>
          <target state="translated">메타패키지 사용에 따른 이점이 있습니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Provides a convenient user experience to reference a large set of fine-grained packages.</source>
          <target state="translated">세분화된 패키지의 큰 집합을 참조하기 위한 편리한 사용자 환경을 제공합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Defines a set of packages (including specific versions) that are tested and work well together.</source>
          <target state="translated">테스트되고 함께 잘 작동하는 패키지 집합을 정의합니다(특정 버전 포함).</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The .NET Standard Library metapackage:</source>
          <target state="translated">.NET 표준 라이브러리 메타패키지:</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>NETStandard.Library<ept id="p1">](https://www.nuget.org/packages/NETStandard.Library)</ept> - Describes the libraries that are part of the ".NET Standard Library".</source>
          <target state="translated"><bpt id="p1">[</bpt>NETStandard.Library<ept id="p1">](https://www.nuget.org/packages/NETStandard.Library)</ept> - ".NET 표준 라이브러리"에 포함된 라이브러리를 설명합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Applies to all .NET implementations (for example, .NET Framework, .NET Core and Mono) that support the .NET Standard Library.</source>
          <target state="translated">.NET 표준 라이브러리를 지원하는 모든 .NET 구현(예: .NET Framework, .NET Core 및 Mono)에 적용됩니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Establishes the 'netstandard' framework.</source>
          <target state="translated">'netstandard' 프레임워크를 설정합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>These are the key .NET Core metapackages:</source>
          <target state="translated">다음은 .NET Core 메타패키지입니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Microsoft.NETCore.App<ept id="p1">](https://www.nuget.org/packages/Microsoft.NETCore.App)</ept> - Describes the libraries that are part of the .NET Core distribution.</source>
          <target state="translated"><bpt id="p1">[</bpt>Microsoft.NETCore.App<ept id="p1">](https://www.nuget.org/packages/Microsoft.NETCore.App)</ept> - .NET Core 배포에 포함된 라이브러리를 설명합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Establishes the <bpt id="p1">[</bpt><ph id="ph1">`.NETCoreApp`</ph> framework<ept id="p1">](https://github.com/dotnet/core-setup/blob/master/pkg/projects/Microsoft.NETCore.App/Microsoft.NETCore.App.pkgproj)</ept>.</source>
          <target state="translated"><bpt id="p1">[</bpt><ph id="ph1">`.NETCoreApp`</ph> 프레임워크를 설정합니다<ept id="p1">](https://github.com/dotnet/core-setup/blob/master/pkg/projects/Microsoft.NETCore.App/Microsoft.NETCore.App.pkgproj)</ept>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Depends on the smaller <ph id="ph1">`NETStandard.Library`</ph>.</source>
          <target state="translated">더 작은 <ph id="ph1">`NETStandard.Library`</ph>에 종속됩니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Microsoft.NETCore.Portable.Compatibility<ept id="p1">](https://www.nuget.org/packages/Microsoft.NETCore.Portable.Compatibility)</ept> - A set of compatibility facades that enable mscorlib-based Portable Class Libraries (PCLs) to run on .NET Core.</source>
          <target state="translated"><bpt id="p1">[</bpt>Microsoft.NETCore.Portable.Compatibility<ept id="p1">](https://www.nuget.org/packages/Microsoft.NETCore.Portable.Compatibility)</ept> - .NET Core에서 실행되는 mscorlib 기반 PCL(이식 가능한 클래스 라이브러리)을 사용하도록 설정하는 호환성 외관의 집합입니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Metapackages are referenced just like any other NuGet package in project.json.</source>
          <target state="translated">메타패키지는 project.json의 다른 NuGet 패키지와 마찬가지로 참조됩니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>In the following example, the <ph id="ph1">`NETStandard.Library`</ph> meta package is referenced, which is used for creating libraries that are portable across .NET runtimes.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">`NETStandard.Library`</ph> 메타패키지가 참조되는데, 이는 .NET 런타임 전체에서 이식 가능한 라이브러리를 만드는 데 사용됩니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>In the following example, the <ph id="ph1">`Microsoft.NETCore.App`</ph> metapackage is referenced, which is used for creating apps and libraries that are intended to run on and take full advantage of .NET Core.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">`Microsoft.NETCore.App`</ph> 메타패키지가 참조되는데, 이는 .NET Core에서 실행되고 .NET Core를 충분히 활용할 앱과 라이브러리를 만드는 데 사용됩니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>It provides access to a larger set of libraries than are provided by <ph id="ph1">`NETStandard.Library`</ph>.</source>
          <target state="translated"><ph id="ph1">`NETStandard.Library`</ph>에서 제공하는 것보다 더 큰 라이브러리 집합에 대한 액세스 권한을 제공합니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Frameworks</source>
          <target state="translated">프레임워크</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>.NET Core packages each support a set of frameworks, declared with framework folders (within the lib and ref folders mentioned earlier).</source>
          <target state="translated">각 .NET Core 패키지는 framework 폴더(앞서 언급한 lib 및 ref 폴더 내)에서 선언된 프레임워크 집합을 지원합니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Frameworks describe an available API set (and potentially other characteristics) that you can rely on when you target a given framework.</source>
          <target state="translated">프레임워크는 사용 가능한 API 집합(및 기타 가능한 특성)을 설명하며, 이러한 집합은 특정 프레임워크를 대상으로 할 때 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>They are versioned as new APIs are added.</source>
          <target state="translated">새 API가 추가될 때 버전이 지정됩니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>For example, <bpt id="p1">[</bpt>System.IO.FileSystem<ept id="p1">](https://www.nuget.org/packages/System.IO.FileSystem)</ept> supports the following frameworks:</source>
          <target state="translated">예를 들어 <bpt id="p1">[</bpt>System.IO.FileSystem<ept id="p1">](https://www.nuget.org/packages/System.IO.FileSystem)</ept>은 다음 프레임워크를 지원합니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>.NETFramework,Version=4.6</source>
          <target state="translated">.NETFramework,Version=4.6</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>.NETStandard,Version=1.3</source>
          <target state="translated">.NETStandard,Version=1.3</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>6 Xamarin platforms (for example, xamarinios10)</source>
          <target state="translated">6개 Xamarin 플랫폼(예: xamarinios10)</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>It is useful to contrast the first two of these frameworks, since they are examples of the two different ways that frameworks are defined.</source>
          <target state="translated">처음 두 프레임워크는 프레임워크를 정의하는 두 가지 방법의 예를 보여주므로 대조해보면 유용합니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`.NETFramework,Version=4.6`</ph> framework represents the available APIs in the .NET Framework 4.6.</source>
          <target state="translated"><ph id="ph1">`.NETFramework,Version=4.6`</ph> 프레임워크는 .NET Framework 4.6의 사용 가능한 API를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>You can produce libraries  compiled with the .NET Framework 4.6 reference assemblies and then distribute those libraries in NuGet packages in a net46 lib folder.</source>
          <target state="translated">.NET Framework 4.6 참조 어셈블리로 컴파일된 라이브러리를 생성하고 net46 lib 폴더의 NuGet 패키지에 배포할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>It will be used for apps that target the .NET Framework 4.6 or that are compatible with it.</source>
          <target state="translated">이는 .NET Framework 4.6을 대상으로 하거나 이와 호환되는 앱에 사용됩니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>This is how all frameworks have traditionally worked.</source>
          <target state="translated">모든 프레임워크는 지금까지 이러한 방식으로 작동했습니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`.NETStandard,Version=1.3`</ph> framework is a package-based framework.</source>
          <target state="translated"><ph id="ph1">`.NETStandard,Version=1.3`</ph> 프레임워크는 패키지 기반 프레임워크로서,</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>It relies on packages that target the framework to define and expose APIs in terms of the framework.</source>
          <target state="translated">API를 정의하고 노출하는 프레임워크를 대상으로 하는 패키지에 의존합니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Package-based Frameworks</source>
          <target state="translated">패키지 기반 프레임워크</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>There is a two-way relationship between frameworks and packages.</source>
          <target state="translated">프레임워크와 패키지 간에 양방향 관계가 있습니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The first part is defining the APIs available for a given framework, for example <ph id="ph1">`netstandard1.3`</ph>.</source>
          <target state="translated">첫 번째 부분은 특정 프레임워크(예: <ph id="ph1">`netstandard1.3`</ph>)에 사용 가능한 API를 정의하는 것입니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Packages that target <ph id="ph1">`netstandard1.3`</ph> (or compatible frameworks, like <ph id="ph2">`netstandard1.0`</ph>) define the APIs available for <ph id="ph3">`netstandard1.3`</ph>.</source>
          <target state="translated"><ph id="ph1">`netstandard1.3`</ph>(또는 <ph id="ph2">`netstandard1.0`</ph>과 같은 호환되는 프레임워크)을 대상으로 하는 패키지는 <ph id="ph3">`netstandard1.3`</ph>에 사용 가능한 API를 정의합니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>That may sound like a circular definition, but it isn't.</source>
          <target state="translated">순환 정의처럼 들릴 수 있지만 그렇지 않습니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>By virtue of being "package-based", the API definition for the framework comes from packages.</source>
          <target state="translated">"패키지 기반" 덕분에 프레임워크의 API 정의는 패키지에서 옵니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The framework itself doesn't define any APIs.</source>
          <target state="translated">프레임워크 자체는 API를 정의하지 않습니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The second part of the relationship is asset selection.</source>
          <target state="translated">관계의 두 번째 부분은 자산 선택입니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Packages can contain assets for multiple frameworks.</source>
          <target state="translated">패키지는 여러 프레임워크에 대한 자산을 포함할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Given a reference to a set of packages and/or metapackages, the framework is needed to determine which asset should be selected, for example <ph id="ph1">`net46`</ph> or <ph id="ph2">`netstandard1.3`</ph>.</source>
          <target state="translated">패키지 및/또는 메타패키지 집합에 대한 참조를 고려하여, 프레임워크는 어떤 자산을 선택할지를 결정해야 합니다(예: <ph id="ph1">`net46`</ph> 또는 <ph id="ph2">`netstandard1.3`</ph>).</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>It is important to select the correct asset.</source>
          <target state="translated">올바른 자산을 선택하는 것이 중요합니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>For example, a <ph id="ph1">`net46`</ph> asset is not likely to be compatible with .NET Framework 4.0 or .NET Core 1.0.</source>
          <target state="translated">예를 들어 한 <ph id="ph1">`net46`</ph> 자산은 .NET Framework 4.0 또는 .NET Core 1.0과 호환될 것 같지 않습니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Package-based Framework Composition</source>
          <target state="translated">패키지 기반 프레임워크 구성</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>You can see this relationship in the image above.</source>
          <target state="translated">위의 그림에서 이 관계를 볼 수 있습니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>API<ept id="p1">*</ept> targets and defines the <bpt id="p2">*</bpt>framework<ept id="p2">*</ept>.</source>
          <target state="translated"><bpt id="p1">*</bpt>API<ept id="p1">*</ept>는 <bpt id="p2">*</bpt>프레임워크<ept id="p2">*</ept>를 대상으로 하고 정의합니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>framework<ept id="p1">*</ept> is used for <bpt id="p2">*</bpt>asset selection<ept id="p2">*</ept>.</source>
          <target state="translated"><bpt id="p1">*</bpt>프레임워크<ept id="p1">*</ept>는 <bpt id="p2">*</bpt>자산 선택<ept id="p2">*</ept>에 사용됩니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>asset<ept id="p1">*</ept> gives you the API.</source>
          <target state="translated"><bpt id="p1">*</bpt>자산<ept id="p1">*</ept>은 API를 제공합니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>It is an interesting question of where a package-based framework's definition ends and where consumption of that definition starts.</source>
          <target state="translated">패키지 기반 프레임워크의 정의가 어디서 끝나고 정의의 사용이 어디서 시작되는가는 흥미로운 질문입니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>One can consider your view of the framework as a function of a given project.json file.</source>
          <target state="translated">프레임워크의 보기를 지정된 project.json 파일의 기능이라고 생각할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Your dependencies create your view of the framework, independent of the publisher(s) of those dependencies.</source>
          <target state="translated">종속성이 프레임워크의 보기를 만듭니다(종속성의 게시자와 독립적으로).</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The two primary package-based frameworks used with .NET Core are:</source>
          <target state="translated">.NET Core와 사용되는 두 가지 기본 패키지 기반 프레임워크는 다음과 같습니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>.NET Standard</source>
          <target state="translated">.NET 표준</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The .NET Standard (TFM: <ph id="ph1">`netstandard`</ph>) framework represents the APIs defined by and built on top of the <bpt id="p1">[</bpt>.NET Standard Library<ept id="p1">](../standard/library.md)</ept>.</source>
          <target state="translated">.NET 표준(TFM: <ph id="ph1">`netstandard`</ph>) 프레임워크는 <bpt id="p1">[</bpt>.NET 표준 라이브러리<ept id="p1">](../standard/library.md)</ept>에 의해 정의되고 그 위에 빌드되는 API를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Libraries that are intended to run on multiple runtimes should target this framework.</source>
          <target state="translated">여러 런타임에서 실행되도록 만들어진 라이브러리는 이 프레임워크를 대상으로 하며,</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>They will be supported on any .NET Standard compliant runtime, such as .NET Core, .NET Framework and Mono/Xamarin.</source>
          <target state="translated">.NET Core, .NET Framework 및 Mono/Xamarin 같은 .NET 표준 호환 런타임에서 지원됩니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Each of these runtimes supports a set of .NET Standard versions, depending on which APIs they implement.</source>
          <target state="translated">이러한 각 런타임은 구현하는 API에 따라 .NET 표준 버전 집합을 지원합니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`NETStandard.Library`</ph> metapackage targets the <ph id="ph2">`netstandard`</ph> framework.</source>
          <target state="translated"><ph id="ph1">`NETStandard.Library`</ph> 메타패키지는 <ph id="ph2">`netstandard`</ph> 프레임워크를 대상으로 합니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The most common way to target <ph id="ph1">`netstandard`</ph> is by referencing this metapackage.</source>
          <target state="translated"><ph id="ph1">`netstandard`</ph>를 대상으로 하는 가장 일반적인 방법은 이 메타패키지를 참조하는 것입니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>It describes and provides access to the ~40 .NET  libraries and associated APIs that define the .NET Standard Library.</source>
          <target state="translated">이 메타패키지는 최대&amp;40;개의 .NET 라이브러리 및 .NET 표준 라이브러리를 정의하는 관련 API를 설명하고 액세스할 수 있도록 합니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>You can reference additional packages that target <ph id="ph1">`netstandard`</ph> to get access to additional APIs.</source>
          <target state="translated">추가 API에 대한 액세스를 얻기 위해 <ph id="ph1">`netstandard`</ph>를 대상으로 하는 추가 패키지를 참조할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>A given <bpt id="p1">[</bpt>NETStandard.Library version<ept id="p1">](versions/index.md)</ept> matches the highest <ph id="ph1">`netstandard`</ph> version it exposed (via its closure).</source>
          <target state="translated">지정된 <bpt id="p1">[</bpt>NETStandard.Library 버전<ept id="p1">](versions/index.md)</ept>은 <ph id="ph1">`netstandard`</ph>의 최고 노출 버전과 일치합니다(클로저를 통해).</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The framework reference in project.json is used to select the correct assets from the underlying packages.</source>
          <target state="translated">project.json의 프레임워크 참조는 기본 패키지에서 올바른 자산을 선택하는 데 사용됩니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">`netstandard1.6`</ph> assets are required, as opposed to <ph id="ph2">`netstandard1.4`</ph> or <ph id="ph3">`net46`</ph>, for example.</source>
          <target state="translated">이 경우 예를 들면 <ph id="ph2">`netstandard1.4`</ph> 또는 <ph id="ph3">`net46`</ph>과 반대로 <ph id="ph1">`netstandard1.6`</ph> 자산이 필요합니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The framework and metapackage references in project.json do not need to match.</source>
          <target state="translated">project.json의 프레임워크 및 메타패키지 참조는 일치하지 않습니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>For example, the following project.json is valid.</source>
          <target state="translated">예를 들어, 다음 project.json은 유효합니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>It may seem strange to target <ph id="ph1">`netstandard1.3`</ph> but use the 1.6.0 version of <ph id="ph2">`NETStandard.Library`</ph>.</source>
          <target state="translated"><ph id="ph1">`netstandard1.3`</ph>을 대상으로 하지만 <ph id="ph2">`NETStandard.Library`</ph>의 1.6.0 버전을 사용하는 것이 이상하게 보일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>It is a valid use-case, since the metapackage maintains support for older <ph id="ph1">`netstandard`</ph> versions.</source>
          <target state="translated">메타패키지가 이전 <ph id="ph1">`netstandard`</ph> 버전에 대한 지원을 유지하므로 이는 유효한 사용 사례입니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>It could be the case you've standardized on the 1.6.0 version of the metapackage and use it for all your libraries, which target a variety of <ph id="ph1">`netstandard`</ph> versions.</source>
          <target state="translated">메타패키지의 1.6.0 버전에서 표준화하고 모든 라이브러리에 사용하여 다양한 <ph id="ph1">`netstandard`</ph> 버전을 대상으로 하는 사례일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>With this approach, you only need to restore <ph id="ph1">`NETStandard.Library`</ph> 1.6.0 and not earlier versions.</source>
          <target state="translated">이 방법을 통해 <ph id="ph1">`NETStandard.Library`</ph> 1.6.0만을 복원할 수 있으며 그 이전 버전은 복원할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The reverse would not be valid: targeting <ph id="ph1">`netstandard1.6`</ph> with the 1.3.0 version of <ph id="ph2">`NETStandard.Library`</ph>.</source>
          <target state="translated"><ph id="ph2">`NETStandard.Library`</ph>의 1.3.0 버전으로 <ph id="ph1">`netstandard1.6`</ph>를 대상으로 하는 반대의 경우는 유효하지 않습니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>You cannot target a higher framework with a lower metapackage, since the lower version metapackage will not expose any assets for that higher framework.</source>
          <target state="translated">더 낮은 메타패키지로 더 높은 프레임워크를 대상으로 할 수 없습니다. 더 낮은 버전의 메타패키지는 더 높은 프레임워크의 자산을 노출하지 않기 때문입니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The [versioning scheme] for metapackages asserts that metapackages match the highest version of the framework they describe.</source>
          <target state="translated">메타패키지의 [버전 관리 체계]는 메타패키지가 프레임워크의 최고 버전과 일치해야 한다고 주장합니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>By virtue of the versioning scheme, the first version of <ph id="ph1">`NETStandard.Library`</ph> is v1.6.0 given that it contains <ph id="ph2">`netstandard1.6`</ph> assets.</source>
          <target state="translated">버전 관리 체계 덕분에, <ph id="ph2">`netstandard1.6`</ph> 자산을 포함하는 경우 <ph id="ph1">`NETStandard.Library`</ph>의 첫 번째 버전은 v1.6.0입니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>v1.3.0 is used in the example above, for symmetry with the example above, but does not actually exist.</source>
          <target state="translated">위의 예제에는 v1.3.0이 사용되지만(위 예제와 대칭을 위해), 실제로 존재하지는 않습니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>.NET Core Application</source>
          <target state="translated">.NET Core 응용 프로그램</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The .NET Core Application (TFM: <ph id="ph1">`netcoreapp`</ph>) framework represents the packages and associated APIs that come with the .NET Core distribution and the console application model that it provides.</source>
          <target state="translated">.NET Core 응용 프로그램(TFM: <ph id="ph1">`netcoreapp`</ph>) 프레임워크는 .NET Core 배포와 함께 제공되는 패키지 및 관련 API, 그리고 콘솔 응용 프로그램 모델을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>.NET Core apps must use this framework, due to targeting the console application model, as should libraries that intended to run only on .NET Core.</source>
          <target state="translated">.NET Core 앱은 콘솔 응용 프로그램 모델을 대상으로 하기 때문에 이 프레임워크를 사용해야 하며, .NET Core에서만 실행되도록 만들어진 라이브러리도 마찬가지입니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Using this framework restricts apps and libraries to running only on .NET Core.</source>
          <target state="translated">이 프레임워크를 사용하면 앱과 라이브러리의 실행이 .NET Core로만 제한됩니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Microsoft.NETCore.App`</ph> metapackage targets the <ph id="ph2">`netcoreapp`</ph> framework.</source>
          <target state="translated"><ph id="ph1">`Microsoft.NETCore.App`</ph> 메타패키지는 <ph id="ph2">`netcoreapp`</ph> 프레임워크를 대상으로 합니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>It provides access to ~60 libraries, ~40 provided by the <ph id="ph1">`NETStandard.Library`</ph> package and ~20 more in addition.</source>
          <target state="translated">최대&amp;60;개 라이브러리, <ph id="ph1">`NETStandard.Library`</ph> 패키지에서 제공하는 최대&amp;40;개 및 추가&amp;20;개에 대한 액세스를 제공합니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>You can reference additional libraries that target <ph id="ph1">`netcoreapp`</ph> or compatible frameworks, such as <ph id="ph2">`netstandard`</ph>, to get access to additional APIs.</source>
          <target state="translated">추가 API에 대한 액세스 권한을 얻기 위해 <ph id="ph1">`netcoreapp`</ph> 또는 호환 프레임워크(예: <ph id="ph2">`netstandard`</ph>)를 대상으로 하는 추가 라이브러리를 참조할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Most of the additional libraries provided by <ph id="ph1">`Microsoft.NETCore.App`</ph> also target <ph id="ph2">`netstandard`</ph> given that their dependencies are satisfied by other <ph id="ph3">`netstandard`</ph> libraries.</source>
          <target state="translated">다른 <ph id="ph3">`netstandard`</ph> 라이브러리에서 종속성을 충족하는 경우 <ph id="ph1">`Microsoft.NETCore.App`</ph>에서 제공하는 추가 라이브러리 대부분은 또한 <ph id="ph2">`netstandard`</ph>를 대상으로 합니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>That means that <ph id="ph1">`netstandard`</ph> libraries can also reference those packages as dependencies.</source>
          <target state="translated">즉, <ph id="ph1">`netstandard`</ph> 라이브러리 역시 해당 패키지를 종속성으로 참조할 수 있습니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>