<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b5c25fc" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3f401907a59d5427cbcfaa0b785931a7ed82110f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\tutorials\testing-with-cli.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4af27309b045a224784d963636f1b8c06081ee83</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4544c9bee6e7f3b4d36cd122ee22e1224393eec4</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Organizing and testing projects with the .NET Core command line | Microsoft Docs</source>
          <target state="translated">.NET Core 명령줄을 사용하여 프로젝트 구성 및 테스트 | Microsoft 문서</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This tutorial explains how to organize and test .NET Core projects from the command line.</source>
          <target state="translated">이 자습서에서는 명령줄에서 .NET Core 프로젝트를 구성하고 테스트하는 방법을 설명합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Organizing and testing projects with the .NET Core command line</source>
          <target state="translated">.NET Core 명령줄을 사용하여 프로젝트 구성 및 테스트</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This tutorial follows <bpt id="p1">[</bpt>Getting started with .NET Core on Windows/Linux/macOS using the command line<ept id="p1">](./using-with-xplat-cli.md)</ept> to show how to go beyond simple "hello world" scenarios and pave the way for more advanced and well-organized applications.</source>
          <target state="translated">이 자습서에서는 <bpt id="p1">[</bpt>명령줄을 사용하여 Windows/Linux/macOS에서 .NET Core 시작<ept id="p1">](./using-with-xplat-cli.md)</ept>에 따라 간단한 "hello world" 시나리오 이상의 방법을 보여 주며, 잘 구성된 고급 응용 프로그램을 위한 방법을 안내합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Using folders to organize code</source>
          <target state="translated">폴더를 사용하여 코드 구성</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Say you wanted to introduce some new types to do work on.</source>
          <target state="translated">작업할 몇 가지 새로운 형식을 도입하려 한다고 가정해 보겠습니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You can do this by adding more files and making sure to give them namespaces you can include in your <bpt id="p1">*</bpt>Program.cs<ept id="p1">*</ept> file.</source>
          <target state="translated">이렇게 하려면 파일을 더 추가하고 <bpt id="p1">*</bpt>Program.cs<ept id="p1">*</ept> 파일에 포함할 수 있는 네임스페이스를 부여하면 됩니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This works great when the size of your project is relatively small.</source>
          <target state="translated">프로젝트의 크기가 비교적 작은 경우에는 이 방법이 매우 효과적입니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>However if you have a larger app with many different data types and potentially multiple layers, you may wish to organize things logically.</source>
          <target state="translated">그러나 다양한 데이터 형식 및 여러 레이어가 포함된 더 큰 앱이 있는 경우 항목을 논리적으로 구성해야 할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This is where folders come into play.</source>
          <target state="translated">여기에서 폴더를 생각할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You can either follow along with <bpt id="p1">[</bpt>the NewTypes sample project<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/console-apps/NewTypesMsBuild)</ept> that this guide covers, or create your own files and folders.</source>
          <target state="translated">이 가이드에서 다루는 <bpt id="p1">[</bpt>NewTypes 샘플 프로젝트<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/console-apps/NewTypesMsBuild)</ept>를 따를 수도 있고, 자신의 파일과 폴더를 만들 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>To begin, create a new folder under the root of your project.</source>
          <target state="translated">시작하려면 프로젝트의 루트 아래에 새 폴더를 만듭니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`/Model`</ph> is chosen here.</source>
          <target state="translated"><ph id="ph1">`/Model`</ph>이 여기서 선택되었습니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Now add some new types to the folder:</source>
          <target state="translated">이제 몇 가지 새로운 형식을 폴더에 추가합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Now, just as if they were files in the same directory, give them all the same namespace so you can include them in your <ph id="ph1">`Program.cs`</ph>.</source>
          <target state="translated">이제 마치 이들이 동일한 디렉터리의 파일인 것처럼, <ph id="ph1">`Program.cs`</ph>에 포함할 수 있도록 모든 파일에 동일한 네임스페이스를 부여합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Example: Pet Types</source>
          <target state="translated">예제: Pet 형식</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This example creates two new types, <ph id="ph1">`Dog`</ph> and <ph id="ph2">`Cat`</ph>, and has them implement a common interface, <ph id="ph3">`IPet`</ph>.</source>
          <target state="translated">이 예제에서는 새로운 두 형식 <ph id="ph1">`Dog`</ph> 및 <ph id="ph2">`Cat`</ph>을 만들고 인터페이스 <ph id="ph3">`IPet`</ph>을 구현합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Folder Structure:</source>
          <target state="translated">폴더 구조:</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`IPet.cs`</ph>:</source>
          <target state="translated"><ph id="ph1">`IPet.cs`</ph>:</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Dog.cs`</ph>:</source>
          <target state="translated"><ph id="ph1">`Dog.cs`</ph>:</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Cat.cs`</ph>:</source>
          <target state="translated"><ph id="ph1">`Cat.cs`</ph>:</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Program.cs`</ph>:</source>
          <target state="translated"><ph id="ph1">`Program.cs`</ph>:</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`NewTypes.csproj`</ph>:</source>
          <target state="translated"><ph id="ph1">`NewTypes.csproj`</ph>:</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>And if you run this:</source>
          <target state="translated">이를 실행하면 다음이 가능합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>New pet types can be added (such as a <ph id="ph1">`Bird`</ph>), extending this project.</source>
          <target state="translated">새로운 pet 형식을 추가하여(예: <ph id="ph1">`Bird`</ph>) 이 프로젝트를 확장할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Testing your Console App</source>
          <target state="translated">콘솔 앱 테스트</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You'll probably be wanting to test your projects at some point.</source>
          <target state="translated">어떤 지점에 도달하면 프로젝트를 테스트해야 할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Here's a good way to do it:</source>
          <target state="translated">이 경우 다음 방법을 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Move any source of your existing project into a new <ph id="ph1">`src`</ph> folder.</source>
          <target state="translated">기존 프로젝트의 모든 소스를 새로운 <ph id="ph1">`src`</ph> 폴더로 이동합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Create a <ph id="ph1">`/test`</ph> directory, then <ph id="ph2">`cd`</ph> into it.</source>
          <target state="translated"><ph id="ph1">`/test`</ph> 디렉터리를 만든 다음 <ph id="ph2">`cd`</ph>를 사용하여 만든 디렉터리로 이동합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Initialize the directory with a <ph id="ph1">`dotnet new xunit`</ph> command.</source>
          <target state="translated"><ph id="ph1">`dotnet new xunit`</ph> 명령으로 디렉터리를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This assumes xUnit, but you can also use MSTest by replacing <ph id="ph1">`xunit`</ph> with <ph id="ph2">`mstest`</ph>.</source>
          <target state="translated">여기에서는 xUnit을 가정하지만 <ph id="ph1">`xunit`</ph>를 <ph id="ph2">`mstest`</ph>로 대체하여 MSTest를 사용할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Example: Extending the NewTypes project</source>
          <target state="translated">예제: NewTypes 프로젝트 확장</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Now that the project system is in place, you can create your test project and start writing tests!</source>
          <target state="translated">프로젝트 시스템이 준비되었으므로 이제 테스트 프로젝트를 만들고 테스트 작성을 시작할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>From here on out, this guide will use and extend <bpt id="p1">[</bpt>the sample Types project<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/console-apps/NewTypesMsBuild)</ept>.</source>
          <target state="translated">여기서부터 이 가이드는 <bpt id="p1">[</bpt>샘플 Types 프로젝트<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/console-apps/NewTypesMsBuild)</ept>를 사용하고 확장합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Additionally, it will use the <bpt id="p1">[</bpt>Xunit<ept id="p1">](https://xunit.github.io/)</ept> test framework.</source>
          <target state="translated">또한 <bpt id="p1">[</bpt>Xunit<ept id="p1">](https://xunit.github.io/)</ept> 테스트 프레임워크를 사용합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Feel free to follow along or create your own multi-project system with tests.</source>
          <target state="translated">이 가이드의 과정을 따라 해도 되고, 테스트와 함께 고유한 다중 프로젝트 시스템을 만들어도 됩니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The whole project structure should look like this:</source>
          <target state="translated">전체 프로젝트 구조는 다음과 같습니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>There are two new things to make sure you have in your test project:</source>
          <target state="translated">테스트 프로젝트에 있는지 확인해야 할 두 가지가 있습니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>A correct <bpt id="p1">*</bpt>NewTypesTests.csproj<ept id="p1">*</ept> file with the following:</source>
          <target state="translated">다음이 있는 올바른 <bpt id="p1">*</bpt>NewTypesTests.csproj<ept id="p1">*</ept> 파일:</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>A reference to <ph id="ph1">`xunit`</ph></source>
          <target state="translated">다음에 대한 참조:<ph id="ph1">`xunit`</ph></target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A reference to <ph id="ph1">`dotnet-test-xunit`</ph></source>
          <target state="translated">다음에 대한 참조:<ph id="ph1">`dotnet-test-xunit`</ph></target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>A reference to the namespace corresponding to the code under test</source>
          <target state="translated">테스트 중인 코드에 해당하는 네임스페이스에 대한 참조</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This can be built by typing <ph id="ph1">`dotnet new xunit`</ph> at a command prompt in the <bpt id="p1">*</bpt>NewTypesTests<ept id="p1">*</ept> directory, then adding a project reference to the <ph id="ph2">`NewTypes`</ph> project.</source>
          <target state="translated">이 파일은 <bpt id="p1">*</bpt>NewTypesTests<ept id="p1">*</ept> 디렉터리의 명령 프롬프트에서 <ph id="ph1">`dotnet new xunit`</ph>을 입력한 다음 <ph id="ph2">`NewTypes`</ph> 프로젝트에 프로젝트 참조를 추가하여 만들 수 있습니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`NewTypesTests/NewTypesTests.csproj`</ph>:</source>
          <target state="translated"><ph id="ph1">`NewTypesTests/NewTypesTests.csproj`</ph>:</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>An xUnit test class.</source>
          <target state="translated">xUnit 테스트 클래스</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`PetTests.cs`</ph>:</source>
          <target state="translated"><ph id="ph1">`PetTests.cs`</ph>:</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Now you can run tests!</source>
          <target state="translated">이제 테스트를 실행할 수 있습니다!</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><ph id="ph1">`dotnet test`</ph><ept id="p1">](../tools/dotnet-test.md)</ept> command runs the test runner you have specified in your project.</source>
          <target state="translated"><bpt id="p1">[</bpt><ph id="ph1">`dotnet test`</ph><ept id="p1">](../tools/dotnet-test.md)</ept> 명령은 프로젝트에 지정된 Test Runner를 실행합니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Make sure you start at the top-level directory.</source>
          <target state="translated">최상위 디렉터리에서 시작해야 합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Output should look like this:</source>
          <target state="translated">출력은 다음과 같습니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>