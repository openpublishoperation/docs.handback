<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-47f9650" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">077a09152ac23c986a751f42c893e1dcca858291</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\base-types\verify-format.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a80af768587710b8756db79898128a234997c651</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">33808c2a92622a4532f27e7b9f096fc072c58c36</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: verify that strings are in valid email format</source>
          <target state="translated">방법: 문자열이 올바른 전자 메일 형식인지 확인</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to verify that strings are in valid email format</source>
          <target state="translated">방법: 문자열이 올바른 전자 메일 형식인지 확인</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>How to: verify that strings are in valid email format</source>
          <target state="translated">방법: 문자열이 올바른 전자 메일 형식인지 확인</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The following example uses a regular expression to verify that a string is in valid email format.</source>
          <target state="translated">다음 예제에서는 정규식을 사용하여 문자열이 올바른 전자 메일 형식인지 확인합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">예제</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The example defines an <ph id="ph1">`IsValidEmail`</ph> method, which returns <ph id="ph2">`true`</ph> if the string contains a valid email address and <ph id="ph3">`false`</ph> if it does not, but takes no other action.</source>
          <target state="translated">이 예제에서는 문자열에 올바른 전자 메일 주소가 포함되어 있으면 <ph id="ph1">`IsValidEmail`</ph>를 반환하고, 그렇지 않으면 <ph id="ph2">`true`</ph>를 반환하지만 다른 작업을 수행하지 않는 <ph id="ph3">`false`</ph> 메서드를 정의합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>To verify that the email address is valid, the <ph id="ph1">`IsValidEmail`</ph> method calls the <bpt id="p1">[</bpt>Regex.Replace(String, String, MatchEvaluator)<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator))</ept> method with the <ph id="ph2">`(@)(.+)$`</ph> regular expression pattern to separate the domain name from the email address.</source>
          <target state="translated">전자 메일 주소가 올바른지 확인하기 위해 <ph id="ph1">`IsValidEmail`</ph> 메서드는 <ph id="ph2">`(@)(.+)$`</ph> 정규식 패턴으로 <bpt id="p1">[</bpt>Regex.Replace(String, String, MatchEvaluator)<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator))</ept> 메서드를 호출하여 전자 메일 주소에서 도메인 이름을 분리합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The third parameter is a <bpt id="p1">[</bpt>MatchEvaluator<ept id="p1">](xref:System.Text.RegularExpressions.MatchEvaluator)</ept> delegate that represents the method that processes and replaces the matched text.</source>
          <target state="translated">세 번째 매개 변수는 일치하는 텍스트를 처리하고 대체하는 메서드를 나타내는 <bpt id="p1">[</bpt>MatchEvaluator<ept id="p1">](xref:System.Text.RegularExpressions.MatchEvaluator)</ept> 대리자입니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The regular expression pattern is interpreted as follows.</source>
          <target state="translated">정규식 패턴은 다음과 같이 해석됩니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">패턴</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">설명</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Match the @ character.</source>
          <target state="translated">@ 문자를 찾습니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This is the first capturing group.</source>
          <target state="translated">이 그룹은 첫 번째 캡처링 그룹입니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Match one or more occurrences of any character.</source>
          <target state="translated">하나 이상의 문자를 찾습니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This is the second capturing group.</source>
          <target state="translated">이 그룹은 두 번째 캡처링 그룹입니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>End the match at the end of the string.</source>
          <target state="translated">문자열의 끝 부분에서 일치 항목 찾기를 끝냅니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The domain name along with the @ character is passed to the <ph id="ph1">`DomainMapper`</ph> method, which uses the <bpt id="p1">[</bpt>IdnMapping<ept id="p1">](xref:System.Globalization.IdnMapping)</ept> class to translate Unicode characters that are outside the US-ASCII character range to Punycode.</source>
          <target state="translated">@ 문자와 함께 도메인 이름이 <ph id="ph1">`DomainMapper`</ph> 메서드로 전달됩니다. 이 메서드는 <bpt id="p1">[</bpt>IdnMapping<ept id="p1">](xref:System.Globalization.IdnMapping)</ept> 클래스를 사용하여 US-ASCII 문자 범위 외부에 있는 유니코드 문자를 Punycode로 변환합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The method also sets the <ph id="ph1">`invalid`</ph> flag to <ph id="ph2">`true`</ph> if the <bpt id="p1">[</bpt>IdnMapping.GetAscii<ept id="p1">](xref:System.Globalization.IdnMapping.GetAscii(System.String))</ept> method detects any invalid characters in the domain name.</source>
          <target state="translated">이 메서드는 <bpt id="p1">[</bpt>IdnMapping.GetAscii<ept id="p1">](xref:System.Globalization.IdnMapping.GetAscii(System.String))</ept> 메서드가 도메인 이름에서 잘못된 문자를 발견하는 경우 <ph id="ph1">`invalid`</ph> 플래그를 <ph id="ph2">`true`</ph>로 설정합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The method returns the Punycode domain name preceded by the @ symbol to the <ph id="ph1">`IsValidEmail`</ph> method.</source>
          <target state="translated">메서드는 앞에 @ 기호가 있는 Punycode 도메인 이름을 <ph id="ph1">`IsValidEmail`</ph> 메서드에 반환합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`IsValidEmail`</ph> method then calls the <bpt id="p1">[</bpt>Regex.IsMatch(String, String)<ept id="p1">](xref:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String))</ept> method to verify that the address conforms to a regular expression pattern.</source>
          <target state="translated">그러면 <ph id="ph1">`IsValidEmail`</ph> 메서드는 <bpt id="p1">[</bpt>Regex.IsMatch(String, String)<ept id="p1">](xref:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String))</ept> 메서드를 호출하여 주소가 정규식 패턴을 따르는지 확인합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Note that the <ph id="ph1">`IsValidEmail`</ph> method does not perform authentication to validate the email address.</source>
          <target state="translated"><ph id="ph1">`IsValidEmail`</ph> 메서드는 전자 메일 주소의 유효성을 검사하기 위해 인증을 수행하는 것이 아닙니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>It merely determines whether its format is valid for an email address.</source>
          <target state="translated">단지 형식이 전자 메일 주소에 올바른지 여부만 확인합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In addition, the <ph id="ph1">`IsValidEmail`</ph> method does not verify that the top-level domain name is a valid domain name listed at the <bpt id="p1">[</bpt>IANA Root Zone Database<ept id="p1">](https://www.iana.org/domains/root/db)</ept>, which would require a look-up operation.</source>
          <target state="translated">또한 <ph id="ph1">`IsValidEmail`</ph> 메서드는 최상위 도메인 이름이 조회 작업 시 요구되는 <bpt id="p1">[</bpt>IANA 루트 영역 데이터베이스<ept id="p1">](https://www.iana.org/domains/root/db)</ept>에 나열된 올바른 도메인 이름인지 확인하지 않습니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Instead, the regular expression merely verifies that the top-level domain name consists of between two and twenty-four ASCII characters, with alphanumeric first and last characters and the remaining characters being either alphanumeric or a hyphen (-).</source>
          <target state="translated">대신, 정규식은 최상위 도메인 이름이&amp;2;~24개의 ASCII 문자(첫 번째 문자와 마지막 문자는 영숫자이고, 나머지 문자는 영숫자이거나 하이픈(-)임)로 구성되었는지만 확인합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In this example, the regular expression pattern <ph id="ph1">`^(?(")(".+?(?&lt;!\\)"@)|(([0-9a-z]((\.(?!\.))|[-!#\$%&amp;'\*\+/=\?\^`</ph><ph id="ph2">\{</ph><ph id="ph3">\}</ph><ph id="ph4">\|</ph>~\w])<bpt id="p1">*</bpt>)(?&lt;=[0-9a-z])@))(?(<ph id="ph5">\[</ph>)(<ph id="ph6">\[</ph>(\d{1,3}<ph id="ph7">\.</ph>){3}\d{1,3}<ph id="ph8">\]</ph>)|(([0-9a-z][-\w]<ept id="p1">*</ept>[0-9a-z]*<ph id="ph9">\.</ph>)+[a-z0-9][<ph id="ph10">\-</ph>a-z0-9]{0,22}[a-z0-9]))$` is interpreted as shown in the following table.</source>
          <target state="translated">이 예제에서 <ph id="ph1">`^(?(")(".+?(?&lt;!\\)"@)|(([0-9a-z]((\.(?!\.))|[-!#\$%&amp;'\*\+/=\?\^`</ph> <ph id="ph2">\{</ph> <ph id="ph3">\}</ph> <ph id="ph4">\|</ph>~ \w])<bpt id="p1">*</bpt>)(?&lt;=[0-9a-z])@))(?(<ph id="ph5">\[</ph>)(<ph id="ph6">\[</ph>(\d{1,3}<ph id="ph7">\.</ph>){3}\d{1,3}<ph id="ph8">\]</ph>)|( ([0-9a-z] [-\w]<ept id="p1">*</ept>[0-9a-z] *<ph id="ph9">\.</ph>) [a-z0-9] + [<ph id="ph10">\-</ph>a-z0-9]{0,22}[a-z0-9]))$` 정규식 패턴은 다음 표와 같이 해석됩니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Note that the regular expression is compiled using the <bpt id="p1">[</bpt>RegexOptions.IgnoreCase<ept id="p1">](xref:System.Text.RegularExpressions.RegexOptions.IgnoreCase)</ept> flag.</source>
          <target state="translated">정규식은 <bpt id="p1">[</bpt>RegexOptions.IgnoreCase<ept id="p1">](xref:System.Text.RegularExpressions.RegexOptions.IgnoreCase)</ept> 플래그를 사용하여 컴파일됩니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">패턴</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">설명</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Begin the match at the start of the string.</source>
          <target state="translated">문자열의 시작 부분에서 일치 항목 찾기를 시작합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Determine whether the first character is a quotation mark.</source>
          <target state="translated">첫 번째 문자가 따옴표인지 확인합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`(?(")`</ph> is the beginning of an alternation construct.</source>
          <target state="translated"><ph id="ph1">`(?(")`</ph>는 대체 구문의 시작 부분입니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If the first character is a quotation mark, match a beginning quotation mark followed by at least one occurrence of any character, followed by an ending quotation mark.</source>
          <target state="translated">첫 번째 문자가 따옴표인 경우 시작 따옴표 뒤에 임의의 문자가&amp;1;개 이상 나오고 그 뒤에 끝 따옴표가 나오는 일치 항목을 찾습니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The ending quotation mark must not be preceded by a backslash character <ph id="ph1">`(\). (?&lt;!`</ph> is the beginning of a zero-width negative lookbehind assertion.</source>
          <target state="translated">끝 따옴표는 앞에 백슬래시 문자가 없어야 합니다. <ph id="ph1">`(\). (?&lt;!`</ph>는 너비가&amp;0;인 부정 lookbehind 어설션의 시작 부분입니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The string should conclude with an at sign (@).</source>
          <target state="translated">문자열은 @ 기호로 끝나야 합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>`&amp;#124;(([0-9a-z]</source>
          <target state="translated">`&amp;#124;(([0-9a-z]</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If the first character is not a quotation mark, match any alphabetic character from a to z or A to Z (the comparison is case insensitive), or any numeric character from 0 to 9.</source>
          <target state="translated">첫 번째 문자가 따옴표가 아니면 a-z 또는 A-Z(비교는 대/소문자를 구분하지 않음)의 영문자 또는 0-9의 숫자를 찾습니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If the next character is a period, match it.</source>
          <target state="translated">다음 문자가 마침표이면 일치하게 됩니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If it is not a period, look ahead to the next character and continue the match.</source>
          <target state="translated">마침표가 아니면 왼쪽에서 오른쪽으로 다음 문자를 검색하여 일치 항목을 계속 찾습니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`(?!\.)`</ph> is a zero-width negative lookahead assertion that prevents two consecutive periods from appearing in the local part of an email address.</source>
          <target state="translated"><ph id="ph1">`(?!\.)`</ph>는 전자 메일 주소의 로컬 부분에 마침표 두 개가 연속으로 나타나지 않도록 하며 너비가&amp;0;인 부정 lookahead 어설션입니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`&amp;#124;[-!#\$%&amp;'\*\+/=\?\^`</ph><ph id="ph2">\{</ph><ph id="ph3">\}</ph><ph id="ph4">\&amp;</ph>#124;~\w]</source>
          <target state="translated"><ph id="ph1">`&amp;#124;[-!#\$%&amp;'\*\+/=\?\^`</ph><ph id="ph2">\{</ph><ph id="ph3">\}</ph><ph id="ph4">\&amp;</ph>#124;~\w]</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>If the next character is not a period, match any word character or one of the following characters: -!#$%'*+=?^`{}&amp;#124;~.</source>
          <target state="translated">다음 문자가 마침표가 아니면 단어 문자 또는 -!#$%'*+=?^`{}&amp;#124;~ 중 하나를 찾습니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`((\.(?!\.))&amp;#124;[-!#\$%'\*\+/=\?\^`</ph><ph id="ph2">\{</ph><ph id="ph3">\}</ph><ph id="ph4">\&amp;</ph>#124;~\w])*</source>
          <target state="translated"><ph id="ph1">`((\.(?!\.))&amp;#124;[-!#\$%'\*\+/=\?\^`</ph><ph id="ph2">\{</ph><ph id="ph3">\}</ph><ph id="ph4">\&amp;</ph>#124;~\w])*</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Match the alternation pattern (a period followed by a non-period, or one of a number of characters) zero or more times.</source>
          <target state="translated">교체 패턴(마침표가 아닌 문자 또는 여러 문자 중 하나 앞에 마침표가 있는 패턴)을&amp;0;번 이상 찾습니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Match the @ character.</source>
          <target state="translated">@ 문자를 찾습니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Continue the match if the character that precedes the @ character is A through Z, a through z, or 0 through 9.</source>
          <target state="translated">@ 문자 앞의 문자가 영문자(A-Z, a-z) 또는 숫자(0-9)인 경우 일치 항목 찾기를 계속합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`(?&lt;=[0-9a-z])`</ph> construct defines a zero-width positive lookbehind assertion.</source>
          <target state="translated"><ph id="ph1">`(?&lt;=[0-9a-z])`</ph> 구문은 너비가&amp;0;인 긍정 lookbehind 어설션을 정의합니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Check whether the character that follows @ is an opening bracket.</source>
          <target state="translated">@ 뒤의 문자가 여는 대괄호인지 확인합니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>If it is an opening bracket, match the opening bracket followed by an IP address (four sets of one to three digits, with each set separated by a period) and a closing bracket.</source>
          <target state="translated">여는 대괄호이면 IP 주소(1자리에서&amp;3;자리까지의 숫자로 이루어진&amp;4;개의 집합이며 각 집합은 마침표로 구분됨)와 닫는 대괄호 앞에 있는 여는 대괄호를 찾습니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>If the character that follows @ is not an opening bracket, match one alphanumeric character with a value of A-Z, a-z, or 0-9, followed by zero or more occurrences of a word character or a hyphen, followed by zero or one alphanumeric character with a value of A-Z, a-z, or 0-9, followed by a period.</source>
          <target state="translated">@ 뒤의 문자가 여는 대괄호가 아니면 영숫자(A-Z, a-z 또는 0-9) 1개, 단어 문자 또는 하이픈 0개 이상, 영숫자(A-Z, a-z 또는 0-9) 0개 또는 1개와 마침표 1개로 구성된 패턴과 일치하는 항목을 찾습니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>This pattern can be repeated one or more times, and must be followed by the top-level domain name.</source>
          <target state="translated">이 패턴은 한 번 이상 반복될 수 있으며, 뒤에 최상위 도메인 이름이 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The top-level domain name must begin and end with an alphanumeric character (a-z, A-Z, and 0-9).</source>
          <target state="translated">최상위 도메인 이름은 영숫자(a-z, A-Z 및 0-9)로 시작하고 끝나야 하며,</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>It can also include from zero to 22 ASCII characters that are either alphanumeric or hyphens.</source>
          <target state="translated">영숫자이거나 하이픈인 0~22개의 ASCII 문자를 포함할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>End the match at the end of the string.</source>
          <target state="translated">문자열의 끝 부분에서 일치 항목 찾기를 끝냅니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>You can call the <ph id="ph1">`IsValidEmail`</ph> and <ph id="ph2">`DomainMapper`</ph> methods by using code such as the following:</source>
          <target state="translated">다음과 같은 코드를 사용하여 <ph id="ph1">`IsValidEmail`</ph> 및 <ph id="ph2">`DomainMapper`</ph> 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">참고 항목</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>.NET regular expressions<ept id="p1">](regular-expressions.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>.NET 정규식<ept id="p1">](regular-expressions.md)</ept></target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Regular expression examples<ept id="p1">](regex-examples.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>정규식 예제<ept id="p1">](regex-examples.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>