<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-eac019f" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ea16d4b841f5c93da222df56db36d6fb70ea35f9</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\tools\extensibility.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p1</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2b6fec3e8b7b8e43a49178e846ebc37853a638b6</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a7ca3d4f0a58b53afc1bbfcd7dad7dcdfd0867a6</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>.NET Core CLI extensibility model</source>
          <target state="translated">.NET Core CLI 확장성 모델</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>.NET Core CLI extensibility model</source>
          <target state="translated">.NET Core CLI 확장성 모델</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>CLI, extensibility, custom commands, .NET Core</source>
          <target state="translated">CLI, 확장성, 사용자 지정 명령, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>.NET Core CLI extensibility model</source>
          <target state="translated">.NET Core CLI 확장성 모델</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="translated">개요</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This document will cover the main ways how to extend the CLI tools and explain the scenarios that drive each of them.</source>
          <target state="translated">이 문서에서는 CLI 도구를 확장하는 주요 방법 및 각 방법을 구동하는 시나리오에 대해 설명합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>It will the outline how to consume the tools as well as provide short notes on how to build both types of tools.</source>
          <target state="translated">도구를 사용하는 방법에 대해 간략하게 설명할 뿐만 아니라 두 종류의 도구를 빌드하는 방법에 대한 간단한 메모를 제공합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>How to extend CLI tools</source>
          <target state="translated">CLI 도구를 확장하는 방법</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The CLI tools can be extended in two main ways:</source>
          <target state="translated">CLI 도구는 다음과 같은 두 가지 주요 방법으로 확장할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Via NuGet packages on a per-project basis</source>
          <target state="translated">프로젝트 단위로 NuGet 패키지 사용</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Via the system's PATH</source>
          <target state="translated">시스템의 PATH 사용</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The two extensibility mechanisms outlined above are not exclusive; you can use both or just one.</source>
          <target state="translated">위에서 간략하게 설명한 두 가지 확장성 메커니즘은 둘 다를 사용하거나 하나만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Which one to pick depends largely on what is the goal you are trying to achieve with your extension.</source>
          <target state="translated">선택하는 방법은 확장을 통해 달성하려는 목표에 따라 크게 달라집니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Per-project based extensibility</source>
          <target state="translated">프로젝트 단위 기반 확장성</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Per-project tools are <bpt id="p1">[</bpt>portable console applications<ept id="p1">](../deploying/index.md)</ept> that are distributed as NuGet packages.</source>
          <target state="translated">프로젝트 단위 도구는 NuGet 패키지로 배포되는 <bpt id="p1">[</bpt>이식 가능한 콘솔 응용 프로그램<ept id="p1">](../deploying/index.md)</ept>입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Tools are only available in the context of the project that references them and for which they are restored; invocation outside of the context of the project (for example, outside of the directory that contains the project) will fail as the command will not be able to be found.</source>
          <target state="translated">도구는 해당 도구를 참조하고 도구가 복원되는 프로젝트의 컨텍스트에서만 사용할 수 있습니다. 프로젝트 컨텍스트 외부(예: 프로젝트를 포함하는 디렉터리 외부)에서 호출하면 명령을 찾을 수 없기 때문에 실패합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>These tools are perfect for build servers as well, since nothing outside of <ph id="ph1">`project.json`</ph> is needed.</source>
          <target state="translated">이러한 도구는 빌드 서버에도 완벽한데, <ph id="ph1">`project.json`</ph> 외부의 항목이 필요하지 않기 때문입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The build process runs restore for the project it builds and tools will be available.</source>
          <target state="translated">빌드 프로세스에서는 빌드하는 프로젝트에 대해 복원을 실행하므로 도구를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Language projects, such as F#, are also in this category; after all, each project can only be written in one specific language.</source>
          <target state="translated">F#과 같은 언어 프로젝트도 이 범주에 속합니다. 결국 각 프로젝트는 하나의 특정 언어로만 작성할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Finally, this extensibility model provides support for creation of tools that need access to the built output of the project.</source>
          <target state="translated">마지막으로 이 확장성 모델에서는 프로젝트의 빌드된 출력에 액세스해야 하는 도구를 만들 수 있습니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For instance, various Razor view tools in <bpt id="p1">[</bpt>ASP.NET<ept id="p1">](https://www.asp.net/)</ept> MVC applications fall into this category.</source>
          <target state="translated">예를 들어 <bpt id="p1">[</bpt>ASP.NET<ept id="p1">](https://www.asp.net/)</ept> MVC 응용 프로그램의 다양한 Razor 보기 도구는 이 범주에 속합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Consuming per-project tools</source>
          <target state="translated">프로젝트 단위 도구 사용</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Consuming these tools requires you to add a <ph id="ph1">`tools`</ph> node to your <ph id="ph2">`project.json`</ph>.</source>
          <target state="translated">이러한 도구를 사용하려면 <ph id="ph1">`tools`</ph> 노드를 <ph id="ph2">`project.json`</ph>에 추가해야 합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Inside the <ph id="ph1">`tools`</ph> node, you reference the package in which the tool resides.</source>
          <target state="translated"><ph id="ph1">`tools`</ph> 노드 내에서는 도구가 상주하는 패키지를 참조합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>After running <ph id="ph1">`dotnet restore`</ph>, the tool and its dependencies are restored.</source>
          <target state="translated"><ph id="ph1">`dotnet restore`</ph>를 실행하면 도구 및 해당 종속성이 복원됩니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For tools that need to load the build output of the project for execution, there is usually another dependency which is listed under the regular dependencies in the project file.</source>
          <target state="translated">프로젝트의 빌드 출력을 로드하여 실행해야 하는 도구의 경우 일반적으로 프로젝트 파일의 일반 종속성 아래에 나열되는 다른 종속성이 있습니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This means that tools that load project's code have two components:</source>
          <target state="translated">즉, 프로젝트의 코드를 로드하는 도구에는 다음과 같은 두 가지 구성 요소가 있습니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The "tools" main invoker</source>
          <target state="translated">"도구" 기본 호출자</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Any number of other tools that contain the logic to work with</source>
          <target state="translated">작업에 사용할 논리를 포함하는 여러 가지 다른 도구</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Why two things?</source>
          <target state="translated">두 가지인 이유는 무엇인가요?</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Tools that need to load the build output of a project need to have unified dependency graph with the project they are working.</source>
          <target state="translated">프로젝트의 빌드 출력을 로드해야 하는 도구에는 작업 중인 프로젝트와 통합된 종속성 그래프가 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>By adding the dependency bit, we enable NuGet to resolve these dependencies as a unified graph.</source>
          <target state="translated">종속성 비트를 추가하여 NuGet에서 이러한 종속성을 통합 그래프로 확인하도록 합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The invoker is there because it needs to reason about the location as well as the frameworks of the dependency tool.</source>
          <target state="translated">호출자는 종속성 도구의 프레임워크뿐만 아니라 위치에 대해 추론해야 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The invoker can accept all of the redirection arguments (<ph id="ph1">`-c`</ph>, <ph id="ph2">`-o`</ph>, <ph id="ph3">`-b`</ph>) that the user specifies and finds the dependency tool; it can also implement any policies for cases where multiple dependency tools exist for multiple frameworks (that is, does it run all of them, just one, etc.) In general, logic can be shared between these two tools any way that is needed.</source>
          <target state="translated">호출자는 사용자가 종속성 도구를 지정하고 찾는 모든 리디렉션 인수(<ph id="ph1">`-c`</ph>, <ph id="ph2">`-o`</ph>, <ph id="ph3">`-b`</ph>)를 허용할 수 있습니다. 또한 여러 프레임워크에 대해 여러 종속성 도구가 존재하여 모든 도구를 실행하거나 하나만 실행하는 등의 경우에 대한 정책을 구현할 수 있습니다. 일반적으로 논리는 이러한 두 도구 간에 필요한 방식으로 공유할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Let's review an example of adding a simple tools-only tool to a simple project.</source>
          <target state="translated">간단한 도구를 추가하는 예제를 검토해 보겠습니다. 간단한 프로젝트에 도구만 추가합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Given an example command called <ph id="ph1">`dotnet-api-search`</ph> that allows you to search through the NuGet packages for the specified API, here is a console application's <ph id="ph2">`project.json`</ph> file that uses that tool:</source>
          <target state="translated">다음은 NuGet 패키지에서 지정된 API를 검색할 수 있는 <ph id="ph1">`dotnet-api-search`</ph>라는 예제 명령이 지정된 경우 해당 도구를 사용하는 콘솔 응용 프로그램의 <ph id="ph2">`project.json`</ph> 파일입니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`tools`</ph> node is structured in a similar way as the <ph id="ph2">`dependencies`</ph> node.</source>
          <target state="translated"><ph id="ph1">`tools`</ph> 노드는 <ph id="ph2">`dependencies`</ph> 노드와 유사한 방식으로 구성됩니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>It needs the package ID of the package containing the tool and its version at the very least.</source>
          <target state="translated">이 노드에는 도구와 최소 버전을 포함하는 패키지의 패키지 ID가 필요합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>In the example above, we can see that there is another statement, the <ph id="ph1">`imports`</ph> one.</source>
          <target state="translated">위의 예제에서 <ph id="ph1">`imports`</ph>라는 또 다른 문을 확인할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This influences the tool's restore process and specifies that the tool is also compatible, in addition to any targeted frameworks the tools has, with <ph id="ph1">`dnxcore50`</ph> target.</source>
          <target state="translated">이 문은 도구의 복원 프로세스에 영향을 주고 도구가 대상 프레임워크 외에 <ph id="ph1">`dnxcore50`</ph> 대상과도 호환되도록 지정합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For more information you can consult the <bpt id="p1">[</bpt>project.json reference<ept id="p1">](project-json.md)</ept>.</source>
          <target state="translated">자세한 내용은 <bpt id="p1">[</bpt>project.json 참조<ept id="p1">](project-json.md)</ept>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Building tools</source>
          <target state="translated">도구 빌드</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>As mentioned, tools are just portable console applications.</source>
          <target state="translated">앞에서 설명한 대로 도구는 단순히 이식 가능한 콘솔 응용 프로그램입니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>You would build one as you would build any console application.</source>
          <target state="translated">모든 콘솔 응용 프로그램을 빌드하는 것처럼 도구도 빌드합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>After you build it, you would use <bpt id="p1">[</bpt><ph id="ph1">`dotnet pack`</ph><ept id="p1">](dotnet-pack.md)</ept> command to create a NuGet package (nupkg) that contains your code, information about its dependencies and so on.</source>
          <target state="translated">도구를 빌드한 후에는 <bpt id="p1">[</bpt><ph id="ph1">`dotnet pack`</ph><ept id="p1">](dotnet-pack.md)</ept> 명령을 사용하여 코드, 종속성에 대한 정보 등을 포함하는 NuGet 패키지(nupkg)를 만듭니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The package name can be whatever the author wants, but the application inside, the actual tool binary, has to conform to the convention of <ph id="ph1">`dotnet-&lt;command&gt;`</ph> in order for <ph id="ph2">`dotnet`</ph> to be able to invoke it.</source>
          <target state="translated">패키지 이름은 작성자가 원하는 대로 지정할 수 있지만 응용 프로그램 내부 실제 도구 이진은 <ph id="ph1">`dotnet-&lt;command&gt;`</ph>의 규칙을 준수해야 <ph id="ph2">`dotnet`</ph>을 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Since tools are portable applications, the user consuming the tool has to have the version of the .NET Core libraries that the tool was built against in order to run the tool.</source>
          <target state="translated">도구는 이식 가능한 응용 프로그램이므로 도구 사용자가 도구를 실행하려면 도구가 빌드된 버전의 .NET Core 라이브러리가 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Any other dependency that the tool uses and that is not contained within the .NET Core libraries is restored and placed in the NuGet cache.</source>
          <target state="translated">도구에서 사용하고 .NET Core 라이브러리 내에서 포함되지 않은 다른 모든 종속성은 NuGet 캐시에서 복원되고 배치됩니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The entire tool is, therefore, run using the assemblies from the .NET Core libraries as well as assemblies from the NuGet cache.</source>
          <target state="translated">따라서 전체 도구는 .NET Core 라이브러리의 어셈블리뿐만 아니라 NuGet 캐시의 어셈블리를 사용하여 실행됩니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>These kind of tools have a dependency graph that is completely separate from the dependency graph of the project that uses them.</source>
          <target state="translated">이러한 종류의 도구에는 해당 도구를 사용하는 프로젝트의 종속성 그래프와 완전히 구분되는 종속성 그래프가 있습니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The restore process will first restore the project's dependencies, and will then restore each of the tools and their dependencies.</source>
          <target state="translated">복원 프로세스에서는 먼저 프로젝트의 종속성을 복원한 다음 각 도구 및 해당 종속성을 복원합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>You can find richer examples and different combinations of this in the <bpt id="p1">[</bpt>.NET Core CLI repo<ept id="p1">](https://github.com/dotnet/cli/tree/rel/1.0.0-preview2/TestAssets/TestProjects)</ept>.</source>
          <target state="translated">보다 풍부한 예제 및 다양한 조합은 <bpt id="p1">[</bpt>.NET Core CLI 리포지토리<ept id="p1">](https://github.com/dotnet/cli/tree/rel/1.0.0-preview2/TestAssets/TestProjects)</ept>에서 확인할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>You can also see the <bpt id="p1">[</bpt>implementation of tools used<ept id="p1">](https://github.com/dotnet/cli/tree/rel/1.0.0-preview2/TestAssets/TestPackages)</ept> in the same repo.</source>
          <target state="translated">동일한 리포지토리에서 <bpt id="p1">[</bpt>사용된 도구의 구현<ept id="p1">](https://github.com/dotnet/cli/tree/rel/1.0.0-preview2/TestAssets/TestPackages)</ept>도 확인할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Building tools that load project's build outputs for execution is slightly different.</source>
          <target state="translated">프로젝트의 빌드 출력을 로드하여 실행하는 도구 빌드는 약간 다릅니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>As stated, for these kinds of tools there are two components:</source>
          <target state="translated">앞에서 설명한 대로 이러한 종류의 도구에는 다음과 같은 두 가지 구성 요소가 있습니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>A dispatcher tool that the user invokes</source>
          <target state="translated">사용자가 호출하는 디스패처 도구</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>A framework-specific dependency that contains the logic on how to find the build outputs and what to do with it</source>
          <target state="translated">빌드 출력을 찾는 방법 및 수행할 작업에 대한 논리를 포함하는 프레임워크별 종속성</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>A prime example of this are <bpt id="p1">[</bpt>Entity Framework (EF)<ept id="p1">](https://github.com/aspnet/EntityFramework)</ept> commands as well as the <bpt id="p2">[</bpt><ph id="ph1">`dotnet test`</ph><ept id="p2">](dotnet-test.md)</ept> command.</source>
          <target state="translated">이러한 주요 예제로는 <bpt id="p1">[</bpt>EF(Entity Framework)<ept id="p1">](https://github.com/aspnet/EntityFramework)</ept> 명령 및 <bpt id="p2">[</bpt><ph id="ph1">`dotnet test`</ph><ept id="p2">](dotnet-test.md)</ept> 명령이 있습니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>In both cases, there is a tool that is referenced in the <ph id="ph1">`tools`</ph> node of the <ph id="ph2">`project.json`</ph> and that is the main dispatcher.</source>
          <target state="translated">두 경우 모두 <ph id="ph2">`project.json`</ph>의 <ph id="ph1">`tools`</ph> 노드에서 참조되고 기본 디스패처인 도구가 있습니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The user invokes this tool on the command line.</source>
          <target state="translated">사용자는 명령줄에서 이 도구를 호출합니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The second piece of the puzzle is the dependency that is given in the project's main dependencies (either root ones or framework-specific ones).</source>
          <target state="translated">퍼즐의 두 번째 조각은 프로젝트의 기본 종속성(루트 종속성이나 프레임워크별 종속성)에 지정된 종속성입니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>This package contains the actual logic of the tool.</source>
          <target state="translated">이 패키지에는 도구의 실제 논리가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The package is a normal dependency, thus it will be restored as part of the restore process for the project.</source>
          <target state="translated">패키지는 일반적인 종속성이므로 프로젝트에 대한 복원 프로세스의 일부로 복원됩니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Unlike the previous kind of tools, these tool are actually part of the graph of the project that consumes them.</source>
          <target state="translated">이전 종류의 도구와 달리 이러한 도구는 실제로 해당 도구를 사용하는 프로젝트 그래프의 일부입니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>This is because they need access to the project's code and potentially all of its dependencies.</source>
          <target state="translated">이는 프로젝트의 코드 및 잠재적으로 모든 종속성에 액세스해야 하기 때문입니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>For instance, the EF tools need this because they need to scan the assemblies to find the code they need, such as migrations.</source>
          <target state="translated">예를 들어 EF 도구는 어셈블리를 검색하여 필요한 코드를 찾아야 하기 때문에 필요합니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Another reason why this two-pronged solution exists is to allow a cleaner invocation model.</source>
          <target state="translated">이러한 두 가지 장기 솔루션 존재하는 또 다른 이유는 클리너 호출 모델을 허용하기 위해서입니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Most CLI commands that drop certain artifacts on disk (for example, <ph id="ph1">`dotnet build`</ph>, <ph id="ph2">`dotnet publish`</ph>) allow users to redirect the outputs to a different path using the <ph id="ph3">`--output`</ph> argument or <ph id="ph4">`--build-base-path`</ph> argument or <ph id="ph5">`--configuration`</ph> argument.</source>
          <target state="translated">디스크에서 특정 아티팩트를 삭제하는 대부분의 CLI 명령(예: <ph id="ph1">`dotnet build`</ph>, <ph id="ph2">`dotnet publish`</ph>)을 통해 사용자는 <ph id="ph3">`--output`</ph> 인수, <ph id="ph4">`--build-base-path`</ph> 인수 또는 <ph id="ph5">`--configuration`</ph> 인수를 사용하여 출력을 다른 경로로 리디렉션할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>For EF tools, for example, to be able to find the build output of your project, you would have to provide the same arguments with the same values to <bpt id="p1">*</bpt>both<ept id="p1">*</ept> <ph id="ph1">`dotnet`</ph> driver as well as the <ph id="ph2">`ef`</ph> command.</source>
          <target state="translated">예를 들어 EF 도구에서 프로젝트의 빌드 출력을 찾을 수 있으려면 <bpt id="p1">*</bpt>두<ept id="p1">*</ept> <ph id="ph1">`dotnet`</ph> 드라이버 및 <ph id="ph2">`ef`</ph> 명령에 동일한 인수를 동일한 값으로 제공해야 합니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>With the invocation model, the users pass any arguments to the dispatcher tool which can then use that to find the needed binary that contains the logic in the output directories.</source>
          <target state="translated">호출 모델을 사용하여 사용자는 디스패처 도구에 인수를 전달한 다음 해당 인수를 사용하여 출력 디렉터리에서 논리를 포함하는 필요한 이진을 찾을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>A good example of this approach can be found in the <bpt id="p1">[</bpt>.NET Core CLI repo<ept id="p1">](https://github.com/dotnet/cli)</ept>:</source>
          <target state="translated">이 접근 방식의 좋은 예제는 <bpt id="p1">[</bpt>.NET Core CLI 리포지토리<ept id="p1">](https://github.com/dotnet/cli)</ept>에서 찾을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Sample project.json file<ept id="p1">](https://github.com/dotnet/cli/blob/rel/1.0.0-preview2/TestAssets/DesktopTestProjects/AppWithDirectDependencyDesktopAndPortable/project.json)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>샘플 project.json 파일<ept id="p1">](https://github.com/dotnet/cli/blob/rel/1.0.0-preview2/TestAssets/DesktopTestProjects/AppWithDirectDependencyDesktopAndPortable/project.json)</ept></target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Implementation of the dispatcher<ept id="p1">](https://github.com/dotnet/cli/tree/rel/1.0.0-preview2/TestAssets/TestPackages/dotnet-dependency-tool-invoker)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>디스패처의 구현<ept id="p1">](https://github.com/dotnet/cli/tree/rel/1.0.0-preview2/TestAssets/TestPackages/dotnet-dependency-tool-invoker)</ept></target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Implementation of the framework-specific dependency<ept id="p1">](https://github.com/dotnet/cli/tree/rel/1.0.0-preview2/TestAssets/TestPackages/dotnet-desktop-and-portable)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>프레임워크별 종속성의 구현<ept id="p1">](https://github.com/dotnet/cli/tree/rel/1.0.0-preview2/TestAssets/TestPackages/dotnet-desktop-and-portable)</ept></target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>PATH-based extensibility</source>
          <target state="translated">PATH 기반 확장성</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>PATH-based extensibility is usually used for development machines where you need a tool that conceptually covers more than a single project.</source>
          <target state="translated">일반적으로 PATH 기반 확장성은 개념적으로 둘 이상의 프로젝트를 포함하는 도구가 필요한 개발 컴퓨터에 사용됩니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The main drawback of this extensions mechanism is that it is tied to the machine where the tool exists.</source>
          <target state="translated">이 확장 메커니즘의 주요 단점은 도구가 있는 컴퓨터에 연결되어 있다는 점입니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>If you need it on another machine, you would have to deploy it.</source>
          <target state="translated">따라서 다른 컴퓨터에서 필요한 경우에는 배포해야 합니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>This pattern of CLI toolset extensibility is very simple.</source>
          <target state="translated">CLI 도구 집합 확장성의 이 패턴은 매우 간단합니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>As covered in the <bpt id="p1">[</bpt>.NET Core CLI overview<ept id="p1">](index.md)</ept>, <ph id="ph1">`dotnet`</ph> driver can run any command that is named after the <ph id="ph2">`dotnet-&lt;command&gt;`</ph> convention.</source>
          <target state="translated"><bpt id="p1">[</bpt>.NET Core CLI 개요<ept id="p1">](index.md)</ept>에서 설명한 대로 <ph id="ph1">`dotnet`</ph> 드라이버는 <ph id="ph2">`dotnet-&lt;command&gt;`</ph> 규칙에 따라 명명된 모든 명령을 실행할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The default resolution logic will first probe several locations and will finally fall to the system PATH.</source>
          <target state="translated">기본 해결 논리에서는 여러 위치를 먼저 검색하고 마지막으로 시스템 PATH를 검색합니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>If the requested command exists in the system PATH and is a binary that can be invoked, <ph id="ph1">`dotnet`</ph> driver will invoke it.</source>
          <target state="translated">요청한 명령이 시스템 PATH에 있고 호출할 수 있는 이진인 경우 <ph id="ph1">`dotnet`</ph> 드라이버에서 호출합니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The binary can be pretty much anything that the operating system can execute.</source>
          <target state="translated">이진은 운영 체제에서 실행할 수 있는 거의 모든 항목이 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>On Unix systems, this means anything that has the execute bit set via <ph id="ph1">`chmod +x`</ph>.</source>
          <target state="translated">Unix 시스템에서는 <ph id="ph1">`chmod +x`</ph>를 통해 실행 비트를 설정하는 모든 항목을 의미하고,</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>On Windows it means anything that Windows knows how to run.</source>
          <target state="translated">Windows에서는 Windows가 실행 방법을 알고 있는 모든 항목을 의미합니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>As an example, let's take a look at a very simple implementation of a <ph id="ph1">`dotnet clean`</ph> command.</source>
          <target state="translated">예를 들어 <ph id="ph1">`dotnet clean`</ph> 명령의 매우 간단한 구현을 살펴보겠습니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>We will use <ph id="ph1">`bash`</ph> to implement this command.</source>
          <target state="translated"><ph id="ph1">`bash`</ph>를 사용하여 이 명령을 구현합니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The command will simply delete the <ph id="ph1">`bin/`</ph> and <ph id="ph2">`obj/`</ph> directories in the current directory.</source>
          <target state="translated">이 명령은 현재 디렉터리에서 <ph id="ph1">`bin/`</ph> 및 <ph id="ph2">`obj/`</ph> 디렉터리를 삭제하기만 합니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`--lock`</ph> argument is passed to it, it will also delete <ph id="ph2">`project.lock.json`</ph> file.</source>
          <target state="translated"><ph id="ph1">`--lock`</ph> 인수가 전달되면 <ph id="ph2">`project.lock.json`</ph> 파일도 삭제합니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The entirety of the command is given below.</source>
          <target state="translated">전체 명령은 다음과 같습니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>On macOS, we can save this script as <ph id="ph1">`dotnet-clean`</ph> and set its executable bit with <ph id="ph2">`chmod +x dotnet-clean`</ph>.</source>
          <target state="translated">MacOS에서는 이 스크립트를 <ph id="ph1">`dotnet-clean`</ph>으로 저장하고 <ph id="ph2">`chmod +x dotnet-clean`</ph>을 사용하여 실행 파일 비트를 설정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>We can then create a symbolic link to it in <ph id="ph1">`/usr/local/bin`</ph> using the command <ph id="ph2">`ln -s dotnet-clean /usr/local/bin/`</ph>.</source>
          <target state="translated">그런 다음 <ph id="ph2">`ln -s dotnet-clean /usr/local/bin/`</ph> 명령을 사용하여 <ph id="ph1">`/usr/local/bin`</ph>에 바로 가기 링크를 만들 수 있습니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>This will make it possible to invoke the clean command using the <ph id="ph1">`dotnet clean`</ph> syntax.</source>
          <target state="translated">그러면 <ph id="ph1">`dotnet clean`</ph> 구문을 사용하여 정리 명령을 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>You can test this by creating an app, running <ph id="ph1">`dotnet build`</ph> on it and then running <ph id="ph2">`dotnet clean`</ph>.</source>
          <target state="translated">앱을 만들고 해당 앱에서 <ph id="ph1">`dotnet build`</ph>를 실행한 다음 <ph id="ph2">`dotnet clean`</ph>을 실행하여 테스트할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Conclusion</source>
          <target state="translated">결론</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The .NET Core CLI tools allow two main extensibility points.</source>
          <target state="translated">.NET Core CLI 도구는 두 가지 주요 확장 포인트를 허용합니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The per-project tools are contained within the project's context, but they allow easy installation through restoration.</source>
          <target state="translated">프로젝트 단위 도구는 프로젝트의 컨텍스트 내에 포함되지만 복원을 통해 간편한 설치를 허용합니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>PATH-based tools are good for general, cross-project tools that are usable on a single machine.</source>
          <target state="translated">PATH 기반 도구는 단일 컴퓨터에서 사용할 수 있는 일반적인 프로젝트 간 도구에 적합합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>