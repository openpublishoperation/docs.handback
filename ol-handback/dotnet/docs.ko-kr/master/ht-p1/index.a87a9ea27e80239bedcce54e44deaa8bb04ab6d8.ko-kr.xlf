<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-eac019f" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2406a03fa64eb02c70f05c1e8240e4bc5981e98d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\garbagecollection\index.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p1</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e9eeef525cefecc3f8304c5b07b6b4589ee643f9</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f24418e8e5c00595888e7a9a0d9e0b8080a3fc70</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Garbage Collection</source>
          <target state="translated">가비지 컬렉션</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Garbage Collection</source>
          <target state="translated">가비지 컬렉션</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Garbage collection</source>
          <target state="translated">가비지 수집</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Garbage collection is one of most important features of the .NET managed code platform.</source>
          <target state="translated">GC(가비지 수집기)는 .NET 관리되는 코드 플랫폼의 중요한 기능 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The garbage collector (GC) manages allocating and releasing memory for you.</source>
          <target state="translated">가비지 수집기에서 메모리의 할당 및 해제를 관리 합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You do not need to how to allocate and release memory or manage the lifetime of the objects that use that memory.</source>
          <target state="translated">사용자가 메모리를 할당하고 해제하거나 해당 메모리를 사용하는 개체의 수명을 관리하는 방식을 알고 있을 필요는 없습니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>An allocation is made any time you <bpt id="p1">_</bpt>new<ept id="p1">_</ept> an object or a value type is boxed.</source>
          <target state="translated"><bpt id="p1">_</bpt>새 개체를 만들거나<ept id="p1">_</ept> 값 형식이 boxed일 때마다 언제든지 할당이 수행됩니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Allocations are typically very fast.</source>
          <target state="translated">일반적으로 할당은 매우 빠르게 수행됩니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>When there isn’t enough memory to allocate an object, the GC must collect and dispose of garbage memory to make memory available for new allocations.</source>
          <target state="translated">개체를 할당하는 데 메모리가 충분하지 못하면 GC에서 가비지 메모리를 수집하고 삭제하여 새 할당을 위해 메모리를 사용할 수 있도록 해야 합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This process is called “garbage collection”.</source>
          <target state="translated">이 프로세스를 "가비지 수집"이라고 합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The garbage collector serves as an automatic memory manager.</source>
          <target state="translated">가비지 수집기는 자동 메모리 관리자 역할을 합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>It provides the following benefits:</source>
          <target state="translated">가비지 수집은 다음과 같은 이점을 제공합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Enables you to develop your application without having to free memory.</source>
          <target state="translated">응용 프로그램을 개발할 때 메모리를 해제할 필요가 없습니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Allocates objects on the managed heap efficiently.</source>
          <target state="translated">관리되는 힙에 효율적으로 개체를 할당합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Reclaims objects that are no longer being used, clears their memory, and keeps the memory available for future allocations.</source>
          <target state="translated">더 이상 사용되지 않는 개체를 회수하고 이러한 개체의 메모리를 비워 이후 할당에서 이 메모리를 사용할 수 있도록 합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Managed objects automatically get clean content to start with, so their constructors do not have to initialize every data field.</source>
          <target state="translated">관리되는 개체는 자동으로 시작을 위한 정리된 콘텐츠를 받으므로 개체의 생성자가 모든 데이터 필드를 초기화할 필요가 없습니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Provides memory safety by making sure that an object cannot use the content of another object.</source>
          <target state="translated">개체에서 다른 개체의 콘텐츠를 사용할 수 없도록 하여 메모리 안전을 제공합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The .NET GC is generational and has 3 generations.</source>
          <target state="translated">.NET GC는 세대별로 진행하며 3개 세대로 구성됩니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Each generation has its own heap that it uses for storage of allocated objects.</source>
          <target state="translated">각 세대에는 할당된 개체의 저장에 사용하는 자체의 힙이 갖춰져 있습니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>There is a basic principle that most objects are either short lived or long lived.</source>
          <target state="translated">대부분의 개체는 짧거나 길게 잔존한다는 기본 원칙이 있습니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Generation 0 is where objects are first allocated.</source>
          <target state="translated">0세대는 개체가 최초로 할당되는 공간입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Objects often don’t live past the first generation, since they are no longer in use (out of scope) by the time the next garbage collection occurs.</source>
          <target state="translated">다음 가비지 수집이 발생할 때까지 더 이상 사용되지 않기(범위 밖) 때문에 첫 번째 세대를 거친 후에는 대개 개체의 수명이 다합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Generation 0 is quick to collect because its associated heap is small.</source>
          <target state="translated">할당되는 힙이 작기 때문에 0세대에서 수집하는 속도가 빠릅니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Generation 1 is really a second chance space.</source>
          <target state="translated">1세대는 실제로 두 번째 기회 공간입니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Objects that are short lived but survive the generation 0 collection (often based on coincidental timing) go to generation 1<ph id="ph1">\.</ph> Generation 1 collections are also quick because its associated heap is also small.</source>
          <target state="translated">수명이 짧지만 0세대 수집에서 잔존한(대개 조건부 타이밍 기준) 개체는 1세대로 이동합니다<ph id="ph1">\.</ph> 연결된 힙 또한 작기 때문에 1세대 수집도 빨리 수행됩니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The first two heaps remain small because objects are either collected or are promoted to the next generation heap.</source>
          <target state="translated">개체가 수집되거나 다음 세대 힙으로 승격되기 때문에 처음 두 힙이 작은 크기로 남아 있습니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Generation 2 is where all long lived objects are.</source>
          <target state="translated">2세대는 길게 잔존한 모든 개체들이 머무는 공간입니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The generation 2 heap can grow to be very large, since the objects it contains can survive a long time and there is no generation 3 heap to further promote objects.</source>
          <target state="translated">보유한 개체들이 오랫동안 잔존할 수 있고 개체를 더 높은 수준으로 승격할 3세대 힙이 없기 때문에 2세대 힙은 매우 큰 크기로 확장됩니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The GC has has an additional heap for large objects called the Large Object Heap (LOH).</source>
          <target state="translated">GC에는 LOH(대형 개체 힙)이라는 대형 개체를 위한 추가 힙이 있으며,</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>It is reserved for objects that are 85,000 bytes or greater.</source>
          <target state="translated">이는 85,000바이트 이상의 개체를 위해 예약되어 있습니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>A byte array (Byte[]) with 85k elements would be an example of a large object.</source>
          <target state="translated">85k 요소를 포함한 바이트 배열(Byte[])은 대형 개체의 한 예입니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Large objects are not allocated to the generational heaps but are allocated directly to the LOH.</source>
          <target state="translated">대형 개체는 세대 힙에 할당되지 않고 LOH에 직접 할당됩니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Generation 2 and LOH collections can take noticeable time for programs that have run for a long time or operate over large amounts of data.</source>
          <target state="translated">오랫동안 실행하거나 대용량 데이터를 연산하는 프로그램의 경우 2세대 및 LOH 수집에서 상당한 시간이 걸릴 수 있습니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Large server programs are known to have heaps in the 10s of GBs.</source>
          <target state="translated">대형 서버 프로그램에서는 10s/GB 처리 속도의 힙이 사용된다고 알려져 있습니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The GC employs a variety of techniques to reduce the amount of time that it blocks program execution.</source>
          <target state="translated">GC에는 프로그램 실행을 차단하는 데 걸리는 시간을 줄이기 위해 다양한 기법들이 적용되고 있습니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The primary approach is to do as much garbage collection work as possible on a background thread in a way that does not interfere with program execution.</source>
          <target state="translated">프로그램 실행을 방해하지 않는 방식으로 백그라운드 스레드에서 최대한 많은 가비지 수집 작업을 수행하는 것이 기본적인 방법입니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The GC also exposes a few ways for developers to influence its behavior, which can be quite useful to improve performance.</source>
          <target state="translated">또한 GC는 해당 동작에 영향을 줄 수 있는 몇 가지 방법을 제공하며, 개발자가 성능을 향상시키는 데 있어 이러한 방법이 매우 유용할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Related Topics</source>
          <target state="translated">관련 항목</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Title</source>
          <target state="translated">제목</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">설명</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Automatic memory management and garbage collection<ept id="p1">](gc.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>자동 메모리 관리 및 가비지 수집<ept id="p1">](gc.md)</ept></target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Introduces the basic concepts of memory management in .NET</source>
          <target state="translated">.NET 메모리 관리의 기본 개념에 대해 설명합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Fundamentals of garbage collection<ept id="p1">](fundamentals.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>가비지 컬렉션 기본 사항<ept id="p1">](fundamentals.md)</ept></target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Describes how garbage collection works, how objects are allocated on the managed heap, and other core concepts.</source>
          <target state="translated">가비지 수집이 작동하는 방법, 관리되는 힙에 개체를 할당하는 방법 및 기타 핵심 개념에 대해 설명합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Induced collections<ept id="p1">](induced.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>도출된 컬렉션<ept id="p1">](induced.md)</ept></target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Describes how to make a garbage collection occur.</source>
          <target state="translated">가비지 수집을 발생시키는 방법에 대해 설명합니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Latency modes<ept id="p1">](latency.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>대기 시간 모드<ept id="p1">](latency.md)</ept></target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Describes the modes that determine the intrusiveness of garbage collection.</source>
          <target state="translated">가비지 수집의 실행 시기를 결정하는 모드에 대해 설명합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Weak references<ept id="p1">](weak-references.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>약한 참조<ept id="p1">](weak-references.md)</ept></target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Describes features that permit the garbage collector to collect an object while still allowing the application to access that object.</source>
          <target state="translated">응용 프로그램에서 개체에 계속 액세스하는 동안 가비지 수집기에서 해당 개체를 수집할 수 있도록 하는 기능에 대해 설명합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Reference</source>
          <target state="translated">참조</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.GC<ept id="p1">](xref:System.GC)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>System.GC<ept id="p1">](xref:System.GC)</ept></target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.GCCollectionMode<ept id="p1">](xref:System.GCCollectionMode)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>System.GCCollectionMode<ept id="p1">](xref:System.GCCollectionMode)</ept></target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.Runtime.GCLatencyMode<ept id="p1">](xref:System.Runtime.GCLatencyMode)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>System.Runtime.GCLatencyMode<ept id="p1">](xref:System.Runtime.GCLatencyMode)</ept></target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.Runtime.GCSettings<ept id="p1">](xref:System.Runtime.GCSettings)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>System.Runtime.GCSettings<ept id="p1">](xref:System.Runtime.GCSettings)</ept></target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>GCSettings.LargeObjectHeapCompactionMode<ept id="p1">](xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>GCSettings.LargeObjectHeapCompactionMode<ept id="p1">](xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode)</ept></target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Object.Finalize<ept id="p1">](xref:System.Object.Finalize)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Object.Finalize<ept id="p1">](xref:System.Object.Finalize)</ept></target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.IDisposable<ept id="p1">](xref:System.IDisposable)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>System.IDisposable<ept id="p1">](xref:System.IDisposable)</ept></target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">참고 항목</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Cleaning up unmanaged resources<ept id="p1">](unmanaged.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>관리되지 않는 리소스 정리<ept id="p1">](unmanaged.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>