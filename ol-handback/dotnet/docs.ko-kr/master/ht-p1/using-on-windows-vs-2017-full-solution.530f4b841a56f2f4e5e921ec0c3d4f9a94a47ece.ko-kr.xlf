<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-e631009" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9e65979d2f41e39e89109c2c5480acaebbef757f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\preview3\tutorials\using-on-windows-vs-2017-full-solution.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p1</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e29a54d1a4949abdd0de1df496fb58cd62111dfb</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c5ae8ea0231349c002c7cfe59d2ad52d63c80a1a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Building a complete .NET Core solution on Windows, using Visual Studio 2017</source>
          <target state="translated">Visual Studio 2017을 사용하여 Windows에서 완전한 .NET Core 솔루션 구축</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Building a complete .NET Core solution on Windows, using Visual Studio 2017</source>
          <target state="translated">Visual Studio 2017을 사용하여 Windows에서 완전한 .NET Core 솔루션 구축</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Building a complete .NET Core solution on Windows, using Visual Studio 2017</source>
          <target state="translated">Visual Studio 2017을 사용하여 Windows에서 완전한 .NET Core 솔루션 구축</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>by <bpt id="p1">[</bpt>Bertrand Le Roy<ept id="p1">](https://github.com/bleroy)</ept> and <bpt id="p2">[</bpt>Phillip Carter<ept id="p2">](https://github.com/cartermp)</ept></source>
          <target state="translated">작성자: <bpt id="p1">[</bpt>Bertrand Le Roy<ept id="p1">](https://github.com/bleroy)</ept> 및 <bpt id="p2">[</bpt>Phillip Carter<ept id="p2">](https://github.com/cartermp)</ept></target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Visual Studio 2017 provides a full-featured development environment for developing .NET Core applications.</source>
          <target state="translated">Visual Studio 2017은 .NET Core 응용 프로그램 개발을 위해 필요한 모든 기능을 갖춘 개발 환경을 제공합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The procedures in this document describe the steps necessary to build a typical .NET Core solution that includes reusable libraries, testing, and using third-party libraries.</source>
          <target state="translated">이 문서의 절차에서는 재사용 가능한 라이브러리, 테스트 및 타사 라이브러리 사용을 비롯하여 일반적인 .NET Core 솔루션을 빌드하는 데 필요한 단계를 설명합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
          <target state="translated">필수 구성 요소</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Follow the instructions on <bpt id="p1">[</bpt>our prerequisites page<ept id="p1">](../windows-prerequisites.md)</ept> to update your environment.</source>
          <target state="translated"><bpt id="p1">[</bpt>필수 조건 페이지<ept id="p1">](../windows-prerequisites.md)</ept>의 지침에 따라 환경을 업데이트합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A solution using only .NET Core projects</source>
          <target state="translated">.NET Core 프로젝트만을 사용하는 솔루션</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Writing the library</source>
          <target state="translated">라이브러리 작성</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In Visual Studio, choose <bpt id="p1">**</bpt>File<ept id="p1">**</ept>, <bpt id="p2">**</bpt>New<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Project<ept id="p3">**</ept>.</source>
          <target state="translated">Visual Studio에서 <bpt id="p1">**</bpt>파일<ept id="p1">**</ept>, <bpt id="p2">**</bpt>새로 만들기<ept id="p2">**</ept>, <bpt id="p3">**</bpt>프로젝트<ept id="p3">**</ept>를 선택합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>New Project<ept id="p1">**</ept> dialog, expand the <bpt id="p2">**</bpt>Visual C#<ept id="p2">**</ept> node and choose the <bpt id="p3">**</bpt>.NET Core<ept id="p3">**</ept> node, and then choose <bpt id="p4">**</bpt>Class Library (.NET Standard)<ept id="p4">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>새 프로젝트<ept id="p1">**</ept> 대화 상자에서 <bpt id="p2">**</bpt>Visual C#<ept id="p2">**</ept> 노드를 확장하고 <bpt id="p3">**</bpt>.NET Core<ept id="p3">**</ept> 노드를 선택한 다음 <bpt id="p4">**</bpt>클래스 라이브러리(.NET 표준)<ept id="p4">**</ept>를 선택합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Name the project "Library" and the solution "Golden".</source>
          <target state="translated">프로젝트 이름을 "Library", 솔루션 이름을 "Golden"으로 지정합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Leave <bpt id="p1">**</bpt>Create directory for solution<ept id="p1">**</ept> checked.</source>
          <target state="translated"><bpt id="p1">**</bpt>솔루션용 디렉터리 만들기<ept id="p1">**</ept> 확인란을 선택한 상태로 둡니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>OK<ept id="p1">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>확인<ept id="p1">**</ept>을 클릭합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In Solution Explorer, open the context menu for the <bpt id="p1">**</bpt>Dependencies<ept id="p1">**</ept> node and choose <bpt id="p2">**</bpt>Manage NuGet Packages<ept id="p2">**</ept>.</source>
          <target state="translated">솔루션 탐색기에서 <bpt id="p1">**</bpt>종속성<ept id="p1">**</ept> 노드의 상황에 맞는 메뉴를 열고 <bpt id="p2">**</bpt>NuGet 패키지 관리<ept id="p2">**</ept>를 선택합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Choose "nuget.org" as the <bpt id="p1">**</bpt>Package source<ept id="p1">**</ept>, and choose the <bpt id="p2">**</bpt>Browse<ept id="p2">**</ept> tab.</source>
          <target state="translated"><bpt id="p1">**</bpt>패키지 소스<ept id="p1">**</ept>로 "nuget.org"를 선택하고 <bpt id="p2">**</bpt>찾아보기<ept id="p2">**</ept> 탭을 선택합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Browse for <bpt id="p1">**</bpt>Newtonsoft.Json<ept id="p1">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>Newtonsoft.Json<ept id="p1">**</ept>을 찾습니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Install<ept id="p1">**</ept>, and accept the license agreement.</source>
          <target state="translated"><bpt id="p1">**</bpt>설치<ept id="p1">**</ept>를 클릭하고 사용권 계약에 동의합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The package should now appear under <bpt id="p1">**</bpt>Dependencies/NuGet<ept id="p1">**</ept> and be automatically restored.</source>
          <target state="translated">이제 패키지에 <bpt id="p1">**</bpt>종속성/NuGet<ept id="p1">**</ept>이 표시되며 자동으로 복원됩니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Rename the <ph id="ph1">`Class1.cs`</ph> file to <ph id="ph2">`Thing.cs`</ph>.</source>
          <target state="translated"><ph id="ph1">`Class1.cs`</ph> 파일이 이름을 <ph id="ph2">`Thing.cs`</ph>로 바꿉니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Accept the rename of the class.</source>
          <target state="translated">클래스의 이름 바꾸기를 적용합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Add a method: <ph id="ph1">`public int Get(int number) =&gt; Newtonsoft.Json.JsonConvert.DeserializeObject&lt;int&gt;($"{number}");`</ph></source>
          <target state="translated">메서드 추가: <ph id="ph1">`public int Get(int number) =&gt; Newtonsoft.Json.JsonConvert.DeserializeObject&lt;int&gt;($"{number}");`</ph></target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>Build<ept id="p1">**</ept> menu, choose <bpt id="p2">**</bpt>Build Solution<ept id="p2">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>빌드<ept id="p1">**</ept> 메뉴에서 <bpt id="p2">**</bpt>솔루션 빌드<ept id="p2">**</ept>를 선택합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The solution should build without error.</source>
          <target state="translated">솔루션이 오류 없이 빌드됩니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Writing the test project</source>
          <target state="translated">테스트 프로젝트 작성</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In Solution Explorer, open the context menu for the <bpt id="p1">**</bpt>Solution<ept id="p1">**</ept> node and choose <bpt id="p2">**</bpt>Add<ept id="p2">**</ept>, <bpt id="p3">**</bpt>New Project<ept id="p3">**</ept>.</source>
          <target state="translated">솔루션 탐색기에서 <bpt id="p1">**</bpt>솔루션<ept id="p1">**</ept> 노드의 상황에 맞는 메뉴를 열고 <bpt id="p2">**</bpt>추가<ept id="p2">**</ept>, <bpt id="p3">**</bpt>새 프로젝트<ept id="p3">**</ept>를 차례로 선택합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>New Project<ept id="p1">**</ept> dialog, under <bpt id="p2">**</bpt>Visual C# / .NET Core<ept id="p2">**</ept>, choose <bpt id="p3">**</bpt>Unit Test Project (.NET Core)<ept id="p3">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>새 프로젝트<ept id="p1">**</ept> 대화 상자에서 <bpt id="p2">**</bpt>Visual C# / .NET Core<ept id="p2">**</ept>를 선택하고 <bpt id="p3">**</bpt>단위 테스트 프로젝트(.NET Core)<ept id="p3">**</ept>를 선택합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Name it "TestLibrary" and click OK.</source>
          <target state="translated">이름을 "TestLibrary"로 지정하고 [확인]을 클릭합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>TestLibrary<ept id="p1">**</ept> project, open the context menu for the <bpt id="p2">**</bpt>Dependencies<ept id="p2">**</ept> node and choose <bpt id="p3">**</bpt>Add Reference<ept id="p3">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>TestLibrary<ept id="p1">**</ept> 프로젝트에서 <bpt id="p2">**</bpt>종속성<ept id="p2">**</ept> 노드의 상황에 맞는 메뉴를 열고 <bpt id="p3">**</bpt>참조 추가<ept id="p3">**</ept>를 선택합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Projects<ept id="p1">**</ept>, then check the Library project and click OK.</source>
          <target state="translated"><bpt id="p1">**</bpt>프로젝트<ept id="p1">**</ept>를 클릭한 다음 라이브러리 프로젝트를 확인한 후 [확인]을 클릭합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This adds a reference to your library from the test project.</source>
          <target state="translated">이렇게 하면 테스트 프로젝트에 라이브러리에 대한 참조가 추가됩니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Rename the <ph id="ph1">`UnitTest1.cs`</ph> file to <ph id="ph2">`LibraryTests.cs`</ph> and accept the class rename.</source>
          <target state="translated"><ph id="ph1">`UnitTest1.cs`</ph> 파일의 이름을 <ph id="ph2">`LibraryTests.cs`</ph>로 바꾸고 클래스 이름 바꾸기를 허용합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Add <ph id="ph1">`using Library;`</ph> to the top of the file, and replace the <ph id="ph2">`TestMethod1`</ph> method with the following code:</source>
          <target state="translated">파일 맨 위에 <ph id="ph1">`using Library;`</ph>를 추가하고 <ph id="ph2">`TestMethod1`</ph> 메서드를 다음 코드로 바꿉니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>You should now be able to build the solution.</source>
          <target state="translated">이제 솔루션을 빌드할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>Test<ept id="p1">**</ept> menu, choose <bpt id="p2">**</bpt>Windows<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Test Explorer<ept id="p3">**</ept> in order to get the test explorer window into your workspace.</source>
          <target state="translated">작업 영역에 테스트 탐색기 창을 가져오도록 <bpt id="p1">**</bpt>테스트<ept id="p1">**</ept> 메뉴에서 <bpt id="p2">**</bpt>Windows<ept id="p2">**</ept>, <bpt id="p3">**</bpt>테스트 탐색기<ept id="p3">**</ept>를 선택합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>After a few seconds, the <ph id="ph1">`ThingGetsObjectValFromNumber`</ph> test should appear in the test explorer.</source>
          <target state="translated">몇 초 후에 <ph id="ph1">`ThingGetsObjectValFromNumber`</ph> 테스트가 테스트 탐색기에 표시됩니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Choose <bpt id="p1">**</bpt>Run All<ept id="p1">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>모두 실행<ept id="p1">**</ept>을 선택합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The test should pass.</source>
          <target state="translated">테스트를 전달해야 합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Writing the console app</source>
          <target state="translated">콘솔 앱 작성</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>In Solution Explorer, open the context menu for the solution, and add a new <bpt id="p1">**</bpt>Console App (.NET Core)<ept id="p1">**</ept> project.</source>
          <target state="translated">솔루션 탐색기에서 솔루션의 상황에 맞는 메뉴를 열고 새 <bpt id="p1">**</bpt>콘솔 앱(.NET Core)<ept id="p1">**</ept> 프로젝트를 추가합니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Name it "App", and set the location to <ph id="ph1">`Golden\src`</ph>.</source>
          <target state="translated">이름을 "App"으로 지정하고 위치를 <ph id="ph1">`Golden\src`</ph>로 설정합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>App<ept id="p1">**</ept> project, open the context menu for the <bpt id="p2">**</bpt>Dependencies<ept id="p2">**</ept> node and choose <bpt id="p3">**</bpt>Add<ept id="p3">**</ept>,  <bpt id="p4">**</bpt>Reference<ept id="p4">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>App<ept id="p1">**</ept> 프로젝트에서 <bpt id="p2">**</bpt>종속성<ept id="p2">**</ept> 노드의 상황에 맞는 메뉴를 열고 <bpt id="p3">**</bpt>추가<ept id="p3">**</ept>, <bpt id="p4">**</bpt>참조<ept id="p4">**</ept>를 선택합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Reference Manager<ept id="p1">**</ept> dialog, check <bpt id="p2">**</bpt>Library<ept id="p2">**</ept> under the <bpt id="p3">**</bpt>Projects<ept id="p3">**</ept>, <bpt id="p4">**</bpt>Solution<ept id="p4">**</ept> node, and then click <bpt id="p5">**</bpt>OK<ept id="p5">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>참조 관리자<ept id="p1">**</ept> 대화 상자에서 <bpt id="p3">**</bpt>프로젝트<ept id="p3">**</ept> 아래에 있는 <bpt id="p2">**</bpt>라이브러리<ept id="p2">**</ept>, <bpt id="p4">**</bpt>솔루션<ept id="p4">**</ept> 노드를 선택한 후 <bpt id="p5">**</bpt>확인<ept id="p5">**</ept>을 클릭합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Open the context menu for the <bpt id="p1">**</bpt>App<ept id="p1">**</ept> node and choose <bpt id="p2">**</bpt>Set as StartUp Project<ept id="p2">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>앱<ept id="p1">**</ept> 노드의 상황에 맞는 메뉴를 열고 <bpt id="p2">**</bpt>시작 프로젝트로 설정<ept id="p2">**</ept>을 선택합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This ensures that hitting F5 or CTRL+F5 will start the console app.</source>
          <target state="translated">F5 또는 CTRL + F5 키를 눌러 콘솔 앱이 시작됩니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Open the <ph id="ph1">`Program.cs`</ph> file, add a <ph id="ph2">`using Library;`</ph> directive to the top of the file, and then add <ph id="ph3">`Console.WriteLine($"The answer is {new Thing().Get(42)}");`</ph> to the <ph id="ph4">`Main`</ph> method.</source>
          <target state="translated"><ph id="ph1">`Program.cs`</ph> 파일을 열고 <ph id="ph2">`using Library;`</ph> 지시문을 파일의 상단에 추가한 다음 <ph id="ph3">`Console.WriteLine($"The answer is {new Thing().Get(42)}");`</ph>을 <ph id="ph4">`Main`</ph> 메서드에 추가합니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Set a breakpoint after the line that you just added.</source>
          <target state="translated">방금 추가한 줄 뒤에 중단점을 설정합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Press F5 to run the application..</source>
          <target state="translated">F5 키를 눌러 응용 프로그램을 실행합니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The application should build without error, and should hit the breakpoint.</source>
          <target state="translated">응용 프로그램이 오류 없이 빌드되고 중단점에 도달합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>You should also be able to check that the application output "The answer is 42.".</source>
          <target state="translated">또한 응용 프로그램 출력이 "The answer is 42."인지 확인할 수 있습니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>