<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-6a73dd2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">274402bbd254e97d88771675daf07995983914aa</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\docker\visual-studio-tools-for-docker.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p1</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">08a250983ad0941bcb350d807a68c4def0ffc1aa</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b515b1f8079f4667ed317ca6b7a7ee6778a43bfa</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Visual Studio Tools for Docker</source>
          <target state="translated">Docker용 Visual Studio Tools</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Using Visual Studio Tools for Docker</source>
          <target state="translated">Docker용 Visual Studio Tools 사용</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core, Docker, ASP.NET Core, Visual Studio 2015</source>
          <target state="translated">.NET, .NET Core, Docker, ASP.NET Core, Visual Studio 2015</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Visual Studio Tools for Docker</source>
          <target state="translated">Docker용 Visual Studio Tools</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Developing and debugging your application in a Docker container can be a ceremony of tasks to get setup with various tools.</source>
          <target state="translated">Docker 컨테이너에서 응용 프로그램을 개발 및 디버깅하는 것은 다양한 도구를 사용하여 설정하는 일련의 절차입니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Visual Studio Tools for Docker<ept id="p1">](https://visualstudiogallery.msdn.microsoft.com/0f5b2caa-ea00-41c8-b8a2-058c7da0b3e4)</ept> helps you get past the hurdles and find the bugs using F5 to debug your application directly in a locally hosted Docker Container.</source>
          <target state="translated"><bpt id="p1">[</bpt>Docker용 Visual Studio Tools<ept id="p1">](https://visualstudiogallery.msdn.microsoft.com/0f5b2caa-ea00-41c8-b8a2-058c7da0b3e4)</ept>를 사용하면 장애를 통과하여 F5 키로 버그를 찾고 로컬에서 호스트된 Docker 컨테이너에서 직접 응용 프로그램을 디버그할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The current version targets Linux Docker containers, with Windows Containers coming soon.</source>
          <target state="translated">현재 버전은 Linux Docker 컨테이너를 대상으로 하며 Windows 컨테이너도 곧 제공됩니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
          <target state="translated">필수 구성 요소</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Microsoft Visual Studio 2015 Update 3<ept id="p1">](https://www.visualstudio.com/downloads/download-visual-studio-vs)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Microsoft Visual Studio 2015 업데이트 3<ept id="p1">](https://www.visualstudio.com/downloads/download-visual-studio-vs)</ept></target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>.NET Core 1.0.1 - VS 2015 Tooling Preview 2<ept id="p1">](https://go.microsoft.com/fwlink/?LinkID=827546)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>.NET Core 1.0.1 - VS 2015 Tooling Preview 2<ept id="p1">](https://go.microsoft.com/fwlink/?LinkID=827546)</ept></target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Docker For Windows<ept id="p1">](https://www.docker.com/products/docker#/windows)</ept> to run your Docker containers locally</source>
          <target state="translated">Docker 컨테이너를 로컬로 실행하기 위한 <bpt id="p1">[</bpt>Windows용 Docker<ept id="p1">](https://www.docker.com/products/docker#/windows)</ept></target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Installation and setup</source>
          <target state="translated">설치 및 설정</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Download and install the <bpt id="p1">[</bpt>Visual Studio Tools for Docker<ept id="p1">](https://aka.ms/DockerToolsForVS)</ept> from the <bpt id="p2">[</bpt>Visual Studio Gallery<ept id="p2">](http://visualstudiogallery.msdn.microsoft.com/)</ept> or you can search for it in <bpt id="p3">**</bpt>Extensions and Updates<ept id="p3">**</ept> within Visual Studio.</source>
          <target state="translated"><bpt id="p2">[</bpt>Visual Studio 갤러리<ept id="p2">](http://visualstudiogallery.msdn.microsoft.com/)</ept>에서 <bpt id="p1">[</bpt>Docker용 Visual Studio Tools<ept id="p1">](https://aka.ms/DockerToolsForVS)</ept>를 다운로드 및 설치할 수도 있고, Visual Studio 내 <bpt id="p3">**</bpt>확장 및 업데이트<ept id="p3">**</ept>에서 검색할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>A required configuration is to setup <bpt id="p1">**</bpt><bpt id="p2">[</bpt>Shared Drives<ept id="p2">](https://docs.docker.com/docker-for-windows/#/shared-drives)</ept><ept id="p1">**</ept> in Docker for Windows.</source>
          <target state="translated">필요한 구성은 Windows용 Docker에서 <bpt id="p1">**</bpt><bpt id="p2">[</bpt>공유 드라이브<ept id="p2">](https://docs.docker.com/docker-for-windows/#/shared-drives)</ept><ept id="p1">**</ept>를 설정하는 것입니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The setting is required for the volume mapping and debugging support.</source>
          <target state="translated">이 설정은 볼륨 매핑 및 디버깅 지원을 위해 필요합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Right click the Docker icon in the System Tray, click Settings and select Shared Drives.</source>
          <target state="translated">시스템 트레이에서 Docker 아이콘을 마우스 오른쪽 단추로 클릭하고 설정을 클릭한 다음 공유 드라이브를 선택합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Shared Drives</source>
          <target state="translated">공유 드라이브</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Create an ASP.NET Web Application and add Docker Support</source>
          <target state="translated">ASP.NET 웹 응용 프로그램을 만들고 Docker 지원 추가</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Using Visual Studio, create a new ASP.NET Core Web Application.</source>
          <target state="translated">Visual Studio를 사용하여 새로운 ASP.NET Core 웹 응용 프로그램을 만듭니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>When the application is loaded, either select <bpt id="p1">**</bpt>Add Docker Support<ept id="p1">**</ept> from the <bpt id="p2">**</bpt>Project Menu<ept id="p2">**</ept> or right click the project from the Solution Explorer and select <bpt id="p3">**</bpt>Add<ept id="p3">**</ept><ph id="ph1"> &gt; </ph><bpt id="p4">**</bpt>Docker Support<ept id="p4">**</ept>.</source>
          <target state="translated">응용 프로그램이 로드되면 <bpt id="p2">**</bpt>프로젝트 메뉴<ept id="p2">**</ept>에서 <bpt id="p1">**</bpt>Docker 지원 추가<ept id="p1">**</ept>를 선택하거나, 솔루션 탐색기에서 프로젝트를 마우스 오른쪽 단추로 클릭하고 <bpt id="p3">**</bpt>추가<ept id="p3">**</ept><ph id="ph1"> &gt; </ph><bpt id="p4">**</bpt>Docker 지원<ept id="p4">**</ept>을 선택합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Project Menu</source>
          <target state="translated">프로젝트 메뉴</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Project Add Docker Support</source>
          <target state="translated">프로젝트 Docker 지원 추가</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Project Context Menu</source>
          <target state="translated">프로젝트 상황에 맞는 메뉴</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Right Click Add Docker Support</source>
          <target state="translated">Docker 지원 추가를 마우스 오른쪽 단추로 클릭</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The following files are added to the project.</source>
          <target state="translated">다음 파일이 프로젝트에 추가됩니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Dockerfile<ept id="p1">**</ept>: the Docker file for ASP.NET Core applications is based on the <bpt id="p2">[</bpt>microsoft/aspnetcore<ept id="p2">](https://hub.docker.com/r/microsoft/aspnetcore)</ept> image.</source>
          <target state="translated"><bpt id="p1">**</bpt>Dockerfile<ept id="p1">**</ept>: ASP.NET Core 응용 프로그램용 Docker 파일은 <bpt id="p2">[</bpt>microsoft/aspnetcore<ept id="p2">](https://hub.docker.com/r/microsoft/aspnetcore)</ept> 이미지를 기반으로 합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This image includes the ASP.NET Core NuGet packages, which have been pre-jitted improving startup performance.</source>
          <target state="translated">이 이미지는 시작 성능을 개선하도록 prejit된 ASP.NET Core NuGet 패키지를 포함합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>When building .NET Core Console Applications, the Dockerfile FROM will reference the most recent <bpt id="p1">[</bpt>microsoft/dotnet<ept id="p1">](https://hub.docker.com/r/microsoft/dotnet)</ept> image.</source>
          <target state="translated">.NET Core 콘솔 응용 프로그램을 빌드할 때 Dockerfile FROM은 가장 최근의 <bpt id="p1">[</bpt>microsoft/dotnet<ept id="p1">](https://hub.docker.com/r/microsoft/dotnet)</ept> 이미지를 참조합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>docker-compose.yml<ept id="p1">**</ept>: base Docker Compose file used to define the collection of images to be built and run with docker-compose build/run.</source>
          <target state="translated"><bpt id="p1">**</bpt>docker-compose.yml<ept id="p1">**</ept>: 빌드되어 docker-compose build/run으로 실행할 이미지 컬렉션을 정의하는 데 사용되는 기본 Docker Compose 파일입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>docker-compose.dev.debug.yml<ept id="p1">**</ept>: additional docker-compose file with for iterative changes when your configuration is set to debug.</source>
          <target state="translated"><bpt id="p1">**</bpt>docker compose.dev.debug.yml<ept id="p1">**</ept>: 디버그를 위해 구성을 설정할 때 반복되는 변경 사항에 사용할 추가 docker-compose 파일.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Visual Studio will call -f docker-compose.yml -f docker-compose.dev.debug.yml to merge these together.</source>
          <target state="translated">Visual Studio는 -f docker-compose.yml -f docker-compose.dev.debug.yml을 호출하여 이들을 병합합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This compose file is used by Visual Studio development tools.</source>
          <target state="translated">Visual Studio 개발 도구에서 이 compose 파일을 사용합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>docker-compose.dev.release.yml<ept id="p1">**</ept>: additional Docker Compose file to debug your release definition.</source>
          <target state="translated"><bpt id="p1">**</bpt>docker compose.dev.release.yml<ept id="p1">**</ept>: 릴리스 정의를 디버그하기 위한 추가 Docker Compose 파일입니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>It will volume mount the debugger so it doesn't change the contents of the production image.</source>
          <target state="translated">프로덕션 이미지의 내용을 변경하지 않도록 디버거를 볼륨 탑재합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The docker-compose.yml file contains the name of the image that is created when project is run.</source>
          <target state="translated">docker-compose.yml 파일 프로젝트를 실행할 때 생성되는 이미지의 이름을 포함합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>In this example, <ph id="ph1">`image: user/hellodockertools${TAG}`</ph> generates the image <ph id="ph2">`user/hellodockertools:dev`</ph> when the application is run in <bpt id="p1">**</bpt>Debug<ept id="p1">**</ept> mode and <ph id="ph3">`user/hellodockertools:latest`</ph> in <bpt id="p2">**</bpt>Release<ept id="p2">**</ept> mode respectively.</source>
          <target state="translated">이 예제에서 <ph id="ph1">`image: user/hellodockertools${TAG}`</ph>는 응용 프로그램이 <bpt id="p1">**</bpt>디버그<ept id="p1">**</ept> 모드에서 실행될 때 이미지 <ph id="ph2">`user/hellodockertools:dev`</ph>, <bpt id="p2">**</bpt>릴리스<ept id="p2">**</ept> 모드에서 실행될 때 <ph id="ph3">`user/hellodockertools:latest`</ph>를 각각 생성합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You will want to change the <ph id="ph1">`user`</ph> to your Docker Hub username if you plan to push the image to the registry.</source>
          <target state="translated">레지스트리에 이미지를 푸시하려는 경우 <ph id="ph1">`user`</ph>를 Docker 허브 사용자 이름으로 변경할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`spboyer/hellodockertools`</ph>, or change to your private registry url <ph id="ph2">`privateregistry.domain.com/`</ph> depending on your configuration.</source>
          <target state="translated">예를 들어 구성에 따라 <ph id="ph1">`spboyer/hellodockertools`</ph>로 변경하거나, 개인 레지스트리 url <ph id="ph2">`privateregistry.domain.com/`</ph>으로 변경합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Debugging</source>
          <target state="translated">디버깅</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>Docker<ept id="p1">**</ept> from the debug dropdown in the toolbar and use F5 to start debugging the application.</source>
          <target state="translated">도구 모음의 디버그 드롭다운에서 <bpt id="p1">**</bpt>Docker<ept id="p1">**</ept>를 선택하고 F5 키를 눌러 응용 프로그램에서 디버깅을 시작합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The microsoft/aspnetcore image is acquired (if not already in your cache)</source>
          <target state="translated">microsoft/aspnetcore 이미지를 가져옵니다(캐시에 아직 없는 경우).</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>ASPNETCORE_ENVIRONMENT is set to Development within the container</source>
          <target state="translated">ASPNETCORE_ENVIRONMENT가 컨테이너 내에서 Development로 설정됩니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>PORT 80 is EXPOSED and mapped to a dynamically assigned port for localhost.</source>
          <target state="translated">포트 80이 노출되고 동적으로 할당된 localhost용 포트에 매핑됩니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The port is determined by the docker host and can be queried with docker ps.</source>
          <target state="translated">포트는 docker 호스트에 의해 결정되며 docker ps를 사용하여 쿼리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Your application is copied to the container</source>
          <target state="translated">응용 프로그램이 컨테이너에 복사됩니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Default browser is launched with the debugger attached to the container, using the dynamically assigned port.</source>
          <target state="translated">컨테이너에 연결된 디버거와 함께 기본 브라우저가 시작되며 동적으로 할당된 포트를 사용합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The resulting Docker image built is the <ph id="ph1">`dev`</ph> image of your application with the <ph id="ph2">`microsoft/aspnetcore`</ph> images as the base image.</source>
          <target state="translated">빌드된 결과 Docker 이미지는 응용 프로그램의 <ph id="ph1">`dev`</ph> 이미지이며 <ph id="ph2">`microsoft/aspnetcore`</ph> 이미지가 기본 이미지입니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Note: the dev image is empty of your app contents as Debug confgurations use volume mounting to provide the iterative experience.</source>
          <target state="translated">참고: Debug 구성은 반복 환경을 제공하기 위해 탑재되는 볼륨을 사용하므로 dev 이미지에는 앱 콘텐츠가 없습니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>To push an image, use the Release configuration.</source>
          <target state="translated">이미지를 푸시하려면 Release 구성을 사용합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The application is running using the container which you can see by running the <ph id="ph1">`docker ps`</ph> command.</source>
          <target state="translated">응용 프로그램은 <ph id="ph1">`docker ps`</ph> 명령을 실행하여 볼 수 있는 컨테이너를 사용하여 실행됩니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Edit and Continue</source>
          <target state="translated">편집하며 계속하기</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Changes to static files and/or razor template files (.cshtml) are automatically updated without the need of a compilation step.</source>
          <target state="translated">정적 파일 및/또는 razor 템플릿 파일(.cshtml)에 대한 변경 사항은 자동으로 업데이트되므로 컴파일 단계가 필요하지 않습니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Make the change, save and tap refresh in the browser to view the update.</source>
          <target state="translated">내용을 변경 및 저장하고 브라우저에서 새로 고침을 눌러 업데이트를 확인합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Modifications to code files require compiling and a restart of Kestrel within the container.</source>
          <target state="translated">코드 파일을 수정하려면 컨테이너 내에서 컴파일하고 Kestrel을 다시 시작해야 합니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>After making the change, use CTRL + F5 to perform the process and start the application within the container.</source>
          <target state="translated">변경 후 컨테이너 내에서 CTRL + F5를 사용하여 프로세스를 수행하고 응용 프로그램을 시작합니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The Docker container is not rebuilt or stopped; using <ph id="ph1">`docker ps`</ph> in the command line you can see that the original container is still running as of 10 minutes ago.</source>
          <target state="translated">Docker 컨테이너는 다시 빌드되거나 중지되지 않습니다. 명령줄에서 <ph id="ph1">`docker ps`</ph>를 사용하면 원래 컨테이너가 10분 전을 기준으로 여전히 실행되고 있음을 알 수 있습니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Publishing Docker images</source>
          <target state="translated">Docker 이미지 게시</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Once you have completed the develop and debug cycle of your application, the Visual Studio Tools for Docker will help you create the production image of your application.</source>
          <target state="translated">응용 프로그램의 개발 및 디버그 주기를 완료하면 Docker용 Visual Studio Tools를 이용해 응용 프로그램의 프로덕션 이미지를 만들 수 있습니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Change the debug dropdown to <bpt id="p1">**</bpt>Release<ept id="p1">**</ept> and build the application.</source>
          <target state="translated">디버그 드롭다운을 <bpt id="p1">**</bpt>릴리스<ept id="p1">**</ept>로 변경하고 응용 프로그램을 빌드합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The tooling will produce the image with the <ph id="ph1">`:latest`</ph> tag which you can push to your private registry or Docker Hub.</source>
          <target state="translated">도구에서 <ph id="ph1">`:latest`</ph> 태그의 이미지를 생성하면 이를 개인 레지스트리 또는 Docker Hub에 푸시할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Using the <ph id="ph1">`docker images`</ph> you can see the list of images.</source>
          <target state="translated"><ph id="ph1">`docker images`</ph>를 사용하여 이미지의 목록을 볼 수 있습니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>There may be an expectation for the production or release image to be smaller in size by comparison to the <bpt id="p1">**</bpt>dev<ept id="p1">**</ept> image, however through the use of the volume mapping; the debugger and application were actually being run from your local machine and not within the container.</source>
          <target state="translated"><bpt id="p1">**</bpt>dev<ept id="p1">**</ept> 이미지에 비해 프로덕션 또는 릴리스 이미지의 크기가 더 작을 수 있다고 예상할 수도 있지만, 볼륨 매핑을 사용하여 디버거와 응용 프로그램은 실제로 컨테이너 내에서가 아니라 로컬 컴퓨터에서 실행되었습니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>latest<ept id="p1">**</ept> image has packaged the entire application code needed to run the application on a host machine, therefore the delta is the size of your application code.</source>
          <target state="translated"><bpt id="p1">**</bpt>최신<ept id="p1">**</ept> 이미지는 호스트 컴퓨터에서 응용 프로그램을 실행하기 위해 필요한 전체 응용 프로그램 코드를 패키지했으므로, 델타가 응용 프로그램 코드의 크기입니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>