<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-6a73dd2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">29a0ca2d58bb6ae037a97c84a53ce388da2dbeae</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\base-types\creating-new.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p2</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">46dda2401dcf1cab4b517ffd8abccf95488a0a68</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e6a2166e248abe21ce57893ed1983ee85e7f629b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Creating new strings</source>
          <target state="translated">새 문자열 만들기</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Creating new strings</source>
          <target state="translated">새 문자열 만들기</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Creating new strings</source>
          <target state="translated">새 문자열 만들기</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>.NET  allows strings to be created using simple assignment, and also overloads a class constructor to support string creation using a number of different parameters.</source>
          <target state="translated">.NET에서는 단순한 할당을 사용하여 문자열을 만들 수 있으며 다양한 매개 변수를 사용한 문자열 생성을 지원하기 위해 클래스 생성자도 오버로드됩니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>.NET also provides several methods in the <bpt id="p1">[</bpt>System.String<ept id="p1">](xref:System.String)</ept> class that create new string objects by combining several strings, arrays of strings, or objects.</source>
          <target state="translated">또한 .NET은 여러 문자열, 문자열 배열 또는 개체를 결합하여 새 문자열 개체를 만드는 여러 메서드를 <bpt id="p1">[</bpt>System.String<ept id="p1">](xref:System.String)</ept> 클래스에서 제공합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Creating Strings Using Assignment</source>
          <target state="translated">할당을 사용하여 문자열 만들기</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The easiest way to create a new <bpt id="p1">[</bpt>String<ept id="p1">](xref:System.String)</ept> object is simply to assign a string literal to a <bpt id="p2">[</bpt>String<ept id="p2">](xref:System.String)</ept> object.</source>
          <target state="translated">새 <bpt id="p1">[</bpt>String<ept id="p1">](xref:System.String)</ept> 개체를 만드는 가장 쉬운 방법은 <bpt id="p2">[</bpt>String<ept id="p2">](xref:System.String)</ept> 개체에 문자열 리터럴을 할당하는 것입니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Creating Strings Using a Class Constructor</source>
          <target state="translated">클래스 생성자를 사용하여 문자열 만들기</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You can use overloads of the <bpt id="p1">[</bpt>String<ept id="p1">](xref:System.String)</ept> class constructor to create strings from character arrays.</source>
          <target state="translated"><bpt id="p1">[</bpt>String<ept id="p1">](xref:System.String)</ept> 클래스 생성자의 오버로드를 사용하여 문자 배열에서 문자열을 만들 수 있습니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You can also create a new string by duplicating a particular character a specified number of times.</source>
          <target state="translated">특정 문자를 지정된 횟수만큼 복제하여 새 문자열을 만들 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Methods that Return Strings</source>
          <target state="translated">문자열을 반환하는 메서드</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The following table lists several useful methods that return new string objects.</source>
          <target state="translated">다음 표에서는 새 문자열 개체를 반환하는 여러 유용한 메서드를 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Method name</source>
          <target state="translated">메서드 이름</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Use</source>
          <target state="translated">기능</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>String.Format<ept id="p1">](xref:System.String.Format(System.String,System.Object))</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>String.Format<ept id="p1">](xref:System.String.Format(System.String,System.Object))</ept></target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Builds a formatted string from a set of input objects.</source>
          <target state="translated">입력 개체 집합에서 형식이 지정된 문자열을 작성합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>String.Concat<ept id="p1">](xref:System.String.Concat(System.String,System.String))</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>String.Concat<ept id="p1">](xref:System.String.Concat(System.String,System.String))</ept></target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Builds strings from two or more strings.</source>
          <target state="translated">둘 이상의 문자열에서 문자열을 작성합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>String.Join<ept id="p1">](xref:System.String.Join(System.String,System.String[]))</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>String.Join<ept id="p1">](xref:System.String.Join(System.String,System.String[]))</ept></target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Builds a new string by combining an array of strings.</source>
          <target state="translated">문자열 배열을 결합하여 새 문자열을 작성합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>String.Insert<ept id="p1">](xref:System.String.Insert(System.Int32,System.String))</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>String.Insert<ept id="p1">](xref:System.String.Insert(System.Int32,System.String))</ept></target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Builds a new string by inserting a string into the specified index of an existing string.</source>
          <target state="translated">기존 문자열의 지정된 인덱스에 문자열을 삽입하여 새 문자열을 작성합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>String.CopyTo<ept id="p1">](xref:System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32))</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>String.CopyTo<ept id="p1">](xref:System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32))</ept></target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Copies specified characters in a string into a specified position in an array of characters.</source>
          <target state="translated">문자열의 지정된 문자를 문자 배열의 지정된 위치에 복사합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Format</source>
          <target state="translated">서식</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">`String.Format`</ph> method to create formatted strings and concatenate strings representing multiple objects.</source>
          <target state="translated"><ph id="ph1">`String.Format`</ph> 메서드를 사용하여 형식이 지정된 문자열을 만들고 여러 개체를 나타내는 문자열을 연결할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This method automatically converts any passed object into a string.</source>
          <target state="translated">이 메서드는 전달된 모든 개체를 문자열로 자동으로 변환합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For example, if your application must display an <bpt id="p1">[</bpt>Int32<ept id="p1">](xref:System.Int32)</ept> value and a <bpt id="p2">[</bpt>DateTime<ept id="p2">](xref:System.DateTime)</ept> value to the user, you can easily construct a string to represent these values using the <ph id="ph1">`Format`</ph> method.</source>
          <target state="translated">예를 들어 응용 프로그램이 <bpt id="p1">[</bpt>Int32<ept id="p1">](xref:System.Int32)</ept> 값과 <bpt id="p2">[</bpt>DateTime<ept id="p2">](xref:System.DateTime)</ept> 값을 사용자에게 표시해야 하는 경우 <ph id="ph1">`Format`</ph> 메서드를 사용하여 이러한 값을 나타내는 문자열을 쉽게 생성할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For information about formatting conventions used with this method, see the section on <bpt id="p1">[</bpt>composite formatting<ept id="p1">](composite-format.md)</ept>.</source>
          <target state="translated">이 메서드에서 사용되는 형식 지정 규칙에 대한 자세한 내용은 <bpt id="p1">[</bpt>복합 형식 지정<ept id="p1">](composite-format.md)</ept> 섹션을 참조하세요.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The following example uses the <ph id="ph1">`Format`</ph> method to create a string that uses an integer variable.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">`Format`</ph> 메서드를 통해 정수 변수를 사용하는 문자열을 만듭니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>In this example, <bpt id="p1">[</bpt>DateTime.Now<ept id="p1">](xref:System.DateTime.Now)</ept> displays the current date and time in a manner specified by the culture associated with the current thread.</source>
          <target state="translated">이 예제에서 <bpt id="p1">[</bpt>DateTime.Now<ept id="p1">](xref:System.DateTime.Now)</ept>는 현재 스레드와 연결된 문화권에서 지정된 방식으로 현재 날짜와 시간을 표시합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Concat</source>
          <target state="translated">Concat</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`String.Concat`</ph> method can be used to easily create a new string object from two or more existing objects.</source>
          <target state="translated"><ph id="ph1">`String.Concat`</ph> 메서드를 사용하여 둘 이상의 기존 개체에서 새 문자열 개체를 쉽게 만들 수 있습니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>It provides a language-independent way to concatenate strings.</source>
          <target state="translated">문자열을 연결하는 언어 독립적인 방법을 제공합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This method accepts any class that derives from <ph id="ph1">`System.Object`</ph>.</source>
          <target state="translated">이 메서드는 <ph id="ph1">`System.Object`</ph>에서 파생된 모든 클래스를 허용합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The following example creates a string from two existing string objects and a separating character.</source>
          <target state="translated">다음 예제에서는 두 개의 기존 문자열 개체와 구분 문자에서 문자열을 만듭니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Join</source>
          <target state="translated">Join</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`String.Join`</ph> method creates a new string from an array of strings and a separator string.</source>
          <target state="translated"><ph id="ph1">`String.Join`</ph> 메서드는 문자열 배열과 구분 기호 문자열에서 새 문자열을 만듭니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This method is useful if you want to concatenate multiple strings together, making a list perhaps separated by a comma.</source>
          <target state="translated">이 메서드는 여러 문자열을 함께 연결하여 쉼표 등으로 구분된 목록을 만들려는 경우에 유용합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The following example uses a space to bind a string array.</source>
          <target state="translated">다음 예제에서는 공백을 사용하여 문자열 배열을 바인딩합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Insert</source>
          <target state="translated">Insert</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`String.Insert`</ph> method creates a new string by inserting a string into a specified position in another string.</source>
          <target state="translated"><ph id="ph1">`String.Insert`</ph> 메서드는 다른 문자열의 지정된 위치에 문자열을 삽입하여 새 문자열을 만듭니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>This method uses a zero-based index.</source>
          <target state="translated">이 메서드는 0부터 시작하는 인덱스를 사용합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The following example inserts a string into the fifth index position of <ph id="ph1">`MyString`</ph> and creates a new string with this value.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">`MyString`</ph>의 다섯 번째 인덱스 위치에 문자열을 삽입하고 이 값으로 새 문자열을 만듭니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>CopyTo</source>
          <target state="translated">CopyTo</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`String.CopyTo`</ph> method copies portions of a string into an array of characters.</source>
          <target state="translated"><ph id="ph1">`String.CopyTo`</ph> 메서드는 문자열의 일부를 문자 배열에 복사합니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>You can specify both the beginning index of the string and the number of characters to be copied.</source>
          <target state="translated">기존 문자열의 시작 인덱스와 복사할 문자 수를 둘 다 지정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This method takes the source index, an array of characters, the destination index, and the number of characters to copy.</source>
          <target state="translated">이 메서드는 소스 인덱스, 문자 배열, 대상 인덱스 및 복사할 문자 수를 사용합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>All indexes are zero-based.</source>
          <target state="translated">모든 인덱스는 0부터 시작합니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The following example uses the <ph id="ph1">`CopyTo`</ph> method to copy the characters of the word "Hello" from a string object to the first index position of an array of characters.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">`CopyTo`</ph> 메서드를 사용하여 문자열 개체에서 "Hello" 단어의 문자를 문자 배열의 첫 번째 인덱스 위치에 복사합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">참고 항목</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Basic string operations<ept id="p1">](basic-string-operations.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>기본적인 문자열 작업<ept id="p1">](basic-string-operations.md)</ept></target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Composite formatting<ept id="p1">](composite-format.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>복합 서식 지정<ept id="p1">](composite-format.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>