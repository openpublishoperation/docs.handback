<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-6a73dd2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">98a01aaebb209fe80b3c1270295399e5914cbd09</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\collections\threadsafe\how-to-use-foreach-to-remove.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p2</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d3755e57a8a6dcf2dae1b9ea0dff6404ea6d6466</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b312cae5fc3ac876159eab30bf354ad3597d7b92</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Use ForEach to Remove Items in a BlockingCollection</source>
          <target state="translated">방법: ForEach를 사용하여 BlockingCollection 항목 제거</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Use ForEach to Remove Items in a BlockingCollection</source>
          <target state="translated">방법: ForEach를 사용하여 BlockingCollection 항목 제거</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>How to: Use ForEach to Remove Items in a BlockingCollection</source>
          <target state="translated">방법: ForEach를 사용하여 BlockingCollection 항목 제거</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In addition to taking items from a <bpt id="p1">[</bpt>BlockingCollection<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph><ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Concurrent.BlockingCollection-1)</ept> by using the <ph id="ph3">`Take`</ph> and <ph id="ph4">`TryTake`</ph> methods, you can also use a <ph id="ph5">`foreach`</ph> loop to remove items until adding is completed and the collection is empty.</source>
          <target state="translated"><ph id="ph3">`Take`</ph> 및 <ph id="ph4">`TryTake`</ph> 메서드를 사용하여 <bpt id="p1">[</bpt>BlockingCollection<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph><ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Concurrent.BlockingCollection-1)</ept>에서 항목을 가져오는 것 외에도 <ph id="ph5">`foreach`</ph> 루프를 사용하여 추가 작업이 완료되고 컬렉션이 빌 때까지 항목을 제거할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This is called a mutating enumeration or consuming enumeration because, unlike a typical <ph id="ph1">`foreach`</ph> loop, this enumerator modifies the source collection by removing items.</source>
          <target state="translated">일반적인 <ph id="ph1">`foreach`</ph> 루프와 달리 이 열거자는 항목을 제거하여 소스 컬렉션을 수정하기 때문에 이 방식을 열거형 변경 또는 열거형 소비라고 합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">예제</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The following example shows how to remove all the items in a <ph id="ph1">`BlockingCollection&lt;T&gt;`</ph> by using a <ph id="ph2">`foreach`</ph> loop.</source>
          <target state="translated">다음 예제에서는 <ph id="ph2">`foreach`</ph> 루프를 사용하여 <ph id="ph1">`BlockingCollection&lt;T&gt;`</ph>의 항목을 모두 제거하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This example uses a <ph id="ph1">`foreach`</ph> loop with the <ph id="ph2">`BlockingCollection&lt;T&gt;.GetConsumingEnumerable`</ph> method in the consuming thread, which causes each item to be removed from the collection as it is enumerated.</source>
          <target state="translated">이 예제에서는 소비 스레드의 <ph id="ph2">`BlockingCollection&lt;T&gt;.GetConsumingEnumerable`</ph> 메서드에 <ph id="ph1">`foreach`</ph> 루프를 사용하는데, 이 루프는 컬렉션을 열거하면서 해당 컬렉션의 각 항목을 제거합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`BlockingCollection&lt;T&gt;`</ph> limits the maximum number of items that are in the collection at any time.</source>
          <target state="translated"><ph id="ph1">`BlockingCollection&lt;T&gt;`</ph>는 항상 컬렉션에 있는 항목의 최대 수를 제한합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Enumerating the collection in this way blocks the consumer thread if no items are available or if the collection is empty.</source>
          <target state="translated">이런 방식으로 컬렉션을 열거하는 경우 제공되는 항목이 없거나 컬렉션이 비었을 때 소비자 스레드를 차단합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In this example blocking is not a concern because the producer thread adds items faster than they can be consumed.</source>
          <target state="translated">이 예제에서는 항목이 소비되는 것보다 더 빠르게 공급자 스레드에서 항목을 추가하기 때문에 차단이 발생하지 않습니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>There is no guarantee that the items are enumerated in the same order in which they are added by the producer threads.</source>
          <target state="translated">공급자 스레드를 통한 항목 추가 순서와 항목 열거 순서는 같지 않을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>To enumerate the collection without modifying it, just use <ph id="ph1">`foreach`</ph> without the <ph id="ph2">`GetConsumingEnumerable`</ph> method.</source>
          <target state="translated">컬렉션을 수정하지 않고 열거하려면 <ph id="ph2">`GetConsumingEnumerable`</ph> 메서드 없이 <ph id="ph1">`foreach`</ph>만 사용하면 됩니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>However, it is important to understand that this kind of enumeration represents a snapshot of the collection at a precise point in time.</source>
          <target state="translated">그러나 이와 같이 열거한 결과는 특정 시점의 컬렉션을 나타내는 스냅숏에 불과하다는 사실을 이해할 필요가 있습니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If other threads are adding or removing items concurrently while you are executing the loop, then the loop might not represent the actual state of the collection.</source>
          <target state="translated">루프를 실행하는 동시에 다른 스레드를 통해 항목을 추가하거나 제거하고 있는 경우에는 루프에서 컬렉션의 실제 상태를 나타내지 않을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">참고 항목</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.Collections.Concurrent<ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Concurrent)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>System.Collections.Concurrent<ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Concurrent)</ept></target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>BlockingCollection Overview<ept id="p1">](blockingcollection-overview.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>BlockingCollection 개요<ept id="p1">](blockingcollection-overview.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>