<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-6a73dd2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">905c3706717a03f468e3dd5717c049e83f211e67</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\managed-code.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p2</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f4ae393f454b9e1aea64e24ebe4950b5c232fb9e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7d70f8d580eff264d1307cbb73344beb270af6ca</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>What is “managed code”?</source>
          <target state="translated">"관리 코드"란?</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>What is “managed code”?</source>
          <target state="translated">"관리 코드"란?</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>What is “managed code”?</source>
          <target state="translated">"관리 코드"란?</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>When working with .NET Framework, you will often encounter the term “managed code”.</source>
          <target state="translated">.NET Framework로 작업하는 경우 "관리 코드"란 용어를 자주 발견하게 됩니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This document will explain what this term means and additional information around it.</source>
          <target state="translated">이 문서에서는 이 용어의 의미 및 관련된 추가 정보를 설명합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>To put it very simply, managed code is just that: code whose execution is managed by a runtime.</source>
          <target state="translated">간단히 말해서, 관리 코드란 런타임에서 실행이 관리되는 코드입니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In this case, the runtime in question is called the <bpt id="p1">**</bpt>Common Language Runtime<ept id="p1">**</ept> or CLR, regardless of the implementation (<bpt id="p2">[</bpt>Mono<ept id="p2">](http://www.mono-project.com/)</ept> or .NET Framework or .NET Core).</source>
          <target state="translated">이 경우 해당 런타임을 구현(<bpt id="p2">[</bpt>Mono<ept id="p2">](http://www.mono-project.com/)</ept>, .NET Framework 또는 .NET Core)에 관계없이 <bpt id="p1">**</bpt>공용 언어 런타임<ept id="p1">**</ept> 또는 CLR이라고 합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>CLR is in charge of taking the managed code, compiling it into machine code and then executing it.</source>
          <target state="translated">CLR은 관리 코드를 가져와서 기계어 코드로 컴파일한 다음 실행합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>On top of that, runtime provides several important services such as automatic memory management, security boundaries, type safety etc.</source>
          <target state="translated">이 외에도 런타임에서는 자동 메모리 관리, 보안 경계, 형식 안전성 등 몇 가지 중요한 서비스를 제공합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Contrast this to the way you would run a C/C++ program, also called “unmanaged code”.</source>
          <target state="translated">"비관리 코드"라고도 하는 C/C++ 프로그램 실행 방법과 이를 대조해 보세요.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In the unmanaged world, the programmer is in charge of pretty much everything.</source>
          <target state="translated">관리되지 않는 환경에서는 프로그래머가 거의 모든 작업을 수행합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The actual program is, essentially, a binary that the operating system (OS) loads into memory and starts.</source>
          <target state="translated">실제 프로그램은 기본적으로 OS(운영 체제)에서 메모리에 로드하고 시작하는 이진 파일입니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Everything else, from memory management to security considerations are a burden of the programmer.</source>
          <target state="translated">메모리 관리에서 보안 고려 사항에 이르기까지 다른 모든 작업은 프로그래머의 몫입니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Managed code is written in one of the high-level languages that can be run on top of the .NET platform, such as C#, Visual Basic, F# and others.</source>
          <target state="translated">관리 코드는 C#, Visual Basic, F# 등 .NET 플랫폼에서 실행할 수 있는 고급 언어 중 하나로 작성됩니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>When you compile code written in those languages with their respective compiler, you don’t get machine code.</source>
          <target state="translated">이러한 언어로 작성된 코드를 해당 컴파일러로 컴파일할 때는 기계어 코드가 생성되지 않습니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You get <bpt id="p1">**</bpt>Intermediate Language<ept id="p1">**</ept> code which the runtime then compiles and executes.</source>
          <target state="translated"><bpt id="p1">**</bpt>중간 언어<ept id="p1">**</ept> 코드가 생성되며, 런타임에서 이 코드를 컴파일하고 실행합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>C++ is the one exception to this rule, as it can also produce native, unmanaged binaries that run on Windows.</source>
          <target state="translated">단, C++는 이 규칙의 유일한 예외이며 Windows에서 실행되는 관리되지 않는 네이티브 이진 파일을 생성할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Intermediate Language &amp; execution</source>
          <target state="translated">중간 언어 및 실행</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>What is “Intermediate Language” (or IL for short)?</source>
          <target state="translated">"중간 언어"(또는 줄여서 IL)란?</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>It is a product of compilation of code written in high-level .NET languages.</source>
          <target state="translated">고급 .NET 언어로 작성된 코드를 컴파일하여 생성된 결과입니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Once you compile your code written in one of these languages, you will get a binary that is made out of IL.</source>
          <target state="translated">이러한 언어 중 하나로 작성된 코드를 컴파일하면 IL로 작성된 이진 파일을 얻게 됩니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>It is important to note that the IL is independent from any specific language that runs on top of the runtime; there is even a separate specification for it that you can read if you’re so inclined.</source>
          <target state="translated">IL은 런타임에서 실행되는 모든 특정 언어에 독립적입니다. 필요한 경우 읽을 수 있는 별도의 사양도 있습니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Once you produce IL from your high-level code, you will most likely want to run it.</source>
          <target state="translated">고급 코드에서 IL을 생성한 후에는 대부분 실행하려고 할 것입니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This is where the CLR takes over and starts the process of <bpt id="p1">**</bpt>Just-In-Time<ept id="p1">**</ept> compiling, or <bpt id="p2">**</bpt>JIT-ing<ept id="p2">**</ept> your code from IL to machine code that can actually be run on a CPU.</source>
          <target state="translated">이때 CLR이 사용되며 IL 상태의 코드를 <bpt id="p1">**</bpt>Just-In-Time<ept id="p1">**</ept> 컴파일 또는 <bpt id="p2">**</bpt>JIT 처리<ept id="p2">**</ept>하여 실제로 CPU에서 실행할 수 있는 기계어 코드로 변환하는 프로세스를 시작합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In this way, the CLR knows exactly what your code is doing and can effectivelly <bpt id="p1">_</bpt>manage<ept id="p1">_</ept> it.</source>
          <target state="translated">이러한 방식에서는 CLR이 코드에서 수행하는 작업을 정확히 알고 효과적으로 <bpt id="p1">_</bpt>관리<ept id="p1">_</ept>할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Intermediate Language is sometimes also called Common Intermediate Language (CIL) or Microsoft Intermediate Language (MSIL).</source>
          <target state="translated">중간 언어를 CIL(공용 중간 언어) 또는 MSIL(Microsoft 중간 언어)이라고도 합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Unmanaged code interoperability</source>
          <target state="translated">비관리 코드와의 상호 운용성</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Of course, the CLR allows passing the boundaries between managed and unmanaged world, and there is a lot of code that does that, even in the <bpt id="p1">[</bpt>Base Class Libraries<ept id="p1">](framework-libraries.md)</ept>.</source>
          <target state="translated">물론, CLR에서 관리되는 환경과 관리되지 않는 환경 사이의 경계를 건널 수 있으며 <bpt id="p1">[</bpt>기본 클래스 라이브러리<ept id="p1">](framework-libraries.md)</ept>에도 이 작업을 수행하는 많은 코드가 있습니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This is called <bpt id="p1">**</bpt>interoperability<ept id="p1">**</ept> or just <bpt id="p2">**</bpt>interop<ept id="p2">**</ept> for short.</source>
          <target state="translated">이를 <bpt id="p1">**</bpt>상호 운용성<ept id="p1">**</ept> 또는 줄여서 <bpt id="p2">**</bpt>interop<ept id="p2">**</ept>라고 합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>These provisions would allow you to, for example, wrap up an unmanaged library and call into it.</source>
          <target state="translated">예를 들어 이러한 프로비전을 통해 관리되지 않는 라이브러리를 래핑하고 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>However, it is important to note that once you do this, when the code passes the boundaries of the runtime, the actual management of the execution is again in the hand of unmanged code, and thus falls under the same restrictions.</source>
          <target state="translated">그러나 이렇게 할 경우 코드가 런타임의 경계를 건널 때 실제 실행 관리가 다시 비관리 코드로 넘어가므로 동일한 제한이 적용됩니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Similar to this, C# is one language that allows you to use unmanaged constructs such as pointers directly in code by utilizing what is known as <bpt id="p1">**</bpt>unsafe context<ept id="p1">**</ept> which designates a piece of code for which the execution is not managed by the CLR.</source>
          <target state="translated">이와 마찬가지로, C#은 CLR에서 실행이 관리되지 않는 코드 조각을 지정하는 <bpt id="p1">**</bpt>안전하지 않은 컨텍스트<ept id="p1">**</ept>를 활용하여 코드에서 직접 포인터 등의 관리되지 않는 구문을 사용할 수 있도록 하는 언어 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>More resources</source>
          <target state="translated">추가 리소스</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>.NET Framework Conceptual Overview<ept id="p1">](https://msdn.microsoft.com/library/zw4w595w.aspx)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>.NET Framework 개념 개요<ept id="p1">](https://msdn.microsoft.com/library/zw4w595w.aspx)</ept></target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Unsafe Code and Pointers<ept id="p1">](https://msdn.microsoft.com/library/t2yzs44b.aspx)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>안전하지 않은 코드 및 포인터<ept id="p1">](https://msdn.microsoft.com/library/t2yzs44b.aspx)</ept></target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Interoperability (C# Programming guide)<ept id="p1">](https://msdn.microsoft.com/library/ms173184.aspx)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>상호 운용성(C# 프로그래밍 가이드)<ept id="p1">](https://msdn.microsoft.com/library/ms173184.aspx)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>