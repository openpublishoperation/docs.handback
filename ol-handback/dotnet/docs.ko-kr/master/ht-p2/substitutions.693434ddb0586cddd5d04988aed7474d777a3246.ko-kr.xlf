<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-6a73dd2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4b2b547b6edd67590ad75851b8b287e55dc7d70c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\base-types\substitutions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p2</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6e17f09a28978cda51c5e2d38c47aa074460d2cd</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f690bd4515148693745660c75e17cdd76ccc490e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Substitutions in regular expressions</source>
          <target state="translated">정규식의 대체</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Substitutions in regular expressions</source>
          <target state="translated">정규식의 대체</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Substitutions in regular expressions</source>
          <target state="translated">정규식의 대체</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Substitutions are language elements that are recognized only within replacement patterns.</source>
          <target state="translated">대체는 바꾸기 패턴에서만 인식되는 언어 요소입니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>They use a regular expression pattern to define all or part of the text that is to replace matched text in the input string.</source>
          <target state="translated">정규식 패턴을 사용하여 입력 문자열에서 일치하는 텍스트를 바꿀 텍스트의 전부 또는 일부를 정의합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The replacement pattern can consist of one or more substitutions along with literal characters.</source>
          <target state="translated">바꾸기 패턴은 리터럴 문자와 하나 이상의 대체로 구성될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Replacement patterns are provided to overloads of the <bpt id="p1">[</bpt>Regex.Replace<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions))</ept> method that have a <bpt id="p2">*</bpt>replacement<ept id="p2">*</ept> parameter and to the <bpt id="p3">[</bpt>Match.Result<ept id="p3">](xref:System.Text.RegularExpressions.Match.Result(System.String))</ept> method.</source>
          <target state="translated"><bpt id="p2">*</bpt>replacement<ept id="p2">*</ept> 매개 변수가 포함된 <bpt id="p1">[</bpt>Regex.Replace<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions))</ept> 메서드의 오버로드와 <bpt id="p3">[</bpt>Match.Result<ept id="p3">](xref:System.Text.RegularExpressions.Match.Result(System.String))</ept> 메서드에 대해 바꾸기 패턴이 제공됩니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The methods replace the matched pattern with the pattern that is defined by the <bpt id="p1">*</bpt>replacement<ept id="p1">*</ept> parameter.</source>
          <target state="translated">해당 메서드는 일치하는 패턴을 <bpt id="p1">*</bpt>replacement<ept id="p1">*</ept> 매개 변수에 정의된 패턴으로 바꿉니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>.NET defines the substitution elements listed in the following table.</source>
          <target state="translated">.NET은 다음 테이블에 나와 있는 대체 요소를 정의합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Substitution</source>
          <target state="translated">대체</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">설명</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt><ph id="ph1">$</ph><ept id="p1">**</ept><bpt id="p2">_</bpt>number<ept id="p2">_</ept></source>
          <target state="translated"><bpt id="p1">**</bpt><ph id="ph1">$</ph><ept id="p1">**</ept><bpt id="p2">_</bpt>number<ept id="p2">_</ept></target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Includes the last substring matched by the capturing group that is identified by <bpt id="p1">*</bpt>number<ept id="p1">*</ept>, where <bpt id="p2">*</bpt>number<ept id="p2">*</ept> is a decimal value, in the replacement string.</source>
          <target state="translated"><bpt id="p1">*</bpt>number<ept id="p1">*</ept>(여기서 <bpt id="p2">*</bpt>number<ept id="p2">*</ept>는 10진수 값)로 식별되는 캡처 그룹과 일치하는 마지막 부분 문자열을 바꾸기 문자열에 포함합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Substituting a numbered group<ept id="p1">](#substituting-a-numbered-group)</ept>.</source>
          <target state="translated">자세한 내용은 <bpt id="p1">[</bpt>번호가 매겨진 그룹 대체<ept id="p1">](#substituting-a-numbered-group)</ept>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>${<ept id="p1">**</ept><bpt id="p2">_</bpt>name<ept id="p2">_</ept><bpt id="p3">**</bpt>}<ept id="p3">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>${<ept id="p1">**</ept><bpt id="p2">_</bpt>name<ept id="p2">_</ept><bpt id="p3">**</bpt>}<ept id="p3">**</ept></target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Includes the last substring matched by the named group that is designated by <bpt id="p1">**</bpt>(?&lt;<ept id="p1">**</ept><bpt id="p2">_</bpt>name<ept id="p2">_</ept><bpt id="p3">**</bpt>&gt;)<ept id="p3">**</ept> in the replacement string.</source>
          <target state="translated"><bpt id="p1">**</bpt>(?&lt;<ept id="p1">**</ept><bpt id="p2">_</bpt>name<ept id="p2">_</ept><bpt id="p3">**</bpt>&gt;)<ept id="p3">**</ept>에서 지정한 명명된 그룹과 일치하는 마지막 부분 문자열을 바꾸기 문자열에 포함합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Substituting a named group<ept id="p1">](#substituting-a-named-group)</ept>.</source>
          <target state="translated">자세한 내용은 <bpt id="p1">[</bpt>명명된 그룹 대체<ept id="p1">](#substituting-a-named-group)</ept>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Includes a single "$" literal in the replacement string.</source>
          <target state="translated">대체 문자열에 한 개의 "$" 리터럴을 포함합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Substituting a "$" character<ept id="p1">](#substituting-a--character)</ept>.</source>
          <target state="translated">자세한 내용은 <bpt id="p1">[</bpt>"$" 문자 대체<ept id="p1">](#substituting-a--character)</ept>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Includes a copy of the entire match in the replacement string.</source>
          <target state="translated">대체 문자열에 일치하는 전체 문자열의 복사본을 포함합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Substituting the entire match<ept id="p1">](#substituting-the-entire-match)</ept>.</source>
          <target state="translated">자세한 내용은 <bpt id="p1">[</bpt>일치하는 전체 문자열 대체<ept id="p1">](#substituting-the-entire-match)</ept>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Includes all the text of the input string before the match in the replacement string.</source>
          <target state="translated">대체 문자열에서 일치하는 문자열 앞에 입력 문자열의 모든 텍스트를 포함합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Substituting the text before the match<ept id="p1">](#substituting-the-text-before-the-match)</ept>.</source>
          <target state="translated">자세한 내용은 <bpt id="p1">[</bpt>일치하는 문자열 앞에 있는 텍스트 대체<ept id="p1">](#substituting-the-text-before-the-match)</ept>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>$'<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>$'<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Includes all the text of the input string after the match in the replacement string.</source>
          <target state="translated">대체 문자열에서 일치하는 문자열 뒤에 입력 문자열의 모든 텍스트를 포함합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Substituting the text after the match<ept id="p1">](#substituting-the-text-after-the-match)</ept>.</source>
          <target state="translated">자세한 내용은 <bpt id="p1">[</bpt>일치하는 문자열 뒤에 있는 텍스트 대체<ept id="p1">](#substituting-the-text-after-the-match)</ept>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Includes the last group captured in the replacement string.</source>
          <target state="translated">대체 문자열에 캡처된 마지막 그룹을 포함합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Substituting the last captured group<ept id="p1">](#substituting-the-last-captured-group)</ept>.</source>
          <target state="translated">자세한 내용은 <bpt id="p1">[</bpt>캡처된 마지막 그룹 대체<ept id="p1">](#substituting-the-last-captured-group)</ept>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>$_<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>$_<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Includes the entire input string in the replacement string.</source>
          <target state="translated">대체 문자열에 전체 입력 문자열을 포함합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Substituting the entire input string<ept id="p1">](#substituting-the-entire-input-string)</ept>.</source>
          <target state="translated">자세한 내용은 <bpt id="p1">[</bpt>전체 입력 문자열 대체<ept id="p1">](#substituting-the-entire-input-string)</ept>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Substitution elements and replacement patterns</source>
          <target state="translated">대체 요소 및 바꾸기 패턴</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Substitutions are the only special constructs recognized in a replacement pattern.</source>
          <target state="translated">대체는 바꾸기 패턴에서 인식되는 유일한 특수 구문입니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>None of the other regular expression language elements, including character escapes and the period (<bpt id="p1">**</bpt>.<ept id="p1">**</ept>), which matches any character, are supported.</source>
          <target state="translated">임의의 문자를 찾는 문자 이스케이프 및 마침표(<bpt id="p1">**</bpt>.<ept id="p1">**</ept>)를 비롯한 다른 정규식 언어 요소는 지원되지 않습니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Similarly, substitution language elements are recognized only in replacement patterns and are never valid in regular expression patterns.</source>
          <target state="translated">마찬가지로, 대체 언어 요소는 바꾸기 패턴에서만 인식되고 정규식 패턴에는 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The only character that can appear either in a regular expression pattern or in a substitution is the <bpt id="p1">**</bpt><ph id="ph1">$</ph><ept id="p1">**</ept> character, although it has a different meaning in each context.</source>
          <target state="translated">컨텍스트마다 다른 의미를 가지지만 정규식 패턴이나 대체에 표시할 수 있는 유일한 문자는 <bpt id="p1">**</bpt><ph id="ph1">$</ph><ept id="p1">**</ept> 문자입니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>In a regular expression pattern, <bpt id="p1">**</bpt><ph id="ph1">$</ph><ept id="p1">**</ept> is an anchor that matches the end of the string.</source>
          <target state="translated">정규식 패턴에서 <bpt id="p1">**</bpt><ph id="ph1">$</ph><ept id="p1">**</ept>는 문자열의 끝 부분을 찾는 앵커입니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>In a replacement pattern, <bpt id="p1">**</bpt><ph id="ph1">$</ph><ept id="p1">**</ept> indicates the beginning of a substitution.</source>
          <target state="translated">바꾸기 패턴에서 <bpt id="p1">**</bpt><ph id="ph1">$</ph><ept id="p1">**</ept>는 대체 시작을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>For functionality similar to a replacement pattern within a regular expression, use a backreference.</source>
          <target state="translated">정규식의 바꾸기 패턴과 유사한 기능으로, 역참조를 사용합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For more information about backreferences, see <bpt id="p1">[</bpt>Backreference constructs<ept id="p1">](backreference.md)</ept>.</source>
          <target state="translated">역참조에 대한 자세한 내용은 <bpt id="p1">[</bpt>역참조 구문<ept id="p1">](backreference.md)</ept>을 참조하세요.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Substituting a numbered group</source>
          <target state="translated">번호가 매겨진 그룹 대체</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt><ph id="ph1">$</ph><ept id="p1">**</ept><bpt id="p2">_</bpt>number<ept id="p2">_</ept> language element includes the last substring matched by the number capturing group in the replacement string, where <bpt id="p3">*</bpt>number<ept id="p3">*</ept> is the index of the capturing group.</source>
          <target state="translated"><bpt id="p1">**</bpt><ph id="ph1">$</ph><ept id="p1">**</ept><bpt id="p2">_</bpt>number<ept id="p2">_</ept> 언어 요소는 바꾸기 문자열에서 number 캡처 그룹과 일치하는 마지막 부분 문자열을 포함합니다. 여기서 <bpt id="p3">*</bpt>number<ept id="p3">*</ept>는 캡처 그룹의 인덱스입니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>For example, the replacement pattern <ph id="ph1">`$1`</ph> indicates that the matched substring is to be replaced by the first captured group.</source>
          <target state="translated">예를 들어 바꾸기 패턴 <ph id="ph1">`$1`</ph>은 일치하는 부분 문자열이 처음 캡처한 그룹으로 대체됨을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>For more information about numbered capturing groups, see <bpt id="p1">[</bpt>Grouping constructs in regular expressions<ept id="p1">](grouping.md)</ept>.</source>
          <target state="translated">번호가 매겨진 캡처 그룹에 대한 자세한 내용은<bpt id="p1">[</bpt>정규식의 그룹화 구문<ept id="p1">](grouping.md)</ept>을 참조하세요.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>All digits that follow <bpt id="p1">**</bpt><ph id="ph1">$</ph><ept id="p1">**</ept> are interpreted as belonging to the number group.</source>
          <target state="translated"><bpt id="p1">**</bpt><ph id="ph1">$</ph><ept id="p1">**</ept> 다음에 나오는 모든 숫자는 number 그룹에 속한 것으로 해석됩니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>If this is not your intent, you can substitute a named group instead.</source>
          <target state="translated">이런 것을 의도한 것이 아니라면, 그 대신 명명된 그룹을 대체할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For example, you can use the replacement string <bpt id="p1">**</bpt>${1}1<ept id="p1">**</ept> instead of <bpt id="p2">**</bpt>$11<ept id="p2">**</ept> to define the replacement string as the value of the first captured group along with the number "1".</source>
          <target state="translated">예를 들어, <bpt id="p2">**</bpt>$11<ept id="p2">**</ept> 대신 <bpt id="p1">**</bpt>${1}1<ept id="p1">**</ept> 대체 문자열을 사용하여 대체 문자열을 숫자 "1"과 함께 처음으로 캡처된 그룹의 값으로 정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Substituting a named group<ept id="p1">](#substituting-a-named-group)</ept>.</source>
          <target state="translated">자세한 내용은 <bpt id="p1">[</bpt>명명된 그룹 대체<ept id="p1">](#substituting-a-named-group)</ept>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Capturing groups that are not explicitly assigned names using the <bpt id="p1">**</bpt>(?&lt;<ept id="p1">**</ept>_name-<bpt id="p2">**</bpt>&gt;)<ept id="p2">**</ept> syntax are numbered from left to right starting at one.</source>
          <target state="translated"><bpt id="p1">**</bpt>(?&lt;<ept id="p1">**</ept>_name-<bpt id="p2">**</bpt>&gt;)<ept id="p2">**</ept> 구문을 사용하여 명시적으로 이름을 할당하지 않은 그룹을 캡처할 때는 1부터 시작하여 왼쪽에서 오른쪽으로 번호를 매깁니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Named groups are also numbered from left to right, starting at one greater than the index of the last unnamed group.</source>
          <target state="translated">명명된 그룹도 명명되지 않은 마지막 그룹의 인덱스보다 큰 1부터 시작하여 왼쪽에서 오른쪽으로 번호가 매겨집니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>For example, in the regular expression <ph id="ph1">`(\w)(?&lt;digit&gt;\d)`</ph>, the index of the <ph id="ph2">`digit`</ph> named group is 2.</source>
          <target state="translated">예를 들어 정규식 <ph id="ph1">`(\w)(?&lt;digit&gt;\d)`</ph>에서 <ph id="ph2">`digit`</ph> 명명된 그룹의 인덱스는 2입니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">*</bpt>number<ept id="p1">*</ept> does not specify a valid capturing group defined in the regular expression pattern, <bpt id="p2">**</bpt><ph id="ph1">$</ph><ept id="p2">**</ept><bpt id="p3">_</bpt>number<ept id="p3">_</ept> is interpreted as a literal character sequence that is used to replace each match.</source>
          <target state="translated"><bpt id="p1">*</bpt>number<ept id="p1">*</ept>가 정규식 패턴에 정의된 올바른 캡처 그룹을 지정하지 않으면 <bpt id="p2">**</bpt><ph id="ph1">$</ph><ept id="p2">**</ept><bpt id="p3">_</bpt>number<ept id="p3">_</ept>는 일치하는 문자열을 바꾸는 데 사용되는 리터럴 문자 시퀀스로 해석됩니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The following example uses the <bpt id="p1">**</bpt><ph id="ph1">$</ph><ept id="p1">**</ept><bpt id="p2">_</bpt>number<ept id="p2">_</ept> substitution to strip the currency symbol from a decimal value.</source>
          <target state="translated">다음 예제에서는 <bpt id="p1">**</bpt><ph id="ph1">$</ph><ept id="p1">**</ept><bpt id="p2">_</bpt>number<ept id="p2">_</ept> 대체를 사용하여 10진수 값에서 통화 기호를 삭제합니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>It removes currency symbols found at the beginning or end of a monetary value, and recognizes the two most common decimal separators ("." and ",").</source>
          <target state="translated">통화 값의 시작 부분이나 끝 부분에 있는 통화 기호를 제거하고 두 개의 가장 일반적인 소수 구분 기호("." 및 ",")를 인식합니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The regular expression pattern <ph id="ph1">`\p{Sc}*(\s?\d+[.,]?\d*)\p{Sc}*`</ph> is defined as shown in the following table.</source>
          <target state="translated">정규식 패턴 <ph id="ph1">`\p{Sc}*(\s?\d+[.,]?\d*)\p{Sc}*`</ph>는 다음 테이블과 같이 정의됩니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">패턴</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">설명</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Match zero or more currency symbol characters.</source>
          <target state="translated">통화 기호 문자를 0개 이상 찾습니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Match zero or one white-space characters.</source>
          <target state="translated">0회 이상 나오는 공백 문자를 찾습니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Match one or more decimal digits.</source>
          <target state="translated">하나 이상의 10진수 숫자가 일치하는지 확인합니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Match zero or one period or comma.</source>
          <target state="translated">0-1개의 마침표 또는 쉼표를 찾습니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Match zero or more decimal digits.</source>
          <target state="translated">0번 이상 나오는 10진수를 찾습니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Match a white space followed by one or more decimal digits, followed by zero or one period or comma, followed by zero or more decimal digits.</source>
          <target state="translated">공백, 하나 이상의 10진수 숫자, 0-1개의 마침표나 쉼표, 0-1개의 10진수 숫자가 차례로 표시된 문자열을 찾습니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>This is the first capturing group.</source>
          <target state="translated">이 그룹은 첫 번째 캡처링 그룹입니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Because the replacement pattern is <ph id="ph1">`$1`</ph>, the call to the <bpt id="p1">[</bpt>Regex.Replace<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions))</ept> method replaces the entire matched substring with this captured group.</source>
          <target state="translated">바꾸기 패턴이 <ph id="ph1">`$1`</ph>이기 때문에 <bpt id="p1">[</bpt>Regex.Replace<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions))</ept> 메서드를 호출하면 일치하는 전체 부분 문자열이 이 캡처된 그룹으로 바뀝니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Substituting a named group</source>
          <target state="translated">명명된 그룹 대체</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>${<ept id="p1">**</ept><bpt id="p2">_</bpt>name<ept id="p2">_</ept><bpt id="p3">**</bpt>}<ept id="p3">**</ept> language element substitutes the last substring matched by the <bpt id="p4">*</bpt>name<ept id="p4">*</ept> capturing group, where <bpt id="p5">*</bpt>name<ept id="p5">*</ept> is the name of a capturing group defined by the <bpt id="p6">**</bpt>(?&lt;<ept id="p6">**</ept><bpt id="p7">_</bpt>name<ept id="p7">_</ept><bpt id="p8">**</bpt>&gt;)<ept id="p8">**</ept> language element.</source>
          <target state="translated"><bpt id="p1">**</bpt>${<ept id="p1">**</ept><bpt id="p2">_</bpt>name<ept id="p2">_</ept><bpt id="p3">**</bpt>}<ept id="p3">**</ept> 언어 요소는 <bpt id="p4">*</bpt>name<ept id="p4">*</ept> 캡처 그룹과 일치하는 마지막 부분 문자열을 대체합니다. 여기서 <bpt id="p5">*</bpt>name<ept id="p5">*</ept>은 <bpt id="p6">**</bpt>(?&lt;<ept id="p6">**</ept><bpt id="p7">_</bpt>name<ept id="p7">_</ept><bpt id="p8">**</bpt>&gt;)<ept id="p8">**</ept> 언어 요소가 정의한 캡처 그룹의 이름입니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>For more information about named capturing groups, see <bpt id="p1">[</bpt>Grouping constructs in regular expressions<ept id="p1">](grouping.md)</ept>.</source>
          <target state="translated">명명된 캡처 그룹에 대한 자세한 내용은 <bpt id="p1">[</bpt>정규식의 그룹화 구문<ept id="p1">](grouping.md)</ept>을 참조하세요.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">*</bpt>name<ept id="p1">*</ept> doesn't specify a valid named capturing group defined in the regular expression pattern but consists of digits, <bpt id="p2">**</bpt>${<ept id="p2">**</ept><bpt id="p3">_</bpt>name<ept id="p3">_</ept><bpt id="p4">**</bpt>}<ept id="p4">**</ept> is interpreted as a numbered group.</source>
          <target state="translated"><bpt id="p1">*</bpt>name<ept id="p1">*</ept>이 정규식 패턴에 정의된 명명된 유효한 캡처 그룹을 지정하지 않지만 숫자로 구성된 경우, <bpt id="p2">**</bpt>${<ept id="p2">**</ept><bpt id="p3">_</bpt>name<ept id="p3">_</ept><bpt id="p4">**</bpt>}<ept id="p4">**</ept>은 번호가 매겨진 그룹으로 해석됩니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">*</bpt>name<ept id="p1">*</ept> specifies neither a valid named capturing group nor a valid numbered capturing group defined in the regular expression pattern, <bpt id="p2">**</bpt>${<ept id="p2">**</ept><bpt id="p3">_</bpt>name<ept id="p3">_</ept><bpt id="p4">**</bpt>}<ept id="p4">**</ept> is interpreted as a literal character sequence that is used to replace each match.</source>
          <target state="translated"><bpt id="p1">*</bpt>name<ept id="p1">*</ept>이 명명된 유효한 캡처 그룹도, 정규식 패턴에 정의되어 번호가 매겨진 유효한 캡처 그룹도 지정하지 않는 경우, <bpt id="p2">**</bpt>${<ept id="p2">**</ept><bpt id="p3">_</bpt>name<ept id="p3">_</ept><bpt id="p4">**</bpt>}<ept id="p4">**</ept>은 각 일치 항목을 바꾸는 데 사용되는 리터럴 문자 시퀀스로 해석됩니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The following example uses the <bpt id="p1">**</bpt>${<ept id="p1">**</ept><bpt id="p2">_</bpt>name<ept id="p2">_</ept><bpt id="p3">**</bpt>}<ept id="p3">**</ept> substitution to strip the currency symbol from a decimal value.</source>
          <target state="translated">다음 예제에서는 <bpt id="p1">**</bpt>${<ept id="p1">**</ept><bpt id="p2">_</bpt>name<ept id="p2">_</ept><bpt id="p3">**</bpt>}<ept id="p3">**</ept> 대체를 사용하여 10진수 값에서 통화 기호를 삭제합니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>It removes currency symbols found at the beginning or end of a monetary value, and recognizes the two most common decimal separators ("." and ",").</source>
          <target state="translated">통화 값의 시작 부분이나 끝 부분에 있는 통화 기호를 제거하고 두 개의 가장 일반적인 소수 구분 기호("." 및 ",")를 인식합니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The regular expression pattern <ph id="ph1">`\p{Sc}*(?&lt;amount&gt;\s?\d[.,]?\d*)\p{Sc}*`</ph> is defined as shown in the following table.</source>
          <target state="translated">정규식 패턴 <ph id="ph1">`\p{Sc}*(?&lt;amount&gt;\s?\d[.,]?\d*)\p{Sc}*`</ph>는 다음 테이블과 같이 정의됩니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">패턴</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">설명</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Match zero or more currency symbol characters.</source>
          <target state="translated">통화 기호 문자를 0개 이상 찾습니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Match zero or one white-space characters.</source>
          <target state="translated">0회 이상 나오는 공백 문자를 찾습니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Match one or more decimal digits.</source>
          <target state="translated">하나 이상의 10진수 숫자가 일치하는지 확인합니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Match zero or one period or comma.</source>
          <target state="translated">0-1개의 마침표 또는 쉼표를 찾습니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Match zero or more decimal digits.</source>
          <target state="translated">0번 이상 나오는 10진수를 찾습니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Match a white space, followed by one or more decimal digits, followed by zero or one period or comma, followed by zero or more decimal digits.</source>
          <target state="translated">공백, 하나 이상의 10진수 숫자, 0-1개의 마침표나 쉼표, 0-1개의 10진수 숫자가 차례로 표시된 문자열을 찾습니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>This is the capturing group named amount.</source>
          <target state="translated">이는 캡처링 그룹이 명명한 양입니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Because the replacement pattern is <ph id="ph1">`${amount}`</ph>, the call to the <bpt id="p1">[</bpt>Regex.Replace<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions))</ept> method replaces the entire matched substring with this captured group.</source>
          <target state="translated">바꾸기 패턴이 <ph id="ph1">`${amount}`</ph>이기 때문에 <bpt id="p1">[</bpt>Regex.Replace<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions))</ept> 메서드를 호출하면 일치하는 전체 부분 문자열이 이 캡처된 그룹으로 바뀝니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Substituting a $ character</source>
          <target state="translated">$ 문자 대체</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt><ph id="ph1">$$</ph><ept id="p1">**</ept> substitution inserts a literal "$" character in the replaced string.</source>
          <target state="translated"><bpt id="p1">**</bpt><ph id="ph1">$$</ph><ept id="p1">**</ept> 대체는 바꾼 문자열에 리터럴 "$" 문자를 삽입합니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The following example uses the <bpt id="p1">[</bpt>NumberFormatInfo<ept id="p1">](xref:System.Globalization.NumberFormatInfo)</ept> object to determine the current culture's currency symbol and its placement in a currency string.</source>
          <target state="translated">다음 예제에서는 <bpt id="p1">[</bpt>NumberFormatInfo<ept id="p1">](xref:System.Globalization.NumberFormatInfo)</ept> 개체를 사용하여 통화 문자열에서 현재 문화권의 통화 기호 및 배치를 확인합니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>It then builds both a regular expression pattern and a replacement pattern dynamically.</source>
          <target state="translated">그런 다음 정규식 패턴과 바꾸기 패턴을 동적으로 작성합니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>If the example is run on a computer whose current culture is en-US, it generates the regular expression pattern <ph id="ph1">`\b(\d+)(\.(\d+))?`</ph> and the replacement pattern <ph id="ph2">`$$ $1$2`</ph>.</source>
          <target state="translated">현재 문화권이 en-US인 컴퓨터에서 예제가 실행될 경우, 정규식 패턴 <ph id="ph1">`\b(\d+)(\.(\d+))?`</ph> 및 바꾸기 패턴 <ph id="ph2">`$$ $1$2`</ph>를 생성합니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The replacement pattern replaces the matched text with a currency symbol and a space followed by the first and second captured groups.</source>
          <target state="translated">바꾸기 패턴은 일치하는 텍스트를 통화 기호와 공백, 첫 번째 및 두 번째 캡처된 그룹이 차례로 표시된 문자열로 바꿉니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The regular expression pattern <ph id="ph1">`\b(\d+)(\.(\d+))?`</ph> is defined as shown in the following table.</source>
          <target state="translated">정규식 패턴 <ph id="ph1">`\b(\d+)(\.(\d+))?`</ph>는 다음 테이블과 같이 정의됩니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">패턴</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">설명</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Start the match at the beginning of a word boundary.</source>
          <target state="translated">단어 경계 시작 부분에서 찾기를 시작합니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Match one or more decimal digits.</source>
          <target state="translated">하나 이상의 10진수 숫자가 일치하는지 확인합니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>This is the first capturing group.</source>
          <target state="translated">이 그룹은 첫 번째 캡처링 그룹입니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Match a period (the decimal separator).</source>
          <target state="translated">마침표(소수 구분 기호)를 찾습니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Match one or more decimal digits.</source>
          <target state="translated">하나 이상의 10진수 숫자가 일치하는지 확인합니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>This is the third capturing group.</source>
          <target state="translated">이 그룹은 세 번째 캡처링 그룹입니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Match zero or one occurrence of a period followed by one or more decimal digits.</source>
          <target state="translated">한 개 이상의 숫자가 뒤에 오는 마침표를 0개 또는 1개 찾습니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>This is the second capturing group.</source>
          <target state="translated">이 그룹은 두 번째 캡처링 그룹입니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Substituting the entire match</source>
          <target state="translated">일치하는 전체 문자열 대체</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt><ph id="ph1">$&amp;</ph><ept id="p1">**</ept> substitution includes the entire match in the replacement string.</source>
          <target state="translated"><bpt id="p1">**</bpt><ph id="ph1">$&amp;</ph><ept id="p1">**</ept> 대체는 바꾸기 문자열에 일치하는 전체 문자열을 포함합니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Often, it is used to add a substring to the beginning or end of the matched string.</source>
          <target state="translated">일치하는 문자열의 시작 부분이나 끝 부분에 부분 문자열을 추가하는 데 자주 사용됩니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">`($&amp;)`</ph> replacement pattern adds parentheses to the beginning and end of each match.</source>
          <target state="translated">예를 들어 <ph id="ph1">`($&amp;)`</ph> 바꾸기 패턴은 각 일치 항목의 시작과 끝에 괄호를 추가합니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>If there is no match, the <bpt id="p1">**</bpt><ph id="ph1">$&amp;</ph><ept id="p1">**</ept> substitution has no effect.</source>
          <target state="translated">일치하는 부분이 없으면 <bpt id="p1">**</bpt><ph id="ph1">$&amp;</ph><ept id="p1">**</ept> 대체가 아무 효과가 없습니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The following example uses the <bpt id="p1">**</bpt><ph id="ph1">$&amp;</ph><ept id="p1">**</ept> substitution to add quotation marks at the beginning and end of book titles stored in a string array.</source>
          <target state="translated">다음 예제에서는 <bpt id="p1">**</bpt><ph id="ph1">$&amp;</ph><ept id="p1">**</ept> 대체를 사용하여 문자열 배열에 저장된 책 제목의 시작 부분과 끝 부분에 따옴표를 추가합니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The regular expression pattern <ph id="ph1">`^(\w+\s?)+$`</ph> is defined as shown in the following table.</source>
          <target state="translated">정규식 패턴 <ph id="ph1">`^(\w+\s?)+$`</ph>는 다음 테이블과 같이 정의됩니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">패턴</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">설명</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Start the match at the beginning of the input string.</source>
          <target state="translated">입력 문자열의 시작 부분에서 일치 항목 찾기를 시작합니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Match the pattern of one or more word characters followed by zero or one white-space characters one or more times.</source>
          <target state="translated">하나 이상의 단어 문자 다음에 0개 또는 1개의 공백 문자가 한 번 이상 나타나는 패턴을 찾습니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Match the end of the input string.</source>
          <target state="translated">입력 문자열의 끝 부분을 찾습니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`"$&amp;"`</ph> replacement pattern adds a literal quotation mark to the beginning and end of each match.</source>
          <target state="translated"><ph id="ph1">`"$&amp;"`</ph> 바꾸기 패턴은 일치하는 문자열의 시작 부분과 끝 부분에 리터럴 따옴표를 추가합니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Substituting the text before the match</source>
          <target state="translated">일치하는 문자열 앞에 있는 텍스트 대체</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt><ph id="ph1">$</ph><ph id="ph2">`** substitution replaces the matched string with the entire input string before the match. That is, it duplicates the input string up to the match while removing the matched text. Any text that follows the matched text is unchanged in the result string. If there are multiple matches in an input string, the replacement text is derived from the original input string, rather than from the string in which text has been replaced by earlier matches. (The example provides an illustration.) If there is no match, the **$`</ph><ept id="p1">**</ept> substitution has no effect.</source>
          <target state="translated"><bpt id="p1">**</bpt><ph id="ph1">$</ph><ph id="ph2">`** substitution replaces the matched string with the entire input string before the match. That is, it duplicates the input string up to the match while removing the matched text. Any text that follows the matched text is unchanged in the result string. If there are multiple matches in an input string, the replacement text is derived from the original input string, rather than from the string in which text has been replaced by earlier matches. (The example provides an illustration.) If there is no match, the **$`</ph><ept id="p1">**</ept> 대체는 아무 효과가 없습니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The following example uses the regular expression pattern <ph id="ph1">`\d+`</ph> to match a sequence of one or more decimal digits in the input string.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">`\d+`</ph> 정규식 패턴을 사용하여 입력 문자열에서 하나 이상의 숫자가 연속적으로 표시된 부분을 찾습니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The replacement string <bpt id="p1">**</bpt><ph id="ph1">$`</ph><ept id="p1">**</ept> replaces these digits with the text that precedes the match.</source>
          <target state="translated">바꾸기 문자열 <bpt id="p1">**</bpt><ph id="ph1">$`</ph><ept id="p1">**</ept>는 이 숫자를 일치하는 문자열 앞의 텍스트로 바꿉니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>In this example, the input string <ph id="ph1">`"aa1bb2cc3dd4ee5"`</ph> contains five matches.</source>
          <target state="translated">이 예제에서는 입력 문자열 <ph id="ph1">`"aa1bb2cc3dd4ee5"`</ph>에 다섯 개의 일치 항목이 포함되어 있습니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The following table illustrates how the $` substitution causes the regular expression engine to replace each match in the input string.</source>
          <target state="translated">다음 테이블에서는 $` 대체를 사용할 경우 정규식 엔진이 입력 문자열에서 일치하는 부분을 어떻게 바꾸는지 보여줍니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Inserted text is shown in bold in the Result string column.</source>
          <target state="translated">삽입된 텍스트는 [결과] 문자열에서 굵게 표시됩니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Match</source>
          <target state="translated">일치</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Position</source>
          <target state="translated">위치</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>String before match</source>
          <target state="translated">일치하는 문자열 앞에 있는 문자열</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Result string</source>
          <target state="translated">결과 문자열</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>1</source>
          <target state="translated">1</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>2</source>
          <target state="translated">2</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>aa</source>
          <target state="translated">aa</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>aa<bpt id="p1">**</bpt>aa<ept id="p1">**</ept>bb2cc3dd4ee5</source>
          <target state="translated">aa<bpt id="p1">**</bpt>aa<ept id="p1">**</ept>bb2cc3dd4ee5</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>2</source>
          <target state="translated">2</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>5</source>
          <target state="translated">5</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>aa1bb</source>
          <target state="translated">aa1bb</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>aaaabb<bpt id="p1">**</bpt>aa1bb<ept id="p1">**</ept>cc3dd4ee5</source>
          <target state="translated">aaaabb<bpt id="p1">**</bpt>aa1bb<ept id="p1">**</ept>cc3dd4ee5</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>3</source>
          <target state="translated">3</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>8</source>
          <target state="translated">8</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>aa1bb2cc</source>
          <target state="translated">aa1bb2cc</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>aaaabbaa1bbcc<bpt id="p1">**</bpt>aa1bb2cc<ept id="p1">**</ept>dd4ee5</source>
          <target state="translated">aaaabbaa1bbcc<bpt id="p1">**</bpt>aa1bb2cc<ept id="p1">**</ept>dd4ee5</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>4</source>
          <target state="translated">4</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>11</source>
          <target state="translated">11</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>aa1bb2cc3dd</source>
          <target state="translated">aa1bb2cc3dd</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>aaaabbaa1bbccaa1bb2ccdd<bpt id="p1">**</bpt>aa1bb2cc3dd<ept id="p1">**</ept>ee5</source>
          <target state="translated">aaaabbaa1bbccaa1bb2ccdd<bpt id="p1">**</bpt>aa1bb2cc3dd<ept id="p1">**</ept>ee5</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>5</source>
          <target state="translated">5</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>14</source>
          <target state="translated">14</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>aa1bb2cc3dd4ee</source>
          <target state="translated">aa1bb2cc3dd4ee</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>aaaabbaa1bbccaa1bb2ccddaa1bb2cc3ddee <bpt id="p1">**</bpt>aa1bb2cc3dd4ee<ept id="p1">**</ept></source>
          <target state="translated">aaaabbaa1bbccaa1bb2ccddaa1bb2cc3ddee <bpt id="p1">**</bpt>aa1bb2cc3dd4ee<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Substituting the text after the match</source>
          <target state="translated">일치하는 문자열 뒤에 있는 텍스트 대체</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>$'<ept id="p1">**</ept> substitution replaces the matched string with the entire input string after the match.</source>
          <target state="translated"><bpt id="p1">**</bpt>$'<ept id="p1">**</ept> 대체는 일치하는 문자열을 일치하는 문자열 뒤의 전체 입력 문자열로 바꿉니다.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>That is, it duplicates the input string after the match while removing the matched text.</source>
          <target state="translated">즉, 일치하는 텍스트를 제거하는 동안 일치하는 문자열 뒤의 입력 문자열을 복제합니다.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Any text that precedes the matched text is unchanged in the result string.</source>
          <target state="translated">일치하는 텍스트 앞에 나오는 텍스트는 결과 문자열에서 변경되지 않습니다.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>If there is no match, the <bpt id="p1">**</bpt>$'<ept id="p1">**</ept> substitution has no effect.</source>
          <target state="translated">일치하는 부분이 없으면 <bpt id="p1">**</bpt>$'<ept id="p1">**</ept> 대체가 아무 효과가 없습니다.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>The following example uses the regular expression pattern <ph id="ph1">`\d+`</ph> to match a sequence of one or more decimal digits in the input string.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">`\d+`</ph> 정규식 패턴을 사용하여 입력 문자열에서 하나 이상의 숫자가 연속적으로 표시된 부분을 찾습니다.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>The replacement string <bpt id="p1">**</bpt>$'<ept id="p1">**</ept> replaces these digits with the text that follows the match.</source>
          <target state="translated">바꾸기 문자열 <bpt id="p1">**</bpt>$'<ept id="p1">**</ept>는 이 숫자를 일치하는 문자열 뒤의 텍스트로 바꿉니다.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>In this example, the input string <ph id="ph1">`"aa1bb2cc3dd4ee5"`</ph> contains five matches.</source>
          <target state="translated">이 예제에서는 입력 문자열 <ph id="ph1">`"aa1bb2cc3dd4ee5"`</ph>에 다섯 개의 일치 항목이 포함되어 있습니다.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>The following table illustrates how the <bpt id="p1">**</bpt>$'<ept id="p1">**</ept> substitution causes the regular expression engine to replace each match in the input string.</source>
          <target state="translated">다음 테이블에서는 <bpt id="p1">**</bpt>$'<ept id="p1">**</ept> 대체를 사용할 경우 정규식 엔진이 입력 문자열에서 일치하는 부분을 어떻게 바꾸는지 보여줍니다.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Inserted text is shown in bold in the Result string column.</source>
          <target state="translated">삽입된 텍스트는 [결과] 문자열에서 굵게 표시됩니다.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Match</source>
          <target state="translated">일치</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Position</source>
          <target state="translated">위치</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>String before match</source>
          <target state="translated">일치하는 문자열 앞에 있는 문자열</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Result string</source>
          <target state="translated">결과 문자열</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>1</source>
          <target state="translated">1</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>2</source>
          <target state="translated">2</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>bb2cc3dd4ee5</source>
          <target state="translated">bb2cc3dd4ee5</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>aa<bpt id="p1">**</bpt>bb2cc3dd4ee5<ept id="p1">**</ept>bb2cc3dd4ee5</source>
          <target state="translated">aa<bpt id="p1">**</bpt>bb2cc3dd4ee5<ept id="p1">**</ept>bb2cc3dd4ee5</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>2</source>
          <target state="translated">2</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>5</source>
          <target state="translated">5</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>cc3dd4ee5</source>
          <target state="translated">cc3dd4ee5</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>aabb2cc3dd4ee5bb<bpt id="p1">**</bpt>cc3dd4ee5<ept id="p1">**</ept>cc3dd4ee5</source>
          <target state="translated">aabb2cc3dd4ee5bb<bpt id="p1">**</bpt>cc3dd4ee5<ept id="p1">**</ept>cc3dd4ee5</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>3</source>
          <target state="translated">3</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>8</source>
          <target state="translated">8</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>dd4ee5</source>
          <target state="translated">dd4ee5</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>aabb2cc3dd4ee5bbcc3dd4ee5cc<bpt id="p1">**</bpt>dd4ee5<ept id="p1">**</ept>dd4ee5</source>
          <target state="translated">aabb2cc3dd4ee5bbcc3dd4ee5cc<bpt id="p1">**</bpt>dd4ee5<ept id="p1">**</ept>dd4ee5</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>4</source>
          <target state="translated">4</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>11</source>
          <target state="translated">11</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>ee5</source>
          <target state="translated">ee5</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>aabb2cc3dd4ee5bbcc3dd4ee5ccdd4ee5dd<bpt id="p1">**</bpt>ee5<ept id="p1">**</ept>ee5</source>
          <target state="translated">aabb2cc3dd4ee5bbcc3dd4ee5ccdd4ee5dd<bpt id="p1">**</bpt>ee5<ept id="p1">**</ept>ee5</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>5</source>
          <target state="translated">5</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>14</source>
          <target state="translated">14</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>String.Empty<ept id="p1">](xref:System.String.Empty)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>String.Empty<ept id="p1">](xref:System.String.Empty)</ept></target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>aabb2cc3dd4ee5bbcc3dd4ee5ccdd4ee5ddee5ee</source>
          <target state="translated">aabb2cc3dd4ee5bbcc3dd4ee5ccdd4ee5ddee5ee</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Substituting the last captured group</source>
          <target state="translated">캡처된 마지막 그룹 대체</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt><ph id="ph1">$+</ph><ept id="p1">**</ept> substitution replaces the matched string with the last captured group.</source>
          <target state="translated"><bpt id="p1">**</bpt><ph id="ph1">$+</ph><ept id="p1">**</ept> 대체는 일치하는 문자열을 캡처된 마지막 그룹으로 바꿉니다.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>If there are no captured groups or if the value of the last captured group is <bpt id="p1">[</bpt>String.Empty<ept id="p1">](xref:System.String.Empty)</ept>, the <bpt id="p2">**</bpt><ph id="ph1">$+</ph><ept id="p2">**</ept> substitution has no effect.</source>
          <target state="translated">캡처된 그룹이 없거나 캡처된 마지막 그룹 값이 <bpt id="p1">[</bpt>String.Empty<ept id="p1">](xref:System.String.Empty)</ept>이면 <bpt id="p2">**</bpt><ph id="ph1">$+</ph><ept id="p2">**</ept> 대체는 아무 효과가 없습니다.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>The following example identifies duplicate words in a string and uses the <bpt id="p1">**</bpt><ph id="ph1">$+</ph><ept id="p1">**</ept> substitution to replace them with a single occurrence of the word.</source>
          <target state="translated">다음 예제에서는 문자열에서 중복 단어를 확인한 다음 <bpt id="p1">**</bpt><ph id="ph1">$+</ph><ept id="p1">**</ept> 대체를 사용하여 해당 단어가 한 번만 나타나도록 바꿉니다.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>RegexOptions.IgnoreCase<ept id="p1">](xref:System.Text.RegularExpressions.RegexOptions.IgnoreCase)</ept> option is used to ensure that words that differ in case but that are otherwise identical are considered duplicates.</source>
          <target state="translated"><bpt id="p1">[</bpt>RegexOptions.IgnoreCase<ept id="p1">](xref:System.Text.RegularExpressions.RegexOptions.IgnoreCase)</ept> 옵션은 대소문자만 다르고 나머지는 동일한 단어를 중복으로 인식하도록 하는 데 사용됩니다.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>The regular expression pattern <ph id="ph1">`\b(\w+)\s\1\b`</ph> is defined as shown in the following table.</source>
          <target state="translated">정규식 패턴 <ph id="ph1">`\b(\w+)\s\1\b`</ph>는 다음 테이블과 같이 정의됩니다.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">패턴</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">설명</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Begin the match at a word boundary.</source>
          <target state="translated">단어 경계에서 일치 항목 찾기를 시작합니다.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Match one or more word characters.</source>
          <target state="translated">하나 이상의 단어 문자를 찾습니다.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>This is the first capturing group.</source>
          <target state="translated">이 그룹은 첫 번째 캡처링 그룹입니다.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Match a white-space character.</source>
          <target state="translated">공백 문자를 찾습니다.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Match the first captured group.</source>
          <target state="translated">캡처된 첫 번째 그룹을 찾습니다.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>End the match at a word boundary.</source>
          <target state="translated">단어 경계에서 일치 항목 찾기를 끝냅니다.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Substituting the entire input string</source>
          <target state="translated">전체 입력 문자열 대체</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>$_<ept id="p1">**</ept> substitution replaces the matched string with the entire input string.</source>
          <target state="translated"><bpt id="p1">**</bpt>$_<ept id="p1">**</ept> 대체는 일치하는 문자열을 전체 입력 문자열로 바꿉니다.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>That is, it removes the matched text and replaces it with the entire string, including the matched text.</source>
          <target state="translated">즉, 일치하는 텍스트를 제거한 다음 일치하는 텍스트를 포함한 전체 문자열로 바꿉니다.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>The following example matches one or more decimal digits in the input string.</source>
          <target state="translated">다음 예제에서는 입력 문자열에서 하나 이상의 10진수 숫자를 찾습니다.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>It uses the <bpt id="p1">**</bpt>$_<ept id="p1">**</ept> substitution to replace them with the entire input string.</source>
          <target state="translated"><bpt id="p1">**</bpt>$_<ept id="p1">**</ept> 대체를 사용하여 전체 입력 문자열로 바꿉니다.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>In this example, the input string <ph id="ph1">`"ABC123DEF456"`</ph> contains two matches.</source>
          <target state="translated">이 예제에서는 입력 문자열 <ph id="ph1">`"ABC123DEF456"`</ph>에 두 개의 일치 항목이 포함되어 있습니다.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>The following table illustrates how the <bpt id="p1">**</bpt>$_<ept id="p1">**</ept> substitution causes the regular expression engine to replace each match in the input string.</source>
          <target state="translated">다음 테이블에서는 <bpt id="p1">**</bpt>$_<ept id="p1">**</ept> 대체를 사용할 경우 정규식 엔진이 입력 문자열에서 일치하는 부분을 어떻게 바꾸는지 보여줍니다.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Inserted text is shown in bold in the Result string column.</source>
          <target state="translated">삽입된 텍스트는 [결과] 문자열에서 굵게 표시됩니다.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Match</source>
          <target state="translated">일치</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Position</source>
          <target state="translated">위치</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>String before match</source>
          <target state="translated">일치하는 문자열 앞에 있는 문자열</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Result string</source>
          <target state="translated">결과 문자열</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>1</source>
          <target state="translated">1</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>3</source>
          <target state="translated">3</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>123</source>
          <target state="translated">123</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>ABC<bpt id="p1">**</bpt>ABC123DEF456<ept id="p1">**</ept>DEF456</source>
          <target state="translated">ABC<bpt id="p1">**</bpt>ABC123DEF456<ept id="p1">**</ept>DEF456</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>2</source>
          <target state="translated">2</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>5</source>
          <target state="translated">5</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>456</source>
          <target state="translated">456</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>ABCABC123DEF456DEF<bpt id="p1">**</bpt>ABC123DEF456<ept id="p1">**</ept></source>
          <target state="translated">ABCABC123DEF456DEF<bpt id="p1">**</bpt>ABC123DEF456<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>See also</source>
          <target state="translated">참고 항목</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Regular expression language - quick reference<ept id="p1">](quick-ref.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>정규식 언어 - 빠른 참조<ept id="p1">](quick-ref.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>