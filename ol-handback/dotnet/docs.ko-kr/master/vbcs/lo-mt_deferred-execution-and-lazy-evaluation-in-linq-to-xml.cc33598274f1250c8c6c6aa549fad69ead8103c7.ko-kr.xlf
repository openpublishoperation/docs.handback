<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3b7318eb9853d633d152b93fafcf9570ccd03835</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\linq\deferred-execution-and-lazy-evaluation-in-linq-to-xml.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">864e86df132186a54e683bc5a38fe0472099782b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a8b7a6b6d9e7930bbc7b5a43e4e0864a546b686f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Deferred Execution and Lazy Evaluation in LINQ to XML (Visual Basic) | Microsoft Docs</source>
          <target state="translated">실행 및 LINQ to XML (Visual Basic)에서 지연 계산을 지연 | Microsoft 문서</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Deferred Execution and Lazy Evaluation in LINQ to XML (Visual Basic)</source>
          <target state="translated">지연 된 실행과 지연 계산은 linq to XML (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Query and axis operations are often implemented to use deferred execution.</source>
          <target state="translated">쿼리 및 축 연산은 흔히 지연된 실행을 사용하도록 구현됩니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This topic explains the requirements and advantages of deferred execution, and some implementation considerations.</source>
          <target state="translated">이 항목에서는 지연된 실행의 요구 사항 및 장점과 몇 가지 구현 고려 사항에 대해 설명합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Deferred Execution</source>
          <target state="translated">지연된 실행</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Deferred execution means that the evaluation of an expression is delayed until its <bpt id="p1">*</bpt>realized<ept id="p1">*</ept> value is actually required.</source>
          <target state="translated">지연 될 때까지 식의 계산이 지연 되는 실행 의미의 <bpt id="p1">*</bpt>실현<ept id="p1">*</ept> 값이 실제로 필요 합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Deferred execution can greatly improve performance when you have to manipulate large data collections, especially in programs that contain a series of chained queries or manipulations.</source>
          <target state="translated">지연된 실행은 특히 일련의 연결된 쿼리나 조작이 포함된 프로그램에서 큰 데이터 컬렉션을 조작해야 하는 경우 성능을 크게 높일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In the best case, deferred execution enables only a single iteration through the source collection.</source>
          <target state="translated">최상의 경우에는 지연된 실행을 통해 소스 컬렉션을 한 번만 반복할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The LINQ technologies make extensive use of deferred execution in both the members of core &lt;xref:System.Linq?displayProperty=fullName&gt; classes and in the extension methods in the various LINQ namespaces, such as &lt;xref:System.Xml.Linq.Extensions?displayProperty=fullName&gt;.</source>
          <target state="translated">LINQ 기술은 광범위 하 게 사용 지연 된 실행의 핵심 멤버에서 &lt;xref:System.Linq?displayProperty=fullName&gt;클래스 &lt;xref:System.Xml.Linq.Extensions?displayProperty=fullName&gt;.&lt;/xref:System.Xml.Linq.Extensions?displayProperty=fullName&gt; 등 다양 한 LINQ 네임 스페이스의 확장 메서드와&lt;/xref:System.Linq?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Eager vs. Lazy Evaluation</source>
          <target state="translated">즉시 계산과 지연 계산 비교</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>When you write a method that implements deferred execution, you also have to decide whether to implement the method using lazy evaluation or eager evaluation.</source>
          <target state="translated">지연된 실행을 구현하는 메서드를 작성하는 경우 지연 계산이나 즉시 계산 중에서 메서드 구현에 사용할 방법을 결정해야 합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">*</bpt>lazy evaluation<ept id="p1">*</ept>, a single element of the source collection is processed during each call to the iterator.</source>
          <target state="translated"><bpt id="p1">*</bpt>지연 평가<ept id="p1">*</ept>, 소스 컬렉션의 단일 요소가 반복기를 호출할 때마다 처리 됩니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This is the typical way in which iterators are implemented.</source>
          <target state="translated">이것이 반복기가 구현되는 일반적인 방법입니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">*</bpt>eager evaluation<ept id="p1">*</ept>, the first call to the iterator will result in the entire collection being processed.</source>
          <target state="translated"><bpt id="p1">*</bpt>즉시 평가<ept id="p1">*</ept>, 반복기를 처음으로 호출 하면 전체 컬렉션이 처리 됩니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A temporary copy of the source collection might also be required.</source>
          <target state="translated">소스 컬렉션의 임시 복사본도 필요할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For example, the &lt;xref:System.Linq.Enumerable.OrderBy%2A&gt; method has to sort the entire collection before it returns the first element.</source>
          <target state="translated">예를 들어는 &lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;메서드에 첫 번째 요소를 반환 하기 전에 전체 컬렉션을 정렬 하는.&lt;/xref:System.Linq.Enumerable.OrderBy%2A&gt;</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Lazy evaluation usually yields better performance because it distributes overhead processing evenly throughout the evaluation of the collection and minimizes the use of temporary data.</source>
          <target state="translated">지연 계산은 컬렉션의 계산 전반에 오버헤드 처리를 균일하게 분산시키고 임시 데이터를 최소한으로 사용하기 때문에 대개 성능이 더 좋습니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Of course, for some operations, there is no other option than to materialize intermediate results.</source>
          <target state="translated">물론 중간 결과를 구체화해야만 하는 연산도 있습니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Next Steps</source>
          <target state="translated">다음 단계</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The next topic in this tutorial illustrates deferred execution:</source>
          <target state="translated">이 자습서의 다음 항목에서는 지연된 실행을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Deferred Execution Example (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/deferred-execution-example.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>지연된 실행 예제 (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/deferred-execution-example.md)</ept></target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">참고 항목</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Tutorial: Deferred Execution (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/tutorial-deferred-execution.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>자습서: 지연 된 실행 (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/tutorial-deferred-execution.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Concepts and Terminology (Functional Transformation) (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/concepts-and-terminology-functional-transformation.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>개념 및 용어 (함수 변환) (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/concepts-and-terminology-functional-transformation.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Aggregation Operations (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/aggregation-operations.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>집계 작업 (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/aggregation-operations.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>