<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">34bdc4e056d982799eac35eb2398dd3f23f6f351</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\linq\enabling-a-data-source-for-linq-querying.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4feeba2c8eb91a16fa340f9d479d538b02087a1c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0611b6c4d44b04568935a611bd008fcce640cbdf</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Enabling a Data Source for LINQ Querying2 | Microsoft Docs</source>
          <target state="translated">LINQ Querying2에 대 한 데이터 원본을 사용 | Microsoft 문서</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Enabling a Data Source for LINQ Querying</source>
          <target state="translated">LINQ 쿼리에 대한 데이터 소스 활성화</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>There are various ways to extend <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> to enable any data source to be queried in the <ph id="ph2">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> pattern.</source>
          <target state="translated">확장 하는 방법은 여러 가지가 <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> 모든 데이터 소스를 쿼리할 수 있도록는 <ph id="ph2">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> 패턴입니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The data source might be a data structure, a Web service, a file system, or a database, to name some.</source>
          <target state="translated">데이터 소스의 예를 몇 가지 들자면 데이터 구조, 웹 서비스, 파일 시스템 또는 데이터베이스가 있습니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> pattern makes it easy for clients to query a data source for which <ph id="ph2">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> querying is enabled, because the syntax and pattern of the query does not change.</source>
          <target state="translated">쿼리의 구문과 패턴은 변경되지 않으므로 <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> 패턴을 사용하면 <ph id="ph2">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> 쿼리가 활성화된 데이터 소스를 클라이언트가 쉽게 쿼리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The ways in which <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> can be extended to these data sources include the following:</source>
          <target state="translated">하는 방법 <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> 확장 될 수 있습니다 이러한 데이터 원본에는 다음과 같습니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Implementing the &lt;xref:System.Collections.Generic.IEnumerable%601&gt; interface in a type to enable <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> to Objects querying of that type.</source>
          <target state="translated">구현 된 &lt;xref:System.Collections.Generic.IEnumerable%601&gt;인터페이스를 사용 하도록 설정 하는 종류에 <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> 해당 형식의 개체를 쿼리 하.&lt;/xref:System.Collections.Generic.IEnumerable%601&gt;</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Creating standard query operator methods such as &lt;xref:System.Linq.Enumerable.Where%2A&gt; and &lt;xref:System.Linq.Enumerable.Select%2A&gt; that extend a type, to enable custom <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> querying of that type.</source>
          <target state="translated">와 같은 표준 쿼리 연산자 메서드를 만들어 &lt;xref:System.Linq.Enumerable.Where%2A&gt;및 &lt;xref:System.Linq.Enumerable.Select%2A&gt;사용자 지정을 사용 하도록 설정 하는 형식을 확장 하는 <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> 쿼리를.&lt;/xref:System.Linq.Enumerable.Select%2A&gt; &lt;/xref:System.Linq.Enumerable.Where%2A&gt;</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Creating a provider for your data source that implements the &lt;xref:System.Linq.IQueryable%601&gt; interface.</source>
          <target state="translated">구현 하는 데이터 원본에 대 한 공급자 만들기는 &lt;xref:System.Linq.IQueryable%601&gt;인터페이스.&lt;/xref:System.Linq.IQueryable%601&gt;</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A provider that implements this interface receives <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> queries in the form of expression trees, which it can execute in a custom way, for example remotely.</source>
          <target state="translated">이 인터페이스를 구현하는 공급자는 원격 실행과 같이 사용자 지정 방식으로 실행할 수 있는 식 트리의 형태로 <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> 쿼리를 받습니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Creating a provider for your data source that takes advantage of an existing <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> technology.</source>
          <target state="translated">기존을 활용 하는 데이터 원본에 대 한 공급자 만들기 <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> 기술 합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Such a provider would enable not only querying, but also insert, update, and delete operations and mapping for user-defined types.</source>
          <target state="translated">이러한 공급자를 사용하면 쿼리뿐만 아니라 사용자 정의 형식에 대한 삽입, 업데이트 및 삭제 작업과 매핑을 수행할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This topic discusses these options.</source>
          <target state="translated">이 항목에서는 이러한 옵션에 대해 설명합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>How to Enable LINQ Querying of Your Data Source</source>
          <target state="translated">데이터 소스의 LINQ 쿼리를 활성화하는 방법</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In-Memory Data</source>
          <target state="translated">메모리 내 데이터</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>There are two ways you can enable <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> querying of in-memory data.</source>
          <target state="translated">두 가지 방법으로 사용 하도록 설정할 수 <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> 메모리 내 데이터의 쿼리 합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If the data is of a type that implements &lt;xref:System.Collections.Generic.IEnumerable%601&gt;, you can query the data by using <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> to Objects.</source>
          <target state="translated">데이터가 구현 하는 형식의 경우 &lt;xref:System.Collections.Generic.IEnumerable%601&gt;를 사용 하 여 데이터를 쿼리할 수 <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> 개체에.&lt;/xref:System.Collections.Generic.IEnumerable%601&gt;</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If it does not make sense to enable enumeration of your type by implementing the &lt;xref:System.Collections.Generic.IEnumerable%601&gt; interface, you can define <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> standard query operator methods in that type or create <ph id="ph2">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> standard query operator methods that extend the type.</source>
          <target state="translated">하는 경우는 바람직하지 구현 하 여 형식의 열거형을 활성화 하는 &lt;xref:System.Collections.Generic.IEnumerable%601&gt;인터페이스를 정의할 수 있습니다 <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> 표준 쿼리 연산자 메서드 또는 작성 <ph id="ph2">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> 형식을 확장 하는 표준 쿼리 연산자 메서드.&lt;/xref:System.Collections.Generic.IEnumerable%601&gt;</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Custom implementations of the standard query operators should use deferred execution to return the results.</source>
          <target state="translated">표준 쿼리 연산자의 사용자 지정 구현에서는 지연된 실행을 사용하여 결과를 반환해야 합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Remote Data</source>
          <target state="translated">원격 데이터</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The best option for enabling <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> querying of a remote data source is to implement the &lt;xref:System.Linq.IQueryable%601&gt; interface.</source>
          <target state="translated">활성화 하는 가장 좋은 방법은 <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> 을 구현 하는 원격 데이터 원본의 쿼리는 &lt;xref:System.Linq.IQueryable%601&gt;인터페이스.&lt;/xref:System.Linq.IQueryable%601&gt;</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>However, this differs from extending a provider such as <ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../csharp/includes/vbtecdlinq_md.md)]</ph> for a data source.</source>
          <target state="translated">하지만 이 방식은 데이터 소스에서 <ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../csharp/includes/vbtecdlinq_md.md)]</ph> 같은 공급자를 확장하는 방식과 다릅니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>No provider models for extending existing <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> technologies, such as <ph id="ph2">[!INCLUDE[vbtecdlinq](../../../../csharp/includes/vbtecdlinq_md.md)]</ph>, to other types of data source are available in <ph id="ph3">[!INCLUDE[vs_orcas_long](../../../../csharp/misc/includes/vs_orcas_long_md.md)]</ph>.</source>
          <target state="translated">기존 확장 하기 위한 공급자 모델은 없습니다 <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> 기술을 같은 <ph id="ph2">[!INCLUDE[vbtecdlinq](../../../../csharp/includes/vbtecdlinq_md.md)]</ph>, 다른 유형의 데이터 원본에서 사용할 수 있는 <ph id="ph3">[!INCLUDE[vs_orcas_long](../../../../csharp/misc/includes/vs_orcas_long_md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>IQueryable LINQ Providers</source>
          <target state="translated">IQueryable LINQ 공급자</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> providers that implement &lt;xref:System.Linq.IQueryable%601&gt; can vary widely in their complexity.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph>구현 하는 공급자 &lt;xref:System.Linq.IQueryable%601&gt;의 복잡성에 다양할 수 있습니다.&lt;/xref:System.Linq.IQueryable%601&gt;</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This section discusses the different levels of complexity.</source>
          <target state="translated">이 단원에서는 이러한 복잡성의 차이에 대해 설명합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A less complex <ph id="ph1">`IQueryable`</ph> provider might interface with a single method of a Web service.</source>
          <target state="translated">덜 복잡한 <ph id="ph1">`IQueryable`</ph> 공급자는 웹 서비스의 단일 메서드와 인터페이스할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This type of provider is very specific because it expects specific information in the queries that it handles.</source>
          <target state="translated">이러한 형식의 공급자는 쿼리에 처리할 특정 정보가 있다고 가정하므로 매우 한정적이며,</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>It has a closed type system, perhaps exposing a single result type.</source>
          <target state="translated">대개 단일 결과 형식을 노출하는 폐쇄형 형식 시스템을 갖고 있습니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Most of the execution of the query occurs locally, for example by using the &lt;xref:System.Linq.Enumerable&gt; implementations of the standard query operators.</source>
          <target state="translated">예를 들어을 사용 하 여 대부분의 쿼리 실행은 로컬에서 수행 된 &lt;xref:System.Linq.Enumerable&gt;표준 쿼리 연산자의 구현입니다.&lt;/xref:System.Linq.Enumerable&gt;</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>A less complex provider might examine only one method call expression in the expression tree that represents the query, and let the remaining logic of the query be handled elsewhere.</source>
          <target state="translated">복잡성이 낮은 공급자는 식 트리에서 쿼리를 나타내는 하나의 메서드 호출 식만 검사하고 쿼리의 나머지 논리는 다른 곳에서 처리되도록 할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`IQueryable`</ph> provider of medium complexity might target a data source that has a partially expressive query language.</source>
          <target state="translated">복잡성이 보통인 <ph id="ph1">`IQueryable`</ph> 공급자는 부분적으로 표현되는 쿼리 언어가 있는 데이터 소스를 대상으로 할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If it targets a Web service, it might interface with more than one method of the Web service and select the method to call based on the question that the query poses.</source>
          <target state="translated">공급자가 웹 서비스를 대상으로 하는 경우 둘 이상의 웹 서비스 메서드에 대한 인터페이스를 제공하고 쿼리가 노출하는 질문에 따라 호출할 메서드를 선택할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>A provider of medium complexity would have a richer type system than a simple provider, but it would still be a fixed type system.</source>
          <target state="translated">복잡성이 보통인 공급자는 복잡성이 낮은 공급자보다 풍부한 형식 시스템을 가질 수 있지만 여전히 고정된 형식 시스템을 유지합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For example, the provider might expose types that have one-to-many relationships that can be traversed, but it would not provide mapping technology for user-defined types.</source>
          <target state="translated">예를 들어 이 공급자는 이동 가능한 일대다 관계가 있는 형식을 노출할 수 있지만 사용자 정의 형식에 대한 매핑 기술을 제공하지 않습니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>A complex <ph id="ph1">`IQueryable`</ph> provider, such as the <ph id="ph2">[!INCLUDE[vbtecdlinq](../../../../csharp/includes/vbtecdlinq_md.md)]</ph> provider, might translate complete <ph id="ph3">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> queries to an expressive query language, such as SQL.</source>
          <target state="translated"><ph id="ph1">`IQueryable`</ph> 공급자와 같은 복잡한 <ph id="ph2">[!INCLUDE[vbtecdlinq](../../../../csharp/includes/vbtecdlinq_md.md)]</ph> 공급자가 전체 <ph id="ph3">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> 쿼리를 SQL과 같이 표현이 가능한 쿼리 언어로 변환할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>A complex provider is more general than a less complex provider, because it can handle a wider variety of questions in the query.</source>
          <target state="translated">복잡한 공급자가 덜 복잡한 공급자보다 더욱 다양하고 방대한 질문을 쿼리로 처리할 수 있기 때문에 더 일반적이라 할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>It also has an open type system and therefore must contain extensive infrastructure to map user-defined types.</source>
          <target state="translated">또한 개방형 형식 시스템을 가지므로 사용자 정의 형식을 매핑하는 확장 인프라를 포함해야 합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Developing a complex provider requires a significant amount of effort.</source>
          <target state="translated">복잡성이 높은 공급자를 개발하려면 상당한 노력이 필요합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">참고 항목</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Linq.IQueryable%601&gt;</source>
          <target state="translated">&lt;xref:System.Linq.IQueryable%601&gt;&lt;/xref:System.Linq.IQueryable%601&gt;</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</source>
          <target state="translated">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;&lt;/xref:System.Collections.Generic.IEnumerable%601&gt;</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Linq.Enumerable&gt;</source>
          <target state="translated">&lt;xref:System.Linq.Enumerable&gt;&lt;/xref:System.Linq.Enumerable&gt;</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Standard Query Operators Overview (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/standard-query-operators-overview.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>표준 쿼리 연산자 개요 (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/standard-query-operators-overview.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>LINQ to Objects (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/linq-to-objects.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>LINQ to Objects (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/linq-to-objects.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>