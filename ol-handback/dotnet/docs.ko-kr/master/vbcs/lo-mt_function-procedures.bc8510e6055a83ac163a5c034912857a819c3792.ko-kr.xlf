<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">11baaa6985f0681aa9c67c4f2470fb9917db5b78</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\procedures\function-procedures.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d10c541e9fdffffc46702845240e6a4b8805ed3d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">639d4d68bea76080355b631a32517a0eb45e333f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Function Procedures (Visual Basic) | Microsoft Docs</source>
          <target state="translated">Function 프로시저 (Visual Basic) | Microsoft 문서</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Function Procedures (Visual Basic)</source>
          <target state="translated">Function 프로시저(Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Function`</ph> procedure is a series of <ph id="ph2">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> statements enclosed by the <ph id="ph3">`Function`</ph> and <ph id="ph4">`End Function`</ph> statements.</source>
          <target state="translated">A <ph id="ph1">`Function`</ph> 절차는 일련의 <ph id="ph2">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> 로 묶인 명령문의 <ph id="ph3">`Function`</ph> 및 <ph id="ph4">`End Function`</ph> 문입니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Function`</ph> procedure performs a task and then returns control to the calling code.</source>
          <target state="translated"><ph id="ph1">`Function`</ph> 프로시저는 작업을 수행한 다음 호출 코드에 제어를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>When it returns control, it also returns a value to the calling code.</source>
          <target state="translated">제어를 반환 하기 호출 코드에도 값을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Each time the procedure is called, its statements run, starting with the first executable statement after the <ph id="ph1">`Function`</ph> statement and ending with the first <ph id="ph2">`End Function`</ph>, <ph id="ph3">`Exit Function`</ph>, or <ph id="ph4">`Return`</ph> statement encountered.</source>
          <target state="translated">프로시저가 호출 된 문이 실행 될 때마다 시작 후 첫 번째 실행 문에 <ph id="ph1">`Function`</ph> 문과 여 첫 번째 <ph id="ph2">`End Function`</ph>, <ph id="ph3">`Exit Function`</ph>, 또는 <ph id="ph4">`Return`</ph> 문을 발견 했습니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You can define a <ph id="ph1">`Function`</ph> procedure in a module, class, or structure.</source>
          <target state="translated">정의할 수는 <ph id="ph1">`Function`</ph> 모듈, 클래스 또는 구조체에는 프로시저입니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>It is <ph id="ph1">`Public`</ph> by default, which means you can call it from anywhere in your application that has access to the module, class, or structure in which you defined it.</source>
          <target state="translated"><ph id="ph1">`Public`</ph> 어디에서 나 호출할 수 있습니다 즉 기본적으로, 모듈, 클래스 또는 정의 된 구조에 액세스 권한이 있는 응용 프로그램에 있습니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Function`</ph> procedure can take arguments, such as constants, variables, or expressions, which are passed to it by the calling code.</source>
          <target state="translated">A <ph id="ph1">`Function`</ph> 프로시저와 같은 상수, 변수 또는 호출 코드에 의해 전달 되는 식을 인수를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Declaration Syntax</source>
          <target state="translated">선언 구문</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The syntax for declaring a <ph id="ph1">`Function`</ph> procedure is as follows:</source>
          <target state="translated">선언 구문은 <ph id="ph1">`Function`</ph> 절차는 다음과 같습니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>modifiers<ept id="p1">*</ept> can specify access level and information regarding overloading, overriding, sharing, and shadowing.</source>
          <target state="translated"><bpt id="p1">*</bpt>한정자<ept id="p1">*</ept> 오버 로드, 재정의 공유 및 숨김 관한 정보와 액세스 수준을 지정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Function Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/function-statement.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>Function 문의<ept id="p1">](../../../../visual-basic/language-reference/statements/function-statement.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You declare each parameter the same way you do for <bpt id="p1">[</bpt>Sub Procedures<ept id="p1">](./sub-procedures.md)</ept>.</source>
          <target state="translated">에 대 한와 동일한 방식으로 각 매개 변수를 선언 <bpt id="p1">[</bpt>Sub 프로시저<ept id="p1">](./sub-procedures.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Data Type</source>
          <target state="translated">데이터 형식</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Every <ph id="ph1">`Function`</ph> procedure has a data type, just as every variable does.</source>
          <target state="translated">모든 <ph id="ph1">`Function`</ph> 프로시저에는 데이터 형식, 각 변수와 마찬가지로 않습니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This data type is specified by the <ph id="ph1">`As`</ph> clause in the <ph id="ph2">`Function`</ph> statement, and it determines the data type of the value the function returns to the calling code.</source>
          <target state="translated">이 데이터 형식은 지정 되는 <ph id="ph1">`As`</ph> 절에는 <ph id="ph2">`Function`</ph> 하며 문, 함수 호출 코드로 반환 값의 데이터 형식을 결정 합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The following sample declarations illustrate this.</source>
          <target state="translated">다음 샘플 선언 이러한 경우를 설명 합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For more information, see "Parts" in <bpt id="p1">[</bpt>Function Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/function-statement.md)</ept>.</source>
          <target state="translated">자세한 내용은 "부분"의 참조 <bpt id="p1">[</bpt>Function 문의<ept id="p1">](../../../../visual-basic/language-reference/statements/function-statement.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Returning Values</source>
          <target state="translated">값 반환</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The value a <ph id="ph1">`Function`</ph> procedure sends back to the calling code is called its return value.</source>
          <target state="translated">값을 <ph id="ph1">`Function`</ph> 프로시저에서 전송 하는 호출 하는 코드를 다시 반환 값 이라고 합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The procedure returns this value in one of two ways:</source>
          <target state="translated">프로시저는 두 가지 방법 중 하나에서이 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>It uses the <ph id="ph1">`Return`</ph> statement to specify the return value, and returns control immediately to the calling program.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">`Return`</ph> 반환 값 및 반환을 지정 하는 문을 호출 프로그램에 즉시 제어 합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The following example illustrates this.</source>
          <target state="translated">다음은 이에 대한 예입니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>It assigns a value to its own function name in one or more statements of the procedure.</source>
          <target state="translated">프로시저의 하나 이상의 문에서 함수 이름에 값을 할당 합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Control does not return to the calling program until an <ph id="ph1">`Exit Function`</ph> or <ph id="ph2">`End Function`</ph> statement is executed.</source>
          <target state="translated">제어 될 때까지 호출 프로그램에 반환 하지 않는 한 <ph id="ph1">`Exit Function`</ph> 또는 <ph id="ph2">`End Function`</ph> 문이 실행 됩니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The following example illustrates this.</source>
          <target state="translated">다음은 이에 대한 예입니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The advantage of assigning the return value to the function name is that control does not return from the procedure until it encounters an <ph id="ph1">`Exit Function`</ph> or <ph id="ph2">`End Function`</ph> statement.</source>
          <target state="translated">함수 이름에는 반환 값을 할당의 장점은 만날 때까지 제어 프로시저에서 반환 되지 않는 한 <ph id="ph1">`Exit Function`</ph> 또는 <ph id="ph2">`End Function`</ph> 문입니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>This allows you to assign a preliminary value and adjust it later if necessary.</source>
          <target state="translated">이 옵션을 사용 하면 예비 값을 할당 하 고 필요한 경우 나중에 조정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For more information about returning values, see <bpt id="p1">[</bpt>Function Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/function-statement.md)</ept>.</source>
          <target state="translated">값을 반환 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>Function 문의<ept id="p1">](../../../../visual-basic/language-reference/statements/function-statement.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For information about returning arrays, see <bpt id="p1">[</bpt>Arrays<ept id="p1">](../../../../visual-basic/programming-guide/language-features/arrays/index.md)</ept>.</source>
          <target state="translated">배열을 반환 하는 방법에 대 한 정보를 참조 하십시오. <bpt id="p1">[</bpt>배열<ept id="p1">](../../../../visual-basic/programming-guide/language-features/arrays/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Calling Syntax</source>
          <target state="translated">호출 구문</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You invoke a <ph id="ph1">`Function`</ph> procedure by including its name and arguments either on the right side of an assignment statement or in an expression.</source>
          <target state="translated">호출 하는 <ph id="ph1">`Function`</ph> 이름과 대입문의 또는 식의 오른쪽에 인수를 포함 하 여 프로시저입니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>You must provide values for all arguments that are not optional, and you must enclose the argument list in parentheses.</source>
          <target state="translated">선택적 인수가 아닌 모든 인수에 대 한 값을 제공 해야 하 고 인수 목록을 괄호로 묶어야 합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>If no arguments are supplied, you can optionally omit the parentheses.</source>
          <target state="translated">없는 인수를 제공 하는 경우에 필요에 따라 괄호를 생략할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The syntax for a call to a <ph id="ph1">`Function`</ph> procedure is as follows:</source>
          <target state="translated">에 대 한 호출에 대 한 구문은 <ph id="ph1">`Function`</ph> 절차는 다음과 같습니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>lvalue<ept id="p1">*</ept>  <ph id="ph1">`=`</ph>  <bpt id="p2">*</bpt>functionname<ept id="p2">*</ept> <ph id="ph2">`[(`</ph> <bpt id="p3">*</bpt>argumentlist<ept id="p3">*</ept> <ph id="ph3">`)]`</ph></source>
          <target state="translated"><bpt id="p1">*</bpt>lvalue<ept id="p1">*</ept><ph id="ph1">`=`</ph><bpt id="p2">*</bpt>functionname<ept id="p2">*</ept> <ph id="ph2">`[(`</ph> <bpt id="p3">*</bpt>argumentlist<ept id="p3">*</ept>    <ph id="ph3">`)]`</ph></target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`If ((`</ph> <bpt id="p1">*</bpt>functionname<ept id="p1">*</ept> <ph id="ph2">`[(`</ph> <bpt id="p2">*</bpt>argumentlist<ept id="p2">*</ept> <ph id="ph3">`)] / 3) &lt;=`</ph>  <bpt id="p3">*</bpt>expression<ept id="p3">*</ept> <ph id="ph4">`) Then`</ph></source>
          <target state="translated"><ph id="ph1">`If ((`</ph><bpt id="p1">*</bpt>functionname<ept id="p1">*</ept> <ph id="ph2">`[(`</ph> <bpt id="p2">*</bpt>argumentlist<ept id="p2">*</ept> <ph id="ph3">`)] / 3) &lt;=`</ph> <bpt id="p3">*</bpt>식<ept id="p3">*</ept>  <ph id="ph4">`) Then`</ph></target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>When you call a <ph id="ph1">`Function`</ph> procedure, you do not have to use its return value.</source>
          <target state="translated">호출 하는 경우는 <ph id="ph1">`Function`</ph> 프로시저 않아도 해당 반환 값을 사용 하도록 합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If you do not, all the actions of the function are performed, but the return value is ignored.</source>
          <target state="translated">그렇지 않으면 함수는 모든 작업을 수행 하 고, 있지만 반환 값은 무시 됩니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>&lt;xref:Microsoft.VisualBasic.Interaction.MsgBox%2A&gt; is often called in this manner.</source>
          <target state="translated">&lt;xref:Microsoft.VisualBasic.Interaction.MsgBox%2A&gt;이 방법으로 흔히 이라고 합니다.&lt;/xref:Microsoft.VisualBasic.Interaction.MsgBox%2A&gt;</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Illustration of Declaration and Call</source>
          <target state="translated">선언 및 호출의 그림</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The following <ph id="ph1">`Function`</ph> procedure calculates the longest side, or hypotenuse, of a right triangle, given the values for the other two sides.</source>
          <target state="translated">다음 <ph id="ph1">`Function`</ph> 프로시저 가장 긴 면 또는 다른 두 가지 측면에 대 한 값이 제공 하는 직각 삼각형의 빗변을 계산 합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnProcedures#1<ept id="p2">](./codesnippet/VisualBasic/function-procedures_1.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnProcedures #&amp;1;<ept id="p2">](./codesnippet/VisualBasic/function-procedures_1.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The following example shows a typical call to <ph id="ph1">`hypotenuse`</ph>.</source>
          <target state="translated">다음 예제에서는 호출을 <ph id="ph1">`hypotenuse`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnProcedures#6<ept id="p2">](./codesnippet/VisualBasic/function-procedures_2.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnProcedures #&amp;6;<ept id="p2">](./codesnippet/VisualBasic/function-procedures_2.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">참고 항목</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Procedures<ept id="p1">](./index.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>프로시저<ept id="p1">](./index.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Sub Procedures<ept id="p1">](./sub-procedures.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Sub 프로시저<ept id="p1">](./sub-procedures.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Property Procedures<ept id="p1">](./property-procedures.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>속성 프로시저<ept id="p1">](./property-procedures.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Operator Procedures<ept id="p1">](./operator-procedures.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>연산자 프로시저<ept id="p1">](./operator-procedures.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Procedure Parameters and Arguments<ept id="p1">](./procedure-parameters-and-arguments.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>프로시저 매개 변수 및 인수<ept id="p1">](./procedure-parameters-and-arguments.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Function Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/function-statement.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Function 문<ept id="p1">](../../../../visual-basic/language-reference/statements/function-statement.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Create a Procedure that Returns a Value<ept id="p1">](./how-to-create-a-procedure-that-returns-a-value.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>방법: 값을 반환 하는 프로시저 만들기<ept id="p1">](./how-to-create-a-procedure-that-returns-a-value.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Return a Value from a Procedure<ept id="p1">](./how-to-return-a-value-from-a-procedure.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>방법: 프로시저에서 값을 반환 합니다.<ept id="p1">](./how-to-return-a-value-from-a-procedure.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Call a Procedure That Returns a Value<ept id="p1">](./how-to-call-a-procedure-that-returns-a-value.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>방법: 값을 반환하는 프로시저 호출<ept id="p1">](./how-to-call-a-procedure-that-returns-a-value.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>