<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">af87477f81fab8406d726ebc8c81260b371d71c8</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\language-reference\statements\function-statement.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c76ec667ed9ef8cdc7a385362dd954d63d9654ec</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">611b7943d1c8ba99e94e6410229905a635fad405</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Function Statement (Visual Basic) | Microsoft Docs</source>
          <target state="translated">함수 문 (Visual Basic) | Microsoft 문서</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Function Statement (Visual Basic)</source>
          <target state="translated">Function 문(Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Declares the name, parameters, and code that define a <ph id="ph1">`Function`</ph> procedure.</source>
          <target state="translated">선언 이름과 매개 변수를 정의 하는 코드는 <ph id="ph1">`Function`</ph> 프로시저입니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
          <target state="translated">구문</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parts</source>
          <target state="translated">요소</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">선택적 요소.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Attribute List<ept id="p1">](attribute-list.md)</ept>.</source>
          <target state="translated">참조 <bpt id="p1">[</bpt>특성 목록<ept id="p1">](attribute-list.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">선택적 요소.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Can be one of the following:</source>
          <target state="translated">다음 중 하나일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Public<ept id="p1">](../../../visual-basic/language-reference/modifiers/public.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>공용<ept id="p1">](../../../visual-basic/language-reference/modifiers/public.md)</ept></target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Protected<ept id="p1">](../../../visual-basic/language-reference/modifiers/protected.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>보호됨<ept id="p1">](../../../visual-basic/language-reference/modifiers/protected.md)</ept></target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Friend<ept id="p1">](../../../visual-basic/language-reference/modifiers/friend.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Friend<ept id="p1">](../../../visual-basic/language-reference/modifiers/friend.md)</ept></target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Private<ept id="p1">](../../../visual-basic/language-reference/modifiers/private.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>전용<ept id="p1">](../../../visual-basic/language-reference/modifiers/private.md)</ept></target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Access Levels in Visual Basic<ept id="p1">](../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md)</ept>.</source>
          <target state="translated">참조 <bpt id="p1">[</bpt>액세스 수준 Visual Basic의<ept id="p1">](../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">선택적 요소.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Can be one of the following:</source>
          <target state="translated">다음 중 하나일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Overloads<ept id="p1">](../../../visual-basic/language-reference/modifiers/overloads.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>오버로드<ept id="p1">](../../../visual-basic/language-reference/modifiers/overloads.md)</ept></target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Overrides<ept id="p1">](../../../visual-basic/language-reference/modifiers/overrides.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>재정의<ept id="p1">](../../../visual-basic/language-reference/modifiers/overrides.md)</ept></target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Overridable<ept id="p1">](../../../visual-basic/language-reference/modifiers/overridable.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>재정의 가능<ept id="p1">](../../../visual-basic/language-reference/modifiers/overridable.md)</ept></target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>NotOverridable<ept id="p1">](../../../visual-basic/language-reference/modifiers/notoverridable.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>NotOverridable<ept id="p1">](../../../visual-basic/language-reference/modifiers/notoverridable.md)</ept></target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>MustOverride<ept id="p1">](../../../visual-basic/language-reference/modifiers/mustoverride.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>MustOverride<ept id="p1">](../../../visual-basic/language-reference/modifiers/mustoverride.md)</ept></target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">선택적 요소.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Shared<ept id="p1">](../../../visual-basic/language-reference/modifiers/shared.md)</ept>.</source>
          <target state="translated">참조 <bpt id="p1">[</bpt>공유<ept id="p1">](../../../visual-basic/language-reference/modifiers/shared.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">선택적 요소.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Shadows<ept id="p1">](../../../visual-basic/language-reference/modifiers/shadows.md)</ept>.</source>
          <target state="translated">참조 <bpt id="p1">[</bpt>그림자<ept id="p1">](../../../visual-basic/language-reference/modifiers/shadows.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">선택적 요소.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Async<ept id="p1">](../../../visual-basic/language-reference/modifiers/async.md)</ept>.</source>
          <target state="translated">참조 <bpt id="p1">[</bpt>비동기<ept id="p1">](../../../visual-basic/language-reference/modifiers/async.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">선택적 요소.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Iterator<ept id="p1">](../../../visual-basic/language-reference/modifiers/iterator.md)</ept>.</source>
          <target state="translated">참조 <bpt id="p1">[</bpt>반복기<ept id="p1">](../../../visual-basic/language-reference/modifiers/iterator.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Required.</source>
          <target state="translated">필수 요소.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Name of the procedure.</source>
          <target state="translated">프로시저의 이름입니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Declared Element Names<ept id="p1">](../../../visual-basic/programming-guide/language-features/declared-elements/declared-element-names.md)</ept>.</source>
          <target state="translated">참조 <bpt id="p1">[</bpt>선언 된 요소 이름<ept id="p1">](../../../visual-basic/programming-guide/language-features/declared-elements/declared-element-names.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">선택적 요소.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>List of type parameters for a generic procedure.</source>
          <target state="translated">제네릭 프로시저에 대 한 형식 매개 변수의 목록입니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Type List<ept id="p1">](type-list.md)</ept>.</source>
          <target state="translated">참조 <bpt id="p1">[</bpt>목록을 입력<ept id="p1">](type-list.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">선택적 요소.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>List of local variable names representing the parameters of this procedure.</source>
          <target state="translated">이 절차의 매개 변수를 나타내는 로컬 변수 이름의 목록입니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Parameter List<ept id="p1">](parameter-list.md)</ept>.</source>
          <target state="translated">참조 <bpt id="p1">[</bpt>매개 변수 목록<ept id="p1">](parameter-list.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Required if <ph id="ph1">`Option Strict`</ph> is <ph id="ph2">`On`</ph>.</source>
          <target state="translated">필요한 경우 <ph id="ph1">`Option Strict`</ph> 는 <ph id="ph2">`On`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Data type of the value returned by this procedure.</source>
          <target state="translated">이 프로시저에서 반환 된 값의 데이터 형식입니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">선택적 요소.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Indicates that this procedure implements one or more <ph id="ph1">`Function`</ph> procedures, each one defined in an interface implemented by this procedure's containing class or structure.</source>
          <target state="translated">이 절차를 하나 이상 구현 함을 나타냅니다 <ph id="ph1">`Function`</ph> 절차,이 절차의 포함 하는 클래스 또는 구조체에서 구현 되는 인터페이스에 정의 된 각 것입니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Implements Statement<ept id="p1">](implements-statement.md)</ept>.</source>
          <target state="translated">참조 <bpt id="p1">[</bpt>문을 구현<ept id="p1">](implements-statement.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Required if <ph id="ph1">`Implements`</ph> is supplied.</source>
          <target state="translated"><ph id="ph1">`Implements`</ph>가 제공된 경우 필수입니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>List of <ph id="ph1">`Function`</ph> procedures being implemented.</source>
          <target state="translated">구현할 <ph id="ph1">`Function`</ph> 프로시저 목록입니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Each <ph id="ph1">`implementedprocedure`</ph> has the following syntax and parts:</source>
          <target state="translated">각 <ph id="ph1">`implementedprocedure`</ph>에는 다음과 같은 구문과 요소가 있습니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Part</source>
          <target state="translated">파트</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">설명</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Required.</source>
          <target state="translated">필수 요소.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Name of an interface implemented by this procedure's containing class or structure.</source>
          <target state="translated">이 프로시저에 의해 구현 되는 인터페이스의 이름의 클래스 또는 구조체를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Required.</source>
          <target state="translated">필수 요소.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Name by which the procedure is defined in <ph id="ph1">`interface`</ph>.</source>
          <target state="translated">프로시저가 <ph id="ph1">`interface`</ph>에 정의되는 이름입니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">선택적 요소.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Indicates that this procedure can handle one or more specific events.</source>
          <target state="translated">이 절차에서 하나 이상의 특정 이벤트를 처리할 수 있음을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Handles<ept id="p1">](handles-clause.md)</ept>.</source>
          <target state="translated">참조 <bpt id="p1">[</bpt>처리<ept id="p1">](handles-clause.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Required if <ph id="ph1">`Handles`</ph> is supplied.</source>
          <target state="translated"><ph id="ph1">`Handles`</ph>가 제공된 경우 필수입니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>List of events this procedure handles.</source>
          <target state="translated">이 프로시저에서 처리 하는 이벤트 목록입니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Each <ph id="ph1">`eventspecifier`</ph> has the following syntax and parts:</source>
          <target state="translated">각 <ph id="ph1">`eventspecifier`</ph>에는 다음과 같은 구문과 요소가 있습니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Part</source>
          <target state="translated">파트</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">설명</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Required.</source>
          <target state="translated">필수 요소.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Object variable declared with the data type of the class or structure that raises the event.</source>
          <target state="translated">클래스 또는 이벤트를 발생 하는 구조체의 데이터 형식으로 선언 된 개체 변수입니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Required.</source>
          <target state="translated">필수 요소.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Name of the event this procedure handles.</source>
          <target state="translated">이 프로시저에서 처리 하는 이벤트의 이름입니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">선택적 요소.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Block of statements to be executed within this procedure.</source>
          <target state="translated">문 블록을이 프로시저 내에서 실행 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Terminates the definition of this procedure.</source>
          <target state="translated">이 프로시저의 정의 종료합니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Remarks</source>
          <target state="translated">주의</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>All executable code must be inside a procedure.</source>
          <target state="translated">모든 실행 코드는 프로시저 안에 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Each procedure, in turn, is declared within a class, a structure, or a module that is referred to as the containing class, structure, or module.</source>
          <target state="translated">차례로 각 프로시저에는 클래스, 구조체 또는 포함 하는 클래스, 구조체 또는 모듈 참조 하는 모듈 내에서 선언 됩니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>To return a value to the calling code, use a <ph id="ph1">`Function`</ph> procedure; otherwise, use a <ph id="ph2">`Sub`</ph> procedure.</source>
          <target state="translated">호출 코드에는 값을 반환 하려면 사용을 <ph id="ph1">`Function`</ph> 프로시저 그렇지 사용 하 여는 <ph id="ph2">`Sub`</ph> 프로시저입니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Defining a Function</source>
          <target state="translated">함수 정의</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>You can define a <ph id="ph1">`Function`</ph> procedure only at the module level.</source>
          <target state="translated">정의할 수는 <ph id="ph1">`Function`</ph> 모듈 수준에만 프로시저입니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Therefore, the declaration context for a function must be a class, a structure, a module, or an interface and can't be a source file, a namespace, a procedure, or a block.</source>
          <target state="translated">따라서 함수에 대 한 선언 컨텍스트 클래스, 구조체, 모듈의 경우, 또는 인터페이스 여야 하며 소스 파일, 네임 스페이스, 프로시저 또는 블록 수 없습니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Declaration Contexts and Default Access Levels<ept id="p1">](declaration-contexts-and-default-access-levels.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>선언 컨텍스트 및 기본 액세스 수준<ept id="p1">](declaration-contexts-and-default-access-levels.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Function`</ph> procedures default to public access.</source>
          <target state="translated"><ph id="ph1">`Function`</ph>프로시저는 기본적으로 공용 액세스 합니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>You can adjust their access levels with the access modifiers.</source>
          <target state="translated">액세스 한정자로 액세스 수준을 조정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Function`</ph> procedure can declare the data type of the value that the procedure returns.</source>
          <target state="translated">A <ph id="ph1">`Function`</ph> 프로시저는 프로시저에서 반환 된 값의 데이터 형식을 선언할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>You can specify any data type or the name of an enumeration, a structure, a class, or an interface.</source>
          <target state="translated">모든 데이터 형식이 나 열거형, 구조체, 클래스 또는 인터페이스의 이름을 지정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>If you don't specify the <ph id="ph1">`returntype`</ph> parameter, the procedure returns <ph id="ph2">`Object`</ph>.</source>
          <target state="translated">지정 하지 않으면는 <ph id="ph1">`returntype`</ph> 프로시저에서 반환 하는 매개 변수를 <ph id="ph2">`Object`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>If this procedure uses the <ph id="ph1">`Implements`</ph> keyword, the containing class or structure must also have an <ph id="ph2">`Implements`</ph> statement that immediately follows its <ph id="ph3">`Class`</ph> or <ph id="ph4">`Structure`</ph> statement.</source>
          <target state="translated">이 절차를 사용 하는 경우는 <ph id="ph1">`Implements`</ph> 있어야 키워드를 포함 하는 클래스나 구조체는 <ph id="ph2">`Implements`</ph> 문 바로 뒤에 오는 해당 <ph id="ph3">`Class`</ph> 또는 <ph id="ph4">`Structure`</ph> 문입니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Implements`</ph> statement must include each interface that's specified in <ph id="ph2">`implementslist`</ph>.</source>
          <target state="translated"><ph id="ph1">`Implements`</ph> 문을에 지정 된 각 인터페이스를 포함 해야 <ph id="ph2">`implementslist`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>However, the name by which an interface defines the <ph id="ph1">`Function`</ph> (in <ph id="ph2">`definedname`</ph>) doesn't need to match the name of this procedure (in <ph id="ph3">`name`</ph>).</source>
          <target state="translated">그러나 인터페이스 정의는 이름에서 <ph id="ph1">`Function`</ph> (에서 <ph id="ph2">`definedname`</ph>)이이 프로시저의 이름과 일치 하도록 필요 하지 않습니다 (에서 <ph id="ph3">`name`</ph>).</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>You can use lambda expressions to define function expressions inline.</source>
          <target state="translated">식 인라인 함수를 정의 하려면 람다 식에 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Function Expression<ept id="p1">](../../../visual-basic/language-reference/operators/function-expression.md)</ept> and <bpt id="p2">[</bpt>Lambda Expressions<ept id="p2">](../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>함수 식<ept id="p1">](../../../visual-basic/language-reference/operators/function-expression.md)</ept> 및 <bpt id="p2">[</bpt>람다 식<ept id="p2">](../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Returning from a Function</source>
          <target state="translated">함수에서 반환</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">`Function`</ph> procedure returns to the calling code, execution continues with the statement that follows the statement that called the procedure.</source>
          <target state="translated">경우는 <ph id="ph1">`Function`</ph> 프로시저가 호출 코드로 반환 되 면 실행이 프로시저를 호출한 문 다음에 오는 문을 사용 하 여 계속 합니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>To return a value from a function, you can either assign the value to the function name or include it in a <ph id="ph1">`Return`</ph> statement.</source>
          <target state="translated">함수에서 값을 반환 하려면 함수 이름에 값을 할당 하거나 포함 한 <ph id="ph1">`Return`</ph> 문입니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Return`</ph> statement simultaneously assigns the return value and exits the function, as the following example shows.</source>
          <target state="translated"><ph id="ph1">`Return`</ph> 문은 동시에 반환 값을 할당 하 고 다음 예제와 같이 함수를 종료 합니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#24<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/function-statement_1.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements #&amp;24;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/function-statement_1.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The following example assigns the return value to the function name <ph id="ph1">`myFunction`</ph> and then uses the <ph id="ph2">`Exit Function`</ph> statement to return.</source>
          <target state="translated">함수 이름에 반환 값을 할당 하는 다음 예제에서는 <ph id="ph1">`myFunction`</ph> 다음 사용 하 여는 <ph id="ph2">`Exit Function`</ph> 문을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#23<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/function-statement_2.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements&amp;23;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/function-statement_2.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Exit Function`</ph> and <ph id="ph2">`Return`</ph> statements cause an immediate exit from a <ph id="ph3">`Function`</ph> procedure.</source>
          <target state="translated"><ph id="ph1">`Exit Function`</ph> 및 <ph id="ph2">`Return`</ph> 문을 사용 하면 즉시 종료 한 <ph id="ph3">`Function`</ph> 프로시저입니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Any number of <ph id="ph1">`Exit Function`</ph> and <ph id="ph2">`Return`</ph> statements can appear anywhere in the procedure, and you can mix <ph id="ph3">`Exit Function`</ph> and <ph id="ph4">`Return`</ph> statements.</source>
          <target state="translated">개수에 관계 없이 <ph id="ph1">`Exit Function`</ph> 및 <ph id="ph2">`Return`</ph> 문을 프로시저에서 아무 곳 이나 나타날 수 있으며 혼합할 수 <ph id="ph3">`Exit Function`</ph> 및 <ph id="ph4">`Return`</ph> 문입니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>If you use <ph id="ph1">`Exit Function`</ph> without assigning a value to <ph id="ph2">`name`</ph>, the procedure returns the default value for the data type that's specified in <ph id="ph3">`returntype`</ph>.</source>
          <target state="translated">사용 하는 경우 <ph id="ph1">`Exit Function`</ph> 값을 할당 하지 않고 <ph id="ph2">`name`</ph>에 지정 된 데이터 형식에 대 한 기본 값을 반환 하는 프로시저 <ph id="ph3">`returntype`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`returntype`</ph> isn't specified, the procedure returns <ph id="ph2">`Nothing`</ph>, which is the default value for <ph id="ph3">`Object`</ph>.</source>
          <target state="translated">경우 <ph id="ph1">`returntype`</ph> 지정 하지 않은 경우에 프로시저가 반환 <ph id="ph2">`Nothing`</ph>에 대 한 기본 값 <ph id="ph3">`Object`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Calling a Function</source>
          <target state="translated">함수 호출</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>You call a <ph id="ph1">`Function`</ph> procedure by using the procedure name, followed by the argument list in parentheses, in an expression.</source>
          <target state="translated">호출 된 <ph id="ph1">`Function`</ph> 프로시저 이름 뒤에 식의 괄호 안에 인수 목록을 사용 하 여 프로시저입니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>You can omit the parentheses only if you aren't supplying any arguments.</source>
          <target state="translated">모든 인수를 제공 하지 하는 경우에 괄호를 생략할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>However, your code is more readable if you always include the parentheses.</source>
          <target state="translated">그러나이 코드는 항상 괄호를 포함 하는 경우 보다 읽기 쉬운.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>You call a <ph id="ph1">`Function`</ph> procedure the same way that you call any library function such as <ph id="ph2">`Sqrt`</ph>, <ph id="ph3">`Cos`</ph>, or <ph id="ph4">`ChrW`</ph>.</source>
          <target state="translated">호출을 <ph id="ph1">`Function`</ph> 모든 라이브러리를 호출 하는 동일한 방식으로 같은 함수는 프로시저 <ph id="ph2">`Sqrt`</ph>, <ph id="ph3">`Cos`</ph>, 또는 <ph id="ph4">`ChrW`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>You can also call a function by using the <ph id="ph1">`Call`</ph> keyword.</source>
          <target state="translated">사용 하 여 함수를 호출도 <ph id="ph1">`Call`</ph> 키워드입니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>In that case, the return value is ignored.</source>
          <target state="translated">이 경우 반환 값은 무시 됩니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Use of the <ph id="ph1">`Call`</ph> keyword isn't recommended in most cases.</source>
          <target state="translated">사용은 <ph id="ph1">`Call`</ph> 키워드는 대부분의 경우에 권장 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Call Statement<ept id="p1">](call-statement.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>Call 문을<ept id="p1">](call-statement.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Visual Basic sometimes rearranges arithmetic expressions to increase internal efficiency.</source>
          <target state="translated">Visual Basic에는 산술 식 내부 효율성을 높이기 위해 경우에 따라 다시 정렬 합니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>For that reason, you shouldn't use a <ph id="ph1">`Function`</ph> procedure in an arithmetic expression when the function changes the value of variables in the same expression.</source>
          <target state="translated">이런 이유로 사용 하면 안는 <ph id="ph1">`Function`</ph> 함수 같은 식에서 변수 값이 변경 될 때 산술 식에는 프로시저입니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Async Functions</source>
          <target state="translated">비동기 함수</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>Async<ept id="p1">*</ept> feature allows you to invoke asynchronous functions without using explicit callbacks or manually splitting your code across multiple functions or lambda expressions.</source>
          <target state="translated"><bpt id="p1">*</bpt>비동기<ept id="p1">*</ept> 기능 명시적 콜백을 사용 하거나 수동으로 여러 함수 또는 람다 식에 코드를 분할 하지 않고도 비동기 함수를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>If you mark a function with the <bpt id="p1">[</bpt>Async<ept id="p1">](../../../visual-basic/language-reference/modifiers/async.md)</ept> modifier, you can use the <bpt id="p2">[</bpt>Await<ept id="p2">](../../../visual-basic/language-reference/operators/await-operator.md)</ept> operator in the function.</source>
          <target state="translated">사용 하는 함수를 표시 하는 경우는 <bpt id="p1">[</bpt>비동기<ept id="p1">](../../../visual-basic/language-reference/modifiers/async.md)</ept> 한정자를 사용해는 <bpt id="p2">[</bpt>Await<ept id="p2">](../../../visual-basic/language-reference/operators/await-operator.md)</ept> 함수에서 연산자입니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>When control reaches an <ph id="ph1">`Await`</ph> expression in the <ph id="ph2">`Async`</ph> function, control returns to the caller, and progress in the function is suspended until the awaited task completes.</source>
          <target state="translated">때에 수신 되 면 제어는 <ph id="ph1">`Await`</ph> 식에는 <ph id="ph2">`Async`</ph> 함수, 호출자에 게 제어가 반환 하 고 함수에서 진행 대기 중인된 작업이 완료 될 때까지 일시 중단 합니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>When the task is complete, execution can resume in the function.</source>
          <target state="translated">작업이 완료 되 면 실행 함수에서 다시 시작할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`Async`</ph> procedure returns to the caller when either it encounters the first awaited object that’s not yet complete, or it gets to the end of the <ph id="ph2">`Async`</ph> procedure, whichever occurs first.</source>
          <target state="translated"><ph id="ph1">`Async`</ph> 의 끝에 도달 하거나 아직 완료 되지 않은 첫 번째 대기 중이 던된 개체 발생 하거나 프로시저가 호출자에 게 반환 된 <ph id="ph2">`Async`</ph> 프로시저 중 먼저 발생 합니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`Async`</ph> function can have a return type of &lt;xref:System.Threading.Tasks.Task%601&gt; or &lt;xref:System.Threading.Tasks.Task&gt;.</source>
          <target state="translated"><ph id="ph1">`Async`</ph> 함수 &lt;xref:System.Threading.Tasks.Task%601&gt;또는 &lt;xref:System.Threading.Tasks.Task&gt;.&lt;/xref:System.Threading.Tasks.Task&gt; &lt;/xref:System.Threading.Tasks.Task%601&gt; 의 반환 형식을 가질 수 있습니다</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>An example of an <ph id="ph1">`Async`</ph> function that has a return type of &lt;xref:System.Threading.Tasks.Task%601&gt; is provided below.</source>
          <target state="translated">예로 <ph id="ph1">`Async`</ph> 의 반환 형식을 갖는 함수 &lt;xref:System.Threading.Tasks.Task%601&gt;아래에 나와 있습니다.&lt;/xref:System.Threading.Tasks.Task%601&gt;</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`Async`</ph> function cannot declare any <bpt id="p1">[</bpt>ByRef<ept id="p1">](../../../visual-basic/language-reference/modifiers/byref.md)</ept> parameters.</source>
          <target state="translated"><ph id="ph1">`Async`</ph> 모든 함수를 선언할 수 없습니다 <bpt id="p1">[</bpt>ByRef<ept id="p1">](../../../visual-basic/language-reference/modifiers/byref.md)</ept> 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>Sub Statement<ept id="p1">](sub-statement.md)</ept> can also be marked with the <ph id="ph1">`Async`</ph> modifier.</source>
          <target state="translated">A <bpt id="p1">[</bpt>Sub 문을<ept id="p1">](sub-statement.md)</ept> 로 표시할 수 있습니다는 <ph id="ph1">`Async`</ph> 한정자입니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>This is primarily used for event handlers, where a value cannot be returned.</source>
          <target state="translated">이 주로 사용 이벤트 처리기에 대 한 값을 반환할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`Async``Sub`</ph> procedure can't be awaited, and the caller of an <ph id="ph2">`Async``Sub`</ph> procedure can't catch exceptions that are thrown by the <ph id="ph3">`Sub`</ph> procedure.</source>
          <target state="translated"><ph id="ph1">`Async``Sub`</ph> 프로시저 대기할 수 없습니다 및의 호출자는 <ph id="ph2">`Async``Sub`</ph> 프로시저에 의해 throw 되는 예외를 catch 할 수 없습니다는 <ph id="ph3">`Sub`</ph> 프로시저입니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>For more information about <ph id="ph1">`Async`</ph> functions, see <bpt id="p1">[</bpt>Asynchronous Programming with Async and Await<ept id="p1">](../../../visual-basic/programming-guide/concepts/async/index.md)</ept>, <bpt id="p2">[</bpt>Control Flow in Async Programs<ept id="p2">](../../../visual-basic/programming-guide/concepts/async/control-flow-in-async-programs.md)</ept>, and <bpt id="p3">[</bpt>Async Return Types<ept id="p3">](../../../visual-basic/programming-guide/concepts/async/async-return-types.md)</ept>.</source>
          <target state="translated">에 대 한 자세한 내용은 <ph id="ph1">`Async`</ph> 함수 참조 <bpt id="p1">[</bpt>Async 및 Await를 사용한 비동기 프로그래밍<ept id="p1">](../../../visual-basic/programming-guide/concepts/async/index.md)</ept>, <bpt id="p2">[</bpt>비동기 프로그램의 제어 흐름<ept id="p2">](../../../visual-basic/programming-guide/concepts/async/control-flow-in-async-programs.md)</ept>, 및 <bpt id="p3">[</bpt>비동기 반환 형식<ept id="p3">](../../../visual-basic/programming-guide/concepts/async/async-return-types.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Iterator Functions</source>
          <target state="translated">반복기 함수</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">*</bpt>iterator<ept id="p1">*</ept> function performs a custom iteration over a collection, such as a list or array.</source>
          <target state="translated"><bpt id="p1">*</bpt>반복기<ept id="p1">*</ept> 함수 등 목록 또는 배열로 컬렉션에 대해 사용자 지정 반복을 수행 합니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>An iterator function uses the <bpt id="p1">[</bpt>Yield<ept id="p1">](yield-statement.md)</ept> statement to return each element one at a time.</source>
          <target state="translated">반복기 함수를 사용 하 여는 <bpt id="p1">[</bpt>Yield<ept id="p1">](yield-statement.md)</ept> 문을 한 번에 각 요소를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>When a <bpt id="p1">[</bpt>Yield<ept id="p1">](yield-statement.md)</ept> statement is reached, the current location in code is remembered.</source>
          <target state="translated">경우는 <bpt id="p1">[</bpt>생성<ept id="p1">](yield-statement.md)</ept> 문에 도달 하면, 코드에서 현재 위치 기억 됩니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Execution is restarted from that location the next time the iterator function is called.</source>
          <target state="translated">실행이 다시 시작 해당 위치에서 다음에 반복기 함수가 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>You call an iterator from client code by using a <bpt id="p1">[</bpt>For Each…Next<ept id="p1">](for-each-next-statement.md)</ept> statement.</source>
          <target state="translated">반복기를 사용 하 여 호출 클라이언트 코드에서 한 <bpt id="p1">[</bpt>각각에 대해... 다음<ept id="p1">](for-each-next-statement.md)</ept> 문입니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The return type of an iterator function can be &lt;xref:System.Collections.IEnumerable&gt;, &lt;xref:System.Collections.Generic.IEnumerable%601&gt;, &lt;xref:System.Collections.IEnumerator&gt;, or &lt;xref:System.Collections.Generic.IEnumerator%601&gt;.</source>
          <target state="translated">반복기 함수의 반환 형식은 &lt;xref:System.Collections.IEnumerable&gt;, &lt;xref:System.Collections.Generic.IEnumerable%601&gt;, &lt;xref:System.Collections.IEnumerator&gt;, 또는 &lt;xref:System.Collections.Generic.IEnumerator%601&gt;.&lt;/xref:System.Collections.Generic.IEnumerator%601&gt; &lt;/xref:System.Collections.IEnumerator&gt; &lt;/xref:System.Collections.Generic.IEnumerable%601&gt; &lt;/xref:System.Collections.IEnumerable&gt;</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Iterators<ept id="p1">](http://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7)</ept>.</source>
          <target state="translated">자세한 내용은 <bpt id="p1">[</bpt>반복기<ept id="p1">](http://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7)</ept>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">예제</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The following example uses the <ph id="ph1">`Function`</ph> statement to declare the name, parameters, and code that form the body of a <ph id="ph2">`Function`</ph> procedure.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">`Function`</ph> 이름, 매개 변수, 및의 본문을 형성 하는 코드를 선언 하는 문에 <ph id="ph2">`Function`</ph> 프로시저입니다.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ParamArray`</ph> modifier enables the function to accept a variable number of arguments.</source>
          <target state="translated"><ph id="ph1">`ParamArray`</ph> 한정자를 사용 하면 여러 개의 인수를 수락 하는 함수입니다.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#25<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/function-statement_3.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements #&amp;25;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/function-statement_3.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">예제</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The following example invokes the function declared in the preceding example.</source>
          <target state="translated">다음 예제에서는 앞의 예제에서 선언한 함수를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#26<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/function-statement_4.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements #&amp;26;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/function-statement_4.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">예제</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>In the following example, <ph id="ph1">`DelayAsync`</ph> is an <ph id="ph2">`Async``Function`</ph> that has a return type of &lt;xref:System.Threading.Tasks.Task%601&gt;.</source>
          <target state="translated">다음 예에서 <ph id="ph1">`DelayAsync`</ph> 는 <ph id="ph2">`Async``Function`</ph> &lt;xref:System.Threading.Tasks.Task%601&gt;.&lt;/xref:System.Threading.Tasks.Task%601&gt; 의 반환 형식이 있는</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DelayAsync`</ph> has a <ph id="ph2">`Return`</ph> statement that returns an integer.</source>
          <target state="translated"><ph id="ph1">`DelayAsync`</ph>에는 정수를 반환하는 <ph id="ph2">`Return`</ph> 문이 포함됩니다.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Therefore the function declaration of <ph id="ph1">`DelayAsync`</ph> needs to have a return type of <ph id="ph2">`Task(Of Integer)`</ph>.</source>
          <target state="translated">따라서 함수 선언의 <ph id="ph1">`DelayAsync`</ph> 반환 형식이 있어야 하며 <ph id="ph2">`Task(Of Integer)`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Because the return type is <ph id="ph1">`Task(Of Integer)`</ph>, the evaluation of the <ph id="ph2">`Await`</ph> expression in <ph id="ph3">`DoSomethingAsync`</ph> produces an integer.</source>
          <target state="translated">반환 형식이 이기 <ph id="ph1">`Task(Of Integer)`</ph>, 평가 <ph id="ph2">`Await`</ph> 식 <ph id="ph3">`DoSomethingAsync`</ph> 정수를 생성 합니다.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>This is demonstrated in this statement: <ph id="ph1">`Dim result As Integer = Await delayTask`</ph>.</source>
          <target state="translated">이 문에서이 확인할: <ph id="ph1">`Dim result As Integer = Await delayTask`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`startButton_Click`</ph> procedure is an example of an <ph id="ph2">`Async Sub`</ph> procedure.</source>
          <target state="translated"><ph id="ph1">`startButton_Click`</ph> 프로시저의 한 예로 <ph id="ph2">`Async Sub`</ph> 프로시저입니다.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">`DoSomethingAsync`</ph> is an <ph id="ph2">`Async`</ph> function, the task for the call to <ph id="ph3">`DoSomethingAsync`</ph> must be awaited, as the following statement demonstrates: <ph id="ph4">`Await DoSomethingAsync()`</ph>.</source>
          <target state="translated">때문에 <ph id="ph1">`DoSomethingAsync`</ph> 는 <ph id="ph2">`Async`</ph> 함수, 작업에 대 한 호출에 대 한 <ph id="ph3">`DoSomethingAsync`</ph> 다음 문 에서처럼 대기할 수 해야: <ph id="ph4">`Await DoSomethingAsync()`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`startButton_Click``Sub`</ph> procedure must be defined with the <ph id="ph2">`Async`</ph> modifier because it has an <ph id="ph3">`Await`</ph> expression.</source>
          <target state="translated"><ph id="ph1">`startButton_Click``Sub`</ph> 으로 프로시저를 정의 해야는 <ph id="ph2">`Async`</ph> 한정자 되었기 때문에 <ph id="ph3">`Await`</ph> 식입니다.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>csAsyncMethod#1<ept id="p2">](../../../csharp/programming-guide/classes-and-structs/codesnippet/VisualBasic/function-statement_5.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>csAsyncMethod&amp;#1;<ept id="p2">](../../../csharp/programming-guide/classes-and-structs/codesnippet/VisualBasic/function-statement_5.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">참고 항목</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Sub Statement<ept id="p1">](sub-statement.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Sub 문<ept id="p1">](sub-statement.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Function Procedures<ept id="p1">](../../../visual-basic/programming-guide/language-features/procedures/function-procedures.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Function 프로시저<ept id="p1">](../../../visual-basic/programming-guide/language-features/procedures/function-procedures.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Parameter List<ept id="p1">](parameter-list.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>매개 변수 목록<ept id="p1">](parameter-list.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Dim Statement<ept id="p1">](dim-statement.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Dim 문<ept id="p1">](dim-statement.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Call Statement<ept id="p1">](call-statement.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Call 문<ept id="p1">](call-statement.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Of<ept id="p1">](of-clause.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Of<ept id="p1">](of-clause.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Parameter Arrays<ept id="p1">](../../../visual-basic/programming-guide/language-features/procedures/parameter-arrays.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>매개 변수 배열<ept id="p1">](../../../visual-basic/programming-guide/language-features/procedures/parameter-arrays.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Use a Generic Class<ept id="p1">](../../../visual-basic/programming-guide/language-features/data-types/how-to-use-a-generic-class.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>방법: 제네릭 클래스 사용<ept id="p1">](../../../visual-basic/programming-guide/language-features/data-types/how-to-use-a-generic-class.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Troubleshooting Procedures<ept id="p1">](../../../visual-basic/programming-guide/language-features/procedures/troubleshooting-procedures.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>문제 해결 절차<ept id="p1">](../../../visual-basic/programming-guide/language-features/procedures/troubleshooting-procedures.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Lambda Expressions<ept id="p1">](../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>람다 식<ept id="p1">](../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Function Expression<ept id="p1">](../../../visual-basic/language-reference/operators/function-expression.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>함수 식<ept id="p1">](../../../visual-basic/language-reference/operators/function-expression.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>