<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6e18f7ceefeec9c1f422d0eae4e727700ebd8b6e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\procedures\how-to-protect-a-procedure-argument-against-value-changes.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e2804bee417c8af423839ab36812adb4a89edc3a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">623748c2ba3bcd6d3e110285812581aa199592da</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Protect a Procedure Argument Against Value Changes (Visual Basic) | Microsoft Docs</source>
          <target state="translated">방법: 값 변경 (Visual Basic)에 대해 프로시저 인수 보호 | Microsoft 문서</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Protect a Procedure Argument Against Value Changes (Visual Basic)</source>
          <target state="translated">방법: 값 변경에 대해 프로시저 인수 보호(Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>If a procedure declares a parameter as <bpt id="p1">[</bpt>ByRef<ept id="p1">](../../../../visual-basic/language-reference/modifiers/byref.md)</ept>, <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> gives the procedure code a direct reference to the programming element underlying the argument in the calling code.</source>
          <target state="translated">프로시저는 매개 변수를 선언 하는 경우 <bpt id="p1">[</bpt>ByRef<ept id="p1">](../../../../visual-basic/language-reference/modifiers/byref.md)</ept>, <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> 프로시저 코드에 호출 코드에서 인수를 기본 프로그래밍 요소에 대 한 직접 참조를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This permits the procedure to change the value underlying the argument in the calling code.</source>
          <target state="translated">이렇게 하면 호출 코드에서 인수를 내부 값을 변경 하는 절차입니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In some cases the calling code might want to protect against such a change.</source>
          <target state="translated">일부 경우에 호출 코드에서 이러한 변경 으로부터 보호 할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You can always protect an argument from change by declaring the corresponding parameter <bpt id="p1">[</bpt>ByVal<ept id="p1">](../../../../visual-basic/language-reference/modifiers/byval.md)</ept> in the procedure.</source>
          <target state="translated">해당 매개 변수를 선언 하 여 변경에서 인수를 항상 방지할 수 있습니다 <bpt id="p1">[</bpt>ByVal<ept id="p1">](../../../../visual-basic/language-reference/modifiers/byval.md)</ept> 절차에서입니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If you want to be able to change a given argument in some cases but not others, you can declare it <ph id="ph1">`ByRef`</ph> and let the calling code determine the passing mechanism in each call.</source>
          <target state="translated">일부 경우에는 지정 된 인수가 변경 하려는 경우 파일에 선언할 수 <ph id="ph1">`ByRef`</ph> 호출 코드에서 각 호출에 전달 메커니즘을 결정 하도록 합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>It does this by enclosing the corresponding argument in parentheses to pass it by value, or not enclosing it in parentheses to pass it by reference.</source>
          <target state="translated">해당 하는 인수를 값에 의해 전달를 괄호로 묶어 또는 참조로 전달 하는 괄호에 포함 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Force an Argument to Be Passed by Value<ept id="p1">](./how-to-force-an-argument-to-be-passed-by-value.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>하는 방법: 인수가 값으로 전달 되도록 설정<ept id="p1">](./how-to-force-an-argument-to-be-passed-by-value.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">예제</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The following example shows two procedures that take an array variable and operate on its elements.</source>
          <target state="translated">다음 예제에서는 요소를 사용 하는 배열 변수를 받아 두 가지 절차를 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`increase`</ph> procedure simply adds one to each element.</source>
          <target state="translated"><ph id="ph1">`increase`</ph> 프로시저 단순히 각 요소에&amp;1;을 추가 합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`replace`</ph> procedure assigns a new array to the parameter <ph id="ph2">`a()`</ph> and then adds one to each element.</source>
          <target state="translated"><ph id="ph1">`replace`</ph> 프로시저 매개 변수에 새 배열을 할당 <ph id="ph2">`a()`</ph> 다음 각 요소에&amp;1;을 추가 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>However, the reassignment does not affect the underlying array variable in the calling code.</source>
          <target state="translated">그러나 다시 할당 호출 코드의 내부 배열 변수 영향을 주지 않습니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnProcedures#35<ept id="p2">](./codesnippet/VisualBasic/how-to-protect-a-procedure-argument-against-value-changes_1.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnProcedures #&amp;35;<ept id="p2">](./codesnippet/VisualBasic/how-to-protect-a-procedure-argument-against-value-changes_1.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnProcedures#38<ept id="p2">](./codesnippet/VisualBasic/how-to-protect-a-procedure-argument-against-value-changes_2.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnProcedures #&amp;38;<ept id="p2">](./codesnippet/VisualBasic/how-to-protect-a-procedure-argument-against-value-changes_2.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnProcedures#37<ept id="p2">](./codesnippet/VisualBasic/how-to-protect-a-procedure-argument-against-value-changes_3.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnProcedures #&amp;37;<ept id="p2">](./codesnippet/VisualBasic/how-to-protect-a-procedure-argument-against-value-changes_3.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The first <ph id="ph1">`MsgBox`</ph> call displays "After increase(n): 11, 21, 31, 41".</source>
          <target state="translated">첫 번째 <ph id="ph1">`MsgBox`</ph> 표시 호출 "increase(n) 후: 11, 21, 31, 41"입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Because the array <ph id="ph1">`n`</ph> is a reference type, <ph id="ph2">`replace`</ph> can change its members, even though the passing mechanism is <ph id="ph3">`ByVal`</ph>.</source>
          <target state="translated">때문에 배열의 <ph id="ph1">`n`</ph> 참조 형식인 <ph id="ph2">`replace`</ph> 전달 메커니즘은 경우에 해당 멤버를 변경할 수 <ph id="ph3">`ByVal`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The second <ph id="ph1">`MsgBox`</ph> call displays "After replace(n): 11, 21, 31, 41".</source>
          <target state="translated">두 번째 <ph id="ph1">`MsgBox`</ph> 표시 호출 "replace(n) 후: 11, 21, 31, 41"입니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">`n`</ph> is passed <ph id="ph2">`ByVal`</ph>, <ph id="ph3">`replace`</ph> cannot modify the variable <ph id="ph4">`n`</ph> in the calling code by assigning a new array to it.</source>
          <target state="translated">때문에 <ph id="ph1">`n`</ph> 전달 <ph id="ph2">`ByVal`</ph>, <ph id="ph3">`replace`</ph> 변수를 수정할 수 없습니다 <ph id="ph4">`n`</ph> 새 배열에 할당 하 여 호출 코드에서.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`replace`</ph> creates the new array instance <ph id="ph2">`k`</ph> and assigns it to the local variable <ph id="ph3">`a`</ph>, it loses the reference to <ph id="ph4">`n`</ph> passed in by the calling code.</source>
          <target state="translated">때 <ph id="ph1">`replace`</ph> 새 배열 인스턴스를 만듭니다 <ph id="ph2">`k`</ph> 로컬 변수에 할당 하 고 <ph id="ph3">`a`</ph>에 대 한 참조를 잃을 <ph id="ph4">`n`</ph> 호출 코드에 의해 전달 된 합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>When it changes the members of <ph id="ph1">`a`</ph>, only the local array <ph id="ph2">`k`</ph> is affected.</source>
          <target state="translated">멤버를 변경할 때 <ph id="ph1">`a`</ph>, 지역 배열만 <ph id="ph2">`k`</ph> 영향을 받습니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Therefore, <ph id="ph1">`replace`</ph> does not increment the values of array <ph id="ph2">`n`</ph> in the calling code.</source>
          <target state="translated">따라서 <ph id="ph1">`replace`</ph> 배열의 값을 늘리지 않습니다 <ph id="ph2">`n`</ph> 호출 코드에서.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Compiling the Code</source>
          <target state="translated">코드 컴파일</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The default in <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> is to pass arguments by value.</source>
          <target state="translated">대화 상자에서 기본 <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> 값으로 인수를 전달 하는 것입니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>However, it is good programming practice to include either the <bpt id="p1">[</bpt>ByVal<ept id="p1">](../../../../visual-basic/language-reference/modifiers/byval.md)</ept> or <bpt id="p2">[</bpt>ByRef<ept id="p2">](../../../../visual-basic/language-reference/modifiers/byref.md)</ept> keyword with every declared parameter.</source>
          <target state="translated">그러나 것이 바람직한 프로그래밍 습관 하나를 포함 하는 <bpt id="p1">[</bpt>ByVal<ept id="p1">](../../../../visual-basic/language-reference/modifiers/byval.md)</ept> 또는 <bpt id="p2">[</bpt>ByRef<ept id="p2">](../../../../visual-basic/language-reference/modifiers/byref.md)</ept> 키워드 선언 된 모든 매개 변수를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This makes your code easier to read.</source>
          <target state="translated">이렇게 하면 코드를 보다 쉽게 읽을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">참고 항목</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Procedures<ept id="p1">](./index.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>프로시저<ept id="p1">](./index.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Procedure Parameters and Arguments<ept id="p1">](./procedure-parameters-and-arguments.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>프로시저 매개 변수 및 인수<ept id="p1">](./procedure-parameters-and-arguments.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Pass Arguments to a Procedure<ept id="p1">](./how-to-pass-arguments-to-a-procedure.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>방법: 프로시저에 인수 전달<ept id="p1">](./how-to-pass-arguments-to-a-procedure.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Passing Arguments by Value and by Reference<ept id="p1">](./passing-arguments-by-value-and-by-reference.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>값 및 참조로 인수 전달<ept id="p1">](./passing-arguments-by-value-and-by-reference.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Differences Between Modifiable and Nonmodifiable Arguments<ept id="p1">](./differences-between-modifiable-and-nonmodifiable-arguments.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>수정할 수 있는 인수와 수정할 수 없는 인수 사이의 차이점<ept id="p1">](./differences-between-modifiable-and-nonmodifiable-arguments.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Differences Between Passing an Argument By Value and By Reference<ept id="p1">](./differences-between-passing-an-argument-by-value-and-by-reference.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>참조 및 값으로 인수를 전달 간의 차이점<ept id="p1">](./differences-between-passing-an-argument-by-value-and-by-reference.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Change the Value of a Procedure Argument<ept id="p1">](./how-to-change-the-value-of-a-procedure-argument.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>방법: 프로시저 인수의 값 변경<ept id="p1">](./how-to-change-the-value-of-a-procedure-argument.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Force an Argument to Be Passed by Value<ept id="p1">](./how-to-force-an-argument-to-be-passed-by-value.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>방법: 인수가 값으로 전달 되도록 설정<ept id="p1">](./how-to-force-an-argument-to-be-passed-by-value.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Passing Arguments by Position and by Name<ept id="p1">](./passing-arguments-by-position-and-by-name.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>위치 및 이름으로 인수 전달<ept id="p1">](./passing-arguments-by-position-and-by-name.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Value Types and Reference Types<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>값 형식과 참조 형식<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>