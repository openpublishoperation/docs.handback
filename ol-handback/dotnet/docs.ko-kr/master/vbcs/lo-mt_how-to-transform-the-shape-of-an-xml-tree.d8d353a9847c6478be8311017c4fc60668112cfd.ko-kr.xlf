<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9c71f4af829a395204bc17161547aa5fdd06cbb1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\linq\how-to-transform-the-shape-of-an-xml-tree.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">569c563ee021fb8b1d96a6d6f7a2aa8fc2aaa636</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e03f224523a143bdb27e30a642f38b9cb494fbf6</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Transform the Shape of an XML Tree (Visual Basic) | Microsoft Docs</source>
          <target state="translated">방법: XML 트리 (Visual Basic)의 모양을 변환 | Microsoft 문서</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Transform the Shape of an XML Tree (Visual Basic)</source>
          <target state="translated">방법: (Visual Basic) XML 트리의 모양 변환</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>shape<ept id="p1">*</ept> of an XML document refers to its element names, attribute names, and the characteristics of its hierarchy.</source>
          <target state="translated"><bpt id="p1">*</bpt>셰이프<ept id="p1">*</ept> XML 문서 요소 이름, 특성 이름 및 계층 구조의 특징을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Sometimes you will have to change the shape of an XML document.</source>
          <target state="translated">XML 문서의 모양을 변경해야 하는 경우가 있습니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For example, you might have to send an existing XML document to another system that requires different element and attribute names.</source>
          <target state="translated">예를 들어, 다른 요소 및 특성 이름이 필요한 다른 시스템에 기존 XML 문서를 보내야 할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You could go through the document, deleting and renaming elements as required, but using functional construction results in more readable and maintainable code.</source>
          <target state="translated">문서를 살펴보면서 필요에 따라 요소를 삭제하고 요소의 이름을 바꿀 수 있지만 함수 생성을 사용하면 읽고 유지 관리하기가 더 쉬운 코드가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For more information about functional construction, see <bpt id="p1">[</bpt>Functional Construction (LINQ to XML) (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/functional-construction-linq-to-xml.md)</ept>.</source>
          <target state="translated">함수 생성에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>함수 생성 (LINQ to XML) (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/functional-construction-linq-to-xml.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The first example changes the organization of the XML document.</source>
          <target state="translated">첫 번째 예제에서는 XML 문서의 구성을 변경하고</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>It moves complex elements from one location in the tree to another.</source>
          <target state="translated">트리의 한 위치에서 다른 위치로 복합 요소를 이동합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The second example in this topic creates an XML document with a different shape than the source document.</source>
          <target state="translated">이 항목의 두 번째 예제에서는 소스 문서와 모양이 다른 XML 문서를 만들고</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>It changes the casing of the element names, renames some elements, and leaves some elements from the source tree out of the transformed tree.</source>
          <target state="translated">요소 이름의 대/소문자를 변경한 다음 일부 요소의 이름을 바꾸고 소스 트리의 일부 요소를 변형된 트리 외부에 둡니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">예제</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The following code changes the shape of an XML file using embedded query expressions.</source>
          <target state="translated">다음 코드에서는 포함된 쿼리 식을 사용하여 XML 파일의 모양을 변경합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The source XML document in this example contains a <ph id="ph1">`Customers`</ph> element under the <ph id="ph2">`Root`</ph> element that contains all customers.</source>
          <target state="translated">이 예제의 소스 XML 문서에는 <ph id="ph1">`Customers`</ph> 요소 아래에 모든 고객이 포함된 <ph id="ph2">`Root`</ph> 요소가 들어 있습니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>It also contains an <ph id="ph1">`Orders`</ph> element under the <ph id="ph2">`Root`</ph> element that contains all orders.</source>
          <target state="translated">또한 <ph id="ph1">`Orders`</ph> 요소 아래에 모든 주문이 포함된 <ph id="ph2">`Root`</ph> 요소도 포함되어 있습니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This example creates a new XML tree in which the orders for each customer are contained in an <ph id="ph1">`Orders`</ph> element within the <ph id="ph2">`Customer`</ph> element.</source>
          <target state="translated">이 예제에서는 각 고객의 주문이 <ph id="ph1">`Orders`</ph> 요소에 있는 <ph id="ph2">`Customer`</ph> 요소에 포함되어 있는 새 XML 트리를 만듭니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The original document also contains a <ph id="ph1">`CustomerID`</ph> element in the <ph id="ph2">`Order`</ph> element; this element will be removed from the re-shaped document.</source>
          <target state="translated">원래 문서에도 <ph id="ph1">`CustomerID`</ph> 요소에 <ph id="ph2">`Order`</ph> 요소가 포함되어 있습니다. 이 요소는 모양이 다시 변경된 문서에서 제거됩니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This example uses the following XML document: <bpt id="p1">[</bpt>Sample XML File: Customers and Orders (LINQ to XML)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-customers-and-orders-linq-to-xml.md)</ept>.</source>
          <target state="translated">이 예제에서는 다음 XML 문서: <bpt id="p1">[</bpt>샘플 XML 파일: Customers 및 Orders (LINQ to XML)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-customers-and-orders-linq-to-xml.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This code produces the following output:</source>
          <target state="translated">이 코드의 결과는 다음과 같습니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">예제</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This example renames some elements and converts some attributes to elements.</source>
          <target state="translated">이 예제에서는 일부 요소의 이름을 바꾸고 일부 특성을 요소로 변환합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The code calls <ph id="ph1">`ConvertAddress`</ph>, which returns a list of &lt;xref:System.Xml.Linq.XElement&gt; objects.</source>
          <target state="translated">코드를 호출 하 여 <ph id="ph1">`ConvertAddress`</ph>, 목록을 반환 하는 &lt;xref:System.Xml.Linq.XElement&gt;개체.&lt;/xref:System.Xml.Linq.XElement&gt;</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The argument to the method is a query that determines the <ph id="ph1">`Address`</ph> complex element where the <ph id="ph2">`Type`</ph> attribute has a value of <ph id="ph3">`"Shipping"`</ph>.</source>
          <target state="translated">메서드의 인수는 <ph id="ph1">`Address`</ph> 특성의 값이 <ph id="ph2">`Type`</ph>인 <ph id="ph3">`"Shipping"`</ph> 복합 요소를 확인하는 쿼리입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This example uses the following XML document: <bpt id="p1">[</bpt>Sample XML File: Typical Purchase Order (LINQ to XML)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-typical-purchase-order-linq-to-xml.md)</ept>.</source>
          <target state="translated">이 예제에서는 다음 XML 문서: <bpt id="p1">[</bpt>샘플 XML 파일: 일반적인 구매 주문 (LINQ to XML)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-typical-purchase-order-linq-to-xml.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This code produces the following output:</source>
          <target state="translated">이 코드의 결과는 다음과 같습니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">참고 항목</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Projections and Transformations (LINQ to XML) (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/projections-and-transformations-linq-to-xml.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>프로젝션 및 변환 (LINQ to XML) (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/projections-and-transformations-linq-to-xml.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>