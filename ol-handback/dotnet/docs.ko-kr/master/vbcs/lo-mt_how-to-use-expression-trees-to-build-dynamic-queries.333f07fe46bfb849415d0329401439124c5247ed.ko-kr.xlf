<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8d69be78a9f3568535dffe54e21af80c6eb12f70</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\expression-trees\how-to-use-expression-trees-to-build-dynamic-queries.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">373b8a8fc0c201e4eed272ad879402d41b6f3d07</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b9817e7381cf934a3f18c41b5c1ba90dd3226148</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Use Expression Trees to Build Dynamic Queries (Visual Basic) | Microsoft Docs</source>
          <target state="translated">방법: 식 트리를 사용 하 여 동적 쿼리 (Visual Basic) 빌드 | Microsoft 문서</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Use Expression Trees to Build Dynamic Queries (Visual Basic)</source>
          <target state="translated">방법: 식 트리를 사용 하 여 동적 쿼리 (Visual Basic) 빌드</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>In LINQ, expression trees are used to represent structured queries that target sources of data that implement &lt;xref:System.Linq.IQueryable%601&gt;.</source>
          <target state="translated">Linq에서는 식 트리는 소스를 나타내는 구조화 된 쿼리를 해당 대상 &lt;xref:System.Linq.IQueryable%601&gt;.&lt;/xref:System.Linq.IQueryable%601&gt; 를 구현 하는 데이터의 사용</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For example, the LINQ provider implements the &lt;xref:System.Linq.IQueryable%601&gt; interface for querying relational data stores.</source>
          <target state="translated">예를 들어, LINQ 공급자 구현에서 &lt;xref:System.Linq.IQueryable%601&gt;관계형 데이터 저장소를 쿼리 하기 위한 인터페이스입니다.&lt;/xref:System.Linq.IQueryable%601&gt;</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The Visual Basic compiler compiles queries that target such data sources into code that builds an expression tree at runtime.</source>
          <target state="translated">Visual Basic 컴파일러는 런타임에 식 트리를 작성 하는 코드에 이러한 데이터 소스를 대상으로 하는 쿼리를 컴파일합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The query provider can then traverse the expression tree data structure and translate it into a query language appropriate for the data source.</source>
          <target state="translated">그런 다음 쿼리 공급자 식 트리 데이터 구조를 탐색 하 고 데이터 원본에 대 한 적절 한 쿼리 언어로 변환할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Expression trees are also used in LINQ to represent lambda expressions that are assigned to variables of type &lt;xref:System.Linq.Expressions.Expression%601&gt;.</source>
          <target state="translated">&lt;xref:System.Linq.Expressions.Expression%601&gt;.&lt;/xref:System.Linq.Expressions.Expression%601&gt; 형식의 변수에 할당 된 람다 식을 나타내는 데 LINQ 식 트리는 또한 사용</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This topic describes how to use expression trees to create dynamic LINQ queries.</source>
          <target state="translated">이 항목에서는 동적 LINQ 쿼리를 만드는 식 트리를 사용 하는 방법에 설명 합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Dynamic queries are useful when the specifics of a query are not known at compile time.</source>
          <target state="translated">동적 쿼리는 컴파일 시 쿼리의 세부 사항을 알 수 없는 경우에 유용 합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For example, an application might provide a user interface that enables the end user to specify one or more predicates to filter the data.</source>
          <target state="translated">예를 들어, 응용 프로그램은 최종 사용자는 데이터를 필터링 하는 하나 이상의 조건자를 지정할 수 있게 하는 사용자 인터페이스를 제공할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In order to use LINQ for querying, this kind of application must use expression trees to create the LINQ query at runtime.</source>
          <target state="translated">LINQ 쿼리를 사용 하려면 이러한 유형의 응용 프로그램에서 런타임에 LINQ 쿼리를 만드는 식 트리를 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">예제</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The following example shows you how to use expression trees to construct a query against an <ph id="ph1">`IQueryable`</ph> data source and then execute it.</source>
          <target state="translated">다음 예제에서는 식 트리 생성에 대 한 쿼리를 사용 하는 방법을 보여 줍니다.는 <ph id="ph1">`IQueryable`</ph> 데이터 소스를 실행 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The code builds an expression tree to represent the following query:</source>
          <target state="translated">코드는 다음 쿼리를 나타내는 식 트리를 작성 합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The factory methods in the &lt;xref:System.Linq.Expressions&gt; namespace are used to create expression trees that represent the expressions that make up the overall query.</source>
          <target state="translated">팩터리 메서드는 &lt;xref:System.Linq.Expressions&gt;네임 스페이스는 전체 쿼리를 구성 하는 식을 나타내는 식 트리를 만드는 데 사용 됩니다.&lt;/xref:System.Linq.Expressions&gt;</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The expressions that represent calls to the standard query operator methods refer to the &lt;xref:System.Linq.Queryable&gt; implementations of these methods.</source>
          <target state="translated">표준 쿼리 연산자 메서드 호출을 나타내는 식 참조는 &lt;xref:System.Linq.Queryable&gt;이러한 메서드의 구현입니다.&lt;/xref:System.Linq.Queryable&gt;</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The final expression tree is passed to the &lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt; implementation of the provider of the <ph id="ph1">`IQueryable`</ph> data source to create an executable query of type <ph id="ph2">`IQueryable`</ph>.</source>
          <target state="translated">최종 식 트리가 전달 되는 &lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;의 공급자 구현에서 <ph id="ph1">`IQueryable`</ph> 형식의 실행 가능한 쿼리를 만들 때 데이터 원본 <ph id="ph2">`IQueryable`</ph>.&lt;/xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The results are obtained by enumerating that query variable.</source>
          <target state="translated">결과 해당 쿼리 변수를 열거 하 여 가져옵니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>0<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>0<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This code uses a fixed number of expressions in the predicate that is passed to the <ph id="ph1">`Queryable.Where`</ph> method.</source>
          <target state="translated">이 코드는 고정된 된 수의 식에 전달 되는 조건자에 사용 하 여는 <ph id="ph1">`Queryable.Where`</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>However, you can write an application that combines a variable number of predicate expressions that depends on the user input.</source>
          <target state="translated">그러나 사용자 입력에 의존 하는 조건자 식의 변수 숫자를 결합 하는 응용 프로그램을 작성할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>You can also vary the standard query operators that are called in the query, depending on the input from the user.</source>
          <target state="translated">사용자의 입력에 따라 쿼리에서 호출 된 표준 쿼리 연산자를 변경할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Compiling the Code</source>
          <target state="translated">코드 컴파일</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Create a new <bpt id="p1">**</bpt>Console Application<ept id="p1">**</ept> project.</source>
          <target state="translated">새 <bpt id="p1">**</bpt>콘솔 응용 프로그램<ept id="p1">**</ept> 프로젝트입니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Add a reference to System.Core.dll if it is not already referenced.</source>
          <target state="translated">아직 참조 하지 않는 경우 System.Core.dll에 대 한 참조를 추가 합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Include the System.Linq.Expressions namespace.</source>
          <target state="translated">System.Linq.Expressions 네임 스페이스를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Copy the code from the example and paste it into the <ph id="ph1">`Main`</ph> <ph id="ph2">`Sub`</ph> procedure.</source>
          <target state="translated">이 예제에서 코드를 복사 하 고 붙여 넣습니다는 <ph id="ph1">`Main`</ph> <ph id="ph2">`Sub`</ph> 프로시저입니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">참고 항목</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Expression Trees (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/expression-trees/index.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>식 트리 (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/expression-trees/index.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Execute Expression Trees (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/expression-trees/how-to-execute-expression-trees.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>방법: 식 트리 (Visual Basic)를 실행 합니다.<ept id="p1">](../../../../visual-basic/programming-guide/concepts/expression-trees/how-to-execute-expression-trees.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>