<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">58aee9f8c348eb06daec2b8c9e332f3f2775bcb6</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\objects-and-classes\inheritance-basics.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">84d342f99e10401a2018edb38b730dd4cf0a4552</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bbb4dd46a018dab0ad9bdfa89c3338a69e016210</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Inheritance Basics (Visual Basic) | Microsoft Docs</source>
          <target state="translated">상속 기본 사항 (Visual Basic) | Microsoft 문서</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Inheritance Basics (Visual Basic)</source>
          <target state="translated">상속 기본 사항(Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Inherits`</ph> statement is used to declare a new class, called a <bpt id="p1">*</bpt>derived class<ept id="p1">*</ept>, based on an existing class, known as a <bpt id="p2">*</bpt>base class<ept id="p2">*</ept>.</source>
          <target state="translated"><ph id="ph1">`Inherits`</ph> 문을 사용 하 라는 새 클래스를 선언 하는 <bpt id="p1">*</bpt>파생 클래스<ept id="p1">*</ept>라고 하는 기존 클래스에 따라 한 <bpt id="p2">*</bpt>기본 클래스<ept id="p2">*</ept>합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Derived classes inherit, and can extend, the properties, methods, events, fields, and constants defined in the base class.</source>
          <target state="translated">파생된 클래스는 상속 하 고 속성, 메서드, 이벤트, 필드 및 기본 클래스에 정의 된 상수 확장할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The following section describes some of the rules for inheritance, and the modifiers you can use to change the way classes inherit or are inherited:</source>
          <target state="translated">상속에 대 한 규칙 중 일부는 다음 섹션에서는 및 방식으로 클래스를 변경 하는 데 한정자 상속 하거나 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>By default, all classes are inheritable unless marked with the <ph id="ph1">`NotInheritable`</ph> keyword.</source>
          <target state="translated">기본적으로 모든 클래스는 상속할 수로 표시 하지 않는 한는 <ph id="ph1">`NotInheritable`</ph> 키워드입니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Classes can inherit from other classes in your project or from classes in other assemblies that your project references.</source>
          <target state="translated">클래스는 프로젝트의 다른 클래스 또는 프로젝트가 참조 하는 다른 어셈블리의 클래스에서 상속할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Unlike languages that allow multiple inheritance, <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> allows only single inheritance in classes; that is, derived classes can have only one base class.</source>
          <target state="translated">다중 상속을 허용 하는 언어와 달리 <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> 클래스;에 단일 상속을 사용 하면 파생 된 클래스 즉, 하나의 기본 클래스를 가질 수 있습니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Although multiple inheritance is not allowed in classes, classes can implement multiple interfaces, which can effectively accomplish the same ends.</source>
          <target state="translated">다중 상속 클래스에 허용 되지 않습니다 하지만 클래스에는 같은 결과 효과적으로 얻을 수 있는 여러 인터페이스를 구현할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>To prevent exposing restricted items in a base class, the access type of a derived class must be equal to or more restrictive than its base class.</source>
          <target state="translated">기본 클래스의 제한 된 항목을 공개를 방지 하려면 파생된 클래스의 액세스 형식을 같은 경우 또는 기본 클래스 보다 더 제한적인 이어야 합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For example, a <ph id="ph1">`Public`</ph> class cannot inherit a <ph id="ph2">`Friend`</ph> or a <ph id="ph3">`Private`</ph> class, and a <ph id="ph4">`Friend`</ph> class cannot inherit a <ph id="ph5">`Private`</ph> class.</source>
          <target state="translated">예를 들어 한 <ph id="ph1">`Public`</ph> 클래스에서 상속할 수 없습니다는 <ph id="ph2">`Friend`</ph> 또는 <ph id="ph3">`Private`</ph> 클래스 및 <ph id="ph4">`Friend`</ph> 클래스에서 상속할 수 없습니다는 <ph id="ph5">`Private`</ph> 클래스.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Inheritance Modifiers</source>
          <target state="translated">상속 한정자</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> introduces the following class-level statements and modifiers to support inheritance:</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>에서는 다음 클래스 수준의 문과 한정자를 상속을 지원 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Inherits`</ph> statement — Specifies the base class.</source>
          <target state="translated"><ph id="ph1">`Inherits`</ph>문-기본 클래스를 지정 합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`NotInheritable`</ph> modifier — Prevents programmers from using the class as a base class.</source>
          <target state="translated"><ph id="ph1">`NotInheritable`</ph>한정자-프로그래머를 기본 클래스로 클래스를 사용 하는 것을 금지 합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MustInherit`</ph> modifier — Specifies that the class is intended for use as a base class only.</source>
          <target state="translated"><ph id="ph1">`MustInherit`</ph>한정자-하는 클래스 사용 하기 위한 기본 클래스로 지정 합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Instances of <ph id="ph1">`MustInherit`</ph> classes cannot be created directly; they can only be created as base class instances of a derived class.</source>
          <target state="translated">인스턴스 <ph id="ph1">`MustInherit`</ph> 클래스를 직접 만들 수 없습니다; 만들 수 있습니다만 파생된 클래스의 클래스 인스턴스를 기본으로 합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>(Other programming languages, such as C++ and C#, use the term <bpt id="p1">*</bpt>abstract class<ept id="p1">*</ept> to describe such a class.)</source>
          <target state="translated">(이라는 용어를 사용 하는 c + + 및 C#과 같은 다른 프로그래밍 언어에서는 <bpt id="p1">*</bpt>추상 클래스<ept id="p1">*</ept> 이러한 클래스를 설명 합니다.)</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Overriding Properties and Methods in Derived Classes</source>
          <target state="translated">파생된 클래스의 속성 및 메서드를 재정의합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>By default, a derived class inherits properties and methods from its base class.</source>
          <target state="translated">기본적으로 파생된 클래스는 기본 클래스에서 속성 및 메서드 상속합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If an inherited property or method has to behave differently in the derived class it can be <bpt id="p1">*</bpt>overridden<ept id="p1">*</ept>.</source>
          <target state="translated">상속 된 속성 또는 메서드는 파생된 클래스에서 다르게 동작 하는 경우 일 수 있습니다 <bpt id="p1">*</bpt>재정의<ept id="p1">*</ept>합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>That is, you can define a new implementation of the method in the derived class.</source>
          <target state="translated">즉, 파생된 클래스에서 메서드의 새로운 구현을 정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The following modifiers are used to control how properties and methods are overridden:</source>
          <target state="translated">다음 한정자는 속성 및 메서드가 재정의되는 방식을 제어하는 데 사용됩니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Overridable`</ph> — Allows a property or method in a class to be overridden in a derived class.</source>
          <target state="translated"><ph id="ph1">`Overridable`</ph>-파생된 클래스에서 재정의 해야 하는 클래스에서 속성 또는 메서드의 수 있습니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Overrides`</ph> — Overrides an <ph id="ph2">`Overridable`</ph> property or method defined in the base class.</source>
          <target state="translated"><ph id="ph1">`Overrides`</ph>-재정의 <ph id="ph2">`Overridable`</ph> 속성이 나 메서드의 기본 클래스에서 정의 합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`NotOverridable`</ph> — Prevents a property or method from being overridden in an inheriting class.</source>
          <target state="translated"><ph id="ph1">`NotOverridable`</ph>-상속 클래스에서 재정의 되는 속성 또는 메서드 수 없습니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>By default, <ph id="ph1">`Public`</ph> methods are <ph id="ph2">`NotOverridable`</ph>.</source>
          <target state="translated">기본적으로 <ph id="ph1">`Public`</ph> 메서드는 <ph id="ph2">`NotOverridable`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MustOverride`</ph> — Requires that a derived class override the property or method.</source>
          <target state="translated"><ph id="ph1">`MustOverride`</ph>-파생된 클래스에서 속성 또는 메서드를 재정의 필요 합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">`MustOverride`</ph> keyword is used, the method definition consists of just the <ph id="ph2">`Sub`</ph>, <ph id="ph3">`Function`</ph>, or <ph id="ph4">`Property`</ph> statement.</source>
          <target state="translated">때는 <ph id="ph1">`MustOverride`</ph> 키워드가 사용 되는지, 메서드 정의의 구성만 <ph id="ph2">`Sub`</ph>, <ph id="ph3">`Function`</ph>, 또는 <ph id="ph4">`Property`</ph> 문입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>No other statements are allowed, and specifically there is no <ph id="ph1">`End Sub`</ph> or <ph id="ph2">`End Function`</ph> statement.</source>
          <target state="translated">다른 문이 허용 여부와 특별히 없습니다 <ph id="ph1">`End Sub`</ph> 또는 <ph id="ph2">`End Function`</ph> 문입니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MustOverride`</ph> methods must be declared in <ph id="ph2">`MustInherit`</ph> classes.</source>
          <target state="translated"><ph id="ph1">`MustOverride`</ph>메서드를 선언 해야 <ph id="ph2">`MustInherit`</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Suppose you want to define classes to handle payroll.</source>
          <target state="translated">급여를 처리 하는 클래스를 정의 하려고 한다고 가정 합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You could define a generic <ph id="ph1">`Payroll`</ph> class that contains a <ph id="ph2">`RunPayroll`</ph> method that calculates payroll for a typical week.</source>
          <target state="translated">일반을 정의할 수 있습니다 <ph id="ph1">`Payroll`</ph> 클래스를 포함 하는 <ph id="ph2">`RunPayroll`</ph> 일반적인 주에 대 한 급여를 계산 하는 방법입니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>You could then use <ph id="ph1">`Payroll`</ph> as a base class for a more specialized <ph id="ph2">`BonusPayroll`</ph> class, which could be used when distributing employee bonuses.</source>
          <target state="translated">사용 하 여 수 <ph id="ph1">`Payroll`</ph> 좀 더 특수 한 작업에 대 한 기본 클래스로 <ph id="ph2">`BonusPayroll`</ph> 직원에 게 보너스를 배포 하는 경우 사용할 수 있는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`BonusPayroll`</ph> class can inherit, and override, the <ph id="ph2">`PayEmployee`</ph> method defined in the base <ph id="ph3">`Payroll`</ph> class.</source>
          <target state="translated"><ph id="ph1">`BonusPayroll`</ph> 클래스를 상속 하 고 재정의할 수는 <ph id="ph2">`PayEmployee`</ph> 자료에 정의 된 메서드 <ph id="ph3">`Payroll`</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The following example defines a base class, <ph id="ph1">`Payroll,`</ph> and a derived class, <ph id="ph2">`BonusPayroll`</ph>, which overrides an inherited method, <ph id="ph3">`PayEmployee`</ph>.</source>
          <target state="translated">다음 예제에서는 기본 클래스를 정의 <ph id="ph1">`Payroll,`</ph> 및 파생된 클래스가 <ph id="ph2">`BonusPayroll`</ph>, 상속된 된 메서드를 재정의 하 <ph id="ph3">`PayEmployee`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>A procedure, <ph id="ph1">`RunPayroll`</ph>, creates and then passes a <ph id="ph2">`Payroll`</ph> object and a <ph id="ph3">`BonusPayroll`</ph> object to a function, <ph id="ph4">`Pay`</ph>, that executes the <ph id="ph5">`PayEmployee`</ph> method of both objects.</source>
          <target state="translated">프로시저 <ph id="ph1">`RunPayroll`</ph>을 만들고 다음 전달는 <ph id="ph2">`Payroll`</ph> 개체 및 <ph id="ph3">`BonusPayroll`</ph> , 함수 개체 <ph id="ph4">`Pay`</ph>, 실행 하는 <ph id="ph5">`PayEmployee`</ph> 두 개체의 메서드.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrOOP#28<ept id="p2">](../../../../visual-basic/misc/codesnippet/VisualBasic/inheritance-basics_1.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrOOP #&amp;28;<ept id="p2">](../../../../visual-basic/misc/codesnippet/VisualBasic/inheritance-basics_1.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The MyBase Keyword</source>
          <target state="translated">MyBase 키워드</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`MyBase`</ph> keyword behaves like an object variable that refers to the base class of the current instance of a class.</source>
          <target state="translated"><ph id="ph1">`MyBase`</ph> 키워드는 클래스의 현재 인스턴스는 기본 클래스를 참조 하는 개체 변수 처럼 동작 합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MyBase`</ph> is frequently used to access base class members that are overridden or shadowed in a derived class.</source>
          <target state="translated"><ph id="ph1">`MyBase`</ph>재정의 되거나 파생된 클래스에서 숨겨진 하는 기본 클래스 멤버 액세스를 주로 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>In particular, <ph id="ph1">`MyBase.New`</ph> is used to explicitly call a base class constructor from a derived class constructor.</source>
          <target state="translated">특히, <ph id="ph1">`MyBase.New`</ph> 파생된 클래스 생성자에서 기본 클래스 생성자를 명시적으로 호출 하는 데 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For example, suppose you are designing a derived class that overrides a method inherited from the base class.</source>
          <target state="translated">예를 들어, 기본 클래스에서 상속 된 메서드를 재정의 하는 파생된 클래스를 디자인 하는 가정 합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The overridden method can call the method in the base class and modify the return value as shown in the following code fragment:</source>
          <target state="translated">재정의 된 메서드는 기본 클래스에서 메서드를 호출 하 고 다음 코드 조각에서와 같이 반환 값을 수정할 수 있습니다.:</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrOOP#109<ept id="p2">](../../../../visual-basic/misc/codesnippet/VisualBasic/inheritance-basics_2.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrOOP #&amp;109;<ept id="p2">](../../../../visual-basic/misc/codesnippet/VisualBasic/inheritance-basics_2.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The following list describes restrictions on using <ph id="ph1">`MyBase`</ph>:</source>
          <target state="translated">사용 하 여 다음 목록에는 제한이 정리 되어 <ph id="ph1">`MyBase`</ph>:</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MyBase`</ph> refers to the immediate base class and its inherited members.</source>
          <target state="translated"><ph id="ph1">`MyBase`</ph>직접 기본 클래스와 상속 된 멤버를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>It cannot be used to access <ph id="ph1">`Private`</ph> members in the class.</source>
          <target state="translated">사용할 수 없습니다에 액세스 하려면 <ph id="ph1">`Private`</ph> 클래스의 멤버입니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MyBase`</ph> is a keyword, not a real object.</source>
          <target state="translated"><ph id="ph1">`MyBase`</ph>실제 개체가 아니라 키워드가입니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MyBase`</ph> cannot be assigned to a variable, passed to procedures, or used in an <ph id="ph2">`Is`</ph> comparison.</source>
          <target state="translated"><ph id="ph1">`MyBase`</ph>변수에 할당, 프로시저에 전달 하거나 사용할 수 없습니다에 <ph id="ph2">`Is`</ph> 비교 합니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The method that <ph id="ph1">`MyBase`</ph> qualifies does not have to be defined in the immediate base class; it may instead be defined in an indirectly inherited base class.</source>
          <target state="translated">메서드는 <ph id="ph1">`MyBase`</ph> 한정;는 직접 기본 클래스에서 정의 하지 않아도 간접적으로 상속된 하는 기본 클래스에서 대신 정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>In order for a reference qualified by <ph id="ph1">`MyBase`</ph> to compile correctly, some base class must contain a method matching the name and types of parameters that appear in the call.</source>
          <target state="translated">지정한 참조가 위해 <ph id="ph1">`MyBase`</ph> 올바르게 컴파일하기 위해 일부 기본 클래스 이름 및 호출에 나타나는 매개 변수의 형식과 일치 하는 메서드를 포함 해야 합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>You cannot use <ph id="ph1">`MyBase`</ph> to call <ph id="ph2">`MustOverride`</ph> base class methods.</source>
          <target state="translated">사용할 수 없는 <ph id="ph1">`MyBase`</ph> 호출할 <ph id="ph2">`MustOverride`</ph> 기본 클래스 메서드.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MyBase`</ph> cannot be used to qualify itself.</source>
          <target state="translated"><ph id="ph1">`MyBase`</ph>자체를 정하는 데 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Therefore, the following code is not valid:</source>
          <target state="translated">따라서 다음 코드는 유효 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MyBase`</ph> cannot be used in modules.</source>
          <target state="translated"><ph id="ph1">`MyBase`</ph>모듈에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MyBase`</ph> cannot be used to access base class members that are marked as <ph id="ph2">`Friend`</ph> if the base class is in a different assembly.</source>
          <target state="translated"><ph id="ph1">`MyBase`</ph>로 표시 된 기본 클래스 멤버 액세스를 사용할 수 없습니다 <ph id="ph2">`Friend`</ph> 다른 어셈블리에 기본 클래스는 경우.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>For more information and another example, see <bpt id="p1">[</bpt>How to: Access a Variable Hidden by a Derived Class<ept id="p1">](../../../../visual-basic/programming-guide/language-features/declared-elements/how-to-access-a-variable-hidden-by-a-derived-class.md)</ept>.</source>
          <target state="translated">자세한 내용 및 다른 예에 대 한 참조 <bpt id="p1">[</bpt>하는 방법: 파생 클래스에 의해 변수 숨겨진 액세스<ept id="p1">](../../../../visual-basic/programming-guide/language-features/declared-elements/how-to-access-a-variable-hidden-by-a-derived-class.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The MyClass Keyword</source>
          <target state="translated">MyClass 키워드</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`MyClass`</ph> keyword behaves like an object variable that refers to the current instance of a class as originally implemented.</source>
          <target state="translated"><ph id="ph1">`MyClass`</ph> 키워드는 원래 구현 된 클래스의 현재 인스턴스를 참조 하는 개체 변수 처럼 작동 합니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MyClass`</ph> resembles <ph id="ph2">`Me`</ph>, but every method and property call on <ph id="ph3">`MyClass`</ph> is treated as if the method or property were <bpt id="p1">[</bpt>NotOverridable<ept id="p1">](../../../../visual-basic/language-reference/modifiers/notoverridable.md)</ept>.</source>
          <target state="translated"><ph id="ph1">`MyClass`</ph>유사한 <ph id="ph2">`Me`</ph>, 모든 메서드 및 속성에 호출 되지만 <ph id="ph3">`MyClass`</ph> 메서드 또는 속성 처럼 처리 됩니다 <bpt id="p1">[</bpt>NotOverridable<ept id="p1">](../../../../visual-basic/language-reference/modifiers/notoverridable.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Therefore, the method or property is not affected by overriding in a derived class.</source>
          <target state="translated">따라서 메서드 또는 속성은 영향을 받지 파생된 클래스에서 재정의 하 여.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MyClass`</ph> is a keyword, not a real object.</source>
          <target state="translated"><ph id="ph1">`MyClass`</ph>실제 개체가 아니라 키워드가입니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MyClass`</ph> cannot be assigned to a variable, passed to procedures, or used in an <ph id="ph2">`Is`</ph> comparison.</source>
          <target state="translated"><ph id="ph1">`MyClass`</ph>변수에 할당, 프로시저에 전달 하거나 사용할 수 없습니다에 <ph id="ph2">`Is`</ph> 비교 합니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MyClass`</ph> refers to the containing class and its inherited members.</source>
          <target state="translated"><ph id="ph1">`MyClass`</ph>포함 하는 클래스와 상속 된 멤버를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MyClass`</ph> can be used as a qualifier for <ph id="ph2">`Shared`</ph> members.</source>
          <target state="translated"><ph id="ph1">`MyClass`</ph>에 대 한 한정자로 사용할 수 있습니다 <ph id="ph2">`Shared`</ph> 멤버입니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MyClass`</ph> cannot be used inside a <ph id="ph2">`Shared`</ph> method, but can be used inside an instance method to access a shared member of a class.</source>
          <target state="translated"><ph id="ph1">`MyClass`</ph>내에서 사용할 수 없습니다는 <ph id="ph2">`Shared`</ph> 메서드를 되지만 인스턴스 메서드 내에서 사용 하는 클래스의 공유 멤버에 액세스할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MyClass`</ph> cannot be used in standard modules.</source>
          <target state="translated"><ph id="ph1">`MyClass`</ph>표준 모듈에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MyClass`</ph> can be used to qualify a method that is defined in a base class and that has no implementation of the method provided in that class.</source>
          <target state="translated"><ph id="ph1">`MyClass`</ph>데 사용할 수는 기본 클래스에 정의 된 해당 클래스에서 제공 하는 메서드의 구현이 없는 메서드.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Such a reference has the same meaning as <ph id="ph1">`MyBase.`</ph><bpt id="p1">*</bpt>Method<ept id="p1">*</ept>.</source>
          <target state="translated">이러한 참조는 동일한 의미를 갖는 <ph id="ph1">`MyBase.`</ph> <bpt id="p1">*</bpt>메서드<ept id="p1">*</ept>합니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The following example compares <ph id="ph1">`Me`</ph> and <ph id="ph2">`MyClass`</ph>.</source>
          <target state="translated">다음 예제에서는 비교 <ph id="ph1">`Me`</ph> 및 <ph id="ph2">`MyClass`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Even though <ph id="ph1">`derivedClass`</ph> overrides <ph id="ph2">`testMethod`</ph>, the <ph id="ph3">`MyClass`</ph> keyword in <ph id="ph4">`useMyClass`</ph> nullifies the effects of overriding, and the compiler resolves the call to the base class version of <ph id="ph5">`testMethod`</ph>.</source>
          <target state="translated">경우에 <ph id="ph1">`derivedClass`</ph> 재정의 <ph id="ph2">`testMethod`</ph>, <ph id="ph3">`MyClass`</ph> 키워드 <ph id="ph4">`useMyClass`</ph> 재정의 및 컴파일러 확인 한 결과의 기본 클래스 버전에 대 한 호출을 취소 <ph id="ph5">`testMethod`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">참고 항목</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Inherits Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/inherits-statement.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Inherits 문<ept id="p1">](../../../../visual-basic/language-reference/statements/inherits-statement.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Me, My, MyBase, and MyClass<ept id="p1">](../../../../visual-basic/programming-guide/program-structure/me-my-mybase-and-myclass.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>Me, My, MyBase 및 MyClass<ept id="p1">](../../../../visual-basic/programming-guide/program-structure/me-my-mybase-and-myclass.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>