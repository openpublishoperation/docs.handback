<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">001ea1cb5e651b95f808eefd47fd468f556550a1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\statements.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">51d8c0b1e82c05d55d408985a200a190f434ef24</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6931b6f08eb6c22cd973a2ae2fc585297fa9811a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Statements in Visual Basic | Microsoft Docs</source>
          <target state="translated">Visual Basic의 문 | Microsoft 문서</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Statements in Visual Basic</source>
          <target state="translated">Visual Basic의 문</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A statement in <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> is a complete instruction.</source>
          <target state="translated">에 있는 문은 <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> 전체 명령입니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>It can contain keywords, operators, variables, constants, and expressions.</source>
          <target state="translated">키워드, 연산자, 변수, 상수 및 식을 포함할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Each statement belongs to one of the following categories:</source>
          <target state="translated">각 문에 다음 범주 중 하나에 속합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Declaration Statements<ept id="p1">**</ept>, which name a variable, constant, or procedure, and can also specify a data type.</source>
          <target state="translated"><bpt id="p1">**</bpt>선언 문<ept id="p1">**</ept>, 변수, 상수 또는 프로시저 이름을 지정 하 고 데이터 형식을 지정할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Executable Statements<ept id="p1">**</ept>, which initiate actions.</source>
          <target state="translated"><bpt id="p1">**</bpt>실행문<ept id="p1">**</ept>는 작업을 시작 합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>These statements can call a method or function, and they can loop or branch through blocks of code.</source>
          <target state="translated">이러한 문은 메서드나 함수를 호출할 수 있으며 반복 하거나 코드 블록을 통해 분기할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Executable statements include <bpt id="p1">**</bpt>Assignment Statements<ept id="p1">**</ept>, which assign a value or expression to a variable or constant.</source>
          <target state="translated">실행문 포함 <bpt id="p1">**</bpt>대입문<ept id="p1">**</ept>, 변수 또는 상수 값 이나 식을 할당입니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This topic describes each category.</source>
          <target state="translated">이 항목에서는 각 범주에 설명 합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Also, this topic describes how to combine multiple statements on a single line and how to continue a statement over multiple lines.</source>
          <target state="translated">또한이 항목에서는 한 줄에 여러 개의 문을 결합 하는 방법 및 여러 줄에는 문을 계속 하는 방법을 설명 합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Declaration Statements</source>
          <target state="translated">선언문</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You use declaration statements to name and define procedures, variables, properties, arrays, and constants.</source>
          <target state="translated">선언문 절차, 변수, 속성, 배열 및 상수를 정의 하 고 이름을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>When you declare a programming element, you can also define its data type, access level, and scope.</source>
          <target state="translated">프로그래밍 요소를 선언 하면 해당 데이터 형식, 액세스 수준 및 범위 정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Declared Element Characteristics<ept id="p1">](../../../visual-basic/programming-guide/language-features/declared-elements/declared-element-characteristics.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>선언 요소의 특징<ept id="p1">](../../../visual-basic/programming-guide/language-features/declared-elements/declared-element-characteristics.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The following example contains three declarations.</source>
          <target state="translated">다음 예제에서는 세 가지 선언을 포함합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#80<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_1.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements #&amp;80;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_1.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The first declaration is the <ph id="ph1">`Sub`</ph> statement.</source>
          <target state="translated">첫 번째 선언 되는 <ph id="ph1">`Sub`</ph> 문입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Together with its matching <ph id="ph1">`End Sub`</ph> statement, it declares a procedure named <ph id="ph2">`applyFormat`</ph>.</source>
          <target state="translated">일치 하는 해당 함께 <ph id="ph1">`End Sub`</ph> 라는 프로시저를 선언 문, <ph id="ph2">`applyFormat`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>It also specifies that <ph id="ph1">`applyFormat`</ph> is <ph id="ph2">`Public`</ph>, which means that any code that can refer to it can call it.</source>
          <target state="translated">또한 지정 하는 <ph id="ph1">`applyFormat`</ph> 는 <ph id="ph2">`Public`</ph>, 즉, 변수를 참조할 수 있는 모든 코드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The second declaration is the <ph id="ph1">`Const`</ph> statement, which declares the constant <ph id="ph2">`limit`</ph>, specifying the <ph id="ph3">`Integer`</ph> data type and a value of 33.</source>
          <target state="translated">두 번째 선언은 <ph id="ph1">`Const`</ph> 상수를 선언 하는 문을 <ph id="ph2">`limit`</ph>을 지정 하는 <ph id="ph3">`Integer`</ph> 데이터 형식 및 값 33.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The third declaration is the <ph id="ph1">`Dim`</ph> statement, which declares the variable <ph id="ph2">`thisWidget`</ph>.</source>
          <target state="translated">세 번째 선언 되는 <ph id="ph1">`Dim`</ph> 변수를 선언 하는 문을 <ph id="ph2">`thisWidget`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The data type is a specific object, namely an object created from the <ph id="ph1">`Widget`</ph> class.</source>
          <target state="translated">데이터 형식이 특정 개체, 즉에서 생성 된 개체는 <ph id="ph1">`Widget`</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>You can declare a variable to be of any elementary data type or of any object type that is exposed in the application you are using.</source>
          <target state="translated">모든 기본 데이터 형식 또는 사용 하는 응용 프로그램에 노출 되는 모든 개체 유형일 수 하는 변수를 선언할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Initial Values</source>
          <target state="translated">초기 값</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>When the code containing a declaration statement runs, <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> reserves the memory required for the declared element.</source>
          <target state="translated">선언문을 포함 하는 코드를 실행 하는 경우 <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> 선언된 된 요소에 필요한 메모리를 예약 합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If the element holds a value, <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> initializes it to the default value for its data type.</source>
          <target state="translated">요소는 값이 있는 경우 <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> 해당 데이터 형식의 기본값으로 초기화 합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For more information, see "Behavior" in <bpt id="p1">[</bpt>Dim Statement<ept id="p1">](../../../visual-basic/language-reference/statements/dim-statement.md)</ept>.</source>
          <target state="translated">자세한 내용은 "동작"의 참조 <bpt id="p1">[</bpt>Dim<ept id="p1">](../../../visual-basic/language-reference/statements/dim-statement.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You can assign an initial value to a variable as part of its declaration, as the following example illustrates.</source>
          <target state="translated">다음 예제와 같이 해당 선언의 일부로 변수에 초기 값을 할당할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#81<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_2.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements #&amp;81;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_2.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If a variable is an object variable, you can explicitly create an instance of its class when you declare it by using the <bpt id="p1">[</bpt>New Operator<ept id="p1">](../../../visual-basic/language-reference/operators/new-operator.md)</ept> keyword, as the following example illustrates.</source>
          <target state="translated">변수는 개체 변수를 명시적으로 만들면 해당 클래스의 인스턴스를 사용 하 여 선언 하는 경우는 <bpt id="p1">[</bpt>New 연산자<ept id="p1">](../../../visual-basic/language-reference/operators/new-operator.md)</ept> 키워드를 다음 예제와 같이 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#82<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_3.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements #&amp;82;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_3.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Note that the initial value you specify in a declaration statement is not assigned to a variable until execution reaches its declaration statement.</source>
          <target state="translated">실행이 해당 선언문에 도달할 때까지 선언문에 지정 하는 초기 값 변수에 할당 되지 않은 note 합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Until that time, the variable contains the default value for its data type.</source>
          <target state="translated">그 전 까지는 변수 데이터 형식에 대 한 기본값을 포함합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Executable Statements</source>
          <target state="translated">실행문</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>An executable statement performs an action.</source>
          <target state="translated">실행 가능 문이 동작을 수행 합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>It can call a procedure, branch to another place in the code, loop through several statements, or evaluate an expression.</source>
          <target state="translated">여러 문을 통해 루프는 코드의 다른 위치로 분기 프로시저를 호출 하거나 식을 계산할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>An assignment statement is a special case of an executable statement.</source>
          <target state="translated">할당 문의 실행 가능 문이의 특별 한 경우.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The following example uses an <ph id="ph1">`If...Then...Else`</ph> control structure to run different blocks of code based on the value of a variable.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">`If...Then...Else`</ph> 다른 변수 값을 기반으로 하는 코드 블록을 실행 하는 구조체를 제어 합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Within each block of code, a <ph id="ph1">`For...Next`</ph> loop runs a specified number of times.</source>
          <target state="translated">코드의 각 블록 내에서 한 <ph id="ph1">`For...Next`</ph> 루프는 지정 된 횟수 만큼 실행 합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#83<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_4.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements #&amp;83;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_4.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`If`</ph> statement in the preceding example checks the value of the parameter <ph id="ph2">`clockwise`</ph>.</source>
          <target state="translated"><ph id="ph1">`If`</ph> 매개 변수의 값을 확인 하는 위의 예제에서 문은 <ph id="ph2">`clockwise`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>If the value is <ph id="ph1">`True`</ph>, it calls the <ph id="ph2">`spinClockwise`</ph> method of <ph id="ph3">`aWidget`</ph>.</source>
          <target state="translated">값이 <ph id="ph1">`True`</ph>를 호출 하는 <ph id="ph2">`spinClockwise`</ph> 메서드의 <ph id="ph3">`aWidget`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If the value is <ph id="ph1">`False`</ph>, it calls the <ph id="ph2">`spinCounterClockwise`</ph> method of <ph id="ph3">`aWidget`</ph>.</source>
          <target state="translated">값이 <ph id="ph1">`False`</ph>를 호출 하는 <ph id="ph2">`spinCounterClockwise`</ph> 메서드의 <ph id="ph3">`aWidget`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`If...Then...Else`</ph> control structure ends with <ph id="ph2">`End If`</ph>.</source>
          <target state="translated"><ph id="ph1">`If...Then...Else`</ph> 제어 구조 끝나는지 <ph id="ph2">`End If`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`For...Next`</ph> loop within each block calls the appropriate method a number of times equal to the value of the <ph id="ph2">`revolutions`</ph> parameter.</source>
          <target state="translated"><ph id="ph1">`For...Next`</ph> 각 블록 내에서 루프 메서드를 호출 하는 적절 한 동안 여러 번의 값과 같은 <ph id="ph2">`revolutions`</ph> 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Assignment Statements</source>
          <target state="translated">대입문</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Assignment statements carry out assignment operations, which consist of taking the value on the right side of the assignment operator (<ph id="ph1">`=`</ph>) and storing it in the element on the left, as in the following example.</source>
          <target state="translated">대입문의 할당 연산자의 오른쪽에 값으로 구성 된 할당 연산을 수행 (<ph id="ph1">`=`</ph>) 다음 예제와 같이 왼쪽에서 요소에 저장 합니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#73<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_5.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements #&amp;73;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_5.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>In the preceding example, the assignment statement stores the literal value 42 in the variable <ph id="ph1">`v`</ph>.</source>
          <target state="translated">위의 예제에서는 아래의 할당 문은 저장 변수에 리터럴 값 42 <ph id="ph1">`v`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Eligible Programming Elements</source>
          <target state="translated">적용 가능한 프로그래밍 요소</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The programming element on the left side of the assignment operator must be able to accept and store a value.</source>
          <target state="translated">할당 연산자의 좌 변에 있는 프로그래밍 요소를 받아들이고 값을 저장할 수 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>This means it must be a variable or property that is not <bpt id="p1">[</bpt>ReadOnly<ept id="p1">](../../../visual-basic/language-reference/modifiers/readonly.md)</ept>, or it must be an array element.</source>
          <target state="translated">즉, 변수 또는 없는 속성 이어야 <bpt id="p1">[</bpt>ReadOnly<ept id="p1">](../../../visual-basic/language-reference/modifiers/readonly.md)</ept>, 또는 배열 요소 여야 합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>In the context of an assignment statement, such an element is sometimes called an <bpt id="p1">*</bpt>lvalue<ept id="p1">*</ept>, for "left value."</source>
          <target state="translated">할당 문의 컨텍스트에서 이러한 요소 라고는 <bpt id="p1">*</bpt>lvalue<ept id="p1">*</ept>, "왼쪽 값입니다."</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The value on the right side of the assignment operator is generated by an expression, which can consist of any combination of literals, constants, variables, properties, array elements, other expressions, or function calls.</source>
          <target state="translated">할당 연산자의 오른쪽에 있는 값은 리터럴, 상수, 변수, 속성, 배열 요소, 다른 식 또는 함수 호출의 조합으로 구성 될 수 있는 식에 의해 생성 됩니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The following example illustrates this.</source>
          <target state="translated">다음은 이에 대한 예입니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#74<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_6.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements #&amp;74;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_6.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The preceding example adds the value held in variable <ph id="ph1">`y`</ph> to the value held in variable <ph id="ph2">`z`</ph>, and then adds the value returned by the call to function <ph id="ph3">`findResult`</ph>.</source>
          <target state="translated">위의 예제에서는 변수에 저장 된 값 <ph id="ph1">`y`</ph> 변수에 저장 된 값을 <ph id="ph2">`z`</ph>, 다음 함수 호출에서 반환 되는 값을 추가 하 고 <ph id="ph3">`findResult`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The total value of this expression is then stored in variable <ph id="ph1">`x`</ph>.</source>
          <target state="translated">이 식의 합계 값은 변수에 저장 된 다음 <ph id="ph1">`x`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Data Types in Assignment Statements</source>
          <target state="translated">대입문의 데이터 형식</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>In addition to numeric values, the assignment operator can also assign <ph id="ph1">`String`</ph> values, as the following example illustrates.</source>
          <target state="translated">숫자 값 외에도 할당 연산자 할당할 수도 <ph id="ph1">`String`</ph> 다음 예제와 같이 값입니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#75<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_7.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements #&amp;75;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_7.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>You can also assign <ph id="ph1">`Boolean`</ph> values, using either a <ph id="ph2">`Boolean`</ph> literal or a <ph id="ph3">`Boolean`</ph> expression, as the following example illustrates.</source>
          <target state="translated">할당할 수도 있습니다 <ph id="ph1">`Boolean`</ph> 중 하나를 사용 하 여 값을 <ph id="ph2">`Boolean`</ph> 리터럴 또는 <ph id="ph3">`Boolean`</ph> 다음 예제와 같이 식을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#76<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_8.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements #&amp;76;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_8.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Similarly, you can assign appropriate values to programming elements of the <ph id="ph1">`Char`</ph>, <ph id="ph2">`Date`</ph>, or <ph id="ph3">`Object`</ph> data type.</source>
          <target state="translated">마찬가지로, 프로그래밍 요소에 적절 한 값을 할당할 수 있습니다는 <ph id="ph1">`Char`</ph>, <ph id="ph2">`Date`</ph>, 또는 <ph id="ph3">`Object`</ph> 데이터 형식입니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>You can also assign an object instance to an element declared to be of the class from which that instance is created.</source>
          <target state="translated">또한 해당 인스턴스가 생성 되는 클래스에 선언 된 요소에 개체 인스턴스를 할당할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Compound Assignment Statements</source>
          <target state="translated">복합 대입문</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Compound assignment statements<ept id="p1">*</ept> first perform an operation on an expression before assigning it to a programming element.</source>
          <target state="translated"><bpt id="p1">*</bpt>복합 대입문<ept id="p1">*</ept> 먼저 프로그래밍 요소에 할당 하기 전에 식에 대 한 작업을 수행 합니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The following example illustrates one of these operators, <ph id="ph1">`+=`</ph>, which increments the value of the variable on the left side of the operator by the value of the expression on the right.</source>
          <target state="translated">다음 예제에서는 이러한 연산자 중 하나 <ph id="ph1">`+=`</ph>는 오른쪽에 있는 식의 값으로 연산자의 좌 변에 있는 변수의 값을 증가 시킵니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#77<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_9.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements #&amp;77;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_9.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The preceding example adds 1 to the value of <ph id="ph1">`n`</ph>, and then stores that new value in <ph id="ph2">`n`</ph>.</source>
          <target state="translated">위 예의 값에 1을 더하여 <ph id="ph1">`n`</ph>, 다음에 새 값을 저장 하 고 <ph id="ph2">`n`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>It is a shorthand equivalent of the following statement:</source>
          <target state="translated">이것은 다음 문과 동일 합니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#78<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_10.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements #&amp;78;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_10.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>A variety of compound assignment operations can be performed using operators of this type.</source>
          <target state="translated">이러한 종류의 연산자를 사용 하 여 다양 한 복합 할당 작업을 수행할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>For a list of these operators and more information about them, see <bpt id="p1">[</bpt>Assignment Operators<ept id="p1">](../../../visual-basic/language-reference/operators/assignment-operators.md)</ept>.</source>
          <target state="translated">목록과 이러한 연산자에 대 한 자세한 내용은 참조 하십시오. <bpt id="p1">[</bpt>대입 연산자<ept id="p1">](../../../visual-basic/language-reference/operators/assignment-operators.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The concatenation assignment operator (<ph id="ph1">`&amp;=`</ph>) is useful for adding a string to the end of already existing strings, as the following example illustrates.</source>
          <target state="translated">연결 할당 연산자 (<ph id="ph1">`&amp;=`</ph>)는 이미 존재 하는의 끝에 문자열을 추가 하는 데 유용 다음 예제와 같이 문자열입니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#79<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_11.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements #&amp;79;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_11.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Type Conversions in Assignment Statements</source>
          <target state="translated">대입문의 형식 변환</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The value you assign to a variable, property, or array element must be of a data type appropriate to that destination element.</source>
          <target state="translated">해당 대상 요소에 적절 한 데이터 형식의 변수, 속성 또는 배열 요소에 할당 하는 값 이어야 합니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>In general, you should try to generate a value of the same data type as that of the destination element.</source>
          <target state="translated">일반적으로 대상 요소의 것과 동일한 데이터 형식의 값을 생성 하려고 해야 합니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>However, some types can be converted to other types during assignment.</source>
          <target state="translated">그러나 할당 하는 동안 일부 형식은 다른 형식으로 변환할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>For information on converting between data types, see <bpt id="p1">[</bpt>Type Conversions in Visual Basic<ept id="p1">](../../../visual-basic/programming-guide/language-features/data-types/type-conversions.md)</ept>.</source>
          <target state="translated">데이터 형식 간의 변환에 대 한 참조 <bpt id="p1">[</bpt>Visual Basic의 형식 변환<ept id="p1">](../../../visual-basic/programming-guide/language-features/data-types/type-conversions.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>In brief, <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> automatically converts a value of a given type to any other type to which it widens.</source>
          <target state="translated">간단히 말해, <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> 자동으로 지정 된 형식의 값으로 확대 다른 유형으로 변환 합니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>widening conversion<ept id="p1">*</ept> is one in that always succeeds at run time and does not lose any data.</source>
          <target state="translated">A <bpt id="p1">*</bpt>확대 변환<ept id="p1">*</ept> 은 중 하나는 항상 런타임에 성공 하 고 데이터가 손실 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> converts an <ph id="ph2">`Integer`</ph> value to <ph id="ph3">`Double`</ph> when appropriate, because <ph id="ph4">`Integer`</ph> widens to <ph id="ph5">`Double`</ph>.</source>
          <target state="translated">예를 들어 <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> 변환는 <ph id="ph2">`Integer`</ph> 값을 <ph id="ph3">`Double`</ph> 해당 되는 경우 때문에 <ph id="ph4">`Integer`</ph> 로 확대 변환 <ph id="ph5">`Double`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Widening and Narrowing Conversions<ept id="p1">](../../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>확장 변환과 축소 변환<ept id="p1">](../../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Narrowing conversions<ept id="p1">*</ept> (those that are not widening) carry a risk of failure at run time, or of data loss.</source>
          <target state="translated"><bpt id="p1">*</bpt>축소 변환<ept id="p1">*</ept> 런타임 시 오류 또는 데이터 손실의 위험 수행 (해당 되는 확대 하지입니다).</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>You can perform a narrowing conversion explicitly by using a type conversion function, or you can direct the compiler to perform all conversions implicitly by setting <ph id="ph1">`Option Strict Off`</ph>.</source>
          <target state="translated">형식 변환 함수를 사용 하 여 명시적으로 축소 변환을 수행 하거나 모든 변환을 설정 하 여 암시적으로 수행 하기 위해 컴파일러에 지시할 수 있습니다 <ph id="ph1">`Option Strict Off`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Implicit and Explicit Conversions<ept id="p1">](../../../visual-basic/programming-guide/language-features/data-types/implicit-and-explicit-conversions.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>암시적 변환과 명시적 변환<ept id="p1">](../../../visual-basic/programming-guide/language-features/data-types/implicit-and-explicit-conversions.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Putting Multiple Statements on One Line</source>
          <target state="translated">여러 개의 문을 한 줄에 배치 하는</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>You can have multiple statements on a single line separated by the colon (<ph id="ph1">`:`</ph>) character.</source>
          <target state="translated">콜론으로 구분 된 단일 줄에 여러 개의 문을 포함할 수 있습니다 (<ph id="ph1">`:`</ph>) 문자입니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The following example illustrates this.</source>
          <target state="translated">다음은 이에 대한 예입니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#70<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_12.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements #&amp;70;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_12.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Though occasionally convenient, this form of syntax makes your code hard to read and maintain.</source>
          <target state="translated">편리할 때도 있지만이 형식의 구문 사용 하면 코드 읽고 유지 관리 하기가 어렵습니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Thus, it is recommended that you keep one statement to a line.</source>
          <target state="translated">따라서 하나의 문을 한 줄으로 유지 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Continuing a Statement over Multiple Lines</source>
          <target state="translated">여러 줄에 하나의 문 계속</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>A statement usually fits on one line, but when it is too long, you can continue it onto the next line using a line-continuation sequence, which consists of a space followed by an underscore character (<ph id="ph1">`_`</ph>) followed by a carriage return.</source>
          <target state="translated">문에 일반적으로 한 줄에 적합 하지만 너무 길 때 공백 밑줄 문자 순으로 구성 되는 줄 연속 시퀀스를 사용 하 여 다음 줄으로 계속할 수 있습니다 (<ph id="ph1">`_`</ph>) 뒤에 캐리지 리턴입니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>In the following example, the <ph id="ph1">`MsgBox`</ph> executable statement is continued over two lines.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">`MsgBox`</ph> 실행 문은 두 줄에 걸쳐 계속 됩니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#71<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_13.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements #&amp;71;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_13.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Implicit Line Continuation</source>
          <target state="translated">암시적 줄 연속 문자</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>In many cases, you can continue a statement on the next consecutive line without using the underscore character (_).</source>
          <target state="translated">대부분의 경우 밑줄 문자 (_)을 사용 하지 않고 연속 된 다음 줄에서 문을 계속할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The following table lists the syntax elements that implicitly continue the statement on the next line of code.</source>
          <target state="translated">다음 표에서 코드의 다음 줄에서 문을 암시적으로 계속 하는 구문 요소를 나열 합니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Syntax element</source>
          <target state="translated">구문 요소</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">예제</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>After a comma (<ph id="ph1">`,`</ph>).</source>
          <target state="translated">쉼표 뒤 (<ph id="ph1">`,`</ph>).</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation#1<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_14.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation #&amp;1;<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_14.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>After an open parenthesis (<ph id="ph1">`(`</ph>) or before a closing parenthesis (<ph id="ph2">`)`</ph>).</source>
          <target state="translated">여는 괄호 뒤 (<ph id="ph1">`(`</ph>) 또는 닫는 괄호 앞에 (<ph id="ph2">`)`</ph>).</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation#2<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_15.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation #&amp;2;<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_15.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>After an open curly brace (<ph id="ph1">`{`</ph>) or before a closing curly brace (<ph id="ph2">`}`</ph>).</source>
          <target state="translated">중괄호 뒤 (<ph id="ph1">`{`</ph>) 또는 그 이전에 닫는 중괄호 (<ph id="ph2">`}`</ph>).</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation#3<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_16.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation #&amp;3;<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_16.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Object Initializers: Named and Anonymous Types<ept id="p1">](../../../visual-basic/programming-guide/language-features/objects-and-classes/object-initializers-named-and-anonymous-types.md)</ept> or <bpt id="p2">[</bpt>Collection Initializers<ept id="p2">](../../../visual-basic/programming-guide/language-features/collection-initializers/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>개체 이니셜라이저: 명명 된 형식과 익명 형식<ept id="p1">](../../../visual-basic/programming-guide/language-features/objects-and-classes/object-initializers-named-and-anonymous-types.md)</ept> 또는 <bpt id="p2">[</bpt>컬렉션 이니셜라이저<ept id="p2">](../../../visual-basic/programming-guide/language-features/collection-initializers/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>After an open embedded expression (<ph id="ph1">`&lt;%=`</ph>) or before the close of an embedded expression (<ph id="ph2">`%&gt;`</ph>) within an XML literal.</source>
          <target state="translated">열린 후 포함 식 (<ph id="ph1">`&lt;%=`</ph>) 또는 포함된 된 식의 닫기 전에 (<ph id="ph2">`%&gt;`</ph>) XML 리터럴 내에서.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation#4<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_17.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation #&amp;4;<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_17.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Embedded Expressions in XML<ept id="p1">](../../../visual-basic/programming-guide/language-features/xml/embedded-expressions-in-xml.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>XML의 포함 식<ept id="p1">](../../../visual-basic/programming-guide/language-features/xml/embedded-expressions-in-xml.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>After the concatenation operator (<ph id="ph1">`&amp;`</ph>).</source>
          <target state="translated">연결 연산자 후 (<ph id="ph1">`&amp;`</ph>).</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnConventions#9<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_18.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnConventions #&amp;9;<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_18.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Operators Listed by Functionality<ept id="p1">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>기능으로 나열 된 연산자<ept id="p1">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>After assignment operators (<ph id="ph1">`=`</ph>, <ph id="ph2">`&amp;=`</ph>, <ph id="ph3">`:=`</ph>, <ph id="ph4">`+=`</ph>, <ph id="ph5">`-=`</ph>, <ph id="ph6">`*=`</ph>, <ph id="ph7">`/=`</ph>, <ph id="ph8">`\=`</ph>, <ph id="ph9">`^=`</ph>, <ph id="ph10">`&lt;&lt;=`</ph>, <ph id="ph11">`&gt;&gt;=`</ph>).</source>
          <target state="translated">After assignment operators (<ph id="ph1">`=`</ph>, <ph id="ph2">`&amp;=`</ph>, <ph id="ph3">`:=`</ph>, <ph id="ph4">`+=`</ph>, <ph id="ph5">`-=`</ph>, <ph id="ph6">`*=`</ph>, <ph id="ph7">`/=`</ph>, <ph id="ph8">`\=`</ph>, <ph id="ph9">`^=`</ph>, <ph id="ph10">`&lt;&lt;=`</ph>, <ph id="ph11">`&gt;&gt;=`</ph>).</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation#5<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_19.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation #&amp;5;<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_19.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Operators Listed by Functionality<ept id="p1">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>기능으로 나열 된 연산자<ept id="p1">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>After binary operators (<ph id="ph1">`+`</ph>, <ph id="ph2">`-`</ph>, <ph id="ph3">`/`</ph>, <ph id="ph4">`*`</ph>, <ph id="ph5">`Mod`</ph>, <ph id="ph6">`&lt;&gt;`</ph>, <ph id="ph7">`&lt;`</ph>, <ph id="ph8">`&gt;`</ph>, <ph id="ph9">`&lt;=`</ph>, <ph id="ph10">`&gt;=`</ph>, <ph id="ph11">`^`</ph>, <ph id="ph12">`&gt;&gt;`</ph>, <ph id="ph13">`&lt;&lt;`</ph>, <ph id="ph14">`And`</ph>, <ph id="ph15">`AndAlso`</ph>, <ph id="ph16">`Or`</ph>, <ph id="ph17">`OrElse`</ph>, <ph id="ph18">`Like`</ph>, <ph id="ph19">`Xor`</ph>) within an expression.</source>
          <target state="translated">After binary operators (<ph id="ph1">`+`</ph>, <ph id="ph2">`-`</ph>, <ph id="ph3">`/`</ph>, <ph id="ph4">`*`</ph>, <ph id="ph5">`Mod`</ph>, <ph id="ph6">`&lt;&gt;`</ph>, <ph id="ph7">`&lt;`</ph>, <ph id="ph8">`&gt;`</ph>, <ph id="ph9">`&lt;=`</ph>, <ph id="ph10">`&gt;=`</ph>, <ph id="ph11">`^`</ph>, <ph id="ph12">`&gt;&gt;`</ph>, <ph id="ph13">`&lt;&lt;`</ph>, <ph id="ph14">`And`</ph>, <ph id="ph15">`AndAlso`</ph>, <ph id="ph16">`Or`</ph>, <ph id="ph17">`OrElse`</ph>, <ph id="ph18">`Like`</ph>, <ph id="ph19">`Xor`</ph>) within an expression.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation#7<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_20.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation #&amp;7;<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_20.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Operators Listed by Functionality<ept id="p1">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>기능으로 나열 된 연산자<ept id="p1">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>After the <ph id="ph1">`Is`</ph> and <ph id="ph2">`IsNot`</ph> operators.</source>
          <target state="translated">이후에 <ph id="ph1">`Is`</ph> 및 <ph id="ph2">`IsNot`</ph> 연산자입니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation#8<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_21.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation #&amp;8;<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_21.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Operators Listed by Functionality<ept id="p1">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>기능으로 나열 된 연산자<ept id="p1">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>After a member qualifier character (<ph id="ph1">`.`</ph>) and before the member name.</source>
          <target state="translated">멤버 한정자 문자 후 (<ph id="ph1">`.`</ph>) 및 멤버 이름 앞입니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>However, you must include a line-continuation character (_) following a member qualifier character when you are using the <ph id="ph1">`With`</ph> statement or supplying values in the initialization list for a type.</source>
          <target state="translated">하지만 사용 하는 경우 멤버 한정자 문자 뒤에 줄 연속 문자 (_)을 포함 해야는 <ph id="ph1">`With`</ph> 문 또는 유형에 대 한 초기화 목록에 값을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Consider breaking the line after the assignment operator (for example, <ph id="ph1">`=`</ph>) when you are using <ph id="ph2">`With`</ph> statements or object initialization lists.</source>
          <target state="translated">대입 연산자 뒤에서 줄 바꿈 하는 것이 좋습니다. (예를 들어 <ph id="ph1">`=`</ph>)를 사용할 때는 <ph id="ph2">`With`</ph> 문이나 개체 초기화 목록입니다.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation#5<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_19.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation #&amp;5;<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_19.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation#14<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_22.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation #&amp;14;<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_22.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>With...End With Statement<ept id="p1">](../../../visual-basic/language-reference/statements/with-end-with-statement.md)</ept> or <bpt id="p2">[</bpt>Object Initializers: Named and Anonymous Types<ept id="p2">](../../../visual-basic/programming-guide/language-features/objects-and-classes/object-initializers-named-and-anonymous-types.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>와... 문을 사용 하 여 종료<ept id="p1">](../../../visual-basic/language-reference/statements/with-end-with-statement.md)</ept> 또는 <bpt id="p2">[</bpt>개체 이니셜라이저: 명명 된 형식과 익명 형식<ept id="p2">](../../../visual-basic/programming-guide/language-features/objects-and-classes/object-initializers-named-and-anonymous-types.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>After an XML axis property qualifier (<ph id="ph1">`.`</ph> or <ph id="ph2">`.@`</ph> or <ph id="ph3">`...`</ph>).</source>
          <target state="translated">XML 축 속성 한정자는 후 (<ph id="ph1">`.`</ph> 또는 <ph id="ph2">`.@`</ph> 또는 <ph id="ph3">`...`</ph>).</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>However, you must include a line-continuation character (_) when you specify a member qualifier when you are using the <ph id="ph1">`With`</ph> keyword.</source>
          <target state="translated">하지만 사용 하는 경우는 멤버 한정자를 지정 하면 줄 연속 문자 (_)을 포함 해야는 <ph id="ph1">`With`</ph> 키워드입니다.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation#9<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_23.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation #&amp;9;<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_23.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>XML Axis Properties<ept id="p1">](../../../visual-basic/language-reference/xml-axis/xml-axis-properties.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>XML 축 속성<ept id="p1">](../../../visual-basic/language-reference/xml-axis/xml-axis-properties.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>After a less-than sign (&lt;) or before a greater-than sign (<ph id="ph1">`&gt;`</ph>) when you specify an attribute.</source>
          <target state="translated">작음-보다 작다 (&lt;) or="" before="" a="" greater-than="" sign=""&gt;&lt;/)&gt;<ph id="ph1">`&gt;`</ph>) 특성을 지정 하는 경우.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Also after a greater-than sign (<ph id="ph1">`&gt;`</ph>) when you specify an attribute.</source>
          <target state="translated">뒤에 큼-보다 작다 (<ph id="ph1">`&gt;`</ph>) 특성을 지정 하는 경우.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>However, you must include a line-continuation character (_) when you specify assembly-level or module-level attributes.</source>
          <target state="translated">그러나 어셈블리 수준 또는 모듈 수준 특성을 지정 하면 줄 연속 문자 (_)을 포함 해야 합니다.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation#10<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_24.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation #&amp;10;<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_24.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Attributes overview<ept id="p1">](../../../visual-basic/programming-guide/concepts/attributes/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>특성 개요<ept id="p1">](../../../visual-basic/programming-guide/concepts/attributes/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Before and after query operators (<ph id="ph1">`Aggregate`</ph>, <ph id="ph2">`Distinct`</ph>, <ph id="ph3">`From`</ph>, <ph id="ph4">`Group By`</ph>, <ph id="ph5">`Group Join`</ph>, <ph id="ph6">`Join`</ph>, <ph id="ph7">`Let`</ph>, <ph id="ph8">`Order By`</ph>, <ph id="ph9">`Select`</ph>, <ph id="ph10">`Skip`</ph>, <ph id="ph11">`Skip While`</ph>, <ph id="ph12">`Take`</ph>, <ph id="ph13">`Take While`</ph>, <ph id="ph14">`Where`</ph>, <ph id="ph15">`In`</ph>, <ph id="ph16">`Into`</ph>, <ph id="ph17">`On`</ph>, <ph id="ph18">`Ascending`</ph>, and <ph id="ph19">`Descending`</ph>).</source>
          <target state="translated">Before and after query operators (<ph id="ph1">`Aggregate`</ph>, <ph id="ph2">`Distinct`</ph>, <ph id="ph3">`From`</ph>, <ph id="ph4">`Group By`</ph>, <ph id="ph5">`Group Join`</ph>, <ph id="ph6">`Join`</ph>, <ph id="ph7">`Let`</ph>, <ph id="ph8">`Order By`</ph>, <ph id="ph9">`Select`</ph>, <ph id="ph10">`Skip`</ph>, <ph id="ph11">`Skip While`</ph>, <ph id="ph12">`Take`</ph>, <ph id="ph13">`Take While`</ph>, <ph id="ph14">`Where`</ph>, <ph id="ph15">`In`</ph>, <ph id="ph16">`Into`</ph>, <ph id="ph17">`On`</ph>, <ph id="ph18">`Ascending`</ph>, and <ph id="ph19">`Descending`</ph>).</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>You cannot break a line between the keywords of query operators that are made up of multiple keywords (<ph id="ph1">`Order By`</ph>, <ph id="ph2">`Group Join`</ph>, <ph id="ph3">`Take While`</ph>, and <ph id="ph4">`Skip While`</ph>).</source>
          <target state="translated">여러 키워드 이루어진 하는 쿼리 연산자 키워드 사이 선을 중단 될 수 없습니다 (<ph id="ph1">`Order By`</ph>, <ph id="ph2">`Group Join`</ph>, <ph id="ph3">`Take While`</ph>, 및 <ph id="ph4">`Skip While`</ph>).</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation#11<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_25.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation #&amp;11;<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_25.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Queries<ept id="p1">](../../../visual-basic/language-reference/queries/queries.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>쿼리<ept id="p1">](../../../visual-basic/language-reference/queries/queries.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>After the <ph id="ph1">`In`</ph> keyword in a <ph id="ph2">`For Each`</ph> statement.</source>
          <target state="translated">후는 <ph id="ph1">`In`</ph> 의 키워드는 <ph id="ph2">`For Each`</ph> 문입니다.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation#12<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_26.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation #&amp;12;<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_26.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>For Each...Next Statement<ept id="p1">](../../../visual-basic/language-reference/statements/for-each-next-statement.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>각각에 대해... 다음 문<ept id="p1">](../../../visual-basic/language-reference/statements/for-each-next-statement.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>After the <ph id="ph1">`From`</ph> keyword in a collection initializer.</source>
          <target state="translated">이후에 <ph id="ph1">`From`</ph> 을 컬렉션 이니셜라이저의 키워드입니다.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation#13<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_27.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation #&amp;13;<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_27.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Collection Initializers<ept id="p1">](../../../visual-basic/programming-guide/language-features/collection-initializers/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>컬렉션 이니셜라이저<ept id="p1">](../../../visual-basic/programming-guide/language-features/collection-initializers/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Adding Comments</source>
          <target state="translated">주석 추가</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Source code is not always self-explanatory, even to the programmer who wrote it.</source>
          <target state="translated">소스 코드는 항상 것을 작성 하는 프로그래머 에게도 설명이 필요 없습니다.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>To help document their code, therefore, most programmers make liberal use of embedded comments.</source>
          <target state="translated">따라서 코드를 문서화할를 위해 대부분의 프로그래머가 포함 된 주석이 자유롭게 사용 하 여를 확인 합니다.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Comments in code can explain a procedure or a particular instruction to anyone reading or working with it later.</source>
          <target state="translated">코드의 주석 프로시저 또는 특정 명령을 읽기 또는 나중에 작업을 모든 사용자에 게 설명할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> ignores comments during compilation, and they do not affect the compiled code.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>컴파일하는 동안 주석을 무시는 컴파일된 코드가 영향을 주지 않습니다.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Comment lines begin with an apostrophe (<ph id="ph1">`'`</ph>) or <ph id="ph2">`REM`</ph> followed by a space.</source>
          <target state="translated">주석 줄 아포스트로피로 시작 (<ph id="ph1">`'`</ph>) 또는 <ph id="ph2">`REM`</ph> 뒤에 공백이 있습니다.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>They can be added anywhere in code, except within a string.</source>
          <target state="translated">추가할 수 있습니다 어디서 나 코드에서를 제외 하 고 문자열 내에서.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>To append a comment to a statement, insert an apostrophe or <ph id="ph1">`REM`</ph> after the statement, followed by the comment.</source>
          <target state="translated">문에 주석을 추가할 아포스트로피를 삽입 또는 <ph id="ph1">`REM`</ph> 메모 뒤 문 뒤 합니다.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Comments can also go on their own separate line.</source>
          <target state="translated">별도 줄에 주석을 수행할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>The following example demonstrates these possibilities.</source>
          <target state="translated">다음 예제에서는 이러한 가능성을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#72<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_28.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements #&amp;72;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_28.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Checking Compilation Errors</source>
          <target state="translated">컴파일 오류 검사</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>If, after you type a line of code, the line is displayed with a wavy blue underline (an error message may appear as well), there is a syntax error in the statement.</source>
          <target state="translated">코드 줄을 입력 한 후 줄 됩니다 (오류 메시지가 나타날 수 있음) 파란색 물결 무늬 밑줄로 표시 되 면, 문에 구문 오류가 있습니다.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>You must find out what is wrong with the statement (by looking in the task list, or hovering over the error with the mouse pointer and reading the error message) and correct it.</source>
          <target state="translated">무엇이 잘못 되었는지 문을 사용 하 여 작업 목록에서 검색 또는 오류 마우스 포인터를 위로 이동 하 고 기록 된 오류 메시지) 하는 것 (여 찾기 하 고 수정 해야 합니다.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Until you have fixed all syntax errors in your code, your program will fail to compile correctly.</source>
          <target state="translated">코드에서 모든 구문 오류를 수정 하기 전에 프로그램이 올바르게 컴파일하기 위해 실패 합니다.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Related Sections</source>
          <target state="translated">관련 단원</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Term</source>
          <target state="translated">용어</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Definition</source>
          <target state="translated">정의</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Assignment Operators<ept id="p1">](../../../visual-basic/language-reference/operators/assignment-operators.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>할당 연산자<ept id="p1">](../../../visual-basic/language-reference/operators/assignment-operators.md)</ept></target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Provides links to language reference pages covering assignment operators such as <ph id="ph1">`=`</ph>, <ph id="ph2">`*=`</ph>, and <ph id="ph3">`&amp;=`</ph>.</source>
          <target state="translated">와 같은 할당 연산자를 다루는 언어 참조 페이지에 대 한 링크를 제공 <ph id="ph1">`=`</ph>, <ph id="ph2">`*=`</ph>, 및 <ph id="ph3">`&amp;=`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Operators and Expressions<ept id="p1">](../../../visual-basic/programming-guide/language-features/operators-and-expressions/index.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>연산자 및 식<ept id="p1">](../../../visual-basic/programming-guide/language-features/operators-and-expressions/index.md)</ept></target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Shows how to combine elements with operators to yield new values.</source>
          <target state="translated">새 값을 산출 하는 연산자가 있는 요소를 결합 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Break and Combine Statements in Code<ept id="p1">](../../../visual-basic/programming-guide/program-structure/how-to-break-and-combine-statements-in-code.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>방법: 코드에서 문 분리 및 결합<ept id="p1">](../../../visual-basic/programming-guide/program-structure/how-to-break-and-combine-statements-in-code.md)</ept></target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Shows how to break a single statement into multiple lines and how to place multiple statements on the same line.</source>
          <target state="translated">단일 문에 여러 줄으로 중단 하는 방법과 같은 줄에 여러 개의 문을 배치 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Label Statements<ept id="p1">](../../../visual-basic/programming-guide/program-structure/how-to-label-statements.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>방법: Label 문<ept id="p1">](../../../visual-basic/programming-guide/program-structure/how-to-label-statements.md)</ept></target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Shows how to label a line of code.</source>
          <target state="translated">코드의 줄에 레이블을 지정 하는 방법을 보여 줍니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>