<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d224fa3338ca707070ee431380578a8fdde47e07</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\procedures\sub-procedures.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">92289ee0f1e0e4f2e2817ac61aaa137c5c974cfc</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">79bed87074bea072163a45e1c5c51a5e463e2db9</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Sub Procedures (Visual Basic) | Microsoft Docs</source>
          <target state="translated">Sub 프로시저 (Visual Basic) | Microsoft 문서</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Sub Procedures (Visual Basic)</source>
          <target state="translated">Sub 프로시저(Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Sub`</ph> procedure is a series of <ph id="ph2">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> statements enclosed by the <ph id="ph3">`Sub`</ph> and <ph id="ph4">`End Sub`</ph> statements.</source>
          <target state="translated">A <ph id="ph1">`Sub`</ph> 절차는 일련의 <ph id="ph2">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> 로 묶인 명령문의 <ph id="ph3">`Sub`</ph> 및 <ph id="ph4">`End Sub`</ph> 문입니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Sub`</ph> procedure performs a task and then returns control to the calling code, but it does not return a value to the calling code.</source>
          <target state="translated"><ph id="ph1">`Sub`</ph> 프로시저는 작업을 수행한 다음 호출 코드에 제어를 반환 하지만 호출 코드에는 값을 반환 하지는 않습니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Each time the procedure is called, its statements are executed, starting with the first executable statement after the <ph id="ph1">`Sub`</ph> statement and ending with the first <ph id="ph2">`End Sub`</ph>, <ph id="ph3">`Exit Sub`</ph>, or <ph id="ph4">`Return`</ph> statement encountered.</source>
          <target state="translated">프로시저를 호출할 때마다 해당 문이 실행 됩니다, 시작 후 첫 번째 실행 문에 <ph id="ph1">`Sub`</ph> 문과 여 첫 번째 <ph id="ph2">`End Sub`</ph>, <ph id="ph3">`Exit Sub`</ph>, 또는 <ph id="ph4">`Return`</ph> 문을 발견 했습니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You can define a <ph id="ph1">`Sub`</ph> procedure in modules, classes, and structures.</source>
          <target state="translated">정의할 수는 <ph id="ph1">`Sub`</ph> 모듈, 클래스 및 구조체에는 프로시저입니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>By default, it is <ph id="ph1">`Public`</ph>, which means you can call it from anywhere in your application that has access to the module, class, or structure in which you defined it.</source>
          <target state="translated">기본적으로는 <ph id="ph1">`Public`</ph>, 있습니다 즉 호출할 수 어디에서 나 모듈, 클래스 또는 정의 된 구조에 액세스할 수 있는 응용 프로그램의 합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The term, <bpt id="p1">*</bpt>method<ept id="p1">*</ept>, describes a <ph id="ph1">`Sub`</ph> or <ph id="ph2">`Function`</ph> procedure that is accessed from outside its defining module, class, or structure.</source>
          <target state="translated">용어를 <bpt id="p1">*</bpt>메서드<ept id="p1">*</ept>, 설명는 <ph id="ph1">`Sub`</ph> 또는 <ph id="ph2">`Function`</ph> 프로시저는 정의 외부에서 액세스할 수 있는 모듈, 클래스 또는 구조체입니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Procedures<ept id="p1">](./index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>프로시저<ept id="p1">](./index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Sub`</ph> procedure can take arguments, such as constants, variables, or expressions, which are passed to it by the calling code.</source>
          <target state="translated">A <ph id="ph1">`Sub`</ph> 프로시저와 같은 상수, 변수 또는 호출 코드에 의해 전달 되는 식을 인수를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Declaration Syntax</source>
          <target state="translated">선언 구문</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The syntax for declaring a <ph id="ph1">`Sub`</ph> procedure is as follows:</source>
          <target state="translated">선언 구문은 <ph id="ph1">`Sub`</ph> 절차는 다음과 같습니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`[`</ph> <bpt id="p1">*</bpt>modifiers<ept id="p1">*</ept> <ph id="ph2">`] Sub`</ph>  <bpt id="p2">*</bpt>subname<ept id="p2">*</ept> <ph id="ph3">`[(`</ph> <bpt id="p3">*</bpt>parameterlist<ept id="p3">*</ept> <ph id="ph4">`)]`</ph></source>
          <target state="translated"><ph id="ph1">`[`</ph><bpt id="p1">*</bpt>modifiers<ept id="p1">*</ept> <ph id="ph2">`] Sub`</ph><bpt id="p2">*</bpt>subname<ept id="p2">*</ept> <ph id="ph3">`[(`</ph> <bpt id="p3">*</bpt>parameterlist<ept id="p3">*</ept>  <ph id="ph4">`)]`</ph></target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`modifiers`</ph> can specify access level and information about overloading, overriding, sharing, and shadowing.</source>
          <target state="translated"><ph id="ph1">`modifiers`</ph> 오버 로드, 재정의 공유 및 숨김 하는 방법에 대 한 정보와 액세스 수준을 지정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Sub Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/sub-statement.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>Sub 문을<ept id="p1">](../../../../visual-basic/language-reference/statements/sub-statement.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Parameter Declaration</source>
          <target state="translated">매개 변수 선언</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You declare each procedure parameter similarly to how you declare a variable, specifying the parameter name and data type.</source>
          <target state="translated">각 프로시저 매개 변수에 유사 하 게 선언 하는 방법을 변수, 매개 변수 이름과 데이터 형식을 지정 선언 합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You can also specify the passing mechanism, and whether the parameter is optional or a parameter array.</source>
          <target state="translated">전달 메커니즘을 지정할 수도 있습니다 매개 변수는 선택 사항 및 매개 변수 배열입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The syntax for each parameter in the parameter list is as follows:</source>
          <target state="translated">매개 변수 목록에서 각 매개 변수에 대 한 구문은 다음과 같습니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`[Optional] [ByVal | ByRef] [ParamArray]`</ph>  <bpt id="p1">*</bpt>parametername<ept id="p1">*</ept>  <ph id="ph2">`As`</ph>  <bpt id="p2">*</bpt>datatype<ept id="p2">*</ept></source>
          <target state="translated"><ph id="ph1">`[Optional] [ByVal | ByRef] [ParamArray]`</ph>  <bpt id="p1">*</bpt>parametername<ept id="p1">*</ept><ph id="ph2">`As`</ph><bpt id="p2">*</bpt>데이터 형식    <ept id="p2">*</ept></target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If the parameter is optional, you must also supply a default value as part of its declaration.</source>
          <target state="translated">매개 변수는 선택 사항, 선언의 일부로 기본값을 제공 해야 합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The syntax for specifying a default value is as follows:</source>
          <target state="translated">기본값을 지정 하기 위한 구문은 다음과 같습니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Optional [ByVal | ByRef]`</ph>  <bpt id="p1">*</bpt>parametername<ept id="p1">*</ept>  <ph id="ph2">`As`</ph>  <bpt id="p2">*</bpt>datatype<ept id="p2">*</ept>  <ph id="ph3">`=`</ph>  <bpt id="p3">*</bpt>defaultvalue<ept id="p3">*</ept></source>
          <target state="translated"><ph id="ph1">`Optional [ByVal | ByRef]`</ph>  <bpt id="p1">*</bpt>parametername<ept id="p1">*</ept><ph id="ph2">`As`</ph><bpt id="p2">*</bpt>datatype<ept id="p2">*</ept><ph id="ph3">`=`</ph><bpt id="p3">*</bpt>defaultvalue        <ept id="p3">*</ept></target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Parameters as Local Variables</source>
          <target state="translated">지역 변수로 매개 변수</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>When control passes to the procedure, each parameter is treated as a local variable.</source>
          <target state="translated">제어 절차를 전달 하는 경우 각 매개 변수를 지역 변수로 처리 됩니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This means that its lifetime is the same as that of the procedure, and its scope is the whole procedure.</source>
          <target state="translated">이 프로시저의 수명이 동일 하 고 해당 범위는 전체 과정을 의미 합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Calling Syntax</source>
          <target state="translated">호출 구문</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You invoke a <ph id="ph1">`Sub`</ph> procedure explicitly with a stand-alone calling statement.</source>
          <target state="translated">호출 하는 <ph id="ph1">`Sub`</ph> 독립 실행형 호출 문을 통해 명시적으로 프로시저입니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You cannot call it by using its name in an expression.</source>
          <target state="translated">식에서 해당 이름을 사용 하 여 호출할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>You must provide values for all arguments that are not optional, and you must enclose the argument list in parentheses.</source>
          <target state="translated">선택적 인수가 아닌 모든 인수에 대 한 값을 제공 해야 하 고 인수 목록을 괄호로 묶어야 합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If no arguments are supplied, you can optionally omit the parentheses.</source>
          <target state="translated">없는 인수를 제공 하는 경우에 필요에 따라 괄호를 생략할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The use of the <ph id="ph1">`Call`</ph> keyword is optional but not recommended.</source>
          <target state="translated">사용 하 여 <ph id="ph1">`Call`</ph> 키워드는 선택 사항 이지만 권장 하지는 않습니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The syntax for a call to a <ph id="ph1">`Sub`</ph> procedure is as follows:</source>
          <target state="translated">에 대 한 호출에 대 한 구문은 <ph id="ph1">`Sub`</ph> 절차는 다음과 같습니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`[Call]`</ph>  <bpt id="p1">*</bpt>subname<ept id="p1">*</ept> <ph id="ph2">`[(`</ph> <bpt id="p2">*</bpt>argumentlist<ept id="p2">*</ept> <ph id="ph3">`)]`</ph></source>
          <target state="translated"><ph id="ph1">`[Call]`</ph>  <bpt id="p1">*</bpt>subname<ept id="p1">*</ept> <ph id="ph2">`[(`</ph> <bpt id="p2">*</bpt>argumentlist<ept id="p2">*</ept><ph id="ph3">`)]`</ph></target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>You can call a <ph id="ph1">`Sub`</ph> method from outside the class that defines it.</source>
          <target state="translated">호출할 수는 <ph id="ph1">`Sub`</ph> 정의 하는 클래스 외부에서 메서드.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>First, you have to use the <ph id="ph1">`New`</ph> keyword to create an instance of the class, or call a method that returns an instance of the class.</source>
          <target state="translated">사용 해야 하는 첫째, 고 <ph id="ph1">`New`</ph> 키워드는 클래스의 인스턴스를 만들거나 메서드를 호출 하는 클래스의 인스턴스를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>New Operator<ept id="p1">](../../../../visual-basic/language-reference/operators/new-operator.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>New 연산자<ept id="p1">](../../../../visual-basic/language-reference/operators/new-operator.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Then, you can use the following syntax to call the <ph id="ph1">`Sub`</ph> method on the instance object:</source>
          <target state="translated">호출 하는 다음 구문을 사용할 수는 그런 다음는 <ph id="ph1">`Sub`</ph> 인스턴스 개체 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Object<ept id="p1">*</ept>.<bpt id="p2">*</bpt>methodname<ept id="p2">*</ept><ph id="ph1">`[(`</ph><bpt id="p3">*</bpt>argumentlist<ept id="p3">*</ept><ph id="ph2">`)]`</ph></source>
          <target state="translated"><bpt id="p1">*</bpt>Object<ept id="p1">*</ept>.<bpt id="p2">*</bpt> methodname<ept id="p2">*</ept><ph id="ph1">`[(`</ph><bpt id="p3">*</bpt>argumentlist<ept id="p3">*</ept><ph id="ph2">`)]`</ph></target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Illustration of Declaration and Call</source>
          <target state="translated">선언 및 호출의 그림</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The following <ph id="ph1">`Sub`</ph> procedure tells the computer operator which task the application is about to perform, and also displays a time stamp.</source>
          <target state="translated">다음 <ph id="ph1">`Sub`</ph> 프로시저는 응용 프로그램에서 수행 하려는 작업을 컴퓨터 사용자에 게 알려 주고 타임 스탬프를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Instead of duplicating this code at the start of every task, the application just calls <ph id="ph1">`tellOperator`</ph> from various locations.</source>
          <target state="translated">모든 작업의 시작 부분에이 코드를 복제 하는 대신 응용 프로그램 호출 <ph id="ph1">`tellOperator`</ph> 다양 한 위치에서.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Each call passes a string in the <ph id="ph1">`task`</ph> argument that identifies the task being started.</source>
          <target state="translated">각 호출에서 문자열을 전달 하는 <ph id="ph1">`task`</ph> 시작 하려는 작업을 식별 하는 인수입니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnProcedures#2<ept id="p2">](./codesnippet/VisualBasic/sub-procedures_1.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnProcedures #&amp;2;<ept id="p2">](./codesnippet/VisualBasic/sub-procedures_1.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The following example shows a typical call to <ph id="ph1">`tellOperator`</ph>.</source>
          <target state="translated">다음 예제에서는 호출을 <ph id="ph1">`tellOperator`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnProcedures#3<ept id="p2">](./codesnippet/VisualBasic/sub-procedures_2.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnProcedures #&amp;3;<ept id="p2">](./codesnippet/VisualBasic/sub-procedures_2.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">참고 항목</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Procedures<ept id="p1">](./index.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>프로시저<ept id="p1">](./index.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Function Procedures<ept id="p1">](./function-procedures.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Function 프로시저<ept id="p1">](./function-procedures.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Property Procedures<ept id="p1">](./property-procedures.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>속성 프로시저<ept id="p1">](./property-procedures.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Operator Procedures<ept id="p1">](./operator-procedures.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>연산자 프로시저<ept id="p1">](./operator-procedures.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Procedure Parameters and Arguments<ept id="p1">](./procedure-parameters-and-arguments.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>프로시저 매개 변수 및 인수<ept id="p1">](./procedure-parameters-and-arguments.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Sub Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/sub-statement.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Sub 문<ept id="p1">](../../../../visual-basic/language-reference/statements/sub-statement.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Call a Procedure that Does Not Return a Value<ept id="p1">](./how-to-call-a-procedure-that-does-not-return-a-value.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>방법: 값을 반환 하지 않는 프로시저 호출<ept id="p1">](./how-to-call-a-procedure-that-does-not-return-a-value.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Call an Event Handler in Visual Basic<ept id="p1">](./how-to-call-an-event-handler.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>방법: Visual Basic에서 이벤트 처리기 호출<ept id="p1">](./how-to-call-an-event-handler.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>