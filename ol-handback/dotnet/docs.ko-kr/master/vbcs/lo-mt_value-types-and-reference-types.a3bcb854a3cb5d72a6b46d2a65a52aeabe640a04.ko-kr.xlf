<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">de8016b4b2a5550b32373a41c89a484fa996c596</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\data-types\value-types-and-reference-types.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7e722150cc712f99df2113eb3ec53438bfc5e81a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d6375fd2e2520091ec5cbe97786ca292c83819d5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Value Types and Reference Types | Microsoft Docs</source>
          <target state="translated">값 형식과 참조 형식이 | Microsoft 문서</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Value Types and Reference Types</source>
          <target state="translated">Value Types and Reference Types</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>In Visual Basic, data types are implemented based on their classification.</source>
          <target state="translated">Visual Basic의 데이터 형식은 분류에 따라 구현 됩니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> data types can be classified according to whether a variable of a particular type stores its own data or a pointer to the data.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> 데이터 형식은 특정 형식의 변수는 자체 데이터 또는 데이터에 대 한 포인터를 저장 하는 여부에 따라 분류할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>If it stores its own data it is a <bpt id="p1">*</bpt>value type<ept id="p1">*</ept>; if it holds a pointer to data elsewhere in memory it is a <bpt id="p2">*</bpt>reference type<ept id="p2">*</ept>.</source>
          <target state="translated">자체 데이터를 저장 하는 경우는 <bpt id="p1">*</bpt>값 형식<ept id="p1">*</ept>는 메모리의 다른 위치에서 데이터에 대 한 포인터를 보유 하는 경우는 <bpt id="p2">*</bpt>참조 형식<ept id="p2">*</ept>합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Value Types</source>
          <target state="translated">값 형식</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>A data type is a <bpt id="p1">*</bpt>value type<ept id="p1">*</ept> if it holds the data within its own memory allocation.</source>
          <target state="translated">데이터 형식은 <bpt id="p1">*</bpt>값 형식<ept id="p1">*</ept> 자신의 메모리 할당 내에서 데이터를 보유 하는 경우.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Value types include the following:</source>
          <target state="translated">값 형식은 다음과 같습니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>All numeric data types</source>
          <target state="translated">모든 숫자 데이터 형식</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Boolean`</ph>, <ph id="ph2">`Char`</ph>, and <ph id="ph3">`Date`</ph></source>
          <target state="translated"><ph id="ph1">`Boolean`</ph>, <ph id="ph2">`Char`</ph> 및 <ph id="ph3">`Date`</ph></target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>All structures, even if their members are reference types</source>
          <target state="translated">해당 멤버는 참조 형식인 경우에 모든 구조</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Enumerations, since their underlying type is always <ph id="ph1">`SByte`</ph>, <ph id="ph2">`Short`</ph>, <ph id="ph3">`Integer`</ph>, <ph id="ph4">`Long`</ph>, <ph id="ph5">`Byte`</ph>, <ph id="ph6">`UShort`</ph>, <ph id="ph7">`UInteger`</ph>, or <ph id="ph8">`ULong`</ph></source>
          <target state="translated">열거형의 내부 형식이 항상 이므로 <ph id="ph1">`SByte`</ph>, <ph id="ph2">`Short`</ph>, <ph id="ph3">`Integer`</ph>, <ph id="ph4">`Long`</ph>, <ph id="ph5">`Byte`</ph>, <ph id="ph6">`UShort`</ph>, <ph id="ph7">`UInteger`</ph>, 또는<ph id="ph8">`ULong`</ph></target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Every structure is a value type, even if it contains reference type members.</source>
          <target state="translated">모든 구조체는 값 형식에는 참조 형식 멤버를 포함 하는 경우에 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For this reason, value types such as <ph id="ph1">`Char`</ph> and <ph id="ph2">`Integer`</ph> are implemented by .NET Framework structures.</source>
          <target state="translated">이러한 이유로 값과 같은 형식이 <ph id="ph1">`Char`</ph> 및 <ph id="ph2">`Integer`</ph> .NET Framework 구조에 의해 구현 됩니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You can declare a value type by using the reserved keyword, for example, <ph id="ph1">`Decimal`</ph>.</source>
          <target state="translated">예를 들어, 예약 된 키워드를 사용 하 여 값 형식을 선언할 수 <ph id="ph1">`Decimal`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You can also use the <ph id="ph1">`New`</ph> keyword to initialize a value type.</source>
          <target state="translated">사용할 수도 있습니다는 <ph id="ph1">`New`</ph> 값 형식을 초기화 하는 키워드입니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This is especially useful if the type has a constructor that takes parameters.</source>
          <target state="translated">형식 매개 변수를 사용 하는 생성자에 경우에 특히 유용 합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>An example of this is the &lt;xref:System.Decimal.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Boolean%2CSystem.Byte%29&gt; constructor, which builds a new <ph id="ph1">`Decimal`</ph> value from the supplied parts.</source>
          <target state="translated">이 작업의 예로 &lt;xref:System.Decimal.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Boolean%2CSystem.Byte%29&gt;새 작성 하는 생성자가 <ph id="ph1">`Decimal`</ph> 는 지정 된 부분에서 값.&lt;/xref:System.Decimal.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Boolean%2CSystem.Byte%29&gt;</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Reference Types</source>
          <target state="translated">참조 형식</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>reference type<ept id="p1">*</ept> contains a pointer to another memory location that holds the data.</source>
          <target state="translated">A <bpt id="p1">*</bpt>참조 형식<ept id="p1">*</ept> 데이터를 보유 하는 다른 메모리 위치에 대 한 포인터를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Reference types include the following:</source>
          <target state="translated">참조 형식은 다음과 같습니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>All arrays, even if their elements are value types</source>
          <target state="translated">모든 배열의 해당 요소는 값 형식 하는 경우에</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Class types, such as &lt;xref:System.Windows.Forms.Form&gt;</source>
          <target state="translated">와 같은 클래스 형식&lt;xref:System.Windows.Forms.Form&gt;&lt;/xref:System.Windows.Forms.Form&gt;</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Delegates</source>
          <target state="translated">대리자</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>A class is a <bpt id="p1">*</bpt>reference type<ept id="p1">*</ept>.</source>
          <target state="translated">클래스는 한 <bpt id="p1">*</bpt>참조 형식<ept id="p1">*</ept>합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For this reason, reference types such as <ph id="ph1">`Object`</ph> and <ph id="ph2">`String`</ph> are supported by <ph id="ph3">[!INCLUDE[dnprdnshort](../../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph> classes.</source>
          <target state="translated">이러한 이유로 같은 참조 형식이 <ph id="ph1">`Object`</ph> 및 <ph id="ph2">`String`</ph> 에서 지 원하는 <ph id="ph3">[!INCLUDE[dnprdnshort](../../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Note that every array is a reference type, even if its members are value types.</source>
          <target state="translated">않음을 유의 하십시오 모든 배열은 참조 형식에서 해당 멤버 값 형식의 경우에 합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Since every reference type represents an underlying .NET Framework class, you must use the <bpt id="p1">[</bpt>New Operator<ept id="p1">](../../../../visual-basic/language-reference/operators/new-operator.md)</ept> keyword when you initialize it.</source>
          <target state="translated">사용 해야 모든 참조 형식에는 기본.NET Framework 클래스를 나타내므로 <bpt id="p1">[</bpt>New 연산자<ept id="p1">](../../../../visual-basic/language-reference/operators/new-operator.md)</ept> 키워드를 초기화 합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The following statement initializes an array.</source>
          <target state="translated">다음 문은 배열을 초기화합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Elements That Are Not Types</source>
          <target state="translated">형식 없는 요소</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The following programming elements do not qualify as types, because you cannot specify any of them as a data type for a declared element:</source>
          <target state="translated">그 중 하나에서 선언 된 요소에 대 한 데이터 형식으로 지정할 수 없으므로 다음 프로그래밍 요소 형식으로 적합 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Namespaces</source>
          <target state="translated">네임스페이스</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Modules</source>
          <target state="translated">모듈</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Events</source>
          <target state="translated">이벤트</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Properties and procedures</source>
          <target state="translated">속성 및 프로시저</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Variables, constants, and fields</source>
          <target state="translated">변수, 상수 및 필드</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Working with the Object Data Type</source>
          <target state="translated">개체 데이터 형식 사용</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>You can assign either a reference type or a value type to a variable of the <ph id="ph1">`Object`</ph> data type.</source>
          <target state="translated">참조 형식 또는 값 형식 변수에 할당할 수 있습니다는 <ph id="ph1">`Object`</ph> 데이터 형식입니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`Object`</ph> variable always holds a pointer to the data, never the data itself.</source>
          <target state="translated"><ph id="ph1">`Object`</ph> 항상 변수 데이터를 데이터 자체에 대 한 포인터를 가집니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>However, if you assign a value type to an <ph id="ph1">`Object`</ph> variable, it behaves as if it holds its own data.</source>
          <target state="translated">그러나 값 형식이을 할당 하는 경우는 <ph id="ph1">`Object`</ph> 변수인 것 처럼 동작 자체 데이터를 보유 합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Object Data Type<ept id="p1">](../../../../visual-basic/language-reference/data-types/object-data-type.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>Object 데이터 형식<ept id="p1">](../../../../visual-basic/language-reference/data-types/object-data-type.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>You can find out whether an <ph id="ph1">`Object`</ph> variable is acting as a reference type or a value type by passing it to the &lt;xref:Microsoft.VisualBasic.Information.IsReference%2A&gt; method in the &lt;xref:Microsoft.VisualBasic.Information&gt; class of the &lt;xref:Microsoft.VisualBasic?displayProperty=fullName&gt; namespace.</source>
          <target state="translated">하는지를 알 수 있습니다는 <ph id="ph1">`Object`</ph> 변수 역할을 하는 참조 형식 또는 값 형식을 전달 하 여는 &lt;xref:Microsoft.VisualBasic.Information.IsReference%2A&gt;에서 메서드는 &lt;xref:Microsoft.VisualBasic.Information&gt;의 클래스는 &lt;xref:Microsoft.VisualBasic?displayProperty=fullName&gt;네임 스페이스.&lt;/xref:Microsoft.VisualBasic?displayProperty=fullName&gt; &lt;/xref:Microsoft.VisualBasic.Information&gt; &lt;/xref:Microsoft.VisualBasic.Information.IsReference%2A&gt;</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>&lt;xref:Microsoft.VisualBasic.Information.IsReference%2A?displayProperty=fullName&gt; returns <ph id="ph1">`True`</ph> if the content of the <ph id="ph2">`Object`</ph> variable represents a reference type.</source>
          <target state="translated">&lt;xref:Microsoft.VisualBasic.Information.IsReference%2A?displayProperty=fullName&gt;반환 <ph id="ph1">`True`</ph> 경우의 콘텐츠는 <ph id="ph2">`Object`</ph> 참조 형식 변수를 나타냅니다.&lt;/xref:Microsoft.VisualBasic.Information.IsReference%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">참고 항목</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Nullable Value Types<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/nullable-value-types.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Nullable 값 형식<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/nullable-value-types.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Type Conversions in Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/type-conversions.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Visual Basic의 형식 변환<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/type-conversions.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Structure Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/structure-statement.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Structure 문<ept id="p1">](../../../../visual-basic/language-reference/statements/structure-statement.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Efficient Use of Data Types<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>데이터 형식의 효율적 사용<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Object Data Type<ept id="p1">](../../../../visual-basic/language-reference/data-types/object-data-type.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Object 데이터 형식<ept id="p1">](../../../../visual-basic/language-reference/data-types/object-data-type.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Data Types<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/index.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>데이터 형식<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/index.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>