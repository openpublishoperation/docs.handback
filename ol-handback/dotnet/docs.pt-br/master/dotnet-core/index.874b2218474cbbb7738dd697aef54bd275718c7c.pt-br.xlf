<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0ca64c3" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ca9d57a3ef3382c4957de5edb55959f1a3f13ee0</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\testing\index.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">22a21b10e0303ed46a4bf167b158278ee04b6d79</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c39fcd79da4aefa773e4376166d34e47b1462358</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Unit Testing in .NET Core</source>
          <target state="translated">Teste de Unidade no .NET Core</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Unit Testing in .NET Core</source>
          <target state="translated">Teste de Unidade no .NET Core</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Unit Testing in .NET Core</source>
          <target state="translated">Teste de Unidade no .NET Core</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>By <bpt id="p1">[</bpt>Steve Smith<ept id="p1">](http://ardalis.com)</ept> and <bpt id="p2">[</bpt>Bill Wagner<ept id="p2">](https://github.com/BillWagner)</ept></source>
          <target state="translated">Por <bpt id="p1">[</bpt>Steve Smith<ept id="p1">](http://ardalis.com)</ept> e <bpt id="p2">[</bpt>Bill Wagner<ept id="p2">](https://github.com/BillWagner)</ept></target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>.NET Core has been designed with testability in mind, so that creating unit tests for your applications is easier than ever before.</source>
          <target state="translated">O .NET Core foi projetado com a capacidade de realizar testes em mente, para que a criação de testes de unidade para seus aplicativos seja mais fácil do que nunca.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This article briefly introduces unit tests (and how they differ from other kinds of tests).</source>
          <target state="translated">Este artigo apresenta brevemente os testes de unidade (e como eles diferem de outros tipos de testes).</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Linked resources demonstrates how to add a test project to your solution and then run unit tests using either the command line or Visual Studio.</source>
          <target state="translated">Recursos vinculados demonstram como adicionar um projeto de teste à sua solução e executar testes de unidade usando a linha de comando ou o Visual Studio.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Getting Started with Testing</source>
          <target state="translated">Introdução aos Testes</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Having a suite of automated tests is one of the best ways to ensure a software application does what its authors intended it to do.</source>
          <target state="translated">Ter um pacote de testes automatizados é uma das melhores maneiras de garantir que um aplicativo de software faça o que seus autores pretendiam.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>There are many different kinds of tests for software applications, including integration tests, web tests, load tests, and many others.</source>
          <target state="translated">Há muitos tipos diferentes de testes diferentes para aplicativos de software, incluindo testes de integração, testes da Web, testes de carga e muitos outros.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>At the lowest level are unit tests, which test individual software components or methods.</source>
          <target state="translated">O nível mais baixo são os testes de unidade, que testam métodos ou componentes de software individuais.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Unit tests should only test code within the developer’s control, and should not test infrastructure concerns, like databases, file systems, or network resources.</source>
          <target state="translated">Testes de unidade só devem testar o código sob o controle do desenvolvedor e não questões de infraestrutura, como bancos de dados, sistemas de arquivos ou recursos de rede.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Unit tests may be written using <bpt id="p1">[</bpt>Test Driven Development (TDD)<ept id="p1">](http://deviq.com/test-driven-development/)</ept>, or they can be added to existing code to confirm its correctness.</source>
          <target state="translated">Testes de unidade podem ser escritos usando <bpt id="p1">[</bpt>TDD (Desenvolvimento Orientado por Testes)<ept id="p1">](http://deviq.com/test-driven-development/)</ept> ou adicionados ao código existente para confirmar sua precisão.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In either case, they should be small, well-named, and fast, since ideally you will want to be able to run hundreds of them before pushing your changes into the project’s shared code repository.</source>
          <target state="translated">Em ambos os casos, eles devem ser pequenos, bem nomeados e rápidos, visto que o ideal é ser capaz de executar centenas deles antes de enviar as alterações por push para o repositório de código compartilhado do projeto.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Developers often struggle with coming up with good names for their test classes and methods.</source>
          <target state="translated">Os desenvolvedores geralmente enfrentam problemas para inventar bons nomes para seus métodos e classe de teste.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>As a starting point, the ASP.NET product team follows <bpt id="p1">[</bpt>these conventions<ept id="p1">](https://github.com/aspnet/Home/wiki/Engineering-guidelines#unit-tests-and-functional-tests)</ept>.</source>
          <target state="translated">Como ponto de partida, a equipe de produto do ASP.NET segue <bpt id="p1">[</bpt>essas convenções<ept id="p1">](https://github.com/aspnet/Home/wiki/Engineering-guidelines#unit-tests-and-functional-tests)</ept>.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>When writing unit tests, be careful you don’t accidentally introduce dependencies on infrastructure.</source>
          <target state="translated">Ao escrever testes de unidade, tenha cuidado para não apresentar dependências à infraestrutura acidentalmente.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>These tend to make tests slower and more brittle, and thus should be reserved for integration tests.</source>
          <target state="translated">Eles tendem a tornar os testes mais lentos e mais frágeis, ficando reservados aos testes de integração.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You can avoid these hidden dependencies in your application code by following the <bpt id="p1">[</bpt>Explicit Dependencies Principle<ept id="p1">](http://deviq.com/explicit-dependencies-principle/)</ept> and using <bpt id="p2">[</bpt>Dependency Injection<ept id="p2">](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection)</ept> to request your dependencies from the framework.</source>
          <target state="translated">Você pode evitar essas dependências ocultas no código do aplicativo seguindo o <bpt id="p1">[</bpt>Princípio de Dependências Explícitas<ept id="p1">](http://deviq.com/explicit-dependencies-principle/)</ept> e usando a <bpt id="p2">[</bpt>Injeção de Dependência<ept id="p2">](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection)</ept> para solicitar as dependências da estrutura.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You can also keep your unit tests in a separate project from your integration tests, and ensure your unit test project doesn’t have references to or dependencies on infrastructure packages.</source>
          <target state="translated">Você pode manter seus testes de unidade em um projeto separado dos seus testes de integração e verificar se o projeto de teste de unidade não tem dependências ou referências a pacotes de infraestrutura.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Learn more about unit testing in .NET Core projects:</source>
          <target state="translated">Saiba mais sobre testes de unidade em projetos do .NET Core:</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Try this <bpt id="p1">[</bpt>walkthrough creating unit tests with xUnit and the .NET CLI<ept id="p1">](unit-testing-with-dotnet-test.md)</ept>.</source>
          <target state="translated">Experimente seguir o <bpt id="p1">[</bpt>passo a passo para criar testes de unidade com xUnit e a CLI do .NET<ept id="p1">](unit-testing-with-dotnet-test.md)</ept>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The XUnit team has written a tutorial that shows <bpt id="p1">[</bpt>how to use xUnit with .NET Core and Visual Studio<ept id="p1">](http://xunit.github.io/docs/getting-started-dotnet-core.html)</ept>.</source>
          <target state="translated">A equipe do XUnit criou um tutorial que mostra <bpt id="p1">[</bpt>como usar o xUnit com o .NET Core e Visual Studio<ept id="p1">](http://xunit.github.io/docs/getting-started-dotnet-core.html)</ept>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If you prefer using MSTest, try the <bpt id="p1">[</bpt>walkthrough creating unit tests with MSTest and the .NET CLI<ept id="p1">](unit-testing-with-mstest.md)</ept>.</source>
          <target state="translated">Se você preferir usar o MSTest, tente as <bpt id="p1">[</bpt>instruções passo a passo para criar testes de unidade com o MSTest e a CLI do .NET<ept id="p1">](unit-testing-with-mstest.md)</ept>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>