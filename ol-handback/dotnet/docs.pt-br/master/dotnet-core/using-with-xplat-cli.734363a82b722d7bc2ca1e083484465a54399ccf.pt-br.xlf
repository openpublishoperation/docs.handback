<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b5c25fc" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">240061d2515c14ba7ab733f4cc9e7e38fb2a5c7c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\tutorials\using-with-xplat-cli.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">50f255f8880345510e614e3e132acf26be8dcb51</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">841571b86aa8d1a6231726592248ae06e34dfb1d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Getting started with .NET Core using the CLI | Microsoft Docs</source>
          <target state="translated">Introdução ao .NET Core usando a CLI | Microsoft Docs</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>A step-by-step tutorial showing how to get started with .NET Core on Windows, Linux, or macOS using the .NET Core command-line interface (CLI).</source>
          <target state="translated">Um tutorial passo a passo que mostra como começar a usar o .NET Core no Windows, Linux ou macOS com a CLI (interface de linha de comando) do .NET Core.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET Core, CLI</source>
          <target state="translated">.NET Core, CLI</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Getting started with .NET Core on Windows/Linux/macOS using the command line</source>
          <target state="translated">Introdução ao .NET Core no Windows/Linux/macOS usando a linha de comando</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This topic will show you how to start developing cross-platforms apps in your machine using the .NET Core CLI tools.</source>
          <target state="translated">Este tópico mostra como começar a desenvolver aplicativos de plataforma cruzada no computador usando as ferramentas da CLI do .NET Core.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>If you're unfamiliar with the .NET Core CLI toolset, read the <bpt id="p1">[</bpt>.NET Core SDK overview<ept id="p1">](../tools/index.md)</ept>.</source>
          <target state="translated">Se não estiver familiarizado com o conjunto de ferramentas da CLI do .NET Core, leia a <bpt id="p1">[</bpt>Visão geral do SDK do .NET Core<ept id="p1">](../tools/index.md)</ept>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
          <target state="translated">Pré-requisitos</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>.NET Core SDK 1.0.0<ept id="p1">](https://www.microsoft.com/net/download/core)</ept>.</source>
          <target state="translated"><bpt id="p1">[</bpt>SDK 1.0.0 do .NET Core<ept id="p1">](https://www.microsoft.com/net/download/core)</ept>.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A text editor or code editor of your choice.</source>
          <target state="translated">Um editor de texto ou de código de sua escolha.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Hello, Console App!</source>
          <target state="translated">Olá, Aplicativo de Console.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>First, navigate to or create a new folder with a name you like.</source>
          <target state="translated">Primeiro, procure ou crie uma nova pasta com o nome desejado.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Hello<ept id="p1">*</ept> is the name chosen for the sample code, which can be found <bpt id="p2">[</bpt>here<ept id="p2">](https://github.com/dotnet/docs/tree/master/samples/core/console-apps/HelloMsBuild)</ept>.</source>
          <target state="translated"><bpt id="p1">*</bpt>Hello<ept id="p1">*</ept> é o nome escolhido para o código de exemplo, que pode ser encontrado <bpt id="p2">[</bpt>aqui<ept id="p2">](https://github.com/dotnet/docs/tree/master/samples/core/console-apps/HelloMsBuild)</ept>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Open up a command prompt and type the following:</source>
          <target state="translated">Abra um prompt de comando e digite o seguinte:</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Let's do a quick walkthrough:</source>
          <target state="translated">Vejamos um breve passo a passo:</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">`dotnet new`</ph><ept id="p1">](../tools/dotnet-new.md)</ept> creates an up-to-date <ph id="ph2">`Hello.csproj`</ph> project file with the dependencies necessary to build a console app.</source>
          <target state="translated"><bpt id="p1">[</bpt><ph id="ph1">`dotnet new`</ph><ept id="p1">](../tools/dotnet-new.md)</ept> cria um arquivo de projeto <ph id="ph2">`Hello.csproj`</ph> atualizado com as dependências necessárias para criar um aplicativo de console.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>It also creates a <ph id="ph1">`Program.cs`</ph>, a basic file containing the entry point for the application.</source>
          <target state="translated">Ele também cria um <ph id="ph1">`Program.cs`</ph>, um arquivo básico que contém o ponto de entrada para o aplicativo.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Hello.csproj`</ph>:</source>
          <target state="translated"><ph id="ph1">`Hello.csproj`</ph>:</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The project file specifies everything that's needed to restore dependencies and build the program.</source>
          <target state="translated">O arquivo de projeto especifica tudo o que é necessário para restaurar as dependências e compilar o programa.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`OutputType`</ph> tag specifies that we're building an executable, in other words a console application.</source>
          <target state="translated">A marca <ph id="ph1">`OutputType`</ph> especifica que estamos copilando um executável, em outras palavras, um aplicativo de console.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`TargetFramework`</ph> tag specifies what .NET runtime we're targeting.</source>
          <target state="translated">A marca <ph id="ph1">`TargetFramework`</ph> especifica o tempo de execução do .NET que estamos direcionando.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In an advance scenario, you can specify multiple target frameworks and build to all those in a single operation.</source>
          <target state="translated">Em um cenário avançado, você pode especificar várias estruturas de destino e compilar todos eles em uma única operação.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In this tutorial, we'll stick to building only for .NET Core 1.0.</source>
          <target state="translated">Neste tutorial, veremos apenas a compilação para .NET Core 1.0.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Program.cs`</ph>:</source>
          <target state="translated"><ph id="ph1">`Program.cs`</ph>:</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Program.cs<ept id="p2">](../../../samples/core/console-apps/HelloMsBuild/Program.cs)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Program.cs<ept id="p2">](../../../samples/core/console-apps/HelloMsBuild/Program.cs)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The program starts by <ph id="ph1">`using System`</ph>, which means "bring everything in the <ph id="ph2">`System`</ph> namespace into scope for this file".</source>
          <target state="translated">O programa é iniciado pelo <ph id="ph1">`using System`</ph>, que significa "colocar tudo no namespace <ph id="ph2">`System`</ph> no escopo para este arquivo".</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`System`</ph> namespace includes basic constructs such as <ph id="ph2">`string`</ph>, or numeric types.</source>
          <target state="translated">O namespace <ph id="ph1">`System`</ph> inclui construções básicas, como <ph id="ph2">`string`</ph> ou tipos numéricos.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>We then define a namespace called <ph id="ph1">`Hello`</ph>.</source>
          <target state="translated">Em seguida, definimos um namespace chamado <ph id="ph1">`Hello`</ph>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You can change this to anything you want.</source>
          <target state="translated">Você pode alterar isso de acordo com a sua vontade.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>A class named <ph id="ph1">`Program`</ph> is defined within that namespace, with a <ph id="ph2">`Main`</ph> method that takes an array of strings as its argument.</source>
          <target state="translated">Uma classe chamada <ph id="ph1">`Program`</ph> é definida dentro desse namespace, com um método <ph id="ph2">`Main`</ph> que usa uma matriz de cadeias de caracteres como argumento.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This array contains the list of arguments passed in when the compiled program is called.</source>
          <target state="translated">Essa matriz contém a lista de argumentos passados quando o programa compilado é chamado.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>As it is, this array is not used: all the program is doing is to write "Hello World!"</source>
          <target state="translated">Assim, essa matriz não será usada: o que o programa faz é gravar: "Hello World!"</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>to the console.</source>
          <target state="translated">no console.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Later, we'll make changes to the code that will make use of this argument.</source>
          <target state="translated">Posteriormente, faremos alterações no código que usará esse argumento.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">`dotnet restore`</ph><ept id="p1">](../tools/dotnet-restore.md)</ept> calls into <bpt id="p2">[</bpt>NuGet<ept id="p2">](http://nuget.org)</ept> (.NET package manager) to restore the tree of dependencies.</source>
          <target state="translated"><bpt id="p1">[</bpt><ph id="ph1">`dotnet restore`</ph><ept id="p1">](../tools/dotnet-restore.md)</ept> chama o <bpt id="p2">[</bpt>NuGet<ept id="p2">](http://nuget.org)</ept> (gerenciador de pacotes do .NET) para restaurar a árvore de dependências.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>NuGet analyzes the <bpt id="p1">*</bpt>Hello.csproj<ept id="p1">*</ept> file, downloads the dependencies stated in the file (or grabs them from a cache on your machine), and writes the <bpt id="p2">*</bpt>obj/project.assets.json<ept id="p2">*</ept> file.</source>
          <target state="translated">O NuGet analisa o arquivo <bpt id="p1">*</bpt>Hello.csproj<ept id="p1">*</ept>, baixa as dependências declaradas no arquivo (ou captura-as de um cache no computador) e grava o arquivo <bpt id="p2">*</bpt>obj/project.assets.json<ept id="p2">*</ept>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>project.assets.json<ept id="p1">*</ept> file is necessary to be able to compile and run.</source>
          <target state="translated">O arquivo <bpt id="p1">*</bpt>project.assets.json<ept id="p1">*</ept> é necessário para compilar e executar.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>project.assets.json<ept id="p1">*</ept> file is a persisted and complete set of the graph of NuGet dependencies and other information describing an app.</source>
          <target state="translated">O arquivo <bpt id="p1">*</bpt>project.assets.json<ept id="p1">*</ept> é um conjunto completo e persistente do gráfico de dependências do NuGet e de outras informações que descrevem um aplicativo.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>This file is read by other tools, such as <bpt id="p1">[</bpt><ph id="ph1">`dotnet build`</ph><ept id="p1">](../tools/dotnet-build.md)</ept> and <bpt id="p2">[</bpt><ph id="ph2">`dotnet run`</ph><ept id="p2">](../tools/dotnet-run.md)</ept>, enabling them to process the source code with a correct set of NuGet dependencies and binding resolutions.</source>
          <target state="translated">Esse arquivo é lido por outras ferramentas, como <bpt id="p1">[</bpt><ph id="ph1">`dotnet build`</ph><ept id="p1">](../tools/dotnet-build.md)</ept> e <bpt id="p2">[</bpt><ph id="ph2">`dotnet run`</ph><ept id="p2">](../tools/dotnet-run.md)</ept>, permitindo que elas processem o código-fonte com um conjunto correto das dependências do NuGet e das resoluções de associação.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">`dotnet run`</ph><ept id="p1">](../tools/dotnet-run.md)</ept> calls <bpt id="p2">[</bpt><ph id="ph2">`dotnet build`</ph><ept id="p2">](../tools/dotnet-build.md)</ept> to ensure that the build targets have been built, and then calls <ph id="ph3">`dotnet &lt;assembly.dll&gt;`</ph> to run the target application.</source>
          <target state="translated"><bpt id="p1">[</bpt><ph id="ph1">`dotnet run`</ph><ept id="p1">](../tools/dotnet-run.md)</ept> chama <bpt id="p2">[</bpt><ph id="ph2">`dotnet build`</ph><ept id="p2">](../tools/dotnet-build.md)</ept> para garantir que os destinos de build foram criados e então chama <ph id="ph3">`dotnet &lt;assembly.dll&gt;`</ph> para executar o aplicativo de destino.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Alternatively, you can also execute <bpt id="p1">[</bpt><ph id="ph1">`dotnet build`</ph><ept id="p1">](../tools/dotnet-build.md)</ept> to compile the code without running the build console applications.</source>
          <target state="translated">Como alternativa, também é possível pode executar <bpt id="p1">[</bpt><ph id="ph1">`dotnet build`</ph><ept id="p1">](../tools/dotnet-build.md)</ept> para compilar o código sem executar os aplicativos de console de compilação.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This results in a compiled application as a DLL file that can be run with <ph id="ph1">`dotnet bin\Debug\netcoreapp1.0\Hello.dll`</ph> on Windows (use <ph id="ph2">`/`</ph> for non-Windows systems).</source>
          <target state="translated">Isso resulta em um aplicativo compilado como um arquivo DLL que pode ser executado com <ph id="ph1">`dotnet bin\Debug\netcoreapp1.0\Hello.dll`</ph> no Windows (use <ph id="ph2">`/`</ph> para sistemas não Windows).</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>You may specify also specify arguments to the application as you'll see later on the topic.</source>
          <target state="translated">Também é possível especificar argumentos para o aplicativo, como você verá adiante no tópico.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>As an advanced scenario, it's possible to build the application as a self-contained set of platform-specific files that can be deployed and run to a machine that doesn't necessarily have .NET Core installed.</source>
          <target state="translated">Como um cenário avançado, é possível compilar o aplicativo como um conjunto independente de arquivos específicos de plataforma que pode ser implantado e executado em um computador que não tem necessariamente o .NET Core instalado.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>.NET Core Application Deployment<ept id="p1">](../deploying/index.md)</ept> for details.</source>
          <target state="translated">Consulte <bpt id="p1">[</bpt>Implantação do .NET Core Application<ept id="p1">](../deploying/index.md)</ept> para obter mais informações.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Augmenting the program</source>
          <target state="translated">Ampliando o programa</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Let's change the program a bit.</source>
          <target state="translated">Vamos alterar o programa um pouco.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Fibonacci numbers are fun, so let's add that in addition to use the argument to greet the person running the app.</source>
          <target state="translated">Números de Fibonacci são divertidos; portanto, vamos adicionar isso, além de usar o argumento para saudar a pessoa que executa o aplicativo.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Replace the contents of your <bpt id="p1">*</bpt>Program.cs<ept id="p1">*</ept>  file with the following code:</source>
          <target state="translated">Substitua o conteúdo do arquivo <bpt id="p1">*</bpt>Program.cs<ept id="p1">*</ept> pelo seguinte código:</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Fibonacci<ept id="p2">](../../../samples/core/console-apps/fibonacci-msbuild/Program.cs)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Fibonacci<ept id="p2">](../../../samples/core/console-apps/fibonacci-msbuild/Program.cs)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Execute <bpt id="p1">[</bpt><ph id="ph1">`dotnet build`</ph><ept id="p1">](../tools/dotnet-build.md)</ept> to compile the changes.</source>
          <target state="translated">Execute <bpt id="p1">[</bpt><ph id="ph1">`dotnet build`</ph><ept id="p1">](../tools/dotnet-build.md)</ept> para compilar as alterações.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Run the program passing a parameter to the app:</source>
          <target state="translated">Execute o programa passando um parâmetro para o aplicativo:</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>And that's it!</source>
          <target state="translated">E pronto.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>You can augment <ph id="ph1">`Program.cs`</ph> any way you like.</source>
          <target state="translated">Você pode ampliar <ph id="ph1">`Program.cs`</ph> como desejar.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Working with multiple files</source>
          <target state="translated">Trabalhando com vários arquivos</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Single files are fine for simple one-off programs, but if you're building a more complex app, you're probably going to have multiple source files on your project Let's build off of the previous Fibonacci example by caching some Fibonacci values and add some recursive features.</source>
          <target state="translated">Arquivos individuais são adequados para programas avulsos simples, mas se você estiver compilando um aplicativo mais complexo, provavelmente terá vários arquivos de origem no projeto. Vamos compilar com base no exemplo anterior de Fibonacci armazenando em cache alguns valores de Fibonacci e adicionar alguns recursos recursivos.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Add a new file inside the <bpt id="p1">*</bpt>Hello<ept id="p1">*</ept> directory named <bpt id="p2">*</bpt>FibonacciGenerator.cs<ept id="p2">*</ept> with the following code:</source>
          <target state="translated">Adicione um novo arquivo no diretório <bpt id="p1">*</bpt>Hello<ept id="p1">*</ept> chamado <bpt id="p2">*</bpt>FibonacciGenerator.cs<ept id="p2">*</ept> com o seguinte código:</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Fibonacci Generator<ept id="p2">](../../../samples/core/console-apps/FibonacciBetterMsBuild/FibonacciGenerator.cs)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Gerador de Fibonacci<ept id="p2">](../../../samples/core/console-apps/FibonacciBetterMsBuild/FibonacciGenerator.cs)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Change the <ph id="ph1">`Main`</ph> method in your <bpt id="p1">*</bpt>Program.cs<ept id="p1">*</ept> file to instantiate the new class and call its method as in the following example:</source>
          <target state="translated">Altere o método <ph id="ph1">`Main`</ph> no arquivo <bpt id="p1">*</bpt>Program.cs<ept id="p1">*</ept> para criar uma instância da nova classe e chame seu método como no seguinte exemplo:</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>New Program.cs<ept id="p2">](../../../samples/core/console-apps/FibonacciBetterMsBuild/Program.cs)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>New Program.cs<ept id="p2">](../../../samples/core/console-apps/FibonacciBetterMsBuild/Program.cs)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Execute <bpt id="p1">[</bpt><ph id="ph1">`dotnet build`</ph><ept id="p1">](../tools/dotnet-build.md)</ept> to compile the changes.</source>
          <target state="translated">Execute <bpt id="p1">[</bpt><ph id="ph1">`dotnet build`</ph><ept id="p1">](../tools/dotnet-build.md)</ept> para compilar as alterações.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Run your app by executing <bpt id="p1">[</bpt><ph id="ph1">`dotnet run`</ph><ept id="p1">](../tools/dotnet-run.md)</ept>.</source>
          <target state="translated">Execute o aplicativo executando <bpt id="p1">[</bpt><ph id="ph1">`dotnet run`</ph><ept id="p1">](../tools/dotnet-run.md)</ept>.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The following shows the program output:</source>
          <target state="translated">O seguinte código mostra a saída do programa:</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>And that's it!</source>
          <target state="translated">E pronto.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Now, you can start using the basic concepts learned here to create your own programs.</source>
          <target state="translated">Agora, é possível começar a usar os conceitos básicos aprendidos aqui para criar seus próprios programas.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Note that the commands and steps shown in this tutorial to run your application are used during development time only.</source>
          <target state="translated">Observe que os comandos e as etapas mostradas neste tutorial para executar o aplicativo são usadas somente durante o tempo de desenvolvimento.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Once you're ready to deploy your app, you'll want to take a look at the different <bpt id="p1">[</bpt>deployment strategies<ept id="p1">](../deploying/index.md)</ept> for .NET Core apps and the <bpt id="p2">[</bpt><ph id="ph1">`dotnet publish`</ph><ept id="p2">](../tools/dotnet-publish.md)</ept> command.</source>
          <target state="translated">Quando estiver pronto para implantar o aplicativo, você desejará dar uma olhada nas diferentes <bpt id="p1">[</bpt>estratégias de implantação<ept id="p1">](../deploying/index.md)</ept> para aplicativos .NET Core e no comando <bpt id="p2">[</bpt><ph id="ph1">`dotnet publish`</ph><ept id="p2">](../tools/dotnet-publish.md)</ept>.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>See also</source>
          <target state="translated">Consulte também</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Organizing and testing projects with the .NET Core CLI tools<ept id="p1">](testing-with-cli.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Organizando e testando projetos com as ferramentas da CLI do .NET Core<ept id="p1">](testing-with-cli.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>