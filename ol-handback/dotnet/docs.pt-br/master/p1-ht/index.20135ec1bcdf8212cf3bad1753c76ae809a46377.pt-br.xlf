<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7249f1bed4395671cc294d5db83e83844782736a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\tour-of-csharp\index.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">p1-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9bea7ebb89ebc6aec60846e373d6183e6053263f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ead5027aa554b796e34d0ae7f2323a85140fce69</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>A Tour of C# | C# Guide</source>
          <target state="translated">Um tour pelo C# | Guia do C#</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>New to C#?</source>
          <target state="translated">Novato em C#?</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Learn the basics of the language.</source>
          <target state="translated">Conheça os fundamentos da linguagem.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core, C#, C# Primer, C# Guide</source>
          <target state="translated">.NET, .NET Core, C#, C# Primer, Guia do C#</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>A Tour of the C# Language</source>
          <target state="translated">Um tour pela linguagem C#</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>C# (pronounced “See Sharp”) is a simple, modern, object-oriented, and type-safe programming language.</source>
          <target state="translated">O C# (pronuncia-se "C Sharp") é uma linguagem de programação simples, moderna, orientada a objeto e fortemente tipada.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>C# has its roots in the C family of languages and will be immediately familiar to C, C++, Java, and JavaScript programmers.</source>
          <target state="translated">O C# tem suas raízes na família de linguagens C e os programadores em C, C++, Java e JavaScript a reconhecerão imediatamente.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>C# is an object-oriented language, but C# further includes support for <bpt id="p1">***</bpt>component-oriented<ept id="p1">***</ept> programming.</source>
          <target state="translated">O C# é uma linguagem orientada a objeto, mas inclui ainda suporte para programação <bpt id="p1">***</bpt>orientada a componentes<ept id="p1">***</ept>.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Contemporary software design increasingly relies on software components in the form of self-contained and self-describing packages of functionality.</source>
          <target state="translated">O design de software atual depende cada vez mais dos componentes de software na forma de pacotes independentes e autodescritivos de funcionalidade.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Key to such components is that they present a programming model with properties, methods, and events; they have attributes that provide declarative information about the component; and they incorporate their own documentation.</source>
          <target state="translated">O principal é que esses componentes apresentam um modelo de programação com propriedades, métodos e eventos; eles têm atributos que fornecem informações declarativas sobre o componente; e incorporam sua própria documentação.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>C# provides language constructs to support directly these concepts, making C# a very natural language in which to create and use software components.</source>
          <target state="translated">C# fornece construções de linguagem para dar suporte diretamente a esses conceitos, tornando C# uma linguagem muito natural para criação e uso de componentes de software.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Several C# features aid in the construction of robust and durable applications: <bpt id="p1">***</bpt>Garbage collection<ept id="p1">***</ept> automatically reclaims memory occupied by unreachable unused objects; <bpt id="p2">***</bpt>exception handling<ept id="p2">***</ept> provides a structured and extensible approach to error detection and recovery; and the <bpt id="p3">***</bpt>type-safe<ept id="p3">***</ept> design of the language makes it impossible to read from uninitialized variables, to index arrays beyond their bounds, or to perform unchecked type casts.</source>
          <target state="translated">Vários recursos do C# auxiliam na construção de aplicativos robustos e duradouros: <bpt id="p1">***</bpt>Coleta de lixo<ept id="p1">***</ept> recupera automaticamente a memória ocupada por objetos inacessíveis não utilizados; <bpt id="p2">***</bpt>tratamento de exceção<ept id="p2">***</ept> fornece uma abordagem estruturada e extensível para detecção e recuperação de erros; e o design <bpt id="p3">***</bpt>fortemente tipado<ept id="p3">***</ept> da linguagem impossibilita a leitura das variáveis não inicializadas, a indexação de matrizes além dos seus limites ou a execução de conversões de tipo não verificadas.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>C# has a <bpt id="p1">***</bpt>unified type system<ept id="p1">***</ept>.</source>
          <target state="translated">C# tem um <bpt id="p1">***</bpt>sistema de tipo unificado<ept id="p1">***</ept>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>All C# types, including primitive types such as <ph id="ph1">`int`</ph> and <ph id="ph2">`double`</ph>, inherit from a single root <ph id="ph3">`object`</ph> type.</source>
          <target state="translated">Todos os tipos do C#, incluindo tipos primitivos, como <ph id="ph1">`int`</ph> e <ph id="ph2">`double`</ph>, herdam de um único tipo de <ph id="ph3">`object`</ph> raiz.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Thus, all types share a set of common operations, and values of any type can be stored, transported, and operated upon in a consistent manner.</source>
          <target state="translated">Assim, todos os tipos compartilham um conjunto de operações comuns, e valores de qualquer tipo podem ser armazenados, transportados e operados de maneira consistente.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Furthermore, C# supports both user-defined reference types and value types, allowing dynamic allocation of objects as well as in-line storage of lightweight structures.</source>
          <target state="translated">Além disso, C# oferece suporte a tipos de referência e tipos de valor definidos pelo usuário, permitindo a alocação dinâmica de objetos, bem como o armazenamento em linha de estruturas leves.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>To ensure that C# programs and libraries can evolve over time in a compatible manner, much emphasis has been placed on <bpt id="p1">***</bpt>versioning<ept id="p1">***</ept> in C#’s design.</source>
          <target state="translated">Para garantir que os programas e bibliotecas escritos em C# possam evoluir ao longo do tempo de uma maneira compatível, enfatizou-se muito o <bpt id="p1">***</bpt>controle de versão<ept id="p1">***</ept> no design do C#.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Many programming languages pay little attention to this issue, and, as a result, programs written in those languages break more often than necessary when newer versions of dependent libraries are introduced.</source>
          <target state="translated">Muitas linguagens de programação prestam pouca atenção a esse problema e, como resultado, programas escritos nessas linguagens quebram com mais frequência do que o necessário quando versões mais recentes das bibliotecas dependentes são introduzidas.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Aspects of C#’s design that were directly influenced by versioning considerations include the separate <ph id="ph1">`virtual`</ph> and <ph id="ph2">`override`</ph> modifiers, the rules for method overload resolution, and support for explicit interface member declarations.</source>
          <target state="translated">Aspectos do design do C# que foram diretamente influenciados pelas considerações de controle de versão incluem os modificadores separados <ph id="ph1">`virtual`</ph> e <ph id="ph2">`override`</ph>, as regras de resolução de sobrecarga de método e suporte para declarações explícitas de membro de interface.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Hello world</source>
          <target state="translated">Hello world</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The “Hello, World” program is traditionally used to introduce a programming language.</source>
          <target state="translated">O programa "Hello, World" é usado tradicionalmente para introduzir uma linguagem de programação.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Here it is in C#:</source>
          <target state="translated">Este é para C#:</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Hello World<ept id="p2">](../../../samples/snippets/csharp/tour/hello/Program.cs#L1-L8)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Hello World<ept id="p2">](../../../samples/snippets/csharp/tour/hello/Program.cs#L1-L8)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>C# source files typically have the file extension <ph id="ph1">`.cs`</ph>.</source>
          <target state="translated">Os arquivos de origem em C# normalmente têm a extensão de arquivo <ph id="ph1">`.cs`</ph>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Assuming that the “Hello, World” program is stored in the file <ph id="ph1">`hello.cs`</ph>, the program might be compiled using the command line:</source>
          <target state="translated">Supondo que o programa "Hello, World" esteja armazenado no arquivo <ph id="ph1">`hello.cs`</ph>, o programa pode ser compilado usando a linha de comando:</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>which produces an executable assembly named hello.exe.</source>
          <target state="translated">que produz um assembly executável chamado hello.exe.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The output produced by this application when it is run is:</source>
          <target state="translated">O resultado produzido pela execução desse aplicativo é:</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`csc`</ph> command compiles for the full framework, and may not be available on all platforms.</source>
          <target state="translated">O comando <ph id="ph1">`csc`</ph> compila para o framework completo e talvez não esteja disponível em todas as plataformas.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The “Hello, World” program starts with a <ph id="ph1">`using`</ph> directive that references the <ph id="ph2">`System`</ph> namespace.</source>
          <target state="translated">O programa "Hello, World" começa com uma diretiva <ph id="ph1">`using`</ph> que faz referência ao namespace <ph id="ph2">`System`</ph>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Namespaces provide a hierarchical means of organizing C# programs and libraries.</source>
          <target state="translated">Namespaces fornecem um meio hierárquico de organizar bibliotecas e programas em C#.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Namespaces contain types and other namespaces—for example, the <ph id="ph1">`System`</ph> namespace contains a number of types, such as the <ph id="ph2">`Console`</ph> class referenced in the program, and a number of other namespaces, such as <ph id="ph3">`IO`</ph> and <ph id="ph4">`Collections`</ph>.</source>
          <target state="translated">Os namespaces contêm tipos e outros namespaces — por exemplo, o namespace <ph id="ph1">`System`</ph> contém uma quantidade de tipos, como a classe <ph id="ph2">`Console`</ph> referenciada no programa e diversos outros namespaces, como <ph id="ph3">`IO`</ph> e <ph id="ph4">`Collections`</ph>.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`using`</ph> directive that references a given namespace enables unqualified use of the types that are members of that namespace.</source>
          <target state="translated">A diretiva <ph id="ph1">`using`</ph> que faz referência a um determinado namespace permite o uso não qualificado dos tipos que são membros desse namespace.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Because of the <ph id="ph1">`using`</ph> directive, the program can use <ph id="ph2">`Console.WriteLine`</ph> as shorthand for <ph id="ph3">`System.Console.WriteLine`</ph>.</source>
          <target state="translated">Devido à diretiva <ph id="ph1">`using`</ph>, o programa pode usar <ph id="ph2">`Console.WriteLine`</ph> como um atalho para <ph id="ph3">`System.Console.WriteLine`</ph>.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Hello`</ph> class declared by the “Hello, World” program has a single member, the method named <ph id="ph2">`Main`</ph>.</source>
          <target state="translated">A classe <ph id="ph1">`Hello`</ph> declarada pelo programa "Hello, World" tem um único membro, o método chamado <ph id="ph2">`Main`</ph>.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Main`</ph> method is declared with the static modifier.</source>
          <target state="translated">O método <ph id="ph1">`Main`</ph> é declarado com o modificador estático.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>While instance methods can reference a particular enclosing object instance using the keyword <ph id="ph1">`this`</ph>, static methods operate without reference to a particular object.</source>
          <target state="translated">Embora os métodos de instância possam fazer referência a uma determinada instância de objeto delimitador usando a palavra-chave <ph id="ph1">`this`</ph>, métodos estáticos operam sem referência a um objeto específico.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>By convention, a static method named <ph id="ph1">`Main`</ph> serves as the entry point of a program.</source>
          <target state="translated">Por convenção, um método estático denominado <ph id="ph1">`Main`</ph> serve como ponto de entrada de um programa.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The output of the program is produced by the <ph id="ph1">`WriteLine`</ph> method of the <ph id="ph2">`Console`</ph> class in the <ph id="ph3">`System`</ph> namespace.</source>
          <target state="translated">A saída do programa é produzida pelo método <ph id="ph1">`WriteLine`</ph> da classe <ph id="ph2">`Console`</ph> no namespace <ph id="ph3">`System`</ph>.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>This class is provided by the standard class libraries, which, by default, are automatically referenced by the compiler.</source>
          <target state="translated">Essa classe é fornecida pelas bibliotecas de classe padrão, que, por padrão, são referenciadas automaticamente pelo compilador.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>There's a lot more to learn about C#.</source>
          <target state="translated">Há muito mais para aprender sobre C#.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The following topics provide an overview of the elements of the C# language.</source>
          <target state="translated">Os tópicos a seguir fornecem uma visão geral dos elementos da linguagem C#.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>These overviews will provide basic information about all elements of the language and give you the information necessary to dive deeper into elements of the C# language:</source>
          <target state="translated">Essas visões gerais fornecerão informações básicas sobre todos os elementos da linguagem e fornecerão as informações necessárias para se aprofundar nos elementos da linguagem C#:</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Program Structure<ept id="p1">](program-structure.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Estrutura do programa<ept id="p1">](program-structure.md)</ept></target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Learn the key organizational concepts in the C# language: <bpt id="p1">***</bpt>programs<ept id="p1">***</ept>, <bpt id="p2">***</bpt>namespaces<ept id="p2">***</ept>, <bpt id="p3">***</bpt>types<ept id="p3">***</ept>, <bpt id="p4">***</bpt>members<ept id="p4">***</ept>, and <bpt id="p5">***</bpt>assemblies<ept id="p5">***</ept>.</source>
          <target state="translated">Aprenda os principais conceitos organizacionais na linguagem C#: <bpt id="p1">***</bpt>programas<ept id="p1">***</ept>, <bpt id="p2">***</bpt>namespaces<ept id="p2">***</ept>, <bpt id="p3">***</bpt>tipos<ept id="p3">***</ept>, <bpt id="p4">***</bpt>membros<ept id="p4">***</ept> e <bpt id="p5">***</bpt>assemblies<ept id="p5">***</ept>.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Types and Variables<ept id="p1">](types-and-variables.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Tipos e variáveis<ept id="p1">](types-and-variables.md)</ept></target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Learn about <bpt id="p1">***</bpt>value types<ept id="p1">***</ept>, <bpt id="p2">***</bpt>reference types<ept id="p2">***</ept>, and <bpt id="p3">***</bpt>variables<ept id="p3">***</ept> in the C# language.</source>
          <target state="translated">Saiba mais sobre <bpt id="p1">***</bpt>tipos de valor<ept id="p1">***</ept>, <bpt id="p2">***</bpt>tipos de referência<ept id="p2">***</ept>, e <bpt id="p3">***</bpt>variáveis<ept id="p3">***</ept> na linguagem C#.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Expressions<ept id="p1">](expressions.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Expressões<ept id="p1">](expressions.md)</ept></target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">***</bpt>Expressions<ept id="p1">***</ept> are constructed from <bpt id="p2">***</bpt>operands<ept id="p2">***</ept> and <bpt id="p3">***</bpt>operators<ept id="p3">***</ept>.</source>
          <target state="translated"><bpt id="p1">***</bpt>Expressões<ept id="p1">***</ept> são construídas a partir de <bpt id="p2">***</bpt>operandos<ept id="p2">***</ept> e <bpt id="p3">***</bpt>operadores<ept id="p3">***</ept>.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Expressions produce a value.</source>
          <target state="translated">As expressões produzem um valor.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Statements<ept id="p1">](statements.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Instruções<ept id="p1">](statements.md)</ept></target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>You use <bpt id="p1">***</bpt>statements<ept id="p1">***</ept> to express the actions of a program.</source>
          <target state="translated">Você usa <bpt id="p1">***</bpt>instruções<ept id="p1">***</ept> para expressar as ações de um programa.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Classes and objects<ept id="p1">](classes-and-objects.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Classes e objetos<ept id="p1">](classes-and-objects.md)</ept></target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">***</bpt>Classes<ept id="p1">***</ept> are the most fundamental of C#'s types.</source>
          <target state="translated">As <bpt id="p1">***</bpt>classes<ept id="p1">***</ept> são os tipos do C# mais fundamentais.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">***</bpt>Objects<ept id="p1">***</ept> are instances of a class.</source>
          <target state="translated">Os <bpt id="p1">***</bpt>objetos<ept id="p1">***</ept> são instâncias de uma classe.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Classes are built using <bpt id="p1">***</bpt>members<ept id="p1">***</ept>, which are also covered in this topic.</source>
          <target state="translated">As classes são compiladas usando <bpt id="p1">***</bpt>membros<ept id="p1">***</ept>, que também são abordados neste tópico.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Structs<ept id="p1">](structs.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Estruturas<ept id="p1">](structs.md)</ept></target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">***</bpt>Structs<ept id="p1">***</ept> are data structures that, unlike classes, are value types.</source>
          <target state="translated">Os <bpt id="p1">***</bpt>structs<ept id="p1">***</ept> são estruturas de dados que, diferentemente das classes, são tipos de valor.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Arrays<ept id="p1">](arrays.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Matrizes<ept id="p1">](arrays.md)</ept></target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">***</bpt>array<ept id="p1">***</ept> is a data structure that contains a number of variables that are accessed through computed indices.</source>
          <target state="translated">Uma <bpt id="p1">***</bpt>matriz<ept id="p1">***</ept> é uma estrutura de dados que contém algumas variáveis acessadas por meio de índices calculados.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Interfaces<ept id="p1">](interfaces.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Interfaces<ept id="p1">](interfaces.md)</ept></target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">***</bpt>interface<ept id="p1">***</ept> defines a contract that can be implemented by classes and structs.</source>
          <target state="translated">Uma <bpt id="p1">***</bpt>interface<ept id="p1">***</ept> define um contrato que pode ser implementado por classes e estruturas.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>An interface can contain methods, properties, events, and indexers.</source>
          <target state="translated">Uma interface pode conter métodos, propriedades, eventos e indexadores.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>An interface does not provide implementations of the members it defines—it merely specifies the members that must be supplied by classes or structs that implement the interface.</source>
          <target state="translated">Uma interface não fornece implementações dos membros que define — ela simplesmente especifica os membros que devem ser fornecidos por classes ou estruturas que implementam a interface.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Enums<ept id="p1">](enums.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Enums<ept id="p1">](enums.md)</ept></target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">***</bpt>enum type<ept id="p1">***</ept> is a distinct value type with a set of named constants.</source>
          <target state="translated">Um <bpt id="p1">***</bpt>tipo enum<ept id="p1">***</ept> é um tipo de valor diferente com um conjunto de constantes nomeadas.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Delegates<ept id="p1">](delegates.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Delegados<ept id="p1">](delegates.md)</ept></target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">***</bpt>delegate type<ept id="p1">***</ept> represents references to methods with a particular parameter list and return type.</source>
          <target state="translated">Um <bpt id="p1">***</bpt>delegado<ept id="p1">***</ept> é um tipo que representa referências aos métodos com uma lista de parâmetros e tipo de retorno específicos.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Delegates make it possible to treat methods as entities that can be assigned to variables and passed as parameters.</source>
          <target state="translated">Delegados possibilitam o tratamento de métodos como entidades que podem ser atribuídos a variáveis e passadas como parâmetros.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Delegates are similar to the concept of function pointers found in some other languages, but unlike function pointers, delegates are object-oriented and type-safe.</source>
          <target state="translated">Os delegados são parecidos com o conceito de ponteiros de função em outras linguagens, mas ao contrário dos ponteiros de função, os delegados são orientados a objetos e fortemente tipados.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Attributes<ept id="p1">](attributes.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Atributos<ept id="p1">](attributes.md)</ept></target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">***</bpt>Attributes<ept id="p1">***</ept> enable programs to specify additional declarative information about types, members, and other entities.</source>
          <target state="translated"><bpt id="p1">***</bpt>Atributos<ept id="p1">***</ept> permitem que programas especifiquem informações declarativas adicionais sobre tipos, membros e outras entidades.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Next<ept id="p1">](program-structure.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Avançar<ept id="p1">](program-structure.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>