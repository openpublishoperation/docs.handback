<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d60bceea0ed956075233f5f045131ffb2eb37eef</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\threading\how-to-use-a-thread-pool.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1df602dde91906f5048d01c74939a51258cc79f7</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">46fad651eb3be3d792d34fec45e6ac93bb194df2</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Use a Thread Pool (Visual Basic) | Microsoft Docs</source>
          <target state="translated">Como: usar um Pool de threads (Visual Basic) | Documentos do Microsoft</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Use a Thread Pool (Visual Basic)</source>
          <target state="translated">Como: usar um Pool de threads (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Thread pooling<ept id="p1">*</ept> is a form of multithreading in which tasks are added to a queue and automatically started when threads are created.</source>
          <target state="translated"><bpt id="p1">*</bpt>Pool de segmentos<ept id="p1">*</ept> é uma forma de multithreading em quais tarefas são adicionadas a uma fila e iniciadas automaticamente quando os threads são criados.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Thread Pooling (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/threading/thread-pooling.md)</ept>.</source>
          <target state="translated">Para obter mais informações, consulte <bpt id="p1">[</bpt>Thread Pooling (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/threading/thread-pooling.md)</ept>.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The following example uses the .NET Framework thread pool to calculate the <ph id="ph1">`Fibonacci`</ph> result for ten numbers between 20 and 40.</source>
          <target state="translated">O exemplo a seguir usa o pool de threads do .NET Framework para calcular o <ph id="ph1">`Fibonacci`</ph> resultado de dez números entre 20 e 40.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Each <ph id="ph1">`Fibonacci`</ph> result is represented by the <ph id="ph2">`Fibonacci`</ph> class, which provides a method named <ph id="ph3">`ThreadPoolCallback`</ph> that performs the calculation.</source>
          <target state="translated">Cada <ph id="ph1">`Fibonacci`</ph> resultado é representado pelo <ph id="ph2">`Fibonacci`</ph> classe, que fornece um método chamado <ph id="ph3">`ThreadPoolCallback`</ph> que executa o cálculo.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>An object that represents each <ph id="ph1">`Fibonacci`</ph> value is created, and the <ph id="ph2">`ThreadPoolCallback`</ph> method is passed to &lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;, which assigns an available thread in the pool to execute the method.</source>
          <target state="translated">Um objeto que representa cada <ph id="ph1">`Fibonacci`</ph> valor é criado e o <ph id="ph2">`ThreadPoolCallback`</ph> método é passado para &lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;, que atribui um segmento disponível no pool para executar o método.&lt;/xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Because each <ph id="ph1">`Fibonacci`</ph> object is given a semi-random value to compute, and because each thread will be competing for processor time, you cannot know in advance how long it will take for all ten results to be calculated.</source>
          <target state="translated">Porque cada <ph id="ph1">`Fibonacci`</ph> objeto recebe um valor aleatório semi-estruturados para calcular e porque cada thread será estar competindo pelo tempo de processador, você não pode saber antecipadamente por quanto tempo levará para todos os dez resultados deve ser calculado.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>That is why each <ph id="ph1">`Fibonacci`</ph> object is passed an instance of the &lt;xref:System.Threading.ManualResetEvent&gt; class during construction.</source>
          <target state="translated">É por isso que cada <ph id="ph1">`Fibonacci`</ph> objeto é passado a uma instância do &lt;xref:System.Threading.ManualResetEvent&gt;classe durante a construção.&lt;/xref:System.Threading.ManualResetEvent&gt;</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Each object signals the provided event object when its calculation is complete, which allows the primary thread to block execution with &lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt; until all ten <ph id="ph1">`Fibonacci`</ph> objects have calculated a result.</source>
          <target state="translated">Cada objeto sinaliza o objeto de evento fornecidos quando o cálculo é concluído, que permite que o thread primário para impedir a execução com &lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;até os dez <ph id="ph1">`Fibonacci`</ph> objetos calculou um resultado.&lt;/xref:System.Threading.WaitHandle.WaitAll%2A&gt;</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Main`</ph> method then displays each <ph id="ph2">`Fibonacci`</ph> result.</source>
          <target state="translated">O <ph id="ph1">`Main`</ph> método exibe cada <ph id="ph2">`Fibonacci`</ph> resultado.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Exemplo</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Following is an example of the output.</source>
          <target state="translated">A seguir está um exemplo da saída.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">Consulte também</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Threading.Mutex&gt;</source>
          <target state="translated">&lt;xref:System.Threading.Mutex&gt;&lt;/xref:System.Threading.Mutex&gt;</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</source>
          <target state="translated">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;&lt;/xref:System.Threading.WaitHandle.WaitAll%2A&gt;</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Threading.ManualResetEvent&gt;</source>
          <target state="translated">&lt;xref:System.Threading.ManualResetEvent&gt;&lt;/xref:System.Threading.ManualResetEvent&gt;</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</source>
          <target state="translated">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;&lt;/xref:System.Threading.EventWaitHandle.Set%2A&gt;</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Threading.ThreadPool&gt;</source>
          <target state="translated">&lt;xref:System.Threading.ThreadPool&gt;&lt;/xref:System.Threading.ThreadPool&gt;</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</source>
          <target state="translated">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;&lt;/xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Threading.ManualResetEvent&gt;</source>
          <target state="translated">&lt;xref:System.Threading.ManualResetEvent&gt;&lt;/xref:System.Threading.ManualResetEvent&gt;</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Thread Pooling (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/threading/thread-pooling.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Thread Pooling (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/threading/thread-pooling.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Threading (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/threading/index.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Threading (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/threading/index.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Security<ept id="p1">](http://msdn.microsoft.com/library/9a9621d7-8883-4a4f-a874-65e8e09e20a6)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>Segurança<ept id="p1">](http://msdn.microsoft.com/library/9a9621d7-8883-4a4f-a874-65e8e09e20a6)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>