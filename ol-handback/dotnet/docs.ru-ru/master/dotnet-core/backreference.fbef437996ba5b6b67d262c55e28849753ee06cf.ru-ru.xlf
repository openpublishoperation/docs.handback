<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-47f9650" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d6fdf23898cacc7ce569f868b3a31b71eff5c716</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\base-types\backreference.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6628804140049da2a1904cb6c8399e1d5cba1252</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cac0dac93dabde40c1dcb18f3523884b61422107</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Backreference constructs in regular expressions</source>
          <target state="translated">Конструкции обратных ссылок в регулярных выражениях</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Backreference constructs in regular expressions</source>
          <target state="translated">Конструкции обратных ссылок в регулярных выражениях</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Backreference constructs in regular expressions</source>
          <target state="translated">Конструкции обратных ссылок в регулярных выражениях</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Backreferences provide a convenient way to identify a repeated character or substring within a string.</source>
          <target state="translated">Обратные ссылки предоставляют удобный способ идентификации повторяющегося символа или подстроки в строке.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For example, if the input string contains multiple occurrences of an arbitrary substring, you can match the first occurrence with a capturing group, and then use a backreference to match subsequent occurrences of the substring.</source>
          <target state="translated">Например, если входная строка содержит несколько экземпляров произвольной подстроки, можно найти первое вхождение с помощью группы записи, а затем использовать обратную ссылку для поиска последующих вхождений подстроки.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>A separate syntax is used to refer to named and numbered capturing groups in replacement strings.</source>
          <target state="translated">Для ссылки на именованные и нумерованные захватываемые группы в строках замены используется отдельный синтаксис.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Substitutions in regular expressions<ept id="p1">](substitutions.md)</ept>.</source>
          <target state="translated">Дополнительные сведения см. в статье <bpt id="p1">[</bpt>Подстановки в регулярных выражениях<ept id="p1">](substitutions.md)</ept>.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>.NET defines separate language elements to refer to numbered and named capturing groups.</source>
          <target state="translated">.NET определяет отдельные элементы языка для ссылки на нумерованные и именованные захватываемые группы.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For more information about capturing groups, see <bpt id="p1">[</bpt>Grouping constructs in regular expressions<ept id="p1">](grouping.md)</ept>.</source>
          <target state="translated">Дополнительные сведения о захватываемых группах см. в статье <bpt id="p1">[</bpt>Конструкции группировки в регулярных выражениях<ept id="p1">](grouping.md)</ept>.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Numbered Backreferences</source>
          <target state="translated">Нумерованные обратные ссылки</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A numbered backreference uses the following syntax:</source>
          <target state="translated">Нумерованная обратная ссылка использует следующий синтаксис:</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><ph id="ph1">*</ph><bpt id="p1">*</bpt><ph id="ph2">\*</ph><ept id="p1">*</ept><bpt id="p2">_</bpt>number<ept id="p2">_</ept></source>
          <target state="translated"><ph id="ph1">*</ph><bpt id="p1">*</bpt><ph id="ph2">\*</ph><ept id="p1">*</ept><bpt id="p2">_</bpt>число<ept id="p2">_</ept></target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>where <bpt id="p1">*</bpt>number<ept id="p1">*</ept> is the ordinal position of the capturing group in the regular expression.</source>
          <target state="translated">где <bpt id="p1">*</bpt>число<ept id="p1">*</ept> — это порядковое положение захватываемой группы в регулярном выражении.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`\4`</ph> matches the contents of the fourth capturing group.</source>
          <target state="translated">Например, <ph id="ph1">`\4`</ph> соответствует содержимому четвертой захватываемой группы.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">*</bpt>number<ept id="p1">*</ept> is not defined in the regular expression pattern, a parsing error occurs, and the regular expression engine throws an <bpt id="p2">[</bpt>ArgumentException<ept id="p2">](xref:System.ArgumentException)</ept>.</source>
          <target state="translated">Если <bpt id="p1">*</bpt>number<ept id="p1">*</ept> не определен в шаблоне регулярного выражения, возникает ошибка синтаксического анализа, и обработчик регулярных выражений создает исключение <bpt id="p2">[</bpt>ArgumentException<ept id="p2">](xref:System.ArgumentException)</ept>.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For example, the regular expression <ph id="ph1">`\b(\w+)\s\1`</ph> is valid, because <ph id="ph2">`(\w+)`</ph> is the first and only capturing group in the expression.</source>
          <target state="translated">Например, регулярное выражение <ph id="ph1">`\b(\w+)\s\1`</ph> является допустимым, поскольку <ph id="ph2">`(\w+)`</ph> — это первая и единственная захватываемая группа в выражении.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>On the other hand, <ph id="ph1">`\b(\w+)\s\2`</ph> is invalid and throws an argument exception, because there is no capturing group numbered <ph id="ph2">`\2`</ph>.</source>
          <target state="translated">С другой стороны, выражение <ph id="ph1">`\b(\w+)\s\2`</ph> недопустимо и создает исключение аргумента, так как захватываемая группа с номером <ph id="ph2">`\2`</ph> отсутствует.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Note the ambiguity between octal escape codes (such as <ph id="ph1">`\16`</ph>) and *<bpt id="p1">*</bpt><ph id="ph2">\*</ph><ept id="p1">*</ept><bpt id="p2">_</bpt>number<ept id="p2">_</ept> backreferences that use the same notation.</source>
          <target state="translated">Следует отметить неоднозначность такой записи, используемой как в восьмеричных escape-кодах (например, <ph id="ph1">`\16`</ph>), так и в обратных ссылках *<bpt id="p1">*</bpt><ph id="ph2">\*</ph><ept id="p1">*</ept><bpt id="p2">_</bpt>number<ept id="p2">_</ept>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This ambiguity is resolved as follows:</source>
          <target state="translated">Эта неопределенность разрешается следующим образом:</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The expressions <ph id="ph1">`\1`</ph> through <ph id="ph2">`\9`</ph> are always interpreted as backreferences, and not as octal codes.</source>
          <target state="translated">Выражения с <ph id="ph1">`\1`</ph> по <ph id="ph2">`\9`</ph> всегда интерпретируются как обратные ссылки, а не как восьмеричные коды.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If the first digit of a multidigit expression is 8 or 9 (such as <ph id="ph1">`\80`</ph> or <ph id="ph2">`\91`</ph>), the expression as interpreted as a literal.</source>
          <target state="translated">Если первая цифра многоразрядного выражения — 8 или 9 (например, <ph id="ph1">`\80`</ph> или <ph id="ph2">`\91`</ph>), выражение интерпретируется как литерал.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Expressions from <ph id="ph1">`\10`</ph> and greater are considered backreferences if there is a backreference corresponding to that number; otherwise, they are interpreted as octal codes.</source>
          <target state="translated">Выражения от <ph id="ph1">`\10`</ph> и более считаются обратными ссылками, если имеется обратная ссылка, соответствующая этому номеру. В противном случае они интерпретируются как восьмеричные коды.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If a regular expression contains a backreference to an undefined group number, a parsing error occurs, and the regular expression engine throws an <bpt id="p1">[</bpt>ArgumentException<ept id="p1">](xref:System.ArgumentException)</ept>.</source>
          <target state="translated">Если регулярное выражение содержит обратную ссылку на неопределенный номер группы, возникает ошибка синтаксического анализа, и обработчик регулярных выражений создает исключение <bpt id="p1">[</bpt>ArgumentException<ept id="p1">](xref:System.ArgumentException)</ept>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If the ambiguity is a problem, you can use the <bpt id="p1">**</bpt>\k&lt;<ept id="p1">**</ept><bpt id="p2">_</bpt>name<ept id="p2">_</ept><bpt id="p3">**</bpt><ph id="ph1">&gt;</ph><ept id="p3">**</ept> notation, which is unambiguous and cannot be confused with octal character codes.</source>
          <target state="translated">Если неоднозначность представляет проблему, можно использовать представление <bpt id="p1">**</bpt>\k&lt;<ept id="p1">**</ept><bpt id="p2">_</bpt>name<ept id="p2">_</ept><bpt id="p3">**</bpt><ph id="ph1">&gt;</ph><ept id="p3">**</ept>, которое является однозначным, и его невозможно спутать с восьмеричными кодами знаков.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Similarly, hexadecimal codes such as <ph id="ph1">`\xdd`</ph> are unambiguous and cannot be confused with backreferences.</source>
          <target state="translated">Аналогичным образом шестнадцатеричные коды, например <ph id="ph1">`\xdd`</ph>, однозначны, и их нельзя спутать с обратными ссылками.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The following example finds doubled word characters in a string.</source>
          <target state="translated">В приведенном ниже примере в строке выделяются двойные словообразующие символы.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>It defines a regular expression, <ph id="ph1">`(\w)\1,`</ph> which consists of the following elements.</source>
          <target state="translated">Здесь определяется регулярное выражение, <ph id="ph1">`(\w)\1,`</ph>, которое состоит из следующих элементов.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Element</source>
          <target state="translated">Элемент</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Описание</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Match a word character and assign it to the first capturing group.</source>
          <target state="translated">Совпадение со словообразующим символом и его назначение первой захватываемой группе.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Match the next character that is the same as the value of the first capturing group.</source>
          <target state="translated">Совпадение со следующим символом, значение которого совпадает с первой захватываемой группой.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Named Backreferences</source>
          <target state="translated">Именованные обратные ссылки</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>A named backreference is defined by using the following syntax:</source>
          <target state="translated">Именованная обратная ссылка задается с помощью следующего синтаксиса:</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>\k&lt;<ept id="p1">**</ept><bpt id="p2">_</bpt>name<ept id="p2">_</ept><bpt id="p3">**</bpt><ph id="ph1">&gt;</ph><ept id="p3">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>\k&lt;<ept id="p1">**</ept><bpt id="p2">_</bpt>name<ept id="p2">_</ept><bpt id="p3">**</bpt><ph id="ph1">&gt;</ph><ept id="p3">**</ept></target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>or:</source>
          <target state="translated">или</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>\k'<ept id="p1">**</ept><bpt id="p2">_</bpt>name<ept id="p2">_</ept><bpt id="p3">**</bpt>'<ept id="p3">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>\k'<ept id="p1">**</ept><bpt id="p2">_</bpt>name<ept id="p2">_</ept><bpt id="p3">**</bpt>'<ept id="p3">**</ept></target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>where <bpt id="p1">*</bpt>name<ept id="p1">*</ept> is the name of a capturing group defined in the regular expression pattern.</source>
          <target state="translated">где <bpt id="p1">*</bpt>name<ept id="p1">*</ept>— это имя захватываемой группы, определенное в шаблоне регулярного выражения.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">*</bpt>name<ept id="p1">*</ept> is not defined in the regular expression pattern, a parsing error occurs, and the regular expression engine throws an <bpt id="p2">[</bpt>ArgumentException<ept id="p2">](xref:System.ArgumentException)</ept>.</source>
          <target state="translated">Если значение <bpt id="p1">*</bpt>name<ept id="p1">*</ept> не определено в шаблоне регулярного выражения, возникает ошибка синтаксического анализа, и обработчик регулярных выражений создает исключение <bpt id="p2">[</bpt>ArgumentException<ept id="p2">](xref:System.ArgumentException)</ept>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The following example finds doubled word characters in a string.</source>
          <target state="translated">В приведенном ниже примере в строке выделяются двойные словообразующие символы.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>It defines a regular expression, <ph id="ph1">`(?&lt;char&gt;\w)\k&lt;char&gt;`</ph>, which consists of the following elements.</source>
          <target state="translated">Здесь определяется регулярное выражение, <ph id="ph1">`(?&lt;char&gt;\w)\k&lt;char&gt;`</ph>, которое состоит из следующих элементов.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Element</source>
          <target state="translated">Элемент</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Описание</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Match a word character and assign it to a capturing group named char.</source>
          <target state="translated">Совпадение со словообразующим символом и его назначение захватываемой группе с именем char.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Match the next character that is the same as the value of the char capturing group.</source>
          <target state="translated">Совпадение со следующим символом, значение которого совпадает с первой захватываемой группой char.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Note that <bpt id="p1">*</bpt>name<ept id="p1">*</ept> can also be the string representation of a number.</source>
          <target state="translated">Обратите внимание, что <bpt id="p1">*</bpt>name<ept id="p1">*</ept> также может быть строковым представлением числа.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For example, the following example uses the regular expression <ph id="ph1">`(?&lt;2&gt;\w)\k&lt;2&gt;`</ph> to find doubled word characters in a string.</source>
          <target state="translated">Например, далее используется регулярное выражение <ph id="ph1">`(?&lt;2&gt;\w)\k&lt;2&gt;`</ph> для поиска в строке двойных словообразующих символов.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>What Backreferences Match</source>
          <target state="translated">С чем сопоставляются обратные ссылки</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>A backreference refers to the most recent definition of a group (the definition most immediately to the left, when matching left to right).</source>
          <target state="translated">Обратная ссылка относится к самому недавнему определению группы (самому ближнему слева определению при обработке слева направо).</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>When a group makes multiple captures, a backreference refers to the most recent capture.</source>
          <target state="translated">Если из группы создается несколько шаблонов для поиска, обратная ссылка относится к самому последнему шаблону.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The following example includes a regular expression pattern, <ph id="ph1">`(?&lt;1&gt;a)(?&lt;1&gt;\1b)*`</ph>, which redefines the \1 named group.</source>
          <target state="translated">В примере ниже показан шаблон регулярного выражения <ph id="ph1">`(?&lt;1&gt;a)(?&lt;1&gt;\1b)*`</ph>, который переопределяет именованную группу \1.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The following table describes each pattern in the regular expression.</source>
          <target state="translated">В следующей таблице описывается каждый шаблон регулярного выражения.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">Шаблон</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Описание</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Match the character "a" and assign the result to the capturing group named 1.</source>
          <target state="translated">Совпадение с символом "a" и назначение результата захватываемой группе с именем 1.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Match 0 or 1 occurrence of the group named 1 along with a "b", and assign the result to the capturing group named 1.</source>
          <target state="translated">Совпадение с нулевым или единичным вхождением группы с именем 1 вместе с "b" и назначение результата захватываемой группе с именем 1.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>In comparing the regular expression with the input string ("aababb"), the regular expression engine performs the following operations:</source>
          <target state="translated">При сравнении регулярного выражения с входной строкой ("aababb") обработчик регулярных выражений выполняет указанные далее операции.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>It starts at the beginning of the string, and successfully matches "a" with the expression <ph id="ph1">`(?&lt;1&gt;a)`</ph>.</source>
          <target state="translated">Начинается с первого символа и успешно сопоставляет "a" с выражением <ph id="ph1">`(?&lt;1&gt;a)`</ph>.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The value of the 1 group is now "a".</source>
          <target state="translated">Теперь значение группы 1 будет равно "a".</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>It advances to the second character, and successfully matches the string "ab" with the expression <ph id="ph1">`\1b`</ph>, or "ab".</source>
          <target state="translated">Перемещается ко второму символу и успешно сопоставляет строку "ab" с выражением <ph id="ph1">`\1b`</ph> или "ab".</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>It then assigns the result, "ab" to <ph id="ph1">`\1`</ph>.</source>
          <target state="translated">Затем результат "ab" присваивается <ph id="ph1">`\1`</ph>.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>It advances to the fourth character.</source>
          <target state="translated">Переходит к четвертому символу.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The expression <ph id="ph1">`(?&lt;1&gt;\1b)`</ph> is to be matched zero or more times, so it successfully matches the string "abb" with the expression <ph id="ph2">`\1b`</ph>.</source>
          <target state="translated">Выражение <ph id="ph1">`(?&lt;1&gt;\1b)`</ph> должно выдать ноль или больше совпадений, поэтому он успешно сопоставляет строку "abb" с выражением <ph id="ph2">`\1b`</ph>.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>It assigns the result, "abb", back to <ph id="ph1">`\1`</ph>.</source>
          <target state="translated">Затем результат "abb" присваивается <ph id="ph1">`\1`</ph>.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>In this example, <ph id="ph1">\*</ph> is a looping quantifier -- it is evaluated repeatedly until the regular expression engine cannot match the pattern it defines.</source>
          <target state="translated">В этом примере <ph id="ph1">\*</ph> является циклическим квантификатором — он вычисляется многократно до тех пор, пока обработчик регулярных выражений не сможет обнаружить соответствие заданному им шаблону.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Looping quantifiers do not clear group definitions.</source>
          <target state="translated">Квантификаторы циклов не удаляют определения групп.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>If a group has not captured any substrings, a backreference to that group is undefined and never matches.</source>
          <target state="translated">Если для группы не было найдено ни одной подстроки, то обратная ссылка на эту группу не определена и не работает.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>This is illustrated by the regular expression pattern <ph id="ph1">`\b(\p{Lu}{2})(\d{2})?(\p{Lu}{2})\b,`</ph> which is defined as follows:</source>
          <target state="translated">Это продемонстрировано в шаблоне регулярного выражения <ph id="ph1">`\b(\p{Lu}{2})(\d{2})?(\p{Lu}{2})\b,`</ph>, который определяется следующим образом:</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">Шаблон</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Описание</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Begin the match on a word boundary.</source>
          <target state="translated">Сопоставление начинается на границе слова.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Match two uppercase letters.</source>
          <target state="translated">Совпадение с двумя прописными буквами.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>This is the first capturing group.</source>
          <target state="translated">Это первая группа записи.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Match zero or one occurrence of two decimal digits.</source>
          <target state="translated">Совпадение с нулевым или единичным вхождением двух десятичных цифр.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>This is the second capturing group.</source>
          <target state="translated">Это вторая группа записи.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Match two uppercase letters.</source>
          <target state="translated">Совпадение с двумя прописными буквами.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>This is the third capturing group.</source>
          <target state="translated">Это третья группа записи.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>End the match on a word boundary.</source>
          <target state="translated">Сопоставление заканчивается на границе слова.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>An input string can match this regular expression even if the two decimal digits that are defined by the second capturing group are not present.</source>
          <target state="translated">Входная строка может соответствовать этому регулярному выражению, даже если отсутствуют две десятичные цифры, которые заданы второй захватываемой группой.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The following example shows that even though the match is successful, an empty capturing group is found between two successful capturing groups.</source>
          <target state="translated">В следующем примере показано, что даже несмотря на то, что сопоставление является успешным, между двумя группами успешной записи найдена пустая группа.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">См. также</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Regular expression language - quick reference<ept id="p1">](quick-ref.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Элементы языка регулярных выражений — краткий справочник<ept id="p1">](quick-ref.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>