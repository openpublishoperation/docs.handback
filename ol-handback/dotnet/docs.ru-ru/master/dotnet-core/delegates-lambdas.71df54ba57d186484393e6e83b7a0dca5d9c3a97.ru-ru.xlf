<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-47f9650" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1dbe9c72999c14e45910310eb0bbc91ebe9f1e4a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\delegates-lambdas.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a6ae0cd6d21ca32e1ebfd7eef666526f28412b72</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">49dc69e4e91139bbca55aa335f4dc86d6899dfa7</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Delegates and lambdas</source>
          <target state="translated">Делегаты и лямбда-выражения</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Delegates and lambdas</source>
          <target state="translated">Делегаты и лямбда-выражения</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Delegates and lambdas</source>
          <target state="translated">Делегаты и лямбда-выражения</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Delegates define a type, which specify a particular method signature.</source>
          <target state="translated">Делегаты определяют тип, указывающий конкретную сигнатуру метода.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>A method (static or instance) that satisfies this signature can be assigned to a variable of that type, then called directly (with the appropriate arguments) or passed as an argument itself to another method and then called.</source>
          <target state="translated">Метод (статический или экземпляр), удовлетворяющий сигнатуре, можно присвоить переменной этого типа и затем вызвать напрямую (с соответствующими аргументами) или передать в качестве аргумента другому методу и затем вызвать.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The following example demonstrates delegate use.</source>
          <target state="translated">В следующем примере показано использование делегата.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>On line 4 we create a delegate type of a certain signature, in this case a method that takes a string parameter and then returns a string parameter.</source>
          <target state="translated">В строке 4 мы создаем тип делегата для определенной сигнатуры. В данном случае это метод, принимающий и возвращающий строковый параметр.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>On line 6, we define the implementation of the delegate by providing a method that has the exact same signature.</source>
          <target state="translated">В строке 6 мы определяем реализацию делегата, указав метод с точно такой же сигнатурой.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>On line 13, the method is assigned to a type that conforms to the <ph id="ph1">`Reverse`</ph> delegate.</source>
          <target state="translated">В строке 13 метод назначается типу, который соответствует делегату <ph id="ph1">`Reverse`</ph>.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Finally, on line 15 we invoke the delegate passing a string to be reversed.</source>
          <target state="translated">Наконец, в строке 15 мы вызываем делегат, передав строку для обращения.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In order to streamline the development process, .NET includes a set of delegate types that programmers can reuse and not have to create new types.</source>
          <target state="translated">Чтобы упростить процесс разработки, платформа .NET содержит набор типов делегата, которые программисты могут повторно использовать, не создавая новые.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>These are <ph id="ph1">`Func&lt;&gt;`</ph>, <ph id="ph2">`Action&lt;&gt;`</ph> and <ph id="ph3">`Predicate&lt;&gt;`</ph>, and they can be used in various places throughout the .NET APIs without the need to define new delegate types.</source>
          <target state="translated">Это <ph id="ph1">`Func&lt;&gt;`</ph>, <ph id="ph2">`Action&lt;&gt;`</ph> и <ph id="ph3">`Predicate&lt;&gt;`</ph>, которые можно использовать в различных участках API-интерфейсов .NET без необходимости определения новых типов делегата.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Of course, there are some differences between the three as you will see in their signatures which mostly have to do with the way they were meant to be used:</source>
          <target state="translated">Безусловно между ними существуют некоторые различия, которые легко определить по сигнатурам. Это связано с их назначением:</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Action&lt;&gt;`</ph> is used when there is a need to perform an action using the arguments of the delegate.</source>
          <target state="translated"><ph id="ph1">`Action&lt;&gt;`</ph> применяется, когда требуется выполнить действие с использованием аргументов делегата.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Func&lt;&gt;`</ph> is used usually when you have a transformation on hand, that is, you need to transform the arguments of the delegate into a different result.</source>
          <target state="translated"><ph id="ph1">`Func&lt;&gt;`</ph> обычно используется при наличии преобразования, то есть когда требуется преобразовать аргументы делегата в другой результат.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Projections are a prime example of this.</source>
          <target state="translated">Хорошим примером этого являются проекции.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Predicate&lt;&gt;`</ph> is used when you need to determine if the argument satisfies the condition of the delegate.</source>
          <target state="translated"><ph id="ph1">`Predicate&lt;&gt;`</ph> используется, когда требуется определить, удовлетворяет ли аргумент условию делегата.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>It can also be written as a <ph id="ph1">`Func&lt;T, bool&gt;`</ph>.</source>
          <target state="translated">Его также можно записать в виде <ph id="ph1">`Func&lt;T, bool&gt;`</ph>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>We can now take our example above and rewrite it using the <ph id="ph1">`Func&lt;&gt;`</ph> delegate instead of a custom type.</source>
          <target state="translated">Теперь можно обратиться к приведенному выше примеру и переписать его, используя делегат <ph id="ph1">`Func&lt;&gt;`</ph> вместо пользовательского типа.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The program will continue running exactly the same.</source>
          <target state="translated">При этом работа программы не изменится.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For this simple example, having a method defined outside of the Main() method seems a bit superfluous.</source>
          <target state="translated">В этом простом примере определение метода за пределами метода Main() может показаться излишним.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>It is because of this that .NET Framework 2.0 introduced the concept of <bpt id="p1">**</bpt>anonymous delegates<ept id="p1">**</ept>.</source>
          <target state="translated">Это вызвано тем, что в .NET Framework 2.0 введена концепция <bpt id="p1">**</bpt>анонимных делегатов<ept id="p1">**</ept>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>With their support you are able to create “inline” delegates without having to specify any additional type or method.</source>
          <target state="translated">С их помощью можно создавать "встроенные" делегаты без указания дополнительного типа или метода.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>You simply inline the definition of the delegate where you need it.</source>
          <target state="translated">Вы просто встраиваете определение делегата там, где это необходимо.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For an example, we are going to switch it up and use our anonymous delegate to filter out a list of only even numbers and then print them to the console.</source>
          <target state="translated">Например, мы собираемся использовать анонимный делегат, чтобы отфильтровать только четные числа из списка и вывести их на консоль.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Notice the highlighted lines.</source>
          <target state="translated">Обратите внимание на выделенные строки.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>As you can see, the body of the delegate is just a set of expressions, as any other delegate.</source>
          <target state="translated">Как видно, тело делегата представляет собой набор выражений, как в любом другом делегате.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>But instead of it being a separate definition, we’ve introduced it <bpt id="p1">_</bpt>ad hoc<ept id="p1">_</ept> in our call to the <ph id="ph1">`FindAll()`</ph> method of the <ph id="ph2">`List&lt;T&gt;`</ph> type.</source>
          <target state="translated">Но вместо использования отдельного определения мы описали его <bpt id="p1">_</bpt>напрямую<ept id="p1">_</ept> в нашем вызове метода <ph id="ph1">`FindAll()`</ph> с типом <ph id="ph2">`List&lt;T&gt;`</ph>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>However, even with this approach, there is still much code that we can throw away.</source>
          <target state="translated">Однако даже при таком подходе остается довольно много кода, от которого можно избавиться.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This is where <bpt id="p1">**</bpt>lambda expressions<ept id="p1">**</ept> come into play.</source>
          <target state="translated">Как раз для этого и могут пригодиться <bpt id="p1">**</bpt>лямбда-выражения<ept id="p1">**</ept>.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Lambda expressions, or just “lambdas” for short, were introduced first in C# 3.0, as one of the core building blocks of Language Integrated Query (LINQ).</source>
          <target state="translated">Впервые лямбда-выражения были введены в C# 3.0 в качестве одного из стандартных блоков LINQ.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>They are just a more convenient syntax for using delegates.</source>
          <target state="translated">Они предоставляют более удобный синтаксис для использования делегатов.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>They declare a signature and a method body, but don’t have an formal identity of their own, unless they are assigned to a delegate.</source>
          <target state="translated">Они объявляют сигнатуру и тела метода, но не имеют собственного формального удостоверения, пока не будут назначены делегату.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Unlike delegates, they can be directly assigned as the left-hand side of event registration or in various Linq clauses and methods.</source>
          <target state="translated">В отличие от делегатов их можно напрямую назначать в левой части при регистрации событий, а также в различных предложениях и методах LINQ.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Since a lambda expression is just another way of specifying a delegate, we should be able to rewrite the above sample to use a lambda expression instead of an anonymous delegate.</source>
          <target state="translated">Поскольку лямбда-выражение представляет собой просто еще один способ указания делегата, можно переписать приведенный выше пример, чтобы использовать лямбда-выражение вместо анонимного делегата.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If you take a look at the highlighted lines, you can see how a lambda expression looks like.</source>
          <target state="translated">Если взглянуть на выделенные строки, можно увидеть, как выглядит лямбда-выражение.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Again, it is just a <bpt id="p1">**</bpt>very<ept id="p1">**</ept> convenient syntax for using delegates, so what happens under the covers is similar to what happens with the anonymous delegate.</source>
          <target state="translated">Повторим, что это просто <bpt id="p1">**</bpt>очень<ept id="p1">**</ept> удобный синтаксис для использования делегатов, сам принцип действия аналогичен анонимному делегату.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Again, lambdas are just delegates, which means that they can be used as an event handler without any problems, as the following code snippet illustrates.</source>
          <target state="translated">Лямбда-выражения — это обычные делегаты, поэтому их без проблем можно использовать в качестве обработчика событий, как показано в следующем фрагменте кода.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Further reading and resources</source>
          <target state="translated">Дополнительные сведения и ресурсы</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Delegates<ept id="p1">](https://msdn.microsoft.com/library/ms173171.aspx)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Делегаты<ept id="p1">](https://msdn.microsoft.com/library/ms173171.aspx)</ept></target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Anonymous Functions<ept id="p1">](https://msdn.microsoft.com/library/bb882516.aspx)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Анонимные функции<ept id="p1">](https://msdn.microsoft.com/library/bb882516.aspx)</ept></target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Lambda expressions<ept id="p1">](https://msdn.microsoft.com/library/bb397687.aspx)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Лямбда-выражения<ept id="p1">](https://msdn.microsoft.com/library/bb397687.aspx)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>