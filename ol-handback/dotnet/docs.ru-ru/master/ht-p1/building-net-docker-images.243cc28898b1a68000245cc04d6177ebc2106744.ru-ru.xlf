<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-eac019f" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0702c53ddaec7ae391dfa584ae13550c8fa64e6d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\docker\building-net-docker-images.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p1</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0e31e5cde3ab306017c3bbd3f9bc10f49c256c95</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f15928265c7920195c1ecbd1fb2edc6a0130fcb5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Building .NET Core Docker Images</source>
          <target state="translated">Создание образов Docker для .NET Core</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Understanding Docker images and .NET Core</source>
          <target state="translated">Общие сведения об образах Docker и .NET Core</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core, Docker</source>
          <target state="translated">.NET, .NET Core, Docker</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Building Docker Images for .NET Core Applications</source>
          <target state="translated">Создание образов Docker для приложений .NET Core</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In order to get an understanding of how to use .NET Core and Docker together, we must first get to know the different Docker images that are offered and when is the right use case for them.</source>
          <target state="translated">Чтобы понять, как можно использовать .NET Core и Docker вместе, сначала нужно ознакомиться с различными образами Docker и подходящими ситуациями для их применения.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Here we will walk through the variations offered, build an ASP.NET Core Web API, use the Yeoman Docker tools to create a debuggable container as well as peek at how Visual Studio Code can assist in the process.</source>
          <target state="translated">В этой статье мы по порядку разберем предлагаемые варианты, создадим веб-интерфейс API ASP.NET Core, используем средства Yeoman Docker для создания отлаживаемого контейнера, а также посмотрим, как Visual Studio Code может помочь нам в решении этих задач.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Docker Image Optimizations</source>
          <target state="translated">Оптимизация образов Docker</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>When building Docker images for developers, we focused on three main scenarios:</source>
          <target state="translated">При создании образов Docker для разработчиков мы сосредоточились на трех основных сценариях:</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Images used to develop .NET Core apps</source>
          <target state="translated">образы, используемые для разработки приложений .NET Core;</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Images used to build .NET Core apps</source>
          <target state="translated">образы, используемые для сборки приложений .NET Core;</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Images used to run .NET Core apps</source>
          <target state="translated">образы, используемые для выполнения приложений .NET Core.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Why three images?</source>
          <target state="translated">Зачем нужны три образа</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>When developing, building and running containerized applications, we have different priorities.</source>
          <target state="translated">При разработке, сборке и выполнении приложений в контейнерах приоритеты будут разными.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Development:<ept id="p1">**</ept>  How fast can you iterate changes, and the ability to debug the changes.</source>
          <target state="translated"><bpt id="p1">**</bpt>Разработка<ept id="p1">**</ept>. Как быстро может осуществляться итерация и отладка изменений.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The size of the image isn't as important, rather can you make changes to your code and see them quickly.</source>
          <target state="translated">Размер образа не так важен, как возможность быстро вносить изменения в код и просматривать их.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Some of our tools, like <bpt id="p1">[</bpt>yo docker<ept id="p1">](https://aka.ms/yodocker)</ept> for use in VS Code use this image during development time.</source>
          <target state="translated">Некоторые из наших средств, например <bpt id="p1">[</bpt>yo docker<ept id="p1">](https://aka.ms/yodocker)</ept> для использования в VS Code, применяют этот образ во время разработки.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Build:<ept id="p1">**</ept> What's needed to compile your app.</source>
          <target state="translated"><bpt id="p1">**</bpt>Сборка<ept id="p1">**</ept>. Что нужно для компиляции приложения.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This includes the compiler and any other dependencies to optimize the binaries.</source>
          <target state="translated">Сюда относятся компилятор и другие зависимости для оптимизации двоичных файлов.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This image isn't the image you deploy, rather it's an image you use to build the content you place into a production image.</source>
          <target state="translated">Это не тот образ, который вы развертываете, а образ, который вы используете для сборки содержимого, помещаемого в рабочий образ.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This image would be used in your continuous integration, or build environment.</source>
          <target state="translated">Этот образ будет применяться при непрерывной интеграции или в среде сборки.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For instance, rather than installing all the dependencies directly on a build agent, the build agent would instance a build image to compile the application with all the dependencies required to build the app contained within the image.</source>
          <target state="translated">Например, вместо установки всех зависимостей непосредственно в агенте сборки этот агент создаст экземпляр образа сборки, чтобы скомпилировать приложение со всеми зависимостями, которые необходимы для сборки приложения, содержащегося в образе.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Your build agent only needs to know how to run this Docker image.</source>
          <target state="translated">Агенту сборки необходимо знать только, как запускать этот образ Docker.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Production:<ept id="p1">**</ept> How fast you can deploy and start your image.</source>
          <target state="translated"><bpt id="p1">**</bpt>Рабочая среда<ept id="p1">**</ept>. Как быстро можно развернуть и запустить образ.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This image is small so it can quickly travel across the network from your Docker Registry to your Docker hosts.</source>
          <target state="translated">Этот образ имеет небольшой размер, поэтому может быстро передаваться по сети из реестра Docker на узлы Docker.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The contents are ready to run enabling the fastest time from Docker run to processing results.</source>
          <target state="translated">Содержимое готово к запуску, поэтому период времени от запуска Docker до обработки результатов минимален.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In the immutable Docker model, there's no need for dynamic compilation of code.</source>
          <target state="translated">В неизменяемой модели Docker нет потребности в динамической компиляции кода.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The content you place in this image would be limited to the binaries and content needed to run the application.</source>
          <target state="translated">Содержимое, помещаемое в этот образ, ограничено двоичными файлами и содержимым, которые необходимы для работы приложения.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For example, the published output using <ph id="ph1">`dotnet publish`</ph> which contains the compiled binaries, images, .js and .css files.</source>
          <target state="translated">Например, это могут быть выходные данные, опубликованные с помощью команды <ph id="ph1">`dotnet publish`</ph> и содержащие скомпилированные двоичные файлы, изображения, файлы JS и CSS.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Over time, you'll see images that contain pre-jitted packages.</source>
          <target state="translated">Со временем появятся образы, которые содержат пакеты, предварительно скомпилированные JIT-компилятором.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Though there are multiple versions of the .NET Core image, they all share one or more layers.</source>
          <target state="translated">Хотя существует несколько версий образа .NET Core, они все имеют один или несколько общих уровней.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The amount of disk space needed to store or the delta to pull from your registry is much smaller than the whole because all of the images share the same base layer and potentially others.</source>
          <target state="translated">Объем дискового пространства для хранения или размер разностных данных, которые нужно извлечь из реестра, гораздо меньше общего размера, так как все образы имеют общий базовый и, возможно, другие общие уровни.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Docker image variations</source>
          <target state="translated">Варианты образов Docker</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>To achieve the goals above, we provide image variants under <bpt id="p1">[</bpt>microsoft/dotnet<ept id="p1">](https://hub.docker.com/r/microsoft/dotnet/)</ept>.</source>
          <target state="translated">Для достижения указанных выше целей мы предоставляет варианты образов в <bpt id="p1">[</bpt>microsoft/dotnet<ept id="p1">](https://hub.docker.com/r/microsoft/dotnet/)</ept>.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`microsoft/dotnet:&lt;version&gt;-sdk`</ph> : that is <bpt id="p1">**</bpt>microsoft/dotnet:1.0.0-preview2-sdk<ept id="p1">**</ept>, this image contains the .NET Core SDK which includes the .NET Core and Command Line Tools (CLI).</source>
          <target state="translated"><ph id="ph1">`microsoft/dotnet:&lt;version&gt;-sdk`</ph>, то есть <bpt id="p1">**</bpt>microsoft/dotnet:1.0.0-preview2-sdk<ept id="p1">**</ept> — этот образ содержит пакет SDK для .NET Core, который включает платформу .NET Core и программы командной строки (CLI).</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This image maps to the <bpt id="p1">**</bpt>development scenario<ept id="p1">**</ept>.</source>
          <target state="translated">Этот образ соответствует <bpt id="p1">**</bpt>сценарию развертывания<ept id="p1">**</ept>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>You would use this image for local development, debugging and unit testing.</source>
          <target state="translated">Он используется для локальной разработки, отладки и модульного тестирования,</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For example, all the development you do, before you check in your code.</source>
          <target state="translated">например для всех задач разработки, выполняемых до возврата кода.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>This image can also be used for your <bpt id="p1">**</bpt>build<ept id="p1">**</ept> scenarios.</source>
          <target state="translated">Этот образ также можно использовать для сценариев <bpt id="p1">**</bpt>сборки<ept id="p1">**</ept>.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`microsoft/dotnet:&lt;version&gt;-core`</ph> : that is <bpt id="p1">**</bpt>microsoft/dotnet:1.0.0-core<ept id="p1">**</ept>, image which runs <bpt id="p2">[</bpt>portable .NET Core applications<ept id="p2">](../deploying/index.md)</ept> and it is optimized for running your application in <bpt id="p3">**</bpt>production<ept id="p3">**</ept>.</source>
          <target state="translated"><ph id="ph1">`microsoft/dotnet:&lt;version&gt;-core`</ph>, то есть <bpt id="p1">**</bpt>microsoft/dotnet:1.0.0-core<ept id="p1">**</ept> — образ, который выполняет <bpt id="p2">[</bpt>переносимые приложения .NET Core<ept id="p2">](../deploying/index.md)</ept> и оптимизирован для выполнения приложений в <bpt id="p3">**</bpt>рабочей среде<ept id="p3">**</ept>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>It does not contain the SDK, and is meant to take the optimized output of <ph id="ph1">`dotnet publish`</ph>.</source>
          <target state="translated">Он не содержит пакета SDK и предназначен для получения оптимизированных выходных данных команды <ph id="ph1">`dotnet publish`</ph>.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The portable runtime is well suited for Docker container scenarios as running multiple containers benefit from shared image layers.</source>
          <target state="translated">Переносимая среда выполнения хорошо подходит для сценариев с контейнерами Docker, так как использование нескольких контейнеров позволяет реализовать преимущество общих уровней образов.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Alternative images</source>
          <target state="translated">Альтернативные образы</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>In addition to the optimized scenarios of development, build and production, we provide additional images:</source>
          <target state="translated">Помимо образов, оптимизированных для разработки, сборки и рабочей среды, мы предоставляем дополнительные образы.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`microsoft/dotnet:&lt;version&gt;-onbuild`</ph> : that is <bpt id="p1">**</bpt>microsoft/dotnet:1.0.0-preview2-onbuild<ept id="p1">**</ept>, contains <bpt id="p2">[</bpt>ONBUILD<ept id="p2">](https://docs.docker.com/engine/reference/builder/#/onbuild)</ept> triggers.</source>
          <target state="translated"><ph id="ph1">`microsoft/dotnet:&lt;version&gt;-onbuild`</ph>, то есть <bpt id="p1">**</bpt>microsoft/dotnet:1.0.0-preview2-onbuild<ept id="p1">**</ept>, содержит триггеры <bpt id="p2">[</bpt>ONBUILD<ept id="p2">](https://docs.docker.com/engine/reference/builder/#/onbuild)</ept>.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The build will <bpt id="p1">[</bpt>COPY<ept id="p1">](https://docs.docker.com/engine/reference/builder/#/copy)</ept> your application, run <ph id="ph1">`dotnet restore`</ph> and create an <bpt id="p2">[</bpt>ENTRYPOINT<ept id="p2">](https://docs.docker.com/engine/reference/builder/#/entrypoint)</ept> <ph id="ph2">`dotnet run`</ph> instruction to run the application when the Docker image is run.</source>
          <target state="translated">Сборка копирует (<bpt id="p1">[</bpt>COPY<ept id="p1">](https://docs.docker.com/engine/reference/builder/#/copy)</ept>) приложение, выполняет команду <ph id="ph1">`dotnet restore`</ph> и создает инструкцию <bpt id="p2">[</bpt>ENTRYPOINT<ept id="p2">](https://docs.docker.com/engine/reference/builder/#/entrypoint)</ept> <ph id="ph2">`dotnet run`</ph> для запуска приложения при запуске образа Docker.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>While not an optimized image for production, some may find it useful to simply copy their source code into an image and run it.</source>
          <target state="translated">Хотя этот образ не оптимизирован для рабочей среды, кому-то он может быть полезен для упрощения копирования исходного кода в образ и его выполнения.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`microsoft/dotnet:&lt;version&gt;-core-deps`</ph> : that is <bpt id="p1">**</bpt>microsoft/dotnet:1.0.0-core-deps<ept id="p1">**</ept>, if you wish to run self-contained applications use this image.</source>
          <target state="translated"><ph id="ph1">`microsoft/dotnet:&lt;version&gt;-core-deps`</ph>, то есть <bpt id="p1">**</bpt>microsoft/dotnet:1.0.0-core-deps<ept id="p1">**</ept> — используйте этот образ для выполнения автономных приложений.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>It contains the operating system with all of the native dependencies needed by .NET Core.</source>
          <target state="translated">Он содержит операционную систему со всеми собственными зависимостями, требуемыми платформе .NET Core.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This image can also be used as a base image for your own custom CoreFX or CoreCLR builds.</source>
          <target state="translated">Кроме того, этот образ можно использовать в качестве базового для собственных сборок CoreFX или CoreCLR.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>While the <bpt id="p1">**</bpt>onbuild<ept id="p1">**</ept> variant is optimized to simply place your code in an image and run it, this image is optimized to have only the operating system dependencies required to run .NET Core apps that have the .NET Runtime packaged with the application.</source>
          <target state="translated">В то время как вариант <bpt id="p1">**</bpt>onbuild<ept id="p1">**</ept> оптимизирован просто для добавления кода в образ и его выполнения, этот образ оптимизирован так, что вы получаете только те зависимости операционной системы, которые необходимы для выполнения приложений .NET Core, упакованными вместе со средой выполнения .NET.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>This image isn't generally optimized for running multiple .NET Core containers on the same host, as each image carries the .NET Core runtime within the application, and you will not benefit from image layering.</source>
          <target state="translated">Этот образ, как правило, не оптимизирован для запуска нескольких контейнеров .NET Core на одном узле, так как каждый образ содержит среду выполнения .NET Core в приложении и вы не получите преимущество от наличия общих уровней образов.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Latest versions of each variant:</source>
          <target state="translated">Последние версии каждого варианта:</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`microsoft/dotnet`</ph> or <ph id="ph2">`microsoft/dotnet:latest`</ph> (includes SDK)</source>
          <target state="translated"><ph id="ph1">`microsoft/dotnet`</ph> или <ph id="ph2">`microsoft/dotnet:latest`</ph> (включает пакет SDK)</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Here is a list of the images after a <ph id="ph1">`docker pull &lt;imagename&gt;`</ph> on a development machine to show the various sizes.</source>
          <target state="translated">Ниже приведен список образов после выполнения команды <ph id="ph1">`docker pull &lt;imagename&gt;`</ph> на компьютере разработки и их размеры.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Notice, the development/build variant, <ph id="ph1">`microsoft/dotnet:1.0.0-preview2-sdk`</ph> is larger as it contains the SDK to develop and build your application.</source>
          <target state="translated">Обратите внимание на то, что вариант для разработки и сборки (<ph id="ph1">`microsoft/dotnet:1.0.0-preview2-sdk`</ph>) больше, так как он содержит пакет SDK для разработки и сборки приложения.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The production variant, <ph id="ph1">`microsoft/dotnet:core`</ph> is smaller, as it only contains the .NET Core runtime.</source>
          <target state="translated">Вариант для рабочей среды (<ph id="ph1">`microsoft/dotnet:core`</ph>) меньше, так как он содержит только среду выполнения .NET Core.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The minimal image capable of being used on Linux, <ph id="ph1">`core-deps`</ph>, is quite smaller, however your application will need to copy a private copy of the .NET Runtime with it.</source>
          <target state="translated">Минимальный образ, который можно использовать в Linux (<ph id="ph1">`core-deps`</ph>), значительно меньше, однако приложение должно иметь собственную копию среды выполнения .NET.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Since containers are already private isolation barriers, you will lose that optimization when running multiple dotnet based containers.</source>
          <target state="translated">Так как контейнеры уже обеспечивают изоляцию, это преимущество теряется при выполнении нескольких контейнеров на основе .NET.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
          <target state="translated">Предварительные требования</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>To build and run, you'll need a few things installed:</source>
          <target state="translated">Для сборки и запуска необходимо установить несколько компонентов.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>.NET Core<ept id="p1">](http://dot.net)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>.NET Core<ept id="p1">](http://dot.net)</ept></target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Docker<ept id="p1">](https://www.docker.com/products/docker)</ept> to run your Docker containers locally</source>
          <target state="translated"><bpt id="p1">[</bpt>Docker<ept id="p1">](https://www.docker.com/products/docker)</ept> для локального выполнения контейнеров Docker</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Yeoman generator for ASP.NET<ept id="p1">](https://github.com/omnisharp/generator-aspnet)</ept> for creating the Web API application</source>
          <target state="translated"><bpt id="p1">[</bpt>Генератор Yeoman для ASP.NET<ept id="p1">](https://github.com/omnisharp/generator-aspnet)</ept> для создания приложения веб-интерфейса API</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Yeoman generator for Docker<ept id="p1">](http://aka.ms/yodocker)</ept> from Microsoft</source>
          <target state="translated"><bpt id="p1">[</bpt>Генератор Yeoman для Docker<ept id="p1">](http://aka.ms/yodocker)</ept> от корпорации Майкрософт</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Install the Yeoman generators for ASP.NET Core and Docker using npm</source>
          <target state="translated">Установите генераторы Yeoman для ASP.NET Core и Docker с помощью npm.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>This sample will be using <bpt id="p1">[</bpt>Visual Studio Code<ept id="p1">](http://code.visualstudio.com)</ept> for the editor.</source>
          <target state="translated">В этом примере в качестве редактора будет использоваться <bpt id="p1">[</bpt>Visual Studio Code<ept id="p1">](http://code.visualstudio.com)</ept>.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Creating the Web API application</source>
          <target state="translated">Создание приложения веб-интерфейса API</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>For a reference point, before we containerize the application, first run the application locally.</source>
          <target state="translated">Чтобы получить ориентир, перед упаковкой приложения в контейнер запустите его локально.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Create a directory for your application.</source>
          <target state="translated">Создайте каталог для приложения.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Open a command or terminal session in that directory and use the ASP.NET Yeoman generator by typing the following:</source>
          <target state="translated">Откройте сеанс выполнения команд или сеанс терминала в этом каталоге и используйте генератор Yeoman для ASP.NET, введя следующую команду:</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>Web API Application<ept id="p1">**</ept> and type <bpt id="p2">**</bpt>api<ept id="p2">**</ept> for the name of the app and tap enter.</source>
          <target state="translated">Выберите <bpt id="p1">**</bpt>Приложение веб-интерфейса API<ept id="p1">**</ept>, введите <bpt id="p2">**</bpt>api<ept id="p2">**</ept> в качестве имени приложения и нажмите клавишу ВВОД.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Once the application is scaffolded, change to the <ph id="ph1">`/api`</ph> directory and restore the NuGet dependencies using <ph id="ph2">`dotnet restore`</ph>.</source>
          <target state="translated">После создания приложения по шаблону перейдите в каталог <ph id="ph1">`/api`</ph> и восстановите зависимости NuGet с помощью команды <ph id="ph2">`dotnet restore`</ph>.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Test the application using <ph id="ph1">`dotnet run`</ph> and browsing to <bpt id="p1">**</bpt>http://localhost:5000/api/values<ept id="p1">**</ept></source>
          <target state="translated">Протестируйте приложение, выполнив команду <ph id="ph1">`dotnet run`</ph> и перейдя по адресу <bpt id="p1">**</bpt>http://localhost:5000/api/values<ept id="p1">**</ept>.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`Ctrl+C`</ph> to stop the application.</source>
          <target state="translated">Чтобы остановить приложение, нажмите клавишу <ph id="ph1">`Ctrl+C`</ph>.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Adding Docker support</source>
          <target state="translated">Добавление поддержки Docker</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Adding Docker support to the project is achieved using the Yeoman generator from Microsoft.</source>
          <target state="translated">Добавление поддержки Docker в проект осуществляется посредством генератора Yeoman от корпорации Майкрософт.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>It currently supports .NET Core, Node.js and Go projects by creating a Dockerfile and scripts that help build and run projects inside containers.</source>
          <target state="translated">В настоящее время он поддерживает проекты .NET Core, Node.js и Go путем создания файла Dockerfile и скриптов, помогающих собирать и выполнять проекты в контейнерах.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Visual Studio Code specific files are also added (launch.json, tasks.json) for editor debugging and command palette support.</source>
          <target state="translated">Также добавляются файлы, относящиеся к Visual Studio Code (launch.json, tasks.json), для поддержки отладки и палитры команд редактора.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Select <ph id="ph1">`.NET Core`</ph> as the project type</source>
          <target state="translated">В качестве типа проекта выберите <ph id="ph1">`.NET Core`</ph>.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`rtm`</ph> for the version of .NET Core</source>
          <target state="translated"><ph id="ph1">`rtm`</ph> — версия .NET Core</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Y`</ph> the project uses a web server</source>
          <target state="translated"><ph id="ph1">`Y`</ph> — проект использует веб-сервер</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`5000`</ph> is the port the Web API application is listening on (http://localhost:5000)</source>
          <target state="translated"><ph id="ph1">`5000`</ph> — порт, который прослушивает приложение веб-интерфейса API (http://localhost:5000)</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`api`</ph> for the image name</source>
          <target state="translated"><ph id="ph1">`api`</ph> — имя образа</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`api`</ph> for the service name</source>
          <target state="translated"><ph id="ph1">`api`</ph> — имя службы</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`api`</ph> for the compose project</source>
          <target state="translated"><ph id="ph1">`api`</ph> — составной проект</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Y`</ph> to overwrite the current Dockerfile</source>
          <target state="translated"><ph id="ph1">`Y`</ph> — перезапись текущего файла Dockerfile</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>When the generator is complete, the following files are added to the project</source>
          <target state="translated">Когда работа генератора завершится, в проект будут добавлены следующие файлы.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>.vscode/launch.json</source>
          <target state="translated">.vscode/launch.json</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Dockerfile.debug</source>
          <target state="translated">Dockerfile.debug</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Dockerfile</source>
          <target state="translated">Dockerfile</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>docker-compose.debug.yml</source>
          <target state="translated">docker-compose.debug.yml</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>docker-compose.yml</source>
          <target state="translated">docker-compose.yml</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>dockerTask.ps1</source>
          <target state="translated">dockerTask.ps1</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>dockerTask.sh</source>
          <target state="translated">dockerTask.sh</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>.vscode/tasks.json</source>
          <target state="translated">.vscode/tasks.json</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The generator creates two Dockerfiles.</source>
          <target state="translated">Генератор создает два файла Dockerfile.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Dockerfile.debug<ept id="p1">**</ept> - this file is based on the <bpt id="p2">**</bpt>microsoft/dotnet:1.0.0-preview2-sdk<ept id="p2">**</ept> image which if you note from the list of image variants, includes the SDK, CLI and .NET Core and will be the image used for development and debugging (F5).</source>
          <target state="translated"><bpt id="p1">**</bpt>Dockerfile.debug<ept id="p1">**</ept> — этот файл основан на образе <bpt id="p2">**</bpt>microsoft/dotnet:1.0.0-preview2-sdk<ept id="p2">**</ept>, который, как можно видеть в списке вариантов образов, включает пакет SDK, интерфейс CLI и платформу .NET Core и будет образом, используемым для разработки и отладки (F5).</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Including all of these components produces a larger image with a size roughly of 540MB.</source>
          <target state="translated">Включение всех этих компонентов увеличивает размер образа приблизительно до 540 МБ.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Dockerfile<ept id="p1">**</ept> - this image is the release image based on <bpt id="p2">**</bpt>microsoft/dotnet:1.0.0-core<ept id="p2">**</ept> and should be used for production.</source>
          <target state="translated"><bpt id="p1">**</bpt>Dockerfile<ept id="p1">**</ept> — это образ выпуска, основанный на <bpt id="p2">**</bpt>microsoft/dotnet:1.0.0-core<ept id="p2">**</ept>, который следует использовать для рабочей среды.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>This image when built is approximately 253 MB.</source>
          <target state="translated">После сборки его размер составляет приблизительно 253 МБ.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Creating the Docker images</source>
          <target state="translated">Создание образов Docker</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Using the <ph id="ph1">`dockerTask.sh`</ph> or <ph id="ph2">`dockerTask.ps1`</ph> script, we can build or compose the image and container for the <bpt id="p1">**</bpt>api<ept id="p1">**</ept> application for a specific environment.</source>
          <target state="translated">С помощью скрипта <ph id="ph1">`dockerTask.sh`</ph> или <ph id="ph2">`dockerTask.ps1`</ph> можно выполнить сборку или компоновку образа и контейнера для приложения <bpt id="p1">**</bpt>api<ept id="p1">**</ept> для определенной среды.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Build the <bpt id="p1">**</bpt>debug<ept id="p1">**</ept> image by running the following command.</source>
          <target state="translated">Выполните сборку образа <bpt id="p1">**</bpt>debug<ept id="p1">**</ept>, выполнив приведенную ниже команду.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The image will build the ASP.NET application, run <ph id="ph1">`dotnet restore`</ph>, add the debugger to the image, set an <ph id="ph2">`ENTRYPOINT`</ph> and finally copy the app to the image.</source>
          <target state="translated">Образ выполнит сборку приложения ASP.NET, вызовет команду <ph id="ph1">`dotnet restore`</ph>, добавит отладчик в образ, задаст <ph id="ph2">`ENTRYPOINT`</ph> и, наконец, скопирует приложение в образ.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The result is a Docker image named <bpt id="p1">*</bpt>api<ept id="p1">*</ept> with a <ph id="ph1">`TAG`</ph> of <bpt id="p2">*</bpt>debug<ept id="p2">*</ept>.</source>
          <target state="translated">Результатом будет образ Docker с именем <bpt id="p1">*</bpt>api<ept id="p1">*</ept> и с тегом (<ph id="ph1">`TAG`</ph>) <bpt id="p2">*</bpt>debug<ept id="p2">*</ept>.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>See the images on the machine using <ph id="ph1">`docker images`</ph>.</source>
          <target state="translated">Просмотреть образы на компьютере можно с помощью команды <ph id="ph1">`docker images`</ph>.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Another way to generate the image and run the application within the Docker container is to open the application in Visual Studio Code and use the debugging tools.</source>
          <target state="translated">Другой способ создать образ и запустить приложение в контейнере Docker — открыть приложение в Visual Studio Code и воспользоваться средствами отладки.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Select the debugging icon in the View Bar on the left side of VS Code.</source>
          <target state="translated">Щелкните значок отладки на панели представлений в левой части окна VS Code.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>vscode debugging icon</source>
          <target state="translated">Значок отладки VS Code</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Then tap the play icon or F5 to generate the image and start the application within the container.</source>
          <target state="translated">Затем щелкните значок воспроизведения или нажмите клавишу F5, чтобы создать образ и запустить приложение в контейнере.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The Web API will be launched using your default web browser at http://localhost:5000.</source>
          <target state="translated">Приложение веб-интерфейса API будет запущено с помощью веб-браузера по умолчанию по адресу http://localhost:5000.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>VSCode Docker Tools Debug</source>
          <target state="translated">Средства отладки VS Code для Docker</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>You may set break points in your application, step through, etc. just as if the application was running locally on your development machine as opposed to inside the container.</source>
          <target state="translated">Вы можете устанавливать точки останова в приложении, выполнять его пошагово и выполнять другие действия, как если бы приложение выполнялось локально на компьютере разработки, а не в контейнере.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The benefit to debugging within the container is this is the same image that would be deployed to a production environment.</source>
          <target state="translated">Преимущество отладки в контейнере в том, что это тот же образ, который будет развертываться в рабочей среде.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Creating the release or production image requires simply running the command from the terminal passing the <ph id="ph1">`release`</ph> environment name.</source>
          <target state="translated">Чтобы создать образ выпуска или рабочий образ, достаточно просто выполнить команду в терминале, указав имя среды <ph id="ph1">`release`</ph>.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The command creates the image based on the smaller <bpt id="p1">**</bpt>microsoft/dotnet:core<ept id="p1">**</ept> base image, <bpt id="p2">[</bpt>EXPOSE<ept id="p2">](https://docs.docker.com/engine/reference/builder/#/expose)</ept> port 5000, sets the <bpt id="p3">[</bpt>ENTRYPOINT<ept id="p3">](https://docs.docker.com/engine/reference/builder/#/entrypoint)</ept> for <ph id="ph1">`dotnet api.dll`</ph> and copies it to the <ph id="ph2">`/app`</ph> directory.</source>
          <target state="translated">Команда создает образ на основе базового образа <bpt id="p1">**</bpt>microsoft/dotnet:core<ept id="p1">**</ept> меньшего размера, открывает (<bpt id="p2">[</bpt>EXPOSE<ept id="p2">](https://docs.docker.com/engine/reference/builder/#/expose)</ept>) порт 5000, задает точку входа (<bpt id="p3">[</bpt>ENTRYPOINT<ept id="p3">](https://docs.docker.com/engine/reference/builder/#/entrypoint)</ept>) для <ph id="ph1">`dotnet api.dll`</ph> и копирует ее в каталог <ph id="ph2">`/app`</ph>.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>There is no debugger, SDK or <ph id="ph1">`dotnet restore`</ph> resulting in a much smaller image.</source>
          <target state="translated">Нет отладчика, пакета SDK, и не выполняется команда <ph id="ph1">`dotnet restore`</ph>, благодаря чему размер образа гораздо меньше.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The image is named <bpt id="p1">**</bpt>api<ept id="p1">**</ept> with a <ph id="ph1">`TAG`</ph> of <bpt id="p2">**</bpt>latest<ept id="p2">**</ept>.</source>
          <target state="translated">Образ имеет имя <bpt id="p1">**</bpt>api<ept id="p1">**</ept> и тег (<ph id="ph1">`TAG`</ph>) <bpt id="p2">**</bpt>latest<ept id="p2">**</ept>.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Summary</source>
          <target state="translated">Сводка</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Using the Docker generator to add the necessary files to our Web API application made the process simple to create the development and production versions of the images.</source>
          <target state="translated">Использование генератора Docker для добавления необходимых файлов в приложение веб-интерфейса API упростило создание версий образов для разработки и рабочей среды.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The tooling is cross platform by also providing a PowerShell script to accomplish the same results on Windows and Visual Studio Code integration providing step through debugging of the application within the container.</source>
          <target state="translated">Кроссплатформенность средств также достигается с помощью скрипта PowerShell, который позволяет получить те же результаты в Windows, а интеграция с Visual Studio Code дает возможность пошаговой отладки приложения в контейнере.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>By understanding the image variants and the target scenarios, you can optimize your inner-loop development process, while achieving optimized images for production deployments.</source>
          <target state="translated">Понимая назначение вариантов образов и целевые сценарии, вы можете оптимизировать внутренний цикл разработки и получить более эффективные образы для рабочих развертываний.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>