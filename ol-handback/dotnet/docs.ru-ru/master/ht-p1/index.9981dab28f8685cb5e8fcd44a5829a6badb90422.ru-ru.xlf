<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-6a73dd2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d99d1a68fd6d1daf68670d6d73c07fe1009d92d9</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\preview3\deploying\index.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p1</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4a4641c815e8077fe3bdeae0ce40e912fe6dd638</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a6df366e5abab9c044712a56d0bd5a88bbecb430</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>.NET Core Application Deployment</source>
          <target state="translated">Разработка приложений .NET Core</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>.NET Core Application Deployment</source>
          <target state="translated">Разработка приложений .NET Core</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core, .NET Core deployment</source>
          <target state="translated">.NET, .NET Core, разработка .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>.NET Core Application Deployment</source>
          <target state="translated">Разработка приложений .NET Core</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You can create two types of deployments for .NET Core applications:</source>
          <target state="translated">Для приложений .NET Core можно создавать два типа развертываний.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Framework-dependent deployment.</source>
          <target state="translated">Развертывание, зависящее от платформы.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>As the name implies, framework-dependent deployment (FDD) relies on a shared system-wide version of .NET Core to be present on the target system.</source>
          <target state="translated">Как понятно из названия, зависящее от платформы развертывание (FDD) требует наличия в целевой системе общей версии .NET Core.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Because .NET Core is already present, your app is also portable between installations of .NET Core.</source>
          <target state="translated">Так как платформа .NET Core уже имеется, приложение можно переносить между установками .NET Core.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Your app contains only its own code and any third-party dependencies that are outside of the .NET Core libraries.</source>
          <target state="translated">Приложение содержит только собственный код и зависимости сторонних разработчиков, которые не входят в библиотеки .NET Core.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>FDDs contain .dll files that can be launched by using the <bpt id="p1">[</bpt>dotnet utility<ept id="p1">](../tools/dotnet.md)</ept> from the command line.</source>
          <target state="translated">Зависящие от платформы развертывания содержат DLL-файл, которые можно запускать с помощью <bpt id="p1">[</bpt>служебной программы dotnet<ept id="p1">](../tools/dotnet.md)</ept> из командной строки.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`dotnet app.dll`</ph> runs an application named <ph id="ph2">`app`</ph>.</source>
          <target state="translated">Например, команда <ph id="ph1">`dotnet app.dll`</ph> запускает приложение с именем <ph id="ph2">`app`</ph>.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Self-contained deployment.</source>
          <target state="translated">Автономные развертывания.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Unlike FDD, a self-contained deployment (SCD) does not rely on any shared components to be present on the target system.</source>
          <target state="translated">В отличие от зависящих от платформы развертываний, автономное развертывание (SCD) не требует наличия в целевой системе каких-либо общих компонентов.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>All components, including both .NET Core libraries and the .NET Core runtime, are included with the application and are isolated from other .NET Core applications.</source>
          <target state="translated">Все компоненты, включая библиотеки .NET Core и среду выполнения .NET Core, включены в приложение и изолированы от других приложений .NET Core.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>SCDs include an executable (such as <ph id="ph1">`app.exe`</ph> on Windows platforms for an application named <ph id="ph2">`app`</ph>), which is  a renamed version of the platform-specific .NET Core host, and a .dll file (such as <ph id="ph3">`app.dll`</ph>), which is the actual application.</source>
          <target state="translated">Автономное развертывание включает в себя исполняемый файл (например, <ph id="ph1">`app.exe`</ph> на платформах Windows для приложения с именем <ph id="ph2">`app`</ph>), который является переименованной версией связанного с платформой узла .NET Core, и DLL-файл (например <ph id="ph3">`app.dll`</ph>), представляющий собственно приложение.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Framework-dependent deployments (FDD)</source>
          <target state="translated">Развертывания, зависящие от платформы</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For an FDD, you deploy only your app and any third-party dependencies.</source>
          <target state="translated">В случае с зависящим от платформы развертыванием вы развертываете только приложение и зависимости сторонних разработчиков.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You do not have to deploy .NET Core, since your app will use the version of .NET Core that's present on the target system.</source>
          <target state="translated">Платформу .NET Core развертывать не нужно, так как приложение будет использовать версию .NET Core, имеющуюся в целевой системе.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This is the default deployment model for .NET Core apps.</source>
          <target state="translated">Это модель развертывания приложений .NET Core по умолчанию.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Why create a framework-dependent deployment?</source>
          <target state="translated">Зачем использовать развертывание, зависящее от платформы</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Deploying an FDD has a number of advantages:</source>
          <target state="translated">Развертывание, зависящее от платформы, имеет ряд преимуществ.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>You do not have to define the target operating systems that your .NET Core app will run on in advance.</source>
          <target state="translated">Вам не нужно предварительно определять целевые операционные системы, в которых будет выполняться приложение .NET Core.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Because .NET Core uses a common PE file format for executables and libraries regardless of operating system, .NET Core can execute your app regardless of the underlying operating system.</source>
          <target state="translated">Так как .NET Core использует общий формат файлов PE для исполняемых файлов и библиотек вне зависимости от операционной системы, ваше приложение может выполняться вне зависимости от базовой операционной системы.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For more information on the PE file format, see <bpt id="p1">[</bpt>.NET Assembly File Format<ept id="p1">](../../../standard/assembly-format.md)</ept>.</source>
          <target state="translated">Дополнительные сведения о формате файлов PE см. в разделе <bpt id="p1">[</bpt>Формат файла сборки .NET<ept id="p1">](../../../standard/assembly-format.md)</ept>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The size of your deployment package is small.</source>
          <target state="translated">Пакет развертывания имеет небольшой размер.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You only have to deploy your app and its dependencies, not .NET Core itself.</source>
          <target state="translated">Необходимо развернуть только приложение и его зависимости, но не саму платформу .NET Core.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Multiple apps use the same .NET Core installation, which reduces both disk space and memory usage on host systems.</source>
          <target state="translated">Несколько приложений используют одну и ту же установку .NET Core, что сокращает использование дискового пространства и памяти в системе.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>There are also a few disadvantages:</source>
          <target state="translated">Имеется и ряд недостатков.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Your app can run only if the version of .NET Core that you target, or a later version, is already installed on the host system.</source>
          <target state="translated">Приложение может выполняться, только если в системе уже установлена целевая или более поздняя версия .NET Core.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>It is possible for the .NET Core runtime and libraries to change without your knowledge in future releases.</source>
          <target state="translated">Среда выполнения и библиотеки .NET Core могут изменяться в будущих выпусках, о чем вы можете не знать.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In rare cases, this may change the behavior of your app.</source>
          <target state="translated">В редких случаях это может повлиять на работу вашего приложения.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Deploying a framework-dependent deployment</source>
          <target state="translated">Выполнение развертывания, зависящего от платформы</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Deploying a framework-dependent deployment with no third-party dependencies simply involves building, testing, and publishing the app.</source>
          <target state="translated">Если развертывание, зависящее от платформы, не содержит зависимостей сторонних разработчиков, то необходимо просто выполнить сборку, протестировать и опубликовать приложение.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>A simple example written in C# illustrates the process.</source>
          <target state="translated">Проиллюстрируем этот процесс на примере простого приложения, написанного на языке C#.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The example uses the <bpt id="p1">[</bpt>dotnet utility<ept id="p1">](../tools/dotnet.md)</ept> from the command line; however, you can also use a development environment, such as Visual Studio or Visual Studio Code, to compile, test, and publish the example.</source>
          <target state="translated">В этом примере используется <bpt id="p1">[</bpt>программа командной строки dotnet<ept id="p1">](../tools/dotnet.md)</ept>. однако вы также можете использовать среду развертывания, такую как Visual Studio или Visual Studio Code, для компиляции, тестирования и публикации приложения.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Create a directory for your project, and from the command line, type <bpt id="p1">[</bpt>dotnet new<ept id="p1">](../tools/dotnet-new.md)</ept> to create a new C# console project.</source>
          <target state="translated">Создайте каталог для проекта, а затем в командной строке введите <bpt id="p1">[</bpt>dotnet new<ept id="p1">](../tools/dotnet-new.md)</ept>, чтобы создать проект консольного приложения C#.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Open the <ph id="ph1">`Program.cs`</ph> file in an editor, and replace the auto-generated code with the following code.</source>
          <target state="translated">Откройте файл <ph id="ph1">`Program.cs`</ph> в редакторе и замените автоматически созданный код приведенным ниже кодом.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>It prompts the user to enter text, and then displays the individual words entered by the user.</source>
          <target state="translated">Он выводит запрос на ввод текста, а затем отображает отдельные слова, введенные пользователем.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>It uses the regular expression <ph id="ph1">`\w+`</ph> to separate the words in the input text.</source>
          <target state="translated">Для разделения слов во введенном тексте в нем используется регулярное выражение <ph id="ph1">`\w+`</ph>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Run the <bpt id="p1">[</bpt>dotnet restore<ept id="p1">](../tools/dotnet-restore.md)</ept> command to restore the dependencies specified in your project.</source>
          <target state="translated">Выполните команду <bpt id="p1">[</bpt>dotnet restore<ept id="p1">](../tools/dotnet-restore.md)</ept>, чтобы восстановить зависимости, указанные в проекте.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Create a debug build of your app by using the <bpt id="p1">[</bpt>dotnet build<ept id="p1">](../tools/dotnet-build.md)</ept> command.</source>
          <target state="translated">Создайте отладочную сборку приложения с помощью команды <bpt id="p1">[</bpt>dotnet build<ept id="p1">](../tools/dotnet-build.md)</ept>.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>After you've debugged and tested the program, you can create the files to be deployed with your app by using the <ph id="ph1">`dotnet publish -f netcoreapp1.0 -c release`</ph> command.</source>
          <target state="translated">Отладив и протестировав программу, вы можете создать файлы, которые будут развертываться с приложением, с помощью команды <ph id="ph1">`dotnet publish -f netcoreapp1.0 -c release`</ph>.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This creates a release (rather than a debug) version of your app.</source>
          <target state="translated">При этом будет создана версия выпуска приложения (а не отладочная версия).</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The resulting files are placed in a directory named <ph id="ph1">`publish`</ph> that is in a subdirectory of your project's <ph id="ph2">`.\bin\release\netcoreapp1.0`</ph> subdirectory.</source>
          <target state="translated">Итоговые файлы помещаются в каталог с именем <ph id="ph1">`publish`</ph>, который находится в подкаталоге каталога <ph id="ph2">`.\bin\release\netcoreapp1.0`</ph> проекта.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Along with your application's files, the publishing process emits a program database (.pdb) file that contains debugging information about your app.</source>
          <target state="translated">Помимо файлов приложения, процесс публикации создает файл базы данных программы (PDB), который содержит отладочную информацию о приложении.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The file is useful primarily for debugging exceptions; you can choose not to package it with your application's files.</source>
          <target state="translated">Он служит в первую очередь для отладки исключений. Вы можете не упаковывать его вместе с файлами приложения.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The complete set of application  files can be deployed in any way you'd like.</source>
          <target state="translated">Полный набор файлов приложения можно развернуть любым способом, каким вы хотите.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For example, you can package them in a zip file, use a simple <ph id="ph1">`copy`</ph> command, or deploy them with any installation package of your choice.</source>
          <target state="translated">Например, их можно упаковать в ZIP-файл, использовать простую команду <ph id="ph1">`copy`</ph> или развернуть их с помощью любого установочного пакета на ваш выбор.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>In addition to the application binaries, the installer should also either bundle the shared framework installer or check for it as a prerequisite as part of the application installation.</source>
          <target state="translated">Помимо двоичных файлов приложения, установщик должен либо включать в себя установщик общей платформы, либо проверять наличие платформы в процессе установки приложения.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Installation of the shared framework requires Administrator/root access since it is machine-wide.</source>
          <target state="translated">Установка общей платформы требует наличия прав администратор или root, так как она производится на уровне всего компьютера.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Deploying a framework-dependent deployment with third-party dependencies</source>
          <target state="translated">Выполнение развертывания, зависящего от платформы, с зависимостями сторонних разработчиков</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Deploying a framework-dependent deployment with one or more third-party dependencies involves three additional steps before you can run the <ph id="ph1">`dotnet restore`</ph> command:</source>
          <target state="translated">Осуществление развертывания, зависящего от платформы, с одной или несколькими зависимостями сторонних разработчиков предполагает выполнение трех дополнительных действий перед выполнением команды <ph id="ph1">`dotnet restore`</ph>.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Add references to any third-party libraries to the <ph id="ph1">`&lt;ItemGroup&gt;`</ph> section of your <ph id="ph2">`csproj`</ph> file.</source>
          <target state="translated">Добавьте ссылки на библиотеки сторонних разработчиков в раздел <ph id="ph1">`&lt;ItemGroup&gt;`</ph> файла <ph id="ph2">`csproj`</ph>.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The following  <ph id="ph1">`&lt;ItemGroup&gt;`</ph> section shows the <ph id="ph2">`&lt;ItemGroup&gt;`</ph> containing the dependencies in the default project with Json.NET as a third-party library.</source>
          <target state="translated">В следующем разделе <ph id="ph1">`&lt;ItemGroup&gt;`</ph> демонстрируется <ph id="ph2">`&lt;ItemGroup&gt;`</ph>, где зависимости содержатся в проекте по умолчанию с файлом Json.NET в качестве сторонней библиотеки.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Note that the SDK dependency remains in the above example.</source>
          <target state="translated">Обратите внимание, что в приведенном выше примере зависимость от пакета SDK остается.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>This is by design, since this depdendency is required to restore all the needed targets to allow the command line tools to function.</source>
          <target state="translated">Это сделано преднамеренно, так как эта зависимость требуется для восстановления всех необходимых целевых объектов, чтобы обеспечить функционирование средств командной строки.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>If you haven't already, download the NuGet package containing the third-party dependency.</source>
          <target state="translated">Скачайте пакет NuGet, содержащий зависимость стороннего разработчика, если вы этого еще не сделали.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>To download the package, execute the <ph id="ph1">`dotnet restore`</ph> command after adding the dependency.</source>
          <target state="translated">Чтобы скачать пакет, выполните команду <ph id="ph1">`dotnet restore`</ph> после добавления зависимости.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Because the dependency is resolved out of the local NuGet cache at publish time, it must be available on your system.</source>
          <target state="translated">Так как зависимость разрешается из локального кэша NuGet во время публикации, она должна быть доступна в системе.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Note that a framework-dependent deployment with third-party dependencies will only be as portable as its third-party dependencies.</source>
          <target state="translated">Имейте в виду, что переносимость зависящего от платформы развертывания с зависимостями сторонних разработчиков напрямую зависит от переносимости этих зависимостей.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>For example, if a third-party library only supports macOS, the app will not be portable to Windows systems.</source>
          <target state="translated">Например, если библиотека стороннего разработчика поддерживает только Mac OS, приложение нельзя будет перенести в системы Windows.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>This can happen if the third-party dependency itself depends on native code.</source>
          <target state="translated">Это может происходить, если зависимость стороннего разработчика сама зависит от машинного кода.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>A good example of this is Kestrel server.</source>
          <target state="translated">Хорошим примером этого является сервер Kestrel.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>When an FDD is created for an application with this kind of third-party dependency, the published output will contain a folder for each <bpt id="p1">[</bpt>Runtime Identifier (RID)<ept id="p1">](../../rid-catalog.md#what-are-rids)</ept> that the native dependency supports (and that exists in its NuGet package).</source>
          <target state="translated">Когда зависящее от платформы развертывание создается для приложения с таким типом зависимости стороннего разработчика, опубликованные выходные данные будут содержать папку для каждого <bpt id="p1">[</bpt>идентификатора среды выполнения (RID)<ept id="p1">](../../rid-catalog.md#what-are-rids)</ept>, поддерживаемого зависимостью (и имеющегося в ее пакете NuGet).</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Self-contained deployments (SCD)</source>
          <target state="translated">Автономные развертывания</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>For a self-contained deployment, you deploy not only your app and any third-party dependencies, but the version of .NET Core that you build your app with.</source>
          <target state="translated">В случае с автономным развертыванием вы развертываете не только приложение и зависимости сторонних разработчиков, но и версию .NET Core, с помощью которой создавалось приложение.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Creating an SCD does not, however, include the <bpt id="p1">[</bpt>native dependencies of .NET Core<ept id="p1">](https://github.com/dotnet/core/blob/master/Documentation/prereqs.md)</ept> itself on various platforms (for example, OpenSSL on macOS) so these need to be installed before running the application.</source>
          <target state="translated">При создании автономного приложения, однако, не включаются <bpt id="p1">[</bpt>собственные зависимости .NET Core<ept id="p1">](https://github.com/dotnet/core/blob/master/Documentation/prereqs.md)</ept> для различных платформ (например, OpenSSL для Mac OS), поэтому их надо установить перед запуском приложения.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Why deploy a Self-contained deployment?</source>
          <target state="translated">Зачем использовать автономное развертывание</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Deploying a Self-contained deployment has two major advantages:</source>
          <target state="translated">Автономное развертывание имеет два основных преимущества.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>You have sole control of the version of .NET Core that is deployed with your app.</source>
          <target state="translated">Вы единолично контролируете версию .NET Core, которая развертывается вместе с приложением.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>.NET Core can be serviced only by you.</source>
          <target state="translated">Платформа .NET Core может предоставляться только вами.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>You can be assured that the target system can run your .NET Core app, since you're providing the version of .NET Core that it will run on.</source>
          <target state="translated">Вы можете быть уверены в том, что приложение .NET Core может выполняться в целевой системе, так как вы предоставили соответствующую версию .NET Core.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>It also has a number of disadvantages:</source>
          <target state="translated">Есть также ряд недостатков.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Because .NET Core is included in your deployment package, you must select the target platforms for which you build deployment packages in advance.</source>
          <target state="translated">Так как платформа .NET Core включается в пакет развертывания, необходимо заранее выбрать целевые платформы, для которых вы создаете пакеты развертывания.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The size of your deployment package is relatively large, since you have to include .NET Core as well as your app and its third-party dependencies.</source>
          <target state="translated">Пакет развертывания имеет относительно большой размер, так как в него необходимо включить платформу .NET Core в дополнение к приложению и зависимостям сторонних разработчиков.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Deploying numerous self-contained .NET Core apps to a system can consume significant amounts of disk space, since each app duplicates .NET Core files.</source>
          <target state="translated">При развертывании множества автономных приложений .NET Core в системе может использоваться значительный объем дискового пространства, так как каждое приложение создает копии файлов .NET Core.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="simpleSelf"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Deploying a simple self-contained deployment</source>
          <target state="translated"><bpt id="p1">&lt;a name="simpleSelf"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Простое автономное развертывание</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Deploying a self-contained deployment with no third-party dependencies involves creating the project, modifying the csproj file, building, testing, and publishing the app.</source>
          <target state="translated">Выполнение автономного развертывания без зависимостей сторонних разработчиков предполагает создание проекта, изменение CSPROJ-файла, сборку, тестирование и публикацию приложения.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>A simple example written in C# illustrates the process.</source>
          <target state="translated">Проиллюстрируем этот процесс на примере простого приложения, написанного на языке C#.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The example uses the <ph id="ph1">`dotnet`</ph> utility from the command line; however, you can also use a development environment, such as Visual Studio or Visual Studio Code, to compile, test, and publish the example.</source>
          <target state="translated">В этом примере используется программа командной строки <ph id="ph1">`dotnet`</ph>, однако вы также можете использовать среду развертывания, такую как Visual Studio или Visual Studio Code, для компиляции, тестирования и публикации приложения.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Create a directory for your project, and from the command line, type <ph id="ph1">`dotnet new`</ph> to create a new C# console project.</source>
          <target state="translated">Создайте каталог для проекта, а затем в командной строке введите <ph id="ph1">`dotnet new`</ph>, чтобы создать проект консольного приложения C#.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Open the <ph id="ph1">`Program.cs`</ph> file in an editor, and replace the auto-generated code with the following code.</source>
          <target state="translated">Откройте файл <ph id="ph1">`Program.cs`</ph> в редакторе и замените автоматически созданный код приведенным ниже кодом.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>It prompts the user to enter text, and then displays the individual words entered by the user.</source>
          <target state="translated">Он выводит запрос на ввод текста, а затем отображает отдельные слова, введенные пользователем.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>It uses the regular expression <ph id="ph1">`\w+`</ph> to separate the words in the input text.</source>
          <target state="translated">Для разделения слов во введенном тексте в нем используется регулярное выражение <ph id="ph1">`\w+`</ph>.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Create a <ph id="ph1">`&lt;RuntimeIdentifiers&gt;`</ph> tag under the <ph id="ph2">`&lt;PropertyGroup&gt;`</ph> section in your <ph id="ph3">`csproj`</ph> file that defines the platforms your app targets, and specify the runtime identifier of each platform that you target.</source>
          <target state="translated">В разделе <ph id="ph2">`&lt;PropertyGroup&gt;`</ph> файла <ph id="ph3">`csproj`</ph> создайте тег <ph id="ph1">`&lt;RuntimeIdentifiers&gt;`</ph>, определяющий платформы, для которых предназначено приложение, и укажите идентификатор среды выполнения для каждой целевой платформы.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Runtime IDentifier catalog<ept id="p1">](../../rid-catalog.md)</ept> for a list of runtime identifiers.</source>
          <target state="translated">Список идентификаторов сред выполнения см. в <bpt id="p1">[</bpt>каталоге идентификаторов сред выполнения<ept id="p1">](../../rid-catalog.md)</ept>.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>For example, the following <ph id="ph1">`runtimes`</ph> section indicates that the app runs on 64-bit Windows 10 operating systems and the 64-bit OS X Version 10.11 operating system.</source>
          <target state="translated">Например, приведенный ниже раздел <ph id="ph1">`runtimes`</ph> указывает, что приложение выполняется в 64-разрядной операционной системе Windows 10 и в 64-разрядной операционной системе OS X 10.11.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Note that you also need to add a semicolon to separate the RIDs.</source>
          <target state="translated">Обратите внимание, что для разделения идентификаторов RID необходимо добавлять точку с запятой.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Also, please note that the <ph id="ph1">`&lt;RuntimeIdentifier&gt;`</ph> element can go into any <ph id="ph2">`&lt;PropertyGroup&gt;`</ph> that you have in your <ph id="ph3">`csproj`</ph> file.</source>
          <target state="translated">Также обратите внимание, что элемент <ph id="ph1">`&lt;RuntimeIdentifier&gt;`</ph> можно переносить в другие группы <ph id="ph2">`&lt;PropertyGroup&gt;`</ph> в пределах файла <ph id="ph3">`csproj`</ph>.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>A complete sample <ph id="ph1">`csproj`</ph> file appears later in this section.</source>
          <target state="translated">Полный образец файла <ph id="ph1">`csproj`</ph> будет приведен далее в этом разделе.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Run the <ph id="ph1">`dotnet restore`</ph> command to restore the dependencies specified in your project.</source>
          <target state="translated">Выполните команду <ph id="ph1">`dotnet restore`</ph>, чтобы восстановить зависимости, указанные в проекте.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Create debug builds of your app on each of the target platforms by using the <ph id="ph1">`dotnet build`</ph> command.</source>
          <target state="translated">Создайте отладочные сборки приложения для каждой из целевых платформ с помощью команды <ph id="ph1">`dotnet build`</ph>.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Unless you specify the runtime identifier you'd like to build, the <ph id="ph1">`dotnet build`</ph> command creates a build only for the current system's runtime ID.</source>
          <target state="translated">Если не указать идентификатор среды выполнения, для которой нужно выполнить сборку, команда <ph id="ph1">`dotnet build`</ph> создаст сборку только для идентификатора среды выполнения текущей системы.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>You can build your app for both target platforms with the commands:</source>
          <target state="translated">Чтобы выполнить сборку приложения для обеих целевых платформ, используйте следующие команды:</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The debug builds of your app for each platform will be found in the project's <ph id="ph1">`.\bin\Debug\netcoreapp1.0\&lt;runtime_identifier&gt;`</ph> subdirectory.</source>
          <target state="translated">Отладочные сборки приложения для каждой платформы будут находиться в подкаталоге <ph id="ph1">`.\bin\Debug\netcoreapp1.0\&lt;runtime_identifier&gt;`</ph> проекта.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>After you've debugged and tested the program, you can create the files to be deployed with your app for each platform that it targets by using the <ph id="ph1">`dotnet publish`</ph> command for both target platforms as follows:</source>
          <target state="translated">Отладив и протестировав программу, вы можете создать файлы, которые будут развертываться вместе с приложением для каждой целевой платформы с помощью команды <ph id="ph1">`dotnet publish`</ph> следующим образом:</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>This creates a release (rather than a debug) version of your app for each target platform.</source>
          <target state="translated">При этом будет создана версия выпуска приложения (а не отладочная версия) для каждой целевой платформы.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The resulting files are placed in a subdirectory named <ph id="ph1">`publish`</ph> that is in a subdirectory of your project's <ph id="ph2">`.\bin\release\netcoreapp1.0\&lt;runtime_identifier&gt;`</ph> subdirectory.</source>
          <target state="translated">Итоговые файлы помещаются в подкаталог с именем <ph id="ph1">`publish`</ph>, который находится в подкаталоге каталога <ph id="ph2">`.\bin\release\netcoreapp1.0\&lt;runtime_identifier&gt;`</ph> проекта.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Note that each subdirectory contains the complete set of files (both your app files and all .NET Core files) needed to launch your app.</source>
          <target state="translated">Обратите внимание на то, что каждый подкаталог содержит полный набор файлов (как файлов приложения, так и всех файлов .NET Core), необходимых для запуска приложения.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Along with your application's files, the publishing process emits a program database (.pdb) file that contains debugging information about your app.</source>
          <target state="translated">Помимо файлов приложения, процесс публикации создает файл базы данных программы (PDB), который содержит отладочную информацию о приложении.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The file is useful primarily for debugging exceptions; you can choose not to package it with your application's files.</source>
          <target state="translated">Он служит в первую очередь для отладки исключений. Вы можете не упаковывать его вместе с файлами приложения.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The published files can be deployed in any way you'd like.</source>
          <target state="translated">Опубликованные файлы можно развернуть любым способом, который вам нравится.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>For example, you can package them in a zip file, use a simple <ph id="ph1">`copy`</ph> command, or deploy them with any installation package of your choice.</source>
          <target state="translated">Например, их можно упаковать в ZIP-файл, использовать простую команду <ph id="ph1">`copy`</ph> или развернуть их с помощью любого установочного пакета на ваш выбор.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The following is the complete <ph id="ph1">`csproj`</ph> file for this project.</source>
          <target state="translated">Ниже приведено полное содержимое файла <ph id="ph1">`csproj`</ph> для этого проекта.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Deploying a self-contained deployment with third-party dependencies</source>
          <target state="translated">Выполнение автономного развертывания с зависимостями сторонних разработчиков</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Deploying a self-contained deployment with one or more third-party dependencies involves adding the third party dependency:</source>
          <target state="translated">Выполнение автономного развертывания с одной или несколькими зависимостями сторонних разработчиков предполагает добавление этих зависимостей.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Add references to any third-party libraries to the <ph id="ph1">`&lt;ItemGroup&gt;`</ph> section of your <ph id="ph2">`csproj`</ph> file.</source>
          <target state="translated">Добавьте ссылки на библиотеки сторонних разработчиков в раздел <ph id="ph1">`&lt;ItemGroup&gt;`</ph> файла <ph id="ph2">`csproj`</ph>.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The following  <ph id="ph1">`&lt;ItemGroup&gt;`</ph> section uses Json.NET as a third-party library.</source>
          <target state="translated">В следующем разделе <ph id="ph1">`&lt;ItemGroup&gt;`</ph> в качестве библиотеки стороннего разработчика используется библиотека Json.NET.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>If you haven't already, download the NuGet package containing the third-party dependency to your system.</source>
          <target state="translated">Скачайте пакет NuGet, содержащий зависимость стороннего разработчика, в систему, если вы этого еще не сделали.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>To make the dependency available to your app, execute the <ph id="ph1">`dotnet restore`</ph> command after adding the dependency.</source>
          <target state="translated">Чтобы сделать зависимость доступной для приложения, после ее добавления выполните команду <ph id="ph1">`dotnet restore`</ph>.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Because the dependency is resolved out of the local NuGet cache at publish time, it must be available on your system.</source>
          <target state="translated">Так как зависимость разрешается из локального кэша NuGet во время публикации, она должна быть доступна в системе.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The following is the complete csproj file for this project:</source>
          <target state="translated">Ниже приведено полное содержимое CSPROJ-файла для этого проекта.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>When you deploy your application, any third-party dependencies used in your app are also contained with your application files.</source>
          <target state="translated">При развертывании приложения все зависимости сторонних разработчиков, используемые в нем, также содержатся в файлах приложения.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Third-party libraries do not already have to be present on the system on which the app is running.</source>
          <target state="translated">Библиотеки сторонних разработчиков не обязательно должны присутствовать в системе, в которой выполняется приложение.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Note that you can only deploy a self-contained deployment with a third-party library to platforms supported by that library.</source>
          <target state="translated">Имейте в виду, что автономное развертывание с библиотекой стороннего разработчика возможно только на платформах, которые поддерживаются этой библиотекой.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>This is similar to having third-party dependencies with native dependencies in your framework-dependent deployment.</source>
          <target state="translated">Это условие аналогично тому, что действует при наличии зависимостей сторонних разработчиков с собственными зависимостями при развертывании, зависящем от платформы.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Deploying a self-contained deployment with a smaller footprint</source>
          <target state="translated">Уменьшение размера автономного развертывания</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>If the availability of adequate storage space on target systems is likely to be an issue, you can reduce the overall footprint of your app by excluding some system components.</source>
          <target state="translated">Если в целевых системах может оказаться недостаточно дискового пространства, вы можете уменьшить общий размер приложения, исключив некоторые компоненты системы.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>To do this, you explicitly define the .NET Core components that your app includes in your csproj file.</source>
          <target state="translated">Для этого следует явным образом определить компоненты .NET Core, которые приложение включает в CSPROJ-файл.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>To create a self-contained deployment with a smaller footprint, start by following the first two steps for creating a self-contained deployment.</source>
          <target state="translated">Чтобы создать автономное развертывание меньшего размера, сначала выполните первые два шага для создания автономного развертывания.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Once you've run the <ph id="ph1">`dotnet new`</ph> command and added the C# source code to your app, do the following:</source>
          <target state="translated">Запустив команду <ph id="ph1">`dotnet new`</ph> и добавив исходный код на языке C# в приложение, выполните указанные ниже действия.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Open the <ph id="ph1">`csproj`</ph> file and replace the <ph id="ph2">`frameworks`</ph> section with the following:</source>
          <target state="translated">Откройте файл <ph id="ph1">`csproj`</ph> и замените раздел <ph id="ph2">`frameworks`</ph> на следующий код:</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>This operation indicates that, instead of using the entire <ph id="ph1">`netcoreapp1.0`</ph> framework, which includes .NET Core CLR, the .NET Core Library, and a number of other system components, our app uses only the .NET Standard Library.</source>
          <target state="translated">Эта операция указывает на то, что вместо использования всей платформы <ph id="ph1">`netcoreapp1.0`</ph>, включающей среду CLR .NET Core, библиотеку .NET Core и ряд других системных компонентов, наше приложение использует только библиотеку .NET Standard.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Replace the <ph id="ph1">`dependencies`</ph> section with the following:</source>
          <target state="translated">Замените раздел <ph id="ph1">`dependencies`</ph> на следующий код:</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>This defines the system components used by our app.</source>
          <target state="translated">Он определяет компоненты системы, используемые приложением.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The system components packaged with our app include the .NET Standard Library, the .NET Core runtime, and the .NET Core host.</source>
          <target state="translated">К компонентам системы, упаковываемым вместе с приложением, относятся библиотека .NET Standard, среда выполнения .NET Core и узел .NET Core.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>This produces a self-contained deployment with a smaller footprint.</source>
          <target state="translated">В результате получается автономное развертывание меньшего размера.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>As you did in the <bpt id="p1">[</bpt>Deploying a simple self-contained deployment<ept id="p1">](#simpleSelf)</ept> example, create a <ph id="ph1">`&lt;RuntimeIdentifiers&gt;`</ph> element within a <ph id="ph2">`&lt;PropertyGroup&gt;`</ph> in your <ph id="ph3">`csproj`</ph> file that defines the platforms your app targets and specify the runtime identifier of each platform that you target.</source>
          <target state="translated">Так же, как в примере <bpt id="p1">[</bpt>Выполнение простого автономного развертывания<ept id="p1">](#simpleSelf)</ept>, создайте элемент <ph id="ph1">`&lt;RuntimeIdentifiers&gt;`</ph> в разделе <ph id="ph2">`&lt;PropertyGroup&gt;`</ph> файла <ph id="ph3">`csproj`</ph>, определяющий платформы, для которых предназначено приложение, и укажите идентификатор среды выполнения для каждой целевой платформы.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Runtime IDentifier catalog<ept id="p1">](../../rid-catalog.md)</ept> for a list of runtime identifiers.</source>
          <target state="translated">Список идентификаторов сред выполнения см. в <bpt id="p1">[</bpt>каталоге идентификаторов сред выполнения<ept id="p1">](../../rid-catalog.md)</ept>.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>For example, the following example indicates that the app runs on 64-bit Windows 10 operating systems and the 64-bit OS X Version 10.11 operating system.</source>
          <target state="translated">Например, приведенный ниже пример указывает, что приложение выполняется в 64-разрядной операционной системе Windows 10 и в 64-разрядной операционной системе OS X 10.11.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>A complete sample <ph id="ph1">`csproj`</ph> file appears later in this section.</source>
          <target state="translated">Полный образец файла <ph id="ph1">`csproj`</ph> будет приведен далее в этом разделе.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Run the <ph id="ph1">`dotnet restore`</ph> command to restore the dependencies specified in your project.</source>
          <target state="translated">Выполните команду <ph id="ph1">`dotnet restore`</ph>, чтобы восстановить зависимости, указанные в проекте.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Create debug builds of your app on each of the target platforms by using the <ph id="ph1">`dotnet build`</ph> command.</source>
          <target state="translated">Создайте отладочные сборки приложения для каждой из целевых платформ с помощью команды <ph id="ph1">`dotnet build`</ph>.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Unless you specify the runtime identifier you'd like to build, the <ph id="ph1">`dotnet build`</ph> command creates a build only for the current system's runtime ID.</source>
          <target state="translated">Если не указать идентификатор среды выполнения, для которой нужно выполнить сборку, команда <ph id="ph1">`dotnet build`</ph> создаст сборку только для идентификатора среды выполнения текущей системы.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>You can build your app for both target platforms with the commands:</source>
          <target state="translated">Чтобы выполнить сборку приложения для обеих целевых платформ, используйте следующие команды:</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>After you've debugged and tested the program, you can create the files to be deployed with your app for each platform that it targets by using the <ph id="ph1">`dotnet publish`</ph> command for both target platforms as follows:</source>
          <target state="translated">Отладив и протестировав программу, вы можете создать файлы, которые будут развертываться вместе с приложением для каждой целевой платформы с помощью команды <ph id="ph1">`dotnet publish`</ph> следующим образом:</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>This creates a release (rather than a debug) version of your app for each target platform.</source>
          <target state="translated">При этом будет создана версия выпуска приложения (а не отладочная версия) для каждой целевой платформы.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The resulting files are placed in a subdirectory named <ph id="ph1">`publish`</ph> that is in a subdirectory of your project's <ph id="ph2">`.\bin\release\netstandard1.6\&lt;runtime_identifier&gt;`</ph> subdirectory.</source>
          <target state="translated">Итоговые файлы помещаются в подкаталог с именем <ph id="ph1">`publish`</ph>, который находится в подкаталоге каталога <ph id="ph2">`.\bin\release\netstandard1.6\&lt;runtime_identifier&gt;`</ph> проекта.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Note that each subdirectory contains the complete set of files (both your app files and all .NET Core files) needed to launch your app.</source>
          <target state="translated">Обратите внимание на то, что каждый подкаталог содержит полный набор файлов (как файлов приложения, так и всех файлов .NET Core), необходимых для запуска приложения.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Along with your application's files, the publishing process emits a program database (.pdb) file that contains debugging information about your app.</source>
          <target state="translated">Помимо файлов приложения, процесс публикации создает файл базы данных программы (PDB), который содержит отладочную информацию о приложении.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The file is useful primarily for debugging exceptions; you can choose not to package it with your application's files.</source>
          <target state="translated">Он служит в первую очередь для отладки исключений. Вы можете не упаковывать его вместе с файлами приложения.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>The published files can be deployed in any way you'd like.</source>
          <target state="translated">Опубликованные файлы можно развернуть любым способом, который вам нравится.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>For example, you can package them in a zip file, use a simple <ph id="ph1">`copy`</ph> command, or deploy them with any installation package of your choice.</source>
          <target state="translated">Например, их можно упаковать в ZIP-файл, использовать простую команду <ph id="ph1">`copy`</ph> или развернуть их с помощью любого установочного пакета на ваш выбор.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The following is the complete <ph id="ph1">`csproj`</ph> file for this project.</source>
          <target state="translated">Ниже приведено полное содержимое файла <ph id="ph1">`csproj`</ph> для этого проекта.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>