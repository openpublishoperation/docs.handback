<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-6a73dd2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b9d53f32347572614a67e1cc432089f8e18d7cdf</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\tutorials\using-on-macos.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p1</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">54b17be3e66c9a0cef717b259886343f14b0d49b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">acd2f254bd1e1d70639dc18cf190134fb9b2c089</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Getting started with .NET Core on macOS</source>
          <target state="translated">Начало работы с .NET Core в Mac OS</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Getting started with .NET Core on macOS, using Visual Studio Code</source>
          <target state="translated">Начало работы с .NET Core в Mac OS с помощью Visual Studio Code</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Getting started with .NET Core on macOS, using Visual Studio Code</source>
          <target state="translated">Начало работы с .NET Core в Mac OS с помощью Visual Studio Code</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>by <bpt id="p1">[</bpt>Bertrand Le Roy<ept id="p1">](https://github.com/bleroy)</ept>,  <bpt id="p2">[</bpt>Phillip Carter<ept id="p2">](https://github.com/cartermp)</ept>, <bpt id="p3">[</bpt>Bill Wagner<ept id="p3">](https://github.com/billwagner)</ept></source>
          <target state="translated">Авторы: <bpt id="p1">[</bpt>Bertrand Le Roy<ept id="p1">](https://github.com/bleroy)</ept> (Бертран ле Рой), <bpt id="p2">[</bpt>Phillip Carter<ept id="p2">](https://github.com/cartermp)</ept> (Филипп Картер), <bpt id="p3">[</bpt>Bill Wagner<ept id="p3">](https://github.com/billwagner)</ept> (Билл Вагнер)</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Contributions by <bpt id="p1">[</bpt>Toni Solarin-Sodara<ept id="p1">](https://github.com/tsolarin)</ept></source>
          <target state="translated">При участии <bpt id="p1">[</bpt>Toni Solarin-Sodara<ept id="p1">](https://github.com/tsolarin)</ept> (Тони Соларин-Содара)</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This document provides a tour of the steps and workflow to create a .NET Core Solution using <bpt id="p1">[</bpt>Visual Studio Code<ept id="p1">](http://code.visualstudio.com)</ept>.</source>
          <target state="translated">В этом документе приводится обзор действий и рабочего процесса для создания решения .NET Core с помощью <bpt id="p1">[</bpt>Visual Studio Code<ept id="p1">](http://code.visualstudio.com)</ept>.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You'll learn how to create projects, create unit tests, use the debugging tools, and incorporate third-party libraries via <bpt id="p1">[</bpt>NuGet<ept id="p1">](http://nuget.org)</ept>.</source>
          <target state="translated">Вы узнаете, как создавать проекты и модульные тесты, использовать средства отладки и включать библиотеки сторонних разработчиков посредством <bpt id="p1">[</bpt>NuGet<ept id="p1">](http://nuget.org)</ept>.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This article uses Visual Studio Code on Mac OS.</source>
          <target state="translated">В этой статье используется Visual Studio Code в Mac OS.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Where there are differences, it points out the differences for the Windows platform.</source>
          <target state="translated">Где это необходимо, приводятся отличия для платформы Windows.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
          <target state="translated">Предварительные требования</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Before starting, you'll need to install the <bpt id="p1">[</bpt>.NET Core SDK<ept id="p1">](https://www.microsoft.com/net/core)</ept>, currently in a preview release.</source>
          <target state="translated">Прежде чем приступать к работе, необходимо установить <bpt id="p1">[</bpt>пакет SDK для .NET Core<ept id="p1">](https://www.microsoft.com/net/core)</ept>, в настоящее время доступный в виде предварительного выпуска.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The .NET Core SDK includes the latest release of the .NET Core framework and runtime.</source>
          <target state="translated">Пакет SDK для .NET Core содержит последний выпуск платформы и среды выполнения .NET Core.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You'll also need to install <bpt id="p1">[</bpt>Visual Studio Code<ept id="p1">](http://code.visualstudio.com)</ept>.</source>
          <target state="translated">Также необходимо установить <bpt id="p1">[</bpt>Visual Studio Code<ept id="p1">](http://code.visualstudio.com)</ept>.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>During the course of this article, you'll also install extensions that will improve the .NET Core development experience.</source>
          <target state="translated">В процессе изучения этой статьи вы также установите расширения, которые улучшат возможности разработки для .NET Core.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You can find the links to all of these at the <bpt id="p1">[</bpt>.NET home page<ept id="p1">](http://dot.net)</ept>.</source>
          <target state="translated">Ссылки на все эти компоненты можно найти на <bpt id="p1">[</bpt>домашней странице .NET<ept id="p1">](http://dot.net)</ept>.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Getting Started</source>
          <target state="translated">Начало работы</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The source for this tutorial is available on <bpt id="p1">[</bpt>GitHub<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/getting-started/golden)</ept>.</source>
          <target state="translated">Исходный код для этого учебника доступен на сайте <bpt id="p1">[</bpt>GitHub<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/getting-started/golden)</ept>.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Start Visual Studio Code.</source>
          <target state="translated">Запустите Visual Studio Code.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Press Ctrl + '<ph id="ph1">\`</ph>' (the back-quote character) to open an embedded terminal in VS Code.</source>
          <target state="translated">Нажмите клавиши CTRL+"<ph id="ph1">\`</ph>" (символ обратной кавычки), чтобы открыть встроенный терминал в VS Code.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>(Alternatively, you can use a separate terminal window, if you prefer).</source>
          <target state="translated">(Если хотите, вы можете использовать отдельное окно терминала.)</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>By the time we're done, you'll create three projects: a library project, tests for that library project, and a console application that makes use of the library.</source>
          <target state="translated">К моменту завершения учебника вы создадите три проекта: проект библиотеки, тесты для этого проекта и консольное приложение, использующее библиотеку.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You'll follow a standard folder structure for the three projects.</source>
          <target state="translated">Для этих трех проектов будет использоваться стандартная структура папок.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Following this standard folder structure means that the .NET Core SDK tools understand the relationship between your production code projects and your test code projects.</source>
          <target state="translated">Благодаря этому средствам из пакета SDK для .NET Core будет понятна взаимосвязь между проектами с рабочим кодом и проектами с тестовым кодом.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>That makes your development experience more productive.</source>
          <target state="translated">Это позволит повысить продуктивность при разработке.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Let's start by creating those folders.</source>
          <target state="translated">Начнем с создания папок.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In the terminal, create a 'golden' directory.</source>
          <target state="translated">В терминале создайте каталог golden.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Under that directory create <ph id="ph1">`src`</ph> and <ph id="ph2">`test`</ph> directories.</source>
          <target state="translated">В нем создайте каталоги <ph id="ph1">`src`</ph> и <ph id="ph2">`test`</ph>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Under <ph id="ph1">`src`</ph> create <ph id="ph2">`app`</ph> and <ph id="ph3">`library`</ph> directories.</source>
          <target state="translated">В каталоге <ph id="ph1">`src`</ph> создайте каталоги <ph id="ph2">`app`</ph> и <ph id="ph3">`library`</ph>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">`test`</ph> create a <ph id="ph2">`test-library`</ph> directory.</source>
          <target state="translated">В каталоге <ph id="ph1">`test`</ph> создайте каталог <ph id="ph2">`test-library`</ph>.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You can do this either using the terminal in VS code, or by clicking on the parent folder in VS Code and selecting the "New Folder" icon.</source>
          <target state="translated">Это можно сделать с помощью терминала в VS Code либо можно щелкнуть родительскую папку в VS Code и выбрать значок "Создать папку".</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>In VS Code, open the 'golden' directory.</source>
          <target state="translated">В VS Code откройте каталог golden.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This directory is the root of your solution.</source>
          <target state="translated">Это корневой каталог вашего решения.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Next, create a <ph id="ph1">`global.json`</ph> file in the root directory for your solution.</source>
          <target state="translated">Затем создайте файл <ph id="ph1">`global.json`</ph> в корневом каталоге решения.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The contents of <ph id="ph1">`global.json`</ph> are:</source>
          <target state="translated">Файл <ph id="ph1">`global.json`</ph> имеет следующее содержимое:</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>At this point, your directory tree should look like this:</source>
          <target state="translated">На данный момент дерево каталогов должно выглядеть так.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Writing the library</source>
          <target state="translated">Написание библиотеки</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Your next task is to create the library.</source>
          <target state="translated">Ваша следующая задача — создать библиотеку.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>In the terminal window (either the embedded terminal in VS code, or another terminal), cd to <ph id="ph1">`golden/src/library`</ph> and type the command <ph id="ph2">`dotnet new -t lib`</ph>.</source>
          <target state="translated">В окне терминала (встроенного терминала в VS Code или другого терминала) перейдите в каталог <ph id="ph1">`golden/src/library`</ph> и введите команду <ph id="ph2">`dotnet new -t lib`</ph>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This creates a library project, with two files: <ph id="ph1">`project.json`</ph> and <ph id="ph2">`Library.cs`</ph>.</source>
          <target state="translated">Будет создан проект библиотеки с двумя файлами: <ph id="ph1">`project.json`</ph> и <ph id="ph2">`Library.cs`</ph>.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`project.json`</ph> contains the following information:</source>
          <target state="translated"><ph id="ph1">`project.json`</ph> содержит следующие сведения:</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This library project will make use of JSON representation of objects, so you'll want to add a reference to the <ph id="ph1">`Newtonsoft.Json`</ph> NuGet package.</source>
          <target state="translated">В этом проекте библиотеки будет использоваться представление JSON объектов, поэтому необходимо добавить ссылку на пакет NuGet <ph id="ph1">`Newtonsoft.Json`</ph>.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>In<ph id="ph1">`project.json`</ph> add the latest pre-release version of the package as a dependency:</source>
          <target state="translated">В файле <ph id="ph1">`project.json`</ph> добавьте последнюю предварительную версию этого пакета в качестве зависимости:</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>After you've finished adding those dependencies, you need to install those packages into workspace.</source>
          <target state="translated">После добавления этих зависимостей вам необходимо установить пакеты в рабочем пространстве.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Run the <ph id="ph1">`dotnet restore`</ph> command to updates all dependencies, and write a <ph id="ph2">`project.lock.json`</ph> file in the project directory.</source>
          <target state="translated">Выполните команду <ph id="ph1">`dotnet restore`</ph>, чтобы обновить все зависимости, и запишите файл <ph id="ph2">`project.lock.json`</ph> в каталог проекта.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>This file contains the full dependency tree of all the dependencies in your project.</source>
          <target state="translated">Этот файл содержит полное дерево зависимостей со всеми зависимостями в проекте.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>You don't need to read this file, it's used by tools in the .NET Core SDK.</source>
          <target state="translated">Считывать этот файл не нужно; он используется средствами из пакета SDK для .NET Core.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Now, let's update the C# code.</source>
          <target state="translated">Теперь обновим код на языке C#.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Let's create a <ph id="ph1">`Thing`</ph> class that contains one public method.</source>
          <target state="translated">Давайте создадим класс <ph id="ph1">`Thing`</ph>, который содержит один общий метод.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>This method will return the sum of two numbers, but will do so by converting that number to a JSON string, and then deserializing it.</source>
          <target state="translated">Этот метод будет возвращать сумму двух чисел, но для этого он будет преобразовывать число в строку JSON, а затем десериализовывать ее.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Rename the file <ph id="ph1">`Library.cs`</ph> to <ph id="ph2">`Thing.cs`</ph>.</source>
          <target state="translated">Переименуйте файл <ph id="ph1">`Library.cs`</ph> в <ph id="ph2">`Thing.cs`</ph>.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Then, replace the existing code (for the template-generated Class1) with the following:</source>
          <target state="translated">Затем замените существующий код (шаблонного класса Class1) следующим кодом:</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>This makes use of a number of modern C# features, such as static usings, expression bodied members, and interpolated strings, that you can learn about in the <bpt id="p1">[</bpt>Learn C#<ept id="p1">](../../csharp/index.md)</ept> section.</source>
          <target state="translated">В нем используется ряд современных возможностей C#, таких как статические операторы using, члены, воплощающие выражения, и интерполированные строки. Сведения о них можно получить в разделе <bpt id="p1">[</bpt>Знакомство с C#<ept id="p1">](../../csharp/index.md)</ept>.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Now that you've updated the code, you can build the library using <ph id="ph1">`dotnet build`</ph>.</source>
          <target state="translated">Теперь, когда вы обновили код, вы можете выполнить сборку библиотеки с помощью команды <ph id="ph1">`dotnet build`</ph>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>You now have a built <ph id="ph1">`library.dll`</ph> file under <ph id="ph2">`golden/src/library/bin/Debug/netstandard1.6`</ph>.</source>
          <target state="translated">Теперь у вас есть собранный файл <ph id="ph1">`library.dll`</ph> в каталоге <ph id="ph2">`golden/src/library/bin/Debug/netstandard1.6`</ph>.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Writing the test project</source>
          <target state="translated">Написание тестового проекта</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Let's build a test project for this library that you've build.</source>
          <target state="translated">Давайте создадим тестовый проект для библиотеки, сборку которой вы выполнили.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Cd into the <ph id="ph1">`test/test-library`</ph> directory.</source>
          <target state="translated">Перейдите в каталог <ph id="ph1">`test/test-library`</ph>.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Run <ph id="ph1">`dotnet new -t xunittest`</ph> to create a new test project.</source>
          <target state="translated">Выполните команду <ph id="ph1">`dotnet new -t xunittest`</ph>, чтобы создать тестовый проект.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>You'll need to add a dependency node for the library you wrote in the steps above.</source>
          <target state="translated">Вам потребуется добавить узел зависимости для библиотеки, которую вы создали в предыдущих шагах.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Open <ph id="ph1">`project.json`</ph> and update the dependencies section to the following (including the <ph id="ph2">`library`</ph> node, which is the last node below):</source>
          <target state="translated">Откройте файл <ph id="ph1">`project.json`</ph> и измените раздел зависимостей следующим образом (включая узел <ph id="ph2">`library`</ph>, который является последним узлом ниже):</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`library`</ph> node specifies that this dependency should resolve to a project in the current workspace.</source>
          <target state="translated">Узел <ph id="ph1">`library`</ph> указывает, что эта зависимость должна разрешаться в проект в текущем рабочем пространстве.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Without explicitly specifying this, it's possible that the test project would build against a NuGet package of the same name.</source>
          <target state="translated">Если явно не указать это, существует возможность того, что сборка тестового проекта будет выполнена для пакета NuGet с тем же именем.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Now that the dependencies have been properly configured, let's create the tests for your library.</source>
          <target state="translated">Теперь, когда зависимости правильно настроены, давайте создадим тесты для библиотеки.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Open <ph id="ph1">`Tests.cs`</ph> and replace its contents with the following code:</source>
          <target state="translated">Откройте файл <ph id="ph1">`Tests.cs`</ph> и замените его содержимое следующим кодом:</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Now, run <ph id="ph1">`dotnet restore`</ph>, <ph id="ph2">`dotnet build`</ph> and <ph id="ph3">`dotnet test`</ph>.</source>
          <target state="translated">Теперь выполните команды <ph id="ph1">`dotnet restore`</ph>, <ph id="ph2">`dotnet build`</ph> и <ph id="ph3">`dotnet test`</ph>.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The xUnit console test runner will run the one test, and report that it is passing.</source>
          <target state="translated">Консольное средство выполнения тестов xUnit проведет один тест и сообщит о том, что он пройден.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Writing the console app</source>
          <target state="translated">Написание консольного приложения</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>In your terminal, cd to the <ph id="ph1">`golden/src/app`</ph> directory.</source>
          <target state="translated">В терминале перейдите в каталог <ph id="ph1">`golden/src/app`</ph>.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Run <ph id="ph1">`dotnet new`</ph> to create a new console application.</source>
          <target state="translated">Выполните команду <ph id="ph1">`dotnet new`</ph>, чтобы создать консольное приложение.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Your console application depends on the library you built and tested in the previous steps.</source>
          <target state="translated">Консольное приложение использует библиотеку, которую вы создали и протестировали в предыдущих шагах.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>You need to indicate that by editing <ph id="ph1">`project.json`</ph> to add this dependency.</source>
          <target state="translated">Это необходимо указать, отредактировав файл <ph id="ph1">`project.json`</ph> и добавив соответствующую зависимость.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">`dependencies`</ph> node, add the <ph id="ph2">`library`</ph> node as follows:</source>
          <target state="translated">В узле <ph id="ph1">`dependencies`</ph> добавьте узел <ph id="ph2">`library`</ph> следующим образом:</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`project`</ph> node is important here, as it was in the test library.</source>
          <target state="translated">Узел <ph id="ph1">`project`</ph> важен здесь, так же как и в тестовой библиотеке.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>It indicates that this is a project in the current solution, and not a NuGet package.</source>
          <target state="translated">Он указывает на то, что это проект в текущем решении, а не пакет NuGet.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Run <ph id="ph1">`dotnet restore`</ph> to restore all dependencies.</source>
          <target state="translated">Выполните команду <ph id="ph1">`dotnet restore`</ph>, чтобы восстановить все зависимости.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Open <ph id="ph1">`program.cs`</ph> and replace the contents of the <ph id="ph2">`Main`</ph> method with this line:</source>
          <target state="translated">Откройте файл <ph id="ph1">`program.cs`</ph> и замените содержимое метода <ph id="ph2">`Main`</ph> следующей строкой:</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>You'll need to add a couple <ph id="ph1">`using`</ph> directives to the top of the file:</source>
          <target state="translated">В начало файла необходимо добавить пару директив <ph id="ph1">`using`</ph>:</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Then, run <ph id="ph1">`dotnet build`</ph>.</source>
          <target state="translated">Затем выполните команду <ph id="ph1">`dotnet build`</ph>.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>That creates the assemblies, and you can type <ph id="ph1">`dotnet run`</ph> to run the executable.</source>
          <target state="translated">Она создаст сборки, после чего вы можете ввести <ph id="ph1">`dotnet run`</ph>, чтобы запустить исполняемый файл.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Debugging your application</source>
          <target state="translated">Отладка приложения</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>You can debug your code in VS Code using the C# extension.</source>
          <target state="translated">Вы можете отладить код в VS Code с помощью расширения C#.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>You install this extension by pressing <ph id="ph1">`F1`</ph> to open the VS Code palette.</source>
          <target state="translated">Для установки этого расширения нажмите клавишу <ph id="ph1">`F1`</ph>, чтобы открыть палитру VS Code.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Type <ph id="ph1">`ext install`</ph> to see the list of extensions.</source>
          <target state="translated">Введите команду <ph id="ph1">`ext install`</ph>, чтобы просмотреть список расширений.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Select the C# extension.</source>
          <target state="translated">Выберите расширение C#.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>(More details are available on the <bpt id="p1">[</bpt>Visual Studio Code C# Extension documentation<ept id="p1">](https://github.com/OmniSharp/omnisharp-vscode/blob/master/debugger.md)</ept> page.)</source>
          <target state="translated">(Дополнительные сведения см. на странице <bpt id="p1">[</bpt>документации по расширению C# для Visual Studio Code<ept id="p1">](https://github.com/OmniSharp/omnisharp-vscode/blob/master/debugger.md)</ept>.)</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>After you install the extension, VS Code will ask that you restart the application to load the new extension.</source>
          <target state="translated">После установки расширения в VS Code появится запрос на перезапуск приложения для загрузки нового расширения.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Once the extension is installed, you can open the debugger tab (see figure).</source>
          <target state="translated">После установки расширения можно открыть вкладку отладчика (см. рисунок).</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>VS Code Debugger</source>
          <target state="translated">Отладчик VS Code</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>When you start the debugger, VS Code will instruct you to configure the debugger.</source>
          <target state="translated">После запуска отладчика в VS Code появится указание настроить отладчик.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>When you do, it creates a <ph id="ph1">`.vscode`</ph> directory with two files: <ph id="ph2">`tasks.json`</ph> and <ph id="ph3">`launch.json`</ph>.</source>
          <target state="translated">При настройке создается каталог <ph id="ph1">`.vscode`</ph> с двумя файлами: <ph id="ph2">`tasks.json`</ph> и <ph id="ph3">`launch.json`</ph>.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>These two files control the debugger configuration.</source>
          <target state="translated">Эти два файла определяют конфигурацию отладчика.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>In most projects, this directory is not included in source control.</source>
          <target state="translated">В большинстве проектов этот каталог не включается в систему управления исходным кодом.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>It is included in the sample associated with this walk through so you can see the edits you need to make.</source>
          <target state="translated">Он включен в образец, связанный с этим пошаговым руководством, чтобы вы видели изменения, которые необходимо внести.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Your solution contains multiple projects, so you'll want to modify each of these files to perform the correct commands.</source>
          <target state="translated">Ваше решение содержит несколько проектов, поэтому вам потребуется изменить каждый из этих файлов для выполнения правильных команд.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>First, open <ph id="ph1">`tasks.json`</ph>.</source>
          <target state="translated">Сначала откройте файл <ph id="ph1">`tasks.json`</ph>.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The default build task runs <ph id="ph1">`dotnet build`</ph> in the workspace source directory.</source>
          <target state="translated">Задача сборки по умолчанию выполняет команду <ph id="ph1">`dotnet build`</ph> в исходном каталоге рабочего пространства.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Instead, you want to run it in the <ph id="ph1">`src/app`</ph> directory.</source>
          <target state="translated">Вместо этого ее можно выполнить в каталоге <ph id="ph1">`src/app`</ph>.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>You need to add a <ph id="ph1">`options`</ph> node to set the current working directory to that:</source>
          <target state="translated">Чтобы задать его в качестве текущего рабочего каталога, необходимо добавить узел <ph id="ph1">`options`</ph>:</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Next, you'll need to open <ph id="ph1">`launch.json`</ph> and update the program path.</source>
          <target state="translated">Далее необходимо открыть файл <ph id="ph1">`launch.json`</ph> и изменить путь к программе.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>You'll see a node under "configurations" that describes the program.</source>
          <target state="translated">В разделе configurations вы увидите узел, описывающий программу.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>You'll see:</source>
          <target state="translated">Он выглядит так.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>You'll change this to:</source>
          <target state="translated">Его следует изменить следующим образом:</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>If you are running on Windows, you'll need to update the Application's <ph id="ph1">`project.json`</ph> (in the <ph id="ph2">`src/app`</ph> directory) to generate portable PDB files (this happens by default on Mac OSX and Linux).</source>
          <target state="translated">При использовании ОС Windows необходимо изменить файл <ph id="ph1">`project.json`</ph> приложения (в каталоге <ph id="ph2">`src/app`</ph>), чтобы создать переносимые файлы PDB (в Mac OS X и Linux это происходит автоматически).</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Add the <ph id="ph1">`debugType`</ph> node inside <ph id="ph2">`buildOptions`</ph>.</source>
          <target state="translated">Добавьте узел <ph id="ph1">`debugType`</ph> внутри <ph id="ph2">`buildOptions`</ph>.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>You'll need to add the <ph id="ph1">`debugType`</ph> node in <ph id="ph2">`project.json`</ph> for both the <ph id="ph3">`src/app`</ph> and <ph id="ph4">`src/library`</ph> folders.</source>
          <target state="translated">Узел <ph id="ph1">`debugType`</ph> необходимо добавить в <ph id="ph2">`project.json`</ph> как для папки <ph id="ph3">`src/app`</ph>, так и для папки <ph id="ph4">`src/library`</ph>.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Set a breakpoint at the <ph id="ph1">`WriteLine`</ph> statement in <ph id="ph2">`Main`</ph>.</source>
          <target state="translated">Установите точку останова в операторе <ph id="ph1">`WriteLine`</ph> в методе <ph id="ph2">`Main`</ph>.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>You do this by pressing the <ph id="ph1">`F9`</ph> key, or by clicking the mouse in the left margin on the line you want the breakpoint.</source>
          <target state="translated">Для этого нажмите клавишу <ph id="ph1">`F9`</ph> или щелкните мышью в левом поле напротив строки, в которой нужно установить точку останова.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Open the debugger by pressing the debug icon on the left of the VS Code screen (see figure).</source>
          <target state="translated">Откройте отладчик, щелкнув значок отладки в левой части экрана VS Code (см. рисунок).</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Then, press the Play button to start the application under the debugger.</source>
          <target state="translated">После этого нажмите кнопку "Воспроизвести", чтобы запустить приложение в режиме отладки.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>You should hit the breakpoint.</source>
          <target state="translated">Вы должны достичь точки останова.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Step into the <ph id="ph1">`Get`</ph> method and make sure that you have passed in the correct arguments.</source>
          <target state="translated">Выполните метод <ph id="ph1">`Get`</ph> по шагам и убедитесь в том, что переданы правильные аргументы.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Make sure that the answer is actually 42.</source>
          <target state="translated">Проверьте, равен ли результат 42.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>