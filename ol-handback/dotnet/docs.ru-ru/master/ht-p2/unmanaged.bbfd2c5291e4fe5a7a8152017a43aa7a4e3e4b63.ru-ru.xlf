<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-eac019f" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">692916bc5a9afd55dc4e3d0249386d2e3750895f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\garbagecollection\unmanaged.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p2</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f24afcc5d03776195e2a0871ffacc3da8df6e696</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">19a2bb7df3a9573ffd2ca00bf5181e0d368e3656</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Cleaning up unmanaged resources</source>
          <target state="translated">Очистка неуправляемых ресурсов</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Cleaning up unmanaged resources</source>
          <target state="translated">Очистка неуправляемых ресурсов</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Cleaning up unmanaged resources</source>
          <target state="translated">Очистка неуправляемых ресурсов</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For the majority of the objects that your app creates, you can rely on the .NET garbage collector to handle memory management.</source>
          <target state="translated">Для большинства объектов, создаваемых приложением, управление памятью осуществляется сборщиком мусора .NET.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>However, when you create objects that include unmanaged resources, you must explicitly release those resources when you finish using them in your app.</source>
          <target state="translated">Однако при создании объектов, которые включают неуправляемые ресурсы, после использования неуправляемых ресурсов в приложении необходимо освобождать их явно.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The most common types of unmanaged resource are objects that wrap operating system resources, such as files, windows, network connections, or database connections.</source>
          <target state="translated">Основным типом неуправляемых ресурсов являются объекты, заключающие в себе ресурсы операционной системы, такие как файлы, окна, сетевые подключения и подключения к базам данным.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Although the garbage collector is able to track the lifetime of an object that encapsulates an unmanaged resource, it doesn't know how to release and clean up the unmanaged resource.</source>
          <target state="translated">Хотя сборщик мусора может отслеживать время жизни управляемого объекта, инкапсулирующего неуправляемые ресурсы, он не имеет сведений о том, как освобождать такие ресурсы.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If your types use unmanaged resources, you should do the following:</source>
          <target state="translated">Если ваши типы используют неуправляемые ресурсы, необходимо выполнить следующие действия:</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Implement the dispose pattern.</source>
          <target state="translated">Реализуйте шаблон удаления.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This requires that you provide an <bpt id="p1">[</bpt>IDisposable.Dispose<ept id="p1">](xref:System.IDisposable.Dispose)</ept> implementation to enable the deterministic release of unmanaged resources.</source>
          <target state="translated">Для этого необходимо реализовать интерфейс <bpt id="p1">[</bpt>IDisposable.Dispose<ept id="p1">](xref:System.IDisposable.Dispose)</ept> для детерминированного освобождения неуправляемых ресурсов.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A consumer of your type calls <bpt id="p1">[</bpt>Dispose<ept id="p1">](xref:System.IDisposable.Dispose)</ept> when the object (and the resources it uses) is no longer needed.</source>
          <target state="translated">Объект-получатель типа вызывает метод <bpt id="p1">[</bpt>Dispose<ept id="p1">](xref:System.IDisposable.Dispose)</ept>, когда объект и используемые им ресурсы больше не нужны.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Dispose<ept id="p1">](xref:System.IDisposable.Dispose)</ept> method immediately releases the unmanaged resources.</source>
          <target state="translated">Метод <bpt id="p1">[</bpt>Dispose<ept id="p1">](xref:System.IDisposable.Dispose)</ept> немедленно освобождает неуправляемые ресурсы.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Provide for your unmanaged resources to be released in the event that a consumer of your type forgets to call <bpt id="p1">[</bpt>Dispose<ept id="p1">](xref:System.IDisposable.Dispose)</ept>.</source>
          <target state="translated">Предусмотрите освобождение неуправляемых ресурсов, в случае если метод <bpt id="p1">[</bpt>Dispose<ept id="p1">](xref:System.IDisposable.Dispose)</ept> не будет вызван объектом-получателем.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>There are two ways to do this:</source>
          <target state="translated">Это можно сделать двумя способами.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Use a safe handle to wrap your unmanaged resource.</source>
          <target state="translated">Используйте безопасный дескриптор в качестве оболочки для неуправляемого ресурса.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This is the recommended technique.</source>
          <target state="translated">Это рекомендуемая методика.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Safe handles are derived from the <bpt id="p1">[</bpt>System.Runtime.InteropServices.SafeHandle<ept id="p1">](xref:System.Runtime.InteropServices.SafeHandle)</ept> class and include a robust <bpt id="p2">[</bpt>Finalize<ept id="p2">](xref:System.Object.Finalize)</ept> method.</source>
          <target state="translated">Безопасные дескрипторы являются производными от класса <bpt id="p1">[</bpt>System.Runtime.InteropServices.SafeHandle<ept id="p1">](xref:System.Runtime.InteropServices.SafeHandle)</ept>. Они включают надежный метод <bpt id="p2">[</bpt>Finalize<ept id="p2">](xref:System.Object.Finalize)</ept>.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>When you use a safe handle, you simply implement the <bpt id="p1">[</bpt>IDisposable<ept id="p1">](xref:System.IDisposable)</ept> interface and call your safe handle's <bpt id="p2">[</bpt>Dispose<ept id="p2">](xref:System.IDisposable.Dispose)</ept> method in your <bpt id="p3">[</bpt>IDisposable.Dispose<ept id="p3">](xref:System.IDisposable.Dispose)</ept> implementation.</source>
          <target state="translated">При использовании безопасного дескриптора нужно просто реализовать интерфейс <bpt id="p1">[</bpt>IDisposable<ept id="p1">](xref:System.IDisposable)</ept> и вызвать метод <bpt id="p2">[</bpt>Dispose<ept id="p2">](xref:System.IDisposable.Dispose)</ept> этого безопасного дескриптора в реализации <bpt id="p3">[</bpt>IDisposable.Dispose<ept id="p3">](xref:System.IDisposable.Dispose)</ept>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The safe handle's finalizer is called automatically by the garbage collector if its <bpt id="p1">[</bpt>Dispose<ept id="p1">](xref:System.IDisposable.Dispose)</ept> method is not called.</source>
          <target state="translated">Метод завершения безопасного дескриптора автоматически вызывается сборщиком мусора, если не вызывается метод <bpt id="p1">[</bpt>Dispose<ept id="p1">](xref:System.IDisposable.Dispose)</ept>.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>—or—</source>
          <target state="translated">—или—</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Override the <bpt id="p1">[</bpt>Object.Finalize<ept id="p1">](xref:System.Object.Finalize)</ept> method.</source>
          <target state="translated">Переопределите метод <bpt id="p1">[</bpt>Object.Finalize<ept id="p1">](xref:System.Object.Finalize)</ept>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Finalization enables the non-deterministic release of unmanaged resources when the consumer of a type fails to call <bpt id="p1">[</bpt>IDisposable.Dispose<ept id="p1">](xref:System.IDisposable.Dispose)</ept> to dispose of them deterministically.</source>
          <target state="translated">Завершение включает недетерминированное освобождение неуправляемых ресурсов, когда объекту-получателю типа не удается вызвать метод <bpt id="p1">[</bpt>IDisposable.Dispose<ept id="p1">](xref:System.IDisposable.Dispose)</ept> для их детерминированного удаления.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>However, because object finalization can be a complex and error-prone operation, we recommend that you use a safe handle instead of providing your own finalizer.</source>
          <target state="translated">Однако поскольку завершение объекта может быть сложной операцией с высокой вероятностью ошибок, рекомендуется использовать безопасный дескриптор вместо указания собственного метода завершения.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Consumers of your type can then call your <bpt id="p1">[</bpt>IDisposable.Dispose<ept id="p1">](xref:System.IDisposable.Dispose)</ept> implementation directly to free memory used by unmanaged resources.</source>
          <target state="translated">Объекты-получатели типа могут затем вызвать реализацию <bpt id="p1">[</bpt>IDisposable.Dispose<ept id="p1">](xref:System.IDisposable.Dispose)</ept> непосредственно для освобождения памяти, используемой неуправляемыми ресурсами.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>When you properly implement a <bpt id="p1">[</bpt>Dispose<ept id="p1">](xref:System.IDisposable.Dispose)</ept> method, either your safe handle's <bpt id="p2">[</bpt>Finalize<ept id="p2">](xref:System.Object.Finalize)</ept> method or your own override of the <bpt id="p3">[</bpt>Object.Finalize<ept id="p3">](xref:System.Object.Finalize)</ept> method becomes a safeguard to clean up resources in the event that the <bpt id="p4">[</bpt>Dispose<ept id="p4">](xref:System.IDisposable.Dispose)</ept> method is not called.</source>
          <target state="translated">При правильной реализации метода <bpt id="p1">[</bpt>Dispose<ept id="p1">](xref:System.IDisposable.Dispose)</ept> метод <bpt id="p2">[</bpt>Finalize<ept id="p2">](xref:System.Object.Finalize)</ept> или переопределенная версия метода <bpt id="p3">[</bpt>Object.Finalize<ept id="p3">](xref:System.Object.Finalize)</ept> становятся резервным средством очистки ресурсов в случае, если не вызывается метод <bpt id="p4">[</bpt>Dispose<ept id="p4">](xref:System.IDisposable.Dispose)</ept>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In This Section</source>
          <target state="translated">Содержание</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Implementing a dispose method<ept id="p1">](implementing-dispose.md)</ept> - Describes how to implement the dispose pattern for releasing unmanaged resources.</source>
          <target state="translated"><bpt id="p1">[</bpt>Реализация метода dispose<ept id="p1">](implementing-dispose.md)</ept> — описание способа реализации шаблона удаления для освобождения неуправляемых ресурсов.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Using objects that implement IDisposable<ept id="p1">](using-objects.md)</ept> - Describes how consumers of a type ensure that its Dispose implementation is called.</source>
          <target state="translated"><bpt id="p1">[</bpt>Использование объектов, реализующих IDisposable<ept id="p1">](using-objects.md)</ept> — описание того, как объекты-получатели типа обеспечивают вызов своей реализации метода Dispose.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>We recommend using the C# using statement or the Visual Basic Using statement to do this.</source>
          <target state="translated">Для этого рекомендуется использовать оператор using (C# ) или Using (Visual Basic).</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Reference</source>
          <target state="translated">Ссылки</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.IDisposable<ept id="p1">](xref:System.IDisposable)</ept> - Defines the <ph id="ph1">`Dispose`</ph> method for releasing unmanaged resources.</source>
          <target state="translated"><bpt id="p1">[</bpt>System.IDisposable<ept id="p1">](xref:System.IDisposable)</ept> — определяет метод <ph id="ph1">`Dispose`</ph> для освобождения неуправляемых ресурсов.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Object.Finalize<ept id="p1">](xref:System.Object.Finalize)</ept> - Provides for object finalization if unmanaged resources are not released by the <ph id="ph1">`Dispose`</ph> method.</source>
          <target state="translated"><bpt id="p1">[</bpt>Object.Finalize<ept id="p1">](xref:System.Object.Finalize)</ept> — предусматривает завершение объекта, если неуправляемые ресурсы не освобождены методом <ph id="ph1">`Dispose`</ph>.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>GC.SuppressFinalize<ept id="p1">](xref:System.GC#System_GC_SuppressFinalize_System_Object_)</ept> - Suppresses finalization.</source>
          <target state="translated"><bpt id="p1">[</bpt>GC.SuppressFinalize<ept id="p1">](xref:System.GC#System_GC_SuppressFinalize_System_Object_)</ept> — отключает завершение.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This method is customarily called from a <ph id="ph1">`Dispose`</ph> method to prevent a finalizer from executing.</source>
          <target state="translated">Этот метод обычно вызывается из метода <ph id="ph1">`Dispose`</ph>, чтобы не допустить выполнения метода завершения.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>