<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">15e02fbc023db9ae2f3ee9f40598faa7c9c027a0</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\async\control-flow-in-async-programs.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">47eb82f5369b89caf2e6f4c88e9053625fa7905e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">92f3041b31405b2b386c0e3bc9a68023e49ebfc2</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Control Flow in Async Programs (Visual Basic) | Microsoft Docs</source>
          <target state="translated">Управление ходом выполнения в асинхронных программах (Visual Basic) | Документы Microsoft</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Control Flow in Async Programs (Visual Basic)</source>
          <target state="translated">Поток управления в асинхронных программах (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You can write and maintain asynchronous programs more easily by using the <ph id="ph1">`Async`</ph> and <ph id="ph2">`Await`</ph> keywords.</source>
          <target state="translated">Можно написать и более легко поддерживать асинхронные программы с помощью <ph id="ph1">`Async`</ph> и <ph id="ph2">`Await`</ph> ключевые слова.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>However, the results might surprise you if you don't understand how your program operates.</source>
          <target state="translated">Однако результаты могут оказаться неожиданными Если вы не понимаете, как работает программа.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This topic traces the flow of control through a simple async program to show you when control moves from one method to another and what information is transferred each time.</source>
          <target state="translated">Этот раздел трассировки, передачи потока управления через простой асинхронной программы, чтобы показать, когда элемент управления перемещается из одного метода другим и какие данные каждый раз.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Async`</ph> and <ph id="ph2">`Await`</ph> keywords were introduced in Visual Studio 2012.</source>
          <target state="translated">Ключевые слова <ph id="ph1">`Async`</ph> и <ph id="ph2">`Await`</ph> появились в Visual Studio 2012.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>In general, you mark methods that contain asynchronous code with the <bpt id="p1">[</bpt>Async<ept id="p1">](../../../../visual-basic/language-reference/modifiers/async.md)</ept> modifier.</source>
          <target state="translated">В общем случае пометить методы, содержащие асинхронного кода с <bpt id="p1">[</bpt>Async<ept id="p1">](../../../../visual-basic/language-reference/modifiers/async.md)</ept> модификатор.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In a method that's marked with an async modifier, you can use an <bpt id="p1">[</bpt>Await (Visual Basic)<ept id="p1">](../../../../visual-basic/language-reference/operators/await-operator.md)</ept> operator to specify where the method pauses to wait for a called asynchronous process to complete.</source>
          <target state="translated">В метод, помеченный с помощью модификатора async, можно использовать <bpt id="p1">[</bpt>Await (Visual Basic)<ept id="p1">](../../../../visual-basic/language-reference/operators/await-operator.md)</ept> оператор, чтобы указать, где метод приостанавливает для ожидания завершения вызванного асинхронного процесса.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Asynchronous Programming with Async and Await (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/index.md)</ept>.</source>
          <target state="translated">Дополнительные сведения см. в разделе <bpt id="p1">[</bpt>асинхронное программирование с использованием Async и Await (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/index.md)</ept>.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The following example uses async methods to download the contents of a specified website as a string and to display the length of the string.</source>
          <target state="translated">В следующем примере асинхронные методы для загрузки содержимого веб-сайт, указанный как строка и отображения длину строки.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The example contains the following two methods.</source>
          <target state="translated">Пример содержит два метода.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`startButton_Click`</ph>, which calls <ph id="ph2">`AccessTheWebAsync`</ph> and displays the result.</source>
          <target state="translated"><ph id="ph1">`startButton_Click`</ph>, который вызывает метод <ph id="ph2">`AccessTheWebAsync`</ph> и отображает результат.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`AccessTheWebAsync`</ph>, which downloads the contents of a website as a string and returns the length of the string.</source>
          <target state="translated"><ph id="ph1">`AccessTheWebAsync`</ph>, который загружает содержимое веб-сайта в виде строки и возвращает длину строки.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`AccessTheWebAsync`</ph> uses an asynchronous &lt;xref:System.Net.Http.HttpClient&gt; method, &lt;xref:System.Net.Http.HttpClient.GetStringAsync%28System.String%29&gt;, to download the contents.</source>
          <target state="translated"><ph id="ph1">`AccessTheWebAsync`</ph>использует асинхронную &lt;xref:System.Net.Http.HttpClient&gt;метод &lt;xref:System.Net.Http.HttpClient.GetStringAsync%28System.String%29&gt;, чтобы загрузить содержимое.&lt;/xref:System.Net.Http.HttpClient.GetStringAsync%28System.String%29&gt; &lt;/xref:System.Net.Http.HttpClient&gt;</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Numbered display lines appear at strategic points throughout the program to help you understand how the program runs and to explain what happens at each point that is marked.</source>
          <target state="translated">Нумерация отображаемые строки отображаются в стратегических точках в программе помогут вам понять, как работает программа и объясняется, что происходит на каждом этапе, который отмечен.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The display lines are labeled "ONE" through "SIX."</source>
          <target state="translated">Отображение линии обозначаются «Один» до «ШЕСТЬ.»</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The labels represent the order in which the program reaches these lines of code.</source>
          <target state="translated">Метки представляют порядок, в котором программа достигает этих строк кода.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The following code shows an outline of the program.</source>
          <target state="translated">В следующем коде показано структуры программы.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Each of the labeled locations, "ONE" through "SIX," displays information about the current state of the program.</source>
          <target state="translated">Каждый из расположения с меткой, «Один» до «ШЕСТЬ,» отображает сведения о текущем состоянии программы.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The following output is produced.</source>
          <target state="translated">Получается следующий результат.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Set Up the Program</source>
          <target state="translated">Настроить программу</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>You can download the code that this topic uses from MSDN, or you can build it yourself.</source>
          <target state="translated">Код, который используется в этом разделе можно загрузить с сайта MSDN, или можно выполнить его самостоятельно.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>To run the example, you must have Visual Studio 2012 or newer and  the .NET Framework 4.5 or newer installed on your computer.</source>
          <target state="translated">Чтобы выполнить этот пример, необходимо иметь Visual Studio 2012 или более поздней версии и платформы .NET Framework 4.5 или более новая версия вашего компьютера.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Download the Program</source>
          <target state="translated">Загрузка программы</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>You can download the application for this topic from <bpt id="p1">[</bpt>Async Sample: Control Flow in Async Programs<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=255285)</ept>.</source>
          <target state="translated">Можно загрузить приложение из этого раздела <bpt id="p1">[</bpt>образец Async: поток управления в асинхронных программах<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=255285)</ept>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The following steps open and run the program.</source>
          <target state="translated">Далее откройте и запустите программу.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Unzip the downloaded file, and then start Visual Studio.</source>
          <target state="translated">Распакуйте загруженный файл, а затем запустите Visual Studio.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>On the menu bar, choose <bpt id="p1">**</bpt>File<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Open<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Project/Solution<ept id="p3">**</ept>.</source>
          <target state="translated">В строке меню выберите <bpt id="p1">**</bpt>Файл<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Открыть<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Проект/Решение<ept id="p3">**</ept>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Navigate to the folder that holds the unzipped sample code, open the solution (.sln) file, and then choose the F5 key to build and run the project.</source>
          <target state="translated">Перейдите к папке, содержащий распакованную образец кода, откройте файл решения (SLN-файл) и нажмите клавишу F5 для построения и запуска проекта.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Build the Program Yourself</source>
          <target state="translated">Самостоятельное построение программы</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The following Windows Presentation Foundation (WPF) project contains the code example for this topic.</source>
          <target state="translated">Следующий проект Windows Presentation Foundation (WPF) содержит пример кода для этой темы.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>To run the project, perform the following steps:</source>
          <target state="translated">Чтобы запустить проект, выполните следующие действия.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Start Visual Studio.</source>
          <target state="translated">Запустите Visual Studio.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>On the menu bar, choose <bpt id="p1">**</bpt>File<ept id="p1">**</ept>, <bpt id="p2">**</bpt>New<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Project<ept id="p3">**</ept>.</source>
          <target state="translated">В строке меню выберите <bpt id="p1">**</bpt>Файл<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Создать<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Проект<ept id="p3">**</ept>.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>New Project<ept id="p1">**</ept> dialog box opens.</source>
          <target state="translated">Откроется диалоговое окно <bpt id="p1">**</bpt>Новый проект<ept id="p1">**</ept> .</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Installed Templates<ept id="p1">**</ept> pane, choose <bpt id="p2">**</bpt>Visual Basic<ept id="p2">**</ept>, and then choose <bpt id="p3">**</bpt>WPF Application<ept id="p3">**</ept> from the list of project types.</source>
          <target state="translated">В <bpt id="p1">**</bpt>установленные шаблоны<ept id="p1">**</ept> область, выберите <bpt id="p2">**</bpt>Visual Basic<ept id="p2">**</ept>и нажмите кнопку <bpt id="p3">**</bpt>приложение WPF<ept id="p3">**</ept> в списке типов проектов.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Enter <ph id="ph1">`AsyncTracer`</ph> as the name of the project, and then choose the <bpt id="p1">**</bpt>OK<ept id="p1">**</ept> button.</source>
          <target state="translated">Введите <ph id="ph1">`AsyncTracer`</ph> как имя проекта, а затем выберите <bpt id="p1">**</bpt>ОК<ept id="p1">**</ept> кнопки.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The new project appears in <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>.</source>
          <target state="translated">Появится новый проект в <bpt id="p1">**</bpt>обозревателе решений<ept id="p1">**</ept>.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>In the Visual Studio Code Editor, choose the <bpt id="p1">**</bpt>MainWindow.xaml<ept id="p1">**</ept> tab.</source>
          <target state="translated">В редакторе кода Visual Studio перейдите на вкладку <bpt id="p1">**</bpt>MainWindow.xaml<ept id="p1">**</ept> .</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If the tab isn’t visible, open the shortcut menu for MainWindow.xaml in <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, and then choose <bpt id="p2">**</bpt>View Code<ept id="p2">**</ept>.</source>
          <target state="translated">Если вкладка не отображается, откройте контекстное меню для MainWindow.xaml в <bpt id="p1">**</bpt>обозревателе решений<ept id="p1">**</ept>, а затем выберите <bpt id="p2">**</bpt>Просмотр кода<ept id="p2">**</ept>.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>XAML<ept id="p1">**</ept> view of MainWindow.xaml, replace the code with the following code.</source>
          <target state="translated">В <bpt id="p1">**</bpt>XAML<ept id="p1">**</ept> Просмотр файла MainWindow.XAML, замените код следующим кодом.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>A simple window that contains a text box and a button appears in the <bpt id="p1">**</bpt>Design<ept id="p1">**</ept> view of MainWindow.xaml.</source>
          <target state="translated">Появится простое окно, содержащее текстовое поле и кнопку в <bpt id="p1">**</bpt>разработки<ept id="p1">**</ept> файла MainWindow.XAML.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Add a reference for &lt;xref:System.Net.Http&gt;.</source>
          <target state="translated">Добавить ссылку &lt;xref:System.Net.Http&gt;.&lt;/xref:System.Net.Http&gt;</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, open the shortcut menu for MainWindow.xaml.vb, and then choose <bpt id="p2">**</bpt>View Code<ept id="p2">**</ept>.</source>
          <target state="translated">В <bpt id="p1">**</bpt>обозревателе решений<ept id="p1">**</ept>, откройте контекстное меню для MainWindow.xaml.vb и выберите <bpt id="p2">**</bpt>Просмотр кода<ept id="p2">**</ept>.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>In MainWindow.xaml.vb , replace the code with the following code.</source>
          <target state="translated">В файл MainWindow.xaml.vb замените код следующим кодом.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Choose the F5 key to run the program, and then choose the <bpt id="p1">**</bpt>Start<ept id="p1">**</ept> button.</source>
          <target state="translated">Нажмите клавишу F5, чтобы запустить программу, а затем нажмите кнопку <bpt id="p1">**</bpt>Start<ept id="p1">**</ept> .</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The following output should appear.</source>
          <target state="translated">Должен появиться следующий результат.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Trace the Program</source>
          <target state="translated">Программа трассировки</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Steps ONE and TWO</source>
          <target state="translated">Шаги ОДИН и ДВА</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The first two display lines trace the path as <ph id="ph1">`startButton_Click`</ph> calls <ph id="ph2">`AccessTheWebAsync`</ph>, and <ph id="ph3">`AccessTheWebAsync`</ph> calls the asynchronous &lt;xref:System.Net.Http.HttpClient&gt; method &lt;xref:System.Net.Http.HttpClient.GetStringAsync%28System.String%29&gt;.</source>
          <target state="translated">Отображение первых двух строк проследить путь как <ph id="ph1">`startButton_Click`</ph> вызовов <ph id="ph2">`AccessTheWebAsync`</ph>, и <ph id="ph3">`AccessTheWebAsync`</ph> вызывает асинхронный &lt;xref:System.Net.Http.HttpClient&gt;метод &lt;xref:System.Net.Http.HttpClient.GetStringAsync%28System.String%29&gt;.&lt;/xref:System.Net.Http.HttpClient.GetStringAsync%28System.String%29&gt; &lt;/xref:System.Net.Http.HttpClient&gt;</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The following image outlines the calls from method to method.</source>
          <target state="translated">Ниже описаны вызовов из метода в метод.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Steps ONE and TWO<ept id="p1">]</ept><bpt id="p2">(../../../../csharp/programming-guide/concepts/async/media/asynctrace-onetwo.png "</bpt>AsyncTrace-ONETWO<ept id="p2">")</ept></source>
          <target state="translated"><bpt id="p1">![</bpt>Шаги&amp;1; и&amp;2;<ept id="p1">]</ept><bpt id="p2">(../../../../csharp/programming-guide/concepts/async/media/asynctrace-onetwo.png "</bpt>AsyncTrace ONETWO<ept id="p2">")</ept></target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The return type of both <ph id="ph1">`AccessTheWebAsync`</ph> and <ph id="ph2">`client.GetStringAsync`</ph> is &lt;xref:System.Threading.Tasks.Task%601&gt;.</source>
          <target state="translated">Тип возвращаемого значения и <ph id="ph1">`AccessTheWebAsync`</ph> и <ph id="ph2">`client.GetStringAsync`</ph> &lt;xref:System.Threading.Tasks.Task%601&gt;.&lt;/xref:System.Threading.Tasks.Task%601&gt;</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For <ph id="ph1">`AccessTheWebAsync`</ph>, TResult is an integer.</source>
          <target state="translated">Для <ph id="ph1">`AccessTheWebAsync`</ph>, TResult является целым числом.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>For <ph id="ph1">`GetStringAsync`</ph>, TResult is a string.</source>
          <target state="translated">Для <ph id="ph1">`GetStringAsync`</ph>, TResult — строка.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>For more information about async method return types, see <bpt id="p1">[</bpt>Async Return Types (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/async-return-types.md)</ept>.</source>
          <target state="translated">Дополнительные сведения о возвращаемых типов асинхронный метод в разделе <bpt id="p1">[</bpt>возвращают типы Async (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/async-return-types.md)</ept>.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>A task-returning async method returns a task instance when control shifts back to the caller.</source>
          <target state="translated">Возвращение задач асинхронный метод возвращает экземпляр задачи, когда элемент управления перемещается обратно вызывающему.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Control returns from an async method to its caller either when an <ph id="ph1">`Await`</ph> operator is encountered in the called method or when the called method ends.</source>
          <target state="translated">Возвращает элемент управления из асинхронного метода вызывающему либо если <ph id="ph1">`Await`</ph> оператор встречается в вызываемый метод или когда завершается вызванный метод.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The display lines that are labeled "THREE" through "SIX" trace this part of the process.</source>
          <target state="translated">Отображение строки, помеченные как «ТРИ» до «6» трассировки эта часть процесса.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Step THREE</source>
          <target state="translated">Шаг ТРИ</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">`AccessTheWebAsync`</ph>, the asynchronous method &lt;xref:System.Net.Http.HttpClient.GetStringAsync%28System.String%29&gt; is called to download the contents of the target webpage.</source>
          <target state="translated">В <ph id="ph1">`AccessTheWebAsync`</ph>, асинхронный метод &lt;xref:System.Net.Http.HttpClient.GetStringAsync%28System.String%29&gt;вызывается для загрузки содержимого веб-страницы целевой.&lt;/xref:System.Net.Http.HttpClient.GetStringAsync%28System.String%29&gt;</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Control returns from <ph id="ph1">`client.GetStringAsync`</ph> to <ph id="ph2">`AccessTheWebAsync`</ph> when <ph id="ph3">`client.GetStringAsync`</ph> returns.</source>
          <target state="translated">Возвращает элемент управления <ph id="ph1">`client.GetStringAsync`</ph> для <ph id="ph2">`AccessTheWebAsync`</ph> при <ph id="ph3">`client.GetStringAsync`</ph> возвращает.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`client.GetStringAsync`</ph> method returns a task of string that’s assigned to the <ph id="ph2">`getStringTask`</ph> variable in <ph id="ph3">`AccessTheWebAsync`</ph>.</source>
          <target state="translated"><ph id="ph1">`client.GetStringAsync`</ph> Метод возвращает задачу, строки, назначенный <ph id="ph2">`getStringTask`</ph> переменных в <ph id="ph3">`AccessTheWebAsync`</ph>.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The following line in the example program shows the call to <ph id="ph1">`client.GetStringAsync`</ph> and the assignment.</source>
          <target state="translated">Следующие строки в примере программы показано, как вызвать <ph id="ph1">`client.GetStringAsync`</ph> и назначения.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>5<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>5<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>You can think of the task as a promise by <ph id="ph1">`client.GetStringAsync`</ph> to produce an actual string eventually.</source>
          <target state="translated">Можно считать задачи обещание по <ph id="ph1">`client.GetStringAsync`</ph> для создания фактической строки со временем.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>In the meantime, if <ph id="ph1">`AccessTheWebAsync`</ph> has work to do that doesn't depend on the promised string from <ph id="ph2">`client.GetStringAsync`</ph>, that work can continue while  <ph id="ph3">`client.GetStringAsync`</ph> waits.</source>
          <target state="translated">В то же время Если <ph id="ph1">`AccessTheWebAsync`</ph> есть работа, не зависящей от обещанной строку из <ph id="ph2">`client.GetStringAsync`</ph>, что продолжением работы во время <ph id="ph3">`client.GetStringAsync`</ph> ожидания.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>In the example, the following lines of output, which are labeled "THREE,” represent the opportunity to do independent work</source>
          <target state="translated">В этом примере следующие строки выходных данных, которые обозначены «ТРИ», представляют возможность работать независимо</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>6<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>6<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The following statement suspends progress in <ph id="ph1">`AccessTheWebAsync`</ph> when <ph id="ph2">`getStringTask`</ph> is awaited.</source>
          <target state="translated">Следующая инструкция приостанавливает ход выполнения в <ph id="ph1">`AccessTheWebAsync`</ph> при <ph id="ph2">`getStringTask`</ph> будет ожидать.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>7<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>7<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The following image shows the flow of control from <ph id="ph1">`client.GetStringAsync`</ph> to the assignment to <ph id="ph2">`getStringTask`</ph> and from the creation of <ph id="ph3">`getStringTask`</ph> to the application of an Await operator.</source>
          <target state="translated">На следующем рисунке поток управления из <ph id="ph1">`client.GetStringAsync`</ph> для назначения <ph id="ph2">`getStringTask`</ph> и от создания <ph id="ph3">`getStringTask`</ph> в приложение оператор Await.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Step THREE<ept id="p1">]</ept><bpt id="p2">(../../../../csharp/programming-guide/concepts/async/media/asynctrace-three.png "</bpt>AsyncTrace-Three<ept id="p2">")</ept></source>
          <target state="translated"><bpt id="p1">![</bpt>ТРЕТИЙ шаг<ept id="p1">]</ept><bpt id="p2">(../../../../csharp/programming-guide/concepts/async/media/asynctrace-three.png "</bpt>три AsyncTrace<ept id="p2">")</ept></target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The await expression suspends <ph id="ph1">`AccessTheWebAsync`</ph> until <ph id="ph2">`client.GetStringAsync`</ph> returns.</source>
          <target state="translated">Выражение await приостанавливает <ph id="ph1">`AccessTheWebAsync`</ph> до <ph id="ph2">`client.GetStringAsync`</ph> возвращает.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>In the meantime, control returns to the caller of <ph id="ph1">`AccessTheWebAsync`</ph>, <ph id="ph2">`startButton_Click`</ph>.</source>
          <target state="translated">В то же время управление возвращается вызывающему объекту <ph id="ph1">`AccessTheWebAsync`</ph>, <ph id="ph2">`startButton_Click`</ph>.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Typically, you await the call to an asynchronous method immediately.</source>
          <target state="translated">Как правило вы сразу ожидать результата вызова асинхронного метода.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>For example, the following assignment could replace the previous code that creates and then awaits <ph id="ph1">`getStringTask`</ph>: <ph id="ph2">`Dim urlContents As String = Await client.GetStringAsync("http://msdn.microsoft.com")`</ph></source>
          <target state="translated">Например, следующее присвоение может заменить предыдущий код, который создает и затем ожидает <ph id="ph1">`getStringTask`</ph>:<ph id="ph2">`Dim urlContents As String = Await client.GetStringAsync("http://msdn.microsoft.com")`</ph></target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>In this topic, the await operator is applied later to accommodate the output lines that mark the flow of control through the program.</source>
          <target state="translated">В этом разделе оператор await применяется позже для вывода линий, которые отмечают поток управления в программе.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Step FOUR</source>
          <target state="translated">Шаг ЧЕТЫРЕ</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The declared return type of <ph id="ph1">`AccessTheWebAsync`</ph> is <ph id="ph2">`Task(Of Integer)`</ph>.</source>
          <target state="translated">Объявленный тип возвращаемого значения <ph id="ph1">`AccessTheWebAsync`</ph> — <ph id="ph2">`Task(Of Integer)`</ph>.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Therefore, when <ph id="ph1">`AccessTheWebAsync`</ph> is suspended, it returns a task of integer to <ph id="ph2">`startButton_Click`</ph>.</source>
          <target state="translated">Таким образом, когда <ph id="ph1">`AccessTheWebAsync`</ph> будет приостановлен, он возвращает задачу, целого числа в <ph id="ph2">`startButton_Click`</ph>.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>You should understand that the returned task isn’t <ph id="ph1">`getStringTask`</ph>.</source>
          <target state="translated">Следует понимать, что возвращаемая задача не <ph id="ph1">`getStringTask`</ph>.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The returned task is a new task of integer that represents what remains to be done in the suspended method, <ph id="ph1">`AccessTheWebAsync`</ph>.</source>
          <target state="translated">Возвращаемая задача является новой задачи целое число, представляющее что остается сделать в приостановленном методе <ph id="ph1">`AccessTheWebAsync`</ph>.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The task is a promise from <ph id="ph1">`AccessTheWebAsync`</ph> to produce an integer when the task is complete.</source>
          <target state="translated">Задача является обещание из <ph id="ph1">`AccessTheWebAsync`</ph> производить целое число, при завершении задачи.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The following statement assigns this task to the <ph id="ph1">`getLengthTask`</ph> variable.</source>
          <target state="translated">Следующий оператор назначает эту задачу, чтобы <ph id="ph1">`getLengthTask`</ph> переменной.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>8<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>8<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>As in <ph id="ph1">`AccessTheWebAsync`</ph>, <ph id="ph2">`startButton_Click`</ph> can continue with work that doesn’t depend on the results of the asynchronous task (<ph id="ph3">`getLengthTask`</ph>) until the task is awaited.</source>
          <target state="translated">Как и в <ph id="ph1">`AccessTheWebAsync`</ph>, <ph id="ph2">`startButton_Click`</ph> можно продолжить работу, не зависят от результатов асинхронной задачи (<ph id="ph3">`getLengthTask`</ph>) пока не ожидать задачу.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The following output lines represent that work.</source>
          <target state="translated">Следующие выходные данные строки представляют этой работы.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>9<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>9<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Progress in <ph id="ph1">`startButton_Click`</ph> is suspended when <ph id="ph2">`getLengthTask`</ph> is awaited.</source>
          <target state="translated">Выполнение в <ph id="ph1">`startButton_Click`</ph> при приостановке <ph id="ph2">`getLengthTask`</ph> будет ожидать.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The following assignment statement suspends <ph id="ph1">`startButton_Click`</ph> until <ph id="ph2">`AccessTheWebAsync`</ph> is complete.</source>
          <target state="translated">Следующая инструкция назначения приостанавливает <ph id="ph1">`startButton_Click`</ph> до <ph id="ph2">`AccessTheWebAsync`</ph> завершения.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>10<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>10<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>In the following illustration, the arrows show the flow of control from the await expression in <ph id="ph1">`AccessTheWebAsync`</ph> to the assignment of a value to <ph id="ph2">`getLengthTask`</ph>, followed by normal processing in <ph id="ph3">`startButton_Click`</ph> until <ph id="ph4">`getLengthTask`</ph> is awaited.</source>
          <target state="translated">На следующем рисунке стрелки Показать поток управления из выражения await в <ph id="ph1">`AccessTheWebAsync`</ph> для присвоения значения для <ph id="ph2">`getLengthTask`</ph>, следуют обычной обработки в <ph id="ph3">`startButton_Click`</ph> до <ph id="ph4">`getLengthTask`</ph> будет ожидать.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Step FOUR<ept id="p1">]</ept><bpt id="p2">(../../../../csharp/programming-guide/concepts/async/media/asynctrace-four.png "</bpt>AsyncTrace-FOUR<ept id="p2">")</ept></source>
          <target state="translated"><bpt id="p1">![</bpt>ЧЕТВЕРТЫЙ шаг<ept id="p1">]</ept><bpt id="p2">(../../../../csharp/programming-guide/concepts/async/media/asynctrace-four.png "</bpt>AsyncTrace ЧЕТЫРЕ<ept id="p2">")</ept></target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Step FIVE</source>
          <target state="translated">Шаг ПЯТЬ</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`client.GetStringAsync`</ph> signals that it’s complete, processing in <ph id="ph2">`AccessTheWebAsync`</ph> is released from suspension and can continue past the await statement.</source>
          <target state="translated">Когда <ph id="ph1">`client.GetStringAsync`</ph> указывает, что завершения обработки в <ph id="ph2">`AccessTheWebAsync`</ph> освобождается после приостановки и можно продолжить выполнение после оператора await.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The following lines of output represent the resumption of processing.</source>
          <target state="translated">Приведенный ниже выходные данные представляют продолжение обработки.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>11<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>11<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The operand of the return statement, <ph id="ph1">`urlContents.Length`</ph>, is stored in the task that  <ph id="ph2">`AccessTheWebAsync`</ph> returns.</source>
          <target state="translated">Операнд оператора return <ph id="ph1">`urlContents.Length`</ph>, хранится в задаче, <ph id="ph2">`AccessTheWebAsync`</ph> возвращает.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The await expression retrieves that value from <ph id="ph1">`getLengthTask`</ph> in <ph id="ph2">`startButton_Click`</ph>.</source>
          <target state="translated">Выражение await получает это значение из <ph id="ph1">`getLengthTask`</ph> в <ph id="ph2">`startButton_Click`</ph>.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The following image shows the transfer of control after <ph id="ph1">`client.GetStringAsync`</ph> (and <ph id="ph2">`getStringTask`</ph>) are complete.</source>
          <target state="translated">На следующем рисунке показано перемещение элемента управления после <ph id="ph1">`client.GetStringAsync`</ph> (и <ph id="ph2">`getStringTask`</ph>) завершены.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Step FIVE<ept id="p1">]</ept><bpt id="p2">(../../../../csharp/programming-guide/concepts/async/media/asynctrace-five.png "</bpt>AsyncTrace-FIVE<ept id="p2">")</ept></source>
          <target state="translated"><bpt id="p1">![</bpt>ПЯТЫЙ шаг<ept id="p1">]</ept><bpt id="p2">(../../../../csharp/programming-guide/concepts/async/media/asynctrace-five.png "</bpt>AsyncTrace&amp;5;<ept id="p2">")</ept></target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`AccessTheWebAsync`</ph> runs to completion, and control returns to <ph id="ph2">`startButton_Click`</ph>, which is awaiting the completion.</source>
          <target state="translated"><ph id="ph1">`AccessTheWebAsync`</ph>Возвращает выполняется до завершения и управления <ph id="ph2">`startButton_Click`</ph>, который ожидает завершения.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Step SIX</source>
          <target state="translated">Шаг ШЕСТЬ</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`AccessTheWebAsync`</ph> signals that it’s complete, processing can continue past the await statement in <ph id="ph2">`startButton_Async`</ph>.</source>
          <target state="translated">Когда <ph id="ph1">`AccessTheWebAsync`</ph> сигнализирует завершения обработки можно продолжить выполнение после оператора await в <ph id="ph2">`startButton_Async`</ph>.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>In fact, the program has nothing more to do.</source>
          <target state="translated">На самом деле программа имеет ничего общего дополнительные.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The following lines of output represent the resumption of processing in <ph id="ph1">`startButton_Async`</ph>:</source>
          <target state="translated">Приведенный ниже выходные данные представляют продолжение обработки в <ph id="ph1">`startButton_Async`</ph>:</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>12<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>12<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The await expression retrieves from <ph id="ph1">`getLengthTask`</ph> the integer value that’s the operand of the return statement in <ph id="ph2">`AccessTheWebAsync`</ph>.</source>
          <target state="translated">Выражение await извлекает из <ph id="ph1">`getLengthTask`</ph> целое значение, представляющее операнд оператора return в <ph id="ph2">`AccessTheWebAsync`</ph>.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The following statement assigns that value to the <ph id="ph1">`contentLength`</ph> variable.</source>
          <target state="translated">Следующая инструкция присваивает это значение <ph id="ph1">`contentLength`</ph> переменной.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>13<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>13<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The following image shows the return of control from <ph id="ph1">`AccessTheWebAsync`</ph> to <ph id="ph2">`startButton_Click`</ph>.</source>
          <target state="translated">На следующем рисунке показано возвращение управления из <ph id="ph1">`AccessTheWebAsync`</ph> в <ph id="ph2">`startButton_Click`</ph>.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Step SIX<ept id="p1">]</ept><bpt id="p2">(../../../../csharp/programming-guide/concepts/async/media/asynctrace-six.png "</bpt>AsyncTrace-SIX<ept id="p2">")</ept></source>
          <target state="translated"><bpt id="p1">![</bpt>ШЕСТОЙ шаг<ept id="p1">]</ept><bpt id="p2">(../../../../csharp/programming-guide/concepts/async/media/asynctrace-six.png "</bpt>AsyncTrace&amp;6;<ept id="p2">")</ept></target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">См. также</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Asynchronous Programming with Async and Await (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/index.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Асинхронное программирование с использованием Async и Await (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/index.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Async Return Types (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/async-return-types.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Асинхронные типы возвращаемых значений (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/async-return-types.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Walkthrough: Accessing the Web by Using Async and Await (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/walkthrough-accessing-the-web-by-using-async-and-await.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Пошаговое руководство: Доступ к Интернету с помощью модификатора Async и Await (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/walkthrough-accessing-the-web-by-using-async-and-await.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Async Sample: Control Flow in Async Programs (C# and Visual Basic)<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=255285)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>Пример асинхронности: Поток управления в асинхронных программах (C# и Visual Basic)<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=255285)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>