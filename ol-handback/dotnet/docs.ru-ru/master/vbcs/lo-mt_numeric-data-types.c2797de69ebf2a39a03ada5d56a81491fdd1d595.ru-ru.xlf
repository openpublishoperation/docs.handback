<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3c3098370b8d9dcb6aafcb06dcfb8f4e144b899a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\data-types\numeric-data-types.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7b31fff9a24e058c965d5c2b4b5da6c01a3fdb29</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4cfbc6d8f2f539294898699654794635577a26c8</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Numeric Data Types (Visual Basic) | Microsoft Docs</source>
          <target state="translated">Числовые типы данных (Visual Basic) | Документы Microsoft</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Numeric Data Types (Visual Basic)</source>
          <target state="translated">Числовые типы данных (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> supplies several <bpt id="p1">*</bpt>numeric data types<ept id="p1">*</ept> for handling numbers in various representations.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>предоставляет несколько <bpt id="p1">*</bpt>числовые типы данных<ept id="p1">*</ept> для обработки чисел в различном представлении.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Integral<ept id="p1">*</ept> types represent only whole numbers (positive, negative, and zero), and <bpt id="p2">*</bpt>nonintegral<ept id="p2">*</ept> types represent numbers with both integer and fractional parts.</source>
          <target state="translated"><bpt id="p1">*</bpt>Целочисленный<ept id="p1">*</ept> типы представляют собой только целые числа (положительные, отрицательные и ноль), и <bpt id="p2">*</bpt>нецелочисленным<ept id="p2">*</ept> — числа с целой и дробной частей.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For a table showing a side-by-side comparison of the <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> data types, see <bpt id="p1">[</bpt>Data Types<ept id="p1">](../../../../visual-basic/language-reference/data-types/data-type-summary.md)</ept>.</source>
          <target state="translated">Для таблицы, сравнение side-by-side <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> типы данных в разделе <bpt id="p1">[</bpt>типы данных<ept id="p1">](../../../../visual-basic/language-reference/data-types/data-type-summary.md)</ept>.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Integral Numeric Types</source>
          <target state="translated">Целочисленные типы</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Integral data types<ept id="p1">*</ept> are those that represent only numbers without fractional parts.</source>
          <target state="translated"><bpt id="p1">*</bpt>Целочисленные типы данных<ept id="p1">*</ept> представляют собой только числа без дробной части.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>signed<ept id="p1">*</ept> integral data types are <bpt id="p2">[</bpt>SByte Data Type<ept id="p2">](../../../../visual-basic/language-reference/data-types/sbyte-data-type.md)</ept> (8-bit), <bpt id="p3">[</bpt>Short Data Type<ept id="p3">](../../../../visual-basic/language-reference/data-types/short-data-type.md)</ept> (16-bit), <bpt id="p4">[</bpt>Integer Data Type<ept id="p4">](../../../../visual-basic/language-reference/data-types/integer-data-type.md)</ept> (32-bit), and <bpt id="p5">[</bpt>Long Data Type<ept id="p5">](../../../../visual-basic/language-reference/data-types/long-data-type.md)</ept> (64-bit).</source>
          <target state="translated"><bpt id="p1">*</bpt>Подписью<ept id="p1">*</ept> целые типы данных <bpt id="p2">[</bpt>тип данных SByte<ept id="p2">](../../../../visual-basic/language-reference/data-types/sbyte-data-type.md)</ept> (8-разрядный), <bpt id="p3">[</bpt>тип данных Short<ept id="p3">](../../../../visual-basic/language-reference/data-types/short-data-type.md)</ept> (16-разрядная версия), <bpt id="p4">[</bpt>целочисленный тип данных<ept id="p4">](../../../../visual-basic/language-reference/data-types/integer-data-type.md)</ept> (32-разрядная версия), и <bpt id="p5">[</bpt>тип данных Long<ept id="p5">](../../../../visual-basic/language-reference/data-types/long-data-type.md)</ept> (64-разрядная версия).</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If a variable always stores integers rather than fractional numbers, declare it as one of these types.</source>
          <target state="translated">Если переменная всегда хранит целые числа, а не дробных чисел, объявите его в качестве одного из этих типов.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>unsigned<ept id="p1">*</ept> integral types are <bpt id="p2">[</bpt>Byte Data Type<ept id="p2">](../../../../visual-basic/language-reference/data-types/byte-data-type.md)</ept> (8-bit), <bpt id="p3">[</bpt>UShort Data Type<ept id="p3">](../../../../visual-basic/language-reference/data-types/ushort-data-type.md)</ept> (16-bit), <bpt id="p4">[</bpt>UInteger Data Type<ept id="p4">](../../../../visual-basic/language-reference/data-types/uinteger-data-type.md)</ept> (32-bit), and <bpt id="p5">[</bpt>ULong Data Type<ept id="p5">](../../../../visual-basic/language-reference/data-types/ulong-data-type.md)</ept> (64-bit).</source>
          <target state="translated"><bpt id="p1">*</bpt>Без знака<ept id="p1">*</ept> целочисленные типы имеют <bpt id="p2">[</bpt>тип данных Byte<ept id="p2">](../../../../visual-basic/language-reference/data-types/byte-data-type.md)</ept> (8-разрядный), <bpt id="p3">[</bpt>тип данных UShort<ept id="p3">](../../../../visual-basic/language-reference/data-types/ushort-data-type.md)</ept> (16-разрядная версия), <bpt id="p4">[</bpt>UInteger-тип данных<ept id="p4">](../../../../visual-basic/language-reference/data-types/uinteger-data-type.md)</ept> (32-разрядная версия), и <bpt id="p5">[</bpt>тип данных ULong<ept id="p5">](../../../../visual-basic/language-reference/data-types/ulong-data-type.md)</ept> (64-разрядная версия).</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If a variable contains binary data, or data of unknown nature, declare it as one of these types.</source>
          <target state="translated">Если переменная содержит двоичные данные или данные неизвестной природы, следует объявите ее как один из этих типов.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Performance</source>
          <target state="translated">Производительность</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Arithmetic operations are faster with integral types than with other data types.</source>
          <target state="translated">Арифметические операции выполняются быстрее с целыми типами, чем с другими типами данных.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>They are fastest with the <ph id="ph1">`Integer`</ph> and <ph id="ph2">`UInteger`</ph> types in <ph id="ph3">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>.</source>
          <target state="translated">Они являются наиболее быстрым <ph id="ph1">`Integer`</ph> и <ph id="ph2">`UInteger`</ph> типы в <ph id="ph3">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Large Integers</source>
          <target state="translated">Больших целых чисел</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If you need to hold an integer larger than the <ph id="ph1">`Integer`</ph> data type can hold, you can use the <ph id="ph2">`Long`</ph> data type instead.</source>
          <target state="translated">Если необходимо хранить целое число больше, чем <ph id="ph1">`Integer`</ph> может содержать тип данных, можно использовать <ph id="ph2">`Long`</ph> тип данных.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Long`</ph> variables can hold numbers from -9,223,372,036,854,775,808 through 9,223,372,036,854,775,807.</source>
          <target state="translated"><ph id="ph1">`Long`</ph>переменные могут содержать числа в диапазоне от -9223372036854775808 до 9223372036854775807.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Operations with <ph id="ph1">`Long`</ph> are slightly slower than with <ph id="ph2">`Integer`</ph>.</source>
          <target state="translated">Операции с <ph id="ph1">`Long`</ph> немного медленнее, чем с <ph id="ph2">`Integer`</ph>.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If you need even larger values, you can use the <bpt id="p1">[</bpt>Decimal Data Type<ept id="p1">](../../../../visual-basic/language-reference/data-types/decimal-data-type.md)</ept>.</source>
          <target state="translated">Если требуется, чтобы еще больше значений, можно использовать <bpt id="p1">[</bpt>тип данных Decimal<ept id="p1">](../../../../visual-basic/language-reference/data-types/decimal-data-type.md)</ept>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You can hold numbers from -79,228,162,514,264,337,593,543,950,335 through 79,228,162,514,264,337,593,543,950,335 in a <ph id="ph1">`Decimal`</ph> variable if you do not use any decimal places.</source>
          <target state="translated">Можно хранить числа в диапазоне от -79,228,162,514,264,337,593,543,950,335 до 79,228,162,514,264,337,593,543,950,335 в <ph id="ph1">`Decimal`</ph> переменной, если вы не используете десятичные разряды.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>However, operations with <ph id="ph1">`Decimal`</ph> numbers are considerably slower than with any other numeric data type.</source>
          <target state="translated">Однако операции с <ph id="ph1">`Decimal`</ph> номера выполняются значительно медленнее, чем с любым другим типом числовых данных.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Small Integers</source>
          <target state="translated">Двухбайтовые целые числа</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If you do not need the full range of the <ph id="ph1">`Integer`</ph> data type, you can use the <ph id="ph2">`Short`</ph> data type, which can hold integers from -32,768 through 32,767.</source>
          <target state="translated">Если не требуется полный диапазон <ph id="ph1">`Integer`</ph> тип данных, можно использовать <ph id="ph2">`Short`</ph> тип данных, который может содержать целые числа от-32 768 до 32 767.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For the smallest integer range, the <ph id="ph1">`SByte`</ph> data type holds integers from -128 through 127.</source>
          <target state="translated">Для диапазона наименьшее целое число <ph id="ph1">`SByte`</ph> тип данных содержит целые числа от -128 до 127.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If you have a very large number of variables that hold small integers, the common language runtime can sometimes store your <ph id="ph1">`Short`</ph> and <ph id="ph2">`SByte`</ph> variables more efficiently and save memory consumption.</source>
          <target state="translated">Если имеется большое количество переменных, которые содержат двухбайтовые целые числа, общеязыковая среда выполнения, иногда можно хранить на <ph id="ph1">`Short`</ph> и <ph id="ph2">`SByte`</ph> переменные более эффективно и снизить потребление памяти.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>However, operations with <ph id="ph1">`Short`</ph> and <ph id="ph2">`SByte`</ph> are somewhat slower than with <ph id="ph3">`Integer`</ph>.</source>
          <target state="translated">Однако операции с <ph id="ph1">`Short`</ph> и <ph id="ph2">`SByte`</ph> выполняются медленнее, чем с <ph id="ph3">`Integer`</ph>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Unsigned Integers</source>
          <target state="translated">Целые числа без знака</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>If you know that your variable never needs to hold a negative number, you can use the <bpt id="p1">*</bpt>unsigned types<ept id="p1">*</ept><ph id="ph1">`Byte`</ph>, <ph id="ph2">`UShort`</ph>, <ph id="ph3">`UInteger`</ph>, and <ph id="ph4">`ULong`</ph>.</source>
          <target state="translated">Если вы знаете, что переменная никогда не должна содержать отрицательное число, можно использовать <bpt id="p1">*</bpt>беззнаковых типов<ept id="p1">*</ept><ph id="ph1">`Byte`</ph>, <ph id="ph2">`UShort`</ph>, <ph id="ph3">`UInteger`</ph>, и <ph id="ph4">`ULong`</ph>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Each of these data types can hold a positive integer twice as large as its corresponding signed type (<ph id="ph1">`SByte`</ph>, <ph id="ph2">`Short`</ph>, <ph id="ph3">`Integer`</ph>, and <ph id="ph4">`Long`</ph>).</source>
          <target state="translated">Каждый из этих типов данных может содержать положительное целое число два раза превосходящее его соответствующий знаковый тип (<ph id="ph1">`SByte`</ph>, <ph id="ph2">`Short`</ph>, <ph id="ph3">`Integer`</ph>, и <ph id="ph4">`Long`</ph>).</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In terms of performance, each unsigned type is exactly as efficient as its corresponding signed type.</source>
          <target state="translated">С точки зрения производительности каждый тип без знака точно так же эффективно, как соответствующий тип со знаком.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In particular, <ph id="ph1">`UInteger`</ph> shares with <ph id="ph2">`Integer`</ph> the distinction of being the most efficient of all the elementary numeric data types.</source>
          <target state="translated">В частности <ph id="ph1">`UInteger`</ph> совместно <ph id="ph2">`Integer`</ph> являются наиболее эффективными из всех типов простейших числовых данных.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Nonintegral Numeric Types</source>
          <target state="translated">Нецелочисленный числовые типы</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Nonintegral data types<ept id="p1">*</ept> are those that represent numbers with both integer and fractional parts.</source>
          <target state="translated"><bpt id="p1">*</bpt>Типы данных нецелочисленный<ept id="p1">*</ept> представляют собой числа с целой и дробной частей.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The nonintegral numeric data types are <ph id="ph1">`Decimal`</ph> (128-bit fixed point), <bpt id="p1">[</bpt>Single Data Type<ept id="p1">](../../../../visual-basic/language-reference/data-types/single-data-type.md)</ept> (32-bit floating point), and <bpt id="p2">[</bpt>Double Data Type<ept id="p2">](../../../../visual-basic/language-reference/data-types/double-data-type.md)</ept> (64-bit floating point).</source>
          <target state="translated">Нецелочисленный числовыми типами данных являются <ph id="ph1">`Decimal`</ph> (128 бит с фиксированной запятой), <bpt id="p1">[</bpt>одного типа данных<ept id="p1">](../../../../visual-basic/language-reference/data-types/single-data-type.md)</ept> (32-разрядных чисел с плавающей запятой), и <bpt id="p2">[</bpt>тип данных Double<ept id="p2">](../../../../visual-basic/language-reference/data-types/double-data-type.md)</ept> (64-разрядных чисел с плавающей запятой).</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>They are all signed types.</source>
          <target state="translated">Они являются все подписанные типами.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If a variable can contain a fraction, declare it as one of these types.</source>
          <target state="translated">Если переменная может содержать дробную часть, следует объявите ее как один из этих типов.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Decimal`</ph> is not a floating-point data type.</source>
          <target state="translated"><ph id="ph1">`Decimal`</ph>не является типом данных с плавающей запятой.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Decimal`</ph> numbers have a binary integer value and an integer scaling factor that specifies what portion of the value is a decimal fraction.</source>
          <target state="translated"><ph id="ph1">`Decimal`</ph>числа имеют двоичное целое значение и масштабный коэффициент целых чисел, который определяет, какая часть значения является десятичной дробью.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>You can use <ph id="ph1">`Decimal`</ph> variables for money values.</source>
          <target state="translated">Можно использовать <ph id="ph1">`Decimal`</ph> переменные для денежных значений.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The advantage is the precision of the values.</source>
          <target state="translated">Преимущество имеет точность значений.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Double`</ph> data type is faster and requires less memory, but it is subject to rounding errors.</source>
          <target state="translated"><ph id="ph1">`Double`</ph> Тип данных выполняется быстрее и требует меньше памяти, но она подвержена ошибкам округления.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Decimal`</ph> data type retains complete accuracy to 28 decimal places.</source>
          <target state="translated"><ph id="ph1">`Decimal`</ph> Тип данных сохраняет полную точность до 28 десятичных разрядов.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Floating-point (<ph id="ph1">`Single`</ph> and <ph id="ph2">`Double`</ph>) numbers have larger ranges than <ph id="ph3">`Decimal`</ph> numbers but can be subject to rounding errors.</source>
          <target state="translated">С плавающей запятой (<ph id="ph1">`Single`</ph> и <ph id="ph2">`Double`</ph>) числа имеют большие диапазоны, чем <ph id="ph3">`Decimal`</ph> числа, но могут возникать ошибки округления.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Floating-point types support fewer significant digits than <ph id="ph1">`Decimal`</ph> but can represent values of greater magnitude.</source>
          <target state="translated">Типы с плавающей запятой поддерживают меньшее количество значащих цифр, чем <ph id="ph1">`Decimal`</ph> , но могут представлять значения большей величины.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Nonintegral number values can be expressed as mmmEeee, in which mmm is the <bpt id="p1">*</bpt>mantissa<ept id="p1">*</ept> (the significant digits) and eee is the <bpt id="p2">*</bpt>exponent<ept id="p2">*</ept> (a power of 10).</source>
          <target state="translated">Нецелочисленные значения могут быть выражены как mmmEeee, в которых mmm является <bpt id="p1">*</bpt>мантиссы<ept id="p1">*</ept> (значащими цифрами), а eee — <bpt id="p2">*</bpt>экспоненты<ept id="p2">*</ept> (степень 10).</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The highest positive values of the nonintegral types are 7.9228162514264337593543950335E+28 for <ph id="ph1">`Decimal`</ph>, 3.4028235E+38 for <ph id="ph2">`Single`</ph>, and 1.79769313486231570E+308 for <ph id="ph3">`Double`</ph>.</source>
          <target state="translated">Максимальные положительные значения для нецелочисленных типов являются 7.9228162514264337593543950335E + 28 для <ph id="ph1">`Decimal`</ph>, 3, 4028235E + 38 для <ph id="ph2">`Single`</ph>и 1, 79769313486231570E + 308 для <ph id="ph3">`Double`</ph>.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Performance</source>
          <target state="translated">Производительность</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Double`</ph> is the most efficient of the fractional data types, because the processors on current platforms perform floating-point operations in double precision.</source>
          <target state="translated"><ph id="ph1">`Double`</ph>является наиболее эффективным из дробных типов данных, поскольку процессоры на современных платформах выполняют операции с плавающей запятой с двойной точностью.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>However, operations with <ph id="ph1">`Double`</ph> are not as fast as with the integral types such as <ph id="ph2">`Integer`</ph>.</source>
          <target state="translated">Однако операции с <ph id="ph1">`Double`</ph> не так же быстро, как и в случае целочисленные типы, такие как <ph id="ph2">`Integer`</ph>.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Small Magnitudes</source>
          <target state="translated">Малые величины</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For numbers with the smallest possible magnitude (closest to 0), <ph id="ph1">`Double`</ph> variables can hold numbers as small as -4.94065645841246544E-324 for negative values and 4.94065645841246544E-324 for positive values.</source>
          <target state="translated">Для чисел с наименьшей возможной величиной (стремящейся к 0) <ph id="ph1">`Double`</ph> переменные могут содержать числа, как - 4, 94065645841246544E-324 для отрицательных значений и 4, 94065645841246544E-324 для положительных значений.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Small Fractional Numbers</source>
          <target state="translated">Малые дробные числа</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>If you do not need the full range of the <ph id="ph1">`Double`</ph> data type, you can use the <ph id="ph2">`Single`</ph> data type, which can hold floating-point numbers from -3.4028235E+38 through 3.4028235E+38.</source>
          <target state="translated">Если не требуется полный диапазон <ph id="ph1">`Double`</ph> тип данных, можно использовать <ph id="ph2">`Single`</ph> тип данных, который может хранить числа с плавающей запятой от - 3, 4028235E + 38 до 3, 4028235E + 38.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The smallest magnitudes for <ph id="ph1">`Single`</ph> variables are -1.401298E-45 for negative values and 1.401298E-45 for positive values.</source>
          <target state="translated">Минимальные значения <ph id="ph1">`Single`</ph> переменные, - 1, 401298E-45 для отрицательных значений и 1, 401298E-45 для положительных значений.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>If you have a very large number of variables that hold small floating-point numbers, the common language runtime can sometimes store your <ph id="ph1">`Single`</ph> variables more efficiently and save memory consumption.</source>
          <target state="translated">Если имеется большое количество переменных, которые содержат небольшие числа с плавающей запятой, общеязыковая среда выполнения, иногда можно хранить на <ph id="ph1">`Single`</ph> переменные более эффективно и снизить потребление памяти.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">См. также</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Elementary Data Types<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/elementary-data-types.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Простые типы данных<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/elementary-data-types.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Character Data Types<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/character-data-types.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Символьные типы данных<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/character-data-types.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Miscellaneous Data Types<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/miscellaneous-data-types.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Прочие типы данных<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/miscellaneous-data-types.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Troubleshooting Data Types<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/troubleshooting-data-types.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Устранение неполадок типы данных<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/troubleshooting-data-types.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Call a Windows Function that Takes Unsigned Types<ept id="p1">](../../../../visual-basic/programming-guide/com-interop/how-to-call-a-windows-function-that-takes-unsigned-types.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>Практическое руководство. Вызов функции Windows, принимающей значение беззнакового типа<ept id="p1">](../../../../visual-basic/programming-guide/com-interop/how-to-call-a-windows-function-that-takes-unsigned-types.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>