<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a746ce3e24812d1df6b6e221cca0364bf2cc7f1c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\linq\partitioning-data.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fd2f02f70fd32d53122dde3185abc5950a02c23e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e03badf542df8744a71c5e62c2b55ca5d0a3d1ec</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Partitioning Data (Visual Basic) | Microsoft Docs</source>
          <target state="translated">Секционирование данных (Visual Basic) | Документы Microsoft</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Partitioning Data (Visual Basic)</source>
          <target state="translated">Секционирование данных (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Partitioning in LINQ refers to the operation of dividing an input sequence into two sections, without rearranging the elements, and then returning one of the sections.</source>
          <target state="translated">Секционирование в LINQ — это операция разделения входной последовательности на два раздела без изменения порядка элементов, а затем возвращения одного из разделов.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The following illustration shows the results of three different partitioning operations on a sequence of characters.</source>
          <target state="translated">Ниже показаны результаты трех различных операций секционирования в последовательности символов.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The first operation returns the first three elements in the sequence.</source>
          <target state="translated">Первая операция возвращает первые три элемента в последовательности.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The second operation skips the first three elements and returns the remaining elements.</source>
          <target state="translated">Вторая операция пропускает первые три элемента и возвращает остальные элементы.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The third operation skips the first two elements in the sequence and returns the next three elements.</source>
          <target state="translated">Третья операция пропускает первые два элемента в последовательности и возвращает три следующих элемента.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>LINQ Partitioning Operations<ept id="p1">]</ept><bpt id="p2">(../../../../csharp/programming-guide/concepts/linq/media/linq_partition.png "</bpt>LINQ_Partition<ept id="p2">")</ept></source>
          <target state="translated"><bpt id="p1">![</bpt>Операции секционирования LINQ<ept id="p1">]</ept><bpt id="p2">(../../../../csharp/programming-guide/concepts/linq/media/linq_partition.png "</bpt>LINQ_Partition<ept id="p2">")</ept></target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The standard query operator methods that partition sequences are listed in the following section.</source>
          <target state="translated">В следующем разделе перечислены методы стандартных операторов запросов, выполняют секционирование.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Operators</source>
          <target state="translated">Операторы</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Operator Name</source>
          <target state="translated">Имя оператора</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Описание</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Visual Basic Query Expression Syntax</source>
          <target state="translated">Синтаксис выражения запроса для Visual Basic</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>More Information</source>
          <target state="translated">Дополнительные сведения</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Skip</source>
          <target state="translated">Пропустить</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Skips elements up to a specified position in a sequence.</source>
          <target state="translated">Пропускает элементы до указанной позиции в последовательности.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Linq.Enumerable.Skip%2A?displayProperty=fullName&gt;</source>
          <target state="translated">&lt;xref:System.Linq.Enumerable.Skip%2A?displayProperty=fullName&gt;&lt;/xref:System.Linq.Enumerable.Skip%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Linq.Queryable.Skip%2A?displayProperty=fullName&gt;</source>
          <target state="translated">&lt;xref:System.Linq.Queryable.Skip%2A?displayProperty=fullName&gt;&lt;/xref:System.Linq.Queryable.Skip%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>SkipWhile</source>
          <target state="translated">SkipWhile</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Skips elements based on a predicate function until an element does not satisfy the condition.</source>
          <target state="translated">Пропускает элементы, пока элемент не удовлетворит условию функции предиката.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Linq.Enumerable.SkipWhile%2A?displayProperty=fullName&gt;</source>
          <target state="translated">&lt;xref:System.Linq.Enumerable.SkipWhile%2A?displayProperty=fullName&gt;&lt;/xref:System.Linq.Enumerable.SkipWhile%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Linq.Queryable.SkipWhile%2A?displayProperty=fullName&gt;</source>
          <target state="translated">&lt;xref:System.Linq.Queryable.SkipWhile%2A?displayProperty=fullName&gt;&lt;/xref:System.Linq.Queryable.SkipWhile%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Take</source>
          <target state="translated">Take</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Takes elements up to a specified position in a sequence.</source>
          <target state="translated">Возвращает элементы указанной позиции в последовательности.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Linq.Enumerable.Take%2A?displayProperty=fullName&gt;</source>
          <target state="translated">&lt;xref:System.Linq.Enumerable.Take%2A?displayProperty=fullName&gt;&lt;/xref:System.Linq.Enumerable.Take%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Linq.Queryable.Take%2A?displayProperty=fullName&gt;</source>
          <target state="translated">&lt;xref:System.Linq.Queryable.Take%2A?displayProperty=fullName&gt;&lt;/xref:System.Linq.Queryable.Take%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>TakeWhile</source>
          <target state="translated">TakeWhile</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Takes elements based on a predicate function until an element does not satisfy the condition.</source>
          <target state="translated">Принимает элементы, пока элемент не удовлетворит условию функции предиката.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Linq.Enumerable.TakeWhile%2A?displayProperty=fullName&gt;</source>
          <target state="translated">&lt;xref:System.Linq.Enumerable.TakeWhile%2A?displayProperty=fullName&gt;&lt;/xref:System.Linq.Enumerable.TakeWhile%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Linq.Queryable.TakeWhile%2A?displayProperty=fullName&gt;</source>
          <target state="translated">&lt;xref:System.Linq.Queryable.TakeWhile%2A?displayProperty=fullName&gt;&lt;/xref:System.Linq.Queryable.TakeWhile%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Query Expression Syntax Examples</source>
          <target state="translated">Примеры синтаксиса выражений запросов</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Skip</source>
          <target state="translated">Пропустить</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The following code example uses the <ph id="ph1">`Skip`</ph> clause in <ph id="ph2">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> to skip over the first four strings in an array of strings before returning the remaining strings in the array.</source>
          <target state="translated">В следующем примере кода <ph id="ph1">`Skip`</ph> предложения в <ph id="ph2">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> для пропуска первых четырех строк в массиве строк перед возвращением оставшихся строк в массиве.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>CsLINQPartitioning#1<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/partitioning-data_1.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>CsLINQPartitioning&amp;#1;<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/partitioning-data_1.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>SkipWhile</source>
          <target state="translated">SkipWhile</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The following code example uses the <ph id="ph1">`Skip While`</ph> clause in <ph id="ph2">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> to skip over the strings in an array while the first letter of the string is "a".</source>
          <target state="translated">В следующем примере кода <ph id="ph1">`Skip While`</ph> предложения в <ph id="ph2">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> для пропуска строк в массиве, начинающихся с буквы «».</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The remaining strings in the array are returned.</source>
          <target state="translated">Оставшиеся строки массива возвращаются.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>CsLINQPartitioning#2<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/partitioning-data_2.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>CsLINQPartitioning&amp;#2;<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/partitioning-data_2.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Take</source>
          <target state="translated">Take</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The following code example uses the <ph id="ph1">`Take`</ph> clause in <ph id="ph2">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> to return the first two strings in an array of strings.</source>
          <target state="translated">В следующем примере кода <ph id="ph1">`Take`</ph> предложения в <ph id="ph2">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> для возврата первых двух строк в массиве строк.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>CsLINQPartitioning#3<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/partitioning-data_3.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>CsLINQPartitioning&amp;#3;<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/partitioning-data_3.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>TakeWhile</source>
          <target state="translated">TakeWhile</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The following code example uses the <ph id="ph1">`Take While`</ph> clause in <ph id="ph2">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> to return strings from an array while the length of the string is five or less.</source>
          <target state="translated">В следующем примере кода <ph id="ph1">`Take While`</ph> предложения в <ph id="ph2">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> для возврата из массива строк, тогда как длина строки меньше пяти.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>CsLINQPartitioning#4<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/partitioning-data_4.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>CsLINQPartitioning&amp;#4;<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/partitioning-data_4.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">См. также</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Linq&gt;</source>
          <target state="translated">&lt;xref:System.Linq&gt;&lt;/xref:System.Linq&gt;</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Standard Query Operators Overview (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/standard-query-operators-overview.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Общие сведения о стандартных операторах (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/standard-query-operators-overview.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Skip Clause<ept id="p1">](../../../../visual-basic/language-reference/queries/skip-clause.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Предложение SKIP<ept id="p1">](../../../../visual-basic/language-reference/queries/skip-clause.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Skip While Clause<ept id="p1">](../../../../visual-basic/language-reference/queries/skip-while-clause.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Предложение Skip While<ept id="p1">](../../../../visual-basic/language-reference/queries/skip-while-clause.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Take Clause<ept id="p1">](../../../../visual-basic/language-reference/queries/take-clause.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Предложение Take<ept id="p1">](../../../../visual-basic/language-reference/queries/take-clause.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Take While Clause<ept id="p1">](../../../../visual-basic/language-reference/queries/take-while-clause.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>Предложение Take While<ept id="p1">](../../../../visual-basic/language-reference/queries/take-while-clause.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>