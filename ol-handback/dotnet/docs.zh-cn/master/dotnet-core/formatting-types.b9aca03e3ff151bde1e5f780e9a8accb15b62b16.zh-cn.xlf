<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-47f9650" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dc0693c2e2c034c4c71b4270ef2812be4af72e72</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\base-types\formatting-types.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">06cdde71c95ed259c4c28d5241bfaf48ef9cc0bf</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e11b2353ab977b4035ff84b067d78ac3ce6192fc</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Formatting types</source>
          <target state="translated">格式设置类型</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Formatting types</source>
          <target state="translated">格式设置类型</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Formatting types</source>
          <target state="translated">格式设置类型</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Formatting is the process of converting an instance of a class, structure, or enumeration value to its string representation, often so that the resulting string can be displayed to users or deserialized to restore the original data type.</source>
          <target state="translated">格式设置是指将类、结构或枚举值的实例转换为其字符串表示形式的过程，通常使得最终的字符串可以显示给用户，或者进行反序列化以还原为原始数据类型。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This conversion can pose a number of challenges:</source>
          <target state="translated">此转换可能面临一系列挑战：</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The way that values are stored internally does not necessarily reflect the way that users want to view them.</source>
          <target state="translated">在内部存储值的方式不一定反映用户想要查看它们的方式。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For example, a telephone number might be stored in the form <bpt id="p1">**</bpt>8009999999<ept id="p1">**</ept>, which is not user-friendly.</source>
          <target state="translated">例如，电话号码可以存储为 <bpt id="p1">**</bpt>8009999999<ept id="p1">**</ept> 格式，但此格式并非是用户友好的格式。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>It should instead be displayed as <bpt id="p1">**</bpt>800-999-9999<ept id="p1">**</ept>.</source>
          <target state="translated">该电话号码应显示为 <bpt id="p1">**</bpt>800-999-9999<ept id="p1">**</ept>。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>See the <bpt id="p1">[</bpt>Custom format strings<ept id="p1">](#custom-format-strings)</ept> section for an example that formats a number in this way.</source>
          <target state="translated">有关以这种方式设置数字格式的示例，请参见<bpt id="p1">[</bpt>自定义格式字符串<ept id="p1">](#custom-format-strings)</ept>部分。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Sometimes the conversion of an object to its string representation is not intuitive.</source>
          <target state="translated">有时对象到其字符串表示形式的转换不是直观的。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For example, it is not clear how the string representation of a <bpt id="p1">**</bpt>Temperature<ept id="p1">**</ept> object or a <bpt id="p2">**</bpt>Person<ept id="p2">**</ept> object should appear.</source>
          <target state="translated">例如，不清楚 <bpt id="p1">**</bpt>Temperature<ept id="p1">**</ept> 对象或 <bpt id="p2">**</bpt>Person<ept id="p2">**</ept> 对象的字符串表示形式应如何显示。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For an example that formats a <bpt id="p1">**</bpt>Temperature<ept id="p1">**</ept> object in a variety of ways, see the <bpt id="p2">[</bpt>Standard format strings<ept id="p2">](#standard-format-strings)</ept> section.</source>
          <target state="translated">有关以各种方式设置 <bpt id="p1">**</bpt>Temperature<ept id="p1">**</ept> 对象格式的示例，请参见<bpt id="p2">[</bpt>标准格式字符串<ept id="p2">](#standard-format-strings)</ept>部分。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Values often require culture-sensitive formatting.</source>
          <target state="translated">值通常需要区分区域性的格式。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For example, in an application that uses numbers to reflect monetary values, numeric strings should include the current culture’s currency symbol, group separator (which, in most cultures, is the thousands separator), and decimal symbol.</source>
          <target state="translated">例如，在使用数字表示货币值的应用程序中，数字字符串应包括当前区域性的货币符号、组分隔符（在大多数区域性中，组分隔符为千位分隔符）和小数点符号。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For an example, see the <bpt id="p1">[</bpt>Culture-sensitive formatting with format providers and the IFormatProvider interface<ept id="p1">](#culture-sensitive-formatting-with-format-providers-and-the-iformatprovider-interface)</ept> section.</source>
          <target state="translated">有关示例，请参见<bpt id="p1">[</bpt>使用格式提供程序和 IFormatProvider 接口进行区分区域性的格式设置<ept id="p1">](#culture-sensitive-formatting-with-format-providers-and-the-iformatprovider-interface)</ept>部分。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>An application may have to display the same value in different ways.</source>
          <target state="translated">应用程序可能需要以不同方式显示相同的值。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For example, an application may represent an enumeration member by displaying a string representation of its name or by displaying its underlying value.</source>
          <target state="translated">例如，应用程序可能通过显示名称的字符串表示形式来表示一个枚举成员，或通过显示基础值来表示该枚举成员。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For an example that formats a member of the <bpt id="p1">[</bpt>DayOfWeek<ept id="p1">](xref:System.DayOfWeek)</ept> enumeration in different ways, see the <bpt id="p2">[</bpt>Standard format strings<ept id="p2">](#standard-format-strings)</ept> section.</source>
          <target state="translated">有关以不同方式设置 <bpt id="p1">[</bpt>DayOfWeek<ept id="p1">](xref:System.DayOfWeek)</ept> 枚举数量格式的示例，请参见<bpt id="p2">[</bpt>标准格式字符串<ept id="p2">](#standard-format-strings)</ept>部分。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>.NET provides rich formatting support that enables developers to address these requirements.</source>
          <target state="translated">.NET 提供了丰富的格式设置支持，使得开发人员可以满足这些要求。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Formatting converts the value of a type into a string representation.</source>
          <target state="translated">格式设置将类型的值转换为字符串表示形式。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Parsing is the inverse of formatting.</source>
          <target state="translated">分析是格式设置的反向操作。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>A parsing operation creates an instance of a data type from its string representation.</source>
          <target state="translated">分析操作根据数据类型的字符串表示形式创建该数据类型的实例。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For information about converting strings to other data types, see <bpt id="p1">[</bpt>Parsing strings<ept id="p1">](parsing-strings.md)</ept>.</source>
          <target state="translated">有关将字符串转换成其他数据类型的信息，请参见<bpt id="p1">[</bpt>分析字符串<ept id="p1">](parsing-strings.md)</ept>。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This overview contains the following sections:</source>
          <target state="translated">本概述包含以下几节：</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Formatting in .NET<ept id="p1">](#formatting-in-net)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>.NET 中的格式设置<ept id="p1">](#formatting-in-net)</ept></target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Default formatting using the ToString method<ept id="p1">](#default-formatting-using-the-tostring-method)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>使用 ToString 方法的默认格式设置<ept id="p1">](#default-formatting-using-the-tostring-method)</ept></target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Overriding the ToString method<ept id="p1">](#overriding-the-tostring-method)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>重写 ToString 方法<ept id="p1">](#overriding-the-tostring-method)</ept></target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>The ToString method and format strings<ept id="p1">](#the-tostring-method-and-format-strings)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>ToString 方法和格式字符串<ept id="p1">](#the-tostring-method-and-format-strings)</ept></target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Standard format strings<ept id="p1">](#standard-format-strings)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>标准格式字符串<ept id="p1">](#standard-format-strings)</ept></target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Custom format strings<ept id="p1">](#custom-format-strings)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>自定义格式字符串<ept id="p1">](#custom-format-strings)</ept></target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Format strings and .NET types<ept id="p1">](#format-strings-and-net-types)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>格式字符串和 .NET 类型<ept id="p1">](#format-strings-and-net-types)</ept></target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Culture-sensitive formatting with format providers and the IFormatProvider interface<ept id="p1">](#culture-sensitive-formatting-with-format-providers-and-the-iformatprovider-interface)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>使用格式提供程序和 IFormatProvider 接口的区分区域性的格式设置<ept id="p1">](#culture-sensitive-formatting-with-format-providers-and-the-iformatprovider-interface)</ept></target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Culture-sensitive formatting of numeric values<ept id="p1">](#culture-sensitive-formatting-of-numeric-values)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>数值的区分区域性的格式设置<ept id="p1">](#culture-sensitive-formatting-of-numeric-values)</ept></target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Culture-sensitive formatting of date and time values<ept id="p1">](#culture-sensitive-formatting-of-date-and-time-values)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>日期和时间值的区分区域性的格式设置<ept id="p1">](#culture-sensitive-formatting-of-date-and-time-values)</ept></target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>The IFormattable interface<ept id="p1">](#the-iformattable-interface)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>IFormattable 接口<ept id="p1">](#the-iformattable-interface)</ept></target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Composite formatting<ept id="p1">](#composite-formatting)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>复合格式设置<ept id="p1">](#composite-formatting)</ept></target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Custom formatting with ICustomFormatter<ept id="p1">](#custom-formatting-with-icustomformatter)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>使用 ICustomFormatter 进行自定义格式设置<ept id="p1">](#custom-formatting-with-icustomformatter)</ept></target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Related topics<ept id="p1">](#related-topics)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>相关主题<ept id="p1">](#related-topics)</ept></target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Reference<ept id="p1">](#reference)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>参考<ept id="p1">](#reference)</ept></target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Formatting in .NET</source>
          <target state="translated">.NET 中的格式设置</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The basic mechanism for formatting is the default implementation of the <bpt id="p1">[</bpt>Object.ToString<ept id="p1">](xref:System.Object.ToString)</ept> method, which is discussed in the <bpt id="p2">[</bpt>Default formatting using the ToString method<ept id="p2">](#default-formatting-using-the-tostring-method)</ept> section later in this topic.</source>
          <target state="translated">格式设置的基本机制是 <bpt id="p1">[</bpt>Object.ToString<ept id="p1">](xref:System.Object.ToString)</ept> 方法的默认实现，该方法在本主题后面的<bpt id="p2">[</bpt>使用 ToString 方法的默认格式设置<ept id="p2">](#default-formatting-using-the-tostring-method)</ept>部分中讨论。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>However, .NET provides several ways to modify and extend its default formatting support.</source>
          <target state="translated">不过，.NET 提供了几种方法来修改和扩展其默认格式设置支持。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>These include the following:</source>
          <target state="translated">这些要求包括：</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Overriding the <bpt id="p1">[</bpt>Object.ToString<ept id="p1">](xref:System.Object.ToString)</ept> method to define a custom string representation of an object’s value.</source>
          <target state="translated">重写 <bpt id="p1">[</bpt>Object.ToString<ept id="p1">](xref:System.Object.ToString)</ept> 方法以定义对象值的自定义字符串表示形式。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>Overriding the ToString method<ept id="p1">](#overriding-the-tostring-method)</ept> section later in this topic.</source>
          <target state="translated">有关更多信息，请参见本主题后面 <bpt id="p1">[</bpt>重写 ToString 方法<ept id="p1">](#overriding-the-tostring-method)</ept>部分。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Defining format specifiers that enable the string representation of an object’s value to take multiple forms.</source>
          <target state="translated">定义格式说明符，格式说明符允许对象值的字符串表示形式采用多种形式。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For example, the "X" format specifier in the following statement converts an integer to the string representation of a hexadecimal value.</source>
          <target state="translated">例如，以下语句中的“X”格式说明符将整数转换为十六进制值的字符串表示形式。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For more information about format specifiers, see the <bpt id="p1">[</bpt>The ToString method and format strings<ept id="p1">](#the-tostring-method-and-format-strings)</ept> section.</source>
          <target state="translated">有关格式说明符的更多信息，请参见 <bpt id="p1">[</bpt>ToString 方法和格式字符串<ept id="p1">](#the-tostring-method-and-format-strings)</ept>部分。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Using format providers to take advantage of the formatting conventions of a specific culture.</source>
          <target state="translated">使用格式提供程序以利用特定区域性的格式设置约定。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For example, the following statement displays a currency value by using the formatting conventions of the en-US culture.</source>
          <target state="translated">例如，以下语句通过使用 en-US 区域性的格式设置约定来显示货币值。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>For more information about formatting with format providers, see the <bpt id="p1">[</bpt>Culture-sensitive formatting with format providers and the IFormatProvider interface<ept id="p1">](#culture-sensitive-formatting-with-format-providers-and-the-iformatprovider-interface)</ept> section.</source>
          <target state="translated">有关使用格式提供程序进行格式设置的更多信息，请参见<bpt id="p1">[</bpt>使用格式提供程序和 IFormatProvider 接口的区分区域性的格式设置<ept id="p1">](#culture-sensitive-formatting-with-format-providers-and-the-iformatprovider-interface)</ept>部分。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Implementing the <bpt id="p1">[</bpt>IFormattable<ept id="p1">](xref:System.IFormattable)</ept> interface to support both string conversion with the <bpt id="p2">[</bpt>Convert<ept id="p2">](xref:System.Convert)</ept> class and composite formatting.</source>
          <target state="translated">实现 <bpt id="p1">[</bpt>IFormattable<ept id="p1">](xref:System.IFormattable)</ept> 接口可以支持使用 <bpt id="p2">[</bpt>Convert<ept id="p2">](xref:System.Convert)</ept> 类的字符串转换以及复合格式设置。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>The IFormattable interface<ept id="p1">](#the-iformattable-interface)</ept> section.</source>
          <target state="translated">有关更多信息，请参见 <bpt id="p1">[</bpt>IFormattable 接口<ept id="p1">](#the-iformattable-interface)</ept>部分。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Using composite formatting to embed the string representation of a value in a larger string.</source>
          <target state="translated">使用复合格式设置来嵌入较大字符串中值的字符串表示形式。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>Composite formatting<ept id="p1">](#composite-formatting)</ept> section.</source>
          <target state="translated">有关更多信息，请参见<bpt id="p1">[</bpt>复合格式设置<ept id="p1">](#composite-formatting)</ept>部分。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Implementing <bpt id="p1">[</bpt>ICustomFormatter<ept id="p1">](xref:System.ICustomFormatter)</ept> and <bpt id="p2">[</bpt>IFormatProvider<ept id="p2">](xref:System.IFormatProvider)</ept> to provide a complete custom formatting solution.</source>
          <target state="translated">实现 <bpt id="p1">[</bpt>ICustomFormatter<ept id="p1">](xref:System.ICustomFormatter)</ept> 和 <bpt id="p2">[</bpt>IFormatProvider<ept id="p2">](xref:System.IFormatProvider)</ept> 可以提供完全自定义的格式设置解决方案。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>Custom formatting with ICustomFormatter<ept id="p1">](#custom-formatting-with-icustomformatter)</ept> section.</source>
          <target state="translated">有关更多信息，请参见<bpt id="p1">[</bpt>使用 ICustomFormatter 进行自定义格式设置<ept id="p1">](#custom-formatting-with-icustomformatter)</ept>部分。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The following sections examine these methods for converting an object to its string representation.</source>
          <target state="translated">以下各部分分别使用这些方法来将对象转换为其字符串表示形式。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Default formatting using the ToString method</source>
          <target state="translated">使用 ToString 方法的默认格式设置</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Every type that is derived from <bpt id="p1">[</bpt>System.Object<ept id="p1">](xref:System.Object)</ept> automatically inherits a parameterless <bpt id="p2">[</bpt>ToString<ept id="p2">](xref:System.Object.ToString)</ept> method, which returns the name of the type by default.</source>
          <target state="translated">每个从 <bpt id="p1">[</bpt>System.Object<ept id="p1">](xref:System.Object)</ept> 派生的类型都自动继承无参数的 <bpt id="p2">[</bpt>ToString<ept id="p2">](xref:System.Object.ToString)</ept> 方法，该方法在默认情况下返回类型的名称。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The following example illustrates the default <bpt id="p1">[</bpt>ToString<ept id="p1">](xref:System.Object.ToString)</ept> method.</source>
          <target state="translated">下面的示例演示默认 <bpt id="p1">[</bpt>ToString<ept id="p1">](xref:System.Object.ToString)</ept> 方法。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>It defines a class named <ph id="ph1">`Automobile`</ph> that has no implementation.</source>
          <target state="translated">它定义一个名为 <ph id="ph1">`Automobile`</ph>、不具有实现的类。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>When the class is instantiated and its <bpt id="p1">[</bpt>ToString<ept id="p1">](xref:System.Object.ToString)</ept> method is called, it displays its type name.</source>
          <target state="translated">当对该类进行实例化并调用其 <bpt id="p1">[</bpt>ToString<ept id="p1">](xref:System.Object.ToString)</ept> 方法时，它显示其类型名称。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Note that the <bpt id="p1">[</bpt>ToString<ept id="p1">](xref:System.Object.ToString)</ept> method is not explicitly called in the example.</source>
          <target state="translated">请注意，此示例中未显式调用 <bpt id="p1">[</bpt>ToString<ept id="p1">](xref:System.Object.ToString)</ept> 方法。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Console.WriteLine(Object)<ept id="p1">](xref:System.Console.WriteLine(System.Object))</ept> method implicitly calls the <bpt id="p2">[</bpt>ToString<ept id="p2">](xref:System.Object.ToString)</ept> method of the object passed to it as an argument.</source>
          <target state="translated"><bpt id="p1">[</bpt>Console.WriteLine(Object)<ept id="p1">](xref:System.Console.WriteLine(System.Object))</ept> 方法隐式调用作为参数传递给它的对象的 <bpt id="p2">[</bpt>ToString<ept id="p2">](xref:System.Object.ToString)</ept> 方法。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Because all types other than interfaces are derived from <bpt id="p1">[</bpt>Object<ept id="p1">](xref:System.Object)</ept>, this functionality is automatically provided to your custom classes or structures.</source>
          <target state="translated">由于除接口以外的所有类型都派生自 <bpt id="p1">[</bpt>Object<ept id="p1">](xref:System.Object)</ept>，因此会向自定义类或结构自动提供此功能。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>However, the functionality offered by the default <bpt id="p1">[</bpt>ToString<ept id="p1">](xref:System.Object.ToString)</ept> method, is limited: Although it identifies the type, it fails to provide any information about an instance of the type.</source>
          <target state="translated">但是，由默认 <bpt id="p1">[</bpt>ToString<ept id="p1">](xref:System.Object.ToString)</ept> 方法提供的功能具有以下限制：尽管它标识类型，但无法提供有关该类型的实例的任何信息。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>To provide a string representation of an object that provides information about that object, you must override the <bpt id="p1">[</bpt>ToString<ept id="p1">](xref:System.Object.ToString)</ept> method.</source>
          <target state="translated">若要提供可提供该对象相关信息的对象的字符串表示形式，必须重写 <bpt id="p1">[</bpt>ToString<ept id="p1">](xref:System.Object.ToString)</ept> 方法。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Structures inherit from <bpt id="p1">[</bpt>ValueType<ept id="p1">](xref:System.ValueType)</ept>, which in turn is derived from <bpt id="p2">[</bpt>Object<ept id="p2">](xref:System.Object)</ept>.</source>
          <target state="translated">结构继承自 <bpt id="p1">[</bpt>ValueType<ept id="p1">](xref:System.ValueType)</ept>，而后者又派生自 <bpt id="p2">[</bpt>Object<ept id="p2">](xref:System.Object)</ept>。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Although <bpt id="p1">[</bpt>ValueType<ept id="p1">](xref:System.ValueType)</ept> overrides <bpt id="p2">[</bpt>Object.ToString<ept id="p2">](xref:System.Object.ToString)</ept>, its implementation is identical.</source>
          <target state="translated">虽然 <bpt id="p1">[</bpt>ValueType<ept id="p1">](xref:System.ValueType)</ept> 会重写 <bpt id="p2">[</bpt>Object.ToString<ept id="p2">](xref:System.Object.ToString)</ept>，但是其实现是相同。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Overriding the ToString method</source>
          <target state="translated">重写 ToString 方法</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Displaying the name of a type is often of limited use and does not allow consumers of your types to differentiate one instance from another.</source>
          <target state="translated">显示类型的名称这一用法往往有限，它不允许类型使用者区分实例。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>However, you can override the <bpt id="p1">[</bpt>ToString<ept id="p1">](xref:System.Object.ToString)</ept> method to provide a more useful representation of an object’s value.</source>
          <target state="translated">但是，你可以重写 <bpt id="p1">[</bpt>ToString<ept id="p1">](xref:System.Object.ToString)</ept> 方法，以提供更有用的对象值表示形式。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The following example defines a <ph id="ph1">`Temperature`</ph> object and overrides its <bpt id="p1">[</bpt>ToString<ept id="p1">](xref:System.Object.ToString)</ept> method to display the temperature in degrees Celsius.</source>
          <target state="translated">下面的示例定义 <ph id="ph1">`Temperature`</ph> 对象并重写其 <bpt id="p1">[</bpt>ToString<ept id="p1">](xref:System.Object.ToString)</ept> 方法，以便以摄氏度显示温度。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>In .NET, the <bpt id="p1">[</bpt>ToString<ept id="p1">](xref:System.Object.ToString)</ept> method of each primitive value type has been overridden to display the object’s value instead of its name.</source>
          <target state="translated">在 .NET 中，已重写每个基元值类型的 <bpt id="p1">[</bpt>ToString<ept id="p1">](xref:System.Object.ToString)</ept> 方法来显示对象的值而非其名称。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The following table shows the override for each primitive type.</source>
          <target state="translated">下表显示每种基元类型的重写。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Note that most of the overridden methods call another overload of the <bpt id="p1">[</bpt>ToString<ept id="p1">](xref:System.Object.ToString)</ept> method and pass it the "G" format specifier, which defines the general format for its type, and an <bpt id="p2">[</bpt>IFormatProvider<ept id="p2">](xref:System.IFormatProvider)</ept> object that represents the current culture.</source>
          <target state="translated">请注意，大多数重写方法调用 <bpt id="p1">[</bpt>ToString<ept id="p1">](xref:System.Object.ToString)</ept> 方法的另一个重载并向其传递用于定义其类型的一般格式的“G”格式说明符和表示当前区域性的 <bpt id="p2">[</bpt>IFormatProvider<ept id="p2">](xref:System.IFormatProvider)</ept> 对象。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Type</source>
          <target state="translated">类型</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>ToString override</source>
          <target state="translated">ToString 重写</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Boolean<ept id="p1">](xref:System.Boolean)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>布尔值<ept id="p1">](xref:System.Boolean)</ept></target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Returns either <bpt id="p1">[</bpt>Boolean.TrueString<ept id="p1">](xref:System.Boolean.TrueString)</ept> or <bpt id="p2">[</bpt>Boolean.FalseString<ept id="p2">](xref:System.Boolean.FalseString)</ept>.</source>
          <target state="translated">返回 <bpt id="p1">[</bpt>Boolean.TrueString<ept id="p1">](xref:System.Boolean.TrueString)</ept> 或 <bpt id="p2">[</bpt>Boolean.FalseString<ept id="p2">](xref:System.Boolean.FalseString)</ept>。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Byte<ept id="p1">](xref:System.Byte)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Byte<ept id="p1">](xref:System.Byte)</ept></target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Calls <ph id="ph1">`Byte.ToString("G", NumberFormatInfo.CurrentInfo)`</ph> to format the <bpt id="p1">[</bpt>Byte<ept id="p1">](xref:System.Byte)</ept> value for the current culture.</source>
          <target state="translated">调用 <ph id="ph1">`Byte.ToString("G", NumberFormatInfo.CurrentInfo)`</ph> 可以为当前区域性设置 <bpt id="p1">[</bpt>Byte<ept id="p1">](xref:System.Byte)</ept> 值的格式。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Char<ept id="p1">](xref:System.Char)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Char<ept id="p1">](xref:System.Char)</ept></target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Returns the character as a string.</source>
          <target state="translated">以字符串形式返回字符。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>DateTime<ept id="p1">](xref:System.DateTime)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>DateTime<ept id="p1">](xref:System.DateTime)</ept></target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Calls <ph id="ph1">`DateTime.ToString("G", DatetimeFormatInfo.CurrentInfo)`</ph> to format the date and time value for the current culture.</source>
          <target state="translated">调用 <ph id="ph1">`DateTime.ToString("G", DatetimeFormatInfo.CurrentInfo)`</ph> 可以为当前区域性设置日期和时间值的格式。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Decimal<ept id="p1">](xref:System.Decimal)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>小数<ept id="p1">](xref:System.Decimal)</ept></target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Calls <ph id="ph1">`Decimal.ToString("G", NumberFormatInfo.CurrentInfo)`</ph> to format the <bpt id="p1">[</bpt>Decimal<ept id="p1">](xref:System.Decimal)</ept> value for the current culture.</source>
          <target state="translated">调用 <ph id="ph1">`Decimal.ToString("G", NumberFormatInfo.CurrentInfo)`</ph> 可以为当前区域性设置 <bpt id="p1">[</bpt>Decimal<ept id="p1">](xref:System.Decimal)</ept> 值的格式。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Double<ept id="p1">](xref:System.Double)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>双精度<ept id="p1">](xref:System.Double)</ept></target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Calls <ph id="ph1">`Double.ToString("G", NumberFormatInfo.CurrentInfo)`</ph> to format the <bpt id="p1">[</bpt>Double<ept id="p1">](xref:System.Double)</ept> value for the current culture.</source>
          <target state="translated">调用 <ph id="ph1">`Double.ToString("G", NumberFormatInfo.CurrentInfo)`</ph> 可以为当前区域性设置 <bpt id="p1">[</bpt>Double<ept id="p1">](xref:System.Double)</ept> 值的格式。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Int16<ept id="p1">](xref:System.Int16)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Int16<ept id="p1">](xref:System.Int16)</ept></target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Calls <ph id="ph1">`Int16.ToString("G", NumberFormatInfo.CurrentInfo)`</ph> to format the <bpt id="p1">[</bpt>Int16<ept id="p1">](xref:System.Int16)</ept> value for the current culture.</source>
          <target state="translated">调用 <ph id="ph1">`Int16.ToString("G", NumberFormatInfo.CurrentInfo)`</ph> 可以为当前区域性设置 <bpt id="p1">[</bpt>Int16<ept id="p1">](xref:System.Int16)</ept> 值的格式。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Int32<ept id="p1">](xref:System.Int32)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Int32<ept id="p1">](xref:System.Int32)</ept></target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Calls <ph id="ph1">`Int16.ToString("G", NumberFormatInfo.CurrentInfo)`</ph> to format the <bpt id="p1">[</bpt>Int32<ept id="p1">](xref:System.Int32)</ept> value for the current culture.</source>
          <target state="translated">调用 <ph id="ph1">`Int16.ToString("G", NumberFormatInfo.CurrentInfo)`</ph> 可以为当前区域性设置 <bpt id="p1">[</bpt>Int32<ept id="p1">](xref:System.Int32)</ept> 值的格式。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Int64<ept id="p1">](xref:System.Int64)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Int64<ept id="p1">](xref:System.Int64)</ept></target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Calls <ph id="ph1">`Int16.ToString("G", NumberFormatInfo.CurrentInfo)`</ph> to format the <bpt id="p1">[</bpt>Int64<ept id="p1">](xref:System.Int64)</ept> value for the current culture.</source>
          <target state="translated">调用 <ph id="ph1">`Int16.ToString("G", NumberFormatInfo.CurrentInfo)`</ph> 可以为当前区域性设置 <bpt id="p1">[</bpt>Int64<ept id="p1">](xref:System.Int64)</ept> 值的格式。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>SByte<ept id="p1">](xref:System.SByte)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>SByte<ept id="p1">](xref:System.SByte)</ept></target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Calls <ph id="ph1">`Int16.ToString("G", NumberFormatInfo.CurrentInfo)`</ph> to format the <bpt id="p1">[</bpt>SByte<ept id="p1">](xref:System.SByte)</ept></source>
          <target state="translated">调用 <ph id="ph1">`Int16.ToString("G", NumberFormatInfo.CurrentInfo)`</ph> 可以为当前区域性设置 <bpt id="p1">[</bpt>SByte<ept id="p1">](xref:System.SByte)</ept></target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>value for the current culture.</source>
          <target state="translated">值的格式。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Single<ept id="p1">](xref:System.Single)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>单精度<ept id="p1">](xref:System.Single)</ept></target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Calls <ph id="ph1">`Int16.ToString("G", NumberFormatInfo.CurrentInfo)`</ph> to format the <bpt id="p1">[</bpt>Single<ept id="p1">](xref:System.Single)</ept> value for the current culture.</source>
          <target state="translated">调用 <ph id="ph1">`Int16.ToString("G", NumberFormatInfo.CurrentInfo)`</ph> 可以为当前区域性设置 <bpt id="p1">[</bpt>Single<ept id="p1">](xref:System.Single)</ept> 值的格式。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>UInt32<ept id="p1">](xref:System.UInt32)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>UInt32<ept id="p1">](xref:System.UInt32)</ept></target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Calls <ph id="ph1">`Int16.ToString("G", NumberFormatInfo.CurrentInfo)`</ph> to format the <bpt id="p1">[</bpt>UInt32<ept id="p1">](xref:System.UInt32)</ept>value for the current culture.</source>
          <target state="translated">调用 <ph id="ph1">`Int16.ToString("G", NumberFormatInfo.CurrentInfo)`</ph> 可以为当前区域性设置 <bpt id="p1">[</bpt>UInt32<ept id="p1">](xref:System.UInt32)</ept> 值的格式。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>UInt32<ept id="p1">](xref:System.UInt32)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>UInt32<ept id="p1">](xref:System.UInt32)</ept></target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Calls <ph id="ph1">`Int16.ToString("G", NumberFormatInfo.CurrentInfo)`</ph> to format the <bpt id="p1">[</bpt>UInt32<ept id="p1">](xref:System.UInt32)</ept> value for the current culture.</source>
          <target state="translated">调用 <ph id="ph1">`Int16.ToString("G", NumberFormatInfo.CurrentInfo)`</ph> 可以为当前区域性设置 <bpt id="p1">[</bpt>UInt32<ept id="p1">](xref:System.UInt32)</ept> 值的格式。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>UInt64<ept id="p1">](xref:System.UInt64)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>UInt64<ept id="p1">](xref:System.UInt64)</ept></target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Calls <ph id="ph1">`Int16.ToString("G", NumberFormatInfo.CurrentInfo)`</ph> to format the <bpt id="p1">[</bpt>UInt64<ept id="p1">](xref:System.UInt64)</ept>  value for the current culture.</source>
          <target state="translated">调用 <ph id="ph1">`Int16.ToString("G", NumberFormatInfo.CurrentInfo)`</ph> 可以为当前区域性设置 <bpt id="p1">[</bpt>UInt64<ept id="p1">](xref:System.UInt64)</ept> 值的格式。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The ToString method and format strings</source>
          <target state="translated">ToString 方法和格式字符串</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Relying on the default <bpt id="p1">[</bpt>ToString<ept id="p1">](xref:System.Object.ToString)</ept> method or overriding <bpt id="p2">[</bpt>ToString<ept id="p2">](xref:System.Object.ToString)</ept> is appropriate when an object has a single string representation.</source>
          <target state="translated">对象具有单一字符串表示形式时，可以依赖于默认 <bpt id="p1">[</bpt>ToString<ept id="p1">](xref:System.Object.ToString)</ept> 方法或重写 <bpt id="p2">[</bpt>ToString<ept id="p2">](xref:System.Object.ToString)</ept>。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>However, the value of an object often has multiple representations.</source>
          <target state="translated">但是，对象的值通常具有多种表示形式。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>For example, a temperature can be expressed in degrees Fahrenheit, degrees Celsius, or kelvins.</source>
          <target state="translated">例如，温度可以用华氏度、摄氏度或开氏度来表示。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Similarly, the integer value 10 can be represented in numerous ways, including 10, 10.0, 1.0e01, or $10.00.</source>
          <target state="translated">同样，整数值 10 可以表示为多种形式，包括 10、10.0、1.0e01 或 $10.00。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>To enable a single value to have multiple string representations, .NET uses format strings.</source>
          <target state="translated">为了允许单个值具有多种字符串表示形式，.NET 使用格式字符串。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>A format string is a string that contains one or more predefined format specifiers, which are single characters or groups of characters that define how the <bpt id="p1">[</bpt>ToString<ept id="p1">](xref:System.Object.ToString)</ept> method should format its output.</source>
          <target state="translated">格式字符串是包含一个或多个预定义格式说明符的字符串，这些格式说明符是单一字符或字符组，用于定义 <bpt id="p1">[</bpt>ToString<ept id="p1">](xref:System.Object.ToString)</ept> 方法应如何设置其输出格式。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The format string is then passed as a parameter to the object's <bpt id="p1">[</bpt>ToString<ept id="p1">](xref:System.Object.ToString)</ept> method and determines how the string representation of that object's value should appear.</source>
          <target state="translated">然后将格式字符串作为参数传递给对象的 <bpt id="p1">[</bpt>ToString<ept id="p1">](xref:System.Object.ToString)</ept> 方法，并确定应如何显示该对象值的字符串表示形式。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>All numeric types, date and time types, and enumeration types in .NET support a predefined set of format specifiers.</source>
          <target state="translated">.NET 中的所有数字类型、日期和时间类型以及枚举类型都支持一组预定义的格式说明符。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>You can also use format strings to define multiple string representations of your application-defined data types.</source>
          <target state="translated">还可以使用格式字符串定义你应用程序所定义的数据类型的多种字符串表示形式。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Standard format strings</source>
          <target state="translated">标准格式字符串</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>A standard format string contains a single format specifier, which is an alphabetic character that defines the string representation of the object to which it is applied, along with an optional precision specifier that affects how many digits are displayed in the result string.</source>
          <target state="translated">标准格式字符串包含单个格式说明符，该格式说明符是一个字母字符，用于定义应用该格式说明符的对象的字符串表示形式，此外，它还包含一个可选的精度说明符，该精度说明符影响在结果字符串中显示的位数。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>If the precision specifier is omitted or is not supported, a standard format specifier is equivalent to a standard format string.</source>
          <target state="translated">如果省略或不支持精度说明符，则标准格式说明符等效于标准格式字符串。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>.NET defines a set of standard format specifiers for all numeric types, all date and time types, and all enumeration types.</source>
          <target state="translated">.NET 为所有数字类型、所有日期和时间类型以及所有枚举类型定义一组标准格式说明符。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>For example, each of these categories supports a "G" standard format specifier, which defines a general string representation of a value of that type.</source>
          <target state="translated">例如，这些类别中的每一类别都支持“G”标准格式说明符，该标准格式说明符定义该类型的值的一般字符串表示形式。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Standard format strings for enumeration types directly control the string representation of a value.</source>
          <target state="translated">枚举类型的标准格式字符串直接控制值的字符串表示形式。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The format strings passed to an enumeration value’s <bpt id="p1">[</bpt>ToString<ept id="p1">](xref:System.Object.ToString)</ept> method determine whether the value is displayed using its string name (the "G" and "F" format specifiers), its underlying integral value (the "D" format specifier), or its hexadecimal value (the "X" format specifier).</source>
          <target state="translated">传递给枚举值的 <bpt id="p1">[</bpt>ToString<ept id="p1">](xref:System.Object.ToString)</ept> 方法的格式字符串决定是使用其字符串名称（“G”和“F”格式说明符）、基础整数值（“D”格式说明符）还是十六进制值（“X”格式说明符）来显示值。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The following example illustrates the use of standard format strings to format a <bpt id="p1">[</bpt>DayOfWeek<ept id="p1">](xref:System.DayOfWeek)</ept> enumeration value.</source>
          <target state="translated">下面的示例演示如何使用标准格式字符串来设置 <bpt id="p1">[</bpt>DayOfWeek<ept id="p1">](xref:System.DayOfWeek)</ept> 枚举值的格式。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>For information about enumeration format strings, see <bpt id="p1">[</bpt>Enumeration format strings<ept id="p1">](enumeration-format.md)</ept>.</source>
          <target state="translated">有关枚举格式字符串的信息，请参阅<bpt id="p1">[</bpt>枚举格式字符串<ept id="p1">](enumeration-format.md)</ept>。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Standard format strings for numeric types usually define a result string whose precise appearance is controlled by one or more property values.</source>
          <target state="translated">数字类型的标准格式字符串通常定义一个结果字符串，该结果字符串的确切显示由一个或多个属性值控制。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>For example, the "C" format specifier formats a number as a currency value.</source>
          <target state="translated">例如，“C”格式说明符会将数字的格式设置为货币值。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>When you call the <bpt id="p1">[</bpt>ToString<ept id="p1">](xref:System.Object.ToString)</ept> method with the "C" format specifier as the only parameter, the following property values from the current culture’s <bpt id="p2">[</bpt>NumberFormatInfo<ept id="p2">](xref:System.Globalization.NumberFormatInfo)</ept> object are used to define the string representation of the numeric value:</source>
          <target state="translated">调用 <bpt id="p1">[</bpt>ToString<ept id="p1">](xref:System.Object.ToString)</ept> 方法并使用“C”格式说明符作为唯一参数时，来自当前区域性的 <bpt id="p2">[</bpt>NumberFormatInfo<ept id="p2">](xref:System.Globalization.NumberFormatInfo)</ept> 对象的以下属性值用于定义数字值的字符串表示形式：</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>CurrencySymbol<ept id="p1">](xref:System.Globalization.NumberFormatInfo.CurrencySymbol)</ept> property, which specifies the current culture’s currency symbol.</source>
          <target state="translated"><bpt id="p1">[</bpt>CurrencySymbol<ept id="p1">](xref:System.Globalization.NumberFormatInfo.CurrencySymbol)</ept> 属性，指定当前区域性的货币符号。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>CurrencyNegativePattern<ept id="p1">](xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern)</ept> or <bpt id="p2">[</bpt>CurrencyPositivePattern<ept id="p2">](xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern)</ept> property, which returns an integer that determines the following:</source>
          <target state="translated"><bpt id="p1">[</bpt>CurrencyNegativePattern<ept id="p1">](xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern)</ept> 或 <bpt id="p2">[</bpt>CurrencyPositivePattern<ept id="p2">](xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern)</ept> 属性，返回用于确定以下方面的一个整数：</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The placement of the currency symbol.</source>
          <target state="translated">货币符号的位置。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Whether negative values are indicated by a leading negative sign, a trailing negative sign, or parentheses.</source>
          <target state="translated">负值由前导负号、尾随负号还是括号来表示。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Whether a space appears between the numeric value and the currency symbol.</source>
          <target state="translated">在数字值和货币符号之间是否有空格。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>CurrencyDecimalDigits<ept id="p1">](xref:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits)</ept> property, which defines the number of fractional digits in the result string.</source>
          <target state="translated"><bpt id="p1">[</bpt>CurrencyDecimalDigits<ept id="p1">](xref:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits)</ept> 属性，定义结果字符串中的小数位数。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>CurrencyDecimalSeparator<ept id="p1">](xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator)</ept> property, which defines the decimal separator symbol in the result string.</source>
          <target state="translated"><bpt id="p1">[</bpt>CurrencyDecimalSeparator<ept id="p1">](xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator)</ept> 属性，定义结果字符串中的小数分隔符符号。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>CurrencyGroupSeparator<ept id="p1">](xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator)</ept> property, which defines the group separator symbol.</source>
          <target state="translated"><bpt id="p1">[</bpt>CurrencyGroupSeparator<ept id="p1">](xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator)</ept> 属性，定义组分隔符符号。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>CurrencyGroupSizes<ept id="p1">](xref:System.Globalization.NumberFormatInfo.CurrencyGroupSizes)</ept> property, which defines the number of digits in each group to the left of the decimal.</source>
          <target state="translated"><bpt id="p1">[</bpt>CurrencyGroupSizes<ept id="p1">](xref:System.Globalization.NumberFormatInfo.CurrencyGroupSizes)</ept> 属性，定义小数点左边每个组的数字位数。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>NegativeSign<ept id="p1">](xref:System.Globalization.NumberFormatInfo.NegativeSign)</ept> property, which determines the negative sign used in the result string if parentheses are not used to indicate negative values.</source>
          <target state="translated"><bpt id="p1">[</bpt>NegativeSign<ept id="p1">](xref:System.Globalization.NumberFormatInfo.NegativeSign)</ept> 属性，确定在未使用括号表示负值时结果字符串中使用的负号。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>In addition, numeric format strings may include a precision specifier.</source>
          <target state="translated">此外，数字格式字符串可以包含一个精度说明符。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>The meaning of this specifier depends on the format string with which it is used, but it typically indicates either the total number of digits or the number of fractional digits that should appear in the result string.</source>
          <target state="translated">该说明符的含义取决于与其一起使用的格式字符串，但是，它通常指示应在结果字符串中显示的总位数或小数位数。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>For example, the following example uses the "X4" standard numeric string and a precision specifier to create a string value that has four hexadecimal digits.</source>
          <target state="translated">例如，下面的示例使用“X4”标准数字字符串和精度说明符来创建具有四个十六进制位的字符串值。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>For more information about standard numeric formatting strings, see <bpt id="p1">[</bpt>Standard numeric format strings<ept id="p1">](standard-numeric.md)</ept>.</source>
          <target state="translated">有关标准数字格式字符串的更多信息，请参见<bpt id="p1">[</bpt>标准数字格式字符串<ept id="p1">](standard-numeric.md)</ept>。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Standard format strings for date and time values are aliases for custom format strings stored by a particular <bpt id="p1">[</bpt>DateTimeFormatInfo<ept id="p1">](xref:System.Globalization.DateTimeFormatInfo)</ept> class.</source>
          <target state="translated">日期和时间值的标准格式字符串是由特定 <bpt id="p1">[</bpt>DateTimeFormatInfo<ept id="p1">](xref:System.Globalization.DateTimeFormatInfo)</ept> 属性存储的自定义格式字符串的别名。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>For example, calling the <bpt id="p1">[</bpt>ToString<ept id="p1">](xref:System.Object.ToString)</ept> method of a date and time value with the "D" format specifier displays the date and time by using the custom format string stored in the current culture’s <bpt id="p2">[</bpt>DateTimeFormatInfo.LongDatePattern<ept id="p2">](xref:System.Globalization.DateTimeFormatInfo.LongDatePattern)</ept> property.</source>
          <target state="translated">例如，如果使用“D”格式说明符调用日期和时间值的 <bpt id="p1">[</bpt>ToString<ept id="p1">](xref:System.Object.ToString)</ept> 方法，则使用当前区域性的 <bpt id="p2">[</bpt>DateTimeFormatInfo.LongDatePattern<ept id="p2">](xref:System.Globalization.DateTimeFormatInfo.LongDatePattern)</ept> 属性中存储的自定义格式字符串来显示日期和时间。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>(For more information about custom format strings, see the <bpt id="p1">[</bpt>Custom format strings<ept id="p1">](#custom-format-strings)</ept> section.) The following example illustrates this relationship.</source>
          <target state="translated">（有关自定义格式字符串的更多信息，请参见<bpt id="p1">[</bpt>自定义格式字符串<ept id="p1">](#custom-format-strings)</ept>部分。）下面的示例阐释了此关系。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>For more information about standard date and time format strings, see <bpt id="p1">[</bpt>Standard date and time format strings<ept id="p1">](standard-datetime.md)</ept>.</source>
          <target state="translated">有关标准日期和时间格式字符串的更多信息，请参见<bpt id="p1">[</bpt>标准日期和时间格式字符串<ept id="p1">](standard-datetime.md)</ept>。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>You can also use standard format strings to define the string representation of an application-defined object that is produced by the object’s <ph id="ph1">`ToString(String)`</ph> method.</source>
          <target state="translated">还可以使用标准格式字符串来定义应用程序所定义的对象的字符串表示形式，它由对象的 <ph id="ph1">`ToString(String)`</ph> 方法生成。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>You can define the specific standard format specifiers that your object supports, and you can determine whether they are case-sensitive or case-insensitive.</source>
          <target state="translated">可以定义对象支持的特定标准格式说明符，还可以决定这些格式说明符是否区分大小写。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Your implementation of the <ph id="ph1">`ToString(String)`</ph> method should support the following:</source>
          <target state="translated"><ph id="ph1">`ToString(String)`</ph> 方法的实现应支持下列各项：</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>A "G" format specifier that represents a customary or common format of the object.</source>
          <target state="translated">一个“G”格式说明符，表示对象的常用或通用格式。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>The parameterless overload of your object's <ph id="ph1">`ToString`</ph> method should call its <ph id="ph2">`ToString(String)`</ph> overload and pass it the "G" standard format string.</source>
          <target state="translated">对象的 <ph id="ph1">`ToString`</ph> 方法的无参数重载应调用其 <ph id="ph2">`ToString(String)`</ph> 重载，并向其传递“G”标准格式字符串。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Support for a format specifier that is equal to a null reference.</source>
          <target state="translated">支持等于空引用的格式说明符。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>A format specifier that is equal to a null reference should be considered equivalent to the "G" format specifier.</source>
          <target state="translated">应视等于空引用的格式说明符与“G”格式说明符等效。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>For example, a <ph id="ph1">`Temperature`</ph> class can internally store the temperature in degrees Celsius and use format specifiers to represent the value of the <ph id="ph2">`Temperature`</ph> object in degrees Celsius, degrees Fahrenheit, and kelvins.</source>
          <target state="translated">例如，<ph id="ph1">`Temperature`</ph> 类可以用摄氏度在内部存储温度，并使用格式限定符以摄氏度、华氏度和开氏度表示 <ph id="ph2">`Temperature`</ph> 对象的值。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>The following example provides an illustration.</source>
          <target state="translated">下面的示例进行了这方面的演示。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Custom format strings</source>
          <target state="translated">自定义格式字符串</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>In addition to the standard format strings, .NET defines custom format strings for both numeric values and date and time values.</source>
          <target state="translated">除了标准格式字符串之外，.NET 还为数字值以及日期和时间值定义了自定义格式字符串。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>A custom format string consists of one or more custom format specifiers that define the string representation of a value.</source>
          <target state="translated">自定义格式字符串由定义值的字符串表示形式的一个或多个自定义格式说明符组成。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>For example, the custom date and time format string "yyyy/mm/dd hh:mm:ss.ffff t zzz" converts a date to its string representation in the form "2008/11/15 07:45:00.0000 P -08:00" for the en-US culture.</source>
          <target state="translated">例如，对于 en-US 区域性，自定义日期和时间格式字符串“yyyy/mm/dd hh:mm:ss.ffff t zzz”将日期转换为“2008/11/15 07:45:00.0000 P -08:00”形式的字符串表示形式。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Similarly, the custom format string "0000" converts the integer value 12 to "0012".</source>
          <target state="translated">同样，自定义格式字符串“0000”将整数值 12 转换为“0012”。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>For a complete list of custom format strings, see <bpt id="p1">[</bpt>Custom date and time format strings<ept id="p1">](custom-datetime.md)</ept> and <bpt id="p2">[</bpt>Custom numeric format strings<ept id="p2">](custom-numeric.md)</ept>.</source>
          <target state="translated">有关自定义格式字符串的完整列表，请参见<bpt id="p1">[</bpt>自定义日期和时间格式字符串<ept id="p1">](custom-datetime.md)</ept>和<bpt id="p2">[</bpt>自定义数字格式字符串<ept id="p2">](custom-numeric.md)</ept>。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>If a format string consists of a single custom format specifier, the format specifier should be preceded by the percent (%) symbol to avoid confusion with a standard format specifier.</source>
          <target state="translated">如果格式字符串仅包含一个自定义格式说明符，则此格式说明符前面应带有百分比 (%) 符号，以免与标准格式说明符混淆。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>The following example uses the "M" custom format specifier to display a one-digit or two-digit number of the month of a particular date.</source>
          <target state="translated">下面的示例使用“M”自定义格式说明符来显示特定日期的一位数或两位数的月份。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Many standard format strings for date and time values are aliases for custom format strings that are defined by properties of the <bpt id="p1">[</bpt>DateTimeFormatInfo<ept id="p1">](xref:System.Globalization.DateTimeFormatInfo)</ept> object.</source>
          <target state="translated">日期和时间值的许多标准格式字符串均是由 <bpt id="p1">[</bpt>DateTimeFormatInfo<ept id="p1">](xref:System.Globalization.DateTimeFormatInfo)</ept> 对象的属性所定义的自定义格式字符串的别名。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Custom format strings also offer considerable flexibility in providing application-defined formatting for numeric values or date and time values.</source>
          <target state="translated">自定义格式字符串还为设置数字值或日期和时间值的应用程序定义格式提供了很大的灵活性。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>You can define your own custom result strings for both numeric values and date and time values by combining multiple custom format specifiers into a single custom format string.</source>
          <target state="translated">你可以通过将多个自定义格式说明符组合成一个自定义格式字符串来为数字值以及日期和时间值定义你自己的自定义结果字符串。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>The following example defines a custom format string that displays the day of the week in parentheses after the month name, day, and year.</source>
          <target state="translated">下面的示例定义一个自定义格式字符串，该字符串在月份名称、日期和年份后的括号中显示星期几。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>The following example defines a custom format string that displays an <bpt id="p1">[</bpt>Int64<ept id="p1">](xref:System.Int64)</ept> value as a standard, seven-digit U.S. telephone number along with its area code.</source>
          <target state="translated">以下示例定义了自定义格式字符串，其中 <bpt id="p1">[</bpt>Int64<ept id="p1">](xref:System.Int64)</ept> 值显示为标准的美国七位数电话号码及其区号。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Although standard format strings can generally handle most of the formatting needs for your application-defined types, you may also define custom format specifiers to format your types.</source>
          <target state="translated">尽管标准格式字符串一般可以满足应用程序定义的类型的大多数格式设置需求，但你还可以定义自定义格式说明符来设置类型的格式。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Format strings and .NET types</source>
          <target state="translated">格式字符串和 .NET 类型</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>All numeric types (that is, the <bpt id="p1">[</bpt>Byte<ept id="p1">](xref:System.Byte)</ept>, <bpt id="p2">[</bpt>Decimal<ept id="p2">](xref:System.Decimal)</ept>, <bpt id="p3">[</bpt>Double<ept id="p3">](xref:System.Double)</ept>, <bpt id="p4">[</bpt>Int16<ept id="p4">](xref:System.Int16)</ept>, <bpt id="p5">[</bpt>Int32<ept id="p5">](xref:System.Int32)</ept>, <bpt id="p6">[</bpt>Int64<ept id="p6">](xref:System.Int64)</ept>, <bpt id="p7">[</bpt>SByte<ept id="p7">](xref:System.SByte)</ept>, <bpt id="p8">[</bpt>Single<ept id="p8">](xref:System.Single)</ept>, <bpt id="p9">[</bpt>UInt16<ept id="p9">](xref:System.UInt16)</ept>, <bpt id="p10">[</bpt>UInt32<ept id="p10">](xref:System.UInt32)</ept>, <bpt id="p11">[</bpt>UInt64<ept id="p11">](xref:System.UInt64)</ept>, and <bpt id="p12">[</bpt>BigInteger<ept id="p12">](xref:System.Numerics.BigInteger)</ept> types), as well as the <bpt id="p13">[</bpt>DateTime<ept id="p13">](xref:System.DateTime)</ept>, <bpt id="p14">[</bpt>DateTimeOffset<ept id="p14">](xref:System.DateTimeOffset)</ept>, <bpt id="p15">[</bpt>TimeSpan<ept id="p15">](xref:System.TimeSpan)</ept>, <bpt id="p16">[</bpt>Guid<ept id="p16">](xref:System.Guid)</ept>, and all enumeration types, support formatting with format strings.</source>
          <target state="translated">所有数字类型（即 <bpt id="p1">[</bpt>Byte<ept id="p1">](xref:System.Byte)</ept>、<bpt id="p2">[</bpt>Decimal<ept id="p2">](xref:System.Decimal)</ept>、<bpt id="p3">[</bpt>Double<ept id="p3">](xref:System.Double)</ept>、<bpt id="p4">[</bpt>Int16<ept id="p4">](xref:System.Int16)</ept>、<bpt id="p5">[</bpt>Int32<ept id="p5">](xref:System.Int32)</ept>、<bpt id="p6">[</bpt>Int64<ept id="p6">](xref:System.Int64)</ept>、<bpt id="p7">[</bpt>SByte<ept id="p7">](xref:System.SByte)</ept>、<bpt id="p8">[</bpt>Single<ept id="p8">](xref:System.Single)</ept>、<bpt id="p9">[</bpt>UInt16<ept id="p9">](xref:System.UInt16)</ept>、<bpt id="p10">[</bpt>UInt32<ept id="p10">](xref:System.UInt32)</ept>、<bpt id="p11">[</bpt>UInt64<ept id="p11">](xref:System.UInt64)</ept> 和 <bpt id="p12">[</bpt>BigInteger<ept id="p12">](xref:System.Numerics.BigInteger)</ept> 类型），以及 <bpt id="p13">[</bpt>DateTime<ept id="p13">](xref:System.DateTime)</ept>、<bpt id="p14">[</bpt>DateTimeOffset<ept id="p14">](xref:System.DateTimeOffset)</ept>、<bpt id="p15">[</bpt>TimeSpan<ept id="p15">](xref:System.TimeSpan)</ept>、<bpt id="p16">[</bpt>Guid<ept id="p16">](xref:System.Guid)</ept> 和所有枚举类型都支持使用格式字符串设置格式。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>For information on the specific format strings supported by each type, see the following topics:</source>
          <target state="translated">有关各类型支持的特定格式字符串的信息，请参见下列主题：</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Title</source>
          <target state="translated">标题</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Definition</source>
          <target state="translated">定义</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Standard numeric format strings<ept id="p1">](standard-numeric.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>标准数字格式字符串<ept id="p1">](standard-numeric.md)</ept></target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Describes standard format strings that create commonly used string representations of numeric values.</source>
          <target state="translated">描述用于创建数字值的常用字符串表示形式的标准格式字符串。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Custom numeric format strings<ept id="p1">](custom-numeric.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>自定义数字格式字符串<ept id="p1">](custom-numeric.md)</ept></target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Describes custom format strings that create application-specific formats for numeric values.</source>
          <target state="translated">描述用于创建数字值的应用程序特定格式的自定义格式字符串。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Standard date and time format strings<ept id="p1">](standard-datetime.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>标准日期和时间格式字符串<ept id="p1">](standard-datetime.md)</ept></target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Describes standard format strings that create commonly used string representations of <bpt id="p1">[</bpt>DateTime<ept id="p1">](xref:System.DateTime)</ept> values.</source>
          <target state="translated">描述用于创建 <bpt id="p1">[</bpt>DateTime<ept id="p1">](xref:System.DateTime)</ept> 值的常用字符串表示形式的标准格式字符串。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Custom date and time format strings<ept id="p1">](custom-datetime.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>自定义日期和时间格式字符串<ept id="p1">](custom-datetime.md)</ept></target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Describes custom format strings that create application-specific formats for <bpt id="p1">[</bpt>DateTime<ept id="p1">](xref:System.DateTime)</ept> values.</source>
          <target state="translated">描述用于创建 <bpt id="p1">[</bpt>DateTime<ept id="p1">](xref:System.DateTime)</ept> 值的应用程序特定格式的自定义格式字符串。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Standard TimeSpan format Strings<ept id="p1">](standard-timespan.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>标准 TimeSpan 格式字符串<ept id="p1">](standard-timespan.md)</ept></target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Describes standard format strings that create commonly used string representations of time intervals.</source>
          <target state="translated">描述用于创建时间间隔的常用字符串表示形式的标准格式字符串。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Custom TimeSpan format strings<ept id="p1">](custom-timespan.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>自定义的 TimeSpan 格式字符串<ept id="p1">](custom-timespan.md)</ept></target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Describes custom format strings that create application-specific formats for time intervals.</source>
          <target state="translated">描述用于创建时间间隔的应用程序特定格式的自定义格式字符串。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Enumeration format strings<ept id="p1">](enumeration-format.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>枚举格式字符串<ept id="p1">](enumeration-format.md)</ept></target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Describes standard format strings that are used to create string representations of enumeration values.</source>
          <target state="translated">描述用于创建枚举值的字符串表示形式的标准格式字符串。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Guid.ToString(String)<ept id="p1">](xref:System.Guid.ToString(System.String))</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Guid.ToString(String)<ept id="p1">](xref:System.Guid.ToString(System.String))</ept></target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Describes standard format strings for <bpt id="p1">[</bpt>Guid<ept id="p1">](xref:System.Guid)</ept> values.</source>
          <target state="translated">描述 <bpt id="p1">[</bpt>Guid<ept id="p1">](xref:System.Guid)</ept> 值的标准格式字符串。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Culture-Sensitive Formatting with Format Providers and the IFormatProvider Interface</source>
          <target state="translated">使用格式提供程序和 IFormatProvider 接口的区分区域性的格式设置</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Although format specifiers let you customize the formatting of objects, producing a meaningful string representation of objects often requires additional formatting information.</source>
          <target state="translated">尽管格式说明符允许你自定义对象的格式设置，但是生成有意义的对象字符串表示形式通常需要附加格式设置信息。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>For example, formatting a number as a currency value by using either the "C" standard format string or a custom format string such as "$ #,#.00" requires, at a minimum, information about the correct currency symbol, group separator, and decimal separator to be available to include in the formatted string.</source>
          <target state="translated">例如，通过使用“C”标准格式字符串或自定义格式字符串（如“$ #,#.00”）来将数字格式设置为货币值至少需要提供有关正确的货币符号、组分隔符和小数点分隔符的信息，以便包括在带有格式的字符串中。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>In .NET, this additional formatting information is made available through the <bpt id="p1">[</bpt>IFormatProvider<ept id="p1">](xref:System.IFormatProvider)</ept> interface, which is provided as a parameter to one or more overloads of the <ph id="ph1">`ToString`</ph> method of numeric types and date and time types.</source>
          <target state="translated">在 .NET 中，此附加格式设置信息通过 <bpt id="p1">[</bpt>IFormatProvider<ept id="p1">](xref:System.IFormatProvider)</ept> 接口来提供，该接口作为数字类型以及日期和时间类型的 <ph id="ph1">`ToString`</ph> 方法的一个或多个重载的参数提供。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>IFormatProvider<ept id="p1">](xref:System.IFormatProvider)</ept> implementations are used in .NET to support culture-specific formatting.</source>
          <target state="translated"><bpt id="p1">[</bpt>IFormatProvider<ept id="p1">](xref:System.IFormatProvider)</ept> 实现在 .NET Framework 中用于支持区域性特定的格式设置。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>The following example illustrates how the string representation of an object changes when it is formatted with three <bpt id="p1">[</bpt>IFormatProvider<ept id="p1">](xref:System.IFormatProvider)</ept> objects that represent different cultures.</source>
          <target state="translated">下面的示例演示在使用三个代表不同区域的 <bpt id="p1">[</bpt>IFormatProvider<ept id="p1">](xref:System.IFormatProvider)</ept> 对象设置某个对象的格式时，该对象的字符串表示形式将如何变化。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>IFormatProvider<ept id="p1">](xref:System.IFormatProvider)</ept> interface includes one method, <bpt id="p2">[</bpt>GetFormat(Type)<ept id="p2">](xref:System.IFormatProvider.GetFormat(System.Type))</ept>, which has a single parameter that specifies the type of object that provides formatting information.</source>
          <target state="translated"><bpt id="p1">[</bpt>IFormatProvider<ept id="p1">](xref:System.IFormatProvider)</ept> 接口包含一个 <bpt id="p2">[</bpt>GetFormat(Type)<ept id="p2">](xref:System.IFormatProvider.GetFormat(System.Type))</ept> 方法，该方法只有一个参数，该参数指定提供格式设置信息的对象类型。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>If the method can provide an object of that type, it returns it.</source>
          <target state="translated">如果该方法可以提供该类型的对象，则返回它。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Otherwise, it returns a null reference.</source>
          <target state="translated">否则，它返回空引用。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>IFormatProvider.GetFormat<ept id="p1">](xref:System.IFormatProvider.GetFormat(System.Type))</ept> is a callback method.</source>
          <target state="translated"><bpt id="p1">[</bpt>IFormatProvider.GetFormat<ept id="p1">](xref:System.IFormatProvider.GetFormat(System.Type))</ept> 是回调方法。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>When you call a <ph id="ph1">`ToString`</ph> method overload that includes an <bpt id="p1">[</bpt>IFormatProvider<ept id="p1">](xref:System.IFormatProvider)</ept> parameter, it calls the <bpt id="p2">[</bpt>GetFormat<ept id="p2">](xref:System.IFormatProvider.GetFormat(System.Type))</ept> method of that <bpt id="p3">[</bpt>IFormatProvider<ept id="p3">](xref:System.IFormatProvider)</ept> object.</source>
          <target state="translated">调用包含 <bpt id="p1">[</bpt>IFormatProvider<ept id="p1">](xref:System.IFormatProvider)</ept> 参数的 <ph id="ph1">`ToString`</ph> 方法重载时，它会调用该 <bpt id="p3">[</bpt>IFormatProvider<ept id="p3">](xref:System.IFormatProvider)</ept> 对象的 <bpt id="p2">[</bpt>GetFormat<ept id="p2">](xref:System.IFormatProvider.GetFormat(System.Type))</ept> 方法。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>GetFormat<ept id="p1">](xref:System.IFormatProvider.GetFormat(System.Type))</ept> method is responsible for returning an object that provides the necessary formatting information, as specified by its <bpt id="p2">*</bpt>formatType<ept id="p2">*</ept> parameter, to the <ph id="ph1">`ToString`</ph> method.</source>
          <target state="translated"><bpt id="p1">[</bpt>GetFormat<ept id="p1">](xref:System.IFormatProvider.GetFormat(System.Type))</ept> 方法负责将提供所需格式设置信息（就像 <bpt id="p2">*</bpt>formatType<ept id="p2">*</ept> 参数指定的一样）的对象返回给 <ph id="ph1">`ToString`</ph> 方法。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>A number of formatting or string conversion methods include a parameter of type <bpt id="p1">[</bpt>IFormatProvider<ept id="p1">](xref:System.IFormatProvider)</ept>, but in many cases the value of the parameter is ignored when the method is called.</source>
          <target state="translated">一些格式设置或字符串转换方法包含 <bpt id="p1">[</bpt>IFormatProvider<ept id="p1">](xref:System.IFormatProvider)</ept> 类型的参数，但是很多情况下在调用该方法时将忽略该参数的值。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>The following table lists some of the formatting methods that use the parameter and the type of the <bpt id="p1">[</bpt>Type<ept id="p1">](xref:System.Type)</ept> object that they pass to the <bpt id="p2">[</bpt>IFormatProvider.GetFormat<ept id="p2">](xref:System.IFormatProvider.GetFormat(System.Type))</ept> method.</source>
          <target state="translated">下表列出了使用 <bpt id="p1">[</bpt>Type<ept id="p1">](xref:System.Type)</ept> 对象的参数和类型的一些格式设置方法，该对象传递给 <bpt id="p2">[</bpt>IFormatProvider.GetFormat<ept id="p2">](xref:System.IFormatProvider.GetFormat(System.Type))</ept> 方法。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Method</source>
          <target state="translated">方法</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Type of <bpt id="p1">*</bpt>formatType<ept id="p1">*</ept> parameter</source>
          <target state="translated">formatType 参数的类型</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`ToString`</ph> method of numeric types</source>
          <target state="translated">数字类型的 <ph id="ph1">`ToString`</ph> 方法</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.Globalization.NumberFormatInfo<ept id="p1">](xref:System.Globalization.NumberFormatInfo)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>System.Globalization.NumberFormatInfo<ept id="p1">](xref:System.Globalization.NumberFormatInfo)</ept></target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`ToString`</ph> method of date and time types</source>
          <target state="translated">日期和时间类型的 <ph id="ph1">`ToString`</ph> 方法</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.Globalization.DateTimeFormatInfo<ept id="p1">](xref:System.Globalization.DateTimeFormatInfo)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>System.Globalization.DateTimeFormatInfo<ept id="p1">](xref:System.Globalization.DateTimeFormatInfo)</ept></target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>String.Format<ept id="p1">](xref:System.String.Format(System.IFormatProvider,System.String,System.Object))</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>String.Format<ept id="p1">](xref:System.String.Format(System.IFormatProvider,System.String,System.Object))</ept></target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.ICustomFormatter<ept id="p1">](xref:System.ICustomFormatter)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>System.ICustomFormatter<ept id="p1">](xref:System.ICustomFormatter)</ept></target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>StringBuilder.AppendFormat<ept id="p1">](xref:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object))</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>StringBuilder.AppendFormat<ept id="p1">](xref:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object))</ept></target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.ICustomFormatter<ept id="p1">](xref:System.ICustomFormatter)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>System.ICustomFormatter<ept id="p1">](xref:System.ICustomFormatter)</ept></target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>.NET provides three classes that implement <bpt id="p1">[</bpt>IFormatProvider<ept id="p1">](xref:System.IFormatProvider)</ept>:</source>
          <target state="translated">.NET 提供了实现 <bpt id="p1">[</bpt>IFormatProvider<ept id="p1">](xref:System.IFormatProvider)</ept> 的三个类：</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>DateTimeFormatInfo<ept id="p1">](xref:System.Globalization.DateTimeFormatInfo)</ept>, a class that provides formatting information for date and time values for a specific culture.</source>
          <target state="translated"><bpt id="p1">[</bpt>DateTimeFormatInfo<ept id="p1">](xref:System.Globalization.DateTimeFormatInfo)</ept> 类，提供特定区域性的日期和时间值的格式设置信息。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Its <bpt id="p1">[</bpt>IFormatProvider.GetFormat<ept id="p1">](xref:System.IFormatProvider.GetFormat(System.Type))</ept> implementation returns an instance of itself.</source>
          <target state="translated">其 <bpt id="p1">[</bpt>IFormatProvider.GetFormat<ept id="p1">](xref:System.IFormatProvider.GetFormat(System.Type))</ept> 实现返回它自身的实例。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>NumberFormatInfo<ept id="p1">](xref:System.Globalization.NumberFormatInfo)</ept>, a class that provides numeric formatting information for a specific culture.</source>
          <target state="translated"><bpt id="p1">[</bpt>NumberFormatInfo<ept id="p1">](xref:System.Globalization.NumberFormatInfo)</ept> 类，提供特定区域性的数字格式设置信息。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Its <bpt id="p1">[</bpt>IFormatProvider.GetFormat<ept id="p1">](xref:System.IFormatProvider.GetFormat(System.Type))</ept> implementation returns an instance of itself.</source>
          <target state="translated">其 <bpt id="p1">[</bpt>IFormatProvider.GetFormat<ept id="p1">](xref:System.IFormatProvider.GetFormat(System.Type))</ept> 实现返回它自身的实例。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CultureInfo<ept id="p1">](xref:System.Globalization.CultureInfo)</ept>.</source>
          <target state="translated"><bpt id="p1">[</bpt>CultureInfo<ept id="p1">](xref:System.Globalization.CultureInfo)</ept>。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Its <bpt id="p1">[</bpt>IFormatProvider.GetFormat<ept id="p1">](xref:System.IFormatProvider.GetFormat(System.Type))</ept> implementation can return either a <bpt id="p2">[</bpt>NumberFormatInfo<ept id="p2">](xref:System.Globalization.NumberFormatInfo)</ept> object to provide numeric formatting information or a <bpt id="p3">[</bpt>DateTimeFormatInfo<ept id="p3">](xref:System.Globalization.DateTimeFormatInfo)</ept> object to provide formatting information for date and time values.</source>
          <target state="translated">其 <bpt id="p1">[</bpt>IFormatProvider.GetFormat<ept id="p1">](xref:System.IFormatProvider.GetFormat(System.Type))</ept> 实现可以返回一个 <bpt id="p2">[</bpt>NumberFormatInfo<ept id="p2">](xref:System.Globalization.NumberFormatInfo)</ept> 对象（可提供数字格式设置信息）或一个 <bpt id="p3">[</bpt>DateTimeFormatInfo<ept id="p3">](xref:System.Globalization.DateTimeFormatInfo)</ept> 对象（可提供日期和时间值的格式设置信息）。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>You can also implement your own format provider to replace any one of these classes.</source>
          <target state="translated">你还可以实现自己的格式提供程序来替换上述任意一个类。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>However, your implementation’s <ph id="ph1">`GetFormat`</ph> method must return an object of the type listed in the previous table if it has to provide formatting information to the <ph id="ph2">`ToString`</ph> method.</source>
          <target state="translated">但是，如果你的实现的 <ph id="ph1">`GetFormat`</ph> 方法必须向 <ph id="ph2">`ToString`</ph> 方法提供格式设置信息，则它必须返回上表中列出的相应类型的对象。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Culture-sensitive formatting of numeric values</source>
          <target state="translated">数值的区分区域性的格式设置</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>By default, the formatting of numeric values is culture-sensitive.</source>
          <target state="translated">默认情况下，数值的格式设置是区分区域性的。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>If you do not specify a culture when you call a formatting method, the formatting conventions of the current thread culture are used.</source>
          <target state="translated">如果在调用格式设置方法时不指定区域性，则将使用当前线程区域性的格式设置约定。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>This is illustrated in the following example, which changes the current thread culture four times and then calls the <bpt id="p1">[</bpt>Decimal.ToString(String)<ept id="p1">](xref:System.Decimal.ToString(System.String))</ept> method.</source>
          <target state="translated">下面的示例演示了这一点，其中对当前线程区域性进行了四次更改，随后调用了 <bpt id="p1">[</bpt>Decimal.ToString(String)<ept id="p1">](xref:System.Decimal.ToString(System.String))</ept> 方法。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>In each case, the result string reflects the formatting conventions of the current culture.</source>
          <target state="translated">每次更改后，结果字符串均反映当前区域性的格式设置约定。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>This is because the <ph id="ph1">`ToString`</ph> and <ph id="ph2">`ToString(String)`</ph> methods wrap calls to each numeric type's <ph id="ph3">`ToString(String, IFormatProvider)`</ph> method.</source>
          <target state="translated">这是因为 <ph id="ph1">`ToString`</ph> 和 <ph id="ph2">`ToString(String)`</ph> 方法会包装对每个数值类型的 <ph id="ph3">`ToString(String, IFormatProvider)`</ph> 方法的调用。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>You can also format a numeric value for a specific culture by calling a <ph id="ph1">`ToString`</ph> overload that has a <bpt id="p1">*</bpt>provider<ept id="p1">*</ept> parameter and passing it either of the following:</source>
          <target state="translated">你还可以设置特定区域性数值的格式，方法是调用具有 provider 参数的 <ph id="ph1">`ToString`</ph> 重载，并将其作为以下对象之一的参数进行传递：</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>CultureInfo<ept id="p1">](xref:System.Globalization.CultureInfo)</ept> object that represents the culture whose formatting conventions are to be used.</source>
          <target state="translated">一个 <bpt id="p1">[</bpt>CultureInfo<ept id="p1">](xref:System.Globalization.CultureInfo)</ept> 对象，此对象代表要使用其格式设置约定的区域性。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Its <bpt id="p1">[</bpt>CultureInfo.GetFormat<ept id="p1">](xref:System.Globalization.CultureInfo.GetFormat(System.Type))</ept> method returns the value of the <bpt id="p2">[</bpt>CultureInfo.NumberFormat<ept id="p2">](xref:System.Globalization.CultureInfo.NumberFormat)</ept> property, which is the <bpt id="p3">[</bpt>NumberFormatInfo<ept id="p3">](xref:System.Globalization.NumberFormatInfo)</ept> object that provides culture-specific formatting information for numeric values.</source>
          <target state="translated">它的 <bpt id="p1">[</bpt>CultureInfo.GetFormat<ept id="p1">](xref:System.Globalization.CultureInfo.GetFormat(System.Type))</ept> 方法会返回 <bpt id="p2">[</bpt>CultureInfo.NumberFormat<ept id="p2">](xref:System.Globalization.CultureInfo.NumberFormat)</ept> 属性的值，即提供数字区域性特定格式设置信息的 <bpt id="p3">[</bpt>NumberFormatInfo<ept id="p3">](xref:System.Globalization.NumberFormatInfo)</ept> 对象。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>NumberFormatInfo<ept id="p1">](xref:System.Globalization.NumberFormatInfo)</ept> object that defines the culture-specific formatting conventions to be used.</source>
          <target state="translated">一个 <bpt id="p1">[</bpt>NumberFormatInfo<ept id="p1">](xref:System.Globalization.NumberFormatInfo)</ept> 对象，此对象用于定义要使用的区域性特定格式设置约定。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Its <bpt id="p1">[</bpt>GetFormat<ept id="p1">](xref:System.Globalization.NumberFormatInfo.GetFormat(System.Type))</ept> method returns an instance of itself.</source>
          <target state="translated">它的 <bpt id="p1">[</bpt>GetFormat<ept id="p1">](xref:System.Globalization.NumberFormatInfo.GetFormat(System.Type))</ept> 方法会返回它自身的一个实例。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>The following example uses <bpt id="p1">[</bpt>NumberFormatInfo<ept id="p1">](xref:System.Globalization.NumberFormatInfo)</ept> objects that represent the English (United States) and English (Great Britain) cultures and the French and Russian neutral cultures to format a floating-point number.</source>
          <target state="translated">下面的示例使用了表示英语（美国）和英语（英国）区域性以及法语和俄罗斯语非特定区域性的 <bpt id="p1">[</bpt>NumberFormatInfo<ept id="p1">](xref:System.Globalization.NumberFormatInfo)</ept> 对象，来设置浮点数字的格式。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Culture-sensitive formatting of date and time values</source>
          <target state="translated">日期和时间值的区分区域性的格式设置</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>By default, the formatting of date and time values is culture-sensitive.</source>
          <target state="translated">默认情况下，日期和时间值的格式设置是区分区域性的。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>If you do not specify a culture when you call a formatting method, the formatting conventions of the current thread culture are used.</source>
          <target state="translated">如果在调用格式设置方法时不指定区域性，则将使用当前线程区域性的格式设置约定。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>This is illustrated in the following example, which changes the current thread culture four times and then calls the <bpt id="p1">[</bpt>DateTime.ToString(String)<ept id="p1">](xref:System.DateTime.ToString(System.String))</ept> method.</source>
          <target state="translated">下面的示例演示了这一点，其中对当前线程区域性进行了四次更改，随后调用了 <bpt id="p1">[</bpt>DateTime.ToString(String)<ept id="p1">](xref:System.DateTime.ToString(System.String))</ept> 方法。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>In each case, the result string reflects the formatting conventions of the current culture.</source>
          <target state="translated">每次更改后，结果字符串均反映当前区域性的格式设置约定。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>This is because the <bpt id="p1">[</bpt>DateTime.ToString()<ept id="p1">](xref:System.DateTime.ToString)</ept>, <bpt id="p2">[</bpt>DateTime.ToString(String)<ept id="p2">](xref:System.DateTime.ToString(System.String))</ept>, <bpt id="p3">[</bpt>DateTimeOffset.ToString()<ept id="p3">](xref:System.DateTimeOffset.ToString(System.String))</ept>, and <bpt id="p4">[</bpt>DateTimeOffset.ToString(String)<ept id="p4">](xref:System.DateTimeOffset.ToString(System.String))</ept> methods wrap calls to the <bpt id="p5">[</bpt>DateTime.ToString(String, IFormatProvider)<ept id="p5">](xref:System.DateTime.ToString(System.String,System.IFormatProvider))</ept> and <bpt id="p6">[</bpt>DateTimeOffset.ToString(String, IFormatProvider)<ept id="p6">](xref:System.DateTimeOffset.ToString(System.String,System.IFormatProvider))</ept> methods.</source>
          <target state="translated">这是因为 <bpt id="p1">[</bpt>DateTime.ToString()<ept id="p1">](xref:System.DateTime.ToString)</ept>、<bpt id="p2">[</bpt>DateTime.ToString(String)<ept id="p2">](xref:System.DateTime.ToString(System.String))</ept>、<bpt id="p3">[</bpt>DateTimeOffset.ToString()<ept id="p3">](xref:System.DateTimeOffset.ToString(System.String))</ept> 和 <bpt id="p4">[</bpt>DateTimeOffset.ToString(String)<ept id="p4">](xref:System.DateTimeOffset.ToString(System.String))</ept> 方法会包装对 <bpt id="p5">[</bpt>DateTime.ToString(String, IFormatProvider)<ept id="p5">](xref:System.DateTime.ToString(System.String,System.IFormatProvider))</ept> 和 <bpt id="p6">[</bpt>DateTimeOffset.ToString(String, IFormatProvider)<ept id="p6">](xref:System.DateTimeOffset.ToString(System.String,System.IFormatProvider))</ept> 方法的调用。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>You can also format a date and time value for a specific culture by calling a <bpt id="p1">[</bpt>DateTime.ToString<ept id="p1">](xref:System.DateTime.ToString(System.String,System.IFormatProvider))</ept> or <bpt id="p2">[</bpt>DateTimeOffset.ToString<ept id="p2">](xref:System.DateTimeOffset.ToString(System.String,System.IFormatProvider))</ept> overload that has a provider parameter and passing it either of the following:</source>
          <target state="translated">你还可以设置特定区域性日期和时间值的格式，方法是调用具有 provider 参数的 <bpt id="p1">[</bpt>DateTime.ToString<ept id="p1">](xref:System.DateTime.ToString(System.String,System.IFormatProvider))</ept> 或 <bpt id="p2">[</bpt>DateTimeOffset.ToString<ept id="p2">](xref:System.DateTimeOffset.ToString(System.String,System.IFormatProvider))</ept> 重载，并将其作为以下对象之一的参数进行传递：</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>CultureInfo<ept id="p1">](xref:System.Globalization.CultureInfo)</ept> object that represents the culture whose formatting conventions are to be used.</source>
          <target state="translated">一个 <bpt id="p1">[</bpt>CultureInfo<ept id="p1">](xref:System.Globalization.CultureInfo)</ept> 对象，此对象代表要使用其格式设置约定的区域性。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Its <bpt id="p1">[</bpt>CultureInfo.GetFormat<ept id="p1">](xref:System.Globalization.CultureInfo.GetFormat(System.Type))</ept> method returns the value of the <bpt id="p2">[</bpt>CultureInfo.NumberFormat<ept id="p2">](xref:System.Globalization.CultureInfo.NumberFormat)</ept> property, which is the <bpt id="p3">[</bpt>DateTimeFormatInfo<ept id="p3">](xref:System.Globalization.DateTimeFormatInfo)</ept> object that provides culture-specific formatting information for numeric values.</source>
          <target state="translated">它的 <bpt id="p1">[</bpt>CultureInfo.GetFormat<ept id="p1">](xref:System.Globalization.CultureInfo.GetFormat(System.Type))</ept> 方法会返回 <bpt id="p2">[</bpt>CultureInfo.NumberFormat<ept id="p2">](xref:System.Globalization.CultureInfo.NumberFormat)</ept> 属性的值，即提供数字区域性特定格式设置信息的 <bpt id="p3">[</bpt>DateTimeFormatInfo<ept id="p3">](xref:System.Globalization.DateTimeFormatInfo)</ept> 对象。</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>DateTimeFormatInfo<ept id="p1">](xref:System.Globalization.DateTimeFormatInfo)</ept> object that defines the culture-specific formatting conventions to be used.</source>
          <target state="translated">一个 <bpt id="p1">[</bpt>DateTimeFormatInfo<ept id="p1">](xref:System.Globalization.DateTimeFormatInfo)</ept> 对象，此对象用于定义要使用的区域性特定格式设置约定。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Its <bpt id="p1">[</bpt>GetFormat<ept id="p1">](xref:System.Globalization.DateTimeFormatInfo.GetFormat(System.Type))</ept> method returns an instance of itself.</source>
          <target state="translated">它的 <bpt id="p1">[</bpt>GetFormat<ept id="p1">](xref:System.Globalization.DateTimeFormatInfo.GetFormat(System.Type))</ept> 方法会返回它自身的一个实例。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>The following example uses <bpt id="p1">[</bpt>DateTimeFormatInfo<ept id="p1">](xref:System.Globalization.DateTimeFormatInfo)</ept> objects that represent the English (United States) and English (Great Britain) cultures and the French and Russian neutral cultures to format a date.</source>
          <target state="translated">下面的示例使用了表示英语（美国）和英语（英国）区域性以及法语和俄罗斯语非特定区域性的 <bpt id="p1">[</bpt>DateTimeFormatInfo<ept id="p1">](xref:System.Globalization.DateTimeFormatInfo)</ept> 对象，来设置日期的格式。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>The IFormattable interface</source>
          <target state="translated">IFormattable 接口</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Typically, types that overload the <ph id="ph1">`ToString`</ph> method with a format string and an <bpt id="p1">[</bpt>IFormatProvider<ept id="p1">](xref:System.IFormatProvider)</ept> parameter also implement the <bpt id="p2">[</bpt>IFormattable<ept id="p2">](xref:System.IFormattable)</ept> interface.</source>
          <target state="translated">通常，使用格式字符串和一个 <bpt id="p1">[</bpt>IFormatProvider<ept id="p1">](xref:System.IFormatProvider)</ept> 参数来重载 <ph id="ph1">`ToString`</ph> 方法的类型还实现 <bpt id="p2">[</bpt>IFormattable<ept id="p2">](xref:System.IFormattable)</ept> 接口。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>This interface has a single member, <bpt id="p1">[</bpt>IFormattable.ToString(String, IFormatProvider)<ept id="p1">](xref:System.IFormattable.ToString(System.String,System.IFormatProvider))</ept>, that includes both a format string and a format provider as parameters.</source>
          <target state="translated">此接口具有一个成员 <bpt id="p1">[</bpt>IFormattable.ToString(String, IFormatProvider)<ept id="p1">](xref:System.IFormattable.ToString(System.String,System.IFormatProvider))</ept>，该成员同时将格式字符串和格式提供程序作为参数。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>Implementing the <bpt id="p1">[</bpt>IFormattable<ept id="p1">](xref:System.IFormattable)</ept> interface for your application-defined class offers two advantages:</source>
          <target state="translated">对应用程序定义的类实现 <bpt id="p1">[</bpt>IFormattable<ept id="p1">](xref:System.IFormattable)</ept> 接口具有两大优势：</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Support for string conversion by the <bpt id="p1">[</bpt>Convert<ept id="p1">](xref:System.Convert)</ept> class.</source>
          <target state="translated">支持使用 <bpt id="p1">[</bpt>Convert<ept id="p1">](xref:System.Convert)</ept> 类进行字符串转换。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Calls to the <bpt id="p1">[</bpt>Convert.ToString(Object)<ept id="p1">](xref:System.Convert.ToString(System.Object))</ept> and <bpt id="p2">[</bpt>Convert.ToString(Object, IFormatProvider)<ept id="p2">](xref:System.Convert.ToString(System.Object,System.IFormatProvider))</ept> methods call your <bpt id="p3">[</bpt>IFormattable<ept id="p3">](xref:System.IFormattable)</ept> implementation automatically.</source>
          <target state="translated">调用 <bpt id="p1">[</bpt>Convert.ToString(Object)<ept id="p1">](xref:System.Convert.ToString(System.Object))</ept> 和 <bpt id="p2">[</bpt>Convert.ToString(Object, IFormatProvider)<ept id="p2">](xref:System.Convert.ToString(System.Object,System.IFormatProvider))</ept> 方法会自动调用 <bpt id="p3">[</bpt>IFormattable<ept id="p3">](xref:System.IFormattable)</ept> 实现。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Support for composite formatting.</source>
          <target state="translated">支持复合格式设置。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>If a format item that includes a format string is used to format your custom type, the Common Language Runtime automatically calls your <bpt id="p1">[</bpt>IFormattable<ept id="p1">](xref:System.IFormattable)</ept> implementation and passes it the format string.</source>
          <target state="translated">如果使用包含格式字符串的格式项设置自定义类型的格式，则公共语言运行时自动调用 <bpt id="p1">[</bpt>IFormattable<ept id="p1">](xref:System.IFormattable)</ept> 实现，并向其传递该格式字符串。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>For more information about composite formatting with methods such as <ph id="ph1">`String.Format`</ph> or <ph id="ph2">`Console.WriteLine`</ph>, see the <bpt id="p1">[</bpt>Composite formatting<ept id="p1">](#composite-formatting)</ept> section.</source>
          <target state="translated">有关采用 <ph id="ph1">`String.Format`</ph> 或 <ph id="ph2">`Console.WriteLine`</ph> 等方法进行复合格式设置的更多信息，请参见<bpt id="p1">[</bpt>复合格式设置<ept id="p1">](#composite-formatting)</ept>部分。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>The following example defines a <ph id="ph1">`Temperature`</ph> class that implements the <bpt id="p1">[</bpt>IFormattable<ept id="p1">](xref:System.IFormattable)</ept> interface.</source>
          <target state="translated">下面的示例定义一个实现 <bpt id="p1">[</bpt>IFormattable<ept id="p1">](xref:System.IFormattable)</ept> 接口的 <ph id="ph1">`Temperature`</ph> 类。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>It supports the "C" or "G" format specifiers to display the temperature in Celsius, the "F" format specifier to display the temperature in Fahrenheit, and the "K" format specifier to display the temperature in Kelvin.</source>
          <target state="translated">它支持“C”或“G”格式说明符（用于以摄氏度显示温度）、“F”格式说明符（用于以华氏度显示温度）和“K”格式说明符（用于以开氏度显示温度）。</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>The following example instantiates a <ph id="ph1">`Temperature`</ph> object.</source>
          <target state="translated">下面的示例实例化一个 <ph id="ph1">`Temperature`</ph> 对象。</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>It then calls the <bpt id="p1">[</bpt>ToString<ept id="p1">](xref:System.Convert.ToString(System.Object,System.IFormatProvider))</ept> method and uses several composite format strings to obtain different string representations of a <ph id="ph1">`Temperature`</ph> object.</source>
          <target state="translated">然后，它调用 <bpt id="p1">[</bpt>ToString<ept id="p1">](xref:System.Convert.ToString(System.Object,System.IFormatProvider))</ept> 方法，并使用多个复合格式字符串获取 <ph id="ph1">`Temperature`</ph> 对象的不同字符串表示形式。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>Each of these method calls, in turn, calls the <bpt id="p1">[</bpt>IFormattable<ept id="p1">](xref:System.IFormattable)</ept> implementation of the <ph id="ph1">`Temperature`</ph> class.</source>
          <target state="translated">其中每一个方法调用都依次调用 <ph id="ph1">`Temperature`</ph> 类的 <bpt id="p1">[</bpt>IFormattable<ept id="p1">](xref:System.IFormattable)</ept> 实现。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Composite formatting</source>
          <target state="translated">复合格式设置</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Some methods, such as <ph id="ph1">`String.Format`</ph> and <ph id="ph2">`StringBuilder.AppendFormat`</ph>, support composite formatting.</source>
          <target state="translated">一些方法（如 <ph id="ph1">`String.Format`</ph> 和 <ph id="ph2">`StringBuilder.AppendFormat`</ph>）支持复合格式设置。</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>A composite format string is a kind of template that returns a single string that incorporates the string representation of zero, one, or more objects.</source>
          <target state="translated">复合格式字符串是一种模板，该模板返回合并了零个、一个或多个对象的字符串表示形式的单一字符串。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Each object is represented in the composite format string by an indexed format item.</source>
          <target state="translated">每个对象均由复合格式字符串中的索引格式项表示。</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>The index of the format item corresponds to the position of the object that it represents in the method's parameter list.</source>
          <target state="translated">格式项的索引对应于格式项在方法的参数列表中所表示的对象位置。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>Indexes are zero-based.</source>
          <target state="translated">索引是从零开始的。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>For example, in the following call to the <ph id="ph1">`String.Format`</ph> method, the first format item, <ph id="ph2">`{0:D}`</ph>, is replaced by the string representation of <ph id="ph3">`thatDate`</ph>; the second format item, <ph id="ph4">`{1}`</ph>, is replaced by the string representation of <ph id="ph5">`item1`</ph>; and the third format item, <ph id="ph6">`{2:C2}`</ph>, is replaced by the string representation of <ph id="ph7">`item1.Value`</ph>.</source>
          <target state="translated">例如，在以下对 <ph id="ph1">`String.Format`</ph> 方法的调用中，第一个格式项 <ph id="ph2">`{0:D}`</ph> 被 <ph id="ph3">`thatDate`</ph> 的字符串表示形式；第二个格式项 <ph id="ph4">`{1}`</ph> 被 <ph id="ph5">`item1`</ph> 的字符串表示形式替换；第三个格式项 <ph id="ph6">`{2:C2}`</ph> 被 <ph id="ph7">`item1.Value`</ph> 的字符串表示形式替换。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>In addition to replacing a format item with the string representation of its corresponding object, format items also let you control the following:</source>
          <target state="translated">除了将格式项替换为其相应对象的字符串表示形式之外，格式项还可让你控制：</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>The specific way in which an object is represented as a string, if the object implements the <bpt id="p1">[</bpt>IFormattable<ept id="p1">](xref:System.IFormattable)</ept> interface and supports format strings.</source>
          <target state="translated">将对象表示为字符串的特定方法（如果对象实现 <bpt id="p1">[</bpt>IFormattable<ept id="p1">](xref:System.IFormattable)</ept> 接口并支持格式字符串）。</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>You do this by following the format item's index with a : (colon) followed by a valid format string.</source>
          <target state="translated">为此，可在格式项的索引后加上 :（冒号），后跟一个有效的格式字符串。</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>The previous example did this by formatting a date value with the "d" (short date pattern) format string (e.g., <ph id="ph1">`{0:d}`</ph>) and by formatting a numeric value with the "C2" format string (e.g., <ph id="ph2">`{2:C2}`</ph> to represent the number as a currency value with two fractional decimal digits.</source>
          <target state="translated">前面的示例执行此操作的方式是：格式化带有“d”（短日期模式）格式字符串（例如，<ph id="ph1">`{0:d}`</ph>）的日期值，并格式化带有“C2”格式字符串（例如，<ph id="ph2">`{2:C2}`</ph>）的数值，将数量表示为具有两位小数位数的货币值。</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>The width of the field that contains the object's string representation, and the alignment of the string representation in that field.</source>
          <target state="translated">包含对象的字符串表示形式的字段的宽度以及该字段中字符串表现形式的对齐方式。</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>You do this by following the format item's index with a , (comma) followed the field width.</source>
          <target state="translated">为此，可在格式项的索引后加上 ,（逗号），后跟字段宽度。</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>The string is right-aligned in the field if the field width is a positive value, and it is left-aligned if the field width is a negative value.</source>
          <target state="translated">如果字段宽度为正值，则字段中的字符串为右对齐，如果字段宽度是负值，则为左对齐。</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>The following example left-aligns date values in a 20-character field, and it right-aligns decimal values with one fractional digit in an 11-character field.</source>
          <target state="translated">在下面的示例中，在由 20 个字符组成的字段中的日期值左对齐，而在由 11 个字符组成的字段中，带有一位小数的十进制值右对齐。</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>Note that, if both the alignment string component and the format string component are present, the former precedes the latter (for example, <ph id="ph1">`{0,-20:g}`</ph>.</source>
          <target state="translated">请注意，如果对齐字符串组件和格式字符串组件均存在，则前者位于后者之前（例如，<ph id="ph1">`{0,-20:g}`</ph>）。</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>For more information about composite formatting, see <bpt id="p1">[</bpt>Composite formatting<ept id="p1">](composite-format.md)</ept>.</source>
          <target state="translated">有关复合格式设置的更多信息，请参见<bpt id="p1">[</bpt>复合格式设置<ept id="p1">](composite-format.md)</ept>。</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>Custom formatting with ICustomFormatter</source>
          <target state="translated">使用 ICustomFormatter 进行自定义格式设置</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Two composite formatting methods, <bpt id="p1">[</bpt>String.Format(IFormatProvider, String, Object[])<ept id="p1">](xref:System.String.Format(System.IFormatProvider,System.String,System.Object[]))</ept> and <bpt id="p2">[</bpt>StringBuilder.AppendFormat(IFormatProvider, String, Object[])<ept id="p2">](xref:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object))</ept>, include a format provider parameter that supports custom formatting.</source>
          <target state="translated">两种复合格式设置方法（<bpt id="p1">[</bpt>String.Format(IFormatProvider, String, Object[])<ept id="p1">](xref:System.String.Format(System.IFormatProvider,System.String,System.Object[]))</ept> 和 <bpt id="p2">[</bpt>StringBuilder.AppendFormat(IFormatProvider, String, Object[])<ept id="p2">](xref:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object))</ept>）包括一个支持自定义格式设置的格式提供程序参数。</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>When either of these formatting methods is called, it passes a <bpt id="p1">[</bpt>Type<ept id="p1">](xref:System.Type)</ept> object that represents an <bpt id="p2">[</bpt>ICustomFormatter<ept id="p2">](xref:System.ICustomFormatter)</ept> interface to the format provider’s <ph id="ph1">`GetFormat`</ph> method.</source>
          <target state="translated">当调用其中一种格式设置方法时，该方法会将表示 <bpt id="p2">[</bpt>ICustomFormatter<ept id="p2">](xref:System.ICustomFormatter)</ept> 接口的 <bpt id="p1">[</bpt>Type<ept id="p1">](xref:System.Type)</ept> 对象传递到格式提供程序的 <ph id="ph1">`GetFormat`</ph> 方法。</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`GetFormat`</ph> method is then responsible for returning the <bpt id="p1">[</bpt>ICustomFormatter<ept id="p1">](xref:System.ICustomFormatter)</ept> implementation that provides custom formatting.</source>
          <target state="translated"><ph id="ph1">`GetFormat`</ph> 方法然后负责返回提供自定义格式设置功能的 <bpt id="p1">[</bpt>ICustomFormatter<ept id="p1">](xref:System.ICustomFormatter)</ept> 实现。</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>ICustomFormatter<ept id="p1">](xref:System.ICustomFormatter)</ept> interface has a single method, <bpt id="p2">[</bpt>Format(String, Object, IFormatProvider)<ept id="p2">](xref:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider))</ept>, that is called automatically by a composite formatting method, once for each format item in a composite format string.</source>
          <target state="translated"><bpt id="p1">[</bpt>ICustomFormatter<ept id="p1">](xref:System.ICustomFormatter)</ept> 接口具有一个方法 <bpt id="p2">[</bpt>Format(String, Object, IFormatProvider)<ept id="p2">](xref:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider))</ept>，复合格式设置方法为复合格式字符串中的每一格式项自动调用一次该方法。</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Format(String, Object, IFormatProvider)<ept id="p1">](xref:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider))</ept> method has three parameters: a format string, which represents the <bpt id="p2">*</bpt>formatString<ept id="p2">*</ept> argument in a format item, an object to format, and an <bpt id="p3">[</bpt>IFormatProvider<ept id="p3">](xref:System.IFormatProvider)</ept> object that provides formatting services.</source>
          <target state="translated"><bpt id="p1">[</bpt>Format(String, Object, IFormatProvider)<ept id="p1">](xref:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider))</ept> 方法具有三个参数：一个格式字符串（表示格式项中的 formatString 参数）、一个要设置格式的对象和一个提供格式设置服务的 <bpt id="p3">[</bpt>IFormatProvider<ept id="p3">](xref:System.IFormatProvider)</ept> 对象。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>Typically, the class that implements <bpt id="p1">[</bpt>ICustomFormatter<ept id="p1">](xref:System.ICustomFormatter)</ept> also implements <bpt id="p2">[</bpt>IFormatProvider<ept id="p2">](xref:System.IFormatProvider)</ept>, so this last parameter is a reference to the custom formatting class itself.</source>
          <target state="translated">通常，实现 <bpt id="p1">[</bpt>ICustomFormatter<ept id="p1">](xref:System.ICustomFormatter)</ept> 的类还会实现 <bpt id="p2">[</bpt>IFormatProvider<ept id="p2">](xref:System.IFormatProvider)</ept>，因此上述最后一个参数是对自定义格式设置类自身的引用。</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>The method returns a custom formatted string representation of the object to be formatted.</source>
          <target state="translated">该方法返回要设置格式的对象的带格式自定义字符串表示形式。</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>If the method cannot format the object, it should return a null reference.</source>
          <target state="translated">如果该方法无法设置对象的格式，则应返回空引用。</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>The following example provides an <bpt id="p1">[</bpt>ICustomFormatter<ept id="p1">](xref:System.ICustomFormatter)</ept> implementation named <ph id="ph1">`ByteByByteFormatter`</ph> that displays integer values as a sequence of two-digit hexadecimal values followed by a space.</source>
          <target state="translated">下面的示例提供一个名为 <ph id="ph1">`ByteByByteFormatter`</ph> 的 <bpt id="p1">[</bpt>ICustomFormatter<ept id="p1">](xref:System.ICustomFormatter)</ept> 实现，该实现将整数值显示为两位的十六进制值后跟一个空格的序列。</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>The following example uses the <ph id="ph1">`ByteByByteFormatter`</ph> class to format integer values.</source>
          <target state="translated">下面的示例使用 <ph id="ph1">`ByteByByteFormatter`</ph> 类设置整数值的格式。</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>Note that the <bpt id="p1">[</bpt>ICustomFormatter.Format<ept id="p1">](xref:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider))</ept> method is called more than once in the second <bpt id="p2">[</bpt>String.Format(IFormatProvider, String, Object[])<ept id="p2">](xref:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider))</ept> method call, and that the default <bpt id="p3">[</bpt>NumberFormatInfo<ept id="p3">](xref:System.Globalization.NumberFormatInfo)</ept> provider is used in the third method call because the <ph id="ph1">`.ByteByByteFormatter.Format`</ph> method does not recognize the "N0" format string and returns a null reference.</source>
          <target state="translated">请注意，在第二个 <bpt id="p2">[</bpt>String.Format(IFormatProvider, String, Object[])<ept id="p2">](xref:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider))</ept> 方法调用中多次调用了 <bpt id="p1">[</bpt>ICustomFormatter.Format<ept id="p1">](xref:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider))</ept> 方法，并在第三个方法调用中使用了默认 <bpt id="p3">[</bpt>NumberFormatInfo<ept id="p3">](xref:System.Globalization.NumberFormatInfo)</ept> 提供程序，这是因为 .<ph id="ph1">`.ByteByByteFormatter.Format`</ph> 方法无法识别“N0”格式字符串并返回空引用。</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>Related topics</source>
          <target state="translated">相关主题</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>Title</source>
          <target state="translated">标题</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>Definition</source>
          <target state="translated">定义</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Standard numeric format strings<ept id="p1">](standard-numeric.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>标准数字格式字符串<ept id="p1">](standard-numeric.md)</ept></target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>Describes standard format strings that create commonly used string representations of numeric values.</source>
          <target state="translated">描述用于创建数字值的常用字符串表示形式的标准格式字符串。</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Custom numeric format strings<ept id="p1">](custom-numeric.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>自定义数字格式字符串<ept id="p1">](custom-numeric.md)</ept></target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>Describes custom format strings that create application-specific formats for numeric values.</source>
          <target state="translated">描述用于创建数字值的应用程序特定格式的自定义格式字符串。</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Standard date and time format strings<ept id="p1">](standard-datetime.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>标准日期和时间格式字符串<ept id="p1">](standard-datetime.md)</ept></target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>Describes standard format strings that create commonly used string representations of <bpt id="p1">[</bpt>DateTime<ept id="p1">](xref:System.DateTime)</ept> values.</source>
          <target state="translated">描述用于创建 <bpt id="p1">[</bpt>DateTime<ept id="p1">](xref:System.DateTime)</ept> 值的常用字符串表示形式的标准格式字符串。</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Custom date and time format strings<ept id="p1">](custom-datetime.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>自定义日期和时间格式字符串<ept id="p1">](custom-datetime.md)</ept></target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>Describes custom format strings that create application-specific formats for <bpt id="p1">[</bpt>DateTime<ept id="p1">](xref:System.DateTime)</ept> values.</source>
          <target state="translated">描述用于创建 <bpt id="p1">[</bpt>DateTime<ept id="p1">](xref:System.DateTime)</ept> 值的应用程序特定格式的自定义格式字符串。</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Standard TimeSpan format strings<ept id="p1">](standard-timespan.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>标准 TimeSpan 格式字符串<ept id="p1">](standard-timespan.md)</ept></target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>Describes standard format strings that create commonly used string representations of time intervals.</source>
          <target state="translated">描述用于创建时间间隔的常用字符串表示形式的标准格式字符串。</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Custom TimeSpan format strings<ept id="p1">](custom-timespan.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>自定义的 TimeSpan 格式字符串<ept id="p1">](custom-timespan.md)</ept></target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>Describes custom format strings that create application-specific formats for time intervals.</source>
          <target state="translated">描述用于创建时间间隔的应用程序特定格式的自定义格式字符串。</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Enumeration format strings<ept id="p1">](enumeration-format.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>枚举格式字符串<ept id="p1">](enumeration-format.md)</ept></target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>Describes standard format strings that are used to create string representations of enumeration values.</source>
          <target state="translated">描述用于创建枚举值的字符串表示形式的标准格式字符串。</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Composite formatting<ept id="p1">](composite-format.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>复合格式设置<ept id="p1">](composite-format.md)</ept></target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>Describes how to embed one or more formatted values in a string.</source>
          <target state="translated">描述如何将一个或多个设置了格式的值嵌入字符串。</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>The string can subsequently be displayed on the console or written to a stream.</source>
          <target state="translated">然后该字符串可以显示在控制台上或被写至流。</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Performing formatting operations<ept id="p1">](performing-formatting-operations.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>执行格式设置操作<ept id="p1">](performing-formatting-operations.md)</ept></target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>Lists topics that provide step-by-step instructions for performing specific formatting operations.</source>
          <target state="translated">列出分步说明如何执行特定的格式设置操作的主题。</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Parsing strings<ept id="p1">](parsing-strings.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>分析字符串<ept id="p1">](parsing-strings.md)</ept></target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>Describes how to initialize objects to the values described by string representations of those objects.</source>
          <target state="translated">描述如何将对象初始化为这些对象的字符串表示形式所描述的值。</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>Parsing is the inverse operation of formatting.</source>
          <target state="translated">分析是格式化的反向操作。</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>Reference</source>
          <target state="translated">参考</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.IFormattable<ept id="p1">](xref:System.IFormattable)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>System.IFormattable<ept id="p1">](xref:System.IFormattable)</ept></target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.IFormatProvider<ept id="p1">](xref:System.IFormatProvider)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>System.IFormatProvider<ept id="p1">](xref:System.IFormatProvider)</ept></target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.ICustomFormatter<ept id="p1">](xref:System.ICustomFormatter)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>System.ICustomFormatter<ept id="p1">](xref:System.ICustomFormatter)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>
