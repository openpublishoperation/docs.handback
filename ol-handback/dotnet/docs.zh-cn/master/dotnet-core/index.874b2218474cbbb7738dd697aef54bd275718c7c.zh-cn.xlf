<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-47f9650" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">76ab06edfed3cb124ac79f0d5d0c3480c0a5f170</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\testing\index.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bc0ef59fbd363c7bd45967743cb84ee3a8342875</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3b47dc3ff3cdd5518151305efb058c50f3271eb6</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Unit Testing in .NET Core</source>
          <target state="translated">.NET Core 中的单元测试</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Unit Testing in .NET Core</source>
          <target state="translated">.NET Core 中的单元测试</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Unit Testing in .NET Core</source>
          <target state="translated">.NET Core 中的单元测试</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>By <bpt id="p1">[</bpt>Steve Smith<ept id="p1">](http://ardalis.com)</ept> and <bpt id="p2">[</bpt>Bill Wagner<ept id="p2">](https://github.com/BillWagner)</ept></source>
          <target state="translated">作者：<bpt id="p1">[</bpt>Steve Smith<ept id="p1">](http://ardalis.com)</ept> 和 <bpt id="p2">[</bpt>Bill Wagner<ept id="p2">](https://github.com/BillWagner)</ept></target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>.NET Core has been designed with testability in mind, so that creating unit tests for your applications is easier than ever before.</source>
          <target state="translated">由于在设计 .NET Core 时考虑到了可测试性，因此为应用程序创建单元测试比以往更加简单。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This article briefly introduces unit tests (and how they differ from other kinds of tests).</source>
          <target state="translated">本文简要介绍了单元测试（以及与其他类型测试的不同之处）。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Linked resources demonstrates how to add a test project to your solution and then run unit tests using either the command line or Visual Studio.</source>
          <target state="translated">链接的资源演示了如何将测试项目添加到解决方案，然后使用命令行或 Visual Studio 运行单元测试。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Getting Started with Testing</source>
          <target state="translated">测试入门</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Having a suite of automated tests is one of the best ways to ensure a software application does what its authors intended it to do.</source>
          <target state="translated">确保软件应用程序按作者的期望执行操作，其中最好的一种方法是拥有自动化测试套件。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>There are many different kinds of tests for software applications, including integration tests, web tests, load tests, and many others.</source>
          <target state="translated">有多种用于软件应用程序的不同测试，包括集成测试、Web 测试、负载测试等其他许多测试。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>At the lowest level are unit tests, which test individual software components or methods.</source>
          <target state="translated">最低级别的测试为单元测试，此测试用于测试个人软件组件或方法。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Unit tests should only test code within the developer’s control, and should not test infrastructure concerns, like databases, file systems, or network resources.</source>
          <target state="translated">单元测试只应测试开发人员控件中的代码，而不应测试基础结构问题，如数据库、文件系统或网络资源等。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Unit tests may be written using <bpt id="p1">[</bpt>Test Driven Development (TDD)<ept id="p1">](http://deviq.com/test-driven-development/)</ept>, or they can be added to existing code to confirm its correctness.</source>
          <target state="translated">可以使用<bpt id="p1">[</bpt>测试驱动开发 (TDD)<ept id="p1">](http://deviq.com/test-driven-development/)</ept> 编写单元测试，或将其添加到现有代码以确认其正确性。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In either case, they should be small, well-named, and fast, since ideally you will want to be able to run hundreds of them before pushing your changes into the project’s shared code repository.</source>
          <target state="translated">无论哪种情况，单元测试都应该是良好命名、快捷的小型测试，因为在理想情况下，希望能够在将更改推送到项目的共享代码存储库之前运行数百个单元测试。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Developers often struggle with coming up with good names for their test classes and methods.</source>
          <target state="translated">开发人员经常要想方设法地为测试类和方法提供合适的名称。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>As a starting point, the ASP.NET product team follows <bpt id="p1">[</bpt>these conventions<ept id="p1">](https://github.com/aspnet/Home/wiki/Engineering-guidelines#unit-tests-and-functional-tests)</ept>.</source>
          <target state="translated">作为起点，ASP.NET 产品团队会遵循<bpt id="p1">[</bpt>这些约定<ept id="p1">](https://github.com/aspnet/Home/wiki/Engineering-guidelines#unit-tests-and-functional-tests)</ept>。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>When writing unit tests, be careful you don’t accidentally introduce dependencies on infrastructure.</source>
          <target state="translated">编写单元测试时，注意不要在基础结构上意外引入了依赖项。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>These tend to make tests slower and more brittle, and thus should be reserved for integration tests.</source>
          <target state="translated">这些依赖项往往会降低测试速度，使测试更加脆弱，因此应将其保留供集成测试使用。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You can avoid these hidden dependencies in your application code by following the <bpt id="p1">[</bpt>Explicit Dependencies Principle<ept id="p1">](http://deviq.com/explicit-dependencies-principle/)</ept> and using <bpt id="p2">[</bpt>Dependency Injection<ept id="p2">](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection)</ept> to request your dependencies from the framework.</source>
          <target state="translated">可以通过遵循 <bpt id="p1">[</bpt>Explicit Dependencies Principle<ept id="p1">](http://deviq.com/explicit-dependencies-principle/)</ept>（显示依赖项原则）和使用 <bpt id="p2">[</bpt>Dependency Injection<ept id="p2">](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection)</ept>（依赖项注入）从框架中请求依赖项，以此避免应用程序代码中的这些隐藏依赖项。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You can also keep your unit tests in a separate project from your integration tests, and ensure your unit test project doesn’t have references to or dependencies on infrastructure packages.</source>
          <target state="translated">还可以将单元测试保留在单独的项目中，与集成测试相分隔，并确保单元测试项目没有引用或依赖于基础结构包。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Learn more about unit testing in .NET Core projects:</source>
          <target state="translated">了解有关 .NET Core 项目中的单元测试的详细信息：</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Try this <bpt id="p1">[</bpt>walkthrough creating unit tests with xunit and the .NET CLI<ept id="p1">](unit-testing-with-dotnet-test.md)</ept>.</source>
          <target state="translated">请尝试<bpt id="p1">[</bpt>使用 xunit 和 .NET CLI 创建单元测试的演练<ept id="p1">](unit-testing-with-dotnet-test.md)</ept>。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The XUnit team has written a tutorial that shows <bpt id="p1">[</bpt>how to use xunit with .NET Core and Visual Studio<ept id="p1">](http://xunit.github.io/docs/getting-started-dotnet-core.html)</ept>.</source>
          <target state="translated">XUnit 团队编写了说明<bpt id="p1">[</bpt>如何将 xunit 与 .NET Core 和 Visual Studio 配合使用<ept id="p1">](http://xunit.github.io/docs/getting-started-dotnet-core.html)</ept>的教程。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>