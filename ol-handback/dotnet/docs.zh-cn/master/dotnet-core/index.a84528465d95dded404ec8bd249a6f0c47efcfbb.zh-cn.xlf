<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b5c25fc" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5872201f705c07bf692d0dc7f962068632f6b540</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\migration\index.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1a8b6220634b48f903457109f8354e4dbf515aed</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b5a17d825dd7004db86fc4c3e46ee8af797ef7c8</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>.NET Core migration to the csproj format | Microsoft Docs</source>
          <target state="translated">.NET Core 迁移到 csproj 格式 | Microsoft Docs</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>.NET Core project.json to csproj migration</source>
          <target state="translated">.NET Core project.json 到 csproj 的迁移</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core, .NET Core migration</source>
          <target state="translated">.NET, .NET Core, .NET Core 迁移</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Migrating .NET Core projects to the .csproj format</source>
          <target state="translated">将 .NET Core 项目迁移到 .csproj 格式</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This document will cover migration scenarios for .NET Core projects and will go over the following three migration scenarios:</source>
          <target state="translated">本文档介绍 .NET Core 项目的迁移方案，并探讨以下三个迁移方案：</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Migration from a valid latest schema of <bpt id="p2">*</bpt>project.json<ept id="p2">*</ept> to <bpt id="p3">*</bpt>csproj<ept id="p3">*</ept><ept id="p1">](#migration-from-projectjson-to-csproj)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>从 project.json 的一个最新有效架构迁移到 csproj<ept id="p1">](#migration-from-projectjson-to-csproj)</ept></target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Migration from DNX to csproj<ept id="p1">](#migration-from-dnx-to-csproj)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>从 DNX 迁移到 csproj<ept id="p1">](#migration-from-dnx-to-csproj)</ept></target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Migration from RC3 and previous .NET Core csproj projects to the final format<ept id="p1">](#migration-from-earlier-net-core-csproj-formats-to-rtm-csproj)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>从 RC3 和以前的 .NET Core csproj 项目迁移到最终格式<ept id="p1">](#migration-from-earlier-net-core-csproj-formats-to-rtm-csproj)</ept></target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Migration from project.json to csproj</source>
          <target state="translated">从 project.json 迁移到 csproj</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Migration from <bpt id="p1">*</bpt>project.json<ept id="p1">*</ept> to <bpt id="p2">*</bpt>.csproj<ept id="p2">*</ept> can be done using one of the following methods:</source>
          <target state="translated">可使用以下任一方法从 project.json 迁移到 .csproj：</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Visual Studio 2017<ept id="p1">](#visual-studio-2017)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Visual Studio 2017<ept id="p1">](#visual-studio-2017)</ept></target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>dotnet migrate command-line tool<ept id="p1">](#dotnet-migrate)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>dotnet migrate 命令行工具<ept id="p1">](#dotnet-migrate)</ept></target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Both methods use the same underlying engine to migrate the projects, so the results will be the same for both.</source>
          <target state="translated">这两种方法使用同一个基础引擎来迁移项目，因此，二者结果相同。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In most cases, using one of these two ways to migrate the <bpt id="p1">*</bpt>project.json<ept id="p1">*</ept> to <bpt id="p2">*</bpt>csproj<ept id="p2">*</ept> is the only thing that is needed and no further manual editing of the project file is necessary.</source>
          <target state="translated">在大多数情况下，只需使用这两种方法中的一种将 project.json 迁移到 csproj，而无需进一步对项目文件执行手动编辑。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The resulting <bpt id="p1">*</bpt>.csproj<ept id="p1">*</ept> file will be named the same as the containing directory name.</source>
          <target state="translated">生成的 .csproj 文件的名称与包含目录名称相同。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Visual Studio 2017</source>
          <target state="translated">Visual Studio 2017</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>When you open a <bpt id="p1">*</bpt>.xproj<ept id="p1">*</ept> file or a solution file which references <bpt id="p2">*</bpt>.xproj<ept id="p2">*</ept> files, the <bpt id="p3">**</bpt>One-way upgrade<ept id="p3">**</ept> dialog appears.</source>
          <target state="translated">打开 .xproj 文件或打开引用 .xproj 文件的解决方案文件时，将显示“单向升级”对话框。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The dialog displays the projects to be migrated.</source>
          <target state="translated">该对话框将显示要迁移的项目。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If you open a solution file, all the projects specified in the solution file will be listed.</source>
          <target state="translated">如果打开解决方案文件，则将列出解决方案文件中指定的所有项目。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Review the list of projects to be migrated and select <bpt id="p1">**</bpt>OK<ept id="p1">**</ept>.</source>
          <target state="translated">查看要迁移的项目的列表，然后选择“确定”。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>One-way upgrade dialog showing the list of projects to be migrated</source>
          <target state="translated">单向升级对话框，其中显示要迁移的项目的列表</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Visual Studio will migrate the projects chosen automatically.</source>
          <target state="translated">Visual Studio 将迁移自动选择的项目。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>When migrating a solution, if you don't choose all projects, the same dialog will appear asking you to upgrade the remaining projects from that solution.</source>
          <target state="translated">迁移解决方案时，如果不选择所有项目，会显示相同的对话框，要求升级该解决方案的其余项目。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Files that were migrated (<bpt id="p1">*</bpt>project.json<ept id="p1">*</ept>, <bpt id="p2">*</bpt>global.json<ept id="p2">*</ept>, <bpt id="p3">*</bpt>.xproj<ept id="p3">*</ept> and solution file) will be moved to a <bpt id="p4">*</bpt>Backup<ept id="p4">*</ept> folder.</source>
          <target state="translated">已迁移的文件（project.json、global.json、.xproj 和解决方案文件）会移动到备份文件夹。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The solution file that is migrated will be upgraded to Visual Studio 2017 and you won't be able to open that solution file in previous versions of Visual Studio.</source>
          <target state="translated">迁移的解决方案文件会升级到 Visual Studio 2017，将无法在先前版本的 Visual Studio 中打开该解决方案文件。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>A file named <bpt id="p1">*</bpt>UpgradeLog.htm<ept id="p1">*</ept> is also saved and automatically opened that contains a migration report.</source>
          <target state="translated">还会保存并自动打开名为 UpgradeLog.htm 的文件，该文件包含迁移报告。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The new tooling is not available in Visual Studio 2015, so you cannot migrate your projects using that version of Visual Studio.</source>
          <target state="translated">新工具在 Visual Studio 2015 中不可用，因此无法使用该版本的 Visual Studio 迁移项目。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>dotnet migrate</source>
          <target state="translated">dotnet migrate</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In the command-line scenario, you can use the <bpt id="p1">[</bpt><ph id="ph1">`dotnet migrate`</ph><ept id="p1">](../tools/dotnet-migrate.md)</ept> command.</source>
          <target state="translated">在该命令行方案中，可以使用 <bpt id="p1">[</bpt><ph id="ph1">`dotnet migrate`</ph><ept id="p1">](../tools/dotnet-migrate.md)</ept> 命令。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>It will migrate a project, a solution or a set of folders in that order, depending on which ones were found.</source>
          <target state="translated">它会按顺序迁移项目、解决方案或一组文件夹，具体取决于所找到的项。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>When you migrate a project, the project and all its dependencies are migrated.</source>
          <target state="translated">迁移项目时，将迁移项目及其所有依赖项。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Files that were migrated (<bpt id="p1">*</bpt>project.json<ept id="p1">*</ept>, <bpt id="p2">*</bpt>global.json<ept id="p2">*</ept> and <bpt id="p3">*</bpt>.xproj<ept id="p3">*</ept>) will be moved to a <bpt id="p4">*</bpt>backup<ept id="p4">*</ept> folder.</source>
          <target state="translated">已迁移的文件（project.json、global.json 和 .xproj）会移动到备份文件夹。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If you are using VS Code, the <ph id="ph1">`dotnet migrate`</ph> command will not modify VS Code-specific files such as <ph id="ph2">`tasks.json`</ph>.</source>
          <target state="translated">如果使用 VS Code，<ph id="ph1">`dotnet migrate`</ph> 命令不会修改 <ph id="ph2">`tasks.json`</ph> 等特定于 VS Code 的文件。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>These files need to be changed manually.</source>
          <target state="translated">需要手动更改这些文件。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This is also true if you are using Project Ryder or any editor or Integrated Development Environment (IDE) other than Visual Studio.</source>
          <target state="translated">如果使用 Project Ryder 或 Visual Studio 以外的任何编辑器或集成开发环境 (IDE)，也是如此。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Common issues</source>
          <target state="translated">常见问题</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If you get an error: “No executable found matching command dotnet-migrate":</source>
          <target state="translated">如果收到错误“未找到任何匹配命令 dotnet-migrate 的可执行文件”：</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Run <ph id="ph1">`dotnet --version`</ph> to see which version you are using.</source>
          <target state="translated">请运行 <ph id="ph1">`dotnet --version`</ph> 查看所使用的版本。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">`dotnet migrate`</ph><ept id="p1">](../tools/dotnet-migrate.md)</ept> requires .NET Core CLI RC3 or higher.</source>
          <target state="translated"><bpt id="p1">[</bpt><ph id="ph1">`dotnet migrate`</ph><ept id="p1">](../tools/dotnet-migrate.md)</ept> 需要 .NET Core CLI RC3 或更高版本。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>You’ll get this error if you have a <bpt id="p1">*</bpt>global.json<ept id="p1">*</ept> file in the current or parent directory and the <ph id="ph1">`sdk`</ph> version is set to an older version.</source>
          <target state="translated">如果当前目录或父级目录中有 global.json 文件，且 <ph id="ph1">`sdk`</ph> 版本设置为较低版本，则会收到此错误。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Migration from DNX to csproj</source>
          <target state="translated">从 DNX 迁移到 csproj</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>If you are still using DNX for .NET Core development, your migration process should be done in two stages:</source>
          <target state="translated">如果仍在使用 DNX 进行 .NET Core 开发，则应分两个阶段完成迁移过程：</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">[</bpt>existing DNX migration guidance<ept id="p1">](from-dnx.md)</ept> to migrate from DNX to project-json enabled CLI.</source>
          <target state="translated">使用<bpt id="p1">[</bpt>现有 DNX 迁移指南<ept id="p1">](from-dnx.md)</ept>从 DNX 迁移到启用了 project-json 的 CLI。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Follow the steps from the previous section to migrate from <bpt id="p1">*</bpt>project.json<ept id="p1">*</ept> to <bpt id="p2">*</bpt>.csproj<ept id="p2">*</ept>.</source>
          <target state="translated">请按照上一部分中的步骤，从 project.json 迁移到 .csproj。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>DNX has become officially deprecated during the Preview 1 release of the .NET Core CLI.</source>
          <target state="translated">已于 .NET Core CLI 的预览版 1 发布期间正式弃用 DNX。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Migration from earlier .NET Core csproj formats to RTM csproj</source>
          <target state="translated">从较早的 .NET Core csproj 格式迁移到 RTM csproj</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The .NET Core csproj format has been changing and evolving with each new pre-release version of the tooling.</source>
          <target state="translated">随着工具的每个新的预发布版本的推出，.NET Core csproj 格式也在不断变化发展。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>There is no tool that will migrate your project file from earlier versions of csproj to the latest, so you need to manually edit the project file.</source>
          <target state="translated">没有工具可以将项目文件从早期版本的 csproj 迁移到最新版本，因此需要手动编辑项目文件。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The actual steps depend on the version of the project file you are migrating.</source>
          <target state="translated">实际步骤取决于要迁移的项目文件的版本。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The following is some guidance to consider based on the changes that happened between versions:</source>
          <target state="translated">根据版本之间的变化，需考虑以下指导信息：</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Remove the tools version property from the <ph id="ph1">`&lt;Project&gt;`</ph> element, if it exists.</source>
          <target state="translated">从 <ph id="ph1">`&lt;Project&gt;`</ph> 元素中删除工具版本属性（如果存在）。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Remove the XML namespace (<ph id="ph1">`xmlns`</ph>) from the <ph id="ph2">`&lt;Project&gt;`</ph> element.</source>
          <target state="translated">从 <ph id="ph2">`&lt;Project&gt;`</ph> 元素中删除 XML 命名空间 (<ph id="ph1">`xmlns`</ph>)。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>If it doesn't exist, add the <ph id="ph1">`Sdk`</ph> attribute to the <ph id="ph2">`&lt;Project&gt;`</ph> element and set it to <ph id="ph3">`Microsoft.NET.Sdk`</ph> or <ph id="ph4">`Microsoft.NET.Sdk.Web`</ph>.</source>
          <target state="translated">如果不存在，请将 <ph id="ph1">`Sdk`</ph> 属性添加到 <ph id="ph2">`&lt;Project&gt;`</ph> 元素，并将其设置为 <ph id="ph3">`Microsoft.NET.Sdk`</ph> 或 <ph id="ph4">`Microsoft.NET.Sdk.Web`</ph>。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>This attribute specifies that the project uses the SDK to be used.</source>
          <target state="translated">此属性指定项目使用要使用的 SDK。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Microsoft.NET.Sdk.Web`</ph> is used for web apps.</source>
          <target state="translated"><ph id="ph1">`Microsoft.NET.Sdk.Web`</ph> 用于 Web 应用。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Remove the <ph id="ph1">`&lt;Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" /&gt;`</ph> and <ph id="ph2">`&lt;Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" /&gt;`</ph> statements from the top and bottom of the project.</source>
          <target state="translated">从项目的顶部和底部删除 <ph id="ph1">`&lt;Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" /&gt;`</ph> 和 <ph id="ph2">`&lt;Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" /&gt;`</ph> 语句。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>These import statements are implied by the SDK, so there is no need for them to be in the project.</source>
          <target state="translated">SDK 隐含这些 import 语句，因此项目中不需要这些语句。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>If you have <ph id="ph1">`Microsoft.NETCore.App`</ph> or <ph id="ph2">`NETStandard.Library`</ph> <ph id="ph3">`&lt;PackageReference&gt;`</ph> items in your project, you should remove them.</source>
          <target state="translated">如果项目中含项 <ph id="ph1">`Microsoft.NETCore.App`</ph> 或 <ph id="ph2">`NETStandard.Library`</ph> <ph id="ph3">`&lt;PackageReference&gt;`</ph>，应将其删除。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>These package references are <bpt id="p1">[</bpt>implied by the SDK<ept id="p1">](https://aka.ms/sdkimplicitrefs)</ept>.</source>
          <target state="translated"><bpt id="p1">[</bpt>SDK 隐含<ept id="p1">](https://aka.ms/sdkimplicitrefs)</ept>这些包引用。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Remove the <ph id="ph1">`Microsoft.NET.Sdk`</ph> <ph id="ph2">`&lt;PackageReference&gt;`</ph> element, if it exists.</source>
          <target state="translated">删除 <ph id="ph1">`Microsoft.NET.Sdk`</ph> <ph id="ph2">`&lt;PackageReference&gt;`</ph> 元素（如果存在）。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The SDK reference comes through the <ph id="ph1">`Sdk`</ph> attribute on the <ph id="ph2">`&lt;Project&gt;`</ph> element.</source>
          <target state="translated">SDK 引用来自 <ph id="ph2">`&lt;Project&gt;`</ph> 元素上的 <ph id="ph1">`Sdk`</ph> 属性。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Remove the globs that are <bpt id="p1">[</bpt>implied by the SDK<ept id="p1">](https://aka.ms/sdkimplicititems)</ept>.</source>
          <target state="translated">删除 <bpt id="p1">[</bpt>SDK 隐含<ept id="p1">](https://aka.ms/sdkimplicititems)</ept>的 glob。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Leaving these globs in your project will cause an error on build because compile items will be duplicated.</source>
          <target state="translated">在项目中留下这些 glob 会引发生成错误，因为编译项会发生重复。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>After these steps your project should be fully compatible with the RTM .NET Core csproj format.</source>
          <target state="translated">完成这些步骤后，项目应与 RTM .NET Core csproj 格式完全兼容。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>For examples of before and after the migration from old csproj format to the new one, see the <bpt id="p1">[</bpt>Updating Visual Studio 2017 RC – .NET Core Tooling improvements<ept id="p1">](https://blogs.msdn.microsoft.com/dotnet/2016/12/12/updating-visual-studio-2017-rc-net-core-tooling-improvements/)</ept> article on the .NET blog.</source>
          <target state="translated">有关从旧的 csproj 格式迁移到新的 csproj 格式之前和之后情况的示例，请参阅 .NET 博客上的 <bpt id="p1">[</bpt>Updating Visual Studio 2017 RC – .NET Core Tooling improvements<ept id="p1">](https://blogs.msdn.microsoft.com/dotnet/2016/12/12/updating-visual-studio-2017-rc-net-core-tooling-improvements/)</ept>（更新 Visual Studio 2017 RC - .NET Core 工具改进）文章。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>
