<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-47f9650" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4e8744c6c7a42c3803bf9716a3ae271b7284be3d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\base-types\object-model.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6f349cd4e7d11d678653f5437a0585197dc0e2c9</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">74b12eb70b679ac7dd54b6c8528bf25e3fb427ef</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>The regular expression object model</source>
          <target state="translated">正则表达式对象模型</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>The regular expression object model</source>
          <target state="translated">正则表达式对象模型</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET、.NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The regular expression object model</source>
          <target state="translated">正则表达式对象模型</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This topic describes the object model used in working with.NET regular expressions.</source>
          <target state="translated">本主题介绍在处理 .NET 正则表达式时使用的对象模型。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>It contains the following sections:</source>
          <target state="translated">它包含下列部分：</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>The regular expression engine<ept id="p1">](#the-regular-expression-engine)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>正则表达式引擎<ept id="p1">](#the-regular-expression-engine)</ept></target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>The MatchCollection and Match objects<ept id="p1">](#the-matchcollection-and-match-objects)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>MatchCollection 和 Match 对象<ept id="p1">](#the-matchcollection-and-match-objects)</ept></target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>The Group collection<ept id="p1">](#the-group-collection)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>组集合<ept id="p1">](#the-group-collection)</ept></target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>The captured group<ept id="p1">](#the-captured-group)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>捕获的组<ept id="p1">](#the-captured-group)</ept></target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>The capture collection<ept id="p1">](#the-capture-collection)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>捕获集合<ept id="p1">](#the-capture-collection)</ept></target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>The individual capture<ept id="p1">](#the-individual-capture)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>单个捕获<ept id="p1">](#the-individual-capture)</ept></target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The regular expression engine</source>
          <target state="translated">正则表达式引擎</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The regular expression engine in .NET is represented by the <bpt id="p1">[</bpt>Regex<ept id="p1">](xref:System.Text.RegularExpressions.Regex)</ept> class.</source>
          <target state="translated">.NET 中的正则表达式引擎由 <bpt id="p1">[</bpt>Regex<ept id="p1">](xref:System.Text.RegularExpressions.Regex)</ept> 类表示。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The regular expression engine is responsible for parsing and compiling a regular expression, and for performing operations that match the regular expression pattern with an input string.</source>
          <target state="translated">正则表达式引擎负责分析和编译正则表达式，并执行用于将正则表达式模式与输入字符串相匹配的操作。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The engine is the central component in .NET regular expression object model.</source>
          <target state="translated">此引擎是 .NET 正则表达式对象模型中的主要组件。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You can use the regular expression engine in either of two ways:</source>
          <target state="translated">可以通过以下两种方式之一使用正则表达式引擎：</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>By calling the static methods of the <bpt id="p1">[</bpt>Regex<ept id="p1">](xref:System.Text.RegularExpressions.Regex)</ept> class.</source>
          <target state="translated">通过调用 <bpt id="p1">[</bpt>Regex<ept id="p1">](xref:System.Text.RegularExpressions.Regex)</ept> 类的静态方法。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The method parameters include the input string and the regular expression pattern.</source>
          <target state="translated">方法参数包含输入字符串和正则表达式模式。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The regular expression engine caches regular expressions that are used in static method calls, so repeated calls to static regular expression methods that use the same regular expression offer relatively good performance.</source>
          <target state="translated">正则表达式引擎会缓存静态方法调用中使用的正则表达式，这样一来，重复调用使用同一正则表达式的静态正则表达式方法将提供相对良好的性能。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>By instantiating a <bpt id="p1">[</bpt>Regex<ept id="p1">](xref:System.Text.RegularExpressions.Regex)</ept> object, by passing a regular expression to the class constructor.</source>
          <target state="translated">通过实例化 <bpt id="p1">[</bpt>Regex<ept id="p1">](xref:System.Text.RegularExpressions.Regex)</ept> 对象，采用的方式是将一个正则表达式传递给类构造函数。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In this case, the <bpt id="p1">[</bpt>Regex<ept id="p1">](xref:System.Text.RegularExpressions.Regex)</ept> object is immutable (read-only) and represents a regular expression engine that is tightly coupled with a single regular expression.</source>
          <target state="translated">在此情况下，<bpt id="p1">[</bpt>Regex<ept id="p1">](xref:System.Text.RegularExpressions.Regex)</ept> 对象是不可变的（只读），它表示一个与单个正则表达式紧密耦合的正则表达式引擎。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Because regular expressions used by Regex instances are not cached, you should not instantiate a <bpt id="p1">[</bpt>Regex<ept id="p1">](xref:System.Text.RegularExpressions.Regex)</ept> object multiple times with the same regular expression.</source>
          <target state="translated">由于未对 Regex 实例使用的正则表达式进行缓存，因此不应使用同一正则表达式实例化 <bpt id="p1">[</bpt>Regex<ept id="p1">](xref:System.Text.RegularExpressions.Regex)</ept> 对象多次。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>You can call the methods of the <bpt id="p1">[</bpt>Regex<ept id="p1">](xref:System.Text.RegularExpressions.Regex)</ept> class to perform the following operations:</source>
          <target state="translated">可以调用 <bpt id="p1">[</bpt>Regex<ept id="p1">](xref:System.Text.RegularExpressions.Regex)</ept> 类的方法来执行下列操作：</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Determine whether a string matches a regular expression pattern.</source>
          <target state="translated">确定字符串是否与正则表达式模式匹配。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Extract a single match or the first match.</source>
          <target state="translated">提取单个匹配项或第一个匹配项。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Extract all matches.</source>
          <target state="translated">提取所有匹配项。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Replace a matched substring.</source>
          <target state="translated">替换匹配的子字符串。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Split a single string into an array of strings.</source>
          <target state="translated">将单个字符串拆分成一个字符串数组。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>These operations are described in the following sections.</source>
          <target state="translated">以下各部分对这些操作进行了描述。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Matching a regular expression pattern</source>
          <target state="translated">匹配正则表达式模式</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Regex.IsMatch<ept id="p1">](xref:System.Text.RegularExpressions.Regex.IsMatch(System.String))</ept> method returns <ph id="ph1">`true`</ph> if the string matches the pattern, or <ph id="ph2">`false`</ph> if it does not.</source>
          <target state="translated">如果字符串与此模式匹配，则 <bpt id="p1">[</bpt>Regex.IsMatch<ept id="p1">](xref:System.Text.RegularExpressions.Regex.IsMatch(System.String))</ept> 方法返回 <ph id="ph1">`true`</ph>；如果字符串与此模式不匹配，则该方法返回 <ph id="ph2">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>IsMatch<ept id="p1">](xref:System.Text.RegularExpressions.Regex.IsMatch(System.String))</ept> method is often used to validate string input.</source>
          <target state="translated"><bpt id="p1">[</bpt>IsMatch<ept id="p1">](xref:System.Text.RegularExpressions.Regex.IsMatch(System.String))</ept> 方法通常用于验证字符串输入。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For example, the following code ensures that a string matches a valid social security number in the United States.</source>
          <target state="translated">例如，下面的代码将确保字符串与有效的美国社会保障号匹配。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The regular expression pattern <ph id="ph1">`^\d{3}-\d{2}-\d{4}$`</ph> is interpreted as shown in the following table.</source>
          <target state="translated">正则表达式模式 <ph id="ph1">`^\d{3}-\d{2}-\d{4}$`</ph> 的含义如下表所示。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">模式</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">说明</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Match the beginning of the input string.</source>
          <target state="translated">匹配输入字符串的开头部分。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Match three decimal digits.</source>
          <target state="translated">匹配三个十进制数字。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Match a hyphen.</source>
          <target state="translated">匹配连字符。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Match two decimal digits.</source>
          <target state="translated">匹配两个十进制数字。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Match a hyphen.</source>
          <target state="translated">匹配连字符。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Match four decimal digits.</source>
          <target state="translated">匹配四个十进制数字。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Match the end of the input string.</source>
          <target state="translated">匹配输入字符串的末尾部分。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Extracting a single match or the first match</source>
          <target state="translated">提取单个匹配项或第一个匹配项</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Regex.Match<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Match(System.String))</ept> method returns a <bpt id="p2">[</bpt>Match<ept id="p2">](xref:System.Text.RegularExpressions.Match)</ept> object that contains information about the first substring that matches a regular expression pattern.</source>
          <target state="translated"><bpt id="p1">[</bpt>Regex.Match<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Match(System.String))</ept> 方法返回一个 <bpt id="p2">[</bpt>Match<ept id="p2">](xref:System.Text.RegularExpressions.Match)</ept> 对象，该对象包含有关与正则表达式模式匹配的第一个子字符串的信息。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`Match.Success`</ph> property returns <ph id="ph2">`true`</ph>, indicating that a match was found, you can retrieve information about subsequent matches by calling the <bpt id="p1">[</bpt>Match.NextMatch<ept id="p1">](xref:System.Text.RegularExpressions.Match.NextMatch)</ept> method.</source>
          <target state="translated">如果 <ph id="ph1">`Match.Success`</ph> 属性返回 <ph id="ph2">`true`</ph>，则表示已找到一个匹配项，可以通过调用 <bpt id="p1">[</bpt>Match.NextMatch<ept id="p1">](xref:System.Text.RegularExpressions.Match.NextMatch)</ept> 方法来检索有关后续匹配项的信息。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>These method calls can continue until the <ph id="ph1">`Match.Success`</ph> property returns <ph id="ph2">`false`</ph>.</source>
          <target state="translated">这些方法调用可以继续进行，直到 <ph id="ph1">`Match.Success`</ph> 属性返回 <ph id="ph2">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For example, the following code uses the <bpt id="p1">[</bpt>Regex.Match(String, String)<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Match(System.String,System.String))</ept> method to find the first occurrence of a duplicated word in a string.</source>
          <target state="translated">例如，下面的代码使用 <bpt id="p1">[</bpt>Regex.Match(String, String)<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Match(System.String,System.String))</ept> 方法查找重复的单词在字符串中的第一个匹配项。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>It then calls the <bpt id="p1">[</bpt>Match.NextMatch<ept id="p1">](xref:System.Text.RegularExpressions.Match.NextMatch)</ept> method to find any additional occurrences.</source>
          <target state="translated">然后，此代码调用 <bpt id="p1">[</bpt>Match.NextMatch<ept id="p1">](xref:System.Text.RegularExpressions.Match.NextMatch)</ept> 方法查找任何其他匹配项。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The example examines the <ph id="ph1">`Match.Success`</ph> property after each method call to determine whether the current match was successful and whether a call to the <bpt id="p1">[</bpt>Match.NextMatch<ept id="p1">](xref:System.Text.RegularExpressions.Match.NextMatch)</ept> method should follow.</source>
          <target state="translated">该示例将在每次调用方法后检查 <ph id="ph1">`Match.Success`</ph> 属性以确定当前匹配是否成功，并确定是否应接着调用 <bpt id="p1">[</bpt>Match.NextMatch<ept id="p1">](xref:System.Text.RegularExpressions.Match.NextMatch)</ept> 方法。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The regular expression pattern <ph id="ph1">`\b(\w+)\W+(\1)\b`</ph> is interpreted as shown in the following table.</source>
          <target state="translated">正则表达式模式 <ph id="ph1">`\b(\w+)\W+(\1)\b`</ph> 的含义如下表所示。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">模式</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">描述</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Begin the match on a word boundary.</source>
          <target state="translated">在单词边界处开始匹配。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Match one or more word characters.</source>
          <target state="translated">匹配一个或多个单词字符。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>This is the first capturing group.</source>
          <target state="translated">这是第一个捕获组。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Match one or more non-word characters.</source>
          <target state="translated">匹配一个或多个非单词字符。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Match the first captured string.</source>
          <target state="translated">与第一个捕获的字符串匹配。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>This is the second capturing group.</source>
          <target state="translated">这是第二个捕获组。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>End the match on a word boundary.</source>
          <target state="translated">在单词边界处结束匹配。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Extracting all matches</source>
          <target state="translated">提取所有匹配项</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Regex.Matches<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Matches(System.String))</ept> method returns a <bpt id="p2">[</bpt>MatchCollection<ept id="p2">](xref:System.Text.RegularExpressions.MatchCollection)</ept> object that contains information about all matches that the regular expression engine found in the input string.</source>
          <target state="translated"><bpt id="p1">[</bpt>Regex.Matches<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Matches(System.String))</ept> 方法返回一个 <bpt id="p2">[</bpt>MatchCollection<ept id="p2">](xref:System.Text.RegularExpressions.MatchCollection)</ept> 对象，该对象包含有关正则表达式引擎在输入字符串中找到的所有匹配项的信息。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>For example, the previous example could be rewritten to call the <bpt id="p1">[</bpt>Matches<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Matches(System.String))</ept> method instead of the <bpt id="p2">[</bpt>Match<ept id="p2">](xref:System.Text.RegularExpressions.Regex.Match(System.String))</ept> and <bpt id="p3">[</bpt>NextMatch<ept id="p3">](xref:System.Text.RegularExpressions.Match.NextMatch)</ept> methods.</source>
          <target state="translated">例如，可重写上一示例以调用 <bpt id="p1">[</bpt>Matches<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Matches(System.String))</ept> 方法，而不是调用 <bpt id="p2">[</bpt>Match<ept id="p2">](xref:System.Text.RegularExpressions.Regex.Match(System.String))</ept> 和 <bpt id="p3">[</bpt>NextMatch<ept id="p3">](xref:System.Text.RegularExpressions.Match.NextMatch)</ept> 方法。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Replacing a matched substring</source>
          <target state="translated">替换匹配的子字符串</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Regex.Replace<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Replace(System.String,System.String))</ept> method replaces each substring that matches the regular expression pattern with a specified string or regular expression pattern, and returns the entire input string with replacements.</source>
          <target state="translated"><bpt id="p1">[</bpt>Regex.Replace<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Replace(System.String,System.String))</ept> 方法会将与正则表达式模式匹配的每个子字符串替换为指定的字符串或正则表达式模式，并返回进行了替换的整个输入字符串。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>For example, the following code adds a U.S. currency symbol before a decimal number in a string.</source>
          <target state="translated">例如，下面的代码在字符串的十进制数字前添加了美国货币符号。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The regular expression pattern <ph id="ph1">`\b\d+\.\d{2}\b`</ph> is interpreted as shown in the following table.</source>
          <target state="translated">正则表达式模式 <ph id="ph1">`\b\d+\.\d{2}\b`</ph> 的含义如下表所示。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">模式</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">描述</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Begin the match at a word boundary.</source>
          <target state="translated">在单词边界处开始匹配。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Match one or more decimal digits.</source>
          <target state="translated">匹配一个或多个十进制数字。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Match a period.</source>
          <target state="translated">匹配句点。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Match two decimal digits.</source>
          <target state="translated">匹配两个十进制数字。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>End the match at a word boundary.</source>
          <target state="translated">在单词边界处结束匹配。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The replacement pattern <ph id="ph1">`$$$&amp;`</ph> is interpreted as shown in the following table.</source>
          <target state="translated">替换模式 <ph id="ph1">`$$$&amp;`</ph> 的含义如下表所示。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">模式</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Replacement string</source>
          <target state="translated">替换字符串</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The dollar sign (<bpt id="p1">**</bpt><ph id="ph1">$</ph><ept id="p1">**</ept>) character.</source>
          <target state="translated">美元符号 (<bpt id="p1">**</bpt><ph id="ph1">$</ph><ept id="p1">**</ept>) 字符。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The entire matched substring.</source>
          <target state="translated">整个匹配的子字符串。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Splitting a single string into an array of strings</source>
          <target state="translated">将单个字符串拆分成一个字符串数组</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Regex.Split<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Split(System.String))</ept> method splits the input string at the positions defined by a regular expression match.</source>
          <target state="translated"><bpt id="p1">[</bpt>Regex.Split<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Split(System.String))</ept> 方法在由正则表达式匹配项定义的位置拆分输入字符串。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>For example, the following code places the items in a numbered list into a string array.</source>
          <target state="translated">例如，下面的代码将编号列表中的项置于字符串数组中。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The regular expression pattern <ph id="ph1">`\b\d{1,2}\.\s`</ph> is interpreted as shown in the following table.</source>
          <target state="translated">正则表达式模式 <ph id="ph1">`\b\d{1,2}\.\s`</ph> 的含义如下表所示。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">模式</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">描述</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Begin the match at a word boundary.</source>
          <target state="translated">在单词边界处开始匹配。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Match one or two decimal digits.</source>
          <target state="translated">匹配一个或两个十进制数字。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Match a period.</source>
          <target state="translated">匹配句点。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Match a white-space character.</source>
          <target state="translated">与空白字符匹配。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The MatchCollection and Match objects</source>
          <target state="translated">MatchCollection 和 Match 对象</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Regex<ept id="p1">](xref:System.Text.RegularExpressions.Regex)</ept> methods return two objects that are part of the regular expression object model: the <bpt id="p2">[</bpt>MatchCollection<ept id="p2">](xref:System.Text.RegularExpressions.MatchCollection)</ept> object, and the <bpt id="p3">[</bpt>Match<ept id="p3">](xref:System.Text.RegularExpressions.Match)</ept> object.</source>
          <target state="translated"><bpt id="p1">[</bpt>Regex<ept id="p1">](xref:System.Text.RegularExpressions.Regex)</ept> 方法返回作为正则表达式对象模型的一部分的两个对象：<bpt id="p2">[</bpt>MatchCollection<ept id="p2">](xref:System.Text.RegularExpressions.MatchCollection)</ept> 对象和 <bpt id="p3">[</bpt>Match<ept id="p3">](xref:System.Text.RegularExpressions.Match)</ept> 对象。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The Match collection</source>
          <target state="translated">Match 集合</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Regex.Matches<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Matches(System.String))</ept> method returns a <bpt id="p2">[</bpt>MatchCollection<ept id="p2">](xref:System.Text.RegularExpressions.MatchCollection)</ept> object that contains <bpt id="p3">[</bpt>Match<ept id="p3">](xref:System.Text.RegularExpressions.Match)</ept> objects that represent all the matches that the regular expression engine found, in the order in which they occur in the input string.</source>
          <target state="translated"><bpt id="p1">[</bpt>Regex.Matches<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Matches(System.String))</ept> 方法返回一个 <bpt id="p2">[</bpt>MatchCollection<ept id="p2">](xref:System.Text.RegularExpressions.MatchCollection)</ept> 对象，该对象包含多个 <bpt id="p3">[</bpt>Match<ept id="p3">](xref:System.Text.RegularExpressions.Match)</ept> 对象，这些对象表示正则表达式引擎在输入字符串中找到的所有匹配项（其顺序为这些匹配项在输入字符串中的显示顺序）。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>If there are no matches, the method returns a <bpt id="p1">[</bpt>MatchCollection<ept id="p1">](xref:System.Text.RegularExpressions.MatchCollection)</ept> object that contains  <bpt id="p2">[</bpt>Match<ept id="p2">](xref:System.Text.RegularExpressions.Match)</ept> object with no members.</source>
          <target state="translated">如果没有匹配项，则该方法返回的 <bpt id="p1">[</bpt>MatchCollection<ept id="p1">](xref:System.Text.RegularExpressions.MatchCollection)</ept> 对象所包含的 <bpt id="p2">[</bpt>Match<ept id="p2">](xref:System.Text.RegularExpressions.Match)</ept> 对象不包含任何成员。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>MatchCollection<ept id="p1">](xref:System.Text.RegularExpressions.MatchCollection)</ept> <ph id="ph1">`Item`</ph> property lets you access individual members of the collection by index, from zero to one less than the value of the <bpt id="p2">[</bpt>MatchCollection.Count<ept id="p2">](xref:System.Text.RegularExpressions.MatchCollection.Count)</ept> property.</source>
          <target state="translated">利用 <bpt id="p1">[</bpt>MatchCollection<ept id="p1">](xref:System.Text.RegularExpressions.MatchCollection)</ept> <ph id="ph1">`Item`</ph> 属性，你可以按照索引（从零到将 <bpt id="p2">[</bpt>MatchCollection.Count<ept id="p2">](xref:System.Text.RegularExpressions.MatchCollection.Count)</ept> 属性的值减&amp;1; 所得的值）访问集合中的各个成员。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>'Item` is the collection's indexer (in C#) and default property (in Visual Basic)..</source>
          <target state="translated">'Item` 是集合的索引器（在 C# 中）和默认属性（在 Visual Basic 中）。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>By default, the call to the <bpt id="p1">[</bpt>Regex.Matches<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Matches(System.String))</ept> method uses lazy evaluation to populate the <bpt id="p2">[</bpt>MatchCollection<ept id="p2">](xref:System.Text.RegularExpressions.MatchCollection)</ept> object.</source>
          <target state="translated">默认情况下，调用 <bpt id="p1">[</bpt>Regex.Matches<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Matches(System.String))</ept> 方法会使用延迟计算来填充 <bpt id="p2">[</bpt>MatchCollection<ept id="p2">](xref:System.Text.RegularExpressions.MatchCollection)</ept> 对象。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Access to properties that require a fully populated collection, such as the <bpt id="p1">[</bpt>MatchCollection.Count<ept id="p1">](xref:System.Text.RegularExpressions.MatchCollection.Count)</ept> and <ph id="ph1">`Item`</ph> properties, may involve a performance penalty.</source>
          <target state="translated">访问需要完全填充的集合的属性（如 <bpt id="p1">[</bpt>MatchCollection.Count<ept id="p1">](xref:System.Text.RegularExpressions.MatchCollection.Count)</ept> 和 <ph id="ph1">`Item`</ph> 属性）可能会降低性能。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>As a result, we recommend that you access the collection by using the <bpt id="p1">[</bpt>IEnumerator<ept id="p1">](xref:System.Collections.IEnumerator)</ept> object that is returned by the <bpt id="p2">[</bpt>MatchCollection.GetEnumerator<ept id="p2">](xref:System.Text.RegularExpressions.MatchCollection.GetEnumerator)</ept> method.</source>
          <target state="translated">因此，建议你使用由 <bpt id="p2">[</bpt>MatchCollection.GetEnumerator<ept id="p2">](xref:System.Text.RegularExpressions.MatchCollection.GetEnumerator)</ept> 方法返回的 <bpt id="p1">[</bpt>IEnumerator<ept id="p1">](xref:System.Collections.IEnumerator)</ept> 对象访问该集合。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Individual languages provide constructs, such as <ph id="ph1">`foreach`</ph> in C# and `For Each' in Visual Basic, that wrap the collection's IEnumerator](xref:System.Collections.IEnumerator) interface.</source>
          <target state="translated">各种语言都提供了用于包装该集合的 IEnumerator](xref:System.Collections.IEnumerator) 接口的构造（如 C# 中的 <ph id="ph1">`foreach`</ph> 和 Visual Basic 中的 `For Each'）。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The following example uses the <bpt id="p1">[</bpt>Regex.Matches(String)<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Matches(System.String))</ept> method to populate a <bpt id="p2">[</bpt>MatchCollection<ept id="p2">](xref:System.Text.RegularExpressions.MatchCollection)</ept> object with all the matches found in an input string.</source>
          <target state="translated">下面的示例使用 <bpt id="p1">[</bpt>Regex.Matches(String)<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Matches(System.String))</ept> 方法将在输入字符串中找到的所有匹配项填充到 <bpt id="p2">[</bpt>MatchCollection<ept id="p2">](xref:System.Text.RegularExpressions.MatchCollection)</ept> 对象中。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The example enumerates the collection, copies the matches to a string array, and records the character positions in an integer array.</source>
          <target state="translated">此示例枚举了该集合，将匹配项复制到字符串数组并将字符位置记录在整数数组中。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The Match</source>
          <target state="translated">Match 类</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Match<ept id="p1">](xref:System.Text.RegularExpressions.Match)</ept> class represents the result of a single regular expression match.</source>
          <target state="translated"><bpt id="p1">[</bpt>Match<ept id="p1">](xref:System.Text.RegularExpressions.Match)</ept> 类表示单个正则表达式匹配项的结果。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>You can access <bpt id="p1">[</bpt>Match<ept id="p1">](xref:System.Text.RegularExpressions.Match)</ept> objects in two ways:</source>
          <target state="translated">可以通过两种方式访问 <bpt id="p1">[</bpt>Match<ept id="p1">](xref:System.Text.RegularExpressions.Match)</ept> 对象：</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>By retrieving them from the <bpt id="p1">[</bpt>MatchCollection<ept id="p1">](xref:System.Text.RegularExpressions.MatchCollection)</ept> object that is returned by the Regex.Matches method.</source>
          <target state="translated">通过从 Regex.Matches 方法返回的 <bpt id="p1">[</bpt>MatchCollection<ept id="p1">](xref:System.Text.RegularExpressions.MatchCollection)</ept> 对象检索这些对象。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>To retrieve individual <bpt id="p1">[</bpt>Match<ept id="p1">](xref:System.Text.RegularExpressions.Match)</ept> objects, iterate the collection by using a <ph id="ph1">`foreach`</ph> (in C#) or <ph id="ph2">`For Each...Next`</ph> (in Visual Basic) construct, or use the <bpt id="p2">[</bpt>MatchCollection<ept id="p2">](xref:System.Text.RegularExpressions.MatchCollection)</ept> <ph id="ph3">`Item`</ph> property to retrieve a specific <bpt id="p3">[</bpt>Match<ept id="p3">](xref:System.Text.RegularExpressions.Match)</ept> object either by index or by name.</source>
          <target state="translated">若要检索各个 <bpt id="p1">[</bpt>Match<ept id="p1">](xref:System.Text.RegularExpressions.Match)</ept> 对象，请通过使用 <ph id="ph1">`foreach`</ph>（在 C# 中）或 <ph id="ph2">`For Each...Next`</ph>（在 Visual Basic 中）构造循环访问集合；或者使用 <bpt id="p2">[</bpt>MatchCollection<ept id="p2">](xref:System.Text.RegularExpressions.MatchCollection)</ept> <ph id="ph3">`Item`</ph> 属性以按索引或名称检索特定的 <bpt id="p3">[</bpt>Match<ept id="p3">](xref:System.Text.RegularExpressions.Match)</ept> 对象。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>You can also retrieve individual <bpt id="p1">[</bpt>Match<ept id="p1">](xref:System.Text.RegularExpressions.Match)</ept> objects from the collection by iterating the collection by index, from zero to one less that the number of objects in the collection.</source>
          <target state="translated">也可以通过按索引（从零到将集合中的对象数减去&amp;1; 所得的值）循环访问集合来检索集合中的各个 <bpt id="p1">[</bpt>Match<ept id="p1">](xref:System.Text.RegularExpressions.Match)</ept> 对象。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>However, this method does not take advantage of lazy evaluation, because it accesses the <bpt id="p1">[</bpt>MatchCollection.Count<ept id="p1">](xref:System.Text.RegularExpressions.MatchCollection.Count)</ept> property.</source>
          <target state="translated">但是，此方法不使用延迟计算，因为它将访问 <bpt id="p1">[</bpt>MatchCollection.Count<ept id="p1">](xref:System.Text.RegularExpressions.MatchCollection.Count)</ept> 属性。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The following example retrieves individual <bpt id="p1">[</bpt>Match<ept id="p1">](xref:System.Text.RegularExpressions.Match)</ept> objects from a <bpt id="p2">[</bpt>MatchCollection<ept id="p2">](xref:System.Text.RegularExpressions.MatchCollection)</ept> object by iterating the collection using the <ph id="ph1">`foreach`</ph> construct.</source>
          <target state="translated">下面的示例通过使用 <ph id="ph1">`foreach`</ph> 构造循环访问集合，来从 <bpt id="p2">[</bpt>MatchCollection<ept id="p2">](xref:System.Text.RegularExpressions.MatchCollection)</ept> 对象中检索各个 <bpt id="p1">[</bpt>Match<ept id="p1">](xref:System.Text.RegularExpressions.Match)</ept> 对象。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The regular expression simply matches the string "abc" in the input string.</source>
          <target state="translated">正则表达式只是与输入字符串中的字符串“abc”匹配。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>By calling the <bpt id="p1">[</bpt>Regex.Match<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Match(System.String))</ept> method, which returns a <bpt id="p2">[</bpt>Match<ept id="p2">](xref:System.Text.RegularExpressions.Match)</ept> object that represents the first match in a string or a portion of a string.</source>
          <target state="translated">通过调用 <bpt id="p1">[</bpt>Regex.Match<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Match(System.String))</ept> 方法，此方法返回一个 <bpt id="p2">[</bpt>Match<ept id="p2">](xref:System.Text.RegularExpressions.Match)</ept> 对象，该对象表示字符串中的第一个匹配项或字符串的一部分。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>You can determine whether the match has been found by retrieving the value of the <ph id="ph1">`Match.Success`</ph> property.</source>
          <target state="translated">可以通过检索 <ph id="ph1">`Match.Success`</ph> 属性的值确定是否已找到匹配项。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>To retrieve <bpt id="p1">[</bpt>Match<ept id="p1">](xref:System.Text.RegularExpressions.Match)</ept> objects that represent subsequent matches, call the <bpt id="p2">[</bpt>Match.NextMatch<ept id="p2">](xref:System.Text.RegularExpressions.Match.NextMatch)</ept> method repeatedly, until the <ph id="ph1">`Success`</ph> property of the returned <bpt id="p3">[</bpt>Match<ept id="p3">](xref:System.Text.RegularExpressions.Match)</ept> object is <ph id="ph2">`false`</ph>.</source>
          <target state="translated">若要检索表示后续匹配项的 <bpt id="p1">[</bpt>Match<ept id="p1">](xref:System.Text.RegularExpressions.Match)</ept> 对象，请重复调用 <bpt id="p2">[</bpt>Match.NextMatch<ept id="p2">](xref:System.Text.RegularExpressions.Match.NextMatch)</ept> 方法，直到返回的 <bpt id="p3">[</bpt>Match<ept id="p3">](xref:System.Text.RegularExpressions.Match)</ept> 对象的 <ph id="ph1">`Success`</ph> 属性为 <ph id="ph2">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The following example uses the <bpt id="p1">[</bpt>Regex.Match(String, String)<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Match(System.String,System.String))</ept> and <bpt id="p2">[</bpt>Match.NextMatch<ept id="p2">](xref:System.Text.RegularExpressions.Match.NextMatch)</ept> methods to match the string "abc" in the input string.</source>
          <target state="translated">下面的示例使用 <bpt id="p1">[</bpt>Regex.Match(String, String)<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Match(System.String,System.String))</ept> 和 <bpt id="p2">[</bpt>Match.NextMatch<ept id="p2">](xref:System.Text.RegularExpressions.Match.NextMatch)</ept> 方法来匹配输入字符串中的字符串“abc”。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Two properties of the <bpt id="p1">[</bpt>Match<ept id="p1">](xref:System.Text.RegularExpressions.Match)</ept> class return collection objects:</source>
          <target state="translated"><bpt id="p1">[</bpt>Match<ept id="p1">](xref:System.Text.RegularExpressions.Match)</ept> 类的以下两个属性都将返回集合对象：</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Match.Groups<ept id="p1">](xref:System.Text.RegularExpressions.Match.Groups)</ept> property returns a <bpt id="p2">[</bpt>GroupCollection<ept id="p2">](xref:System.Text.RegularExpressions.GroupCollection)</ept> object that contains information about the substrings that match capturing groups in the regular expression pattern.</source>
          <target state="translated"><bpt id="p1">[</bpt>Match.Groups<ept id="p1">](xref:System.Text.RegularExpressions.Match.Groups)</ept> 属性返回一个 <bpt id="p2">[</bpt>GroupCollection<ept id="p2">](xref:System.Text.RegularExpressions.GroupCollection)</ept> 对象，该对象包含有关与正则表达式模式中的捕获组匹配的子字符串的信息。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Match.Captures`</ph> property returns a <bpt id="p1">[</bpt>CaptureCollection<ept id="p1">](xref:System.Text.RegularExpressions.CaptureCollection)</ept> object that is of limited use.</source>
          <target state="translated"><ph id="ph1">`Match.Captures`</ph> 属性返回一个 <bpt id="p1">[</bpt>CaptureCollection<ept id="p1">](xref:System.Text.RegularExpressions.CaptureCollection)</ept> 对象，该对象的使用是有限制的。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The collection is not populated for a <bpt id="p1">[</bpt>Match<ept id="p1">](xref:System.Text.RegularExpressions.Match)</ept> object whose <ph id="ph1">`Success`</ph> property is <ph id="ph2">`false`</ph>.</source>
          <target state="translated">不会为其 <ph id="ph1">`Success`</ph> 属性为 <ph id="ph2">`false`</ph> 的 <bpt id="p1">[</bpt>Match<ept id="p1">](xref:System.Text.RegularExpressions.Match)</ept> 对象填充集合。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Otherwise, it contains a single <bpt id="p1">[</bpt>Capture<ept id="p1">](xref:System.Text.RegularExpressions.Capture)</ept> object that has the same information as the <bpt id="p2">[</bpt>Match<ept id="p2">](xref:System.Text.RegularExpressions.Match)</ept> object.</source>
          <target state="translated">否则，它将包含一个 <bpt id="p1">[</bpt>Capture<ept id="p1">](xref:System.Text.RegularExpressions.Capture)</ept> 对象，该对象具有的信息与 <bpt id="p2">[</bpt>Match<ept id="p2">](xref:System.Text.RegularExpressions.Match)</ept> 对象具有的信息相同。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>For more information about these objects, see the <bpt id="p1">[</bpt>The Group collection<ept id="p1">](#the-group-collection)</ept> and <bpt id="p2">[</bpt>The capture collection<ept id="p2">](#the-capture-collection)</ept> sections later in this topic.</source>
          <target state="translated">有关这些对象的更多信息，请参见本主题后面的<bpt id="p1">[</bpt>组集合<ept id="p1">](#the-group-collection)</ept>和<bpt id="p2">[</bpt>捕获集合<ept id="p2">](#the-capture-collection)</ept>部分。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Two additional properties of the <bpt id="p1">[</bpt>Match<ept id="p1">](xref:System.Text.RegularExpressions.Match)</ept> class provide information about the match.</source>
          <target state="translated"><bpt id="p1">[</bpt>Match<ept id="p1">](xref:System.Text.RegularExpressions.Match)</ept> 类的另外两个属性提供了有关匹配项的信息。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Match.Value`</ph> property returns the substring in the input string that matches the regular expression pattern.</source>
          <target state="translated"><ph id="ph1">`Match.Value`</ph> 属性返回输入字符串中与正则表达式模式匹配的子字符串。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Match.Index`</ph> property returns the zero-based starting position of the matched string in the input string.</source>
          <target state="translated"><ph id="ph1">`Match.Index`</ph> 属性返回输入字符串中匹配的字符串的起始位置（从零开始）。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Match<ept id="p1">](xref:System.Text.RegularExpressions.Match)</ept> class also has two pattern-matching methods:</source>
          <target state="translated"><bpt id="p1">[</bpt>Match<ept id="p1">](xref:System.Text.RegularExpressions.Match)</ept> 类还具有两个模式匹配方法：</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Match.NextMatch<ept id="p1">](xref:System.Text.RegularExpressions.Match.NextMatch)</ept> method finds the match after the match represented by the current <bpt id="p2">[</bpt>Match<ept id="p2">](xref:System.Text.RegularExpressions.Match)</ept> object, and returns a <bpt id="p3">[</bpt>Match<ept id="p3">](xref:System.Text.RegularExpressions.Match)</ept> object that represents that match.</source>
          <target state="translated"><bpt id="p1">[</bpt>Match.NextMatch<ept id="p1">](xref:System.Text.RegularExpressions.Match.NextMatch)</ept> 方法查找位于由当前的 <bpt id="p2">[</bpt>Match<ept id="p2">](xref:System.Text.RegularExpressions.Match)</ept> 对象表示的匹配项之后的匹配项，并返回表示该匹配项的 <bpt id="p3">[</bpt>Match<ept id="p3">](xref:System.Text.RegularExpressions.Match)</ept> 对象。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Match.Result<ept id="p1">](xref:System.Text.RegularExpressions.Match.NextMatch)</ept> method performs a specified replacement operation on the matched string and returns the result.</source>
          <target state="translated"><bpt id="p1">[</bpt>Match.Result<ept id="p1">](xref:System.Text.RegularExpressions.Match.NextMatch)</ept> 方法对匹配的字符串执行指定的替换操作并返回相应结果。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The following example uses the <bpt id="p1">[</bpt>Match.Result<ept id="p1">](xref:System.Text.RegularExpressions.Match.NextMatch)</ept> method to prepend a <bpt id="p2">**</bpt><ph id="ph1">$</ph><ept id="p2">**</ept> symbol and a space before every number that includes two fractional digits.</source>
          <target state="translated">下面的示例使用 <bpt id="p1">[</bpt>Match.Result<ept id="p1">](xref:System.Text.RegularExpressions.Match.NextMatch)</ept> 方法在每个包含两个小数位的数字前预置一个 <bpt id="p2">**</bpt><ph id="ph1">$</ph><ept id="p2">**</ept> 符号和一个空格。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The regular expression pattern <ph id="ph1">`\b\d+(,\d{3})*\.\d{2}\b`</ph> is defined as shown in the following table.</source>
          <target state="translated">正则表达式模式 <ph id="ph1">`\b\d+(,\d{3})*\.\d{2}\b`</ph> 的定义如下表所示。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">模式</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">描述</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Begin the match at a word boundary.</source>
          <target state="translated">在单词边界处开始匹配。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Match one or more decimal digits.</source>
          <target state="translated">匹配一个或多个十进制数字。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Match zero or more occurrences of a comma followed by three decimal digits.</source>
          <target state="translated">匹配零个或多个以下模式：一个逗号后跟三个十进制数字。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Match the decimal point character.</source>
          <target state="translated">匹配小数点字符。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>`\d{2}</source>
          <target state="translated">`\d{2}</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Match two decimal digits.</source>
          <target state="translated">匹配两个十进制数字。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>End the match at a word boundary.</source>
          <target state="translated">在单词边界处结束匹配。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The replacement pattern <bpt id="p1">**</bpt>$$ $&amp;<ept id="p1">**</ept> indicates that the matched substring should be replaced by a dollar sign (<bpt id="p2">**</bpt><ph id="ph1">$</ph><ept id="p2">**</ept>) symbol (the <ph id="ph2">`$$`</ph> pattern), a space, and the value of the match (the <ph id="ph3">`$&amp;`</ph> pattern).</source>
          <target state="translated">替换模式 <bpt id="p1">**</bpt>$$ $&amp;<ept id="p1">**</ept> 指示匹配的子字符串应由美元符号 (<bpt id="p2">**</bpt><ph id="ph1">$</ph><ept id="p2">**</ept>)（<ph id="ph2">`$$`</ph> 模式）、空格和匹配项的值（<ph id="ph3">`$&amp;`</ph> 模式）替换。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The Group collection</source>
          <target state="translated">组集合</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Match.Groups<ept id="p1">](xref:System.Text.RegularExpressions.Match.Groups)</ept> property returns a <bpt id="p2">[</bpt>GroupCollection<ept id="p2">](xref:System.Text.RegularExpressions.GroupCollection)</ept> object that contains <bpt id="p3">[</bpt>Group<ept id="p3">](xref:System.Text.RegularExpressions.Group)</ept> objects that represent captured groups in a single match.</source>
          <target state="translated"><bpt id="p1">[</bpt>Match.Groups<ept id="p1">](xref:System.Text.RegularExpressions.Match.Groups)</ept> 属性返回一个 <bpt id="p2">[</bpt>GroupCollection<ept id="p2">](xref:System.Text.RegularExpressions.GroupCollection)</ept> 对象，该对象包含多个 <bpt id="p3">[</bpt>Group<ept id="p3">](xref:System.Text.RegularExpressions.Group)</ept> 对象，这些对象表示单个匹配项中的捕获的组。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>The first <bpt id="p1">[</bpt>Group<ept id="p1">](xref:System.Text.RegularExpressions.Group)</ept> object in the collection (at index 0) represents the entire match.</source>
          <target state="translated">集合中的第一个 <bpt id="p1">[</bpt>Group<ept id="p1">](xref:System.Text.RegularExpressions.Group)</ept> 对象（位于索引 0 处）表示整个匹配项。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Each object that follows represents the results of a single capturing group.</source>
          <target state="translated">此对象后面的每个对象均表示一个捕获组的结果。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>You can retrieve individual <bpt id="p1">[</bpt>Group<ept id="p1">](xref:System.Text.RegularExpressions.Group)</ept> objects in the collection by using the <bpt id="p2">[</bpt>GroupCollection.Item<ept id="p2">](xref:System.Text.RegularExpressions.GroupCollection.Item(System.Int32))</ept> property.</source>
          <target state="translated">可以使用 <bpt id="p2">[</bpt>GroupCollection.Item<ept id="p2">](xref:System.Text.RegularExpressions.GroupCollection.Item(System.Int32))</ept> 属性检索集合中的各个 <bpt id="p1">[</bpt>Group<ept id="p1">](xref:System.Text.RegularExpressions.Group)</ept> 对象。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>You can retrieve unnamed groups by their ordinal position in the collection, and retrieve named groups either by name or by ordinal position.</source>
          <target state="translated">可以在集合中按未命名组的序号位置来检索未命名组，也可以按命名组的名称或序号位置来检索命名组。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Unnamed captures appear first in the collection, and are indexed from left to right in the order in which they appear in the regular expression pattern.</source>
          <target state="translated">未命名捕获将首先在集合中显示，并将按照未命名捕获在正则表达式模式中出现的顺序从左至右对它们进行索引。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Named captures are indexed after unnamed captures, from left to right in the order in which they appear in the regular expression pattern.</source>
          <target state="translated">在对未命名捕获进行索引后，将按照命名捕获在正则表达式模式中出现的顺序从左至右对它们进行索引。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>To determine what numbered groups are available in the collection returned for a particular regular expression matching method, you can call the instance <bpt id="p1">[</bpt>Regex.GetGroupNumbers<ept id="p1">](xref:System.Text.RegularExpressions.Regex.GetGroupNumbers)</ept> method.</source>
          <target state="translated">若要确定在特定的正则表达式匹配方法返回的集合中哪些编号的组可用，可以调用实例 <bpt id="p1">[</bpt>Regex.GetGroupNumbers<ept id="p1">](xref:System.Text.RegularExpressions.Regex.GetGroupNumbers)</ept> 方法。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>To determine what named groups are available in the collection, you can call the instance R<bpt id="p1">[</bpt>Regex.GetGroupNames<ept id="p1">](xref:System.Text.RegularExpressions.Regex.GetGroupNames)</ept> method.</source>
          <target state="translated">若要确定集合中哪些命名的组可用，可以调用实例 R<bpt id="p1">[</bpt>Regex.GetGroupNames<ept id="p1">](xref:System.Text.RegularExpressions.Regex.GetGroupNames)</ept> 方法。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Both methods are particularly useful in general-purpose routines that analyze the matches found by any regular expression.</source>
          <target state="translated">这两种方法在分析通过任何正则表达式找到的匹配的常规用途例程中都特别有用。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>GroupCollection.Item<ept id="p1">](xref:System.Text.RegularExpressions.GroupCollection.Item(System.Int32))</ept> property is the indexer of the collection in C# and the collection object's default property in Visual Basic.</source>
          <target state="translated"><bpt id="p1">[</bpt>GroupCollection.Item<ept id="p1">](xref:System.Text.RegularExpressions.GroupCollection.Item(System.Int32))</ept> 属性是集合的索引器（在 C# 中）和集合对象的默认属性（在 Visual Basic 中）。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>This means that individual <bpt id="p1">[</bpt>Group<ept id="p1">](xref:System.Text.RegularExpressions.Group)</ept> objects can be accessed by index (or by name, in the case of named groups) as follows:</source>
          <target state="translated">这表示可以按索引（对于命名组，可以按名称）访问各个 <bpt id="p1">[</bpt>Group<ept id="p1">](xref:System.Text.RegularExpressions.Group)</ept> 对象，如下所示：</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>The following example defines a regular expression that uses grouping constructs to capture the month, day, and year of a date.</source>
          <target state="translated">下面的示例定义一个正则表达式，该表达式使用分组构造捕获日期的年、月和日部分。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>The regular expression pattern <ph id="ph1">`\b(\w+)\s(\d{1,2}),\s(\d{4})\b`</ph> is defined as shown in the following table.</source>
          <target state="translated">正则表达式模式 <ph id="ph1">`\b(\w+)\s(\d{1,2}),\s(\d{4})\b`</ph> 的定义如下表所示。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">模式</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">描述</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Begin the match at a word boundary.</source>
          <target state="translated">在单词边界处开始匹配。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Match one or more word characters.</source>
          <target state="translated">匹配一个或多个单词字符。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>This is the first capturing group.</source>
          <target state="translated">这是第一个捕获组。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Match a white-space character.</source>
          <target state="translated">与空白字符匹配。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Match one or two decimal digits.</source>
          <target state="translated">匹配一个或两个十进制数字。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>This is the second capturing group.</source>
          <target state="translated">这是第二个捕获组。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Match a comma.</source>
          <target state="translated">匹配逗号。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Match a white-space character.</source>
          <target state="translated">与空白字符匹配。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Match four decimal digits.</source>
          <target state="translated">匹配四个十进制数字。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>This is the third capturing group.</source>
          <target state="translated">这是第三个捕获组。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>End the match on a word boundary.</source>
          <target state="translated">在单词边界处结束匹配。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>The captured group</source>
          <target state="translated">捕获的组</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Group<ept id="p1">](xref:System.Text.RegularExpressions.Group)</ept> class represents the result from a single capturing group.</source>
          <target state="translated"><bpt id="p1">[</bpt>Group<ept id="p1">](xref:System.Text.RegularExpressions.Group)</ept> 类表示来自单个捕获组的结果。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Group<ept id="p1">](xref:System.Text.RegularExpressions.Group)</ept> objects that represent the capturing groups defined in a regular expression are returned by the <bpt id="p2">[</bpt>Item<ept id="p2">](xref:System.Text.RegularExpressions.GroupCollection.Item(System.Int32))</ept> property of the <bpt id="p3">[</bpt>GroupCollection<ept id="p3">](xref:System.Text.RegularExpressions.GroupCollection)</ept> object returned by the <bpt id="p4">[</bpt>Match.Groups<ept id="p4">](xref:System.Text.RegularExpressions.Match.Groups)</ept> property.</source>
          <target state="translated">表示正则表达式中定义的捕获组的 <bpt id="p1">[</bpt>Group<ept id="p1">](xref:System.Text.RegularExpressions.Group)</ept> 对象由 <bpt id="p4">[</bpt>Match.Groups<ept id="p4">](xref:System.Text.RegularExpressions.Match.Groups)</ept> 属性所返回的 <bpt id="p3">[</bpt>GroupCollection<ept id="p3">](xref:System.Text.RegularExpressions.GroupCollection)</ept> 对象的 <bpt id="p2">[</bpt>Item<ept id="p2">](xref:System.Text.RegularExpressions.GroupCollection.Item(System.Int32))</ept> 属性返回。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Item<ept id="p1">](xref:System.Text.RegularExpressions.GroupCollection.Item(System.Int32))</ept> property is the indexer (in C#) and the default property (in Visual Basic) of the <bpt id="p2">[</bpt>Group<ept id="p2">](xref:System.Text.RegularExpressions.Group)</ept> class.</source>
          <target state="translated"><bpt id="p1">[</bpt>Item<ept id="p1">](xref:System.Text.RegularExpressions.GroupCollection.Item(System.Int32))</ept> 属性是索引器（在 C# 中）和 <bpt id="p2">[</bpt>Group<ept id="p2">](xref:System.Text.RegularExpressions.Group)</ept> 类的默认属性（在 Visual Basic 中）。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>You can also retrieve individual members by iterating the collection using the <ph id="ph1">`foreach`</ph> construct.</source>
          <target state="translated">也可以使用 <ph id="ph1">`foreach`</ph> 构造循环访问集合来检索各个成员。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>For an example, see the previous section.</source>
          <target state="translated">有关示例，请参见上一部分。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>The following example uses nested grouping constructs to capture substrings into groups.</source>
          <target state="translated">下面的示例使用嵌套的分组构造来将子字符串捕获到组中。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>The regular expression pattern <ph id="ph1">`(a(b))c`</ph> matches the string "abc".</source>
          <target state="translated">正则表达式模式 <ph id="ph1">`(a(b))c`</ph> 将匹配字符串“abc”。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>It assigns the substring "ab" to the first capturing group, and the substring "b" to the second capturing group.</source>
          <target state="translated">它会将子字符串“ab”分配给第一个捕获组，并将子字符串“b”分配给第二个捕获组。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>The following example uses named grouping constructs to capture substrings from a string that contains data in the format "DATANAME:VALUE", which the regular expression splits at the colon (:).</source>
          <target state="translated">下面的示例使用命名的分组构造，从包含“DATANAME:VALUE”格式的数据的字符串中捕获子字符串，正则表达式通过冒号 (:) 拆分数据。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>The regular expression pattern <ph id="ph1">`^(?&lt;name&gt;\w+):(?&lt;value&gt;\w+)`</ph> is defined as shown in the following table.</source>
          <target state="translated">正则表达式模式 <ph id="ph1">`^(?&lt;name&gt;\w+):(?&lt;value&gt;\w+)`</ph> 的定义如下表所示。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">模式</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">说明</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Begin the match at the beginning of the input string.</source>
          <target state="translated">从输入字符串的开头部分开始匹配。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Match one or more word characters.</source>
          <target state="translated">匹配一个或多个单词字符。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>The name of this capturing group is name.</source>
          <target state="translated">此捕获组的名称为 name。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Match a colon.</source>
          <target state="translated">匹配冒号。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Match one or more word characters.</source>
          <target state="translated">匹配一个或多个单词字符。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>The name of this capturing group is value.</source>
          <target state="translated">此捕获组的名称为 value。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>The properties of the <bpt id="p1">[</bpt>Group<ept id="p1">](xref:System.Text.RegularExpressions.Group)</ept> class provide information about the captured group: The <ph id="ph1">`Group.Value`</ph> property contains the captured substring, the <ph id="ph2">`Group.Index`</ph> property indicates the starting position of the captured group in the input text, the <ph id="ph3">`Group.Length`</ph> property contains the length of the captured text, and the <ph id="ph4">`Group.Success`</ph> property indicates whether a substring matched the pattern defined by the capturing group.</source>
          <target state="translated"><bpt id="p1">[</bpt>Group<ept id="p1">](xref:System.Text.RegularExpressions.Group)</ept> 类的属性提供有关捕获的组的信息：<ph id="ph1">`Group.Value`</ph> 属性包含捕获的子字符串，<ph id="ph2">`Group.Index`</ph> 属性指示输入文本中捕获的组的起始位置，<ph id="ph3">`Group.Length`</ph> 属性包含捕获的文本的长度，<ph id="ph4">`Group.Success`</ph> 属性指示子字符串是否与捕获组所定义的模式匹配。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Applying quantifiers to a group (for more information, see <bpt id="p1">[</bpt>Quantifiers in regular expressions<ept id="p1">](quantifiers.md)</ept>) modifies the relationship of one capture per capturing group in two ways:</source>
          <target state="translated">通过对组应用限定符（有关更多信息，请参见<bpt id="p1">[</bpt>正则表达式中的限定符<ept id="p1">](quantifiers.md)</ept>）可以按两种方式修改一个捕获组对应一个捕获的关系：</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>If the <bpt id="p1">__</bpt><ph id="ph1">*</ph><ept id="p1">__</ept> or <bpt id="p2">__</bpt>*?<ept id="p2">__</ept></source>
          <target state="translated">如果对组应用 <bpt id="p1">__</bpt><ph id="ph1">*</ph><ept id="p1">__</ept> 或 <bpt id="p2">__</bpt>*?<ept id="p2">__</ept></target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>quantifier (which specifies zero or more matches) is applied to a group, a capturing group may not have a match in the input string.</source>
          <target state="translated">限定符（将指定零个或多个匹配项），则捕获组在输入字符串中可能没有匹配项。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>When there is no captured text, the properties of the <bpt id="p1">[</bpt>Group<ept id="p1">](xref:System.Text.RegularExpressions.Group)</ept> object are set as shown in the following table.</source>
          <target state="translated">在没有捕获的文本时，将如下表所示设置 <bpt id="p1">[</bpt>Group<ept id="p1">](xref:System.Text.RegularExpressions.Group)</ept> 对象的属性。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Group property</source>
          <target state="translated">组属性</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Value</source>
          <target state="translated">值</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>String.Empty<ept id="p1">](xref:System.String.Empty)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>String.Empty<ept id="p1">](xref:System.String.Empty)</ept></target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>0</source>
          <target state="translated">0</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>The following example provides an illustration.</source>
          <target state="translated">下面的示例进行了这方面的演示。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>In the regular expression pattern <ph id="ph1">`aaa(bbb)*ccc`</ph>, the first capturing group (the substring "bbb") can be matched zero or more times.</source>
          <target state="translated">在正则表达式模式 <ph id="ph1">`aaa(bbb)*ccc`</ph> 中，可以匹配第一个捕获组（子字符串“bbb”）零次或多次。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Because the input string "aaaccc" matches the pattern, the capturing group does not have a match.</source>
          <target state="translated">由于输入字符串“aaaccc”与此模式匹配，因此该捕获组没有匹配项。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Quantifiers can match multiple occurrences of a pattern that is defined by a capturing group.</source>
          <target state="translated">限定符可以匹配由捕获组定义的模式的多个匹配项。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>In this case, the <ph id="ph1">`Value`</ph> and <ph id="ph2">`Length`</ph> properties of a <bpt id="p1">[</bpt>Group<ept id="p1">](xref:System.Text.RegularExpressions.Group)</ept> object contain information only about the last captured substring.</source>
          <target state="translated">在此情况下，<bpt id="p1">[</bpt>Group<ept id="p1">](xref:System.Text.RegularExpressions.Group)</ept> 对象的 <ph id="ph1">`Value`</ph> 和 <ph id="ph2">`Length`</ph> 属性仅包含有关最后捕获的子字符串的信息。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>For example, the following regular expression matches a single sentence that ends in a period.</source>
          <target state="translated">例如，下面的正则表达式匹配以句点结束的单个句子。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>It uses two grouping constructs: The first captures individual words along with a white-space character; the second captures individual words.</source>
          <target state="translated">此表达式使用两个分组构造：第一个分组构造捕获各个单词以及空白字符；第二个分组构造捕获各个单词。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>As the output from the example shows, although the regular expression succeeds in capturing an entire sentence, the second capturing group captures only the last word.</source>
          <target state="translated">如示例中的输出所示，虽然正则表达式成功捕获整个句子，但第二个捕获组仅捕获了最后一个单词。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>The capture collection</source>
          <target state="translated">捕获集合</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Group<ept id="p1">](xref:System.Text.RegularExpressions.Group)</ept> object contains information only about the last capture.</source>
          <target state="translated"><bpt id="p1">[</bpt>Group<ept id="p1">](xref:System.Text.RegularExpressions.Group)</ept> 对象仅包含有关最后一个捕获的信息。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>However, the entire set of captures made by a capturing group is still available from the <bpt id="p1">[</bpt>CaptureCollection<ept id="p1">](xref:System.Text.RegularExpressions.CaptureCollection)</ept> object that is returned by the <bpt id="p2">[</bpt>Group.Captures<ept id="p2">](xref:System.Text.RegularExpressions.Group.Captures)</ept> property.</source>
          <target state="translated">但仍可从 <bpt id="p2">[</bpt>Group.Captures<ept id="p2">](xref:System.Text.RegularExpressions.Group.Captures)</ept> 属性返回的 <bpt id="p1">[</bpt>CaptureCollection<ept id="p1">](xref:System.Text.RegularExpressions.CaptureCollection)</ept> 对象中获取由捕获组生成的整个捕获集。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Each member of the collection is a <bpt id="p1">[</bpt>Capture<ept id="p1">](xref:System.Text.RegularExpressions.Capture)</ept> object that represents a capture made by that capturing group, in the order in which they were captured (and, therefore, in the order in which the captured strings were matched from left to right in the input string).</source>
          <target state="translated">集合中的每个成员均为一个表示由该捕获组生成的捕获的 <bpt id="p1">[</bpt>Capture<ept id="p1">](xref:System.Text.RegularExpressions.Capture)</ept> 对象，这些对象按被捕获的顺序排列（因而也就是遵循在输入字符串中按从左至右匹配捕获的字符串的顺序）。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>You can retrieve individual <bpt id="p1">[</bpt>Capture<ept id="p1">](xref:System.Text.RegularExpressions.Capture)</ept> objects from the collection in either of two ways:</source>
          <target state="translated">可以通过以下两种方式之一来检索集合中的各个 <bpt id="p1">[</bpt>Capture<ept id="p1">](xref:System.Text.RegularExpressions.Capture)</ept> 对象：</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>By iterating through the collection using a construct such as <ph id="ph1">`foreach`</ph> (in C#) or <ph id="ph2">`For Each`</ph> (in Visual Basic).</source>
          <target state="translated">通过使用构造循环访问集合，如 <ph id="ph1">`foreach`</ph> 构造（在 C# 中）或 <ph id="ph2">`For Each`</ph> 构造（在 Visual Basic 中）。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>By using the <bpt id="p1">[</bpt>CaptureCollection.Item<ept id="p1">](xref:System.Text.RegularExpressions.CaptureCollection.Item(System.Int32))</ept> property to retrieve a specific object by index.</source>
          <target state="translated">通过使用 <bpt id="p1">[</bpt>CaptureCollection.Item<ept id="p1">](xref:System.Text.RegularExpressions.CaptureCollection.Item(System.Int32))</ept> 属性按索引检索特定对象。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>The Item property is the <bpt id="p1">[</bpt>CaptureCollection<ept id="p1">](xref:System.Text.RegularExpressions.CaptureCollection)</ept> object's default property (in Visual Basic) or indexer (in C#).</source>
          <target state="translated">Item 属性是 <bpt id="p1">[</bpt>CaptureCollection<ept id="p1">](xref:System.Text.RegularExpressions.CaptureCollection)</ept> 对象的默认属性（在 Visual Basic 中）或索引器（在 C# 中）。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>If a quantifier is not applied to a capturing group, the <bpt id="p1">[</bpt>CaptureCollection<ept id="p1">](xref:System.Text.RegularExpressions.CaptureCollection)</ept> object contains a single <bpt id="p2">[</bpt>Capture<ept id="p2">](xref:System.Text.RegularExpressions.Capture)</ept> object that is of little interest, because it provides information about the same match as its <bpt id="p3">[</bpt>Group<ept id="p3">](xref:System.Text.RegularExpressions.Group)</ept> object.</source>
          <target state="translated">如果未对捕获组应用限定符，则 <bpt id="p1">[</bpt>CaptureCollection<ept id="p1">](xref:System.Text.RegularExpressions.CaptureCollection)</ept> 对象将包含一个 <bpt id="p2">[</bpt>Capture<ept id="p2">](xref:System.Text.RegularExpressions.Capture)</ept> 对象，但该对象的作用不大，因为它提供的是有关与其 <bpt id="p3">[</bpt>Group<ept id="p3">](xref:System.Text.RegularExpressions.Group)</ept> 对象相同的匹配项的信息。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>If a quantifier is applied to a capturing group, the <bpt id="p1">[</bpt>CaptureCollection<ept id="p1">](xref:System.Text.RegularExpressions.CaptureCollection)</ept> object contains all captures made by the capturing group, and the last member of the collection represents the same capture as the <bpt id="p2">[</bpt>Group<ept id="p2">](xref:System.Text.RegularExpressions.Group)</ept> object.</source>
          <target state="translated">如果对一个捕获组应用限定符，则 <bpt id="p1">[</bpt>CaptureCollection<ept id="p1">](xref:System.Text.RegularExpressions.CaptureCollection)</ept> 对象将包含该捕获组所生成的所有捕获，并且集合的最后一个成员将表示与 <bpt id="p2">[</bpt>Group<ept id="p2">](xref:System.Text.RegularExpressions.Group)</ept> 对象相同的捕获。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>For example, if you use the regular expression pattern <ph id="ph1">`((a(b))c)+`</ph> (where the <ph id="ph2">`+`</ph> quantifier specifies one or more matches) to capture matches from the string "abcabcabc", the <bpt id="p1">[</bpt>CaptureCollection<ept id="p1">](xref:System.Text.RegularExpressions.CaptureCollection)</ept> object for each <bpt id="p2">[</bpt>Group<ept id="p2">](xref:System.Text.RegularExpressions.Group)</ept> object contains three members.</source>
          <target state="translated">例如，如果使用正则表达式模式 <ph id="ph1">`((a(b))c)+`</ph>（其中，<ph id="ph2">`+`</ph> 限定符指定一个或多个匹配项）捕获字符串“abcabcabc”中的匹配项，则每个 <bpt id="p2">[</bpt>Group<ept id="p2">](xref:System.Text.RegularExpressions.Group)</ept> 对象的 <bpt id="p1">[</bpt>CaptureCollection<ept id="p1">](xref:System.Text.RegularExpressions.CaptureCollection)</ept> 对象都将包含三个成员。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>The following example uses the regular expression <ph id="ph1">`(Abc)+`</ph> to find one or more consecutive runs of the string "Abc" in the string "XYZAbcAbcAbcXYZAbcAb".</source>
          <target state="translated">下面的示例使用正则表达式 <ph id="ph1">`(Abc)+`</ph> 来在字符串“XYZAbcAbcAbcXYZAbcAb”中查找字符串“Abc”的一个或多个连续匹配项。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>The example illustrates the use of the <bpt id="p1">[</bpt>Group.Captures<ept id="p1">](xref:System.Text.RegularExpressions.Group.Captures)</ept> property to return multiple groups of captured substrings.</source>
          <target state="translated">该示例演示了使用 <bpt id="p1">[</bpt>Group.Captures<ept id="p1">](xref:System.Text.RegularExpressions.Group.Captures)</ept> 属性来返回多组捕获的子字符串。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>The individual capture</source>
          <target state="translated">单个捕获</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Capture<ept id="p1">](xref:System.Text.RegularExpressions.Capture)</ept> class contains the results from a single subexpression capture.</source>
          <target state="translated"><bpt id="p1">[</bpt>Capture<ept id="p1">](xref:System.Text.RegularExpressions.Capture)</ept> 类包含来自单个子表达式捕获的结果。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Capture.Value<ept id="p1">](xref:System.Text.RegularExpressions.Capture.Value)</ept> property contains the matched text, and the <bpt id="p2">[</bpt>Capture.Index<ept id="p2">](xref:System.Text.RegularExpressions.Capture.Index)</ept> property indicates the zero-based position in the input string at which the matched substring begins.</source>
          <target state="translated"><bpt id="p1">[</bpt>Capture.Value<ept id="p1">](xref:System.Text.RegularExpressions.Capture.Value)</ept> 属性包含匹配的文本，而 <bpt id="p2">[</bpt>Capture.Index<ept id="p2">](xref:System.Text.RegularExpressions.Capture.Index)</ept> 属性指示匹配的子字符串在输入字符串中的起始位置（从零开始）。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>The following example parses an input string for the temperature of selected cities.</source>
          <target state="translated">下面的示例分析针对选定城市的温度的输入字符串。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>A comma (",") is used to separate a city and its temperature, and a semicolon (";") is used to separate each city's data.</source>
          <target state="translated">逗号（“,”）用于将城市与其温度分隔开，而分号（“;”）用于将每个城市的数据分隔开。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>The entire input string represents a single match.</source>
          <target state="translated">整个输入字符串表示一个匹配项。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>In the regular expression pattern <ph id="ph1">`((\w+(\s\w+)*),(\d+);)+`</ph>, which is used to parse the string, the city name is assigned to the second capturing group, and the temperature is assigned to the fourth capturing group.</source>
          <target state="translated">在用于分析字符串的正则表达式模式 <ph id="ph1">`((\w+(\s\w+)*),(\d+);)+`</ph> 中，城市名称将分配给第二个捕获组，而温度将分配到第四个捕获组。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>The regular expression is defined as shown in the following table.</source>
          <target state="translated">该正则表达式的定义如下表所示。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">模式</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">描述</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Match one or more word characters.</source>
          <target state="translated">匹配一个或多个单词字符。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Match zero or more occurrences of a white-space character followed by one or more word characters.</source>
          <target state="translated">匹配零个或多个以下模式：一个空白字符后跟一个或多个单词字符。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>This pattern matches multi-word city names.</source>
          <target state="translated">此模式匹配包含多个单词的城市名称。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>This is the third capturing group.</source>
          <target state="translated">这是第三个捕获组。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Match one or more word characters followed by zero or more occurrences of a white-space character and one or more word characters.</source>
          <target state="translated">匹配以下模式：一个或多个单词字符，后跟零个或多个一个空白字符与一个或多个单词字符的组合。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>This is the second capturing group.</source>
          <target state="translated">这是第二个捕获组。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Match a comma.</source>
          <target state="translated">匹配逗号。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Match one or more digits.</source>
          <target state="translated">匹配一个或多个数字。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>This is the fourth capturing group.</source>
          <target state="translated">这是第四个捕获组。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Match a semicolon.</source>
          <target state="translated">匹配分号。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Match the pattern of a word followed by any additional words followed by a comma, one or more digits, and a semicolon, one or more times.</source>
          <target state="translated">匹配一个或多个以下模式：一个单词后跟任何其他单词，后跟一个逗号、一个或多个数字和一个分号。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>This is the first capturing group.</source>
          <target state="translated">这是第一个捕获组。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>See also</source>
          <target state="translated">另请参阅</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.Text.RegularExpressions<ept id="p1">](xref:System.Text.RegularExpressions)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>System.Text.RegularExpressions<ept id="p1">](xref:System.Text.RegularExpressions)</ept></target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>.NET regular expressions<ept id="p1">](regular-expressions.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>.NET 正则表达式<ept id="p1">](regular-expressions.md)</ept></target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Regular expression language - quick reference<ept id="p1">](quick-ref.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>正则表达式语言 - 快速参考<ept id="p1">](quick-ref.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>