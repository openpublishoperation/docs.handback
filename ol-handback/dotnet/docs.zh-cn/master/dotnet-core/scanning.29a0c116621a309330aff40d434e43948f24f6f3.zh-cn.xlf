<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-47f9650" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7dfc48e03a275522a48a49dbb44ce1d0f8b05e75</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\base-types\scanning.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5970adf79d537935a9feb6aaa95f72fd15e76bc2</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">65c229439165b077a49243c6c9ae5ffe3ca6481d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Regular expression example: scanning for HREFs</source>
          <target state="translated">正则表达式示例：扫描 HREF</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Regular expression example scanning for HREFs</source>
          <target state="translated">扫描 HREF 的正则表达式示例</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET、.NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Regular expression example: scanning for HREFs</source>
          <target state="translated">正则表达式示例：扫描 HREF</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The following example searches an input string and displays all the href="…" values and their locations in the string.</source>
          <target state="translated">下面的示例搜索输入字符串并显示所有 href="…" 的值和它们在字符串中的位置。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The Regex Object</source>
          <target state="translated">Regex 对象</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Because the <ph id="ph1">`DumpHRefs`</ph> method can be called multiple times from user code, it uses the <ph id="ph2">`static`</ph> <bpt id="p1">[</bpt>Regex.Match(String, String, RegexOptions)<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions))</ept> method.</source>
          <target state="translated">因为可以从用户代码多次调用 <ph id="ph1">`DumpHRefs`</ph> 方法，所以它使用 <ph id="ph2">`static`</ph> <bpt id="p1">[</bpt>Regex.Match(String, String, RegexOptions)<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions))</ept> 方法。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This enables the regular expression engine to cache the regular expression and avoids the overhead of instantiating a new <bpt id="p1">[</bpt>Regex<ept id="p1">](xref:System.Text.RegularExpressions.Regex)</ept> object each time the method is called.</source>
          <target state="translated">这使正则表达式引擎可以缓存正则表达式，并避免在每次调用该方法时实例化新 <bpt id="p1">[</bpt>Regex<ept id="p1">](xref:System.Text.RegularExpressions.Regex)</ept> 对象的开销。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>Match<ept id="p1">](xref:System.Text.RegularExpressions.Match)</ept> object is then used to iterate through all matches in the string.</source>
          <target state="translated">随后使用 <bpt id="p1">[</bpt>Match<ept id="p1">](xref:System.Text.RegularExpressions.Match)</ept> 对象循环访问字符串中的所有匹配项。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The following example then illustrates a call to the <ph id="ph1">`DumpHRefs`</ph> method.</source>
          <target state="translated">下面的示例因而演示 <ph id="ph1">`DumpHRefs`</ph> 方法的调用。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The regular expression pattern <ph id="ph1">`href\s*=\s*(?:["']&amp;#40;?&lt;1&gt;[^"']*)["']|(?&lt;1&gt;\S+))`</ph> is interpreted as shown in the following table.</source>
          <target state="translated">正则表达式模式 <ph id="ph1">`href\s*=\s*(?:["']&amp;#40;?&lt;1&gt;[^"']*)["']|(?&lt;1&gt;\S+))`</ph> 的含义如下表所示。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">模式</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">描述</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Match the literal string "href".</source>
          <target state="translated">匹配文本字符串“href”。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The match is case-insensitive.</source>
          <target state="translated">匹配不区分大小写。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Match zero or more white-space characters.</source>
          <target state="translated">匹配零个或多个空白字符。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>`Match the equals sign.</source>
          <target state="translated">匹配等号。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Match zero or more white-space characters.</source>
          <target state="translated">匹配零个或多个空白字符。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Match one of the following without assigning the result to a captured group: A quotation mark or apostrophe, followed by zero or more occurrences of any character other than a quotation mark or apostrophe, followed by a quotation mark or apostrophe.</source>
          <target state="translated">匹配以下对象之一而不将结果分配给捕获组：一个引号或单引号，后跟零个或多个引号或单引号以外的任意字符，然后再后跟一个引号或单引号。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The group named <ph id="ph1">`1`</ph> is included in this pattern.</source>
          <target state="translated">名为 <ph id="ph1">`1`</ph> 的组包含在此模式。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>-or- One or more non-white-space characters.</source>
          <target state="translated">或是一个或多个非空白字符。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The group named <ph id="ph1">`1`</ph> is included in this pattern.</source>
          <target state="translated">名为 <ph id="ph1">`1`</ph> 的组包含在此模式。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Assign zero or more occurrences of any character other than a quotation mark or apostrophe to the capturing group named <ph id="ph1">`1`</ph>.</source>
          <target state="translated">将零个或多个引号或单引号以外的任意字符分配给名为 <ph id="ph1">`1`</ph> 的捕获组。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Assign one or more non-white-space characters to the capturing group named <ph id="ph1">`1`</ph>.</source>
          <target state="translated">将一个或多个非空白字符分配给名为 <ph id="ph1">`1`</ph> 的捕获组。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Match Result Class</source>
          <target state="translated">匹配结果类</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The results of a search are stored in the <bpt id="p1">[</bpt>Match<ept id="p1">](xref:System.Text.RegularExpressions.Match)</ept> class, which provides access to all the substrings extracted by the search.</source>
          <target state="translated">搜索的结果存储在 <bpt id="p1">[</bpt>Match<ept id="p1">](xref:System.Text.RegularExpressions.Match)</ept> 类中，通过该类可以访问搜索提取的所有子字符串。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>It also remembers the string being searched and the regular expression being used, so it can call the <bpt id="p1">[</bpt>Match.NextMatch<ept id="p1">](xref:System.Text.RegularExpressions.Match.NextMatch)</ept> method to perform another search starting where the last one ended.</source>
          <target state="translated">它还会记住所搜索的字符串和所使用的正则表达式，因此可以调用 <bpt id="p1">[</bpt>Match.NextMatch<ept id="p1">](xref:System.Text.RegularExpressions.Match.NextMatch)</ept> 方法以便在上一个搜索结束的位置处开始另一个搜索。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Explicitly Named Captures</source>
          <target state="translated">显式命名的捕获</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In traditional regular expressions, capturing parentheses are automatically numbered sequentially.</source>
          <target state="translated">在传统正则表达式中，捕获圆括号会自动按顺序编号。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This leads to two problems.</source>
          <target state="translated">这会导致两个问题。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>First, if a regular expression is modified by inserting or removing a set of parentheses, all code that refers to the numbered captures must be rewritten to reflect the new numbering.</source>
          <target state="translated">首先，如果通过插入或删除一组圆括号修改正则表达式，则必须重新编写引用带编号捕获的所有代码才能反映新编号。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Second, because different sets of parentheses often are used to provide two alternative expressions for an acceptable match, it might be difficult to determine which of the two expressions actually returned a result.</source>
          <target state="translated">其次，由于不同的圆括号组通常用于为可接受的匹配项提供两个替代表达式，则可能难以确定这两个表达式中的哪个表达式实际返回了结果。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>To address these problems, the <bpt id="p1">[</bpt>Regex<ept id="p1">](xref:System.Text.RegularExpressions.Regex)</ept> class supports the syntax <ph id="ph1">`(?&lt;name&gt;…)`</ph> for capturing a match into a specified slot (the slot can be named using a string or an integer; integers can be recalled more quickly).</source>
          <target state="translated">为了解决这些问题，<bpt id="p1">[</bpt>Regex<ept id="p1">](xref:System.Text.RegularExpressions.Regex)</ept> 类支持语法 <ph id="ph1">`(?&lt;name&gt;…)`</ph> 以便将匹配项捕获到指定槽中（可以使用字符串或整数命名槽；可以更快地撤回整数）。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Thus, alternative matches for the same string all can be directed to the same place.</source>
          <target state="translated">因此，相同字符串的替代匹配全都可以定向到相同位置。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In case of a conflict, the last match dropped into a slot is the successful match.</source>
          <target state="translated">发生冲突时，放入槽中的最后一个匹配项是成功的匹配项。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>(However, a complete list of multiple matches for a single slot is available.</source>
          <target state="translated">（但是，提供了适用于单个槽的多个匹配项的完整列表。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>See the <bpt id="p1">[</bpt>Group.Captures<ept id="p1">](xref:System.Text.RegularExpressions.Group.Captures)</ept> collection for details.)</source>
          <target state="translated">有关详细信息，请参见 <bpt id="p1">[</bpt>Group.Captures<ept id="p1">](xref:System.Text.RegularExpressions.Group.Captures)</ept> 集合。）</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">另请参阅</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>.NET regular expressions<ept id="p1">](regular-expressions.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>.NET 正则表达式<ept id="p1">](regular-expressions.md)</ept></target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Regular expression examples<ept id="p1">](regex-examples.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>正则表达式示例<ept id="p1">](regex-examples.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>