<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0ca64c3" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">43ad8829de51775b23d1e00d9b4e2a4f4b240e94</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\garbagecollection\unmanaged.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bf5306e1a802ef0e900a958f6ca77cfb08a62787</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c81a9f19dc91e275781469ab4912c05def133c12</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Cleaning up unmanaged resources</source>
          <target state="translated">清理未托管资源</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Cleaning up unmanaged resources</source>
          <target state="translated">清理未托管资源</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Cleaning up unmanaged resources</source>
          <target state="translated">清理未托管资源</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For the majority of the objects that your app creates, you can rely on the .NET garbage collector to handle memory management.</source>
          <target state="translated">对于应用创建的大多数对象，可以依赖 .NET 的垃圾回收器来处理内存管理。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>However, when you create objects that include unmanaged resources, you must explicitly release those resources when you finish using them in your app.</source>
          <target state="translated">但是，如果创建包括非托管资源的对象，则当你在应用中使用完非托管资源后，必须显式释放这些资源。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The most common types of unmanaged resource are objects that wrap operating system resources, such as files, windows, network connections, or database connections.</source>
          <target state="translated">最常用的非托管资源类型是包装操作系统资源的对象，如文件、窗口、网络连接或数据库连接。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Although the garbage collector is able to track the lifetime of an object that encapsulates an unmanaged resource, it doesn't know how to release and clean up the unmanaged resource.</source>
          <target state="translated">虽然垃圾回收器可以跟踪封装非托管资源的对象的生存期，但无法了解如何发布并清理这些非托管资源。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If your types use unmanaged resources, you should do the following:</source>
          <target state="translated">如果你的类型使用非托管资源，则应执行以下操作：</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Implement the dispose pattern.</source>
          <target state="translated">实现释放模式。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This requires that you provide an <bpt id="p1">[</bpt>IDisposable.Dispose<ept id="p1">](xref:System.IDisposable.Dispose)</ept> implementation to enable the deterministic release of unmanaged resources.</source>
          <target state="translated">这需要提供 <bpt id="p1">[</bpt>IDisposable.Dispose<ept id="p1">](xref:System.IDisposable.Dispose)</ept> 实现来启用非托管资源的确定性释放。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A consumer of your type calls <bpt id="p1">[</bpt>Dispose<ept id="p1">](xref:System.IDisposable.Dispose)</ept> when the object (and the resources it uses) is no longer needed.</source>
          <target state="translated">当不再需要此对象（或其使用的资源）时，类型使用者可调用 <bpt id="p1">[</bpt>Dispose<ept id="p1">](xref:System.IDisposable.Dispose)</ept>。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Dispose<ept id="p1">](xref:System.IDisposable.Dispose)</ept> method immediately releases the unmanaged resources.</source>
          <target state="translated"><bpt id="p1">[</bpt>Dispose<ept id="p1">](xref:System.IDisposable.Dispose)</ept> 方法立即释放非托管资源。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Provide for your unmanaged resources to be released in the event that a consumer of your type forgets to call <bpt id="p1">[</bpt>Dispose<ept id="p1">](xref:System.IDisposable.Dispose)</ept>.</source>
          <target state="translated">在类型使用者忘记调用 <bpt id="p1">[</bpt>Dispose<ept id="p1">](xref:System.IDisposable.Dispose)</ept> 的情况下，准备释放非托管资源。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>There are two ways to do this:</source>
          <target state="translated">有两种方法可以实现此目的：</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Use a safe handle to wrap your unmanaged resource.</source>
          <target state="translated">使用安全句柄包装非托管资源。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This is the recommended technique.</source>
          <target state="translated">这是推荐采用的方法。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Safe handles are derived from the <bpt id="p1">[</bpt>System.Runtime.InteropServices.SafeHandle<ept id="p1">](xref:System.Runtime.InteropServices.SafeHandle)</ept> class and include a robust <bpt id="p2">[</bpt>Finalize<ept id="p2">](xref:System.Object.Finalize)</ept> method.</source>
          <target state="translated">安全句柄派生自 <bpt id="p1">[</bpt>System.Runtime.InteropServices.SafeHandle<ept id="p1">](xref:System.Runtime.InteropServices.SafeHandle)</ept> 类并包含可靠的 <bpt id="p2">[</bpt>Finalize<ept id="p2">](xref:System.Object.Finalize)</ept> 方法。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>When you use a safe handle, you simply implement the <bpt id="p1">[</bpt>IDisposable<ept id="p1">](xref:System.IDisposable)</ept> interface and call your safe handle's <bpt id="p2">[</bpt>Dispose<ept id="p2">](xref:System.IDisposable.Dispose)</ept> method in your <bpt id="p3">[</bpt>IDisposable.Dispose<ept id="p3">](xref:System.IDisposable.Dispose)</ept> implementation.</source>
          <target state="translated">在使用安全句柄时，只需实现 <bpt id="p1">[</bpt>IDisposable<ept id="p1">](xref:System.IDisposable)</ept> 接口并在 <bpt id="p3">[</bpt>IDisposable.Dispose<ept id="p3">](xref:System.IDisposable.Dispose)</ept> 实现中调用安全句柄的 <bpt id="p2">[</bpt>Dispose<ept id="p2">](xref:System.IDisposable.Dispose)</ept> 方法。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The safe handle's finalizer is called automatically by the garbage collector if its <bpt id="p1">[</bpt>Dispose<ept id="p1">](xref:System.IDisposable.Dispose)</ept> method is not called.</source>
          <target state="translated">如果未调用安全句柄的 <bpt id="p1">[</bpt>Dispose<ept id="p1">](xref:System.IDisposable.Dispose)</ept> 方法，则垃圾回收器将自动调用安全句柄的终结器。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>—or—</source>
          <target state="translated">- 或 -</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Override the <bpt id="p1">[</bpt>Object.Finalize<ept id="p1">](xref:System.Object.Finalize)</ept> method.</source>
          <target state="translated">重写 <bpt id="p1">[</bpt>Object.Finalize<ept id="p1">](xref:System.Object.Finalize)</ept> 方法。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Finalization enables the non-deterministic release of unmanaged resources when the consumer of a type fails to call <bpt id="p1">[</bpt>IDisposable.Dispose<ept id="p1">](xref:System.IDisposable.Dispose)</ept> to dispose of them deterministically.</source>
          <target state="translated">当类型使用者无法调用 <bpt id="p1">[</bpt>IDisposable.Dispose<ept id="p1">](xref:System.IDisposable.Dispose)</ept> 确定性地释放非托管资源时，终结会启用对非托管资源的非确定性释放。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>However, because object finalization can be a complex and error-prone operation, we recommend that you use a safe handle instead of providing your own finalizer.</source>
          <target state="translated">但是，由于对象终止是一项复杂且易出错的操作，建议你使用安全句柄而不是提供你自己的终结器。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Consumers of your type can then call your <bpt id="p1">[</bpt>IDisposable.Dispose<ept id="p1">](xref:System.IDisposable.Dispose)</ept> implementation directly to free memory used by unmanaged resources.</source>
          <target state="translated">然后，类型使用者可直接调用 <bpt id="p1">[</bpt>IDisposable.Dispose<ept id="p1">](xref:System.IDisposable.Dispose)</ept> 实现释放非托管资源使用的内存。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>When you properly implement a <bpt id="p1">[</bpt>Dispose<ept id="p1">](xref:System.IDisposable.Dispose)</ept> method, either your safe handle's <bpt id="p2">[</bpt>Finalize<ept id="p2">](xref:System.Object.Finalize)</ept> method or your own override of the <bpt id="p3">[</bpt>Object.Finalize<ept id="p3">](xref:System.Object.Finalize)</ept> method becomes a safeguard to clean up resources in the event that the <bpt id="p4">[</bpt>Dispose<ept id="p4">](xref:System.IDisposable.Dispose)</ept> method is not called.</source>
          <target state="translated">正确实现 <bpt id="p1">[</bpt>Dispose<ept id="p1">](xref:System.IDisposable.Dispose)</ept> 方法时，安全句柄的 <bpt id="p2">[</bpt>Finalize<ept id="p2">](xref:System.Object.Finalize)</ept> 方法或 <bpt id="p3">[</bpt>Object.Finalize<ept id="p3">](xref:System.Object.Finalize)</ept> 方法的重写会在未调用 <bpt id="p4">[</bpt>Dispose<ept id="p4">](xref:System.IDisposable.Dispose)</ept> 方法的情况下阻止清理资源。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In This Section</source>
          <target state="translated">本节内容</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Implementing a dispose method<ept id="p1">](implementing-dispose.md)</ept> - Describes how to implement the dispose pattern for releasing unmanaged resources.</source>
          <target state="translated"><bpt id="p1">[</bpt>实现 dispose 方法<ept id="p1">](implementing-dispose.md)</ept> - 介绍如何实现用于释放非托管资源的释放模式。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Using objects that implement IDisposable<ept id="p1">](using-objects.md)</ept> - Describes how consumers of a type ensure that its Dispose implementation is called.</source>
          <target state="translated"><bpt id="p1">[</bpt>使用实现 IDisposable 的对象<ept id="p1">](using-objects.md)</ept> - 介绍类型使用者如何确保调用其 Dispose 实现。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>We recommend using the C# using statement or the Visual Basic Using statement to do this.</source>
          <target state="translated">建议使用 C# using 语句或 Visual Basic Using 语句来执行此操作。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Reference</source>
          <target state="translated">参考</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.IDisposable<ept id="p1">](xref:System.IDisposable)</ept> - Defines the <ph id="ph1">`Dispose`</ph> method for releasing unmanaged resources.</source>
          <target state="translated"><bpt id="p1">[</bpt>System.IDisposable<ept id="p1">](xref:System.IDisposable)</ept> - 定义用于释放非托管资源的 <ph id="ph1">`Dispose`</ph> 方法。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Object.Finalize<ept id="p1">](xref:System.Object.Finalize)</ept> - Provides for object finalization if unmanaged resources are not released by the <ph id="ph1">`Dispose`</ph> method.</source>
          <target state="translated"><bpt id="p1">[</bpt>Object.Finalize<ept id="p1">](xref:System.Object.Finalize)</ept> - 如果 <ph id="ph1">`Dispose`</ph> 方法未释放非托管资源，则提供对象终结。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>GC.SuppressFinalize<ept id="p1">](xref:System.GC#System_GC_SuppressFinalize_System_Object_)</ept> - Suppresses finalization.</source>
          <target state="translated"><bpt id="p1">[</bpt>GC.SuppressFinalize<ept id="p1">](xref:System.GC#System_GC_SuppressFinalize_System_Object_)</ept> - 取消终结。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This method is customarily called from a <ph id="ph1">`Dispose`</ph> method to prevent a finalizer from executing.</source>
          <target state="translated">通常，从 <ph id="ph1">`Dispose`</ph> 方法调用此方法来阻止执行终结器。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>