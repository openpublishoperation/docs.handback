<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b5c25fc" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b8505f88b324fcdf3a51d75c455ec5869e058774</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\tutorials\using-on-windows-full-solution.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a3a05756e7976626c8a836edf025e0e67e26952c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">abf3d129b72996f18c3f7b0228defe76dec61a60</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Building a complete .NET Core solution on Windows, using Visual Studio 2017 | Microsoft Docs</source>
          <target state="translated">使用 Visual Studio 2017 在 Windows 上构建完整的 .NET Core 解决方案 | Microsoft Docs</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Building a complete .NET Core solution on Windows, using Visual Studio 2017</source>
          <target state="translated">在 Windows 上，使用 Visual Studio 2017 生成完整的 .NET Core 解决方案</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Building a complete .NET Core solution on Windows, using Visual Studio 2017</source>
          <target state="translated">在 Windows 上，使用 Visual Studio 2017 生成完整的 .NET Core 解决方案</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Visual Studio 2017 provides a full-featured development environment for developing .NET Core applications.</source>
          <target state="translated">Visual Studio 2017 提供用于开发 .NET Core 应用程序的功能全面的开发环境。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The procedures in this document describe the steps necessary to build a typical .NET Core solution that includes reusable libraries, testing, and using third-party libraries.</source>
          <target state="translated">本文档中的过程介绍了构建典型的 .NET Core 解决方案所需的步骤，包含可重用库、测试以及使用第三方库。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
          <target state="translated">先决条件</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Follow the instructions on <bpt id="p1">[</bpt>our prerequisites page<ept id="p1">](../windows-prerequisites.md)</ept> to update your environment.</source>
          <target state="translated">请按照<bpt id="p1">[</bpt>先决条件页<ept id="p1">](../windows-prerequisites.md)</ept>上的说明更新环境。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A solution using only .NET Core projects</source>
          <target state="translated">仅使用 .NET Core 项目的解决方案</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Writing the library</source>
          <target state="translated">编写库</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In Visual Studio, choose <bpt id="p1">**</bpt>File<ept id="p1">**</ept>, <bpt id="p2">**</bpt>New<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Project<ept id="p3">**</ept>.</source>
          <target state="translated">在 Visual Studio 中，依次选择“文件”、“新建”、“项目”。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>New Project<ept id="p1">**</ept> dialog, expand the <bpt id="p2">**</bpt>Visual C#<ept id="p2">**</ept> node and choose the <bpt id="p3">**</bpt>.NET Core<ept id="p3">**</ept> node, and then choose <bpt id="p4">**</bpt>Class Library (.NET Standard)<ept id="p4">**</ept>.</source>
          <target state="translated">在“新建项目”对话框中，展开“Visual C#”节点并选择“.NET Core”节点，然后选择“类库 (.NET Standard)”。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Name the project "Library" and the solution "Golden".</source>
          <target state="translated">将项目命名为“Library”，将解决方案命名为“Golden”。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Leave <bpt id="p1">**</bpt>Create directory for solution<ept id="p1">**</ept> checked.</source>
          <target state="translated">保持选中“为解决方案创建目录”。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>OK<ept id="p1">**</ept>.</source>
          <target state="translated">单击“确定”。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In Solution Explorer, open the context menu for the <bpt id="p1">**</bpt>Dependencies<ept id="p1">**</ept> node and choose <bpt id="p2">**</bpt>Manage NuGet Packages<ept id="p2">**</ept>.</source>
          <target state="translated">在“解决方案资源管理器”中，打开“依赖项”节点的上下文菜单，并选择“管理 NuGet 包”。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Choose "nuget.org" as the <bpt id="p1">**</bpt>Package source<ept id="p1">**</ept>, and choose the <bpt id="p2">**</bpt>Browse<ept id="p2">**</ept> tab.</source>
          <target state="translated">选择“nuget.org”作为“包源”，并选择“浏览”选项卡。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Browse for <bpt id="p1">**</bpt>Newtonsoft.Json<ept id="p1">**</ept>.</source>
          <target state="translated">浏找到 <bpt id="p1">**</bpt>Newtonsoft.Json<ept id="p1">**</ept>。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Install<ept id="p1">**</ept>, and accept the license agreement.</source>
          <target state="translated">单击“安装”，然后接受许可协议。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The package should now appear under <bpt id="p1">**</bpt>Dependencies/NuGet<ept id="p1">**</ept> and be automatically restored.</source>
          <target state="translated">现在，包应该在“依赖项/NuGet”下显示并自动还原。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Rename the <ph id="ph1">`Class1.cs`</ph> file to <ph id="ph2">`Thing.cs`</ph>.</source>
          <target state="translated">将 <ph id="ph1">`Class1.cs`</ph> 文件重命名为 <ph id="ph2">`Thing.cs`</ph>。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Accept the rename of the class.</source>
          <target state="translated">接受类的重命名。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Add a method: <ph id="ph1">`public int Get(int number) =&gt; Newtonsoft.Json.JsonConvert.DeserializeObject&lt;int&gt;($"{number}");`</ph></source>
          <target state="translated">添加方法：<ph id="ph1">`public int Get(int number) =&gt; Newtonsoft.Json.JsonConvert.DeserializeObject&lt;int&gt;($"{number}");`</ph></target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>Build<ept id="p1">**</ept> menu, choose <bpt id="p2">**</bpt>Build Solution<ept id="p2">**</ept>.</source>
          <target state="translated">在 <bpt id="p1">**</bpt>“生成”<ept id="p1">**</ept> 菜单上，选择 <bpt id="p2">**</bpt>“生成解决方案”<ept id="p2">**</ept>。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The solution should build without error.</source>
          <target state="translated">应可以准确无误地生成解决方案。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Writing the test project</source>
          <target state="translated">编写测试项目</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In Solution Explorer, open the context menu for the <bpt id="p1">**</bpt>Solution<ept id="p1">**</ept> node and choose <bpt id="p2">**</bpt>Add<ept id="p2">**</ept>, <bpt id="p3">**</bpt>New Project<ept id="p3">**</ept>.</source>
          <target state="translated">在“解决方案资源管理器”中，打开“解决方案”节点的上下文菜单，然后依次选择“添加”、“新建项目”。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>New Project<ept id="p1">**</ept> dialog, under <bpt id="p2">**</bpt>Visual C# / .NET Core<ept id="p2">**</ept>, choose <bpt id="p3">**</bpt>Unit Test Project (.NET Core)<ept id="p3">**</ept>.</source>
          <target state="translated">在“新建项目”对话框中的“Visual C#/.NET Core”下选择“单元测试项目 (.NET Core)”。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Name it "TestLibrary" and click OK.</source>
          <target state="translated">将它命名为“TestLibrary”，然后单击“确定”。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>TestLibrary<ept id="p1">**</ept> project, open the context menu for the <bpt id="p2">**</bpt>Dependencies<ept id="p2">**</ept> node and choose <bpt id="p3">**</bpt>Add Reference<ept id="p3">**</ept>.</source>
          <target state="translated">在“TestLibrary”项目中，打开“依赖项”节点的上下文菜单，选择“添加引用”。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Projects<ept id="p1">**</ept>, then check the Library project and click OK.</source>
          <target state="translated">单击“项目”，然后勾选库项目并单击“确定”。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This adds a reference to your library from the test project.</source>
          <target state="translated">这会将测试项目中的引用添加到库中。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Rename the <ph id="ph1">`UnitTest1.cs`</ph> file to <ph id="ph2">`LibraryTests.cs`</ph> and accept the class rename.</source>
          <target state="translated">将 <ph id="ph1">`UnitTest1.cs`</ph> 文件重命名为 <ph id="ph2">`LibraryTests.cs`</ph> 并接受类重命名。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Add <ph id="ph1">`using Library;`</ph> to the top of the file, and replace the <ph id="ph2">`TestMethod1`</ph> method with the following code:</source>
          <target state="translated">将 <ph id="ph1">`using Library;`</ph> 添加到文件顶部，并将<ph id="ph2">`TestMethod1`</ph> 方法替换为以下代码：</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>You should now be able to build the solution.</source>
          <target state="translated">现在，应该可以生成解决方案了。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>Test<ept id="p1">**</ept> menu, choose <bpt id="p2">**</bpt>Windows<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Test Explorer<ept id="p3">**</ept> in order to get the test explorer window into your workspace.</source>
          <target state="translated">在“测试”菜单上，依次选择“Windows”和“测试资源管理器”，将测试资源管理器窗口植入工作区。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>After a few seconds, the <ph id="ph1">`ThingGetsObjectValFromNumber`</ph> test should appear in the test explorer.</source>
          <target state="translated">几秒钟后，<ph id="ph1">`ThingGetsObjectValFromNumber`</ph> 测试应在测试资源管理器中显示。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Choose <bpt id="p1">**</bpt>Run All<ept id="p1">**</ept>.</source>
          <target state="translated">选择 <bpt id="p1">**</bpt>“全部运行”<ept id="p1">**</ept>。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The test should pass.</source>
          <target state="translated">测试应该会通过。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Writing the console app</source>
          <target state="translated">编写控制台应用</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>In Solution Explorer, open the context menu for the solution, and add a new <bpt id="p1">**</bpt>Console App (.NET Core)<ept id="p1">**</ept> project.</source>
          <target state="translated">在“解决方案资源管理器”中，打开解决方案的上下文菜单，添加新的<bpt id="p1">**</bpt>控制台应用 (.NET Core)<ept id="p1">**</ept> 项目。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Name it "App".</source>
          <target state="translated">将其命名为“App”。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>App<ept id="p1">**</ept> project, open the context menu for the <bpt id="p2">**</bpt>Dependencies<ept id="p2">**</ept> node and choose <bpt id="p3">**</bpt>Add<ept id="p3">**</ept>,  <bpt id="p4">**</bpt>Reference<ept id="p4">**</ept>.</source>
          <target state="translated">在 <bpt id="p1">**</bpt>App<ept id="p1">**</ept> 项目中，打开“依赖项”节点的上下文菜单，依次选择“添加”<bpt id="p3">**</bpt>和<ept id="p3">**</ept>“引用”。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Reference Manager<ept id="p1">**</ept> dialog, check <bpt id="p2">**</bpt>Library<ept id="p2">**</ept> under the <bpt id="p3">**</bpt>Projects<ept id="p3">**</ept>, <bpt id="p4">**</bpt>Solution<ept id="p4">**</ept> node, and then click <bpt id="p5">**</bpt>OK<ept id="p5">**</ept></source>
          <target state="translated">在“引用管理器”对话框中，选中“项目”、“解决方案”节点下的“库”，然后单击“确定”</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Open the context menu for the <bpt id="p1">**</bpt>App<ept id="p1">**</ept> node and choose <bpt id="p2">**</bpt>Set as StartUp Project<ept id="p2">**</ept>.</source>
          <target state="translated">打开 <bpt id="p1">**</bpt>App<ept id="p1">**</ept> 节点的上下文菜单，选择“设置为启动项目”。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>This ensures that hitting F5 or CTRL+F5 will start the console app.</source>
          <target state="translated">这确保了按住 F5 或 Ctrl+F5 时可启动控制台应用。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Open the <ph id="ph1">`Program.cs`</ph> file, add a <ph id="ph2">`using Library;`</ph> directive to the top of the file, and then add <ph id="ph3">`Console.WriteLine($"The answer is {new Thing().Get(42)}.");`</ph> to the <ph id="ph4">`Main`</ph> method.</source>
          <target state="translated">打开 <ph id="ph1">`Program.cs`</ph> 文件，将 <ph id="ph2">`using Library;`</ph> 指令添加到文件顶部，然后将 <ph id="ph3">`Console.WriteLine($"The answer is {new Thing().Get(42)}.");`</ph> 添加到 <ph id="ph4">`Main`</ph> 方法。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Set a breakpoint after the line that you just added.</source>
          <target state="translated">在刚添加的行后设置一个断点。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Press F5 to run the application..</source>
          <target state="translated">按 F5 运行该应用程序。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The application should build without error, and should hit the breakpoint.</source>
          <target state="translated">应用程序应正确生成并命中断点。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>You should also be able to check that the application output "The answer is 42.".</source>
          <target state="translated">应该也可检查应用程序输出“The answer is 42.”。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>
