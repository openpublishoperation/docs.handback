<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-47f9650" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">077a09152ac23c986a751f42c893e1dcca858291</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\base-types\verify-format.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a80af768587710b8756db79898128a234997c651</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">33808c2a92622a4532f27e7b9f096fc072c58c36</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: verify that strings are in valid email format</source>
          <target state="translated">如何：确认字符串是有效的电子邮件格式</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to verify that strings are in valid email format</source>
          <target state="translated">如何确认字符串是有效的电子邮件格式</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET、.NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>How to: verify that strings are in valid email format</source>
          <target state="translated">如何：确认字符串是有效的电子邮件格式</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The following example uses a regular expression to verify that a string is in valid email format.</source>
          <target state="translated">下面的示例使用正则表达式来验证一个字符串是否为有效的电子邮件格式。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">示例</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The example defines an <ph id="ph1">`IsValidEmail`</ph> method, which returns <ph id="ph2">`true`</ph> if the string contains a valid email address and <ph id="ph3">`false`</ph> if it does not, but takes no other action.</source>
          <target state="translated">该示例定义 <ph id="ph1">`IsValidEmail`</ph> 方法，如果字符串包含有效的电子邮件地址，则该方法返回 <ph id="ph2">`true`</ph>，否则返回 <ph id="ph3">`false`</ph>，但不采取其他任何操作。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>To verify that the email address is valid, the <ph id="ph1">`IsValidEmail`</ph> method calls the <bpt id="p1">[</bpt>Regex.Replace(String, String, MatchEvaluator)<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator))</ept> method with the <ph id="ph2">`(@)(.+)$`</ph> regular expression pattern to separate the domain name from the email address.</source>
          <target state="translated">若要验证电子邮件地址是否有效，<ph id="ph1">`IsValidEmail`</ph> 方法将使用 <ph id="ph2">`(@)(.+)$`</ph> 正则表达式模式调用 <bpt id="p1">[</bpt>Regex.Replace(String, String, MatchEvaluator)<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator))</ept> 方法将域名从电子邮件地址分离。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The third parameter is a <bpt id="p1">[</bpt>MatchEvaluator<ept id="p1">](xref:System.Text.RegularExpressions.MatchEvaluator)</ept> delegate that represents the method that processes and replaces the matched text.</source>
          <target state="translated">第三个参数是表示处理和替换匹配文本的方法的 <bpt id="p1">[</bpt>MatchEvaluator<ept id="p1">](xref:System.Text.RegularExpressions.MatchEvaluator)</ept> 委托。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The regular expression pattern is interpreted as follows.</source>
          <target state="translated">正则表达式模式的解释如下。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">模式</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">描述</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Match the @ character.</source>
          <target state="translated">匹配 @ 字符。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This is the first capturing group.</source>
          <target state="translated">这是第一个捕获组。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Match one or more occurrences of any character.</source>
          <target state="translated">匹配任意字符的一个或多个匹配项。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This is the second capturing group.</source>
          <target state="translated">这是第二个捕获组。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>End the match at the end of the string.</source>
          <target state="translated">在字符串的结尾结束匹配。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The domain name along with the @ character is passed to the <ph id="ph1">`DomainMapper`</ph> method, which uses the <bpt id="p1">[</bpt>IdnMapping<ept id="p1">](xref:System.Globalization.IdnMapping)</ept> class to translate Unicode characters that are outside the US-ASCII character range to Punycode.</source>
          <target state="translated">使用 @ 字符的域名已传递给 <ph id="ph1">`DomainMapper`</ph> 方法，该方法使用 <bpt id="p1">[</bpt>IdnMapping<ept id="p1">](xref:System.Globalization.IdnMapping)</ept> 类将 US-ASCII 字符范围外的 Unicode 字符转换为 Punycode。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The method also sets the <ph id="ph1">`invalid`</ph> flag to <ph id="ph2">`true`</ph> if the <bpt id="p1">[</bpt>IdnMapping.GetAscii<ept id="p1">](xref:System.Globalization.IdnMapping.GetAscii(System.String))</ept> method detects any invalid characters in the domain name.</source>
          <target state="translated">如果 <bpt id="p1">[</bpt>IdnMapping.GetAscii<ept id="p1">](xref:System.Globalization.IdnMapping.GetAscii(System.String))</ept> 方法在域名中检测到任何无效字符，该方法还会将 <ph id="ph1">`invalid`</ph> 标志设置为 <ph id="ph2">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The method returns the Punycode domain name preceded by the @ symbol to the <ph id="ph1">`IsValidEmail`</ph> method.</source>
          <target state="translated">该方法将冠以 @ 符号的 Punycode 域名返回给 <ph id="ph1">`IsValidEmail`</ph> 方法。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`IsValidEmail`</ph> method then calls the <bpt id="p1">[</bpt>Regex.IsMatch(String, String)<ept id="p1">](xref:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String))</ept> method to verify that the address conforms to a regular expression pattern.</source>
          <target state="translated">然后 <ph id="ph1">`IsValidEmail`</ph> 方法调用 <bpt id="p1">[</bpt>Regex.IsMatch(String, String)<ept id="p1">](xref:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String))</ept> 方法来验证该地址是否符合正则表达式模式。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Note that the <ph id="ph1">`IsValidEmail`</ph> method does not perform authentication to validate the email address.</source>
          <target state="translated">请注意，<ph id="ph1">`IsValidEmail`</ph> 方法不执行身份验证来验证电子邮件地址。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>It merely determines whether its format is valid for an email address.</source>
          <target state="translated">它只确定其格式对于电子邮件地址是否有效。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In addition, the <ph id="ph1">`IsValidEmail`</ph> method does not verify that the top-level domain name is a valid domain name listed at the <bpt id="p1">[</bpt>IANA Root Zone Database<ept id="p1">](https://www.iana.org/domains/root/db)</ept>, which would require a look-up operation.</source>
          <target state="translated">此外，<ph id="ph1">`IsValidEmail`</ph> 方法不对顶级域名是否是 <bpt id="p1">[</bpt>IANA 根区域数据库<ept id="p1">](https://www.iana.org/domains/root/db)</ept>中列出的有效域名进行验证，这需执行查找操作。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Instead, the regular expression merely verifies that the top-level domain name consists of between two and twenty-four ASCII characters, with alphanumeric first and last characters and the remaining characters being either alphanumeric or a hyphen (-).</source>
          <target state="translated">相反，正则表达式仅验证由二到二十四个 ASCII 字符组成的顶级域名，该域名以字母数字开头并以字符结尾，且其余的字符是字母数字或连字符 (-)。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In this example, the regular expression pattern <ph id="ph1">`^(?(")(".+?(?&lt;!\\)"@)|(([0-9a-z]((\.(?!\.))|[-!#\$%&amp;'\*\+/=\?\^`</ph><ph id="ph2">\{</ph><ph id="ph3">\}</ph><ph id="ph4">\|</ph>~\w])<bpt id="p1">*</bpt>)(?&lt;=[0-9a-z])@))(?(<ph id="ph5">\[</ph>)(<ph id="ph6">\[</ph>(\d{1,3}<ph id="ph7">\.</ph>){3}\d{1,3}<ph id="ph8">\]</ph>)|(([0-9a-z][-\w]<ept id="p1">*</ept>[0-9a-z]*<ph id="ph9">\.</ph>)+[a-z0-9][<ph id="ph10">\-</ph>a-z0-9]{0,22}[a-z0-9]))$` is interpreted as shown in the following table.</source>
          <target state="translated">在本例中，正则表达式模式 <ph id="ph1">`^(?(")(".+?(?&lt;!\\)"@)|(([0-9a-z]((\.(?!\.))|[-!#\$%&amp;'\*\+/=\?\^`</ph> <ph id="ph2">\{</ph> <ph id="ph3">\}</ph> <ph id="ph4">\|</ph>~ \w])<bpt id="p1">*</bpt>)(?&lt;=[0-9a-z])@))(?(<ph id="ph5">\[</ph>)(<ph id="ph6">\[</ph>(\d{1,3}<ph id="ph7">\.</ph>){3}\d{1,3}<ph id="ph8">\]</ph>)|(([0-9a-z] [-\w]<ept id="p1">*</ept>[0-9a-z] *<ph id="ph9">\.</ph>) + [a-z0-9] [<ph id="ph10">\-</ph>a-z0-9]{0,22}[a-z0-9]))$` 按下表中的方式解释。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Note that the regular expression is compiled using the <bpt id="p1">[</bpt>RegexOptions.IgnoreCase<ept id="p1">](xref:System.Text.RegularExpressions.RegexOptions.IgnoreCase)</ept> flag.</source>
          <target state="translated">注意，使用 <bpt id="p1">[</bpt>RegexOptions.IgnoreCase<ept id="p1">](xref:System.Text.RegularExpressions.RegexOptions.IgnoreCase)</ept> 标志编译正则表达式。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">模式</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">描述</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Begin the match at the start of the string.</source>
          <target state="translated">从字符串的开头部分开始匹配。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Determine whether the first character is a quotation mark.</source>
          <target state="translated">确定第一个字符是否为引号。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`(?(")`</ph> is the beginning of an alternation construct.</source>
          <target state="translated"><ph id="ph1">`(?(")`</ph> 为替换构造的开头。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If the first character is a quotation mark, match a beginning quotation mark followed by at least one occurrence of any character, followed by an ending quotation mark.</source>
          <target state="translated">如果第一个字符是引号，则匹配一个开始引号，后跟至少一个任意字符，再后跟一个结束引号。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The ending quotation mark must not be preceded by a backslash character <ph id="ph1">`(\). (?&lt;!`</ph> is the beginning of a zero-width negative lookbehind assertion.</source>
          <target state="translated">不得在结束引号前面加反斜杠字符，<ph id="ph1">`(\). (?&lt;!`</ph> 是零宽度负回顾后发断言的开头。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The string should conclude with an at sign (@).</source>
          <target state="translated">字符串应以 at 符号 (@) 结束。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>`&amp;#124;(([0-9a-z]</source>
          <target state="translated">`&amp;#124;(([0-9a-z]</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If the first character is not a quotation mark, match any alphabetic character from a to z or A to Z (the comparison is case insensitive), or any numeric character from 0 to 9.</source>
          <target state="translated">如果第一个字符不是引号，则匹配从 a 到 z 或 A 到 Z（比较不区分大小写）的任意字母字符或从 0 到 9 的任意数字字符。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If the next character is a period, match it.</source>
          <target state="translated">如果下一个字符为句点，则匹配它。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If it is not a period, look ahead to the next character and continue the match.</source>
          <target state="translated">如果下一个字符不为句点，则看下一个字符并继续进行匹配。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`(?!\.)`</ph> is a zero-width negative lookahead assertion that prevents two consecutive periods from appearing in the local part of an email address.</source>
          <target state="translated"><ph id="ph1">`(?!\.)`</ph> 是宽度为零的负预测先行断言，可防止两个连续句号出现在电子邮件地址的本地部分中。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`&amp;#124;[-!#\$%&amp;'\*\+/=\?\^`</ph><ph id="ph2">\{</ph><ph id="ph3">\}</ph><ph id="ph4">\&amp;</ph>#124;~\w]</source>
          <target state="translated"><ph id="ph1">`&amp;#124;[-!#\$%&amp;'\*\+/=\?\^`</ph><ph id="ph2">\{</ph><ph id="ph3">\}</ph><ph id="ph4">\&amp;</ph>#124;~\w]</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>If the next character is not a period, match any word character or one of the following characters: -!#$%'*+=?^`{}&amp;#124;~.</source>
          <target state="translated">如果下一个字符不为句点，则匹配任意单词字符或下列字符之一：-!#$%'*+=?^`{}&amp;#124;~。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`((\.(?!\.))&amp;#124;[-!#\$%'\*\+/=\?\^`</ph><ph id="ph2">\{</ph><ph id="ph3">\}</ph><ph id="ph4">\&amp;</ph>#124;~\w])*</source>
          <target state="translated"><ph id="ph1">`((\.(?!\.))&amp;#124;[-!#\$%'\*\+/=\?\^`</ph><ph id="ph2">\{</ph><ph id="ph3">\}</ph><ph id="ph4">\&amp;</ph>#124;~\w])*</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Match the alternation pattern (a period followed by a non-period, or one of a number of characters) zero or more times.</source>
          <target state="translated">匹配替换模式（一个句点，后跟一个非句点或许多字符中的某个字符）零次或多次。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Match the @ character.</source>
          <target state="translated">匹配 @ 字符。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Continue the match if the character that precedes the @ character is A through Z, a through z, or 0 through 9.</source>
          <target state="translated">如果 @ 字符之前的字符为从 A 到 Z、从 a 到 z 或从 0 到 9 的字符，则继续进行匹配。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`(?&lt;=[0-9a-z])`</ph> construct defines a zero-width positive lookbehind assertion.</source>
          <target state="translated"><ph id="ph1">`(?&lt;=[0-9a-z])`</ph> 构造定义零宽度正回顾断言。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Check whether the character that follows @ is an opening bracket.</source>
          <target state="translated">检查 @ 后面的字符是否为左括号。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>If it is an opening bracket, match the opening bracket followed by an IP address (four sets of one to three digits, with each set separated by a period) and a closing bracket.</source>
          <target state="translated">如果该字符为左括号，则匹配该左括号，后跟 IP 地址（四个数字组，每个数字组包含一到三位数字，并且每个数字组用句点隔开）和右括号。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>If the character that follows @ is not an opening bracket, match one alphanumeric character with a value of A-Z, a-z, or 0-9, followed by zero or more occurrences of a word character or a hyphen, followed by zero or one alphanumeric character with a value of A-Z, a-z, or 0-9, followed by a period.</source>
          <target state="translated">如果 @ 后面的字符不是左括号，则匹配一个字母数字字符（A-Z、a-z 或 0-9 中的某个值），后跟一个单词字符或连字符的零个或多个匹配项，接着跟 0 或一个字母数字字符（A-Z、a-z 或 0-9 中的某个值），再跟一个句点。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>This pattern can be repeated one or more times, and must be followed by the top-level domain name.</source>
          <target state="translated">此模式可以重复一次或多次，并且必须后跟顶级域名。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The top-level domain name must begin and end with an alphanumeric character (a-z, A-Z, and 0-9).</source>
          <target state="translated">顶级域名必须以字母数字字符（a-z、A-Z 和 0-9）开始和结束。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>It can also include from zero to 22 ASCII characters that are either alphanumeric or hyphens.</source>
          <target state="translated">它还可以包括从零到 22 个字母数字或连字符的 ASCII 字符。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>End the match at the end of the string.</source>
          <target state="translated">在字符串的结尾结束匹配。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>You can call the <ph id="ph1">`IsValidEmail`</ph> and <ph id="ph2">`DomainMapper`</ph> methods by using code such as the following:</source>
          <target state="translated">可以使用如下代码调用 <ph id="ph1">`IsValidEmail`</ph> 和 <ph id="ph2">`DomainMapper`</ph> 方法：</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">另请参阅</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>.NET regular expressions<ept id="p1">](regular-expressions.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>.NET 正则表达式<ept id="p1">](regular-expressions.md)</ept></target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Regular expression examples<ept id="p1">](regex-examples.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>正则表达式示例<ept id="p1">](regex-examples.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>