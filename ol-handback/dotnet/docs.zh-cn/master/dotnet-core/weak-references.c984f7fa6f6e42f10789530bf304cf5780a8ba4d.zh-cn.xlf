<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-47f9650" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1f94c7609d667a54b147b73a61653028d1808080</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\garbagecollection\weak-references.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">98a7703c39b86867e06aa23c3b8238cc755de109</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d8b0214adb6124ee1ee73b4f2414503b75f2b07e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Weak references</source>
          <target state="translated">弱引用</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Weak references</source>
          <target state="translated">弱引用</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Weak references</source>
          <target state="translated">弱引用</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The garbage collector cannot collect an object in use by an application while the application's code can reach that object.</source>
          <target state="translated">如果应用程序的代码可以访问一个正由该程序使用的对象，垃圾回收器就不能回收该对象，</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The application is said to have a strong reference to the object.</source>
          <target state="translated">那么，就认为应用程序对该对象具有强引用。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>A weak reference permits the garbage collector to collect the object while still allowing the application to access the object.</source>
          <target state="translated">弱引用允许应用程序访问对象，同时也允许垃圾回收器收集相应的对象。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A weak reference is valid only during the indeterminate amount of time until the object is collected when no strong references exist.</source>
          <target state="translated">如果不存在强引用，则弱引用的有限期只限于收集对象前的一个不确定的时间段。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>When you use a weak reference, the application can still obtain a strong reference to the object, which prevents it from being collected.</source>
          <target state="translated">使用弱引用时，应用程序仍可对该对象进行强引用，这样做可防止该对象被收集。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>However, there is always the risk that the garbage collector will get to the object first before a strong reference is reestablished.</source>
          <target state="translated">但始终存在这样的风险：垃圾回收器在重新建立强引用之前先处理该对象。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Weak references are useful for objects that use a lot of memory, but can be recreated easily if they are reclaimed by garbage collection.</source>
          <target state="translated">占用大量内存，但通过垃圾回收功能回收以后很容易重新创建的对象特别适合使用弱引用。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Suppose a tree view displays a complex hierarchical choice of options to the user.</source>
          <target state="translated">假设 Windows 窗体应用程序中的一个树视图向用户显示了复杂的选项层次结构。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If the underlying data is large, keeping the tree in memory is inefficient when the user is involved with something else in the application.</source>
          <target state="translated">如果基础数据量很大，则用户使用应用程序中的其他部分时，在内存中保留该树会导致效率低下。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>When the user switches away to another part of the application, you can use the <bpt id="p1">[</bpt>WeakReference<ept id="p1">](xref:System.WeakReference)</ept> or <bpt id="p2">[</bpt>WeakReference<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph><ept id="p2">](xref:System.WeakReference%601)</ept> class to create a weak reference to the tree and destroy all strong references.</source>
          <target state="translated">当用户切换到应用程序的其他部分时，你可以使用 <bpt id="p1">[</bpt>WeakReference<ept id="p1">](xref:System.WeakReference)</ept> 或 <bpt id="p2">[</bpt>WeakReference<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph><ept id="p2">](xref:System.WeakReference%601)</ept> 类来创建对该树的弱引用，并销毁所有强引用。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>When the user switches back to the tree, the application attempts to obtain a strong reference to the tree and, if successful, avoids reconstructing the tree.</source>
          <target state="translated">当用户切换回该树时，应用程序会尝试获得对该树的强引用，如果成功，就不必重新构造该树。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>To establish a weak reference with an object, you create a <bpt id="p1">[</bpt>WeakReference<ept id="p1">](xref:System.WeakReference)</ept> using the instance of the object to be tracked.</source>
          <target state="translated">若要对某个对象建立弱引用，请使用要跟踪的对象的实例创建一个 <bpt id="p1">[</bpt>WeakReference<ept id="p1">](xref:System.WeakReference)</ept>。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You then set the <bpt id="p1">[</bpt>Target<ept id="p1">](xref:System.WeakReference.Target)</ept> property to that object and set the original reference to the object to null.</source>
          <target state="translated">然后为该对象设置 <bpt id="p1">[</bpt>Target<ept id="p1">](xref:System.WeakReference.Target)</ept> 属性，将对该对象的原始引用设置为 null。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Short and Long Weak References</source>
          <target state="translated">短弱引用和长弱引用</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You can create a short weak reference or a long weak reference:</source>
          <target state="translated">可以创建短弱引用或长弱引用：</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Short</source>
          <target state="translated">Short</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The target of a short weak reference becomes <ph id="ph1">`null`</ph> when the object is reclaimed by garbage collection.</source>
          <target state="translated">垃圾回收功能回收对象后，短弱引用的目标会变为 <ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The weak reference is itself a managed object, and is subject to garbage collection just like any other managed object.</source>
          <target state="translated">弱引用本身是托管对象，与其他任何托管对象一样需要经过垃圾回收。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>A short weak reference is the default constructor for <bpt id="p1">[</bpt>WeakReference<ept id="p1">](xref:System.WeakReference)</ept>.</source>
          <target state="translated">短弱引用是 <bpt id="p1">[</bpt>WeakReference<ept id="p1">](xref:System.WeakReference)</ept> 的默认构造函数。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>A long weak reference is retained after the object's <bpt id="p1">[</bpt>Finalize<ept id="p1">](xref:System.Object.Finalize)</ept> method has been called.</source>
          <target state="translated">调用对象的 <bpt id="p1">[</bpt>Finalize<ept id="p1">](xref:System.Object.Finalize)</ept> 方法后，会保留长弱引用。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This allows the object to be recreated, but the state of the object remains unpredictable.</source>
          <target state="translated">这样，便可以重新创建该对象，但该对象仍保持不可预知的状态。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>To use a long reference, specify <ph id="ph1">`true`</ph> in the <bpt id="p1">[</bpt>WeakReference<ept id="p1">](xref:System.WeakReference)</ept> constructor.</source>
          <target state="translated">若要使用长引用，请在 <bpt id="p1">[</bpt>WeakReference<ept id="p1">](xref:System.WeakReference)</ept> 构造函数中指定 <ph id="ph1">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>If the object's type does not have a <bpt id="p1">[</bpt>Finalize<ept id="p1">](xref:System.Object.Finalize)</ept> method, the short weak reference functionality applies and the weak reference is valid only until the target is collected, which can occur anytime after the finalizer is run.</source>
          <target state="translated">如果对象的类型没有 <bpt id="p1">[</bpt>Finalize<ept id="p1">](xref:System.Object.Finalize)</ept> 方法，则会应用短弱引用功能，该弱引用只在目标被收集之前有效，运行终结器之后可以随时收集目标。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>To establish a strong reference and use the object again, cast the <bpt id="p1">[</bpt>Target<ept id="p1">](xref:System.WeakReference.Target)</ept> property of a <bpt id="p2">[</bpt>WeakReference<ept id="p2">](xref:System.WeakReference)</ept> to the type of the object.</source>
          <target state="translated">若要建立强引用并重新使用该对象，请将 <bpt id="p2">[</bpt>WeakReference<ept id="p2">](xref:System.WeakReference)</ept> 的 <bpt id="p1">[</bpt>Target<ept id="p1">](xref:System.WeakReference.Target)</ept> 属性强制转换为该对象的类型。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If the <bpt id="p1">[</bpt>Target<ept id="p1">](xref:System.WeakReference.Target)</ept> property returns <ph id="ph1">`null`</ph>, the object was collected; otherwise, you can continue to use the object because the application has regained a strong reference to it.</source>
          <target state="translated">如果 <bpt id="p1">[</bpt>Target<ept id="p1">](xref:System.WeakReference.Target)</ept> 属性返回 <ph id="ph1">`null`</ph>，则表示对象已被收集；否则，可继续使用该对象，因为应用程序已重新获得了对它的强引用。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Guidelines for Using Weak References</source>
          <target state="translated">使用弱引用的准则</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Use long weak references only when necessary as the state of the object is unpredictable after finalization.</source>
          <target state="translated">仅在必要时使用长弱引用，因为在终结后对象的状态不可预知。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Avoid using weak references to small objects because the pointer itself may be as large or larger.</source>
          <target state="translated">避免对小对象使用弱引用，因为指针本身可能和对象一样大，或者比对象还大。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Avoid using weak references as an automatic solution to memory management problems.</source>
          <target state="translated">避免将弱引用作为内存管理问题的自动解决方案，</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Instead, develop an effective caching policy for handling your application's objects.</source>
          <target state="translated">而应开发一个有效的缓存策略来处理应用程序的对象。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">另请参阅</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Garbage collection in .NET<ept id="p1">](index.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>.NET 中的垃圾回收<ept id="p1">](index.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>