<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-6a73dd2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0c98084786408a285111ae724ed404ce32160aea</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\testing\unit-testing-with-dotnet-test.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p1</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0b4524e861b4ecf8137e207d600c2404d0db001e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f5337e931db3c70a74c1a4a8e6aea937777640c3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Unit Testing in .NET Core using dotnet test</source>
          <target state="translated">在 .NET Core 中使用 dotnet 测试的单元测试</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Unit Testing in .NET Core using dotnet test</source>
          <target state="translated">在 .NET Core 中使用 dotnet 测试的单元测试</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Unit Testing in .NET Core using dotnet test</source>
          <target state="translated">在 .NET Core 中使用 dotnet 测试的单元测试</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>By <bpt id="p1">[</bpt>Steve Smith<ept id="p1">](http://ardalis.com)</ept> and <bpt id="p2">[</bpt>Bill Wagner<ept id="p2">](https://github.com/BillWagner)</ept></source>
          <target state="translated">作者：<bpt id="p1">[</bpt>Steve Smith<ept id="p1">](http://ardalis.com)</ept> 和 <bpt id="p2">[</bpt>Bill Wagner<ept id="p2">](https://github.com/BillWagner)</ept></target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>View or download sample code<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/getting-started/unit-testing-using-dotnet-test)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>查看或下载示例代码<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/getting-started/unit-testing-using-dotnet-test)</ept></target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Creating the Projects</source>
          <target state="translated">创建项目</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Writing Libraries with Cross Platform Tools<ept id="p1">](../tutorials/libraries.md)</ept> has information on organizing multi-project solutions for both the source and the tests.</source>
          <target state="translated"><bpt id="p1">[</bpt>使用跨平台工具编写库<ept id="p1">](../tutorials/libraries.md)</ept>中包含有关同时为源和测试整理多项目解决方案的信息。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This article follows those conventions.</source>
          <target state="translated">本文遵循这些约定。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The final project structure will be something like this:</source>
          <target state="translated">最终的项目结构如下所示：</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In the root directory, you'll need to create a <ph id="ph1">`global.json`</ph> that contains the names of your <ph id="ph2">`src`</ph> and <ph id="ph3">`test`</ph> directories:</source>
          <target state="translated">在根目录中，需要创建 <ph id="ph1">`global.json`</ph>，其中包含 <ph id="ph2">`src`</ph> 和 <ph id="ph3">`test`</ph> 目录的名称：</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Creating the source project</source>
          <target state="translated">创建源项目</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Then, in the <ph id="ph1">`src`</ph> directory, create the <ph id="ph2">`PrimeService`</ph> directory.</source>
          <target state="translated">然后，在 <ph id="ph1">`src`</ph> 目录中，创建 <ph id="ph2">`PrimeService`</ph> 目录。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>CD into that directory, and run <ph id="ph1">`dotnet new -t lib`</ph> to create the source project.</source>
          <target state="translated">将 CD 插入该目录，然后运行 <ph id="ph1">`dotnet new -t lib`</ph> 以创建源项目。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Rename <ph id="ph1">`Library.cs`</ph> as <ph id="ph2">`PrimeService.cs`</ph>.</source>
          <target state="translated">将 <ph id="ph1">`Library.cs`</ph> 重命名为 <ph id="ph2">`PrimeService.cs`</ph>。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>To use test-driven development (TDD), you'll create a failing implementation of the <ph id="ph1">`PrimeService`</ph> class:</source>
          <target state="translated">为了使用由测试驱动的开发 (TDD)，需对 <ph id="ph1">`PrimeService`</ph> 类创建故障实现：</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Creating the test project</source>
          <target state="translated">创建测试项目</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Next, cd into the 'test' directory, and create the <ph id="ph1">`PrimeServices.Tests`</ph> directory.</source>
          <target state="translated">接下来，将 CD 插入“test”目录，然后创建 <ph id="ph1">`PrimeServices.Tests`</ph> 目录。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>CD into the <ph id="ph1">`PrimeServices.Tests`</ph> directory and create a new project using <ph id="ph2">`dotnet new -t xunittest`</ph>.</source>
          <target state="translated">将 CD 插入 <ph id="ph1">`PrimeServices.Tests`</ph> 目录，然后使用 <ph id="ph2">`dotnet new -t xunittest`</ph> 创建新项目。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`dotnet new -t xunittest`</ph> creates a test project that uses xunit as the test library.</source>
          <target state="translated"><ph id="ph1">`dotnet new -t xunittest`</ph> 会创建将 xunit 用作测试库的测试项目。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The generated template configured the test runner at the root of <ph id="ph1">`project.json`</ph>:</source>
          <target state="translated">生成的模板已将测试运行程序配置在 <ph id="ph1">`project.json`</ph> 的根目录下：</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The template also sets the framework node to use <ph id="ph1">`netcoreapp1.0`</ph>, and include the required imports to get xUnit.net to work with .NET Core RTM:</source>
          <target state="translated">该模板还会设置框架节点以使用 <ph id="ph1">`netcoreapp1.0`</ph>，并加入所需导入以使 xUnit.net 与 .NET Core RTM 协同工作：</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The test project requires other packages to create and run unit tests.</source>
          <target state="translated">测试项目需要其他包创建和运行单元测试。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`dotnet new`</ph> added xunit, and the xunit runner.</source>
          <target state="translated"><ph id="ph1">`dotnet new`</ph> 已添加 xunit 和 xunit 运行程序。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>You need to add the PrimeService package as another dependency to the project:</source>
          <target state="translated">需要将 PrimeService 包作为另一个依赖项添加到该项目：</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Notice that the <ph id="ph1">`PrimeService`</ph> project does not include any directory path information.</source>
          <target state="translated">请注意，<ph id="ph1">`PrimeService`</ph> 项目不包括任何目录路径信息。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Because you created the project structure to match the expected organization of <ph id="ph1">`src`</ph> and <ph id="ph2">`test`</ph>, and the <ph id="ph3">`global.json`</ph> file indicates that, the build system will find the correct location for the project.</source>
          <target state="translated">因为你创建了项目结构以匹配 <ph id="ph1">`src`</ph> 和 <ph id="ph2">`test`</ph> 的预期组织，并且 <ph id="ph3">`global.json`</ph> 文件表明生成系统将找到该项目的正确位置。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You add the <ph id="ph1">`"target": "project"`</ph> element to inform NuGet that it should look in project directories, not in the NuGet feed.</source>
          <target state="translated">添加 <ph id="ph1">`"target": "project"`</ph> 元素以通知 NuGet 应查看项目目录，而不是 NuGet 源。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Without this key, you might download a package with the same name as your internal library.</source>
          <target state="translated">如果没有此键，则需下载与内部库同名的包。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>You can see the entire file in the <bpt id="p1">[</bpt>samples repository<ept id="p1">](https://github.com/dotnet/docs/blob/master/samples/core/getting-started/unit-testing-using-dotnet-test/test/PrimeService.Tests/project.json)</ept> on GitHub.</source>
          <target state="translated">可以在 GitHub 上的<bpt id="p1">[</bpt>示例存储库<ept id="p1">](https://github.com/dotnet/docs/blob/master/samples/core/getting-started/unit-testing-using-dotnet-test/test/PrimeService.Tests/project.json)</ept>中看到整个文件。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>After this initial structure is in place, you can write your first test.</source>
          <target state="translated">此初始结构准备就绪后，便可编写第一个测试。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Once you verify that first unit test, everything is configured and should run smoothly as you add features and tests.</source>
          <target state="translated">验证第一个单元测试后，所有内容均已完成配置，并且随着添加功能和进行更多测试，应顺畅运行。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Creating the first test</source>
          <target state="translated">创建第一个测试</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The TDD approach calls for writing one failing test, then making it pass, then repeating the process.</source>
          <target state="translated">TDD 方法要求编写一个失败的测试，然后使其通过，再重复该过程。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>So, let's write that one failing test.</source>
          <target state="translated">那么，我们来编写一个失败的测试吧。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Remove <ph id="ph1">`program.cs`</ph> from the <ph id="ph2">`PrimeService.Tests`</ph> directory, and create a new C# file with the following content:</source>
          <target state="translated">从 <ph id="ph2">`PrimeService.Tests`</ph> 目录删除 <ph id="ph1">`program.cs`</ph>，然后创建含有以下内容的新 C# 文件：</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`[Fact]`</ph> attribute denotes a method as a single test.</source>
          <target state="translated"><ph id="ph1">`[Fact]`</ph> 属性将方法表示为单个测试。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Save this file, then run <ph id="ph1">`dotnet build`</ph> to build the test project.</source>
          <target state="translated">保存此文件，然后运行 <ph id="ph1">`dotnet build`</ph> 以生成测试项目。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If you have not already built the <ph id="ph1">`PrimeService`</ph> project, the build system will detect that and build it because it is a dependency of the test project.</source>
          <target state="translated">如果尚未生成 <ph id="ph1">`PrimeService`</ph> 项目，生成系统将检测并生成该项目，因为它是测试项目的依赖项。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Now, execute <ph id="ph1">`dotnet test`</ph> to run the tests from the console.</source>
          <target state="translated">现在，执行 <ph id="ph1">`dotnet test`</ph> 以从控制台运行测试。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The xunit test runner has the program entry point to run your tests from the Console.</source>
          <target state="translated">Xunit 测试运行程序具有从控制台运行测试的程序入口点。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`dotnet test`</ph> starts the test runner, and provides a command line argument to the testrunner indicating the assembly that contains your tests.</source>
          <target state="translated"><ph id="ph1">`dotnet test`</ph> 启动测试运行程序，并向该测试运行程序提供命令行参数以指示包含测试的程序集。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Your test fails.</source>
          <target state="translated">测试失败。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>You haven't created the implementation yet.</source>
          <target state="translated">尚未创建实现。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Write the simplest code to make this one test pass:</source>
          <target state="translated">编写最简单的代码以使这一个测试通过：</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Adding More Features</source>
          <target state="translated">添加更多功能</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Now, that you've made one test pass, it's time to write more.</source>
          <target state="translated">你已经通过了一个测试，现在就可以编写更多测试了。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>There are a few other simple cases for prime numbers: 0, -1.</source>
          <target state="translated">质数有其他几种简单情况：0，-1。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>You could add those as new tests, with the <ph id="ph1">`[Fact]`</ph> attribute, but that quickly becomes tedious.</source>
          <target state="translated">可以将其添加为具有 <ph id="ph1">`[Fact]`</ph> 属性的新测试，但这很快就会变得枯燥乏味。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>There are other xunit attributes that enable you to write a suite of similar tests.</source>
          <target state="translated">还有其他 xunit 属性，可使你编写类似测试套件。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Theory`</ph> represents a suite of tests that execute the same code, but have different input arguments.</source>
          <target state="translated"><ph id="ph1">`Theory`</ph> 表示执行相同代码，但具有不同输入参数的测试套件。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">`[InlineData]`</ph> attribute to specify values for those inputs.</source>
          <target state="translated">可以使用 <ph id="ph1">`[InlineData]`</ph> 属性来指定这些输入的值。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Instead of creating new tests, leverage these two attributes to create a single theory that tests some values less than 2, which is the lowest prime number:</source>
          <target state="translated">利用这两个属性（而不是创建新测试）来创建测试小于 2 的某些值的单个理论，其中，2 是最小质数：</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Run <ph id="ph1">`dotnet test`</ph> and you'll see that two of these tests fail.</source>
          <target state="translated">运行 <ph id="ph1">`dotnet test`</ph>，然后你将看到其中两个测试失败。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>You can make them pass by changing the service.</source>
          <target state="translated">可以通过更改服务使其顺利通过。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>You need to change the <ph id="ph1">`if`</ph> clause at the beginning of the method:</source>
          <target state="translated">需要更改方法开头的 <ph id="ph1">`if`</ph> 子句：</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Now, these tests all pass.</source>
          <target state="translated">现在，所有测试均已通过。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>You continue to iterate by adding more tests, more theories, and more code in the main library.</source>
          <target state="translated">通过在主库中添加更多测试、理论和代码继续循环访问。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>You'll quickly end up with the <bpt id="p1">[</bpt>finished version of the tests<ept id="p1">](https://github.com/dotnet/docs/blob/master/samples/core/getting-started/unit-testing-using-dotnet-test/test/PrimeService.Tests/PrimeServie_IsPrimeShould.cs)</ept> and the <bpt id="p2">[</bpt>complete implementation of the library<ept id="p2">](https://github.com/dotnet/docs/blob/master/samples/core/getting-started/unit-testing-using-dotnet-test/src/PrimeService/PrimeService.cs)</ept>.</source>
          <target state="translated">很快就会以<bpt id="p1">[</bpt>已完成的测试版本<ept id="p1">](https://github.com/dotnet/docs/blob/master/samples/core/getting-started/unit-testing-using-dotnet-test/test/PrimeService.Tests/PrimeServie_IsPrimeShould.cs)</ept>和<bpt id="p2">[</bpt>库的完整实现<ept id="p2">](https://github.com/dotnet/docs/blob/master/samples/core/getting-started/unit-testing-using-dotnet-test/src/PrimeService/PrimeService.cs)</ept>结束。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>You've built a small library and a set of unit tests for that library.</source>
          <target state="translated">你已生成一个小型库和该库的一组单元测试。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>You've structured this solution so that adding new packages and tests will be seamless, and you can concentrate on the problem at hand.</source>
          <target state="translated">你已结构化此解决方案，以便能够无缝添加新包和测试，并集中解决手头问题。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The tools will run automatically.</source>
          <target state="translated">工具将自动运行。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>On Windows platform you can use MSTest.</source>
          <target state="translated">在 Windows 平台上可以使用 MSTest。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Find out more in the <bpt id="p1">[</bpt>Using MSTest on Windows document<ept id="p1">](./using-mstest-on-windows.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>在 Windows 文档上使用 MSTest<ept id="p1">](./using-mstest-on-windows.md)</ept>。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>