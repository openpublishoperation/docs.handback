<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-eac019f" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c9d6bb1d45b9a6cb88334050669a4c064e53d54e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\testing\using-mstest-on-windows.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p1</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d0b889def7c2a7fe5e0e328fc65218e643d5f863</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b04b5d47e4d51551c2585d8936423ad631df264e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Use MSTest with .NET Core on Windows</source>
          <target state="translated">将 MSTest 与 Windows 上的 .NET Core 配合使用</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to use MSTest with .NET Core on Windows, using Visual Studio 2015</source>
          <target state="translated">如何通过 Visual Studio 2015 将 MSTest 与 Windows 上的 .NET Core 配合使用</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>MSTest, .NET, .NET Core</source>
          <target state="translated">MSTest, .NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Unit testing with MSTest and .NET Core on Windows, using Visual Studio 2015</source>
          <target state="translated">通过 Visual Studio 2015 将 MSTest 与 Windows 上的 .NET Core 配合使用的单元测试</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>While xUnit could be a better choice when targeting multiple platforms, with .NET Core on Windows is also possible to use MSTest.</source>
          <target state="translated">尽管面向多个平台时 xUnit 是更好的选择，借助 Windows 上的 .NET Core 同样可以使用 MSTest。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
          <target state="translated">先决条件</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Follow the instructions on <bpt id="p1">[</bpt>Getting started with .NET Core on Windows<ept id="p1">](../tutorials/using-on-windows.md)</ept> to create the library project.</source>
          <target state="translated">按照 <bpt id="p1">[</bpt>Windows 上的 .NET Core 入门<ept id="p1">](../tutorials/using-on-windows.md)</ept>中的说明创建库项目。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Writing the test project using MSTest</source>
          <target state="translated">使用 MSTest 编写测试项目</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In Solution Explorer, open the context menu for the <bpt id="p1">**</bpt>Solution<ept id="p1">**</ept> node and choose <bpt id="p2">**</bpt>Add<ept id="p2">**</ept>, <bpt id="p3">**</bpt>New Solution Folder<ept id="p3">**</ept>.</source>
          <target state="translated">在“解决方案资源管理器”中，打开“解决方案”节点的上下文菜单，然后选择“添加”、“新解决方案文件夹”。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Name the folder "test".</source>
          <target state="translated">将文件夹命名为“test”。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This is only a solution folder, not a physical folder.</source>
          <target state="translated">这只是解决方案文件夹，不是物理文件夹。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Open the context menu for the <bpt id="p1">**</bpt>test<ept id="p1">**</ept> folder and choose <bpt id="p2">**</bpt>Add<ept id="p2">**</ept>.</source>
          <target state="translated">打开 <bpt id="p1">**</bpt>test<ept id="p1">**</ept> 文件夹的上下文菜单，选择“添加”。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>New Project<ept id="p1">**</ept>.</source>
          <target state="translated">“新建项目”。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>New Project<ept id="p1">**</ept> dialog, choose <bpt id="p2">**</bpt>Console Application (.NET Core)<ept id="p2">**</ept>.</source>
          <target state="translated">在“新建项目”对话框中，选择“控制台应用程序 (.NET Core)”。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Name it "TestLibrary" and explicitly put it under the <ph id="ph1">`Golden\test`</ph> path.</source>
          <target state="translated">将其命名为“TestLibrary”，并显式放置到 <ph id="ph1">`Golden\test`</ph> 路径下。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The project needs to be a console application, not a class library.</source>
          <target state="translated">该项目必须是控制台应用程序，不能是类库。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>TestLibrary<ept id="p1">**</ept> project, open the context menu for the <bpt id="p2">**</bpt>References<ept id="p2">**</ept> node and choose <bpt id="p3">**</bpt>Add Reference<ept id="p3">**</ept>.</source>
          <target state="translated">在“TestLibrary”项目中，打开“引用”节点的上下文菜单，选择“添加引用”。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Reference Manager<ept id="p1">**</ept> dialog, check <bpt id="p2">**</bpt>Library<ept id="p2">**</ept> under the <bpt id="p3">**</bpt>Projects<ept id="p3">**</ept>, <bpt id="p4">**</bpt>Solution<ept id="p4">**</ept> node, and then click <bpt id="p5">**</bpt>OK<ept id="p5">**</ept>.</source>
          <target state="translated">在“引用管理器”对话框中，选中“项目”、“解决方案”节点下的“库”，然后单击“确定”。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>TestLibrary<ept id="p1">**</ept> project, open the <ph id="ph1">`project.json`</ph> file, and replace <ph id="ph2">`"Library": "1.0.0-*"`</ph> with <ph id="ph3">`"Library": {"target": "project"}`</ph>.</source>
          <target state="translated">在“TestLibrary”项目中，打开 <ph id="ph1">`project.json`</ph> 文件，将 <ph id="ph2">`"Library": "1.0.0-*"`</ph> 替换为 <ph id="ph3">`"Library": {"target": "project"}`</ph>。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This is to avoid the resolution of the <ph id="ph1">`Library`</ph> project to a NuGet package with the same name.</source>
          <target state="translated">这是为了避免将 <ph id="ph1">`Library`</ph> 项目解析到具有相同名称的 NuGet 包。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Explicitly setting the target to "project" ensures that the tooling will first search for a project with that name, and not a package.</source>
          <target state="translated">将目标显式设置为“项目”可确保工具首先搜索具有此名称的项目，而不是包。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Open the context menu for the <bpt id="p1">**</bpt>References<ept id="p1">**</ept> node and choose <bpt id="p2">**</bpt>Manage NuGet Packages<ept id="p2">**</ept>.</source>
          <target state="translated">打开“引用”节点的上下文菜单，并选择“管理 NuGet 包”。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Choose "nuget.org" as the <bpt id="p1">**</bpt>Package source<ept id="p1">**</ept>, and choose the <bpt id="p2">**</bpt>Browse<ept id="p2">**</ept> tab.</source>
          <target state="translated">选择“nuget.org”作为“包源”，并选择“浏览”选项卡。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Check the <bpt id="p1">**</bpt>Include prerelease<ept id="p1">**</ept> checkbox, and then browse for <bpt id="p2">**</bpt>MSTest.TestFramework<ept id="p2">**</ept> version 1.0.1-preview or newer, and then click <bpt id="p3">**</bpt>Install<ept id="p3">**</ept>.</source>
          <target state="translated">选中“包括预发行版”复选框，然后浏览 <bpt id="p2">**</bpt>MSTest.TestFramework<ept id="p2">**</ept> 1.0.1 预览版或更新版本，然后单击“安装”。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Browse for <bpt id="p1">**</bpt>dotnet-test-mstest<ept id="p1">**</ept> version 1.1.1-preview or newer, and then click <bpt id="p2">**</bpt>Install<ept id="p2">**</ept>.</source>
          <target state="translated">浏览 <bpt id="p1">**</bpt>dotnet-test-mstest<ept id="p1">**</ept> 1.1.1 预览版或更新版本，然后单击“安装”。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Edit <ph id="ph1">`project.json`</ph> to add <ph id="ph2">`"testRunner": "mstest",`</ph> after the <ph id="ph3">`"version"`</ph> section.</source>
          <target state="translated">编辑 <ph id="ph1">`project.json`</ph> 以在 <ph id="ph3">`"version"`</ph> 部分后添加 <ph id="ph2">`"testRunner": "mstest",`</ph>。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Add a <ph id="ph1">`LibraryTests.cs`</ph> class file to the <bpt id="p1">**</bpt>TestLibrary<ept id="p1">**</ept> project, add the <ph id="ph2">`using`</ph> directives <ph id="ph3">`Microsoft.VisualStudio.TestTools.UnitTesting;`</ph> and <ph id="ph4">`using Library;`</ph> to the top of the file, and add the following code to the class:</source>
          <target state="translated">将 <ph id="ph1">`LibraryTests.cs`</ph> 类文件添加到 <bpt id="p1">**</bpt>TestLibrary<ept id="p1">**</ept> 项目，将 <ph id="ph2">`using`</ph> 指令 <ph id="ph3">`Microsoft.VisualStudio.TestTools.UnitTesting;`</ph> 和 <ph id="ph4">`using Library;`</ph> 添加到文件顶部并将以下代码添加到类：</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Optionally, delete the <ph id="ph1">`Program.cs`</ph> file from the <bpt id="p1">**</bpt>TestLibrary<ept id="p1">**</ept> project, and remove <ph id="ph2">`"buildOptions": {"emitEntryPoint": true},`</ph> from <ph id="ph3">`project.json`</ph>.</source>
          <target state="translated">或者，从 <bpt id="p1">**</bpt>TestLibrary<ept id="p1">**</ept> 项目删除 <ph id="ph1">`Program.cs`</ph> 文件，并从 <ph id="ph3">`project.json`</ph> 删除 <ph id="ph2">`"buildOptions": {"emitEntryPoint": true},`</ph>。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You should now be able to build the solution.</source>
          <target state="translated">现在，应该可以生成解决方案了。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>Test<ept id="p1">**</ept> menu, choose <bpt id="p2">**</bpt>Windows<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Test Explorer<ept id="p3">**</ept>, and in Test Explorer choose <bpt id="p4">**</bpt>Run All<ept id="p4">**</ept>.</source>
          <target state="translated">在“测试”菜单上，选择“Windows”、“测试资源管理器”，在测试资源管理器中选择“全部运行”。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The test should pass.</source>
          <target state="translated">测试应该会通过。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>