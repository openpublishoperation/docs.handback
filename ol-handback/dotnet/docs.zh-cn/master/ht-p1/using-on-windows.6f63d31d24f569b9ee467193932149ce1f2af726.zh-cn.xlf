<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-6a73dd2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bf7bf944ebbf3c53ee6206f86e1a168111b54378</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\tutorials\using-on-windows.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p1</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">48a532158339dc73a753322a949623a61feb734b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">29d4f6b16d427b577346b1fa565cc4ab21e298bb</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Getting started with .NET Core on Windows</source>
          <target state="translated">在 Windows 上入门 .NET Core</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Getting started with .NET Core on Windows, using Visual Studio 2015</source>
          <target state="translated">使用 Visual Studio 2015 在 Windows 上入门 .NET Core</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Getting started with .NET Core on Windows, using Visual Studio 2015</source>
          <target state="translated">使用 Visual Studio 2015 在 Windows 上入门 .NET Core</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>by <bpt id="p1">[</bpt>Bertrand Le Roy<ept id="p1">](https://github.com/bleroy)</ept> and <bpt id="p2">[</bpt>Phillip Carter<ept id="p2">](https://github.com/cartermp)</ept></source>
          <target state="translated">作者：<bpt id="p1">[</bpt>Bertrand Le Roy<ept id="p1">](https://github.com/bleroy)</ept> 和 <bpt id="p2">[</bpt>Phillip Carter<ept id="p2">](https://github.com/cartermp)</ept></target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Visual Studio 2015 provides a full-featured development environment for developing .NET Core applications.</source>
          <target state="translated">Visual Studio 2015 提供用于开发 .NET Core 应用程序的全功能开发环境。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The procedures in this document describe the steps necessary to build a number of typical .NET Core solutions, or solutions that include .NET Core components, using Visual Studio.</source>
          <target state="translated">本文档中的过程介绍使用 Visual Studio 生成大量典型 .NET Core 解决方案或包含 .NET Core 组件的解决方案所必需的步骤。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The scenarios include testing and using third-party libraries that have not been explicitly built for the most recent version of .NET Core.</source>
          <target state="translated">这些方案包括测试和使用尚未针对最新版本的 .NET Core 显式生成的第三方库。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
          <target state="translated">先决条件</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Follow the instructions on <bpt id="p1">[</bpt>our prerequisites page<ept id="p1">](../windows-prerequisites.md)</ept> to update your environment.</source>
          <target state="translated">请按照<bpt id="p1">[</bpt>先决条件页<ept id="p1">](../windows-prerequisites.md)</ept>上的说明更新环境。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Getting Started</source>
          <target state="translated">入门</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The following steps will set up Visual Studio 2015 for .NET Core development:</source>
          <target state="translated">以下步骤将为 .NET Core 开发设置 Visual Studio 2015：</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Open Visual Studio, and on the <bpt id="p1">**</bpt>File<ept id="p1">**</ept> menu, choose <bpt id="p2">**</bpt>New<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Project<ept id="p3">**</ept>.</source>
          <target state="translated">打开 Visual Studio，在“文件”菜单上，选择“新建”、“项目”。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>New Project<ept id="p1">**</ept> dialog, in the <bpt id="p2">**</bpt>Templates<ept id="p2">**</ept> list, expand the <bpt id="p3">**</bpt>Visual C#<ept id="p3">**</ept> node and choose <bpt id="p4">**</bpt>.NET Core<ept id="p4">**</ept>.</source>
          <target state="translated">在“新建项目”对话框的“模板”列表中，展开“Visual C#”节点并选择“.NET Core”。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You should see three new project templates for <bpt id="p1">**</bpt>Class Library (.NET Core)<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Console Application (.NET Core)<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>ASP.NET Core Web Application (.NET Core)<ept id="p3">**</ept>.</source>
          <target state="translated">应该可以看到<bpt id="p1">**</bpt>类库 (.NET Core)<ept id="p1">**</ept>、<bpt id="p2">**</bpt>控制台应用程序 (.NET Core)<ept id="p2">**</ept> 和 <bpt id="p3">**</bpt>ASP.NET Core Web 应用程序 (.NET Core)<ept id="p3">**</ept> 的三个新项目模板。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>A solution using only .NET Core projects</source>
          <target state="translated">仅使用 .NET Core 项目的解决方案</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Writing the library</source>
          <target state="translated">编写库</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In Visual Studio, choose <bpt id="p1">**</bpt>File<ept id="p1">**</ept>, <bpt id="p2">**</bpt>New<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Project<ept id="p3">**</ept>.</source>
          <target state="translated">在 Visual Studio 中，依次选择“文件”、“新建”、“项目”。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>New Project<ept id="p1">**</ept> dialog, expand the <bpt id="p2">**</bpt>Visual C#<ept id="p2">**</ept> node and choose the <bpt id="p3">**</bpt>.NET Core<ept id="p3">**</ept> node, and then choose <bpt id="p4">**</bpt>Class Library (.NET Core)<ept id="p4">**</ept>.</source>
          <target state="translated">在“新建项目”对话框中，展开“Visual C#”节点并选择“.NET Core”节点，然后选择“类库 (.NET Core)”。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Name the project "Library" and the solution "Golden".</source>
          <target state="translated">将项目命名为“Library”，将解决方案命名为“Golden”。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Leave <bpt id="p1">**</bpt>Create directory for solution<ept id="p1">**</ept> checked.</source>
          <target state="translated">保持选中“为解决方案创建目录”。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>OK<ept id="p1">**</ept>.</source>
          <target state="translated">单击“确定”。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In Solution Explorer, open the context menu for the <bpt id="p1">**</bpt>References<ept id="p1">**</ept> node and choose <bpt id="p2">**</bpt>Manage NuGet Packages<ept id="p2">**</ept>.</source>
          <target state="translated">在“解决方案资源管理器”中，打开“引用”节点的上下文菜单，并选择“管理 NuGet 包”。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Choose "nuget.org" as the <bpt id="p1">**</bpt>Package source<ept id="p1">**</ept>, and choose the <bpt id="p2">**</bpt>Browse<ept id="p2">**</ept> tab.</source>
          <target state="translated">选择“nuget.org”作为“包源”，并选择“浏览”选项卡。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Browse for <bpt id="p1">**</bpt>Newtonsoft.Json<ept id="p1">**</ept>.</source>
          <target state="translated">浏找到 <bpt id="p1">**</bpt>Newtonsoft.Json<ept id="p1">**</ept>。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Install<ept id="p1">**</ept>.</source>
          <target state="translated">单击“安装”。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Open the context menu for the <bpt id="p1">**</bpt>References<ept id="p1">**</ept> node and choose  <bpt id="p2">**</bpt>Restore packages<ept id="p2">**</ept>.</source>
          <target state="translated">打开“引用”节点的上下文菜单，选择“恢复包”。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Rename the <ph id="ph1">`Class1.cs`</ph> file to <ph id="ph2">`Thing.cs`</ph>.</source>
          <target state="translated">将 <ph id="ph1">`Class1.cs`</ph> 文件重命名为 <ph id="ph2">`Thing.cs`</ph>。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Accept the rename of the class.</source>
          <target state="translated">接受类的重命名。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Remove the constructor and add a method: <ph id="ph1">`public int Get(int number) =&gt; Newtonsoft.Json.JsonConvert.DeserializeObject&lt;int&gt;($"{number}");`</ph></source>
          <target state="translated">删除构造函数并添加方法：<ph id="ph1">`public int Get(int number) =&gt; Newtonsoft.Json.JsonConvert.DeserializeObject&lt;int&gt;($"{number}");`</ph></target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>Build<ept id="p1">**</ept> menu, choose <bpt id="p2">**</bpt>Build Solution<ept id="p2">**</ept>.</source>
          <target state="translated">在 <bpt id="p1">**</bpt>“生成”<ept id="p1">**</ept> 菜单上，选择 <bpt id="p2">**</bpt>“生成解决方案”<ept id="p2">**</ept>。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The solution should build without error.</source>
          <target state="translated">应可以准确无误地生成解决方案。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Writing the test project</source>
          <target state="translated">编写测试项目</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>In Solution Explorer, open the context menu for the <bpt id="p1">**</bpt>Solution<ept id="p1">**</ept> node and choose <bpt id="p2">**</bpt>Add<ept id="p2">**</ept>, <bpt id="p3">**</bpt>New Solution Folder<ept id="p3">**</ept>.</source>
          <target state="translated">在“解决方案资源管理器”中，打开“解决方案”节点的上下文菜单，然后选择“添加”、“新解决方案文件夹”。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Name the folder "test".</source>
          <target state="translated">将文件夹命名为“test”。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This is only a solution folder, not a physical folder.</source>
          <target state="translated">这只是解决方案文件夹，不是物理文件夹。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Open the context menu for the <bpt id="p1">**</bpt>test<ept id="p1">**</ept> folder and choose <bpt id="p2">**</bpt>Add<ept id="p2">**</ept>.</source>
          <target state="translated">打开 <bpt id="p1">**</bpt>test<ept id="p1">**</ept> 文件夹的上下文菜单，选择“添加”。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>New Project<ept id="p1">**</ept>.</source>
          <target state="translated">“新建项目”。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>New Project<ept id="p1">**</ept> dialog, choose <bpt id="p2">**</bpt>Console Application (.NET Core)<ept id="p2">**</ept>.</source>
          <target state="translated">在“新建项目”对话框中，选择“控制台应用程序 (.NET Core)”。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Name it "TestLibrary" and explicitly put it under the <ph id="ph1">`Golden\test`</ph> path.</source>
          <target state="translated">将其命名为“TestLibrary”，并显式放置到 <ph id="ph1">`Golden\test`</ph> 路径下。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The project needs to be a console application, not a class library.</source>
          <target state="translated">该项目必须是控制台应用程序，不能是类库。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>TestLibrary<ept id="p1">**</ept> project, open the context menu for the <bpt id="p2">**</bpt>References<ept id="p2">**</ept> node and choose <bpt id="p3">**</bpt>Add Reference<ept id="p3">**</ept>.</source>
          <target state="translated">在“TestLibrary”项目中，打开“引用”节点的上下文菜单，选择“添加引用”。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Reference Manager<ept id="p1">**</ept> dialog, check <bpt id="p2">**</bpt>Library<ept id="p2">**</ept> under the <bpt id="p3">**</bpt>Projects<ept id="p3">**</ept>, <bpt id="p4">**</bpt>Solution<ept id="p4">**</ept> node, and then click <bpt id="p5">**</bpt>OK<ept id="p5">**</ept>.</source>
          <target state="translated">在“引用管理器”对话框中，选中“项目”、“解决方案”节点下的“库”，然后单击“确定”。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>TestLibrary<ept id="p1">**</ept> project, open the <ph id="ph1">`project.json`</ph> file, and replace <ph id="ph2">`"Library": "1.0.0-*"`</ph> with <ph id="ph3">`"Library": {"target": "project", "version": "1.0.0-*"}`</ph>.</source>
          <target state="translated">在“TestLibrary”项目中，打开 <ph id="ph1">`project.json`</ph> 文件，将 <ph id="ph2">`"Library": "1.0.0-*"`</ph> 替换为 <ph id="ph3">`"Library": {"target": "project", "version": "1.0.0-*"}`</ph>。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This is to avoid the resolution of the <ph id="ph1">`Library`</ph> project to a NuGet package with the same name.</source>
          <target state="translated">这是为了避免将 <ph id="ph1">`Library`</ph> 项目解析到具有相同名称的 NuGet 包。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Explicitly setting the target to "project" ensures that the tooling will first search for a project with that name, and not a package.</source>
          <target state="translated">将目标显式设置为“项目”可确保工具首先搜索具有此名称的项目，而不是包。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>TestLibrary<ept id="p1">**</ept> project, open the context menu for the <bpt id="p2">**</bpt>References<ept id="p2">**</ept> node and choose <bpt id="p3">**</bpt>Restore Packages<ept id="p3">**</ept>.</source>
          <target state="translated">在“TestLibrary”项目中，打开“引用”节点的上下文菜单，选择“恢复包”。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Open the context menu for the <bpt id="p1">**</bpt>References<ept id="p1">**</ept> node and choose <bpt id="p2">**</bpt>Manage NuGet Packages<ept id="p2">**</ept>.</source>
          <target state="translated">打开“引用”节点的上下文菜单，并选择“管理 NuGet 包”。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Choose "nuget.org" as the <bpt id="p1">**</bpt>Package source<ept id="p1">**</ept>, and choose the <bpt id="p2">**</bpt>Browse<ept id="p2">**</ept> tab.</source>
          <target state="translated">选择“nuget.org”作为“包源”，并选择“浏览”选项卡。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Check the <bpt id="p1">**</bpt>Include prerelease<ept id="p1">**</ept> checkbox, and then browse for <bpt id="p2">**</bpt>xUnit<ept id="p2">**</ept> version 2.2.0 or newer, and then click <bpt id="p3">**</bpt>Install<ept id="p3">**</ept>.</source>
          <target state="translated">选中“包括预发行版”复选框，然后浏览到 <bpt id="p2">**</bpt>xUnit<ept id="p2">**</ept> 版本2.2.0 或更新版本，然后单击“安装”。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Browse for <bpt id="p1">**</bpt>dotnet-test-xunit<ept id="p1">**</ept> version 2.2.0 or newer, and then click <bpt id="p2">**</bpt>Install<ept id="p2">**</ept>.</source>
          <target state="translated">浏览到 <bpt id="p1">**</bpt>dotnet-test-xunit<ept id="p1">**</ept> 版本 2.2.0 或更新版本，然后单击“安装”。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Edit <ph id="ph1">`project.json`</ph> and replace <ph id="ph2">`"imports": "dnxcore50"`</ph> with <ph id="ph3">`"imports": [ "dnxcore50", "portable-net45+win8" ]`</ph>.</source>
          <target state="translated">编辑 <ph id="ph1">`project.json`</ph> 并将 <ph id="ph2">`"imports": "dnxcore50"`</ph> 替换为 <ph id="ph3">`"imports": [ "dnxcore50", "portable-net45+win8" ]`</ph>。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>This enables the xunit libraries to be correctly restored and used by the project: those libraries have been compiled to be used with portable profiles that include "portable-net45+win8", but not .NET Core, which didn't exist when they were built.</source>
          <target state="translated">这使项目可正确恢复和使用 xunit 库：已将这些库编译为与可移植配置文件一起使用，这些配置文件中包括“portable-net45+win8”，但不包括 .NET Core（配置文件生成时，.NET Core 不存在）。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`import`</ph> relaxes the tooling version checks at build time.</source>
          <target state="translated"><ph id="ph1">`import`</ph> 放松了生成时的工具版本检查。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>You may now restore packages without error.</source>
          <target state="translated">现在，可正确无误地恢复包。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Edit <ph id="ph1">`project.json`</ph> to add <ph id="ph2">`"testRunner": "xunit",`</ph> after the <ph id="ph3">`"frameworks"`</ph> section.</source>
          <target state="translated">编辑 <ph id="ph1">`project.json`</ph> 以在 <ph id="ph3">`"frameworks"`</ph> 部分后添加 <ph id="ph2">`"testRunner": "xunit",`</ph>。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Add a <ph id="ph1">`LibraryTests.cs`</ph> class file to the <bpt id="p1">**</bpt>TestLibrary<ept id="p1">**</ept> project, add the <ph id="ph2">`using`</ph> directives <ph id="ph3">`using Xunit;`</ph> and <ph id="ph4">`using Library;`</ph> to the top of the file, and add the following code to the class:</source>
          <target state="translated">将 <ph id="ph1">`LibraryTests.cs`</ph> 类文件添加到 <bpt id="p1">**</bpt>TestLibrary<ept id="p1">**</ept> 项目，将 <ph id="ph2">`using`</ph> 指令 <ph id="ph3">`using Xunit;`</ph> 和 <ph id="ph4">`using Library;`</ph> 添加到文件顶部并将以下代码添加到类：</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Optionally, delete the <ph id="ph1">`Program.cs`</ph> file from the <bpt id="p1">**</bpt>TestLibrary<ept id="p1">**</ept> project, and remove <ph id="ph2">`"buildOptions": {"emitEntryPoint": true},`</ph> from <ph id="ph3">`project.json`</ph>.</source>
          <target state="translated">或者，从 <bpt id="p1">**</bpt>TestLibrary<ept id="p1">**</ept> 项目删除 <ph id="ph1">`Program.cs`</ph> 文件，并从 <ph id="ph3">`project.json`</ph> 删除 <ph id="ph2">`"buildOptions": {"emitEntryPoint": true},`</ph>。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>You should now be able to build the solution.</source>
          <target state="translated">现在，应该可以生成解决方案了。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>Test<ept id="p1">**</ept> menu, choose <bpt id="p2">**</bpt>Windows<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Test Explorer<ept id="p3">**</ept>, and in Test Explorer choose <bpt id="p4">**</bpt>Run All<ept id="p4">**</ept>.</source>
          <target state="translated">在“测试”菜单上，选择“Windows”、“测试资源管理器”，在测试资源管理器中选择“全部运行”。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The test should pass.</source>
          <target state="translated">测试应该会通过。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Writing the console app</source>
          <target state="translated">编写控制台应用</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>In Solution Explorer, open the context menu for the <ph id="ph1">`src`</ph> folder, and add a new <bpt id="p1">**</bpt>Console Application (.NET Core)<ept id="p1">**</ept> project.</source>
          <target state="translated">在解决方案资源管理器中，打开 <ph id="ph1">`src`</ph> 文件夹的上下文菜单，添加新的<bpt id="p1">**</bpt>控制台应用程序 (.NET Core)<ept id="p1">**</ept> 项目。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Name it "App", and set the location to <ph id="ph1">`Golden\src`</ph>.</source>
          <target state="translated">将其命名为“App”，并将位置设置为 <ph id="ph1">`Golden\src`</ph>。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>App<ept id="p1">**</ept> project, open the context menu for the <bpt id="p2">**</bpt>References<ept id="p2">**</ept> node and choose <bpt id="p3">**</bpt>Add<ept id="p3">**</ept>,  <bpt id="p4">**</bpt>Reference<ept id="p4">**</ept>.</source>
          <target state="translated">在 <bpt id="p1">**</bpt>App<ept id="p1">**</ept> 项目中，打开“引用”节点的上下文菜单，选择“添加”<bpt id="p3">**</bpt>、<ept id="p3">**</ept>“引用”。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Reference Manager<ept id="p1">**</ept> dialog, check <bpt id="p2">**</bpt>Library<ept id="p2">**</ept> under the <bpt id="p3">**</bpt>Projects<ept id="p3">**</ept>, <bpt id="p4">**</bpt>Solution<ept id="p4">**</ept> node, and then click <bpt id="p5">**</bpt>OK<ept id="p5">**</ept></source>
          <target state="translated">在“引用管理器”对话框中，选中“项目”、“解决方案”节点下的“库”，然后单击“确定”</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>App<ept id="p1">**</ept> project, open the <ph id="ph1">`project.json`</ph> file, and replace <ph id="ph2">`"Library": "1.0.0-*"`</ph> with <ph id="ph3">`"Library": {"target": "project"}`</ph>.</source>
          <target state="translated">在 <bpt id="p1">**</bpt>App<ept id="p1">**</ept> 项目中，打开 <ph id="ph1">`project.json`</ph> 文件，将 <ph id="ph2">`"Library": "1.0.0-*"`</ph> 替代为 <ph id="ph3">`"Library": {"target": "project"}`</ph>。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Open the context menu for the <bpt id="p1">**</bpt>References<ept id="p1">**</ept> node and choose <bpt id="p2">**</bpt>Restore Packages<ept id="p2">**</ept>.</source>
          <target state="translated">打开“引用”节点的上下文菜单，选择“恢复包”。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Open the context menu for the <bpt id="p1">**</bpt>App<ept id="p1">**</ept> node and choose <bpt id="p2">**</bpt>Set as StartUp Project<ept id="p2">**</ept>.</source>
          <target state="translated">打开 <bpt id="p1">**</bpt>App<ept id="p1">**</ept> 节点的上下文菜单，选择“设置为启动项目”。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Open the <ph id="ph1">`Program.cs`</ph> file, add a <ph id="ph2">`using Library;`</ph> directive to the top of the file, and then add <ph id="ph3">`Console.WriteLine($"The answer is {new Thing().Get(42)}");`</ph> to the <ph id="ph4">`Main`</ph> method.</source>
          <target state="translated">打开 <ph id="ph1">`Program.cs`</ph> 文件，将 <ph id="ph2">`using Library;`</ph> 指令添加到文件顶部，然后将 <ph id="ph3">`Console.WriteLine($"The answer is {new Thing().Get(42)}");`</ph> 添加到 <ph id="ph4">`Main`</ph> 方法。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Set a breakpoint after the line that you just added.</source>
          <target state="translated">在刚添加的行后设置一个断点。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Press F5 to run the application..</source>
          <target state="translated">按 F5 运行该应用程序。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The application should build without error, and should hit the breakpoint.</source>
          <target state="translated">应用程序应正确生成并命中断点。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>You should also be able to check that the application output "The answer is 42.".</source>
          <target state="translated">应该也可检查应用程序输出“The answer is 42.”。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>A mixed .NET Core library and .NET Framework application</source>
          <target state="translated">混合 .NET Core 库和 .NET Framework 应用程序</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Starting from the solution obtained with the previous script, execute the following steps:</source>
          <target state="translated">从通过之前的脚本获取的解决方案开始，执行以下步骤：</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>In Solution Explorer, open the <ph id="ph1">`project.json`</ph> file for the <bpt id="p1">**</bpt>Library<ept id="p1">**</ept> project and replace <ph id="ph2">`"frameworks": {
 "netstandard1.6" }`</ph> with <ph id="ph3">`"frameworks": {
 "netstandard1.4" }`</ph>.</source>
          <target state="translated">在解决方案资源管理器中，打开 <bpt id="p1">**</bpt>Library<ept id="p1">**</ept> 项目的 <ph id="ph1">`project.json`</ph> 文件，将 <ph id="ph2">`"frameworks": {
 "netstandard1.6" }`</ph> 替换为 <ph id="ph3">`"frameworks": {
 "netstandard1.4" }`</ph>。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Library<ept id="p1">**</ept> project, open the context menu for the <bpt id="p2">**</bpt>References<ept id="p2">**</ept> node and choose <bpt id="p3">**</bpt>Restore Packages<ept id="p3">**</ept>.</source>
          <target state="translated">在 <bpt id="p1">**</bpt>Library<ept id="p1">**</ept> 项目中，打开“引用”节点的上下文菜单，选择“恢复包”。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The solution should still build and function exactly like it did before: the test should pass, and the console application should run and be debuggable.</source>
          <target state="translated">解决方案应如先前一样生成和运行：应能通过测试，控制台应用程序应运行并且可调试。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Library<ept id="p1">**</ept> project, open the context menu and choose <bpt id="p2">**</bpt>Build<ept id="p2">**</ept>.</source>
          <target state="translated">在 <bpt id="p1">**</bpt>Library<ept id="p1">**</ept> 项目中，打开上下文菜单，选择“生成”。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>In Solution Explorer, open the context menu for the <ph id="ph1">`src`</ph> folder, and choose <bpt id="p1">**</bpt>Add<ept id="p1">**</ept>.</source>
          <target state="translated">在“解决方案资源管理器”中，打开 <ph id="ph1">`src`</ph> 文件夹的上下文菜单，然后选择“添加”。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>, <bpt id="p1">**</bpt>New Project<ept id="p1">**</ept>.</source>
          <target state="translated">选择“新建项目”。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>New Project<ept id="p1">**</ept> dialog, choose the <bpt id="p2">**</bpt>Visual C#<ept id="p2">**</ept> node, and then choose <bpt id="p3">**</bpt>Console Application<ept id="p3">**</ept>.</source>
          <target state="translated">在“新建项目”对话框中，选择“Visual C#”节点，然后选择“控制台应用程序”。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Make sure you choose a standard console application, not the .NET Core version.</source>
          <target state="translated">确保选择的是标准控制台应用程序，而不是 .NET Core 版本。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>In this section, you'll be consuming the library from a .NET Framework application.</source>
          <target state="translated">在此部分中，将从 .NET Framework 应用程序使用库。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Name the project "FxApp", and set the location to <ph id="ph1">`Golden\src`</ph>.</source>
          <target state="translated">将项目命名为“FxApp”，并将位置设置为 <ph id="ph1">`Golden\src`</ph>。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>FxApp<ept id="p1">**</ept> project, open the context menu for the <bpt id="p2">**</bpt>References<ept id="p2">**</ept> node and choose <bpt id="p3">**</bpt>Add Reference<ept id="p3">**</ept>.</source>
          <target state="translated">在 <bpt id="p1">**</bpt>FxApp<ept id="p1">**</ept> 项目中，打开“引用”节点的上下文菜单，选择“添加引用”。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Reference Manager<ept id="p1">**</ept> dialog, choose <bpt id="p2">**</bpt>Browse<ept id="p2">**</ept> and browse to the location of the built <ph id="ph1">`Library.dll`</ph> (under the ..Golden\src\Library\bin\Debug\netstandard1.4 path), and then click <bpt id="p3">**</bpt>Add<ept id="p3">**</ept>.</source>
          <target state="translated">在“引用管理器”对话框中，选择“浏览”，浏览到生成的 <ph id="ph1">`Library.dll`</ph> 位置（..Golden\src\Library\bin\Debug\netstandard1.4 路径下），然后单击“添加”。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>You could also package the library and reference the package, as another way to reference .NET Core code from the .NET Framework.</source>
          <target state="translated">还可打包库和引用包，作为另一种从 .NET Framework 引用 .NET Core 代码的方法。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Open the context menu for the <bpt id="p1">**</bpt>References<ept id="p1">**</ept> node and choose <bpt id="p2">**</bpt>Manage NuGet Packages<ept id="p2">**</ept>.</source>
          <target state="translated">打开“引用”节点的上下文菜单，并选择“管理 NuGet 包”。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Choose "nuget.org" as the <bpt id="p1">**</bpt>Package source<ept id="p1">**</ept>, and choose the <bpt id="p2">**</bpt>Browse<ept id="p2">**</ept> tab.</source>
          <target state="translated">选择“nuget.org”作为“包源”，并选择“浏览”选项卡。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Check the <bpt id="p1">**</bpt>Include prerelease<ept id="p1">**</ept> checkbox, and then browse for <bpt id="p2">**</bpt>Newtonsoft.Json<ept id="p2">**</ept>.</source>
          <target state="translated">勾选“包含预发行版”复选框，然后浏览“Newtonsoft.Json”。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Install<ept id="p1">**</ept>.</source>
          <target state="translated">单击“安装”。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>FxApp<ept id="p1">**</ept> project, open the <ph id="ph1">`Program.cs`</ph> file and add a <ph id="ph2">`using Library;`</ph> directive to the top of the file, and add <ph id="ph3">`Console.WriteLine($"The answer is {new Thing().Get(42)}.");`</ph> to the <ph id="ph4">`Main`</ph> method of the program.</source>
          <target state="translated">在 <bpt id="p1">**</bpt>FxApp<ept id="p1">**</ept> 项目中，打开 <ph id="ph1">`Program.cs`</ph> 文件，将 <ph id="ph2">`using Library;`</ph> 指令添加到文件顶部，并将 <ph id="ph3">`Console.WriteLine($"The answer is {new Thing().Get(42)}.");`</ph> 添加到项目的 <ph id="ph4">`Main`</ph> 方法。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Set a breakpoint after the line that you just added.</source>
          <target state="translated">在刚添加的行后设置一个断点。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Make <bpt id="p1">**</bpt>FxApp<ept id="p1">**</ept> the startup application for the solution.</source>
          <target state="translated">使 <bpt id="p1">**</bpt>FxApp<ept id="p1">**</ept> 成为解决方案的启动应用程序。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Press F5 to run the app.</source>
          <target state="translated">按 F5 运行应用。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The application should build and hit the breakpoint.</source>
          <target state="translated">应用程序应生成并命中断点。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The application output should be "The answer is 42.".</source>
          <target state="translated">应用程序输出应为“The answer is 42.”。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>On Windows platform you can use MSTest.</source>
          <target state="translated">在 Windows 平台上可以使用 MSTest。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Find out more in the <bpt id="p1">[</bpt>Using MSTest on Windows document<ept id="p1">](../testing/using-mstest-on-windows.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>在 Windows 文档上使用 MSTest<ept id="p1">](../testing/using-mstest-on-windows.md)</ept>。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Moving a library from netstandard 1.4 to 1.3</source>
          <target state="translated">将库从 netstandard 1.4 移动到 1.3</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>In Solution Explorer, open the <ph id="ph1">`project.json`</ph> file in the <bpt id="p1">**</bpt>Library<ept id="p1">**</ept> project.</source>
          <target state="translated">在解决方案资源管理器中，打开“Library”项目中的 <ph id="ph1">`project.json`</ph> 文件。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Replace <ph id="ph1">`frameworks": { "netstandard1.4" }`</ph> with <ph id="ph2">`frameworks": { "netstandard1.3" }`</ph>.</source>
          <target state="translated">将 <ph id="ph1">`frameworks": { "netstandard1.4" }`</ph> 替换为 <ph id="ph2">`frameworks": { "netstandard1.3" }`</ph>。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Library<ept id="p1">**</ept> project, open the context menu for the <bpt id="p2">**</bpt>References<ept id="p2">**</ept> node and choose <bpt id="p3">**</bpt>Restore Packages<ept id="p3">**</ept>.</source>
          <target state="translated">在 <bpt id="p1">**</bpt>Library<ept id="p1">**</ept> 项目中，打开“引用”节点的上下文菜单，选择“恢复包”。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>Build<ept id="p1">**</ept> menu, choose <bpt id="p2">**</bpt>Build Library<ept id="p2">**</ept>.</source>
          <target state="translated">在“生成”菜单上，选择“生成库”。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Remove the <ph id="ph1">`Library`</ph> reference from the <bpt id="p1">**</bpt>FxApp<ept id="p1">**</ept> then add it back using the ..Golden\src\Library\bin\Debug\netstandard1.3 path.</source>
          <target state="translated">从 <bpt id="p1">**</bpt>FxApp<ept id="p1">**</ept> 删除 <ph id="ph1">`Library`</ph> 引用，然后使用 ..Golden\src\Library\bin\Debug\netstandard1.3 路径将其添加回来。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>This will now reference the 1.3 version.</source>
          <target state="translated">现在，将引用 1.3 版。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Press F5 to run the application.</source>
          <target state="translated">按 F5 运行该应用程序。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Everything should still work as it did before.</source>
          <target state="translated">一切操作应像之前一样工作。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Check that the application output is "The answer is 42.", that the breakpoint was hit, and that variables can be inspected.</source>
          <target state="translated">检查应用程序输出是否是“The answer is 42.”，是否命中断点以及是否可检查变量。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>A mixed PCL library and .NET Framework application</source>
          <target state="translated">混合 PCL 库和 .NET Framework 应用程序</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Close the previous solution if it was open: you will be starting a new script from this section on.</source>
          <target state="translated">如果前一个解决方案处于打开状态，请将其关闭：从此部分开始，将启动新的脚本。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Writing the library</source>
          <target state="translated">编写库</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>In Visual Studio, choose <bpt id="p1">**</bpt>File<ept id="p1">**</ept>, <bpt id="p2">**</bpt>New<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Project<ept id="p3">**</ept>.</source>
          <target state="translated">在 Visual Studio 中，依次选择“文件”、“新建”、“项目”。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>New Project<ept id="p1">**</ept> dialog, expand the <bpt id="p2">**</bpt>Visual C#<ept id="p2">**</ept> node, and choose <bpt id="p3">**</bpt>Class Library (Portable for iOS, Android and Windows)<ept id="p3">**</ept>.</source>
          <target state="translated">在“新建项目”对话框中，展开“Visual C#”节点，选择“类库(对于 iOS、Android 和 Windows 可移植)”。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Name the project "PCLLibrary" and the solution "GoldenPCL".</source>
          <target state="translated">将项目命名为“PCLLibrary”，并将解决方案命名为“GoldenPCL”。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Leave <bpt id="p1">**</bpt>Create directory for solution<ept id="p1">**</ept> checked.</source>
          <target state="translated">保持选中“为解决方案创建目录”。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>OK<ept id="p1">**</ept>.</source>
          <target state="translated">单击“确定”。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>In Solution Explorer, open the context menu for the <bpt id="p1">**</bpt>References<ept id="p1">**</ept> node and choose <bpt id="p2">**</bpt>Manage NuGet Packages<ept id="p2">**</ept>.</source>
          <target state="translated">在“解决方案资源管理器”中，打开“引用”节点的上下文菜单，并选择“管理 NuGet 包”。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Choose "nuget.org" as the <bpt id="p1">**</bpt>Package source<ept id="p1">**</ept>, and choose the <bpt id="p2">**</bpt>Browse<ept id="p2">**</ept> tab.</source>
          <target state="translated">选择“nuget.org”作为“包源”，并选择“浏览”选项卡。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Check the <bpt id="p1">**</bpt>Include prerelease<ept id="p1">**</ept> checkbox, and then browse for <bpt id="p2">**</bpt>Newtonsoft.Json<ept id="p2">**</ept>.</source>
          <target state="translated">勾选“包含预发行版”复选框，然后浏览“Newtonsoft.Json”。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Install<ept id="p1">**</ept>.</source>
          <target state="translated">单击“安装” 。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Rename the class "Thing" and add a method: <ph id="ph1">`public int Get(int number) =&gt; Newtonsoft.Json.JsonConvert.DeserializeObject&lt;int&gt;($"{number}");`</ph></source>
          <target state="translated">重命名类“Thing”并添加方法：<ph id="ph1">`public int Get(int number) =&gt; Newtonsoft.Json.JsonConvert.DeserializeObject&lt;int&gt;($"{number}");`</ph></target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>Build<ept id="p1">**</ept> menu, choose <bpt id="p2">**</bpt>Build Solution<ept id="p2">**</ept>, and verify that the solution builds.</source>
          <target state="translated">在“生成”菜单上，选择“生成解决方案”，并验证解决方案是否已生成。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Writing the console app</source>
          <target state="translated">编写控制台应用</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>In Solution Explorer, open the context menu for the <bpt id="p1">**</bpt>Solution 'GoldenPCL'<ept id="p1">**</ept> node and choose <bpt id="p2">**</bpt>Add<ept id="p2">**</ept>.</source>
          <target state="translated">在“解决方案资源管理器”中，打开“解决方案 ‘GoldenPCL’”节点的上下文菜单，然后选择“添加”。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>New Project<ept id="p1">**</ept>.</source>
          <target state="translated">“新建项目”。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>New Project<ept id="p1">**</ept> dialog, expand the <bpt id="p2">**</bpt>Visual C#<ept id="p2">**</ept> node, choose <bpt id="p3">**</bpt>Console Application<ept id="p3">**</ept>, and name the project "App".</source>
          <target state="translated">在“新建项目”对话框中，展开“Visual C#”节点，然后选择“控制台应用程序”，将项目命名为“App”。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>App<ept id="p1">**</ept> project, open the context menu for the <bpt id="p2">**</bpt>References<ept id="p2">**</ept> node and choose <bpt id="p3">**</bpt>Add<ept id="p3">**</ept>,  <bpt id="p4">**</bpt>Reference<ept id="p4">**</ept>.</source>
          <target state="translated">在 <bpt id="p1">**</bpt>App<ept id="p1">**</ept> 项目中，打开“引用”节点的上下文菜单，选择“添加”<bpt id="p3">**</bpt>、<ept id="p3">**</ept>“引用”。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Reference Manager<ept id="p1">**</ept> dialog, choose <bpt id="p2">**</bpt>Browse<ept id="p2">**</ept> and browse to the location of the built <ph id="ph1">`PCLLibrary.dll`</ph> (under the ..\GoldenPCL\PCLLibrary\bin\Debug path), and then click <bpt id="p3">**</bpt>Add<ept id="p3">**</ept>.</source>
          <target state="translated">在“引用管理器”对话框中，选择“浏览”，浏览到生成的 <ph id="ph1">`PCLLibrary.dll`</ph> 位置（..\GoldenPCL\PCLLibrary\bin\Debug 路径下），然后单击“添加”。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>App<ept id="p1">**</ept> project, open the <ph id="ph1">`Program.cs`</ph> file and add a <ph id="ph2">`using PCLLibrary;`</ph> directive to the top of the file, and add <ph id="ph3">`Console.WriteLine($"The answer is {new Thing().Get(42)}.");`</ph> to the <ph id="ph4">`Main`</ph> method of the program.</source>
          <target state="translated">在 <bpt id="p1">**</bpt>App<ept id="p1">**</ept> 项目中，打开 <ph id="ph1">`Program.cs`</ph> 文件，将 <ph id="ph2">`using PCLLibrary;`</ph> 指令添加到文件顶部，并将 <ph id="ph3">`Console.WriteLine($"The answer is {new Thing().Get(42)}.");`</ph> 添加到项目的 <ph id="ph4">`Main`</ph> 方法。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Set a breakpoint after the line that you just added..</source>
          <target state="translated">在刚添加的行后设置一个断点。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>In Solution Explorer, open the context menu for the <bpt id="p1">**</bpt>App<ept id="p1">**</ept> node and choose <bpt id="p2">**</bpt>Set as StartUp Project<ept id="p2">**</ept>.</source>
          <target state="translated">在解决方案资源管理器中，打开 <bpt id="p1">**</bpt>App<ept id="p1">**</ept> 节点的上下文菜单，选择“设置为启动项目”。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Press F5 to run the app.</source>
          <target state="translated">按 F5 运行应用。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The application should build, run, and hit the breakpoint after it outputs "The answer is 42.".</source>
          <target state="translated">应用程序输出“The answer is 42.”后，应生成、运行和命中断点。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Moving a PCL to a NetStandard library</source>
          <target state="translated">将 PCL 移动到 NetStandard 库</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The Portable Class Library tooling can automatically modify your PCL to target .NET Standard.</source>
          <target state="translated">可移植类库工具可以自动修改 PCL 以面向 .NET Standard。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Double click on the “Properties” node to open the Project Property page</source>
          <target state="translated">双击“属性”节点，打开“项目属性”页</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Under the “Targeting header” click the hyperlink “Target .NET Platform Standard”</source>
          <target state="translated">在“目标标头”下，单击超链接“面向 .NET Platform Standard”</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Click “Yes” when asked for confirmation</source>
          <target state="translated">系统请求确认时，单击“是”</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>The tooling will automatically select the version of .NET Standard that includes all of the targets originally targeted by your PCL.</source>
          <target state="translated">工具将自动选择包含 PCL 最初面向的所有目标的 .NET Standard 版本。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>You can target a different version of .NET Standard using the .NET Standard dropdown in the project property page.</source>
          <target state="translated">可使用项目属性页中的 .NET Standard 下拉列表面向不同版本的 .NET Standard。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>If you previously had a packages.config, you may be prompted to uninstall any installed packages before the conversion.</source>
          <target state="translated">如果之前装有 packages.config，转换前，系统可能会提示卸载所有已安装的包。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Manually edit project.json to target .NET Standard from an existing Portable Class Library</source>
          <target state="translated">手动编辑 project.json 以面向现有可移植类库中的 .NET Standard</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>If your project.json contains “dnxcore50” in the “supports” element, remove it.</source>
          <target state="translated">如果“supports”元素中，project.json 包含“dnxcore50”，请将其删除。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Remove the dependency on “Microsoft.NETCore”</source>
          <target state="translated">删除对“Microsoft.NETCore”的依赖关系</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Modify the dependency on “Microsoft.NETCore.Portable.Compatibility” version “1.0.0” to version “1.0.1”</source>
          <target state="translated">将对“Microsoft.NETCore.Portable.Compatibility”版本“1.0.0”的依赖关系修改为对版本“1.0.1”的依赖关系</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Add a dependency on “NETStandard.Library” version “1.6.0”</source>
          <target state="translated">添加对“NETStandard.Library”版本“1.6.0”的依赖关系</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>From the “frameworks” element, remove the “dotnet” framework (and the “imports” element within it)</source>
          <target state="translated">从“frameworks”元素删除“dotnet”框架（以及其中的“imports”元素）</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Add <ph id="ph1">` "netstandard1.x” : { } `</ph> to the frameworks element, where x is replaced with the version of .NET Standard you want to target</source>
          <target state="translated">将 <ph id="ph1">` "netstandard1.x” : { } `</ph> 添加到框架元素，其中 x 替换为要面向的 .NET Standard 版本</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Example project.json</source>
          <target state="translated">示例 project.json</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>This project.json includes supports clauses for UWP and .NET 4.6 and targets netstandard1.3:</source>
          <target state="translated">此 project.json 包括 UWP 和 .NET 4.6 的 supports 子句，且面向 netstandard1.3：</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>