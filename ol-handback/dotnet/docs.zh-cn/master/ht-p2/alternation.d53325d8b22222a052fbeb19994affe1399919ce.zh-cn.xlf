<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-eac019f" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05b72d6a3d8ebdfb3808ba2f9a47476942686de2</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\base-types\alternation.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p2</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2346f420e8bbef8241c357ca7b884aee9e99c0b2</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6ebcecf7d7738608e1cefd169b6cd086948aeed3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Alternation constructs in regular expressions</source>
          <target state="translated">正则表达式中的备用构造</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Alternation constructs in regular expressions</source>
          <target state="translated">正则表达式中的备用构造</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Alternation constructs in regular expressions</source>
          <target state="translated">正则表达式中的备用构造</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Alternation constructs modify a regular expression to enable either/or or conditional matching.</source>
          <target state="translated">替换构造可修改正则表达式以启用 either/or 或条件匹配。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>.NET supports three alternation constructs:</source>
          <target state="translated">.NET 支持三种备用构造：</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Pattern matching with <bpt id="p1">**</bpt><ph id="ph1">|</ph><ept id="p1">**</ept></source>
          <target state="translated">利用 <bpt id="p1">**</bpt><ph id="ph1">|</ph><ept id="p1">**</ept> 的模式匹配</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Conditional matching with <bpt id="p1">**</bpt>(?(<ept id="p1">**</ept><bpt id="p2">_</bpt>expression<ept id="p2">_</ept><bpt id="p3">**</bpt>)<ept id="p3">**</ept><bpt id="p4">_</bpt>yes<ept id="p4">_</ept><bpt id="p5">**</bpt><ph id="ph1">|</ph><ept id="p5">**</ept><bpt id="p6">_</bpt>no<ept id="p6">_</ept><bpt id="p7">**</bpt>)<ept id="p7">**</ept></source>
          <target state="translated">利用 <bpt id="p1">**</bpt>(?(<ept id="p1">**</ept><bpt id="p2">_</bpt>expression<ept id="p2">_</ept><bpt id="p3">**</bpt>)<ept id="p3">**</ept><bpt id="p4">_</bpt>yes<ept id="p4">_</ept><bpt id="p5">**</bpt><ph id="ph1">|</ph><ept id="p5">**</ept><bpt id="p6">_</bpt>no<ept id="p6">_</ept><bpt id="p7">**</bpt>)<ept id="p7">**</ept> 的条件匹配</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Conditional matching based on a valid captured group</source>
          <target state="translated">基于有效的捕获组的条件匹配</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Pattern matching with |</source>
          <target state="translated">利用 | 的模式匹配</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You can use the vertical bar (|) character to match any one of a series of patterns, where the | character separates each pattern.</source>
          <target state="translated">可以使用竖线 (|) 字符匹配一系列模式中的任何一种模式，其中 | 字符用于分隔每个模式。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Like the positive character class, the | character can be used to match any one of a number of single characters.</source>
          <target state="translated">与正向字符集一样，| 字符可用于匹配多个字符中的任意一个字符。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The following example uses both a positive character class and either/or pattern matching with the | character to locate occurrences of the words "gray" or "grey" in a string.</source>
          <target state="translated">下面的示例使用正向字符集和 either/or 模式匹配（使用 | 字符）查找字符串中单词“gray”或“grey”的匹配项。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In this case, the | character produces a regular expression that is more verbose.</source>
          <target state="translated">在该示例中，| 字符生成了更为详细的正则表达式。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The regular expression that uses the | character, <ph id="ph1">`\bgr(a|e)y\b,`</ph> is interpreted as shown in the following table.</source>
          <target state="translated">使用 | 字符的正则表达式 <ph id="ph1">`\bgr(a|e)y\b,`</ph> 的解释如下表所示。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">模式</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">描述</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Start at a word boundary.</source>
          <target state="translated">在单词边界处开始。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Match the characters "gr".</source>
          <target state="translated">匹配字符“gr”。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>`(a</source>
          <target state="translated">`(a</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>e)`</source>
          <target state="translated">e)`</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Match either an "a" or an "e".</source>
          <target state="translated">匹配“a”或“e”。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Match a "y" on a word boundary.</source>
          <target state="translated">匹配单词边界中的“y”。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The | character can also be used to perform an either/or match with multiple characters or subexpressions, which can include any combination of character literals and regular expression language elements.</source>
          <target state="translated">还可以使用 | 字符执行具有多个字符或子表达式（包含任意组合的字符常量和正则表达式语言元素）的 either/or 匹配。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>(The character class does not provide this functionality.) The following example uses the | character to extract either a U.S. Social Security Number (SSN), which is a 9-digit number with the format <bpt id="p1">*</bpt>ddd-dd-dddd<ept id="p1">*</ept>, or a U.S. Employer Identification Number (EIN), which is a 9-digit number with the format <bpt id="p2">*</bpt>dd-ddddddd<ept id="p2">*</ept>.</source>
          <target state="translated">（字符类不提供此功能。）下面的示例使用 | 字符提取美国社会安全号码 (SSN)（格式为 <bpt id="p1">*</bpt>ddd-dd-dddd<ept id="p1">*</ept> 的 9 位数字），或美国雇主标识号 (EIN)（格式为 <bpt id="p2">*</bpt>dd-ddddddd<ept id="p2">*</ept> 的 9 位数字）。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The regular expression <ph id="ph1">`\b(\d{2}-\d{7}|\d{3}-\d{2}-\d{4})\b`</ph> is interpreted as shown in the following table.</source>
          <target state="translated">正则表达式 <ph id="ph1">`\b(\d{2}-\d{7}|\d{3}-\d{2}-\d{4})\b`</ph> 可以解释为下表中所示内容。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">模式</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">描述</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Start at a word boundary.</source>
          <target state="translated">在单词边界处开始。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>`(\d{2}-\d{7}</source>
          <target state="translated">`(\d{2}-\d{7}</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>;\d{3}-\d{2}-\d{4})`</source>
          <target state="translated">;\d{3}-\d{2}-\d{4})`</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Match either of the following: two decimal digits followed by a hyphen followed by seven decimal digits; or three decimal digits, a hyphen, two decimal digits, another hyphen, and four decimal digits.</source>
          <target state="translated">匹配以下其中一个内容：连字符连接的两个十进制数字和七个十进制数字；或三个十进制数字后接连字符，后接两个十进制数字，后接另一个连字符，然后再接四个十进制数字。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>End the match at a word boundary.</source>
          <target state="translated">在单词边界处结束匹配。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Conditional matching with an expression</source>
          <target state="translated">条件匹配的表达式</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This language element attempts to match one of two patterns depending on whether it can match an initial pattern.</source>
          <target state="translated">此语言元素尝试根据是否可以匹配初始模式来匹配两种模式之一。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Its syntax is:</source>
          <target state="translated">语法为：</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>(?(<ept id="p1">**</ept><bpt id="p2">_</bpt>expression<ept id="p2">_</ept><bpt id="p3">**</bpt>)<ept id="p3">**</ept><bpt id="p4">_</bpt>yes<ept id="p4">_</ept><bpt id="p5">**</bpt><ph id="ph1">|</ph><ept id="p5">**</ept><bpt id="p6">_</bpt>no<ept id="p6">_</ept><bpt id="p7">**</bpt>)<ept id="p7">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>(?(<ept id="p1">**</ept><bpt id="p2">_</bpt>expression<ept id="p2">_</ept><bpt id="p3">**</bpt>)<ept id="p3">**</ept><bpt id="p4">_</bpt>yes<ept id="p4">_</ept><bpt id="p5">**</bpt><ph id="ph1">|</ph><ept id="p5">**</ept><bpt id="p6">_</bpt>no<ept id="p6">_</ept><bpt id="p7">**</bpt>)<ept id="p7">**</ept></target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>where <bpt id="p1">*</bpt>expression<ept id="p1">*</ept> is the initial pattern to match, <bpt id="p2">*</bpt>yes<ept id="p2">*</ept> is the pattern to match if expression is matched, and <bpt id="p3">*</bpt>no<ept id="p3">*</ept> is the optional pattern to match if <bpt id="p4">*</bpt>expression<ept id="p4">*</ept> is not matched.</source>
          <target state="translated">其中，<bpt id="p1">*</bpt>expression<ept id="p1">*</ept> 是要匹配的初始模式，<bpt id="p2">*</bpt>yes<ept id="p2">*</ept> 是当匹配 expression 时要匹配的模式，而 <bpt id="p3">*</bpt>no<ept id="p3">*</ept> 是未匹配 <bpt id="p4">*</bpt>expression<ept id="p4">*</ept> 时要匹配的可选模式。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The regular expression engine treats <bpt id="p1">*</bpt>expression<ept id="p1">*</ept> as a zero-width assertion; that is, the regular expression engine does not advance in the input stream after it evaluates <bpt id="p2">*</bpt>expression<ept id="p2">*</ept>.</source>
          <target state="translated">正则表达式引擎将 <bpt id="p1">*</bpt>expression<ept id="p1">*</ept> 视为一个宽度为零的断言；也就是说，正则表达式引擎在计算 <bpt id="p2">*</bpt>expression<ept id="p2">*</ept> 之后，不再处理输入流的后续数据。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Therefore, this construct is equivalent to the following:</source>
          <target state="translated">因此，该构造是等效于以下语法：</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>(?(?<ept id="p1">**</ept><ph id="ph1">=</ph><bpt id="p2">_</bpt>expression<ept id="p2">_</ept><bpt id="p3">**</bpt>)<ept id="p3">**</ept><bpt id="p4">_</bpt>yes<ept id="p4">_</ept><bpt id="p5">**</bpt><ph id="ph2">|</ph><ept id="p5">**</ept><bpt id="p6">_</bpt>no<ept id="p6">_</ept><bpt id="p7">**</bpt>)<ept id="p7">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>(?(?<ept id="p1">**</ept><ph id="ph1">=</ph><bpt id="p2">_</bpt>expression<ept id="p2">_</ept><bpt id="p3">**</bpt>)<ept id="p3">**</ept><bpt id="p4">_</bpt>yes<ept id="p4">_</ept><bpt id="p5">**</bpt><ph id="ph2">|</ph><ept id="p5">**</ept><bpt id="p6">_</bpt>no<ept id="p6">_</ept><bpt id="p7">**</bpt>)<ept id="p7">**</ept></target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>where <bpt id="p1">**</bpt>(?<ept id="p1">**</ept><ph id="ph1">=</ph><bpt id="p2">_</bpt>expression<ept id="p2">_</ept><bpt id="p3">**</bpt>)<ept id="p3">**</ept> is a zero-width assertion construct.</source>
          <target state="translated">其中 <bpt id="p1">**</bpt>(?<ept id="p1">**</ept><ph id="ph1">=</ph><bpt id="p2">_</bpt>expression<ept id="p2">_</ept><bpt id="p3">**</bpt>)<ept id="p3">**</ept> 是宽度为零的断言构造。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>(For more information, see <bpt id="p1">[</bpt>Grouping constructs in regular expressions<ept id="p1">](grouping.md)</ept>.) Because the regular expression engine interprets <bpt id="p2">*</bpt>expression<ept id="p2">*</ept> as an anchor (a zero-width assertion), <bpt id="p3">*</bpt>expression<ept id="p3">*</ept> must either be a zero-width assertion (for more information, see <bpt id="p4">[</bpt>Anchors in regular expressions<ept id="p4">](anchors.md)</ept>) or a subexpression that is also contained in <bpt id="p5">*</bpt>yes<ept id="p5">*</ept>.</source>
          <target state="translated">（有关更多信息，请参见<bpt id="p1">[</bpt>正则表达式中的分组构造<ept id="p1">](grouping.md)</ept>。）由于正则表达式引擎将 <bpt id="p2">*</bpt>expression<ept id="p2">*</ept> 解释为定位点（零宽断言），因此 <bpt id="p3">*</bpt>expression<ept id="p3">*</ept> 必须是零宽断言（有关详细信息，请参阅<bpt id="p4">[</bpt>正则表达式中的定位点<ept id="p4">](anchors.md)</ept>），或者是也包含在 <bpt id="p5">*</bpt>yes<ept id="p5">*</ept> 中的子表达式。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Otherwise, the <bpt id="p1">*</bpt>yes<ept id="p1">*</ept> pattern cannot be matched.</source>
          <target state="translated">否则，无法匹配 <bpt id="p1">*</bpt>yes<ept id="p1">*</ept> 模式。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">*</bpt>expression<ept id="p1">*</ept> is a named or numbered capturing group, the alternation construct is interpreted as a capture test; for more information, see the next section, <bpt id="p2">[</bpt>Conditional matching based on a valid captured group<ept id="p2">](#conditional-matching-based-on-a-valid-captured-group)</ept>.</source>
          <target state="translated">如果 <bpt id="p1">*</bpt>expression<ept id="p1">*</ept> 是命名捕获组或带编号的捕获组，则备用构造将被解释为捕获测试；有关详细信息，请参阅下一部分<bpt id="p2">[</bpt>基于有效捕获组的条件匹配<ept id="p2">](#conditional-matching-based-on-a-valid-captured-group)</ept>。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>In other words, the regular expression engine does not attempt to match the captured substring, but instead tests for the presence or absence of the group.</source>
          <target state="translated">换而言之，正则表达式引擎不会尝试匹配捕获的子字符串，而是测试该组是否存在。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The following example is a variation of the example that appears in the previous section.</source>
          <target state="translated">下面的示例是上一部分中示例的变体。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>It uses conditional matching to determine whether the first three characters after a word boundary are two digits followed by a hyphen.</source>
          <target state="translated">它使用条件匹配来确定单词边界之后的前三个字符是否是后接一个连字符的两个数字。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>If they are, it attempts to match a U.S. Employer Identification Number (EIN).</source>
          <target state="translated">如果是，则将尝试匹配美国雇主标识号 (EIN)。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>If not, it attempts to match a U.S. Social Security Number (SSN).</source>
          <target state="translated">如果不是，则将尝试匹配美国社会保障号 (SSN)。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The regular expression pattern <ph id="ph1">`\b(?(\d{2}-)\d{2}-\d{7}|\d{3}-\d{2}-\d{4})\b`</ph> is interpreted as shown in the following table.</source>
          <target state="translated">正则表达式模式 <ph id="ph1">`\b(?(\d{2}-)\d{2}-\d{7}|\d{3}-\d{2}-\d{4})\b`</ph> 的含义如下表所示。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">模式</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">描述</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Start at a word boundary.</source>
          <target state="translated">在单词边界处开始。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Determine whether the next three characters consist of two digits followed by a hyphen.</source>
          <target state="translated">确定接下来的三个字符是否由两个数字后接一个连字符组成。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>If the previous pattern matches, match two digits followed by a hyphen followed by seven digits.</source>
          <target state="translated">如果前面的模式匹配，则匹配后接一个连字符和七个数字的两个数字。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>If the previous pattern does not match, match three decimal digits, a hyphen, two decimal digits, another hyphen, and four decimal digits.</source>
          <target state="translated">如果前面的模式不匹配，则匹配三个十进制数字，后接一个连字符，再接两个十进制数字，再接另一个连字符，再接四个十进制数字。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Match a word boundary.</source>
          <target state="translated">与字边界匹配。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Conditional matching based on a valid captured group</source>
          <target state="translated">基于有效的捕获组的条件匹配</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>This language element attempts to match one of two patterns depending on whether it has matched a specified capturing group.</source>
          <target state="translated">此语言元素尝试根据是否已经匹配指定的捕获组来匹配两种模式之一。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Its syntax is:</source>
          <target state="translated">语法为：</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>(?(<ept id="p1">**</ept><bpt id="p2">_</bpt>name<ept id="p2">_</ept><bpt id="p3">**</bpt>)<ept id="p3">**</ept><bpt id="p4">_</bpt>yes<ept id="p4">_</ept><bpt id="p5">**</bpt><ph id="ph1">|</ph><ept id="p5">**</ept><bpt id="p6">_</bpt>no<ept id="p6">_</ept><bpt id="p7">**</bpt>)<ept id="p7">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>(?(<ept id="p1">**</ept><bpt id="p2">_</bpt>name<ept id="p2">_</ept><bpt id="p3">**</bpt>)<ept id="p3">**</ept><bpt id="p4">_</bpt>yes<ept id="p4">_</ept><bpt id="p5">**</bpt><ph id="ph1">|</ph><ept id="p5">**</ept><bpt id="p6">_</bpt>no<ept id="p6">_</ept><bpt id="p7">**</bpt>)<ept id="p7">**</ept></target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>or</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>(?(<ept id="p1">**</ept><bpt id="p2">_</bpt>number<ept id="p2">_</ept><bpt id="p3">**</bpt>)<ept id="p3">**</ept><bpt id="p4">_</bpt>yes<ept id="p4">_</ept><bpt id="p5">**</bpt><ph id="ph1">|</ph><ept id="p5">**</ept><bpt id="p6">_</bpt>no<ept id="p6">_</ept><bpt id="p7">**</bpt>)<ept id="p7">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>(?(<ept id="p1">**</ept><bpt id="p2">_</bpt>number<ept id="p2">_</ept><bpt id="p3">**</bpt>)<ept id="p3">**</ept><bpt id="p4">_</bpt>yes<ept id="p4">_</ept><bpt id="p5">**</bpt><ph id="ph1">|</ph><ept id="p5">**</ept><bpt id="p6">_</bpt>no<ept id="p6">_</ept><bpt id="p7">**</bpt>)<ept id="p7">**</ept></target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>where <bpt id="p1">*</bpt>name<ept id="p1">*</ept> is the name and <bpt id="p2">*</bpt>number<ept id="p2">*</ept> is the number of a capturing group, <bpt id="p3">*</bpt>yes<ept id="p3">*</ept> is the expression to match if name or number has a match, and <bpt id="p4">*</bpt>no<ept id="p4">*</ept> is the optional expression to match if it does not.</source>
          <target state="translated">其中，<bpt id="p1">*</bpt>name<ept id="p1">*</ept> 是捕获组的名称，<bpt id="p2">*</bpt>number<ept id="p2">*</ept> 是捕获组的编号；<bpt id="p3">*</bpt>yes<ept id="p3">*</ept> 是当 name 或 number 具有匹配项时要匹配的表达式；<bpt id="p4">*</bpt>no<ept id="p4">*</ept> 是当不具有匹配项时要匹配的可选表达式。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">*</bpt>name<ept id="p1">*</ept> does not correspond to the name of a capturing group that is used in the regular expression pattern, the alternation construct is interpreted as an expression test, as explained in the previous section.</source>
          <target state="translated">如果 <bpt id="p1">*</bpt>name<ept id="p1">*</ept> 与正则表达式模式中所用捕获组的名称不对应，则备用构造将解释为表达式测试，如上一部分中所述。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Typically, this means that expression evaluates to <ph id="ph1">`false`</ph>.</source>
          <target state="translated">通常，这意味着 expression 的计算结果为 <ph id="ph1">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`number`</ph> does not correspond to a numbered capturing group that is used in the regular expression pattern, the regular expression engine throws an <bpt id="p1">[</bpt>ArgumentException<ept id="p1">](xref:System.ArgumentException)</ept>.</source>
          <target state="translated">如果 <ph id="ph1">`number`</ph> 与正则表达式模式中所用带编号的捕获组不对应，则正则表达式引擎将引发 <bpt id="p1">[</bpt>ArgumentException<ept id="p1">](xref:System.ArgumentException)</ept>。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The following example is a variation of the example that appears in the previous section.</source>
          <target state="translated">下面的示例是上一部分中示例的变体。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>It uses a capturing group named <ph id="ph1">`n2`</ph> that consists of two digits followed by a hyphen.</source>
          <target state="translated">它使用一个名为 <ph id="ph1">`n2`</ph> 的捕获组，其中包含两个数字，后接一个连字符。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The alternation construct tests whether this capturing group has been matched in the input string.</source>
          <target state="translated">替换构造测试此捕获组是否在输入字符串中找到匹配项。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>If it has, the alternation construct attempts to match the last seven digits of a nine-digit U.S. Employer Identification Number (EIN).</source>
          <target state="translated">如果有匹配项，则替换构造会尝试匹配九位数的美国雇主标识号 (EIN)。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>If it has not, it attempts to match a nine-digit U.S. Social Security Number (SSN).</source>
          <target state="translated">如果没有匹配项，则将尝试匹配九位数的美国社会保障号 (SSN)。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The regular expression pattern <ph id="ph1">`\b(?&lt;n2&gt;\d{2}-)*(?(n2)\d{7}|\d{3}-\d{2}-\d{4})\b`</ph> is interpreted as shown in the following table.</source>
          <target state="translated">正则表达式模式 <ph id="ph1">`\b(?&lt;n2&gt;\d{2}-)*(?(n2)\d{7}|\d{3}-\d{2}-\d{4})\b`</ph> 的含义如下表所示。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">模式</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">描述</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Start at a word boundary.</source>
          <target state="translated">在单词边界处开始。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Match zero or one occurrence of two digits followed by a hyphen.</source>
          <target state="translated">匹配两个数字后接一个连字符的零或一个匹配项。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Name this capturing group <ph id="ph1">`n2`</ph>.</source>
          <target state="translated">命名此捕获组 <ph id="ph1">`n2`</ph>。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Test whether <ph id="ph1">`n2`</ph> was matched in the input string.</source>
          <target state="translated">测试输入字符串中是否有 <ph id="ph1">`n2`</ph> 的匹配项。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`n2`</ph> was matched, match seven decimal digits.</source>
          <target state="translated">如果找到 <ph id="ph1">`n2`</ph> 的匹配项，则匹配 7 个十进制数字。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>;\d{3}-\d{2}-\d{4}`</source>
          <target state="translated">;\d{3}-\d{2}-\d{4}`</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`n2`</ph> was not matched, match three decimal digits, a hyphen, two decimal digits, another hyphen, and four decimal digits.</source>
          <target state="translated">如果未找到 <ph id="ph1">`n2`</ph> 的匹配项，则匹配 3 个十进制数字，后接一个连字符，再接 2 个十进制数字，再接另一个连字符，再接 4 个十进制数字。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Match a word boundary.</source>
          <target state="translated">与字边界匹配。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>A variation of this example that uses a numbered group instead of a named group is shown in the following example.</source>
          <target state="translated">下面示例中显示此示例变体使用编号组而非命名组。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Its regular expression pattern is <ph id="ph1">`\b(\d{2}-)*(?(1)\d{7}|\d{3}-\d{2}-\d{4})\b`</ph>.</source>
          <target state="translated">正则表达式模式为 <ph id="ph1">`\b(\d{2}-)*(?(1)\d{7}|\d{3}-\d{2}-\d{4})\b`</ph>。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">另请参阅</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Regular expression language - quick reference<ept id="p1">](quick-ref.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>正则表达式语言 - 快速参考<ept id="p1">](quick-ref.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>