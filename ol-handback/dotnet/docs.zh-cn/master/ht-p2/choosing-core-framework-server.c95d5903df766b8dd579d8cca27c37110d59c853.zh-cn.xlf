<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-6a73dd2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a0563f7437711ddbee309803e97ab653aa160337</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\choosing-core-framework-server.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p2</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0143d65276bbfb3dc69e7168da1bb453cca14187</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c698de36e04ed9beb2d8dccd64798dfe154f539f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Choosing between .NET Core and .NET Framework for server apps</source>
          <target state="translated">为服务器应用选择 .NET Core 或 .NET Framework</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>A guide on which flavor of .NET you should consider when building a server app in .NET.</source>
          <target state="translated">关于用户在 .NET 中生成服务器应用时应考虑使用哪种版本的 .NET 的指南。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core, .NET Framework</source>
          <target state="translated">.NET, .NET Core, .NET Framework</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Choosing between .NET Core and .NET Framework for server apps</source>
          <target state="translated">为服务器应用选择 .NET Core 或 .NET Framework</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>There are two supported choices of runtime for building server-side applications with .NET: .NET Framework and .NET Core.</source>
          <target state="translated">有两种支持的运行时可用于通过 NET Framework 和 .NET Core 生成服务器端应用程序。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Both share a lot of the same .NET platform components and you can share code across the two.</source>
          <target state="translated">这两者共享了大量相同的 .NET 平台组件，用户可在它们之间共享代码。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>However, there are fundamental differences between the two and your choice will depend on what you want to accomplish.</source>
          <target state="translated">但两者之间存在根本的差异，可根据需要实现的目标进行选择。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This article provides guidance on when to use each.</source>
          <target state="translated">本文介绍了在何种情况下进行选择。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You should use .NET Core for your server application when:</source>
          <target state="translated">在以下情况，应该为服务器应用程序选择使用 .NET Core：</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You have cross-platform needs.</source>
          <target state="translated">用户有跨平台需求。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You are targeting microservices.</source>
          <target state="translated">用户正在面向微服务。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You are using Docker containers.</source>
          <target state="translated">用户正在使用 Docker 容器。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You need high performance and scalable systems.</source>
          <target state="translated">用户需要高性能和可扩展的系统。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You need side by side of .NET versions by application.</source>
          <target state="translated">用户根据应用程序需要并排 .NET 版本。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You should use .NET Framework for your server application when:</source>
          <target state="translated">在以下情况，应该为服务器应用程序选择使用 .NET Framework ：</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Your application currently uses .NET Framework (recommendation is to extend instead of migrating)</source>
          <target state="translated">应用程序当前正在使用 .NET Framework（建议扩展而不是迁移）</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You need to use third-party .NET libraries or NuGet packages not available for .NET Core.</source>
          <target state="translated">用户需要使用不可用于 .NET Core 的第三方 .NET 库或 NuGet 包。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You need to use .NET technologies that are not available for .NET Core.</source>
          <target state="translated">用户需要使用不可用于 .NET Core 的 .NET 技术。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You need to use a platform that doesn’t support .NET Core.</source>
          <target state="translated">用户需要使用不支持 .NET Core 的平台。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>When to choose .NET Core</source>
          <target state="translated">选择 .NET Core 的情形</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The following is a more detailed explanation of the previously-stated reasons for picking .NET Core.</source>
          <target state="translated">以下是对前面提到的选择 .NET Core 的原因的更详细的说明。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Cross-platform needs</source>
          <target state="translated">跨平台需求</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Clearly, if your goal is to have an application (web/service) that should be able to run across platforms (Windows, Linux and macOS), the best choice is to use .NET Core.</source>
          <target state="translated">如果你的目标是拥有能跨平台（Windows、Linux 和 macOS）运行的应用程序（Web/服务），.NET Core 无疑是最佳选择。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>.NET Core also supports the previously-mentioned operating systems as your development workstation.</source>
          <target state="translated">.NET Core 作为开发工作站还支持前面提到的操作系统。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Visual Studio provides an Integrated Development Environment (IDE) for Windows.</source>
          <target state="translated">Visual Studio 提供用于 Windows 的集成开发环境 (IDE)。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You can also use Visual Studio Code on macOS, Linux and Windows which fully support .NET Core, including IntelliSense and debugging.</source>
          <target state="translated">你还可以在 macOS、Linux 和 Windows 上使用 Visual Studio Code，它们完全支持 .NET Core，包括 IntelliSense 和调试。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>You can also target .NET Core with most third-party editors like Sublime, Emacs, VI and can get editor IntelliSense using the open source <bpt id="p1">[</bpt>Omnisharp<ept id="p1">](http://www.omnisharp.net/)</ept> project.</source>
          <target state="translated">此外，你还可以使用大多数第三方编辑器（如 Sublime、Emacs 和 VI）面向 .NET Core，并使用开源 <bpt id="p1">[</bpt>Omnisharp<ept id="p1">](http://www.omnisharp.net/)</ept> 项目获取编辑器 IntelliSense。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You can also avoid any code editor and directly use the .NET Core command-line tools, available forall supported platforms.</source>
          <target state="translated">也可以不使用任何代码编辑器，直接使用 forall 支持平台上提供的 .NET Core 命令行工具。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Microservices architecture</source>
          <target state="translated">微服务体系结构</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>.NET Core is the best candidate if you are embracing a microservices oriented system composed of multiple independent, dynamically scalable, stateful or stateless microservices.</source>
          <target state="translated">如果你要选择使用面向微服务的系统（该系统由多个独立的、可动态伸缩的、有状态或无状态的微服务组成），.NET Core 将是最佳选择。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>.NET Core is lightweight and its API surface can be minimized to the scope of the microservice.</source>
          <target state="translated">.NET Core 是轻型平台，其 API 图面可最小化到微服务范围。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>A microservices architecture also allows you to mix technologies across a service boundary, enabling a gradual embrace of .NET Core for new microservices that live in conjunction with other microservices or services developed with .NET Framework, Java, Ruby, or other monolithic technologies.</source>
          <target state="translated">微服务体系结构还允许混合跨服务边界的技术，从而逐渐接受新微服务的 .NET Core，这些新的微服务与使用 .NET Framework、Java、Ruby 或其他整体化技术开发的其他微服务或服务结合使用。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The infrastructure platforms you could use are many.</source>
          <target state="translated">可供使用的基础结构平台有很多。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For large and complex microservice systems, you can use <bpt id="p1">[</bpt>Azure Service Fabric<ept id="p1">](https://azure.microsoft.com/en-us/services/service-fabric/)</ept>.</source>
          <target state="translated">对于大型和复杂微服务系统，可以使用 <bpt id="p1">[</bpt>Azure Service Fabric<ept id="p1">](https://azure.microsoft.com/en-us/services/service-fabric/)</ept>。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For stateless microservices you can also use other products like <bpt id="p1">[</bpt>Azure App Service<ept id="p1">](https://azure.microsoft.com/en-us/services/app-service/)</ept>.</source>
          <target state="translated">对于无状态的微服务，还可以使用其他产品（如 <bpt id="p1">[</bpt>Azure 应用服务<ept id="p1">](https://azure.microsoft.com/en-us/services/app-service/)</ept>）。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Microservices alternatives based on Docker also fit any kind of microservices approach, as explained next.</source>
          <target state="translated">基于 Docker 的微服务备选方案也适合于任何一种微服务方法，将在下一部分中进行说明。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>All these platforms support .NET Core and make them ideal for hosting your microservices.</source>
          <target state="translated">所有这些平台都支持 .NET Core，是托管微服务的理想选择。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Containers</source>
          <target state="translated">容器</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Containers are commonly used in conjunction with a microservices architecture, although they can also be used to containerize web apps or services which follow any architectural pattern.</source>
          <target state="translated">虽然容器通常与微服务体系结构结合使用，但是也可用于容器化遵循任何体系结构模式的 Web 应用或服务。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>You will be able to use the .NET Framework for Windows containers, but the modularity and lightweight nature of .NET Core makes it perfect for containers.</source>
          <target state="translated">虽然能够将 .NET Framework 用于 Windows 容器，但 .NET Core的模块化和轻型性质使之成为容器的最佳选择。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>When creating and deploying a container the size of its image is far smaller with .NET Core than .NET Framework.</source>
          <target state="translated">在创建和部署时容器时，使用 .NET Core 时容器的映像大小要远小于使用 .NET Framework 时的大小。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Because it is cross-platform, you can deploy server apps to Linux Docker containers, for example.</source>
          <target state="translated">例如，因为它是跨平台的，所以可以将服务器应用部署到 Linux Docker 容器。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You can then host your Docker containers in your own Linux or Windows infrastructure, or use a cloud service such as <bpt id="p1">[</bpt>Azure Container Service<ept id="p1">](https://azure.microsoft.com/en-us/services/container-service/)</ept> which can manage, orchestrate and scale your container-based application in the cloud.</source>
          <target state="translated">然后，可以在自己的 Linux 或 Windows 基础结构中托管 Docker 容器，或使用云服务（例如 <bpt id="p1">[</bpt>Azure 容器服务<ept id="p1">](https://azure.microsoft.com/en-us/services/container-service/)</ept>），在云中管理、协调和缩放基于容器的应用程序。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>A need for high performance and scalable systems</source>
          <target state="translated">需要高性能和可扩展的系统</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>When your system needs the best possible performance and scalability, .NET Core and ASP.NET Core are your best options.</source>
          <target state="translated">如果系统需要最佳的性能和可伸缩性，.NET Core 和 ASP.NET Core 是最佳的选择。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>ASP.NET Core outperforms ASP.NET by a factor of 10, and it leads other popular industry technologies for microservices such as Java servlets, Go and node.js.</source>
          <target state="translated">ASP.NET Core 的性能比 ASP.NET 高出 10 倍，领先于微服务的其他行业技术（例如 Java servlets、Go 和 node.js）。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This is especially relevant for microservices architectures, where you could have hundreds of microservices running.</source>
          <target state="translated">这一点对微服务体系结构尤为重要，你可以运行数百个微服务。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>With ASP.NET Core you’d be able to run your system with a much lower number of servers/VMs, ultimately saving costs in infrastructure and hosting.</source>
          <target state="translated">通过使用 ASP.NET Core，能够大大减少运行系统所用的服务器/VM，最终节省基础结构和托管的费用。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>A need for side by side of .NET versions per application level</source>
          <target state="translated">需要按应用程序级别选择并行的 .NET 版本</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>If you want to be able to install applications with dependencies on different versions of frameworks in .NET, you need to use .NET Core, which provides 100% side-by-side.</source>
          <target state="translated">如果想要在 .NET 的不同版本的框架上安装具有依赖项的应用程序，需要使用提供百分百并行的 .NET Core。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Easy side-by-side installation of different versions of .NET Core on the same machine allows you to have multiple services on the same server, each of them on its own version of .NET Core, eliminating risks and saving money in application upgrades and IT operations.</source>
          <target state="translated">由于在同一台计算机上可轻松地并行安装不同版本的 .NET Core，用户可在同一台计算机上拥有多个服务，每个服务都在自己版本的 .NET Core 上，从而消除了风险并节约了应用程序升级和 IT 运营方面的资金。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>When to choose .NET Framework</source>
          <target state="translated">选择 .NET Framework 的情形</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>While .NET Core offers significant benefits for new applications and application patterns, the .NET Framework will continue to be the natural choice for many existing scenarios and as such, it won’t be replaced by .NET Core for all server applications.</source>
          <target state="translated">虽然 .NET Core 为新的应用程序和应用程序模式带来的好处很明显，但在很多现有情况下仍然会选择 .NET Framework，因此不会将所有服务器应用程序的 .NET Framework 将替换为 .NET Core。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Current .NET Framework applications</source>
          <target state="translated">现有的 .NET Framework 应用程序</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>In most cases, you won’t need to migrate your existing applications to .NET Core.</source>
          <target state="translated">在大多数情况下，不需要将现有应用程序迁移到 .NET Core。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Instead, a recommended approach is to use .NET Core as you extend an existing application, such as writing a new web service in ASP.NET Core.</source>
          <target state="translated">相反，若要扩展现有的应用程序（例如，在 ASP.NET Core 中写入新的 Web 服务），建议使用 .NET Core。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>A need to use third-party .NET libraries or NuGet packages not available for .NET Core</source>
          <target state="translated">需要使用不可用于 .NET Core 的第三方 .NET 库或 NuGet 包</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Libraries are quickly embracing .NET Standard, which enables sharing code across all .NET flavors including .NET Core.</source>
          <target state="translated">库可以快速接受 .NET Standard，这样可跨各种 .NET 版本（包括 .NET Core）共享代码。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>With .NET Standard 2.0 this will be even easier, as the .NET Core API surface will become significantly bigger and .NET Core applications can directly use existing .NET Framework libraries.</source>
          <target state="translated">如使用 .NET Standard 2.0，上述操作将更简单，因为 .NET Core API 图面会明显变大，.NET Core 应用程序可直接使用现有的 .NET Framework 库。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>This transition won’t be immediate, though, so we recommend checking the specific libraries required by your application before making a decision one way or another.</source>
          <target state="translated">但此转换不会即时性生效，因此，我们建议在选择其中的一种方法前，请检查应用程序所需的特定库。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>A need to use .NET technologies not available for .NET Core</source>
          <target state="translated">需要使用不可用于 .NET Core 的 .NET 技术</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Some .NET Framework technologies are not available in .NET Core.</source>
          <target state="translated">某些 .NET Framework 技术在 .NET Core 中不可用。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Some of them will be available in later .NET Core releases, but others don’t apply to the new application patterns targeted by .NET Core and may never be available.</source>
          <target state="translated">虽然某些技术将在更高版本的 .NET Core 中可用，但其他技术不会应用于 .NET Core 面向的新应用程序模式，因此可能永远不可用。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The following list shows the most common technologies not found in .NET Core 1.0:</source>
          <target state="translated">以下列表显示无法在 .NET Core 1.0 中找到的最常见技术：</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>ASP.NET Web Forms applications: ASP.NET Web Forms is only available on the .NET Framework, so you cannot use ASP.NET Core / .NET Core for this scenario.</source>
          <target state="translated">ASP.NET Web 窗体应用程序：ASP.NET Web 窗体上仅在 .NET Framework 中可用，因此该情况下不能使用 ASP.NET Core /.NET Core 。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Currently there are no plans to bring ASP.NET Web Forms to .NET Core.</source>
          <target state="translated">目前没有将 ASP.NET Web 窗体引入 .NET Core 的计划。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>ASP.NET Web Pages applications: ASP.NET Web Pages are not included in ASP.NET Core 1.0, although it is planned to be included in a future release as explained in the <bpt id="p1">[</bpt>.NET Core roadmap<ept id="p1">](https://github.com/aspnet/Home/wiki/Roadmap)</ept>.</source>
          <target state="translated">ASP.NET 网页应用程序：ASP.NET Core 1.0 中不包含 ASP.NET 网页，但计划将在未来版本中包括此项，详情请查看 <bpt id="p1">[</bpt>.NET Core 路线图<ept id="p1">](https://github.com/aspnet/Home/wiki/Roadmap)</ept>。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>ASP.NET SignalR server/client implementation.</source>
          <target state="translated">ASP.NET SignalR 服务器/客户端实现。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>At .NET Core 1.0 release timeframe (June 2016), ASP.NET SignalR is not available for ASP.NET Core (neither client or server), although it is planned to be included in a future release as explained in the <bpt id="p1">[</bpt>.NET Core roadmap<ept id="p1">](https://github.com/aspnet/Home/wiki/Roadmap)</ept>.</source>
          <target state="translated">在 .NET Core 1.0 发布时间范围内（2016 年 6 月），ASP.NET Core 不提供 ASP.NET SignalR（包括客户端和服务器），但计划将在未来版本中包括此项，详情请查看 <bpt id="p1">[</bpt>.NET Core 路线图<ept id="p1">](https://github.com/aspnet/Home/wiki/Roadmap)</ept>。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Preview state is available at the <bpt id="p1">[</bpt>Server-side<ept id="p1">](https://github.com/aspnet/SignalR-Server)</ept> and <bpt id="p2">[</bpt>Client Library<ept id="p2">](https://github.com/aspnet/SignalR-Client-Net)</ept> GitHub repositories.</source>
          <target state="translated"><bpt id="p1">[</bpt>服务器端<ept id="p1">](https://github.com/aspnet/SignalR-Server)</ept>和<bpt id="p2">[</bpt>客户端库<ept id="p2">](https://github.com/aspnet/SignalR-Client-Net)</ept> GitHub 存储库上的预览状态可用。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>WCF services implementation.</source>
          <target state="translated">WCF 服务的实现。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Even when there’s a <bpt id="p1">[</bpt>WCF-Client library<ept id="p1">](https://github.com/dotnet/wcf)</ept> to consume WCF services from .NET Core, as of June 2016, WCF server implementation is only available on the .NET Framework.</source>
          <target state="translated">虽然 <bpt id="p1">[</bpt>WCF 客户端库<ept id="p1">](https://github.com/dotnet/wcf)</ept>可从 .NET Core 使用 WCF 服务，但从 2016 年 6 月起，WCF 服务器实现只能在 .NET Framework 上可用 。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>This scenario is not part of the current plan for .NET Core but it’s being considered for the future.</source>
          <target state="translated">这种情况虽然不属于 .NET Core 当前计划，但将来会考虑这点。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Workflow related services: Windows Workflow Foundation (WF), Workflow Services (WCF + WF in a single service) and WCF Data Services (formerly known as “ADO.NET Data Services”) are only available on the .NET Framework and there are no plans to bring them to .NET Core.</source>
          <target state="translated">工作流相关的服务：Windows Workflow Foundation (WF)、工作流服务（WCF + 单个服务中的 WF）和 WCF 数据服务（以前称为“ADO.NET 数据服务”）仅在 .NET Framework 上可用，尚未计划将其引入 .NET Core。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Language support: Visual Basic and F# don’t currently have tooling support .NET Core, but both will be supported in Visual Studio 2017 and later versions of Visual Studio.</source>
          <target state="translated">语言支持：Visual Basic 和 F # 目前没有工具支持 .NET Core，但 Visual Studio 2017 和更高版本的 Visual Studio 将支持这两种语言。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>In addition to the official roadmap, there are other frameworks to be ported to .NET Core - For a full list, take a look at CoreFX issues marked as <bpt id="p1">[</bpt>port-to-core<ept id="p1">](https://github.com/dotnet/corefx/issues?q=is%3Aopen+is%3Aissue+label%3Aport-to-core)</ept>.</source>
          <target state="translated">除了正式的路线图，还有其他框架植入 .NET Core - 若要查看完整列表，请查看标记为<bpt id="p1">[</bpt>端口到核心<ept id="p1">](https://github.com/dotnet/corefx/issues?q=is%3Aopen+is%3Aissue+label%3Aport-to-core)</ept>的 CoreFX 问题。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Please note that this list doesn’t represent a commitment from Microsoft to bring those components to .NET Core — they are simply capturing the desire from the community to do so.</source>
          <target state="translated">请注意，此列表不代表 Microsoft 承诺将这些组件引入 .NET Core — 而只是从社区搜集达成此项的意愿。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>That being said, if you care about any of the components listed above, consider participating in the discussions on GitHub so that your voice can be heard.</source>
          <target state="translated">尽管如此，如果对以上所列的任何组件感兴趣，请参与 GitHub 上的讨论，发表你的看法。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>And if you think something is missing, please <bpt id="p1">[</bpt>file a new issue in the CoreFX repository<ept id="p1">](https://github.com/dotnet/corefx/issues/new)</ept>.</source>
          <target state="translated">如果认为丢失了某些内容，请<bpt id="p1">[</bpt>在 CoreFX 存储库中提出新的问题<ept id="p1">](https://github.com/dotnet/corefx/issues/new)</ept>。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>A need to use a platform that doesn’t support .NET Core</source>
          <target state="translated">需要使用不支持 .NET Core 的平台</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Some Microsoft or third-party platforms don’t support .NET Core.</source>
          <target state="translated">某些 Microsoft 或第三方平台不支持 .NET Core。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>For example, some Azure services such as Service Fabric Stateful Reliable Services and Service Fabric Reliable Actors require .NET Framework.</source>
          <target state="translated">例如，某些 Azure 服务（如 Service Fabric Stateful Reliable Services 和 Service Fabric Reliable Actors）需要 .NET Framework。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Some other services provide an SDK not yet available for consumption on .NET Core.</source>
          <target state="translated">某些其他服务提供尚不可用于 .NET Core 的 SDK。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>This is a transitional circumstance, as all of Azure services use .NET Core.</source>
          <target state="translated">这只是过渡情况，因为所有 Azure 服务都将使用 .NET Core。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>In the meantime, you can always use the equivalent REST API instead of the client SDK.</source>
          <target state="translated">在此期间，可用始终使用等效的 REST API 取代客户端 SDK。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Further resources</source>
          <target state="translated">其他资源</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>.NET Core Guide<ept id="p1">](../core/index.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>.NET Core 指南<ept id="p1">](../core/index.md)</ept></target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Porting from .NET Framework to .NET Core<ept id="p1">](../core/porting/index.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>从 .NET Framework 移植到 .NET Core<ept id="p1">](../core/porting/index.md)</ept></target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>.NET Framework on Docker Guide<ept id="p1">](../framework/index.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Docker 上的 .NET Framework 指南<ept id="p1">](../framework/index.md)</ept></target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>.NET Components Overview<ept id="p1">](components.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>.NET 组件概述<ept id="p1">](components.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>