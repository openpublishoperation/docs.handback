<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-6a73dd2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1fc1edd64c330fe579f389750432665ed982976e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\base-types\regular-expressions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p2</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bb8cd979c415dc48a6370770f1440df5f7f1a5bc</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8b1fef4c3b2d180d298bf0053e7b1429da798284</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Regular expressions in .NET</source>
          <target state="translated">.NET 中的正则表达式</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Regular expressions in .NET</source>
          <target state="translated">.NET 中的正则表达式</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET、.NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Regular expressions in .NET</source>
          <target state="translated">.NET 中的正则表达式</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Regular expressions provide a powerful, flexible, and efficient method for processing text.</source>
          <target state="translated">正则表达式提供了功能强大、灵活而又高效的方法来处理文本。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The extensive pattern-matching notation of regular expressions enables you to quickly parse large amounts of text to find specific character patterns; to validate text to ensure that it matches a predefined pattern (such as an e-mail address); to extract, edit, replace, or delete text substrings; and to add the extracted strings to a collection in order to generate a report.</source>
          <target state="translated">正则表达式的全面模式匹配表示法使你可以快速分析大量文本以找到特定的字符模式；验证文本以确保它匹配预定义的模式（如电子邮件地址）；提取、编辑、替换或删除文本子字符串；将提取的字符串添加到集合以生成报告。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For many applications that deal with strings or that parse large blocks of text, regular expressions are an indispensable tool.</source>
          <target state="translated">对于处理字符串或分析大文本块的许多应用程序而言，正则表达式是不可缺少的工具。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>How Regular Expressions Work</source>
          <target state="translated">正则表达式的工作方式</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The centerpiece of text processing with regular expressions is the regular expression engine, which is represented by the <bpt id="p1">[</bpt>System.Text.RegularExpressions.Regex<ept id="p1">](xref:System.Text.RegularExpressions.Regex)</ept> object in .NET.</source>
          <target state="translated">使用正则表达式处理文本的中心构件是正则表达式引擎，该引擎在 .NET 中由 <bpt id="p1">[</bpt>System.Text.RegularExpressions.Regex<ept id="p1">](xref:System.Text.RegularExpressions.Regex)</ept> 对象表示。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>At a minimum, processing text using regular expressions requires that the regular expression engine be provided with the following two items of information:</source>
          <target state="translated">使用正则表达式处理文本至少要求向该正则表达式引擎提供以下两方面的信息：</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The regular expression pattern to identify in the text.</source>
          <target state="translated">要在文本中标识的正则表达式模式。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In .NET, regular expression patterns are defined by a special syntax or language, which is compatible with Perl 5 regular expressions and adds some additional features such as right-to-left matching.</source>
          <target state="translated">在 .NET 中，正则表达式模式用特殊的语法或语言定义，该语法或语言与 Perl 5 正则表达式兼容，并添加了一些其他功能，例如从右到左匹配。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Regular Expression Language - Quick Reference<ept id="p1">](quick-ref.md)</ept>.</source>
          <target state="translated">有关更多信息，请参见<bpt id="p1">[</bpt>正则表达式语言 - 快速参考<ept id="p1">](quick-ref.md)</ept>。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The text to parse for the regular expression pattern.</source>
          <target state="translated">要为正则表达式模式分析的文本。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The methods of the <bpt id="p1">[</bpt>Regex<ept id="p1">](xref:System.Text.RegularExpressions.Regex)</ept> class let you perform the following operations:</source>
          <target state="translated"><bpt id="p1">[</bpt>Regex<ept id="p1">](xref:System.Text.RegularExpressions.Regex)</ept> 类的方法使你可以执行以下操作：</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Determine whether the regular expression pattern occurs in the input text by calling the <bpt id="p1">[</bpt>Regex.IsMatch<ept id="p1">](xref:System.Text.RegularExpressions.Regex.IsMatch(System.String))</ept> method.</source>
          <target state="translated">通过调用 <bpt id="p1">[</bpt>Regex.IsMatch<ept id="p1">](xref:System.Text.RegularExpressions.Regex.IsMatch(System.String))</ept> 方法确定输入文本中是否具有正则表达式模式。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For an example that uses the <bpt id="p1">[</bpt>IsMatch<ept id="p1">](xref:System.Text.RegularExpressions.Regex.IsMatch(System.String))</ept> method for validating text, see <bpt id="p2">[</bpt>How to: Verify that Strings Are in Valid Email Format<ept id="p2">](verify-format.md)</ept>.</source>
          <target state="translated">有关使用 <bpt id="p1">[</bpt>IsMatch<ept id="p1">](xref:System.Text.RegularExpressions.Regex.IsMatch(System.String))</ept> 方法验证文本的示例，请参见<bpt id="p2">[</bpt>如何：确认字符串是有效的电子邮件格式<ept id="p2">](verify-format.md)</ept>。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Retrieve one or all occurrences of text that matches the regular expression pattern by calling the <bpt id="p1">[</bpt>Regex.Match<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Match(System.String))</ept> or <bpt id="p2">[</bpt>Regex.Matches<ept id="p2">](xref:System.Text.RegularExpressions.Regex.Matches(System.String))</ept> method.</source>
          <target state="translated">通过调用 <bpt id="p1">[</bpt>Regex.Match<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Match(System.String))</ept> 或 <bpt id="p2">[</bpt>Regex.Matches<ept id="p2">](xref:System.Text.RegularExpressions.Regex.Matches(System.String))</ept> 方法检索匹配正则表达式模式的一个或所有文本匹配项。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The former method returns a <bpt id="p1">[</bpt>System.Text.RegularExpressions.Match<ept id="p1">](xref:System.Text.RegularExpressions.Match)</ept> object that provides information about the matching text.</source>
          <target state="translated">第一个方法返回提供有关匹配文本的信息的 <bpt id="p1">[</bpt>System.Text.RegularExpressions.Match<ept id="p1">](xref:System.Text.RegularExpressions.Match)</ept> 对象。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The latter returns a <bpt id="p1">[</bpt>MatchCollection<ept id="p1">](xref:System.Text.RegularExpressions.MatchCollection)</ept> object that contains one <bpt id="p2">[</bpt>System.Text.RegularExpressions.Match<ept id="p2">](xref:System.Text.RegularExpressions.Match)</ept> object for each match found in the parsed text.</source>
          <target state="translated">后者返回 <bpt id="p1">[</bpt>MatchCollection<ept id="p1">](xref:System.Text.RegularExpressions.MatchCollection)</ept> 对象，其中针对所分析的文本中找到的每个匹配项包含一个 <bpt id="p2">[</bpt>System.Text.RegularExpressions.Match<ept id="p2">](xref:System.Text.RegularExpressions.Match)</ept> 对象。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Replace text that matches the regular expression pattern by calling the <bpt id="p1">[</bpt>Regex.Replace<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Replace(System.String,System.String))</ept> method.</source>
          <target state="translated">通过调用 <bpt id="p1">[</bpt>Regex.Replace<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Replace(System.String,System.String))</ept> 方法替换匹配正则表达式模式的文本。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For examples that use the <bpt id="p1">[</bpt>Replace<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Replace(System.String,System.String))</ept> method to change date formats and remove invalid characters from a string, see <bpt id="p2">[</bpt>How to: Strip Invalid Characters from a String<ept id="p2">](strip-characters.md)</ept> and <bpt id="p3">[</bpt>Regular Expression Example: Changing Date Formats<ept id="p3">](changing-formats.md)</ept>.</source>
          <target state="translated">有关使用 <bpt id="p1">[</bpt>Replace<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Replace(System.String,System.String))</ept> 方法更改日期格式和删除字符串中的无效字符的示例，请参见<bpt id="p2">[</bpt>如何：从字符串中剥离无效字符<ept id="p2">](strip-characters.md)</ept>和<bpt id="p3">[</bpt>正则表达式示例：更改日期格式<ept id="p3">](changing-formats.md)</ept>。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For an overview of the regular expression object model, see <bpt id="p1">[</bpt>The Regular Expression Object Model<ept id="p1">](object-model.md)</ept>.</source>
          <target state="translated">有关正则表达式对象模型的概述，请参见<bpt id="p1">[</bpt>正则表达式对象模型<ept id="p1">](object-model.md)</ept>。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For more information about the regular expression language, see <bpt id="p1">[</bpt>Regular Expression Language - Quick Reference<ept id="p1">](quick-ref.md)</ept>.</source>
          <target state="translated">有关正则表达式语言的更多信息，请参见<bpt id="p1">[</bpt>正则表达式语言 - 快速参考<ept id="p1">](quick-ref.md)</ept>。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Regular Expression Examples</source>
          <target state="translated">正则表达式示例</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>String<ept id="p1">](xref:System.String)</ept> class includes a number of string search and replacement methods that you can use when you want to locate literal strings in a larger string.</source>
          <target state="translated"><bpt id="p1">[</bpt>String<ept id="p1">](xref:System.String)</ept> 类包括许多字符串搜索和替换方法，当你要在较大字符串中定位文本字符串时，可以使用这些方法。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Regular expressions are most useful either when you want to locate one of several substrings in a larger string, or when you want to identify patterns in a string, as the following examples illustrate.</source>
          <target state="translated">当你希望在较大字符串中定位若干子字符串之一时，或者当你希望在字符串中标识模式时，正则表达式最有用，如以下示例所示。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Example 1: Replacing Substrings</source>
          <target state="translated">示例 1：替换子字符串</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Assume that a mailing list contains names that sometimes include a title (Mr., Mrs., Miss, or Ms.) along with a first and last name.</source>
          <target state="translated">假设一个邮件列表包含一些姓名，这些姓名有时包括称谓（Mr.、Mrs.、Miss 或 Ms.）以及姓氏和名字。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If you do not want to include the titles when you generate envelope labels from the list, you can use a regular expression to remove the titles, as the following example illustrates.</source>
          <target state="translated">如果你从列表中生成信封标签时不希望包括称谓，则可以使用正则表达式移除称谓，如以下示例所示。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The regular expression pattern <ph id="ph1">`(Mr\.? |Mrs\.? |Miss |Ms\.? )`</ph> matches any occurrence of "Mr ", "Mr. ", "Mrs ", "Mrs. ", "Miss ", "Ms or "Ms. ".</source>
          <target state="translated">正则表达式模式 <ph id="ph1">`(Mr\.? |Mrs\.? |Miss |Ms\.? )`</ph> 可匹配任何“Mr”、“Mr.”、“Mrs”、“Mrs.”、“Miss”、“Ms”或“Ms.”。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The call to the <bpt id="p1">[</bpt>Regex.Replace<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Replace(System.String,System.String))</ept> method replaces the matched string with <bpt id="p2">[</bpt>String.Empty<ept id="p2">](xref:System.String.Empty)</ept>; in other words, it removes it from the original string.</source>
          <target state="translated">对 <bpt id="p1">[</bpt>Regex.Replace<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Replace(System.String,System.String))</ept> 方法的调用会将匹配的字符串替换为 <bpt id="p2">[</bpt>String.Empty<ept id="p2">](xref:System.String.Empty)</ept>；换句话说，它从原始字符串中将其移除。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Example 2: Identifying Duplicated Words</source>
          <target state="translated">示例 2：标识重复的单词</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Accidentally duplicating words is a common error that writers make.</source>
          <target state="translated">意外地重复单词是编写器常犯的错误。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>A regular expression can be used to identify duplicated words, as the following example shows.</source>
          <target state="translated">可以使用正则表达式标识重复的单词，如以下示例所示。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The regular expression pattern <ph id="ph1">`\b(\w+?)\s\1\b`</ph> can be interpreted as follows:</source>
          <target state="translated">正则表达式模式 <ph id="ph1">`\b(\w+?)\s\1\b`</ph> 的解释如下:</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Syntax</source>
          <target state="translated">语法</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Meaning</source>
          <target state="translated">含义</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Start at a word boundary.</source>
          <target state="translated">在单词边界处开始。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Match one or more word characters, but as few characters as possible.</source>
          <target state="translated">匹配一个或多个单词字符，但字符要尽可能的少。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Together, they form a group that can be referred to as <ph id="ph1">`\1`</ph>.</source>
          <target state="translated">它们一起构成可称为 <ph id="ph1">`\1`</ph> 的组。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Match a white-space character.</source>
          <target state="translated">与空白字符匹配。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Match the substring that is equal to the group named <ph id="ph1">`\1`</ph>.</source>
          <target state="translated">与等于名为 <ph id="ph1">`\1`</ph> 的组的子字符串匹配。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Match a word boundary.</source>
          <target state="translated">与字边界匹配。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Regex.Matches<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions))</ept> method is called with regular expression options set to <bpt id="p2">[</bpt>RegexOptions.IgnoreCase<ept id="p2">](xref:System.Text.RegularExpressions.RegexOptions.IgnoreCase)</ept>.</source>
          <target state="translated">通过将正则表达式选项设置为 <bpt id="p2">[</bpt>RegexOptions.IgnoreCase<ept id="p2">](xref:System.Text.RegularExpressions.RegexOptions.IgnoreCase)</ept>，调用 <bpt id="p1">[</bpt>Regex.Matches<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions))</ept> 方法。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Therefore, the match operation is case-insensitive, and the example identifies the substring "This this" as a duplication.</source>
          <target state="translated">因此，匹配操作不区分大小写，此示例将子字符串“This this”标识为重复。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Note that the input string includes the substring "this?</source>
          <target state="translated">请注意，输入字符串包括子字符串“this?</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>This".</source>
          <target state="translated">This”。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>However, because of the intervening punctuation mark, it is not identified as a duplication.</source>
          <target state="translated">但是，由于插入标点符号，该子字符串不被标识为重复。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Example 3: Dynamically Building a Culture-Sensitive Regular Expression</source>
          <target state="translated">示例 3：动态生成区分区域性的正则表达式</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The following example illustrates the power of regular expressions combined with the flexibility offered by .NET's globalization features.</source>
          <target state="translated">下面的示例演示如何将正则表达式的功能与 .NET 的全球化功能所提供的灵活性结合在一起。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>It uses the <bpt id="p1">[</bpt>NumberFormatInfo<ept id="p1">](xref:System.Globalization.NumberFormatInfo)</ept> object to determine the format of currency values in the system's current culture.</source>
          <target state="translated">它使用 <bpt id="p1">[</bpt>NumberFormatInfo<ept id="p1">](xref:System.Globalization.NumberFormatInfo)</ept> 对象确定系统的当前区域性设置中货币值的格式。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>It then uses that information to dynamically construct a regular expression that extracts currency values from the text.</source>
          <target state="translated">然后使用该信息动态构造从文本提取货币值的正则表达式。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For each match, it extracts the subgroup that contains the numeric string only, converts it to a <bpt id="p1">[</bpt>Decimal<ept id="p1">](xref:System.Decimal)</ept> value, and calculates a running total.</source>
          <target state="translated">对于每个匹配，它提取仅包含数字字符串的子组，将其转换为 <bpt id="p1">[</bpt>Decimal<ept id="p1">](xref:System.Decimal)</ept> 值，然后计算累计值。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>On a computer whose current culture is English - United States (en-US), the example dynamically builds the regular expression <ph id="ph1">`\$\s*[-+]?([0-9]{0,3}(,[0-9]{3})*(\.[0-9]+)?)`</ph>.</source>
          <target state="translated">在当前区域性设置为“英语 - 美国”(en-US) 的计算机上，该示例动态生成正则表达式 <ph id="ph1">`\$\s*[-+]?([0-9]{0,3}(,[0-9]{3})*(\.[0-9]+)?)`</ph>。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>This regular expression pattern can be interpreted as follows:</source>
          <target state="translated">此正则表达式模式可以按以下方式解释：</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Syntax</source>
          <target state="translated">语法</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Meaning</source>
          <target state="translated">含义</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Look for a single occurrence of the dollar symbol ($) in the input string.</source>
          <target state="translated">在输入字符串中查找美元符号 ($) 的一个匹配项。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The regular expression pattern string includes a backslash to indicate that the dollar symbol is to be interpreted literally rather than as a regular expression anchor.</source>
          <target state="translated">正则表达式模式字符串包含一个反斜杠来指示按字面解释美元符号而非将其作为正则表达式定位点。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>(The $ symbol alone would indicate that the regular expression engine should try to begin its match at the end of a string.) To ensure that the current culture's currency symbol is not misinterpreted as a regular expression symbol, the example calls the <bpt id="p1">[</bpt>Escape<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Escape(System.String))</ept> method to escape the character.</source>
          <target state="translated">（单独的 $ 符号将指示正则表达式引擎应尝试在字符串的末尾开始匹配。）为了确保当前区域性的货币符号不错误地解释为正则表达式符号，该示例调用 <bpt id="p1">[</bpt>Escape<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Escape(System.String))</ept> 方法来对字符进行转义。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Look for zero or more occurrences of a white-space character.</source>
          <target state="translated">查找空白字符的零个或多个匹配项。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Look for zero or one occurrence of either a positive sign or a negative sign.</source>
          <target state="translated">查找正号或负号的零个或一个匹配项。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The outer parentheses around this expression define it as a capturing group or a subexpression.</source>
          <target state="translated">括起此表达式的外部括号将表达式定义为捕获组或子表达式。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>If a match is found, information about this part of the matching string can be retrieved from the second <bpt id="p1">[</bpt>Group<ept id="p1">](xref:System.Text.RegularExpressions.Group)</ept> object in the <bpt id="p2">[</bpt>GroupCollection<ept id="p2">](xref:System.Text.RegularExpressions.GroupCollection)</ept> object returned by the <bpt id="p3">[</bpt>Match.Groups<ept id="p3">](xref:System.Text.RegularExpressions.Match.Groups)</ept> property.</source>
          <target state="translated">如果找到匹配项，则有关匹配字符串的此部分的信息可以从第二个 <bpt id="p1">[</bpt>Group<ept id="p1">](xref:System.Text.RegularExpressions.Group)</ept> 对象中检索（该对象位于 <bpt id="p3">[</bpt>Match.Groups<ept id="p3">](xref:System.Text.RegularExpressions.Match.Groups)</ept> 属性所返回的 <bpt id="p2">[</bpt>GroupCollection<ept id="p2">](xref:System.Text.RegularExpressions.GroupCollection)</ept> 对象中）。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>(The first element in the collection represents the entire match.)</source>
          <target state="translated">（集合中的第一个元素表示整个匹配。）</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Look for zero to three occurrences of the decimal digits 0 through 9.</source>
          <target state="translated">查找十进制数字 0 到 9 的零到三个匹配项。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Look for zero or more occurrences of a group separator followed by three decimal digits.</source>
          <target state="translated">查找后跟三个十进制数字的组分隔符的零个或多个匹配项。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Look for a single occurrence of the decimal separator.</source>
          <target state="translated">查找小数分隔符的一个匹配项。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Look for one or more decimal digits.</source>
          <target state="translated">查找一个或多个十进制数字。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Look for zero or one occurrence of the decimal separator followed by at least one decimal digit.</source>
          <target state="translated">查找后跟至少一个十进制数字的小数分隔符的零个或一个匹配项。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Related Topics</source>
          <target state="translated">相关主题</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Title</source>
          <target state="translated">标题</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">描述</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Regular expression language - quick reference<ept id="p1">](quick-ref.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>正则表达式语言 - 快速参考<ept id="p1">](quick-ref.md)</ept></target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Provides information on the set of characters, operators, and constructs that you can use to define regular expressions.</source>
          <target state="translated">提供有关可用来定义正则表达式的字符集、运算符和构造的信息。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>The regular expression object model<ept id="p1">](object-model.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>正则表达式对象模型<ept id="p1">](object-model.md)</ept></target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Provides information and code examples that illustrate how to use the regular expression classes.</source>
          <target state="translated">提供演示如何使用正则表达式类的信息和代码示例。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Details of regular expression behavior<ept id="p1">](regex-behavior.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>正则表达式行为的详细信息<ept id="p1">](regex-behavior.md)</ept></target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Provides information about the capabilities and behavior of .NETregular expressions.</source>
          <target state="translated">提供有关 .NET 正则表达式的功能和行为的信息。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Regular expression examples<ept id="p1">](regex-examples.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>正则表达式示例<ept id="p1">](regex-examples.md)</ept></target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Provides code examples that illustrate typical uses of regular expressions.</source>
          <target state="translated">提供演示正则表达式的典型用法的代码示例。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Reference</source>
          <target state="translated">参考</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.Text.RegularExpressions<ept id="p1">](xref:System.Text.RegularExpressions)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>System.Text.RegularExpressions<ept id="p1">](xref:System.Text.RegularExpressions)</ept></target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.Text.RegularExpressions.Regex<ept id="p1">](xref:System.Text.RegularExpressions.Regex)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>System.Text.RegularExpressions.Regex<ept id="p1">](xref:System.Text.RegularExpressions.Regex)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>