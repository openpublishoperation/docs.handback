<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-eac019f" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">51655742b8975c84eae3f58c4ef0f7381a0bed6b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\garbagecollection\using-objects.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p2</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1161936b989bf247b72dd8b1cac32b7ae1e5b7c3</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f79f29ab662e289abd0023cf979e39d9988af6c0</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Using objects that implement IDisposable</source>
          <target state="translated">使用实现 IDisposable 的对象</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Using objects that implement IDisposable</source>
          <target state="translated">使用实现 IDisposable 的对象</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Using objects that implement IDisposable</source>
          <target state="translated">使用实现 IDisposable 的对象</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The common language runtime's garbage collector reclaims the memory used by unmanaged objects, but types that use unmanaged resources implement the <bpt id="p1">[</bpt>IDisposable<ept id="p1">](xref:System.IDisposable)</ept> interface to allow this unmanaged memory to be reclaimed.</source>
          <target state="translated">公共语言运行时的垃圾回收器将回收非托管对象使用的内存，而使用非托管资源的类型将实现 <bpt id="p1">[</bpt>IDisposable<ept id="p1">](xref:System.IDisposable)</ept> 接口以允许回收此非托管内存。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>When you finish using an object that implements <bpt id="p1">[</bpt>IDisposable<ept id="p1">](xref:System.IDisposable)</ept>, you should call the object's <bpt id="p2">[</bpt>IDisposable.Dispose<ept id="p2">](xref:System.IDisposable.Dispose)</ept> implementation.</source>
          <target state="translated">在使用完实现 <bpt id="p1">[</bpt>IDisposable<ept id="p1">](xref:System.IDisposable)</ept> 的对象后，应调用该对象的 <bpt id="p2">[</bpt>IDisposable.Dispose<ept id="p2">](xref:System.IDisposable.Dispose)</ept> 实现。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You can do this in one of two ways:</source>
          <target state="translated">可以通过两种方法执行此操作：</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>With the C# <ph id="ph1">`using`</ph> statement or the Visual Basic <ph id="ph2">`Using`</ph> statement.</source>
          <target state="translated">使用 C# <ph id="ph1">`using`</ph> 语句或 Visual Basic <ph id="ph2">`Using`</ph> 语句。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>By implementing a <ph id="ph1">`try/finally`</ph> block.</source>
          <target state="translated">实现 <ph id="ph1">`try/finally`</ph> 块。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The using statement</source>
          <target state="translated">using 语句</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`using`</ph> statement in C# and the <ph id="ph2">`Using`</ph> statement in Visual Basic simplify the code that you must write to create and clean up an object.</source>
          <target state="translated">C# 中的 <ph id="ph1">`using`</ph> 语句和 Visual Basic 中的 <ph id="ph2">`Using`</ph> 语句可以简化创建和清理对象而必须编写的代码。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`using`</ph> statement obtains one or more resources, executes the statements that you specify, and automatically disposes of the object.</source>
          <target state="translated"><ph id="ph1">`using`</ph> 语句获取一个或多个资源，执行指定的语句，并自动处置对象。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>However, the <ph id="ph1">`using`</ph> statement is useful only for objects that are used within the scope of the method in which they are constructed.</source>
          <target state="translated">但是，<ph id="ph1">`using`</ph> 语句仅对在用于构造对象的方法的范围内使用的对象有用。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The following example uses the <ph id="ph1">`using`</ph> statement to create and release a <bpt id="p1">[</bpt>System.IO.StreamReader<ept id="p1">](xref:System.IO.StreamReader)</ept> object.</source>
          <target state="translated">下面的示例使用 <ph id="ph1">`using`</ph> 语句创建并发布 <bpt id="p1">[</bpt>System.IO.StreamReader<ept id="p1">](xref:System.IO.StreamReader)</ept> 对象。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Note that although the <bpt id="p1">[</bpt>StreamReader<ept id="p1">](xref:System.IO.StreamReader)</ept> class implements the <bpt id="p2">[</bpt>IDisposable<ept id="p2">](xref:System.IDisposable)</ept> interface, which indicates that it uses an unmanaged resource, the example doesn't explicitly call the <bpt id="p3">[</bpt>StreamReader.Dispose<ept id="p3">](xref:System.IO.StreamReader.Dispose(System.Boolean))</ept> method.</source>
          <target state="translated">请注意，虽然 <bpt id="p1">[</bpt>StreamReader<ept id="p1">](xref:System.IO.StreamReader)</ept> 类实现 <bpt id="p2">[</bpt>IDisposable<ept id="p2">](xref:System.IDisposable)</ept> 接口（这指示使用非托管资源），但本示例并未显式调用 <bpt id="p3">[</bpt>StreamReader.Dispose<ept id="p3">](xref:System.IO.StreamReader.Dispose(System.Boolean))</ept> 方法。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>When the C# or Visual Basic compiler encounters the <ph id="ph1">`using`</ph> statement, it emits intermediate language (IL) that is equivalent to the following code that explicitly contains a <ph id="ph2">`try/finally`</ph> block.</source>
          <target state="translated">当 C# 或 Visual Basic 编译器遇到 <ph id="ph1">`using`</ph> 语句时，它会发出与以下显式包含 <ph id="ph2">`try/finally`</ph> 块的代码等效的中间语言 (IL)。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The C# <ph id="ph1">`using`</ph> statement also allows you to acquire multiple resources in a single statement, which is internally equivalent to nested using statements.</source>
          <target state="translated">使用 C# 的 <ph id="ph1">`using`</ph> 语句，也可以在单个语句（该语句在内部等效于嵌套的 using 语句）中获取多个资源。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The following example instantiates two <bpt id="p1">[</bpt>StreamReader<ept id="p1">](xref:System.IO.StreamReader)</ept> objects to read the contents of two different files.</source>
          <target state="translated">下面的示例实例化两个 <bpt id="p1">[</bpt>StreamReader<ept id="p1">](xref:System.IO.StreamReader)</ept> 对象以读取两个不同文件的内容。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Try/finally block</source>
          <target state="translated">Try/finally 块</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Instead of wrapping a <ph id="ph1">`try/finally`</ph> block in a <ph id="ph2">`using`</ph> statement, you may choose to implement the <ph id="ph3">`try/finally`</ph> block directly.</source>
          <target state="translated">可以选择直接实现 <ph id="ph3">`try/finally`</ph> 块，而不是将 <ph id="ph1">`try/finally`</ph> 块包装在 <ph id="ph2">`using`</ph> 语句中。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This may be your personal coding style, or you might want to do this for one of the following reasons:</source>
          <target state="translated">这可以是私有编码样式，或者你可能出于下列原因之一需要这样做：</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>To include a <ph id="ph1">`catch`</ph> block to handle any exceptions thrown in the <ph id="ph2">`try`</ph> block.</source>
          <target state="translated">包含 <ph id="ph1">`catch`</ph> 块可处理 <ph id="ph2">`try`</ph> 块中引发的任何异常。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Otherwise, any exceptions thrown by the <ph id="ph1">`using`</ph> statement are unhandled, as are any exceptions thrown within the <ph id="ph2">`using`</ph> block if a <ph id="ph3">`try/catch`</ph> block isn't present.</source>
          <target state="translated">否则，不会处理 <ph id="ph1">`using`</ph> 语句引发的任何异常，<ph id="ph2">`using`</ph> 块中引发的任何异常也是如此，前提是 <ph id="ph3">`try/catch`</ph> 块不存在。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>To instantiate an object that implements <bpt id="p1">[</bpt>IDisposable<ept id="p1">](xref:System.IDisposable)</ept> whose scope is not local to the block within which it is declared.</source>
          <target state="translated">实例化实现 <bpt id="p1">[</bpt>IDisposable<ept id="p1">](xref:System.IDisposable)</ept>（其范围对于声明它的块是非本地的）的对象。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The following example is similar to the previous example, except that it uses a <ph id="ph1">`try/catch/finally`</ph> block to instantiate, use, and dispose of a <bpt id="p1">[</bpt>StreamReader<ept id="p1">](xref:System.IO.StreamReader)</ept> object, and to handle any exceptions thrown by the <bpt id="p2">[</bpt>StreamReader<ept id="p2">](xref:System.IO.StreamReader)</ept> constructor and its <bpt id="p3">[</bpt>ReadToEnd<ept id="p3">](xref:System.IO.StreamReader.ReadToEnd)</ept> method.</source>
          <target state="translated">下面的示例与上一个示例类似，只不过该示例使用 <ph id="ph1">`try/catch/finally`</ph> 块实例化、使用和处理 <bpt id="p1">[</bpt>StreamReader<ept id="p1">](xref:System.IO.StreamReader)</ept> 对象，同时处理由 <bpt id="p2">[</bpt>StreamReader<ept id="p2">](xref:System.IO.StreamReader)</ept> 构造函数及其 <bpt id="p3">[</bpt>ReadToEnd<ept id="p3">](xref:System.IO.StreamReader.ReadToEnd)</ept> 方法引发的任何异常。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Note that the code in the <ph id="ph1">`finally`</ph> block checks that the object that implements <bpt id="p1">[</bpt>IDisposable<ept id="p1">](xref:System.IDisposable)</ept> isn't <ph id="ph2">`null`</ph> before it calls the <bpt id="p2">[</bpt>Dispose<ept id="p2">](xref:System.IDisposable.Dispose)</ept> method.</source>
          <target state="translated">请注意，<ph id="ph1">`finally`</ph> 块中的代码检查实现 <bpt id="p1">[</bpt>IDisposable<ept id="p1">](xref:System.IDisposable)</ept> 的对象在其调用 <bpt id="p2">[</bpt>Dispose<ept id="p2">](xref:System.IDisposable.Dispose)</ept> 方法之前不为 <ph id="ph2">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Failure to do this can result in a <bpt id="p1">[</bpt>NullReferenceException<ept id="p1">](xref:System.NullReferenceException)</ept> exception at run time.</source>
          <target state="translated">否则可能会导致运行时发生 <bpt id="p1">[</bpt>NullReferenceException<ept id="p1">](xref:System.NullReferenceException)</ept> 异常。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You can follow this basic pattern if you choose to implement or must implement a <ph id="ph1">`try/finally`</ph> block, because your programming language doesn't support a <ph id="ph2">`using`</ph> statement but does allow direct calls to the <bpt id="p1">[</bpt>Dispose<ept id="p1">](xref:System.IDisposable.Dispose)</ept> method.</source>
          <target state="translated">如果选择实现或必须实现 <ph id="ph1">`try/finally`</ph> 块，则可遵循此基本模式，因为编程语言不支持 <ph id="ph2">`using`</ph> 语句但允许直接调用 <bpt id="p1">[</bpt>Dispose<ept id="p1">](xref:System.IDisposable.Dispose)</ept> 方法。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">另请参阅</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Cleaning up unmanaged resources<ept id="p1">](unmanaged.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>清理未托管资源<ept id="p1">](unmanaged.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>