<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7fd7a2defabe2d03b658977cc0106e3bbf985202</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\linq\functional-programming-vs-imperative-programming.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e5770038fa361658af832cff09006d1185be7625</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">baced08be04c396bf5de15960c97b8b5f5e24b27</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Functional Programming vs. Imperative Programming (Visual Basic) | Microsoft Docs</source>
          <target state="translated">函数编程与命令式编程 (Visual Basic 中) |Microsoft 文档</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Functional Programming vs. Imperative Programming (Visual Basic)</source>
          <target state="translated">函数编程与命令式编程 (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic compares and contrasts functional programming with more traditional imperative (procedural) programming.</source>
          <target state="translated">本主题对函数编程和更传统的命令性（过程性）编程进行比较。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Functional Programming vs. Imperative Programming</source>
          <target state="translated">函数编程与命令式编程</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>functional programming<ept id="p1">*</ept> paradigm was explicitly created to support a pure functional approach to problem solving.</source>
          <target state="translated"><bpt id="p1">*</bpt>函数式编程<ept id="p1">*</ept>范例，特此创建了以支持使用纯函数方法解决问题。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Functional programming is a form of <bpt id="p1">*</bpt>declarative programming<ept id="p1">*</ept>.</source>
          <target state="translated">函数编程是一种形式的<bpt id="p1">*</bpt>声明性编程<ept id="p1">*</ept>。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>In contrast, most mainstream languages, including object-oriented programming (OOP) languages such as C#, Visual Basic, C++, and Java, were designed to primarily support <bpt id="p1">*</bpt>imperative<ept id="p1">*</ept> (procedural) programming.</source>
          <target state="translated">与此相反，大多数主流语言，包括面向对象编程 （OOP) 语言如 C#、 Visual Basic、 c + + 和 Java 中，都能够在主要支持<bpt id="p1">*</bpt>命令性<ept id="p1">*</ept>（过程） 编程。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>With an imperative approach, a developer writes code that describes in exacting detail the steps that the computer must take to accomplish the goal.</source>
          <target state="translated">使用命令性方法时，开发人员编写的代码应严格细致地说明计算机为完成目标而必须执行的步骤。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This is sometimes referred to as <bpt id="p1">*</bpt>algorithmic<ept id="p1">*</ept> programming.</source>
          <target state="translated">这有时称为<bpt id="p1">*</bpt>算法<ept id="p1">*</ept>编程。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In contrast, a functional approach involves composing the problem as a set of functions to be executed.</source>
          <target state="translated">相比之下，函数方法涉及将问题编成一组要执行的函数。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You define carefully the input to each function, and what each function returns.</source>
          <target state="translated">您要仔细地定义每个函数的输入值和每个函数的返回值。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The following table describes some of the general differences between these two approaches.</source>
          <target state="translated">下表说明了这两种方法之间的一些总体差别。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Characteristic</source>
          <target state="translated">特征</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Imperative approach</source>
          <target state="translated">命令性方法</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Functional approach</source>
          <target state="translated">函数方法</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Programmer focus</source>
          <target state="translated">程序员关注点</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>How to perform tasks (algorithms) and how to track changes in state.</source>
          <target state="translated">如何执行任务（算法）和如何跟踪状态更改。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>What information is desired and what transformations are required.</source>
          <target state="translated">需要哪些信息和需要进行什么转换。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>State changes</source>
          <target state="translated">状态更改</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Important.</source>
          <target state="translated">重要。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Non-existent.</source>
          <target state="translated">不存在。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Order of execution</source>
          <target state="translated">执行顺序</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Important.</source>
          <target state="translated">重要。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Low importance.</source>
          <target state="translated">不太重要。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Primary flow control</source>
          <target state="translated">主要流控制</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Loops, conditionals, and function (method) calls.</source>
          <target state="translated">循环、条件和函数（方法）调用。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Function calls, including recursion.</source>
          <target state="translated">函数调用，包括递归。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Primary manipulation unit</source>
          <target state="translated">主要操作单元</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Instances of structures or classes.</source>
          <target state="translated">结构或类的实例。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Functions as first-class objects and data collections.</source>
          <target state="translated">作为第一类对象和数据集合的函。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Although most languages were designed to support a specific programming paradigm, many general languages are flexible enough to support multiple paradigms.</source>
          <target state="translated">虽然多数语言旨在支持特定编程范例，但许多通用语言具有很高的灵活性，能够支持多个范例。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For example, most languages that contain function pointers can be used to credibly support functional programming.</source>
          <target state="translated">例如，包含函数指针的多数语言都可用于可靠地支持函数编程。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Furthermore, Visual Basic includes explicit language extensions to support functional programming, including lambda expressions and type inference.</source>
          <target state="translated">此外，Visual Basic 包括显式语言扩展以支持函数编程，包括 lambda 表达式和类型推理。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>LINQ technology is a form of declarative, functional programming.</source>
          <target state="translated">LINQ 技术是一种声明性函数编程形式。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Functional Programming Using XSLT</source>
          <target state="translated">使用 XSLT 的函数编程</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Many XSLT developers are familiar with the pure functional approach.</source>
          <target state="translated">很多 XSLT 开发人员熟悉纯函数方法。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The most effective way to develop an XSLT style sheet is to treat each template as an isolated, composable transformation.</source>
          <target state="translated">开发 XSLT 样式表的最有效方式是将每个模板视为一个独立的、可组合的转换。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The order of execution is completely de-emphasized.</source>
          <target state="translated">执行顺序完全不重要。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>XSLT does not allow side effects (with the exception that escaping mechanisms for executing procedural code can introduce side effects that result in functional impurity).</source>
          <target state="translated">XSLT 不允许副作用（但用于执行过程代码的转义机制除外，它可能引入可导致功能不纯的副作用）。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>However, although XSLT is an effective tool, some of its characteristics are not optimal.</source>
          <target state="translated">不过，虽然 XSLT 是一个有效的工具，但其某些特性并不是最佳的。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For example, expressing programming constructs in XML makes code relatively verbose, and therefore difficult to maintain.</source>
          <target state="translated">例如，在 XML 中表示编程构造会使代码相对繁琐，因此难于维护。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Also, the heavy reliance on recursion for flow control can result in code that is hard to read.</source>
          <target state="translated">而且，流控制对递归的依赖性很强，因此会使代码的可读性较差。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For more information about XSLT, see <bpt id="p1">[</bpt>XSLT Transformations<ept id="p1">](http://msdn.microsoft.com/library/202f8820-224c-494f-b61e-cd127eac6e03)</ept>.</source>
          <target state="translated">有关 XSLT 的详细信息，请参阅<bpt id="p1">[</bpt>XSLT 转换<ept id="p1">](http://msdn.microsoft.com/library/202f8820-224c-494f-b61e-cd127eac6e03)</ept>。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>However, XSLT has proved the value of using a pure functional approach for transforming XML from one shape to another.</source>
          <target state="translated">但 XSLT 在使用纯函数方法将 XML 从一种形状转换为另一种形状方面确有其自身的价值。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Pure functional programming with LINQ to XML is similar in many ways to XSLT.</source>
          <target state="translated">使用 LINQ to XML 的纯函数编程在许多方面与 XSLT 类似。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>However, the programming constructs introduced by LINQ to XML and Visual Basic allow you to write pure functional transformations that are more readable and maintainable than XSLT.</source>
          <target state="translated">但是，linq to XML 和 Visual Basic 中引入的编程构造，可以编写更具可读性且比 XSLT 更易维护的纯函数转换。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Advantages of Pure Functions</source>
          <target state="translated">纯函数的优点</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The primary reason to implement functional transformations as pure functions is that pure functions are composable: that is, self-contained and stateless.</source>
          <target state="translated">以纯函数形式实现函数转换的主要原因是纯函数是可以组合的：即独立并且无状态。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>These characteristics bring a number of benefits, including the following:</source>
          <target state="translated">这些特性可带来很多好处，包括以下各项：</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Increased readability and maintainability.</source>
          <target state="translated">可读性和可维护性更高。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>This is because each function is designed to accomplish a specific task given its arguments.</source>
          <target state="translated">这是因为每个函数都设计为在给定参数的情况下完成特定任务。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The function does not rely on any external state.</source>
          <target state="translated">函数不依赖于任何外部状态。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Easier reiterative development.</source>
          <target state="translated">更易于反复开发。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Because the code is easier to refactor, changes to design are often easier to implement.</source>
          <target state="translated">因为代码更容易重构，因此对设计的更改通常更容易实现。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>For example, suppose you write a complicated transformation, and then realize that some code is repeated several times in the transformation.</source>
          <target state="translated">例如，假设您编写了一个复杂的转换，但随后发现某些代码在转换中重复多次。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>If you refactor through a pure method, you can call your pure method at will without worrying about side effects.</source>
          <target state="translated">如果您通过纯方法重构，则可以随意调用纯方法而不必担心会有什么副作用。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Easier testing and debugging.</source>
          <target state="translated">更易于测试和调试。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Because pure functions can more easily be tested in isolation, you can write test code that calls the pure function with typical values, valid edge cases, and invalid edge cases.</source>
          <target state="translated">由于纯函数更容易单独测试，因此您可以编写使用典型值、有效边缘情况和无效边缘情况调用纯函数的测试代码。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Transitioning for OOP Developers</source>
          <target state="translated">针对 OOP 开发人员的转换</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>In traditional object-oriented programming (OOP), most developers are accustomed to programming in the imperative/procedural style.</source>
          <target state="translated">在传统的面向对象编程 (OOP) 中，大多数开发人员都习惯于命令性/过程式编程。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>To switch to developing in a pure functional style, they have to make a transition in their thinking and their approach to development.</source>
          <target state="translated">若要切换到纯函数式开发，开发人员必须转变开发思路和方法。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>To solve problems, OOP developers design class hierarchies, focus on proper encapsulation, and think in terms of class contracts.</source>
          <target state="translated">为了解决问题，OOP 开发人员需要设计类层次结构，注意进行恰当的包装并按照类约定进行思考。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The behavior and state of object types are paramount, and language features, such as classes, interfaces, inheritance, and polymorphism, are provided to address these concerns.</source>
          <target state="translated">对象类型的行为和状态至为重要，并提供语言功能（如类、接口、继承和多态性）以解除这些问题。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>In contrast, functional programming approaches computational problems as an exercise in the evaluation of pure functional transformations of data collections.</source>
          <target state="translated">相比之下，函数编程将计算机的操作问题处理为数据集合的纯函数转换计算。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Functional programming avoids state and mutable data, and instead emphasizes the application of functions.</source>
          <target state="translated">函数编程可以避免使用状态和可变数据，并改为强调函数的应用。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Fortunately, Visual Basic doesn't require the full leap to functional programming, because it supports both imperative and functional programming approaches.</source>
          <target state="translated">幸运的是，Visual Basic 并不要求完全转变为函数编程，因为它支持命令性和功能性编程方法。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>A developer can choose which approach is most appropriate for a particular scenario.</source>
          <target state="translated">开发人员可以选择哪种方法最适合特定方案。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>In fact, programs often combine both approaches.</source>
          <target state="translated">实际上，程序通常组合使用这两种方法。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">另请参阅</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Introduction to Pure Functional Transformations (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/introduction-to-pure-functional-transformations.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>介绍纯函数转换 (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/introduction-to-pure-functional-transformations.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>XSLT Transformations<ept id="p1">](http://msdn.microsoft.com/library/202f8820-224c-494f-b61e-cd127eac6e03)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>XSLT 转换<ept id="p1">](http://msdn.microsoft.com/library/202f8820-224c-494f-b61e-cd127eac6e03)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Refactoring Into Pure Functions (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/refactoring-into-pure-functions.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>重构为纯函数 (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/refactoring-into-pure-functions.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>