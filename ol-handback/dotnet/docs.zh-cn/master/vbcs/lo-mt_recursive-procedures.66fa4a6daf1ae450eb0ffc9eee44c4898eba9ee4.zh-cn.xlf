<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9fc95cd5f7cfd5637f6282c6ef571eb81bac1816</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\procedures\recursive-procedures.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fe08d283738dba319fbbebb24b7abc69c04266ca</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5eebabfe97fe54a0d78f3b3ed4a8dafad0bbb24b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Recursive Procedures (Visual Basic) | Microsoft Docs</source>
          <target state="translated">递归过程 (Visual Basic 中) |Microsoft 文档</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Recursive Procedures (Visual Basic)</source>
          <target state="translated">递归过程 (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>recursive<ept id="p1">*</ept> procedure is one that calls itself.</source>
          <target state="translated">一个<bpt id="p1">*</bpt>递归<ept id="p1">*</ept>过程是指调用自身。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In general, this is not the most effective way to write <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> code.</source>
          <target state="translated">一般情况下，这不是最有效的方法来编写<ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>代码。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The following procedure uses recursion to calculate the factorial of its original argument.</source>
          <target state="translated">下面的过程使用递归来计算其原始参数的阶乘。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnProcedures#51<ept id="p2">](./codesnippet/VisualBasic/recursive-procedures_1.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnProcedures #&amp;51;<ept id="p2">](./codesnippet/VisualBasic/recursive-procedures_1.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Considerations with Recursive Procedures</source>
          <target state="translated">递归过程方面的注意事项</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Limiting Conditions<ept id="p1">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>限制条件<ept id="p1">**</ept>。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You must design a recursive procedure to test for at least one condition that can terminate the recursion, and you must also handle the case where no such condition is satisfied within a reasonable number of recursive calls.</source>
          <target state="translated">您必须在设计递归过程以测试可以终止此递归的至少一个条件和还必须处理任何此类条件均在合理数量的递归调用这种情况。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Without at least one condition that can be met without fail, your procedure runs a high risk of executing in an infinite loop.</source>
          <target state="translated">没有可以满足而不会出现的至少一个条件，您的过程运行高风险的在无限循环中执行。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Memory Usage<ept id="p1">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>内存使用量<ept id="p1">**</ept>。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Your application has a limited amount of space for local variables.</source>
          <target state="translated">将应用程序将有限的数量的空间用于本地变量。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Each time a procedure calls itself, it uses more of that space for additional copies of its local variables.</source>
          <target state="translated">过程调用其本身，每次都会占用更多空间的其他副本的本地变量。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If this process continues indefinitely, it eventually causes a &lt;xref:System.StackOverflowException&gt; error.</source>
          <target state="translated">如果此过程持续下去，最终会导致&lt;xref:System.StackOverflowException&gt;错误。&lt;/xref:System.StackOverflowException&gt;</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Efficiency<ept id="p1">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>效率<ept id="p1">**</ept>。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You can almost always substitute a loop for recursion.</source>
          <target state="translated">您几乎总是可以替换为递归循环。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>A loop does not have the overhead of passing arguments, initializing additional storage, and returning values.</source>
          <target state="translated">一个循环并没有初始化附加存储空间和返回值传递参数的系统开销。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Your performance can be much better without recursive calls.</source>
          <target state="translated">您的性能可以大幅提高递归调用。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Mutual Recursion<ept id="p1">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>相互递归<ept id="p1">**</ept>。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You might observe very poor performance, or even an infinite loop, if two procedures call each other.</source>
          <target state="translated">如果两个过程调用对方，可能会发现性能非常差或甚至产生无限循环。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Such a design presents the same problems as a single recursive procedure, but can be harder to detect and debug.</source>
          <target state="translated">此类设计提出一个递归过程中，与相同的问题，但很难检测和调试。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Calling with Parentheses<ept id="p1">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>调用时使用括号<ept id="p1">**</ept>。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>When a <ph id="ph1">`Function`</ph> procedure calls itself recursively, you must follow the procedure name with parentheses, even if there is no argument list.</source>
          <target state="translated">当<ph id="ph1">`Function`</ph>过程调用其自身以递归方式，您必须过程名后面加上括号，即使没有参数列表。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Otherwise, the function name is taken as representing the return value of the function.</source>
          <target state="translated">否则，执行的函数名称作为表示该函数的返回值。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Testing<ept id="p1">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>测试<ept id="p1">**</ept>。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If you write a recursive procedure, you should test it very carefully to make sure it always meets some limiting condition.</source>
          <target state="translated">如果您编写的递归过程，您应该测试它应非常小心以确保它总是能满足某些限制条件。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>You should also ensure that you cannot run out of memory due to having too many recursive calls.</source>
          <target state="translated">您还应确保您不能运行由于递归调用过多的内存不足。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">另请参阅</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.StackOverflowException&gt;</source>
          <target state="translated">&lt;xref:System.StackOverflowException&gt;&lt;/xref:System.StackOverflowException&gt;</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Procedures<ept id="p1">](./index.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>过程<ept id="p1">](./index.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Sub Procedures<ept id="p1">](./sub-procedures.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Sub 过程<ept id="p1">](./sub-procedures.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Function Procedures<ept id="p1">](./function-procedures.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Function 过程<ept id="p1">](./function-procedures.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Property Procedures<ept id="p1">](./property-procedures.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>属性过程<ept id="p1">](./property-procedures.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Operator Procedures<ept id="p1">](./operator-procedures.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>运算符过程<ept id="p1">](./operator-procedures.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Procedure Parameters and Arguments<ept id="p1">](./procedure-parameters-and-arguments.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>过程参数和变量<ept id="p1">](./procedure-parameters-and-arguments.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Procedure Overloading<ept id="p1">](./procedure-overloading.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>过程重载<ept id="p1">](./procedure-overloading.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Troubleshooting Procedures<ept id="p1">](./troubleshooting-procedures.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>故障排除过程<ept id="p1">](./troubleshooting-procedures.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Loop Structures<ept id="p1">](../../../../visual-basic/programming-guide/language-features/control-flow/loop-structures.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>循环结构<ept id="p1">](../../../../visual-basic/programming-guide/language-features/control-flow/loop-structures.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Troubleshooting Exceptions: System.StackOverflowException<ept id="p1">](http://msdn.microsoft.com/library/51b71217-c507-4f5b-bc35-0236180d7968)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>异常疑难解答：System.StackOverflowException<ept id="p1">](http://msdn.microsoft.com/library/51b71217-c507-4f5b-bc35-0236180d7968)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>