<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-47f9650" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">76ab06edfed3cb124ac79f0d5d0c3480c0a5f170</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\testing\index.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bc0ef59fbd363c7bd45967743cb84ee3a8342875</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3b47dc3ff3cdd5518151305efb058c50f3271eb6</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Unit Testing in .NET Core</source>
          <target state="translated">.NET Core 的單元測試</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Unit Testing in .NET Core</source>
          <target state="translated">.NET Core 的單元測試</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Unit Testing in .NET Core</source>
          <target state="translated">.NET Core 的單元測試</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>By <bpt id="p1">[</bpt>Steve Smith<ept id="p1">](http://ardalis.com)</ept> and <bpt id="p2">[</bpt>Bill Wagner<ept id="p2">](https://github.com/BillWagner)</ept></source>
          <target state="translated">作者 <bpt id="p1">[</bpt>Steve Smith<ept id="p1">](http://ardalis.com)</ept> 和 <bpt id="p2">[</bpt>Bill Wagner<ept id="p2">](https://github.com/BillWagner)</ept></target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>.NET Core has been designed with testability in mind, so that creating unit tests for your applications is easier than ever before.</source>
          <target state="translated">.NET Core 在設計時就已將可測試性納入考量，因此您可以更輕鬆地針對應用程式建立單元測試。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This article briefly introduces unit tests (and how they differ from other kinds of tests).</source>
          <target state="translated">這篇文章簡短介紹單元測試，以及它們和其他種類測試之間的差異。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Linked resources demonstrates how to add a test project to your solution and then run unit tests using either the command line or Visual Studio.</source>
          <target state="translated">連結的資源會示範如何將測試專案新增至您的解決方案，然後使用命令列或 Visual Studio 來執行單元測試。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Getting Started with Testing</source>
          <target state="translated">開始測試</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Having a suite of automated tests is one of the best ways to ensure a software application does what its authors intended it to do.</source>
          <target state="translated">最理想的方法是使用自動化的測試套件，以確保軟體應用程式按照作者想要的結果執行。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>There are many different kinds of tests for software applications, including integration tests, web tests, load tests, and many others.</source>
          <target state="translated">軟體應用程式測試的種類繁多，包括整合測試、Web 測試、負載測試等等。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>At the lowest level are unit tests, which test individual software components or methods.</source>
          <target state="translated">單元測試是其中最基層的測試，可用來測試個別的軟體元件或方法。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Unit tests should only test code within the developer’s control, and should not test infrastructure concerns, like databases, file systems, or network resources.</source>
          <target state="translated">單元測試應該只測試開發人員控制項內的程式碼，而不應針對基礎結構考量進行測試，例如資料庫、檔案系統或網路資源。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Unit tests may be written using <bpt id="p1">[</bpt>Test Driven Development (TDD)<ept id="p1">](http://deviq.com/test-driven-development/)</ept>, or they can be added to existing code to confirm its correctness.</source>
          <target state="translated">單元測試可能會使用<bpt id="p1">[</bpt>測試導向開發 (TDD)<ept id="p1">](http://deviq.com/test-driven-development/)</ept> 來進行寫入，或新增到現有的程式碼，以確認其正確性。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In either case, they should be small, well-named, and fast, since ideally you will want to be able to run hundreds of them before pushing your changes into the project’s shared code repository.</source>
          <target state="translated">不論何種情況，單元測試應該是小型、妥善具名且可快速完成，因為在將變更推送到專案的共用程式碼存放庫之前，您可能需要先執行數百次的單元測試。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Developers often struggle with coming up with good names for their test classes and methods.</source>
          <target state="translated">開發人員經常必須絞盡腦汁才能想出適合其測試類別和方法的名稱。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>As a starting point, the ASP.NET product team follows <bpt id="p1">[</bpt>these conventions<ept id="p1">](https://github.com/aspnet/Home/wiki/Engineering-guidelines#unit-tests-and-functional-tests)</ept>.</source>
          <target state="translated">因此，ASP.NET 產品團隊會遵循<bpt id="p1">[</bpt>這些慣例<ept id="p1">](https://github.com/aspnet/Home/wiki/Engineering-guidelines#unit-tests-and-functional-tests)</ept>以做為起點。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>When writing unit tests, be careful you don’t accidentally introduce dependencies on infrastructure.</source>
          <target state="translated">在撰寫單元測試時，務必小心不要在基礎結構中導入相依性。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>These tend to make tests slower and more brittle, and thus should be reserved for integration tests.</source>
          <target state="translated">這些相依性通常會讓測試速度更慢，而且更不可靠，因此應該將其保留到整合測試時進行。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You can avoid these hidden dependencies in your application code by following the <bpt id="p1">[</bpt>Explicit Dependencies Principle<ept id="p1">](http://deviq.com/explicit-dependencies-principle/)</ept> and using <bpt id="p2">[</bpt>Dependency Injection<ept id="p2">](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection)</ept> to request your dependencies from the framework.</source>
          <target state="translated">您可以遵循 <bpt id="p1">[</bpt>Explicit Dependencies Principle<ept id="p1">](http://deviq.com/explicit-dependencies-principle/)</ept> (明確相依性準則) 的內容，在應用程式程式碼中避免這些隱藏的相依性，並使用 <bpt id="p2">[</bpt>Dependency Injection<ept id="p2">](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection)</ept> (相依性插入) 來要求架構的相依性。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You can also keep your unit tests in a separate project from your integration tests, and ensure your unit test project doesn’t have references to or dependencies on infrastructure packages.</source>
          <target state="translated">您也可以將單元測試保存在整合測試以外的個別專案中，並確保您的單元測試專案不會參考基礎結構套件，或不具有基礎結構套件的相依性。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Learn more about unit testing in .NET Core projects:</source>
          <target state="translated">進一步了解 .NET Core 專案的單元測試：</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Try this <bpt id="p1">[</bpt>walkthrough creating unit tests with xunit and the .NET CLI<ept id="p1">](unit-testing-with-dotnet-test.md)</ept>.</source>
          <target state="translated">請參閱這份<bpt id="p1">[</bpt>使用 xunit 和 .NET CLI 建立單元測試的逐步解說<ept id="p1">](unit-testing-with-dotnet-test.md)</ept>。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The XUnit team has written a tutorial that shows <bpt id="p1">[</bpt>how to use xunit with .NET Core and Visual Studio<ept id="p1">](http://xunit.github.io/docs/getting-started-dotnet-core.html)</ept>.</source>
          <target state="translated">XUnit 小組已撰寫本教學課程以說明<bpt id="p1">[</bpt>如何在 .NET Core 和 Visual Studio 中搭配使用 xunit<ept id="p1">](http://xunit.github.io/docs/getting-started-dotnet-core.html)</ept>。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>