<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-47f9650" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ac26821819b22aa3ea47e6945bb5c8575dcd9807</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\base-types\regular-expressions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">35d361e9b4c0b9217de43ae9e7bfa7fb99e672df</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8b1fef4c3b2d180d298bf0053e7b1429da798284</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Regular expressions in .NET</source>
          <target state="translated">.NET 中的規則運算式</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Regular expressions in .NET</source>
          <target state="translated">.NET 中的規則運算式</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET、.NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Regular expressions in .NET</source>
          <target state="translated">.NET 中的規則運算式</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Regular expressions provide a powerful, flexible, and efficient method for processing text.</source>
          <target state="translated">規則運算式提供功能強大、彈性且有效率的方法來處理文字。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The extensive pattern-matching notation of regular expressions enables you to quickly parse large amounts of text to find specific character patterns; to validate text to ensure that it matches a predefined pattern (such as an e-mail address); to extract, edit, replace, or delete text substrings; and to add the extracted strings to a collection in order to generate a report.</source>
          <target state="translated">規則運算式的廣泛模式比對標記法可讓您快速剖析大量文字，以尋找特定的字元模式；驗證文字，以確保其符合預先定義的模式 (例如電子郵件地址)；擷取、編輯、取代或刪除文字子字串；以及將擷取的字串加入集合中，以產生報告。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For many applications that deal with strings or that parse large blocks of text, regular expressions are an indispensable tool.</source>
          <target state="translated">對許多處理字串或剖析大型文字區塊的應用程式而言，規則運算式是不可或缺的工具。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>How Regular Expressions Work</source>
          <target state="translated">規則運算式的運作方式</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The centerpiece of text processing with regular expressions is the regular expression engine, which is represented by the <bpt id="p1">[</bpt>System.Text.RegularExpressions.Regex<ept id="p1">](xref:System.Text.RegularExpressions.Regex)</ept> object in .NET.</source>
          <target state="translated">使用規則運算式來處理文字的核心是規則運算式引擎，以 .NET 中的 <bpt id="p1">[</bpt>System.Text.RegularExpressions.Regex<ept id="p1">](xref:System.Text.RegularExpressions.Regex)</ept> 物件來表示。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>At a minimum, processing text using regular expressions requires that the regular expression engine be provided with the following two items of information:</source>
          <target state="translated">使用規則運算式來處理文字時，至少需要提供規則運算式引擎以及下列兩個資訊項目：</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The regular expression pattern to identify in the text.</source>
          <target state="translated">要在文字中識別的規則運算式模式。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In .NET, regular expression patterns are defined by a special syntax or language, which is compatible with Perl 5 regular expressions and adds some additional features such as right-to-left matching.</source>
          <target state="translated">在 .NET 中，規則運算式模式是以特殊的語法或語言來定義，其相容於 Perl 5 規則運算式，並新增一些其他功能，例如由右至左比對。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Regular Expression Language - Quick Reference<ept id="p1">](quick-ref.md)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>規則運算式語言 - 快速參考<ept id="p1">](quick-ref.md)</ept>。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The text to parse for the regular expression pattern.</source>
          <target state="translated">要為規則運算式模式剖析的文字。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The methods of the <bpt id="p1">[</bpt>Regex<ept id="p1">](xref:System.Text.RegularExpressions.Regex)</ept> class let you perform the following operations:</source>
          <target state="translated"><bpt id="p1">[</bpt>Regex<ept id="p1">](xref:System.Text.RegularExpressions.Regex)</ept> 類別的方法可讓您執行下列作業：</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Determine whether the regular expression pattern occurs in the input text by calling the <bpt id="p1">[</bpt>Regex.IsMatch<ept id="p1">](xref:System.Text.RegularExpressions.Regex.IsMatch(System.String))</ept> method.</source>
          <target state="translated">呼叫 <bpt id="p1">[</bpt>Regex.IsMatch<ept id="p1">](xref:System.Text.RegularExpressions.Regex.IsMatch(System.String))</ept> 方法，以判定規則運算式模式是否出現在輸入文字中。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For an example that uses the <bpt id="p1">[</bpt>IsMatch<ept id="p1">](xref:System.Text.RegularExpressions.Regex.IsMatch(System.String))</ept> method for validating text, see <bpt id="p2">[</bpt>How to: Verify that Strings Are in Valid Email Format<ept id="p2">](verify-format.md)</ept>.</source>
          <target state="translated">如需使用 <bpt id="p1">[</bpt>IsMatch<ept id="p1">](xref:System.Text.RegularExpressions.Regex.IsMatch(System.String))</ept> 方法來驗證文字的範例，請參閱<bpt id="p2">[</bpt>如何：確認字串是否為有效的電子郵件格式<ept id="p2">](verify-format.md)</ept>。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Retrieve one or all occurrences of text that matches the regular expression pattern by calling the <bpt id="p1">[</bpt>Regex.Match<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Match(System.String))</ept> or <bpt id="p2">[</bpt>Regex.Matches<ept id="p2">](xref:System.Text.RegularExpressions.Regex.Matches(System.String))</ept> method.</source>
          <target state="translated">呼叫 <bpt id="p1">[</bpt>Regex.Match<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Match(System.String))</ept> 或 <bpt id="p2">[</bpt>Regex.Matches<ept id="p2">](xref:System.Text.RegularExpressions.Regex.Matches(System.String))</ept> 方法，以擷取符合規則運算式模式的所有文字。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The former method returns a <bpt id="p1">[</bpt>System.Text.RegularExpressions.Match<ept id="p1">](xref:System.Text.RegularExpressions.Match)</ept> object that provides information about the matching text.</source>
          <target state="translated">前一個方法會傳回 <bpt id="p1">[</bpt>System.Text.RegularExpressions.Match<ept id="p1">](xref:System.Text.RegularExpressions.Match)</ept> 物件，提供相符文字的相關資訊。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The latter returns a <bpt id="p1">[</bpt>MatchCollection<ept id="p1">](xref:System.Text.RegularExpressions.MatchCollection)</ept> object that contains one <bpt id="p2">[</bpt>System.Text.RegularExpressions.Match<ept id="p2">](xref:System.Text.RegularExpressions.Match)</ept> object for each match found in the parsed text.</source>
          <target state="translated">後者傳回 <bpt id="p1">[</bpt>MatchCollection<ept id="p1">](xref:System.Text.RegularExpressions.MatchCollection)</ept> 物件，其包含在每個已剖析文字中找到之相符項目的一個 <bpt id="p2">[</bpt>System.Text.RegularExpressions.Match<ept id="p2">](xref:System.Text.RegularExpressions.Match)</ept> 物件。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Replace text that matches the regular expression pattern by calling the <bpt id="p1">[</bpt>Regex.Replace<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Replace(System.String,System.String))</ept> method.</source>
          <target state="translated">呼叫 <bpt id="p1">[</bpt>Regex.Replace<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Replace(System.String,System.String))</ept> 方法，以取代符合規則運算式模式的文字。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For examples that use the <bpt id="p1">[</bpt>Replace<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Replace(System.String,System.String))</ept> method to change date formats and remove invalid characters from a string, see <bpt id="p2">[</bpt>How to: Strip Invalid Characters from a String<ept id="p2">](strip-characters.md)</ept> and <bpt id="p3">[</bpt>Regular Expression Example: Changing Date Formats<ept id="p3">](changing-formats.md)</ept>.</source>
          <target state="translated">如需使用 <bpt id="p1">[</bpt>Replace<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Replace(System.String,System.String))</ept> 方法來變更日期格式，以及移除字串中無效字元的範例，請參閱<bpt id="p2">[</bpt>如何：從字串中刪除無效的字元<ept id="p2">](strip-characters.md)</ept>和<bpt id="p3">[</bpt>規則運算式範例：變更日期格式<ept id="p3">](changing-formats.md)</ept>。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For an overview of the regular expression object model, see <bpt id="p1">[</bpt>The Regular Expression Object Model<ept id="p1">](object-model.md)</ept>.</source>
          <target state="translated">如需規則運算式物件模型概觀，請參閱<bpt id="p1">[</bpt>規則運算式物件模型<ept id="p1">](object-model.md)</ept>。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For more information about the regular expression language, see <bpt id="p1">[</bpt>Regular Expression Language - Quick Reference<ept id="p1">](quick-ref.md)</ept>.</source>
          <target state="translated">如需規則運算式語言的詳細資訊，請參閱<bpt id="p1">[</bpt>規則運算式語言 - 快速參考<ept id="p1">](quick-ref.md)</ept>。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Regular Expression Examples</source>
          <target state="translated">規則運算式範例</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>String<ept id="p1">](xref:System.String)</ept> class includes a number of string search and replacement methods that you can use when you want to locate literal strings in a larger string.</source>
          <target state="translated"><bpt id="p1">[</bpt>String<ept id="p1">](xref:System.String)</ept> 類別包含數種字串搜尋和取代方法，可供您在大型字串中尋找常值字串時使用。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Regular expressions are most useful either when you want to locate one of several substrings in a larger string, or when you want to identify patterns in a string, as the following examples illustrate.</source>
          <target state="translated">當您想要在大型字串中尋找數個子字串時，或是當您想要識別字串中的模式時，規則運算式最為好用，如下列範例所示。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Example 1: Replacing Substrings</source>
          <target state="translated">範例 1：取代子字串</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Assume that a mailing list contains names that sometimes include a title (Mr., Mrs., Miss, or Ms.) along with a first and last name.</source>
          <target state="translated">假設郵寄清單包含的名稱有時候會包括稱謂 (Mr.、Mrs.、Miss 或 Ms.) 以及姓名。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If you do not want to include the titles when you generate envelope labels from the list, you can use a regular expression to remove the titles, as the following example illustrates.</source>
          <target state="translated">當您從清單產生信封標籤時，如果不想包括稱謂，就可以使用規則運算式來移除稱謂，如下列範例所示。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The regular expression pattern <ph id="ph1">`(Mr\.? |Mrs\.? |Miss |Ms\.? )`</ph> matches any occurrence of "Mr ", "Mr. ", "Mrs ", "Mrs. ", "Miss ", "Ms or "Ms. ".</source>
          <target state="translated">規則運算式模式 <ph id="ph1">`(Mr\.? |Mrs\.? |Miss |Ms\.? )`</ph> 會比對所出現的任何 "Mr "、"Mr. "、"Mrs "、"Mrs. "、"Miss "、"Ms 或 "Ms. "。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The call to the <bpt id="p1">[</bpt>Regex.Replace<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Replace(System.String,System.String))</ept> method replaces the matched string with <bpt id="p2">[</bpt>String.Empty<ept id="p2">](xref:System.String.Empty)</ept>; in other words, it removes it from the original string.</source>
          <target state="translated">呼叫 <bpt id="p1">[</bpt>Regex.Replace<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Replace(System.String,System.String))</ept> 方法會以 <bpt id="p2">[</bpt>String.Empty<ept id="p2">](xref:System.String.Empty)</ept> 取代相符的字串；換句話說，就是從原始字串中移除它。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Example 2: Identifying Duplicated Words</source>
          <target state="translated">範例 2：識別重複的文字</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Accidentally duplicating words is a common error that writers make.</source>
          <target state="translated">不小心重複文字是作者常犯的錯誤。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>A regular expression can be used to identify duplicated words, as the following example shows.</source>
          <target state="translated">規則運算式可用來識別重複的文字，如下列範例所示。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The regular expression pattern <ph id="ph1">`\b(\w+?)\s\1\b`</ph> can be interpreted as follows:</source>
          <target state="translated">規則運算式模式 <ph id="ph1">`\b(\w+?)\s\1\b`</ph> 可解譯如下：</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Syntax</source>
          <target state="translated">語法</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Meaning</source>
          <target state="translated">意義</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Start at a word boundary.</source>
          <target state="translated">從字緣開始。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Match one or more word characters, but as few characters as possible.</source>
          <target state="translated">比對一或多個字元，但字元數愈少愈好。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Together, they form a group that can be referred to as <ph id="ph1">`\1`</ph>.</source>
          <target state="translated">這些一起構成可稱之為 <ph id="ph1">`\1`</ph> 的群組。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Match a white-space character.</source>
          <target state="translated">比對空白字元。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Match the substring that is equal to the group named <ph id="ph1">`\1`</ph>.</source>
          <target state="translated">比對等同於名為 <ph id="ph1">`\1`</ph> 之群組的子字串。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Match a word boundary.</source>
          <target state="translated">比對字邊界。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Regex.Matches<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions))</ept> method is called with regular expression options set to <bpt id="p2">[</bpt>RegexOptions.IgnoreCase<ept id="p2">](xref:System.Text.RegularExpressions.RegexOptions.IgnoreCase)</ept>.</source>
          <target state="translated"><bpt id="p1">[</bpt>Regex.Matches<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions))</ept> 方法是以設為 <bpt id="p2">[</bpt>RegexOptions.IgnoreCase<ept id="p2">](xref:System.Text.RegularExpressions.RegexOptions.IgnoreCase)</ept> 的規則運算式選項呼叫。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Therefore, the match operation is case-insensitive, and the example identifies the substring "This this" as a duplication.</source>
          <target state="translated">因此，比對作業不區分大小寫，而且此範例會將子字串 "This this" 視為重複。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Note that the input string includes the substring "this?</source>
          <target state="translated">請注意，輸入字串包括子字串 "this?</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>This".</source>
          <target state="translated">This"。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>However, because of the intervening punctuation mark, it is not identified as a duplication.</source>
          <target state="translated">不過，因為中間有標點符號，所以不會將其視為重複。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Example 3: Dynamically Building a Culture-Sensitive Regular Expression</source>
          <target state="translated">範例 3：動態建立區分文化特性的規則運算式</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The following example illustrates the power of regular expressions combined with the flexibility offered by .NET's globalization features.</source>
          <target state="translated">下列範例說明規則運算式結合 .NET 全球化功能所提供的彈性，功能有多麼強大。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>It uses the <bpt id="p1">[</bpt>NumberFormatInfo<ept id="p1">](xref:System.Globalization.NumberFormatInfo)</ept> object to determine the format of currency values in the system's current culture.</source>
          <target state="translated">它會使用 <bpt id="p1">[</bpt>NumberFormatInfo<ept id="p1">](xref:System.Globalization.NumberFormatInfo)</ept> 物件來判定系統目前文化特性中的幣值格式，</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>It then uses that information to dynamically construct a regular expression that extracts currency values from the text.</source>
          <target state="translated">然後利用該資訊動態建構可從文字擷取幣值的規則運算式。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For each match, it extracts the subgroup that contains the numeric string only, converts it to a <bpt id="p1">[</bpt>Decimal<ept id="p1">](xref:System.Decimal)</ept> value, and calculates a running total.</source>
          <target state="translated">針對每個比對，它會擷取僅包含數值字串的子群組，將其轉換成<bpt id="p1">[</bpt>十進位<ept id="p1">](xref:System.Decimal)</ept>值，並計算執行總計。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>On a computer whose current culture is English - United States (en-US), the example dynamically builds the regular expression <ph id="ph1">`\$\s*[-+]?([0-9]{0,3}(,[0-9]{3})*(\.[0-9]+)?)`</ph>.</source>
          <target state="translated">在目前文化特性為 English - United States (en-US) 的電腦上，此範例會動態建立規則運算式 <ph id="ph1">`\$\s*[-+]?([0-9]{0,3}(,[0-9]{3})*(\.[0-9]+)?)`</ph>。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>This regular expression pattern can be interpreted as follows:</source>
          <target state="translated">此規則運算式模式可解譯如下：</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Syntax</source>
          <target state="translated">語法</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Meaning</source>
          <target state="translated">意義</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Look for a single occurrence of the dollar symbol ($) in the input string.</source>
          <target state="translated">在輸入字串中尋找單獨出現的貨幣符號 ($)。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The regular expression pattern string includes a backslash to indicate that the dollar symbol is to be interpreted literally rather than as a regular expression anchor.</source>
          <target state="translated">規則運算式模式字串包含反斜線，表示貨幣符號要解譯為字面意義，而不是規則運算式錨點。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>(The $ symbol alone would indicate that the regular expression engine should try to begin its match at the end of a string.) To ensure that the current culture's currency symbol is not misinterpreted as a regular expression symbol, the example calls the <bpt id="p1">[</bpt>Escape<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Escape(System.String))</ept> method to escape the character.</source>
          <target state="translated">($ 符號單獨出現表示規則運算式引擎應該嘗試在字串結尾處開始其比對。)為了確保目前文化特性的貨幣符號不會誤譯為規則運算式符號，此範例呼叫 <bpt id="p1">[</bpt>Escape<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Escape(System.String))</ept> 方法以逸出字元。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Look for zero or more occurrences of a white-space character.</source>
          <target state="translated">尋找出現零或多次的空格字元。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Look for zero or one occurrence of either a positive sign or a negative sign.</source>
          <target state="translated">尋找出現一或多次的正號或負號。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The outer parentheses around this expression define it as a capturing group or a subexpression.</source>
          <target state="translated">此運算式外面括號將其定義成擷取群組或子運算式。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>If a match is found, information about this part of the matching string can be retrieved from the second <bpt id="p1">[</bpt>Group<ept id="p1">](xref:System.Text.RegularExpressions.Group)</ept> object in the <bpt id="p2">[</bpt>GroupCollection<ept id="p2">](xref:System.Text.RegularExpressions.GroupCollection)</ept> object returned by the <bpt id="p3">[</bpt>Match.Groups<ept id="p3">](xref:System.Text.RegularExpressions.Match.Groups)</ept> property.</source>
          <target state="translated">如果找到相符項目，從 <bpt id="p3">[</bpt>Match.Groups<ept id="p3">](xref:System.Text.RegularExpressions.Match.Groups)</ept> 屬性傳回之 <bpt id="p2">[</bpt>GroupCollection<ept id="p2">](xref:System.Text.RegularExpressions.GroupCollection)</ept> 物件中的第二個 <bpt id="p1">[</bpt>Group<ept id="p1">](xref:System.Text.RegularExpressions.Group)</ept> 物件，擷取此部分比對字串的相關資訊。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>(The first element in the collection represents the entire match.)</source>
          <target state="translated">(集合中的第一個項目代表整個比對。)</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Look for zero to three occurrences of the decimal digits 0 through 9.</source>
          <target state="translated">尋找出現零到三次的十進位數字 0 到 9。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Look for zero or more occurrences of a group separator followed by three decimal digits.</source>
          <target state="translated">尋找出現零或多次、後面接三個十進位數字的群組分隔符號。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Look for a single occurrence of the decimal separator.</source>
          <target state="translated">尋找單次出現的十進位分隔符號。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Look for one or more decimal digits.</source>
          <target state="translated">尋找一或多個十進位數字。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Look for zero or one occurrence of the decimal separator followed by at least one decimal digit.</source>
          <target state="translated">尋找出現零或一次、後接至少一個十進位數字的十進位分隔符號。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Related Topics</source>
          <target state="translated">相關主題</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Title</source>
          <target state="translated">標題</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">說明</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Regular expression language - quick reference<ept id="p1">](quick-ref.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>規則運算式語言 - 快速參考<ept id="p1">](quick-ref.md)</ept></target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Provides information on the set of characters, operators, and constructs that you can use to define regular expressions.</source>
          <target state="translated">提供您可以用來定義規則運算式之字元、運算子和建構組合的資訊。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>The regular expression object model<ept id="p1">](object-model.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>規則運算式物件模型<ept id="p1">](object-model.md)</ept></target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Provides information and code examples that illustrate how to use the regular expression classes.</source>
          <target state="translated">提供資訊和程式碼範例，說明如何使用規則運算式類別。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Details of regular expression behavior<ept id="p1">](regex-behavior.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>規則運算式行為的詳細資料<ept id="p1">](regex-behavior.md)</ept></target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Provides information about the capabilities and behavior of .NETregular expressions.</source>
          <target state="translated">提供 .NET 規則運算式之功能和行為的相關資訊。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Regular expression examples<ept id="p1">](regex-examples.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>規則運算式範例<ept id="p1">](regex-examples.md)</ept></target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Provides code examples that illustrate typical uses of regular expressions.</source>
          <target state="translated">提供程式碼範例，以說明規則運算式的一般用法。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Reference</source>
          <target state="translated">參考資料</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.Text.RegularExpressions<ept id="p1">](xref:System.Text.RegularExpressions)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>System.Text.RegularExpressions<ept id="p1">](xref:System.Text.RegularExpressions)</ept></target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.Text.RegularExpressions.Regex<ept id="p1">](xref:System.Text.RegularExpressions.Regex)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>System.Text.RegularExpressions.Regex<ept id="p1">](xref:System.Text.RegularExpressions.Regex)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>