<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-47f9650" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1f94c7609d667a54b147b73a61653028d1808080</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\garbagecollection\weak-references.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">98a7703c39b86867e06aa23c3b8238cc755de109</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d8b0214adb6124ee1ee73b4f2414503b75f2b07e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Weak references</source>
          <target state="translated">弱式參考</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Weak references</source>
          <target state="translated">弱式參考</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Weak references</source>
          <target state="translated">弱式參考</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The garbage collector cannot collect an object in use by an application while the application's code can reach that object.</source>
          <target state="translated">在應用程式碼可以存取使用中物件時，記憶體回收行程無法透過應用程式回收該物件。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The application is said to have a strong reference to the object.</source>
          <target state="translated">應用程式即具有物件的強式參考。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>A weak reference permits the garbage collector to collect the object while still allowing the application to access the object.</source>
          <target state="translated">弱式參考允許記憶體回收行程回收物件，同時仍然允許應用程式存取物件。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A weak reference is valid only during the indeterminate amount of time until the object is collected when no strong references exist.</source>
          <target state="translated">沒有強式參考時，除非回收物件，否則弱式參考僅在時間量不定期間才有效。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>When you use a weak reference, the application can still obtain a strong reference to the object, which prevents it from being collected.</source>
          <target state="translated">當您使用弱式參考時，應用程式仍然可以取得物件的強式參考，以防止回收該物件。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>However, there is always the risk that the garbage collector will get to the object first before a strong reference is reestablished.</source>
          <target state="translated">不過，記憶體回收行程在重新建立強式參考之前之前先取得物件，一定有其風險。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Weak references are useful for objects that use a lot of memory, but can be recreated easily if they are reclaimed by garbage collection.</source>
          <target state="translated">弱式參考適用於使用大量記憶體的物件，但可以在透過記憶體回收對其進行回收時輕鬆地予以重建。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Suppose a tree view displays a complex hierarchical choice of options to the user.</source>
          <target state="translated">假設樹狀檢視會向使用者顯示複雜的階層式選項。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If the underlying data is large, keeping the tree in memory is inefficient when the user is involved with something else in the application.</source>
          <target state="translated">如果基礎資料很大，則使用者參與應用程式中的其他作業時，將樹狀結構保留在記憶體不具效率。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>When the user switches away to another part of the application, you can use the <bpt id="p1">[</bpt>WeakReference<ept id="p1">](xref:System.WeakReference)</ept> or <bpt id="p2">[</bpt>WeakReference<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph><ept id="p2">](xref:System.WeakReference%601)</ept> class to create a weak reference to the tree and destroy all strong references.</source>
          <target state="translated">當使用者切換到應用程式的另一個部分時，您可以使用 <bpt id="p1">[</bpt>WeakReference<ept id="p1">](xref:System.WeakReference)</ept> 或 <bpt id="p2">[</bpt>WeakReference<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph><ept id="p2">](xref:System.WeakReference%601)</ept> 類別來建立樹狀結構的弱式參考，並終結所有強式參考。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>When the user switches back to the tree, the application attempts to obtain a strong reference to the tree and, if successful, avoids reconstructing the tree.</source>
          <target state="translated">使用者切換回樹狀結構時，應用程式會嘗試取得樹狀結構的強式參考，如果成功，可以避免重新建構樹狀結構。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>To establish a weak reference with an object, you create a <bpt id="p1">[</bpt>WeakReference<ept id="p1">](xref:System.WeakReference)</ept> using the instance of the object to be tracked.</source>
          <target state="translated">若要建立物件的弱式參考，請使用要追蹤之物件的執行個體來建立 <bpt id="p1">[</bpt>WeakReference<ept id="p1">](xref:System.WeakReference)</ept>。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You then set the <bpt id="p1">[</bpt>Target<ept id="p1">](xref:System.WeakReference.Target)</ept> property to that object and set the original reference to the object to null.</source>
          <target state="translated">接著將 <bpt id="p1">[</bpt>Target<ept id="p1">](xref:System.WeakReference.Target)</ept> 屬性設定為該物件，並將物件的原始參考設定為 null。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Short and Long Weak References</source>
          <target state="translated">簡短和完整弱式參考</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You can create a short weak reference or a long weak reference:</source>
          <target state="translated">您可以建立簡短弱式參考或完整弱式參考︰</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Short</source>
          <target state="translated">Short</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The target of a short weak reference becomes <ph id="ph1">`null`</ph> when the object is reclaimed by garbage collection.</source>
          <target state="translated">透過記憶體回收回收物件時，簡短弱式參考的目標會變成 <ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The weak reference is itself a managed object, and is subject to garbage collection just like any other managed object.</source>
          <target state="translated">弱式參考本身是 Managed 物件，而且很容易進行記憶體回收，就像任何其他 Managed 物件一樣。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>A short weak reference is the default constructor for <bpt id="p1">[</bpt>WeakReference<ept id="p1">](xref:System.WeakReference)</ept>.</source>
          <target state="translated">簡短弱式參考是 <bpt id="p1">[</bpt>WeakReference<ept id="p1">](xref:System.WeakReference)</ept> 的預設建構函式。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>A long weak reference is retained after the object's <bpt id="p1">[</bpt>Finalize<ept id="p1">](xref:System.Object.Finalize)</ept> method has been called.</source>
          <target state="translated">在呼叫物件的 <bpt id="p1">[</bpt>Finalize<ept id="p1">](xref:System.Object.Finalize)</ept> 方法之後，會保留完整弱式參考。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This allows the object to be recreated, but the state of the object remains unpredictable.</source>
          <target state="translated">這樣會重建物件，但是物件的狀態仍然無法預測。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>To use a long reference, specify <ph id="ph1">`true`</ph> in the <bpt id="p1">[</bpt>WeakReference<ept id="p1">](xref:System.WeakReference)</ept> constructor.</source>
          <target state="translated">若要使用完整參考，請在 <bpt id="p1">[</bpt>WeakReference<ept id="p1">](xref:System.WeakReference)</ept> 建構函式中指定 <ph id="ph1">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>If the object's type does not have a <bpt id="p1">[</bpt>Finalize<ept id="p1">](xref:System.Object.Finalize)</ept> method, the short weak reference functionality applies and the weak reference is valid only until the target is collected, which can occur anytime after the finalizer is run.</source>
          <target state="translated">如果物件的類型沒有 <bpt id="p1">[</bpt>Finalize<ept id="p1">](xref:System.Object.Finalize)</ept> 方法，則會套用簡短的弱式參考功能，而且弱式參考只在回收目標之前有效，而目標的回收可以在執行完成項之後隨時執行。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>To establish a strong reference and use the object again, cast the <bpt id="p1">[</bpt>Target<ept id="p1">](xref:System.WeakReference.Target)</ept> property of a <bpt id="p2">[</bpt>WeakReference<ept id="p2">](xref:System.WeakReference)</ept> to the type of the object.</source>
          <target state="translated">若要建立強式參考，並再次使用物件，請將 <bpt id="p2">[</bpt>WeakReference<ept id="p2">](xref:System.WeakReference)</ept> 的 <bpt id="p1">[</bpt>Target<ept id="p1">](xref:System.WeakReference.Target)</ept> 屬性轉換為物件的類型。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If the <bpt id="p1">[</bpt>Target<ept id="p1">](xref:System.WeakReference.Target)</ept> property returns <ph id="ph1">`null`</ph>, the object was collected; otherwise, you can continue to use the object because the application has regained a strong reference to it.</source>
          <target state="translated">如果 <bpt id="p1">[</bpt>Target<ept id="p1">](xref:System.WeakReference.Target)</ept> 屬性傳回 <ph id="ph1">`null`</ph>，則已回收物件；否則，您可以繼續使用物件，因為應用程式已重新取得其強式參考。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Guidelines for Using Weak References</source>
          <target state="translated">使用弱式參考的指導方針</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Use long weak references only when necessary as the state of the object is unpredictable after finalization.</source>
          <target state="translated">只在物件狀態於完成之後無法預期時，才會在必要時使用完整弱式參考。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Avoid using weak references to small objects because the pointer itself may be as large or larger.</source>
          <target state="translated">請避免使用小型物件的弱式參考，因為指標本身可能一樣大或較大。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Avoid using weak references as an automatic solution to memory management problems.</source>
          <target state="translated">請避免使用弱式參考作為記憶體管理問題的自動解決方案。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Instead, develop an effective caching policy for handling your application's objects.</source>
          <target state="translated">相反地，開發有效的快取原則來處理您的應用程式物件。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">另請參閱</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Garbage collection in .NET<ept id="p1">](index.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>.NET 的記憶體回收<ept id="p1">](index.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>