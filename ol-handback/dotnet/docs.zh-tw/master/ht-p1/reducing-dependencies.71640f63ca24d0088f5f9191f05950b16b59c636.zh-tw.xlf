<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-6a73dd2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">77d49a1df361823c3f8f676923960d4bef2eeb08</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\deploying\reducing-dependencies.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p1</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f092be6e8b03fa8f1e8c2408f261d26993d078ea</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">125c2cfce4f4b8c92242176197de35db9ecfbc1b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Reducing Package Dependencies with project.json</source>
          <target state="translated">減少與 project.json 的封裝相依性</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Reducing Package Dependencies with project.json</source>
          <target state="translated">減少與 project.json 的封裝相依性</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET、.NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Reducing Package Dependencies with project.json</source>
          <target state="translated">減少與 project.json 的封裝相依性</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This article covers what you need to know about reducing your package dependencies when authoring <ph id="ph1">`project.json`</ph> libraries.</source>
          <target state="translated">本文涵蓋撰寫 <ph id="ph1">`project.json`</ph> 程式庫時，您需要了解的降低封裝相依性的內容。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>By the end of this article, you will learn how to compose your library such that it only uses the dependencies it needs.</source>
          <target state="translated">在本文的最後，您會了解如何撰寫程式庫，令它只使用需要的相依性。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Why it's Important</source>
          <target state="translated">為何重要</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>.NET Core is a product made up of NuGet packages.</source>
          <target state="translated">.NET Core 是由 NuGet 封裝組成的產品。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>An essential package is the <bpt id="p1">[</bpt>.NET Standard Library metapackage<ept id="p1">](https://www.nuget.org/packages/NETStandard.Library)</ept>, which is a NuGet package composed of other packages.</source>
          <target state="translated">必要的封裝是 <bpt id="p1">[</bpt>.NET 標準程式庫中繼封裝<ept id="p1">](https://www.nuget.org/packages/NETStandard.Library)</ept>，由 NuGet 封裝組成的其他封裝。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>It provides you with the set of packages that are guaranteed to work on multiple .NET implementations, such as .NET Framework, .NET Core and Xamarin/Mono.</source>
          <target state="translated">它提供的一組封裝，保證都能在多個 .NET 實作上運作，例如 .NET Framework、.NET Core 和 Xamarin/Mono。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>However, there's a good chance that your library won't use every single package it contains.</source>
          <target state="translated">不過，您的程式庫有極大的可能不會使用其包含的每個單一封裝。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>When authoring a library and distributing it over NuGet, it's a best practice to "trim" your dependencies down to only the packages you actually use.</source>
          <target state="translated">在撰寫程式庫並透過 NuGet 散發時，最佳的作法是將相依性「修剪」至實際使用的封裝。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This results in a smaller overall footprint for NuGet packages.</source>
          <target state="translated">這會減少 NuGet 封裝的整體使用量。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>How to do it</source>
          <target state="translated">作法</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Currently, there is no official <ph id="ph1">`dotnet`</ph> command which trims package references.</source>
          <target state="translated">目前沒有任何修剪封裝參考的正式 <ph id="ph1">`dotnet`</ph> 命令。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Instead, you'll have to do it manually.</source>
          <target state="translated">您必須改以手動作業。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The general process looks like the following:</source>
          <target state="translated">一般程序如下所示︰</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Reference <ph id="ph1">`NETStandard.Library`</ph> version <ph id="ph2">`1.6.0`</ph> in a <ph id="ph3">`dependencies`</ph> section of your <ph id="ph4">`project.json`</ph>.</source>
          <target state="translated">參考您 <ph id="ph4">`project.json`</ph> 的 <ph id="ph3">`dependencies`</ph> 區段的 <ph id="ph1">`NETStandard.Library`</ph> 版本 <ph id="ph2">`1.6.0`</ph>。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Restore packages with <ph id="ph1">`dotnet restore`</ph> from the command line.</source>
          <target state="translated">從命令列使用 <ph id="ph1">`dotnet restore`</ph> 還原封裝。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Inspect the <ph id="ph1">`project.lock.json`</ph> file and find the <ph id="ph2">`NETSTandard.Library`</ph> section.</source>
          <target state="translated">檢查 <ph id="ph1">`project.lock.json`</ph> 檔案，找出 <ph id="ph2">`NETSTandard.Library`</ph> 區段。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>It's near the beginning of the file.</source>
          <target state="translated">它在靠近檔案開頭處。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Copy all of the listed packages under <ph id="ph1">`dependencies`</ph>.</source>
          <target state="translated">複製 <ph id="ph1">`dependencies`</ph> 下列出的所有封裝。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Remove the <ph id="ph1">`.NETStandard.Library`</ph> reference and replace it with the copied packages.</source>
          <target state="translated">移除 <ph id="ph1">`.NETStandard.Library`</ph> 參考，並以複製的封裝取而代之。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Remove references to packages you don't need.</source>
          <target state="translated">移除您不需要的封裝參考。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>You can find out which packages you don't need by one of the following ways:</source>
          <target state="translated">您可以下列方法之一，找出不需要的封裝︰</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Trial and error.</source>
          <target state="translated">試驗與錯誤。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This involves removing a package, restoring, seeing if your library still compiles, and repeating this process.</source>
          <target state="translated">這牽涉到移除封裝、還原、查看程式庫是否仍在編譯，以及重複此程序。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Using a tool such as <bpt id="p1">[</bpt>ILSpy<ept id="p1">](http://ilspy.net)</ept> or <bpt id="p2">[</bpt>.NET Reflector<ept id="p2">](http://www.red-gate.com/products/dotnet-development/reflector)</ept> to peek at references to see what your code is actually using.</source>
          <target state="translated">使用諸如 <bpt id="p1">[</bpt>ILSpy<ept id="p1">](http://ilspy.net)</ept> 或 <bpt id="p2">[</bpt>.NET 反射程式<ept id="p2">](http://www.red-gate.com/products/dotnet-development/reflector)</ept>等工具預覽參考，查看程式碼實際使用的參考。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You can then remove packages which don't correspond to types you're using.</source>
          <target state="translated">接著移除與所用類型不對應的封裝。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">範例</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Imagine that you wrote a library which provided additional functionality to generic collection types.</source>
          <target state="translated">假設您撰寫的程式庫提供了泛型集合類型的額外功能。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Such a library would need to depend on packages such as <ph id="ph1">`System.Collections`</ph>, but may not at all depend on packages such as <ph id="ph2">`System.Net.Http`</ph>.</source>
          <target state="translated">這類程式庫需要依賴如 <ph id="ph1">`System.Collections`</ph> 的封裝，但可能完全不依賴如 <ph id="ph2">`System.Net.Http`</ph> 的封裝。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>As such, it would be good to trim package dependencies down to only what this library required!</source>
          <target state="translated">如此，將封裝相依性修剪至此程式庫所需就很好！</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>To trim this library, you start with the <ph id="ph1">`project.json`</ph> file and add a reference to <ph id="ph2">`NETStandard.Library`</ph> version <ph id="ph3">`1.6.0`</ph>.</source>
          <target state="translated">若要修剪此程式庫，您可以從 <ph id="ph1">`project.json`</ph> 檔案開始，將參考加入 <ph id="ph2">`NETStandard.Library`</ph> 版本 <ph id="ph3">`1.6.0`</ph>。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Next, you restore packages with <ph id="ph1">`dotnet restore`</ph>, inspect the <ph id="ph2">`project.lock.json`</ph> file, and find all the packages restored for <ph id="ph3">`NETSTandard.Library`</ph>.</source>
          <target state="translated">接下來，使用 <ph id="ph1">`dotnet restore`</ph> 還原封裝、檢查 <ph id="ph2">`project.lock.json`</ph> 檔案，找出所有還原的 <ph id="ph3">`NETSTandard.Library`</ph> 封裝。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Here's what the relevant section in the <ph id="ph1">`project.lock.json`</ph> file looks like when targeting <ph id="ph2">`netstandard1.0`</ph>:</source>
          <target state="translated">以下是以 <ph id="ph2">`netstandard1.0`</ph> 為目標時，<ph id="ph1">`project.lock.json`</ph> 檔案中相關區段的樣貌：</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Next, copy over the package references into the <ph id="ph1">`dependencies`</ph> section of the library's <ph id="ph2">`project.json`</ph> file, replacing the <ph id="ph3">`NETStandard.Library`</ph> reference:</source>
          <target state="translated">接下來，將封裝參考複製到程式庫 <ph id="ph2">`project.json`</ph> 檔案的 <ph id="ph1">`dependencies`</ph> 區段，取代 <ph id="ph3">`NETStandard.Library`</ph> 參考︰</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>That's quite a lot of packages, many of which which certainly aren't necessary for extending collection types.</source>
          <target state="translated">這是很大數量的封裝，其中有許多對擴充集合類型完全沒必要。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>You can either remove packages manually or use a tool such as <bpt id="p1">[</bpt>ILSpy<ept id="p1">](http://ilspy.net)</ept> or <bpt id="p2">[</bpt>.NET Reflector<ept id="p2">](http://www.red-gate.com/products/dotnet-development/reflector)</ept> to identify which packages your code actually uses.</source>
          <target state="translated">您可以手動移除封裝，或使用 <bpt id="p1">[</bpt>ILSpy<ept id="p1">](http://ilspy.net)</ept> 或 <bpt id="p2">[</bpt>.NET 反射程式<ept id="p2">](http://www.red-gate.com/products/dotnet-development/reflector)</ept>等工具識別程式碼實際使用的封裝。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Here's what a trimmed package could look like:</source>
          <target state="translated">修剪過的封裝可能看起來像這樣︰</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Now, it has a smaller footprint than if it had depended on the <ph id="ph1">`NETStandard.Library`</ph> metapackage.</source>
          <target state="translated">現在，它的使用量比之前依賴 <ph id="ph1">`NETStandard.Library`</ph> 中繼封裝時小。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>