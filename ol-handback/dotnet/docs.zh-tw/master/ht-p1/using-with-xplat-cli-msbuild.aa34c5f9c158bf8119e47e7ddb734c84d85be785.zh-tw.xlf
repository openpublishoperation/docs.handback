<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-e631009" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">01b17021e79bcdb2dc69f97b709f4aa63dbab9aa</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\preview3\tutorials\using-with-xplat-cli-msbuild.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p1</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f4687c866d3e890d8a186aa37ff5cdea27ffe4b8</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">80690ec3287d1b867fca08669e2a6f0351ed22df</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Getting started with .NET Core on Windows/Linux/macOS using the command line (SDK Preview 3)</source>
          <target state="translated">使用命令列在 Windows/Linux/macOS 上開始使用 .NET Core (SDK Preview 3)</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Getting started with .NET Core on Windows, Linux, or macOS using the .NET Core command line interface (CLI)</source>
          <target state="translated">使用 .NET Core 命令列介面 (CLI) 在 Windows、Linux 或 macOS 上開始使用 .NET Core</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Getting started with .NET Core on Windows/Linux/macOS using the command line (SDK Preview 3)</source>
          <target state="translated">使用命令列在 Windows/Linux/macOS 上開始使用 .NET Core (SDK Preview 3)</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This guide will show you how to use the .NET Core CLI tooling to build cross-platform console apps.</source>
          <target state="translated">此指南說明如何使用 .NET Core CLI 工具，來建置跨平台的主控台應用程式。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>It will start with the most basic console app and eventually span multiple projects, including testing.</source>
          <target state="translated">它會從最基本的主控台應用程式開始，最終會跨越多個專案，包括測試。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You'll add these features step-by-step, building on what you've already seen and built.</source>
          <target state="translated">您將逐步新增這些功能，這些功能會建置在您已熟悉並建置的項目之上。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>If you're unfamiliar with the .NET Core CLI toolset, read <bpt id="p1">[</bpt>the .NET Core SDK overview<ept id="p1">](../tools/dotnet.md)</ept>.</source>
          <target state="translated">如果您不熟悉 .NET Core CLI 工具組，請參閱 <bpt id="p1">[</bpt>.NET Core SDK 概觀<ept id="p1">](../tools/dotnet.md)</ept>。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
          <target state="translated">必要條件</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Before you begin, ensure you have <bpt id="p1">[</bpt>.NET Core CLI tooling Preview 3 or later<ept id="p1">](https://github.com/dotnet/core/blob/master/release-notes/preview3-download.md)</ept>.</source>
          <target state="translated">開始之前，請確定您有<bpt id="p1">[</bpt>最新的 .NET Core CLI 工具 Preview 3 或更新版本<ept id="p1">](https://github.com/dotnet/core/blob/master/release-notes/preview3-download.md)</ept>。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You'll also need a text editor.</source>
          <target state="translated">您也需要文字編輯器。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Hello, Console App!</source>
          <target state="translated">嗨，主控台應用程式！</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>First, navigate to or create a new folder with a name you like.</source>
          <target state="translated">首先，瀏覽至或用您喜歡的名稱建立新的資料夾。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>"Hello" is the name chosen for the sample code, which can be found <bpt id="p1">[</bpt>here<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/console-apps/HelloMsBuild)</ept>.</source>
          <target state="translated">"Hello" 是針對範例程式碼選擇的名稱，您可以在<bpt id="p1">[</bpt>這裡<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/console-apps/HelloMsBuild)</ept>找到。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Open up a command prompt and type the following:</source>
          <target state="translated">開啟命令提示字元並輸入下列命令：</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Let's do a quick walkthrough:</source>
          <target state="translated">讓我們快速逐步解說︰</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">`dotnet new`</ph><ept id="p1">](../tools/dotnet-new.md)</ept> creates an up-to-date <ph id="ph2">`Hello.csproj`</ph> project file with the dependencies necessary to build a console app.</source>
          <target state="translated"><bpt id="p1">[</bpt><ph id="ph1">`dotnet new`</ph><ept id="p1">](../tools/dotnet-new.md)</ept> 使用建置主控台應用程式時所需的相依性，來建立最新的 <ph id="ph2">`Hello.csproj`</ph> 專案檔。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>It also creates a <ph id="ph1">`Program.cs`</ph>, a basic file containing the entry point for the application.</source>
          <target state="translated">它也會建立 <ph id="ph1">`Program.cs`</ph>，這個基本檔案包含了應用程式的進入點。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Hello.csproj`</ph>:</source>
          <target state="translated"><ph id="ph1">`Hello.csproj`</ph>:</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The project file specifies everything that's needed to restore dependencies and build the program.</source>
          <target state="translated">專案檔會指定還原相依性和建置程式所需的所有內容。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Import`</ph> tag brings in some properties that are common to all .NET Core projects.</source>
          <target state="translated"><ph id="ph1">`Import`</ph> 標記會帶入一些通用於所有 .NET Core 專案的屬性。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`OutputType`</ph> tag specifies that we're building an executable, in other words a console application.</source>
          <target state="translated"><ph id="ph1">`OutputType`</ph> 標記會指定我們正在建置可執行檔，亦即主控台應用程式。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`TargetFramework`</ph> tag specifies what .NET runtime we're targeting.</source>
          <target state="translated"><ph id="ph1">`TargetFramework`</ph> 標記會指定我們設定為目標的 .NET 執行階段。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In an advance scenario, you can specify multiple target frameworks and build to all those in a single operation.</source>
          <target state="translated">在進階案例中，您可以指定多個目標架構，並在單一作業中建置這全部的架構。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In this tutorial, we'll stick to building only for .NET Core 1.0.</source>
          <target state="translated">在本教學課程中，我們將著重於僅針對 .NET Core 1.0 來建置。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Compile`</ph> tag tells the compiler to build all the files in the current directory and all its subdirectories that have the <ph id="ph2">`.cs`</ph> file extension, in other words all the C# files in the project.</source>
          <target state="translated"><ph id="ph1">`Compile`</ph> 標記會指示編譯器，在目前目錄及其所有子目錄中建置所有副檔名為 <ph id="ph2">`.cs`</ph> 的檔案，亦即專案中的所有 C# 檔案。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In advanced scenarios, it is possible to exclude files, but in this tutorial, and in most simple scenarios, this line can be left unchanged.</source>
          <target state="translated">在進階案例中，可以排除檔案，但在本教學課程及大部分的簡單案例中，這一行可保留不變。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`EmbeddedResource`</ph> tag instructs the build system to embed localization files with the extension <ph id="ph2">`.resx`</ph> into the compiled executable.</source>
          <target state="translated"><ph id="ph1">`EmbeddedResource`</ph> 標籤會指示建置系統，將副檔名為 <ph id="ph2">`.resx`</ph> 的當地語系化檔案內嵌至已編譯的可執行檔中。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>We won't use that feature in this tutorial.</source>
          <target state="translated">我們不會在本教學課程中使用該功能。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`PackageReference`</ph> tags specify what dependency packages must be restored and included when building the application.</source>
          <target state="translated"><ph id="ph1">`PackageReference`</ph> 標記會指定在建置應用程式時必須還原和包含哪些相依性套件。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Each package reference specifies the name of the package under the <ph id="ph1">`Include`</ph> attribute, and a version number.</source>
          <target state="translated">每個套件參考都會在 <ph id="ph1">`Include`</ph> 屬性下方指定套件名稱及版本號碼。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>In most advanced scenarios, you'll add more package references.</source>
          <target state="translated">在大部分的進階案例中，您將新增多個套件參考。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>It is also possible to reference other projects on disk.</source>
          <target state="translated">此外，也可以參考磁碟上的其他專案。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Program.cs`</ph>:</source>
          <target state="translated"><ph id="ph1">`Program.cs`</ph>:</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The program starts by <ph id="ph1">`using System`</ph>, which means "bring everything in the <ph id="ph2">`System`</ph> namespace into scope for this file".</source>
          <target state="translated">程式是透過 <ph id="ph1">`using System`</ph> 來啟動，這表示「將 <ph id="ph2">`System`</ph> 命名空間中的所有內容帶入這個檔案的範圍內」。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`System`</ph> namespace includes basic constructs such as <ph id="ph2">`string`</ph>, or numeric types.</source>
          <target state="translated"><ph id="ph1">`System`</ph> 命名空間會包含像是 <ph id="ph2">`string`</ph> 的基本結構或數字類型。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>We then define a namespace called "ConsoleApplication".</source>
          <target state="translated">然後，我們會定義稱為 "ConsoleApplication" 的命名空間。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>You can change this to anything you want.</source>
          <target state="translated">您可以將其變更為任何所需的位置。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>A class named "Program" is defined within that namespace, with a <ph id="ph1">`Main`</ph> method that takes an array of strings as its argument.</source>
          <target state="translated">名為 "Program" 的類別是定義於該命名空間內，其中含有可接受字串陣列做為其引數的 <ph id="ph1">`Main`</ph> 方法。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This array will contain the list of arguments passed in when the compiled program will be called.</source>
          <target state="translated">這個陣列包含在將呼叫已編譯的程式時傳入的引數清單。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>As it is, this array is not used: all the program is doing is to write "Hello World!"</source>
          <target state="translated">事實上，並未使用這個陣列︰所有程式所做的只是將 "Hello World!" 寫入</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>to the console.</source>
          <target state="translated">到主控台。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>We can make things a little more interesting by changing the <ph id="ph1">`Console.WriteLine`</ph> into the following code.</source>
          <target state="translated">我們可以藉由將 <ph id="ph1">`Console.WriteLine`</ph> 變更為下列程式碼，讓事情得更有趣。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">`dotnet restore`</ph><ept id="p1">](../tools/dotnet-restore.md)</ept> calls into <bpt id="p2">[</bpt>NuGet<ept id="p2">](http://nuget.org)</ept> (.NET's package manager) to restore the tree of dependencies.</source>
          <target state="translated"><bpt id="p1">[</bpt><ph id="ph1">`dotnet restore`</ph><ept id="p1">](../tools/dotnet-restore.md)</ept> 呼叫 <bpt id="p2">[</bpt>NuGet<ept id="p2">](http://nuget.org)</ept> (.NET 的套件管理員)，以還原相依性的樹狀結構。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>NuGet analyzes the <ph id="ph1">`Hello.csproj`</ph> file, downloads the dependencies stated in the file (or grabs them from a cache on your machine), and writes the <ph id="ph2">`obj/project.assets.json`</ph> file.</source>
          <target state="translated">NuGet 會分析 <ph id="ph1">`Hello.csproj`</ph> 檔案、下載檔案中所述的相依性 (或從您電腦上的快取抓取)，並寫入 <ph id="ph2">`obj/project.assets.json`</ph> 檔案。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`project.assets.json`</ph> file is necessary to be able to compile and run.</source>
          <target state="translated">必須要有 <ph id="ph1">`project.assets.json`</ph> 檔案才能夠編譯並執行。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`project.assets.json`</ph> file is a persisted and complete set of the graph of NuGet dependencies and other information describing an app.</source>
          <target state="translated"><ph id="ph1">`project.assets.json`</ph> 檔案是一組持續性且完整的 NuGet 相依性圖形，也包含了描述應用程式的其他資訊。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>This file is read by other tools, such as <ph id="ph1">`dotnet build`</ph> and <ph id="ph2">`dotnet run`</ph>, enabling them to process the source code with a correct set of NuGet dependencies and binding resolutions.</source>
          <target state="translated">其他工具，例如 <ph id="ph1">`dotnet build`</ph> 和 <ph id="ph2">`dotnet run`</ph>，會讀取這個檔案，以便它們能用正確的 NuGet 相依性集合與繫結解析，處理原始程式碼。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">`dotnet run`</ph><ept id="p1">](../tools/dotnet-run.md)</ept> calls <ph id="ph2">`dotnet build`</ph> to ensure that the build targets have been built, and then calls <ph id="ph3">`dotnet &lt;assembly.dll&gt;`</ph> to run the target application.</source>
          <target state="translated"><bpt id="p1">[</bpt><ph id="ph1">`dotnet run`</ph><ept id="p1">](../tools/dotnet-run.md)</ept> 呼叫 <ph id="ph2">`dotnet build`</ph> 以確保建置目標已經建置好，然後呼叫 <ph id="ph3">`dotnet &lt;assembly.dll&gt;`</ph> 執行目標應用程式。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Alternatively, you can also execute <bpt id="p1">[</bpt><ph id="ph1">`dotnet build`</ph><ept id="p1">](../tools/dotnet-build.md)</ept> to compile the code without running the build console applications.</source>
          <target state="translated">或者，您也可以執行 <bpt id="p1">[</bpt><ph id="ph1">`dotnet build`</ph><ept id="p1">](../tools/dotnet-build.md)</ept> 來編譯程式碼，而不執行建置主控台應用程式。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>This results in a <ph id="ph1">`bin/Debug/netcoreapp1.0/Hello.dll`</ph> compiled application that can be run with <ph id="ph2">`dotnet bin\Debug\netcoreapp1.0\Hello.dll`</ph> on Windows, and <ph id="ph3">`dotnet bin/Debug/netcoreapp1.0/Hello.dll`</ph> on other systems.</source>
          <target state="translated">這會產生 <ph id="ph1">`bin/Debug/netcoreapp1.0/Hello.dll`</ph> 編譯的應用程式，您可以在 Windows 中使用 <ph id="ph2">`dotnet bin\Debug\netcoreapp1.0\Hello.dll`</ph>，以及在其他系統上使用 <ph id="ph3">`dotnet bin/Debug/netcoreapp1.0/Hello.dll`</ph> 來執行此應用程式。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>You may specify an additional parameter on the command-line (assuming you are on Windows):</source>
          <target state="translated">您可以在命令列上指定額外的參數 (假設您位於 Windows 上)：</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>As an advanced scenario, it's possible to build the application as a self-contained set of platform-specific files that can be deployed and run to a machine that doesn't necessarily have .NET Core installed.</source>
          <target state="translated">在進階案例中，可以建置應用程式做為一組獨立的平台專屬檔案，您可以將其部署到不需安裝 .NET Core 的電腦上並加以執行。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>.NET Core Application Deployment<ept id="p1">](../deploying/index.md)</ept> for details.</source>
          <target state="translated">如需詳細資訊，請參閱 <bpt id="p1">[</bpt>.NET Core 應用程式部署<ept id="p1">](../deploying/index.md)</ept>。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Augmenting the program</source>
          <target state="translated">擴充程式</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Let's change the file just a little bit.</source>
          <target state="translated">讓我們稍微變更檔案。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Fibonacci numbers are fun, so let's try that out:</source>
          <target state="translated">Fibonacci 數字很有趣，因此讓我們來試試：</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Program.cs`</ph>:</source>
          <target state="translated"><ph id="ph1">`Program.cs`</ph>:</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>And running the program (assuming you're on Windows, and have changed the project directory name to Fibonacci):</source>
          <target state="translated">並執行程式 (假設您是在 Windows 上，並且已將專案目錄名稱變更為 Fibonacci)︰</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>And that's it!</source>
          <target state="translated">就是這麼容易！</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>You can augment <ph id="ph1">`Program.cs`</ph> any way you like.</source>
          <target state="translated">您可以隨意擴充 <ph id="ph1">`Program.cs`</ph>。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Adding some new files</source>
          <target state="translated">新增一些新的檔案</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Single files are fine for simple one-off programs, but chances are you're going to want to break things out into multiple files if you're building anything which has multiple components.</source>
          <target state="translated">單一檔案很適合用於簡單的一次性程式，但有可能您會想要分成多個檔案，如果您在建置具有多個元件的任何項目的話。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Multiple files are a way to do that.</source>
          <target state="translated">多個檔案是這麼做的一個方法。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Create a new file and give it a unique namespace:</source>
          <target state="translated">建立新的檔案，並給它唯一的命名空間︰</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Next, include it in your <ph id="ph1">`Program.cs`</ph> file:</source>
          <target state="translated">接下來，將它包含在您的 <ph id="ph1">`Program.cs`</ph> 檔案︰</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>And finally, you can build it:</source>
          <target state="translated">最後，可以建置它︰</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Now the fun part: making the new file do something!</source>
          <target state="translated">再來是有趣的部分︰讓新的檔案執行某些動作！</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Example: A Fibonacci Sequence Generator</source>
          <target state="translated">範例︰Fibonacci 序列產生器</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Let's say you want to build off of the previous Fibonacci example by caching some Fibonacci values and add some recursive flair.</source>
          <target state="translated">假設您想要藉由快取某些 Fibonacci 值並新增一些遞迴效果，從先前的 Fibonacci 範例開始建置。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Your code for a <bpt id="p1">[</bpt>better Fibonacci example<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/console-apps/FibonacciBetterMsBuild)</ept> might use a new <ph id="ph1">`FibonacciGenerator.cs`</ph> file with the following code.</source>
          <target state="translated">為了取得<bpt id="p1">[</bpt>更好的 Fibonacci 範例<ept id="p1">](https://github.com/dotnet/docs/tree/master/samples/core/console-apps/FibonacciBetterMsBuild)</ept>，您的程式碼可能會搭配下列程式碼使用新的 <ph id="ph1">`FibonacciGenerator.cs`</ph> 檔案。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Now adjust the <ph id="ph1">`Main()`</ph> method in your <ph id="ph2">`Program.cs`</ph> file as shown below.</source>
          <target state="translated">現在，請如下所示調整 <ph id="ph2">`Program.cs`</ph> 檔案中的 <ph id="ph1">`Main()`</ph> 方法。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Finally, run it!</source>
          <target state="translated">最後，執行應用程式！</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>And that's it!</source>
          <target state="translated">就是這麼容易！</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Conclusion</source>
          <target state="translated">結論</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Hopefully this guide has helped you learn how to create a .NET Core console app, from the basics all the way up to a multi-project system with unit tests.</source>
          <target state="translated">希望本指南已協助您了解如何建立 .NET Core 主控台應用程式，從基礎一直到具有單元測試的多專案系統。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The next step is to create awesome console apps of your own!</source>
          <target state="translated">下一個步驟是建立您自己的出色主控台應用程式！</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>If a more advanced example of a console app interests you, check out the next tutorial: <bpt id="p1">[</bpt>Organizing and testing projects with the .NET Core command line (SDK Preview 3)<ept id="p1">](using-with-xplat-cli-msbuild-folders.md)</ept>.</source>
          <target state="translated">如果您有興趣了解主控台應用程式的更進階範例，請參閱下一個教學課程︰<bpt id="p1">[</bpt>使用 .NET Core 命令列組織和測試專案 (SDK Preview 3)<ept id="p1">](using-with-xplat-cli-msbuild-folders.md)</ept>。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>