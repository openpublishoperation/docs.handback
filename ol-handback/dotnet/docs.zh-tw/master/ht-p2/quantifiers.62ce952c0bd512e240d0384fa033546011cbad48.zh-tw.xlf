<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-eac019f" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">016ee9a4f05fdf36982c5b369780526296b53a7d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\base-types\quantifiers.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p2</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">034dc5c3c179472b5c0e1eeedf37e95e2f3add15</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ffc3bc319e6c6abfb248d3aede700258690d71ae</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Quantifiers in regular expressions</source>
          <target state="translated">規則運算式中的數量詞</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Quantifiers in regular expressions</source>
          <target state="translated">規則運算式中的數量詞</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET、.NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Quantifiers in regular expressions</source>
          <target state="translated">規則運算式中的數量詞</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Quantifiers specify how many instances of a character, group, or character class must be present in the input for a match to be found.</source>
          <target state="translated">數量詞指定輸入中要有多少字元、群組或字元類別的執行個體，才能找到相符項目。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The following table lists the quantifiers supported by .NET.</source>
          <target state="translated">下表列出 .NET 支援的數量詞。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Greedy quantifier</source>
          <target state="translated">Greedy (窮盡) 數量詞</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Lazy quantifier</source>
          <target state="translated">Lazy (最少) 數量詞</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">說明</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt><ph id="ph1">\*</ph>?<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt><ph id="ph1">\*</ph>?<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Match zero or more times.</source>
          <target state="translated">比對零或多次。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>+?<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>+?<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Match one or more times.</source>
          <target state="translated">比對一或多次。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>?<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>?<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>??<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>??<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Match zero or one time.</source>
          <target state="translated">比對零或一次。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>}<ept id="p3">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>}<ept id="p3">**</ept></target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>}?<ept id="p3">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>}?<ept id="p3">**</ept></target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Match exactly n times.</source>
          <target state="translated">確實比對 n 次。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,}<ept id="p3">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,}<ept id="p3">**</ept></target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,}?<ept id="p3">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,}?<ept id="p3">**</ept></target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Match at least n times.</source>
          <target state="translated">至少比對 n 次。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,<ept id="p3">**</ept><bpt id="p4">_</bpt>m<ept id="p4">_</ept><bpt id="p5">**</bpt>}<ept id="p5">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,<ept id="p3">**</ept><bpt id="p4">_</bpt>m<ept id="p4">_</ept><bpt id="p5">**</bpt>}<ept id="p5">**</ept></target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,<ept id="p3">**</ept><bpt id="p4">_</bpt>m<ept id="p4">_</ept><bpt id="p5">**</bpt>}?<ept id="p5">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,<ept id="p3">**</ept><bpt id="p4">_</bpt>m<ept id="p4">_</ept><bpt id="p5">**</bpt>}?<ept id="p5">**</ept></target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Match from n to m times.</source>
          <target state="translated">比對 n 到 m 次。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The quantities <bpt id="p1">*</bpt>n<ept id="p1">*</ept> and <bpt id="p2">*</bpt>m<ept id="p2">*</ept> are integer constants.</source>
          <target state="translated">數量 <bpt id="p1">*</bpt>n<ept id="p1">*</ept> 和 <bpt id="p2">*</bpt>m<ept id="p2">*</ept> 都是整數常數。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Ordinarily, quantifiers are greedy; they cause the regular expression engine to match as many occurrences of particular patterns as possible.</source>
          <target state="translated">數量詞通常是 Greedy (窮盡)。其會讓規則運算式引擎盡可能多地從每次出現的特定模式進行比對。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Appending the <ph id="ph1">`?`</ph> character to a quantifier makes it lazy; it causes the regular expression engine to match as few occurrences as possible.</source>
          <target state="translated">在數量詞中加上 <ph id="ph1">`?`</ph> 字元會使它 Lazy (最少)，造成規則運算式引擎比對的項目愈少愈好。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For a complete description of the difference between greedy and lazy quantifiers, see the section <bpt id="p1">[</bpt>Greedy and lazy quantifiers<ept id="p1">](#greedy-and-lazy-quantifiers)</ept> later in this topic.</source>
          <target state="translated">如需 Greedy (窮盡) 與 Lazy (最少) 數量詞差異的完整說明，請參閱本主題後文的 <bpt id="p1">[</bpt>Greedy (窮盡) 與 Lazy (最少) 數量詞<ept id="p1">](#greedy-and-lazy-quantifiers)</ept>一節。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Nesting quantifiers (for example, as the regular expression pattern <ph id="ph1">`(a*)*`</ph> does) can increase the number of comparisons that the regular expression engine must perform, as an exponential function of the number of characters in the input string.</source>
          <target state="translated">巢狀數量詞 (如規則運算式模式 <ph id="ph1">`(a*)*`</ph> 所做) 會增加規則運算式引擎必須執行的比較次數，如輸入字串中的字元數指數函數一樣。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For more information about this behavior and its workarounds, see <bpt id="p1">[</bpt>Backtracking in regular expressions<ept id="p1">](backtracking.md)</ept>.</source>
          <target state="translated">如需此行為及其因應措施的詳細資訊，請參閱<bpt id="p1">[</bpt>規則運算式中的回溯<ept id="p1">](backtracking.md)</ept>。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Regular expression quantifiers</source>
          <target state="translated">規則運算式的數量詞</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The following sections list the quantifiers supported by .NET regular expressions.</source>
          <target state="translated">下列章節會列出 .NET 規則運算式支援的數量詞。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">\*</ph>, +, ?, {, and } characters are encountered in a regular expression pattern, the regular expression engine interprets them as quantifiers or part of quantifier constructs unless they are included in a <bpt id="p1">[</bpt>character class<ept id="p1">](classes.md)</ept>.</source>
          <target state="translated">如果在規則運算式模式中同時出現了 <ph id="ph1">\*</ph>、+、?、{ 和 } 字元，除非它們包含在<bpt id="p1">[</bpt>字元類別<ept id="p1">](classes.md)</ept>中，否則規則運算式引擎會將它們解譯為數量詞或數量詞建構的一部分。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>To interpret these as literal characters outside a character class, you must escape them by preceding them with a backslash.</source>
          <target state="translated">若要在字元類別外將這些字元解譯為常值字元，您必須在它們前面加上反斜線以逸出字元。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For example, the string <ph id="ph1">`\*`</ph> in a regular expression pattern is interpreted as a literal asterisk ("*") character.</source>
          <target state="translated">例如，字串 <ph id="ph1">`\*`</ph> 在規則運算式模式中會解譯成常值星號 ("*") 字元。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Match zero or more times: <ph id="ph1">\*</ph></source>
          <target state="translated">比對零或多次：<ph id="ph1">\*</ph></target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">\*</ph> quantifier matches the preceding element zero or more times.</source>
          <target state="translated"><ph id="ph1">\*</ph> 數量詞會比對前置元素零次或多次。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>It is equivalent to the <bpt id="p1">**</bpt>{0,}<ept id="p1">**</ept> quantifier.</source>
          <target state="translated">它相當於 <bpt id="p1">**</bpt>{0,}<ept id="p1">**</ept> 數量詞。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt><ph id="ph1">\*</ph><ept id="p1">**</ept> is a greedy quantifier whose lazy equivalent is <bpt id="p2">**</bpt><ph id="ph2">\*</ph>?<ept id="p2">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt><ph id="ph1">\*</ph><ept id="p1">**</ept> 是 Greedy (窮盡) 數量詞，其 lazy (最少) 對等項目是 <bpt id="p2">**</bpt><ph id="ph2">\*</ph>?<ept id="p2">**</ept>。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The following example illustrates this regular expression.</source>
          <target state="translated">下例會示範此規則運算式。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Of the nine digits in the input string, five match the pattern and four (<ph id="ph1">`95`</ph>, <ph id="ph2">`929`</ph>, <ph id="ph3">`9129`</ph>, and <ph id="ph4">`9919`</ph>) do not.</source>
          <target state="translated">在輸入字串的九個數字中，有五個符合模式，四個 (<ph id="ph1">`95`</ph>、<ph id="ph2">`929`</ph>、<ph id="ph3">`9129`</ph> 和 <ph id="ph4">`9919`</ph>) 不符合。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The regular expression pattern is defined as shown in the following table.</source>
          <target state="translated">規則運算式模式的定義如下表所示。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">模式</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">描述</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Start at a word boundary.</source>
          <target state="translated">從字緣開始。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Match a "9" followed by zero or more "1" characters.</source>
          <target state="translated">比對後面接著零或多個 "1" 字元的 "9"。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Match zero or more "9" characters.</source>
          <target state="translated">比對零或多個 "9" 字元。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>End at a word boundary.</source>
          <target state="translated">在字邊界結束。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Match one or more times: +</source>
          <target state="translated">比對一或多次：+</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt><ph id="ph1">+</ph><ept id="p1">**</ept> quantifier matches the preceding element one or more times.</source>
          <target state="translated"><bpt id="p1">**</bpt><ph id="ph1">+</ph><ept id="p1">**</ept> 數量詞會比對前置元素一次或多次。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>It is equivalent to <bpt id="p1">**</bpt>{1,}<ept id="p1">**</ept>.</source>
          <target state="translated">相當於 <bpt id="p1">**</bpt>{1,}<ept id="p1">**</ept>。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt><ph id="ph1">+</ph><ept id="p1">**</ept> is a greedy quantifier whose lazy equivalent is <bpt id="p2">**</bpt>+?<ept id="p2">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt><ph id="ph1">+</ph><ept id="p1">**</ept> 是 Greedy (窮盡) 數量詞，其 Lazy (最少) 對等項目是 <bpt id="p2">**</bpt>+?<ept id="p2">**</ept>。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For example, the regular expression <ph id="ph1">`\ban+\w*?\b`</ph> tries to match entire words that begin with the letter <ph id="ph2">`a`</ph> followed by one or more instances of the letter <ph id="ph3">`n`</ph>.</source>
          <target state="translated">例如，規則運算式 <ph id="ph1">`\ban+\w*?\b`</ph> 會嘗試比對以字母 <ph id="ph2">`a`</ph> 開頭、接著一或多個字母 <ph id="ph3">`n`</ph> 的單字。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The following example illustrates this regular expression.</source>
          <target state="translated">下例會示範此規則運算式。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The regular expression matches the words <ph id="ph1">`an`</ph>, <ph id="ph2">`annual`</ph>, <ph id="ph3">`announcement`</ph>, and <ph id="ph4">`antique`</ph>, and correctly fails to match <ph id="ph5">`autumn`</ph> and <ph id="ph6">`all`</ph>.</source>
          <target state="translated">規則運算式會比對出單字 <ph id="ph1">`an`</ph>、<ph id="ph2">`annual`</ph>、<ph id="ph3">`announcement`</ph> 和 <ph id="ph4">`antique`</ph>，而不會比對出 <ph id="ph5">`autumn`</ph> 和 <ph id="ph6">`all`</ph>。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The regular expression pattern is defined as shown in the following table.</source>
          <target state="translated">規則運算式模式的定義如下表所示。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">模式</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">描述</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Start at a word boundary.</source>
          <target state="translated">從字緣開始。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Match an "a" followed by one or more "n" characters.</source>
          <target state="translated">比對 "a" 接著一或多個 "n" 字元。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Match a word character zero or more times, but as few times as possible.</source>
          <target state="translated">比對單字字元零或多次，但次數愈少愈好。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>End at a word boundary.</source>
          <target state="translated">在字邊界結束。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Match zero or one time: ?</source>
          <target state="translated">比對零或一次：?</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>?<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>?<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>quantifier matches the preceding element zero or one time.</source>
          <target state="translated">數量詞會比對前置元素零或一次。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>It is equivalent to <bpt id="p1">**</bpt>{0,1}<ept id="p1">**</ept>.</source>
          <target state="translated">相當於 <bpt id="p1">**</bpt>{0,1}<ept id="p1">**</ept>。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>?<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>?<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>is a greedy quantifier whose lazy equivalent is <bpt id="p1">**</bpt>??<ept id="p1">**</ept>.</source>
          <target state="translated">是 Greedy (窮盡) 數量詞，其 Lazy (最少) 對等項目是 <bpt id="p1">**</bpt>??<ept id="p1">**</ept>。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>For example, the regular expression <ph id="ph1">`\ban?\b`</ph> tries to match entire words that begin with the letter <ph id="ph2">`a`</ph> followed by zero or one instances of the letter <ph id="ph3">`n`</ph>.</source>
          <target state="translated">例如，規則運算式 <ph id="ph1">`\ban?\b`</ph> 會嘗試比對以字母 <ph id="ph2">`a`</ph> 開頭、接著零或一個字母 <ph id="ph3">`n`</ph> 的單字。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>In other words, it tries to match the words <ph id="ph1">`a`</ph> and <ph id="ph2">`an`</ph>.</source>
          <target state="translated">換言之，它會嘗試比對單字 <ph id="ph1">`a`</ph> 和 <ph id="ph2">`an`</ph>。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The following example illustrates this regular expression.</source>
          <target state="translated">下例會示範此規則運算式。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The regular expression pattern is defined as shown in the following table.</source>
          <target state="translated">規則運算式模式的定義如下表所示。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">模式</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">描述</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Start at a word boundary.</source>
          <target state="translated">從字緣開始。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Match an "a" followed by zero or one "n" character.</source>
          <target state="translated">比對 "a" 接著零或一個 "n" 字元。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>End at a word boundary.</source>
          <target state="translated">在字邊界結束。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Match exactly n times: {n}</source>
          <target state="translated">精確比對 n 次：{n}</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>}<ept id="p3">**</ept> quantifier matches the preceding element exactly <bpt id="p4">*</bpt>n<ept id="p4">*</ept> times, where <bpt id="p5">*</bpt>n<ept id="p5">*</ept> is any integer.</source>
          <target state="translated"><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>}<ept id="p3">**</ept> 數量詞會確實比對 <bpt id="p4">*</bpt>n<ept id="p4">*</ept> 次前置元素，其中 <bpt id="p5">*</bpt>n<ept id="p5">*</ept> 是任何整數。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>}<ept id="p3">**</ept> is a greedy quantifier whose lazy equivalent is <bpt id="p4">**</bpt>{<ept id="p4">**</ept><bpt id="p5">_</bpt>n<ept id="p5">_</ept><bpt id="p6">**</bpt>}?<ept id="p6">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>}<ept id="p3">**</ept> 是 Greedy (窮盡) 數量詞，其 Lazy (最少) 對等項目是 <bpt id="p4">**</bpt>{<ept id="p4">**</ept><bpt id="p5">_</bpt>n<ept id="p5">_</ept><bpt id="p6">**</bpt>}?<ept id="p6">**</ept>。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>For example, the regular expression <ph id="ph1">`\b\d+\,\d{3}\b`</ph> tries to match a word boundary followed by one or more decimal digits followed by three decimal digits followed by a word boundary.</source>
          <target state="translated">例如，規則運算式 <ph id="ph1">`\b\d+\,\d{3}\b`</ph> 會嘗試比對出字邊界、接著一或多個十進位數字、再接三個十進位數字、接著字邊界的項目。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The following example illustrates this regular expression.</source>
          <target state="translated">下例會示範此規則運算式。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The regular expression pattern is defined as shown in the following table.</source>
          <target state="translated">規則運算式模式的定義如下表所示。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">模式</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">描述</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Start at a word boundary.</source>
          <target state="translated">從字緣開始。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Match one or more decimal digits.</source>
          <target state="translated">比對一個或多個十進位數字。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Match a comma character.</source>
          <target state="translated">比對逗號字元。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Match three decimal digits.</source>
          <target state="translated">比對三個十進位數字。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>End at a word boundary.</source>
          <target state="translated">在字邊界結束。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Match at least n times: {n,}</source>
          <target state="translated">至少比對 n 次：{n,}</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,}<ept id="p3">**</ept> quantifier matches the preceding element at least <bpt id="p4">*</bpt>n<ept id="p4">*</ept> times, where <bpt id="p5">*</bpt>n<ept id="p5">*</ept> is any integer.</source>
          <target state="translated"><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,}<ept id="p3">**</ept> 數量詞至少會比對 <bpt id="p4">*</bpt>n<ept id="p4">*</ept> 次前置元素，其中 <bpt id="p5">*</bpt>n<ept id="p5">*</ept> 是任何整數。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,}<ept id="p3">**</ept> is a greedy quantifier whose lazy equivalent is <bpt id="p4">**</bpt>{<ept id="p4">**</ept><bpt id="p5">_</bpt>n<ept id="p5">_</ept><bpt id="p6">**</bpt>}?<ept id="p6">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,}<ept id="p3">**</ept> 是 Greedy (窮盡) 數量詞，其 Lazy (最少) 對等項目是 <bpt id="p4">**</bpt>{<ept id="p4">**</ept><bpt id="p5">_</bpt>n<ept id="p5">_</ept><bpt id="p6">**</bpt>}?<ept id="p6">**</ept>。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>For example, the regular expression <ph id="ph1">`\b\d{2,}\b\D+`</ph> tries to match a word boundary followed by at least two digits followed by a word boundary and a non-digit character.</source>
          <target state="translated">例如，規則運算式 <ph id="ph1">`\b\d{2,}\b\D+`</ph> 會嘗試比對出字邊界、接著至少兩個數字、再接字邊界、然後非數字字元的項目。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The following example illustrates this regular expression.</source>
          <target state="translated">下例會示範此規則運算式。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The regular expression fails to match the phrase "7 days" because it contains just one decimal digit, but it successfully matches the phrases "10 weeks and 300 years".</source>
          <target state="translated">規則運算式無法比對出片語「7 天」，因為它只包含一個十進位數字，但會成功比對出片語「10 週和 300 年」。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The regular expression pattern is defined as shown in the following table.</source>
          <target state="translated">規則運算式模式的定義如下表所示。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">模式</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">描述</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Start at a word boundary.</source>
          <target state="translated">從字緣開始。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Match at least two decimal digits.</source>
          <target state="translated">至少比對兩個十進位數字。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Match a word boundary.</source>
          <target state="translated">比對字邊界。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Match at least one non-decimal digit.</source>
          <target state="translated">至少比對一個非十進位數字。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Match between n and m times: {n,m}</source>
          <target state="translated">比對 n 到 m 次：{n,m}</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,<ept id="p3">**</ept><bpt id="p4">_</bpt>m<ept id="p4">_</ept><bpt id="p5">**</bpt>}<ept id="p5">**</ept> quantifier matches the preceding element at least <bpt id="p6">*</bpt>n<ept id="p6">*</ept> times, but no more than <bpt id="p7">*</bpt>m<ept id="p7">*</ept> times, where <bpt id="p8">*</bpt>n<ept id="p8">*</ept> and <bpt id="p9">*</bpt>m<ept id="p9">*</ept> are integers.</source>
          <target state="translated"><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,<ept id="p3">**</ept><bpt id="p4">_</bpt>m<ept id="p4">_</ept><bpt id="p5">**</bpt>}<ept id="p5">**</ept> 數量詞至少比對 <bpt id="p6">*</bpt>n<ept id="p6">*</ept> 次前置元素，但不超過 <bpt id="p7">*</bpt>m<ept id="p7">*</ept> 次，其中 <bpt id="p8">*</bpt>n<ept id="p8">*</ept> 和 <bpt id="p9">*</bpt>m<ept id="p9">*</ept> 都是整數。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,<ept id="p3">**</ept><bpt id="p4">_</bpt>m<ept id="p4">_</ept><bpt id="p5">**</bpt>}<ept id="p5">**</ept> is a greedy quantifier whose lazy equivalent is <bpt id="p6">**</bpt>{<ept id="p6">**</ept><bpt id="p7">_</bpt>n<ept id="p7">_</ept><bpt id="p8">**</bpt>,<ept id="p8">**</ept><bpt id="p9">_</bpt>m<ept id="p9">_</ept><bpt id="p10">**</bpt>}?<ept id="p10">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,<ept id="p3">**</ept><bpt id="p4">_</bpt>m<ept id="p4">_</ept><bpt id="p5">**</bpt>}<ept id="p5">**</ept> 是 Greedy (窮盡) 數量詞，其 Lazy (最少) 對等項目是 <bpt id="p6">**</bpt>{<ept id="p6">**</ept><bpt id="p7">_</bpt>n<ept id="p7">_</ept><bpt id="p8">**</bpt>,<ept id="p8">**</ept><bpt id="p9">_</bpt>m<ept id="p9">_</ept><bpt id="p10">**</bpt>}?<ept id="p10">**</ept>。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>In the following example, the regular expression <ph id="ph1">`(00\s){2,4}`</ph> tries to match between two and four occurrences of two zero digits followed by a space.</source>
          <target state="translated">在下例中，規則運算式 <ph id="ph1">`(00\s){2,4}`</ph> 會嘗試比對 2 至 4 次兩個數字零後接空格的項目。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Note that the final portion of the input string includes this pattern five times rather than the maximum of four.</source>
          <target state="translated">請注意，輸入字串有此模式的最後部分出現了五次，而非上限四次。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>However, only the initial portion of this substring (up to the space and the fifth pair of zeros) matches the regular expression pattern.</source>
          <target state="translated">但只有這個子字串的初始部分 (最多到空格和第五對零) 符合規則運算式模式。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Match zero or more times (lazy match): <ph id="ph1">\*</ph>?</source>
          <target state="translated">比對零或多次 (Lazy (最少) 比對)：<ph id="ph1">\*</ph>?</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt><ph id="ph1">\*</ph>?<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt><ph id="ph1">\*</ph>?<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>quantifier matches the preceding element zero or more times, but as few times as possible.</source>
          <target state="translated">數量詞會比對零或多次前置元素，但次數愈少愈好。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>It is the lazy counterpart of the greedy quantifier <bpt id="p1">**</bpt><ph id="ph1">\*</ph><ept id="p1">**</ept>.</source>
          <target state="translated">它是 Greedy (窮盡) 數量詞 <bpt id="p1">**</bpt><ph id="ph1">\*</ph><ept id="p1">**</ept> 的對應 Lazy (最少)。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>In the following example, the regular expression <ph id="ph1">`\b\w*?oo\w*?\b`</ph> matches all words that contain the string <ph id="ph2">`oo`</ph>.</source>
          <target state="translated">在下例中，規則運算式 <ph id="ph1">`\b\w*?oo\w*?\b`</ph> 會比對包含字串 <ph id="ph2">`oo`</ph> 的所有文字。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The regular expression pattern is defined as shown in the following table.</source>
          <target state="translated">規則運算式模式的定義如下表所示。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">模式</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">描述</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Start at a word boundary.</source>
          <target state="translated">從字緣開始。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Match zero or more word characters, but as few characters as possible.</source>
          <target state="translated">比對零或多個單字字元，但字元愈少愈好。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Match the string "oo".</source>
          <target state="translated">比對字串 "oo"。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Match zero or more word characters, but as few characters as possible.</source>
          <target state="translated">比對零或多個單字字元，但字元愈少愈好。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>End on a word boundary.</source>
          <target state="translated">在字邊界結束。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Match one or more times (lazy match): +?</source>
          <target state="translated">比對零或多次 (Lazy (最少) 比對)：+?</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>+?<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>+?<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>quantifier matches the preceding element one or more times, but as few times as possible.</source>
          <target state="translated">數量詞會比對一或多次前置元素，但次數愈少愈好。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>It is the lazy counterpart of the greedy quantifier <bpt id="p1">**</bpt><ph id="ph1">+</ph><ept id="p1">**</ept>.</source>
          <target state="translated">它是 Greedy (窮盡) 數量詞 <bpt id="p1">**</bpt><ph id="ph1">+</ph><ept id="p1">**</ept> 的對應 Lazy (最少)。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>For example, the regular expression <ph id="ph1">`\b\w+?\b`</ph> matches one or more characters separated by word boundaries.</source>
          <target state="translated">例如，規則運算式 <ph id="ph1">`\b\w+?\b`</ph> 會比對一或多個以字邊界分隔的字元。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The following example illustrates this regular expression.</source>
          <target state="translated">下例會示範此規則運算式。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Match zero or one time (lazy match): ??</source>
          <target state="translated">比對零或一次 (Lazy (最少) 比對)：??</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>??<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>??<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>quantifier matches the preceding element zero or one time, but as few times as possible.</source>
          <target state="translated">量詞會比對零或一次前置元素，但次數愈少愈好。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>It is the lazy counterpart of the greedy quantifier <bpt id="p1">**</bpt>?<ept id="p1">**</ept>.</source>
          <target state="translated">它是 Greedy (窮盡) 量詞 <bpt id="p1">**</bpt>?<ept id="p1">**</ept> 的對應 Lazy (最少)。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>For example, the regular expression <ph id="ph1">`^\s*(System.)??Console.Write(Line)??\(??`</ph> attempts to match the strings "Console.Write" or "Console.WriteLine".</source>
          <target state="translated">例如，規則運算式 <ph id="ph1">`^\s*(System.)??Console.Write(Line)??\(??`</ph> 會嘗試比對字串 "Console.Write" 或 "Console.WriteLine"。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The string can also include "System."</source>
          <target state="translated">字串也可以在 "Console" 前包含 "System."，</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>before "Console", and it can be followed by an opening parenthesis.</source>
          <target state="translated">後面也可以是左括號。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>The string must be at the beginning of a line, although it can be preceded by white space.</source>
          <target state="translated">字串必須位在行的開頭，雖然前面可以是空格。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The following example illustrates this regular expression.</source>
          <target state="translated">下例會示範此規則運算式。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>The regular expression pattern is defined as shown in the following table.</source>
          <target state="translated">規則運算式模式的定義如下表所示。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">模式</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">描述</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Match the start of the input stream.</source>
          <target state="translated">比對輸入資料流的開頭。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Match zero or more white-space characters.</source>
          <target state="translated">比對零個以上的空白字元。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Match zero or one occurrence of the string "System.".</source>
          <target state="translated">比對出現零或一次的字串 "System."。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Match the string "Console.Write".</source>
          <target state="translated">比對字串 "Console.Write"。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Match zero or one occurrence of the string "Line".</source>
          <target state="translated">比對出現零或一次的字串 "Line"。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Match zero or one occurrence of the opening parenthesis.</source>
          <target state="translated">比對出現零或一次的左括號。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Match exactly n times (lazy match): {n}?</source>
          <target state="translated">精確比對 n 次 (Lazy (最少) 比對)：{n}?</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>}?<ept id="p3">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>}?<ept id="p3">**</ept></target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>quantifier matches the preceding element exactly <bpt id="p1">*</bpt>n<ept id="p1">*</ept> times, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is any integer.</source>
          <target state="translated">數量詞會確實比對 <bpt id="p1">*</bpt>n<ept id="p1">*</ept> 次前置元素，其中 <bpt id="p2">*</bpt>n<ept id="p2">*</ept> 是任何整數。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>It is the lazy counterpart of the greedy quantifier <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>}+<ept id="p3">**</ept>.</source>
          <target state="translated">它是 Greedy (窮盡) 數量詞 <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>}+<ept id="p3">**</ept> 的對應 Lazy (最少)。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>In the following example, the regular expression <ph id="ph1">`\b(\w{3,}?\.){2}?\w{3,}?\b`</ph> is used to identify a Web site address.</source>
          <target state="translated">下例會使用規則運算式 <ph id="ph1">`\b(\w{3,}?\.){2}?\w{3,}?\b`</ph> 來識別網站位址。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Note that it matches "www.microsoft.com" and "msdn.microsoft.com", but does not match "mywebsite" or "mycompany.com".</source>
          <target state="translated">請注意它會比對 "www.microsoft.com" 和 "msdn.microsoft.com"，但不比對 "mywebsite" 或 "mycompany.com"。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>The regular expression pattern is defined as shown in the following table.</source>
          <target state="translated">規則運算式模式的定義如下表所示。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">模式</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">描述</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Start at a word boundary.</source>
          <target state="translated">從字緣開始。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Match at least 3 word characters, but as few characters as possible, followed by a dot or period character.</source>
          <target state="translated">比對至少 3 個單字字元，但字元愈少愈好，後面接著點或句號字元。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>This is the first capturing group.</source>
          <target state="translated">這是第一個擷取群組。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Match the pattern in the first group two times, but as few times as possible.</source>
          <target state="translated">比對兩次第一個群組中的模式，但次數愈少愈好。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>End the match on a word boundary.</source>
          <target state="translated">結束字邊界比對。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Match at least n times (lazy match): {n,}?</source>
          <target state="translated">至少比對 n 次 (Lazy (最少) 比對)：{n,}?</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,}?<ept id="p3">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,}?<ept id="p3">**</ept></target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>quantifier matches the preceding element at least <bpt id="p1">*</bpt>n<ept id="p1">*</ept> times, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is any integer, but as few times as possible.</source>
          <target state="translated">數量詞至少會比對 <bpt id="p1">*</bpt>n<ept id="p1">*</ept> 次前置元素，其中 <bpt id="p2">*</bpt>n<ept id="p2">*</ept> 是任何整數，但次數愈少愈好。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>It is the lazy counterpart of the greedy quantifier <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,}<ept id="p3">**</ept>.</source>
          <target state="translated">它是 Greedy (窮盡) 數量詞 <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,}<ept id="p3">**</ept> 的對應 Lazy (最少)。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>See the example for the <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>}?<ept id="p3">**</ept></source>
          <target state="translated">請參閱上一節示範的 <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>}?<ept id="p3">**</ept></target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>quantifier in the previous section for an illustration.</source>
          <target state="translated">數量詞範例。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>The regular expression in that example uses the <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,}<ept id="p3">**</ept> quantifier to match a string that has at least three characters followed by a period.</source>
          <target state="translated">在該例中，規則運算式使用 <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,}<ept id="p3">**</ept> 數量詞來比對至少三個字元後接句號的字串。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Match between n and m times (lazy match): {n,m}?</source>
          <target state="translated">比對 n 到 m 次 (Lazy ( 最少) 比對)：{n,m}?</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,<ept id="p3">**</ept><bpt id="p4">_</bpt>m<ept id="p4">_</ept><bpt id="p5">**</bpt>}?<ept id="p5">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,<ept id="p3">**</ept><bpt id="p4">_</bpt>m<ept id="p4">_</ept><bpt id="p5">**</bpt>}?<ept id="p5">**</ept></target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>quantifier matches the preceding element between <bpt id="p1">*</bpt>n<ept id="p1">*</ept> and <bpt id="p2">*</bpt>m<ept id="p2">*</ept> times, where <bpt id="p3">*</bpt>n<ept id="p3">*</ept> and <bpt id="p4">*</bpt>m<ept id="p4">*</ept> are integers, but as few times as possible.</source>
          <target state="translated">數量詞比對 <bpt id="p1">*</bpt>n<ept id="p1">*</ept> 至 <bpt id="p2">*</bpt>m<ept id="p2">*</ept> 次前置元素，其中 <bpt id="p3">*</bpt>n<ept id="p3">*</ept> 和 <bpt id="p4">*</bpt>m<ept id="p4">*</ept> 是任何整數，但次數愈少愈好。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>It is the lazy counterpart of the greedy quantifier <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,<ept id="p3">**</ept><bpt id="p4">_</bpt>m<ept id="p4">_</ept><bpt id="p5">**</bpt>}<ept id="p5">**</ept>.</source>
          <target state="translated">它是 Greedy (窮盡) 數量詞 <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,<ept id="p3">**</ept><bpt id="p4">_</bpt>m<ept id="p4">_</ept><bpt id="p5">**</bpt>}<ept id="p5">**</ept> 的對應 Lazy (最少)。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>In the following example, the regular expression <ph id="ph1">`\b[A-Z](\w*\s+){1,10}?[.!?]`</ph> matches sentences that contain between one and ten words.</source>
          <target state="translated">在下例中，規則運算式 <ph id="ph1">`\b[A-Z](\w*\s+){1,10}?[.!?]`</ph> 會比對包含一到十個單字的句子。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>It matches all the sentences in the input string except for one sentence that contains 18 words.</source>
          <target state="translated">它會比對輸入字串中的所有句子，除了包含 18 個字的句子。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>The regular expression pattern is defined as shown in the following table.</source>
          <target state="translated">規則運算式模式的定義如下表所示。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">模式</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">描述</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Start at a word boundary.</source>
          <target state="translated">從字緣開始。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Match an uppercase character from A to Z.</source>
          <target state="translated">比對從 A 到 Z 的大寫字元。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Match zero or more word characters, followed by one or more white-space characters.</source>
          <target state="translated">比對零或多個後接一或多個空白字元的單字字元。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>This is the first capture group.</source>
          <target state="translated">這是第一個擷取群組。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Match the previous pattern between 1 and 10 times, but as few times as possible.</source>
          <target state="translated">比對 1 到 10 次上一個模式，但次數愈少愈好。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Match any one of the punctuation characters ".", "!", or "?".</source>
          <target state="translated">比對任一標點符號字元 "."、"!" 或 "?"。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Greedy and lazy quantifiers</source>
          <target state="translated">Greedy (窮盡) 與 Lazy (最少) 數量詞</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>A number of the quantifiers have two versions:</source>
          <target state="translated">數個數量詞有兩種版本︰</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>A greedy version.</source>
          <target state="translated">Greedy (窮盡) 版本。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>A greedy quantifier tries to match an element as many times as possible.</source>
          <target state="translated">Greedy (窮盡) 數量詞會嘗試盡可能多次比對項目。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>•A non-greedy (or lazy) version.</source>
          <target state="translated">• 非 Greedy (窮盡) (或 Lazy (最少)) 版本。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>A non-greedy quantifier tries to match an element as few times as possible.</source>
          <target state="translated">非 Greedy (窮盡) 數量詞會嘗試盡可能少比對項目。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>You can turn a greedy quantifier into a lazy quantifier by simply adding a <bpt id="p1">**</bpt>?<ept id="p1">**</ept>.</source>
          <target state="translated">只要加上 <bpt id="p1">**</bpt>?<ept id="p1">**</ept> 就可以將 Greedy (窮盡) 數量詞變成 Lazy (最少) 數量詞。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Consider a simple regular expression that is intended to extract the last four digits from a string of numbers such as a credit card number.</source>
          <target state="translated">請考慮要擷取數字字串末四碼的簡單規則運算式，例如信用卡號碼。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>The version of the regular expression that uses the <bpt id="p1">**</bpt><ph id="ph1">\*</ph><ept id="p1">**</ept> greedy quantifier is <ph id="ph2">`\b.*([0-9]{4})\b`</ph>.</source>
          <target state="translated">使用 <bpt id="p1">**</bpt><ph id="ph1">\*</ph><ept id="p1">**</ept> Greedy (窮盡) 數量詞的規則運算式版本為 <ph id="ph2">`\b.*([0-9]{4})\b`</ph>。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>However, if a string contains two numbers, this regular expression matches the last four digits of the second number only, as the following example shows.</source>
          <target state="translated">但若字串包含兩組數字，這個規則運算式只會比對第二組數字的末四碼，如下列範例所示。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>The regular expression fails to match the first number because the <bpt id="p1">**</bpt><ph id="ph1">\*</ph><ept id="p1">**</ept> quantifier tries to match the previous element as many times as possible in the entire string, and so it finds its match at the end of the string.</source>
          <target state="translated">規則運算式無法比對第一組數字，因為 <bpt id="p1">**</bpt><ph id="ph1">\*</ph><ept id="p1">**</ept> 數量詞嘗試在整個字串中盡可能多次比對上一個元素，所以在字串的結尾找到符合項目。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>This is not the desired behavior.</source>
          <target state="translated">這不是我們所要的結果。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Instead, you can use the <bpt id="p1">**</bpt><ph id="ph1">\*</ph>?<ept id="p1">**</ept></source>
          <target state="translated">您可以改用 <bpt id="p1">**</bpt><ph id="ph1">\*</ph>?<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>lazy quantifier to extract digits from both numbers, as the following example shows.</source>
          <target state="translated">兩個數字的確實位數的 Lazy (最少) 數量詞，如下例所示。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>In most cases, regular expressions with greedy and lazy quantifiers return the same matches.</source>
          <target state="translated">在大部分情況下，有 Greedy (窮盡) 和 Lazy (最少) 數量詞的規則運算式會傳回相同的結果。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>They most commonly return different results when they are used with the wildcard (<bpt id="p1">**</bpt>.<ept id="p1">**</ept>) metacharacter, which matches any character.</source>
          <target state="translated">與萬用字元 (<bpt id="p1">**</bpt>.<ept id="p1">**</ept>) 中繼字元一起使用時最常傳回不同的結果，會比對任何字元。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Quantifiers and empty matches</source>
          <target state="translated">數量詞與空白比對</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>The quantifiers <bpt id="p1">**</bpt><ph id="ph1">\*</ph><ept id="p1">**</ept>, <bpt id="p2">**</bpt><ph id="ph2">+</ph><ept id="p2">**</ept>, and <bpt id="p3">**</bpt>{<ept id="p3">**</ept><bpt id="p4">_</bpt>n<ept id="p4">_</ept><bpt id="p5">**</bpt>,<ept id="p5">**</ept><bpt id="p6">_</bpt>m<ept id="p6">_</ept><bpt id="p7">**</bpt>}<ept id="p7">**</ept> and their lazy counterparts never repeat after an empty match when the minimum number of captures has been found.</source>
          <target state="translated">找到擷取的最小數字時，數量詞 <bpt id="p1">**</bpt><ph id="ph1">\*</ph><ept id="p1">**</ept>、<bpt id="p2">**</bpt><ph id="ph2">+</ph><ept id="p2">**</ept> 和 <bpt id="p3">**</bpt>{<ept id="p3">**</ept><bpt id="p4">_</bpt>n<ept id="p4">_</ept><bpt id="p5">**</bpt>,<ept id="p5">**</ept><bpt id="p6">_</bpt>m<ept id="p6">_</ept><bpt id="p7">**</bpt>}<ept id="p7">**</ept> 及其 Lazy (最少) 對等項在空白比對後絕不重複。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>This rule prevents quantifiers from entering infinite loops on empty subexpression matches when the maximum number of possible group captures is infinite or near infinite.</source>
          <target state="translated">當可能群組擷取的最大數目是無限或接近無限時，此規則可防止數量詞在碰到空白子運算式比對時進入無限迴圈。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>For example, the following code shows the result of a call to the <bpt id="p1">[</bpt>Regex.Match<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Match(System.String))</ept> method with the regular expression pattern <ph id="ph1">`(a?)*,`</ph> which matches zero or one "a" character zero or more times.</source>
          <target state="translated">例如，下列程式碼顯示以比對零或多次零或一個 "a" 字元的規則運算式模式 <ph id="ph1">`(a?)*,`</ph> 呼叫 <bpt id="p1">[</bpt>Regex.Match<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Match(System.String))</ept> 方法的結果。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Note that the single capturing group captures each "a" as well as <bpt id="p1">[</bpt>String.Empty<ept id="p1">](xref:System.String.Empty)</ept>, but that there is no second empty match, because the first empty match causes the quantifier to stop repeating.</source>
          <target state="translated">請注意，單一擷取群組會擷取每個 "a" 以及 <bpt id="p1">[</bpt>String.Empty<ept id="p1">](xref:System.String.Empty)</ept>，但沒有第二個空白符合項目，因為第一個空白符合項目讓數量詞停止重複。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>To see the practical difference between a capturing group that defines a minimum and a maximum number of captures and one that defines a fixed number of captures, consider the regular expression patterns <ph id="ph1">`(a\1|(?(1)\1)){0,2}`</ph> and <ph id="ph2">`(a\1|(?(1)\1)){2}`</ph>.</source>
          <target state="translated">若要查看定義擷取數目上下限的擷取群組和定義固定擷取數目的擷取群組之間的實際差異，請考慮規則運算式模式 <ph id="ph1">`(a\1|(?(1)\1)){0,2}`</ph> 和 <ph id="ph2">`(a\1|(?(1)\1)){2}`</ph>。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Both regular expressions consist of a single capturing group, which is defined as shown in the following table.</source>
          <target state="translated">這兩個規則運算式都是由單一擷取群組組成，如下表所示加以定義。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">模式</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">描述</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Either match "a" along with the value of the first captured group …</source>
          <target state="translated">比對 "a" 及第一個擷取的群組值...</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>…</source>
          <target state="translated">…</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>or test whether the first captured group has been defined.</source>
          <target state="translated">或測試第一個擷取的群組是否已定義。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>(Note that the <bpt id="p1">**</bpt>(?(1)<ept id="p1">**</ept> construct does not define a capturing group.)</source>
          <target state="translated">(請注意，<bpt id="p1">**</bpt>(?(1)<ept id="p1">**</ept> 建構不會定義擷取群組。)</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>If the first captured group exists, match its value.</source>
          <target state="translated">如果第一個擷取的群組存在，即比對其值。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>If the group does not exist, the group will match <bpt id="p1">[</bpt>String.Empty<ept id="p1">](xref:System.String.Empty)</ept>.</source>
          <target state="translated">如果群組不存在，群組會比對 <bpt id="p1">[</bpt>String.Empty<ept id="p1">](xref:System.String.Empty)</ept>。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>The first regular expression tries to match this pattern between zero and two times; the second, exactly two times.</source>
          <target state="translated">第一個規則運算式嘗試比對這種模式零到兩次，第二個不多不少就兩次。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Because the first pattern reaches its minimum number of captures with its first capture of <bpt id="p1">[</bpt>String.Empty<ept id="p1">](xref:System.String.Empty)</ept>, it never repeats to try to match <ph id="ph1">`a\1;`</ph> the <ph id="ph2">`{0,2}`</ph> quantifier allows only empty matches in the last iteration.</source>
          <target state="translated">因為第一個模式達到其第一個 <bpt id="p1">[</bpt>String.Empty<ept id="p1">](xref:System.String.Empty)</ept> 擷取的擷取數目下限，所以絕不會重複嘗試比對 <ph id="ph1">`a\1;`</ph>，<ph id="ph2">`{0,2}`</ph> 數量詞在最後一個反覆項目中只允許空白比對。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>In contrast, the second regular expression does match "a" because it evaluates <ph id="ph1">`a\1`</ph> a second time; the minimum number of iterations, 2, forces the engine to repeat after an empty match.</source>
          <target state="translated">相反地，第二個規則運算式不比對 "a"，因為它會評估 <ph id="ph1">`a\1`</ph> 第二次，反覆的下限 2，會強制引擎在空白比對後重複。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>See also</source>
          <target state="translated">請參閱</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Regular expression language - quick reference<ept id="p1">](quick-ref.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>規則運算式語言 - 快速參考<ept id="p1">](quick-ref.md)</ept></target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Backtracking in regular expressions<ept id="p1">](backtracking.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>規則運算式中的回溯<ept id="p1">](backtracking.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>