<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">166eb731d41e009c374ba55f929eed302793ecd0</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\linq\how-to-add-custom-methods-for-linq-queries.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1c2cbf6a624a9d2a49c5809ca6c2ec5b88dc5754</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bab00aae8047bb822ef597b4b3557b0809db7cad</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Add Custom Methods for LINQ Queries (Visual Basic) | Microsoft Docs</source>
          <target state="translated">如何︰ 新增 LINQ 查詢 (Visual Basic) 的自訂方法 |Microsoft 文件</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Add Custom Methods for LINQ Queries (Visual Basic)</source>
          <target state="translated">如何︰ 新增 LINQ 查詢 (Visual Basic) 的自訂方法</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You can extend the set of methods that you can use for LINQ queries by adding extension methods to the &lt;xref:System.Collections.Generic.IEnumerable%601&gt; interface.</source>
          <target state="translated">您可以擴充一組您可以加入的擴充方法使用 LINQ 查詢的方法&lt;xref:System.Collections.Generic.IEnumerable%601&gt;介面。&lt;/xref:System.Collections.Generic.IEnumerable%601&gt;</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For example, in addition to the standard average or maximum operations, you can create a custom aggregate method to compute a single value from a sequence of values.</source>
          <target state="translated">例如，除了標準的平均值或最大作業中，您可以建立自訂的彙總方法，以計算值序列的單一值。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You can also create a method that works as a custom filter or a specific data transform for a sequence of values and returns a new sequence.</source>
          <target state="translated">您也可以建立自訂篩選器為特定的資料轉換的值序列的運作方式，並傳回新的順序的方法。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Examples of such methods are &lt;xref:System.Linq.Enumerable.Distinct%2A&gt;, &lt;xref:System.Linq.Enumerable.Skip%2A&gt;, and &lt;xref:System.Linq.Enumerable.Reverse%2A&gt;.</source>
          <target state="translated">這類方法的範例包括&lt;xref:System.Linq.Enumerable.Distinct%2A&gt;， &lt;xref:System.Linq.Enumerable.Skip%2A&gt;，和&lt;xref:System.Linq.Enumerable.Reverse%2A&gt;.&lt;/xref:System.Linq.Enumerable.Reverse%2A&gt; &lt;/xref:System.Linq.Enumerable.Skip%2A&gt; &lt;/xref:System.Linq.Enumerable.Distinct%2A&gt;</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>When you extend the &lt;xref:System.Collections.Generic.IEnumerable%601&gt; interface, you can apply your custom methods to any enumerable collection.</source>
          <target state="translated">當您延伸&lt;xref:System.Collections.Generic.IEnumerable%601&gt;介面，您可以將自訂的方法套用至任何可列舉集合。&lt;/xref:System.Collections.Generic.IEnumerable%601&gt;</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Extension Methods<ept id="p1">](../../../../visual-basic/programming-guide/language-features/procedures/extension-methods.md)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>擴充方法<ept id="p1">](../../../../visual-basic/programming-guide/language-features/procedures/extension-methods.md)</ept>。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Adding an Aggregate Method</source>
          <target state="translated">加入彙總的方法</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>An aggregate method computes a single value from a set of values.</source>
          <target state="translated">彙總方法會計算一組值的單一值。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>LINQ provides several aggregate methods, including &lt;xref:System.Linq.Enumerable.Average%2A&gt;, &lt;xref:System.Linq.Enumerable.Min%2A&gt;, and &lt;xref:System.Linq.Enumerable.Max%2A&gt;.</source>
          <target state="translated">LINQ 提供數種彙總的方法，包括&lt;xref:System.Linq.Enumerable.Average%2A&gt;， &lt;xref:System.Linq.Enumerable.Min%2A&gt;，和&lt;xref:System.Linq.Enumerable.Max%2A&gt;.&lt;/xref:System.Linq.Enumerable.Max%2A&gt; &lt;/xref:System.Linq.Enumerable.Min%2A&gt; &lt;/xref:System.Linq.Enumerable.Average%2A&gt;</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You can create your own aggregate method by adding an extension method to the &lt;xref:System.Collections.Generic.IEnumerable%601&gt; interface.</source>
          <target state="translated">您可以藉由新增擴充方法來建立您自己的彙總方法&lt;xref:System.Collections.Generic.IEnumerable%601&gt;介面。&lt;/xref:System.Collections.Generic.IEnumerable%601&gt;</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The following code example shows how to create an extension method called <ph id="ph1">`Median`</ph> to compute a median for a sequence of numbers of type <ph id="ph2">`double`</ph>.</source>
          <target state="translated">下列程式碼範例示範如何建立擴充方法呼叫<ph id="ph1">`Median`</ph>來計算類型的數字序列的中位數<ph id="ph2">`double`</ph>。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You call this extension method for any enumerable collection in the same way you call other aggregate methods from the &lt;xref:System.Collections.Generic.IEnumerable%601&gt; interface.</source>
          <target state="translated">任何可列舉集合呼叫此擴充方法呼叫從其他彙總方法的方式相同&lt;xref:System.Collections.Generic.IEnumerable%601&gt;介面。&lt;/xref:System.Collections.Generic.IEnumerable%601&gt;</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In Visual Basic, you can either use a method call or standard query syntax for the <ph id="ph1">`Aggregate`</ph> or <ph id="ph2">`Group By`</ph> clause.</source>
          <target state="translated">在 Visual Basic 中，您可以使用方法呼叫或標準查詢語法<ph id="ph1">`Aggregate`</ph>或<ph id="ph2">`Group By`</ph>子句。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Aggregate Clause<ept id="p1">](../../../../visual-basic/language-reference/queries/aggregate-clause.md)</ept> and <bpt id="p2">[</bpt>Group By Clause<ept id="p2">](../../../../visual-basic/language-reference/queries/group-by-clause.md)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>Aggregate 子句<ept id="p1">](../../../../visual-basic/language-reference/queries/aggregate-clause.md)</ept>和<bpt id="p2">[</bpt>By 子句群組<ept id="p2">](../../../../visual-basic/language-reference/queries/group-by-clause.md)</ept>。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The following code example shows how to use the <ph id="ph1">`Median`</ph> method for an array of type <ph id="ph2">`double`</ph>.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">`Median`</ph>方法類型的陣列<ph id="ph2">`double`</ph>。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>1<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>1<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>2<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>2<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Overloading an Aggregate Method to Accept Various Types</source>
          <target state="translated">多載接受各種類型的彙總方法</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You can overload your aggregate method so that it accepts sequences of various types.</source>
          <target state="translated">您可以多載您彙總的方法，讓它可接受各種類型的序列。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The standard approach is to create an overload for each type.</source>
          <target state="translated">標準的方法是建立每種類型的多載。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Another approach is to create an overload that will take a generic type and convert it to a specific type by using a delegate.</source>
          <target state="translated">另一種方法是建立多載會採用泛型型別，並使用委派來將它轉換成特定的型別。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>You can also combine both approaches.</source>
          <target state="translated">您也可以結合這兩種方法。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>To create an overload for each type</source>
          <target state="translated">若要建立每種類型的多載</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You can create a specific overload for each type that you want to support.</source>
          <target state="translated">您可以建立您想要支援每種類型的特定多載。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The following code example shows an overload of the <ph id="ph1">`Median`</ph> method for the <ph id="ph2">`integer`</ph> type.</source>
          <target state="translated">下列程式碼範例顯示的多載<ph id="ph1">`Median`</ph>方法<ph id="ph2">`integer`</ph>型別。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>3<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>3<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You can now call the <ph id="ph1">`Median`</ph> overloads for both <ph id="ph2">`integer`</ph> and <ph id="ph3">`double`</ph> types, as shown in the following code:</source>
          <target state="translated">您現在可以呼叫<ph id="ph1">`Median`</ph>兩個多載<ph id="ph2">`integer`</ph>和<ph id="ph3">`double`</ph>型別，如下列程式碼所示︰</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>4<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>4<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>5<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>5<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>6<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>6<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>To create a generic overload</source>
          <target state="translated">若要建立泛型多載</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>You can also create an overload that accepts a sequence of generic objects.</source>
          <target state="translated">您也可以建立多載可接受的泛型物件序列。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This overload takes a delegate as a parameter and uses it to convert a sequence of objects of a generic type to a specific type.</source>
          <target state="translated">這個多載會接受委派做為參數，並使用該物件的泛型型別序列轉換成特定的型別。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The following code shows an overload of the <ph id="ph1">`Median`</ph> method that takes the &lt;xref:System.Func%602&gt; delegate as a parameter.</source>
          <target state="translated">下列程式碼顯示的多載<ph id="ph1">`Median`</ph>採用方法&lt;xref:System.Func%602&gt;委派做為參數。&lt;/xref:System.Func%602&gt;</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This delegate takes an object of generic type T and returns an object of type <ph id="ph1">`double`</ph>.</source>
          <target state="translated">這個委派會採用泛型型別 T 的物件，並傳回型別的物件<ph id="ph1">`double`</ph>。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>You can now call the <ph id="ph1">`Median`</ph> method for a sequence of objects of any type.</source>
          <target state="translated">您現在可以呼叫<ph id="ph1">`Median`</ph>方法序列的任何類型的物件。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If the type does not have its own method overload, you have to pass a delegate parameter.</source>
          <target state="translated">如果型別沒有自己的方法多載，您必須傳遞委派參數。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>In Visual Basic, you can use a lambda expression for this purpose.</source>
          <target state="translated">在 Visual Basic 中，您可以使用 lambda 運算式，針對此目的。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Also, if you use the <ph id="ph1">`Aggregate`</ph> or <ph id="ph2">`Group By`</ph> clause instead of the method call, you can pass any value or expression that is in the scope this clause.</source>
          <target state="translated">此外，如果您使用<ph id="ph1">`Aggregate`</ph>或<ph id="ph2">`Group By`</ph>子句，而不是方法呼叫，您可以傳遞任何值或運算式，這個子句會在範圍。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The following example code shows how to call the <ph id="ph1">`Median`</ph> method for an array of integers and an array of strings.</source>
          <target state="translated">下列程式碼範例示範如何呼叫<ph id="ph1">`Median`</ph>整數的陣列和字串陣列的方法。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For strings, the median for the lengths of strings in the array is calculated.</source>
          <target state="translated">字串，計算中間值的陣列中的字串長度。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The example shows how to pass the &lt;xref:System.Func%602&gt; delegate parameter to the <ph id="ph1">`Median`</ph> method for each case.</source>
          <target state="translated">此範例顯示如何傳遞&lt;xref:System.Func%602&gt;委派參數<ph id="ph1">`Median`</ph>每個案例的方法。&lt;/xref:System.Func%602&gt;</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>8<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>8<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Adding a Method That Returns a Collection</source>
          <target state="translated">加入可傳回集合的方法</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>You can extend the &lt;xref:System.Collections.Generic.IEnumerable%601&gt; interface with a custom query method that returns a sequence of values.</source>
          <target state="translated">您可以擴充&lt;xref:System.Collections.Generic.IEnumerable%601&gt;介面的自訂查詢方法，傳回的值序列。&lt;/xref:System.Collections.Generic.IEnumerable%601&gt;</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>In this case, the method must return a collection of type &lt;xref:System.Collections.Generic.IEnumerable%601&gt;.</source>
          <target state="translated">在此情況下，此方法必須傳回型別&lt;xref:System.Collections.Generic.IEnumerable%601&gt;.&lt;/xref:System.Collections.Generic.IEnumerable%601&gt;集合</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Such methods can be used to apply filters or data transforms to a sequence of values.</source>
          <target state="translated">這種方法可用來將篩選條件或資料轉換套用至值的序列。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The following example shows how to create an extension method named <ph id="ph1">`AlternateElements`</ph> that returns every other element in a collection, starting from the first element.</source>
          <target state="translated">下列範例示範如何建立名為擴充方法<ph id="ph1">`AlternateElements`</ph>傳回每個項目在集合中，從第一個項目開始。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>9<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>9<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>You can call this extension method for any enumerable collection just as you would call other methods from the &lt;xref:System.Collections.Generic.IEnumerable%601&gt; interface, as shown in the following code:</source>
          <target state="translated">您可以呼叫這個擴充方法的任何可列舉集合，就像您就可以呼叫其他方法，從&lt;xref:System.Collections.Generic.IEnumerable%601&gt;介面，如下列程式碼所示︰&lt;/xref:System.Collections.Generic.IEnumerable%601&gt;</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">另請參閱</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</source>
          <target state="translated">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;&lt;/xref:System.Collections.Generic.IEnumerable%601&gt;</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Extension Methods<ept id="p1">](../../../../visual-basic/programming-guide/language-features/procedures/extension-methods.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>擴充方法<ept id="p1">](../../../../visual-basic/programming-guide/language-features/procedures/extension-methods.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>