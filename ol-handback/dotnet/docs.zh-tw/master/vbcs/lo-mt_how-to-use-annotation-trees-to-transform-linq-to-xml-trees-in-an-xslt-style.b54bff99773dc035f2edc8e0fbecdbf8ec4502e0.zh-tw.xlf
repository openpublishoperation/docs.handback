<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">17324fb6dca653aa3c15e3bad2fcc5ac35828bef</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\linq\how-to-use-annotation-trees-to-transform-linq-to-xml-trees-in-an-xslt-style.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b944c4dc4ba979ee448051a03493d1755466425f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fd49b1daddbcbbd088ce85c8bb2b413dc2c57b16</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Use Annotations to Transform LINQ to XML Trees in an XSLT Style (Visual Basic) | Microsoft Docs</source>
          <target state="translated">如何︰ 使用註釋將 LINQ to XML 樹狀結構中的 XSLT 樣式 (Visual Basic) 轉換 |Microsoft 文件</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Use Annotations to Transform LINQ to XML Trees in an XSLT Style (Visual Basic)</source>
          <target state="translated">如何︰ 使用註釋將 LINQ to XML 樹狀結構中的 XSLT 樣式 (Visual Basic) 轉換</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Annotations can be used to facilitate transforms of an XML tree.</source>
          <target state="translated">附註可用於簡化 XML 樹狀的轉換。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Some XML documents are "document centric with mixed content."</source>
          <target state="translated">有些 XML 文件為「中央具有混合內容的文件」。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>With such documents, you don't necessarily know the shape of child nodes of an element.</source>
          <target state="translated">使用這類文件時，您不一定要知道項目子節點的組織結構。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For instance, a node that contains text may look like this:</source>
          <target state="translated">例如，包含文字的節點類似如下：</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For any given text node, there may be any number of child <ph id="ph1">`&lt;b&gt;`</ph> and <ph id="ph2">`&lt;i&gt;`</ph> elements.</source>
          <target state="translated">針對任何指定的文字節點，可能會有任何數目的 <ph id="ph1">`&lt;b&gt;`</ph> 和 <ph id="ph2">`&lt;i&gt;`</ph> 子項目。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This approach extends to a number of other situations: such as, pages that can contain a variety of child elements, such as regular paragraphs, bulleted paragraphs, and bitmaps.</source>
          <target state="translated">這個方法會延伸到數個其他情況︰ 例如，可以包含各種子項目，例如一般段落、 分項段落與點陣圖的頁面。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Cells in a table may contain text, drop down lists, or bitmaps.</source>
          <target state="translated">資料表中的儲存格可能包含文字、下拉式清單或點陣圖。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>One of the primary characteristics of document centric XML is that you do not know which child element any particular element will have.</source>
          <target state="translated">文件中心 XML 的其中一個主要特性為，您不知道任何特定項目將會有哪個子項目。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If you want to transform elements in a tree where you don't necessarily know much about the children of the elements that you want to transform, then this approach that uses annotations is an effective approach.</source>
          <target state="translated">如果您要在樹狀結構中，轉換您不一定了解太多您要轉換之項目子系的項目，則使用附註的這個方法是一個有效的方法。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The summary of the approach is:</source>
          <target state="translated">方法的摘要如下：</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>First, annotate elements in the tree with a replacement element.</source>
          <target state="translated">首先，在樹狀結構中，以替代項目附註項目。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Second, iterate through the entire tree, creating a new tree where you replace each element with its annotation.</source>
          <target state="translated">接著，逐一查看整個樹狀結構，建立您以其附註取代每個項目的新樹狀結構。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This example implements the iteration and creation of the new tree in a function named <ph id="ph1">`XForm`</ph>.</source>
          <target state="translated">這個範本會在名稱為 <ph id="ph1">`XForm`</ph> 的函式中，實作反覆運算並建立新的樹狀結構。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In detail, the approach consists of:</source>
          <target state="translated">就細節而言，此方法包含：</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Execute one or more LINQ to XML queries that return the set of elements that you want to transform from one shape to another.</source>
          <target state="translated">執行一或多個 LINQ to XML 查詢，這些查詢會傳回您要從一個組織結構轉換為另一個組織結構的項目集。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For each element in the query, add a new &lt;xref:System.Xml.Linq.XElement&gt; object as an annotation to the element.</source>
          <target state="translated">針對每個項目查詢中，加入新&lt;xref:System.Xml.Linq.XElement&gt;物件做為項目附註。&lt;/xref:System.Xml.Linq.XElement&gt;</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This new element will replace the annotated element in the new, transformed tree.</source>
          <target state="translated">這個新項目將會取代已轉換之新樹狀中的標註項目。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This is simple code to write, as demonstrated by the example.</source>
          <target state="translated">如本範例的示範，這是容易撰寫的簡單程式碼。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The new element that is added as an annotation can contain new child nodes; it can form a sub-tree with any desired shape.</source>
          <target state="translated">加入為附註的新項目可以包含新的子節點；它可以形成具有任何所需組織結構的子樹狀結構。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>There is a special rule: If a child node of the new element is in a different namespace, a namespace that is made up for this purpose (in this example, the namespace is <ph id="ph1">`http://www.microsoft.com/LinqToXmlTransform/2007`</ph>), then that child element is not copied to the new tree.</source>
          <target state="translated">有一個特殊規則：如果新項目的子節點位於不同的命名空間中，也就是針對此目的所形成的命名空間 (在此範例中，命名空間為 <ph id="ph1">`http://www.microsoft.com/LinqToXmlTransform/2007`</ph>)，則不會將該子項目複製到新的樹狀結構中。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Instead, if the namespace is the above mentioned special namespace, and the local name of the element is <ph id="ph1">`ApplyTransforms`</ph>, then the child nodes of the element in the source tree are iterated, and copied to the new tree (with the exception that annotated child elements are themselves transformed according to these rules).</source>
          <target state="translated">但是，如果命名空間為上述的特殊命名空間，而且該項目的區域名稱為 <ph id="ph1">`ApplyTransforms`</ph>，則會反覆運算來源樹狀結構中項目的子節點，並複製到新的樹狀結構 (除非附註的子項目會根據這些規則自我轉換) 中。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This is somewhat analogous to the specification of transforms in XSL.</source>
          <target state="translated">這有點類似於 XSL 中的轉換規格。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The query that selects a set of nodes is analogous to the XPath expression for a template.</source>
          <target state="translated">選取一組節點的查詢類似於範本的 XPath 運算式。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The code to create the new &lt;xref:System.Xml.Linq.XElement&gt; that is saved as an annotation is analogous to the sequence constructor in XSL, and the <ph id="ph1">`ApplyTransforms`</ph> element is analogous in function to the <ph id="ph2">`xsl:apply-templates`</ph> element in XSL.</source>
          <target state="translated">若要建立新的程式碼&lt;xref:System.Xml.Linq.XElement&gt;會另存為附註是類似於 XSL 中的序列建構函式和<ph id="ph1">`ApplyTransforms`</ph>函式中的項目相當<ph id="ph2">`xsl:apply-templates`</ph>XSL 中的項目。&lt;/xref:System.Xml.Linq.XElement&gt;</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>One advantage to taking this approach - as you formulate queries, you are always writing queries on the unmodified source tree.</source>
          <target state="translated">採取此種方法的其中一個優點是，當您編寫查詢時，您永遠都是在未修改的來源樹狀上撰寫查詢。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You need not worry about how modifications to the tree affect the queries that you are writing.</source>
          <target state="translated">您不必擔心樹狀結構的修改會如何影響您要撰寫的查詢。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Transforming a Tree</source>
          <target state="translated">轉換樹狀結構</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This first example renames all <ph id="ph1">`Paragraph`</ph> nodes to <ph id="ph2">`para`</ph>.</source>
          <target state="translated">這個第一個範例會將所有 <ph id="ph1">`Paragraph`</ph> 節點重新命名為 <ph id="ph2">`para`</ph>。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This example produces the following output:</source>
          <target state="translated">這個範例會產生下列輸出：</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>A More Complicated Transform</source>
          <target state="translated">更複雜的轉換</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The following example queries the tree and calculates the average and sum of the <ph id="ph1">`Data`</ph> elements, and adds them as new elements to the tree.</source>
          <target state="translated">下列範例會查詢樹狀結構並計算 <ph id="ph1">`Data`</ph> 項目的平均值和總和，然後將它們加入為樹狀結構中的新項目。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This example produces the following output:</source>
          <target state="translated">這個範例會產生下列輸出：</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Effecting the Transform</source>
          <target state="translated">實行轉換</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>A small function, <ph id="ph1">`XForm`</ph>, creates a new transformed tree from the original, annotated tree.</source>
          <target state="translated"><ph id="ph1">`XForm`</ph> 這個小函式會從原始的附註樹狀結構建立轉換的新樹狀結構。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The pseudo code for the function is quite simple:</source>
          <target state="translated">函式的虛擬程式碼相當簡單：</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Following is the implementation of this function:</source>
          <target state="translated">以下是此函式的實作：</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Complete Example</source>
          <target state="translated">完整範例</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The following code is a complete example that includes the <ph id="ph1">`XForm`</ph> function.</source>
          <target state="translated">下列程式碼是包含 <ph id="ph1">`XForm`</ph> 函式的完整範例。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>It includes a few of the typical uses of this type of transform:</source>
          <target state="translated">此範例包含一些此類型轉換的一般用法：</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This example produces the following output:</source>
          <target state="translated">這個範例會產生下列輸出：</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">另請參閱</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Advanced LINQ to XML Programming (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/advanced-linq-to-xml-programming.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>進階的 LINQ to XML 程式設計 (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/advanced-linq-to-xml-programming.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>