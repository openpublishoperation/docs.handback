<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6185d1676f2cd160c9c3e855cce4a6d2bbe2ffb4</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\operators-and-expressions\comparison-operators.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">23ccc5ef5746d7a1078cfe7bbb22f6fe76510ac1</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">11cbba47e33608767df1aa8318c945f0cc249d0e</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Handback file name: lo-mt_comparison-operators.6ff3a444cbf098d18928e8969c60fe5e54f8b301.de-de is different with handoff file name: comparison-operators.6ff3a444cbf098d18928e8969c60fe5e54f8b301.de-de.</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Comparison Operators in Visual Basic | Microsoft Docs</source>
          <target state="translated">Vergleichsoperatoren in Visual Basic | Microsoft-Dokumentation</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Comparison Operators in Visual Basic</source>
          <target state="translated">Comparison Operators in Visual Basic</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Comparison operators compare two expressions and return a <ph id="ph1">`Boolean`</ph> value that represents the relationship of their values.</source>
          <target state="translated">Vergleichsoperatoren vergleichen zwei Ausdrücke und geben einen <ph id="ph1">`Boolean`</ph> Wert, der die Beziehung zwischen ihren Werten darstellt.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>There are operators for comparing numeric values, operators for comparing strings, and operators for comparing objects.</source>
          <target state="translated">Es gibt Operatoren für das Vergleichen von numerischen Werten, Operatoren für Zeichenfolgen und Operatoren zum Vergleichen von Objekten.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>All three types of operators are discussed herein.</source>
          <target state="translated">Alle drei Typen von Operatoren werden in diesem Dokument erläutert.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Comparing Numeric Values</source>
          <target state="translated">Vergleichen von numerischen Werten</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> compares numeric values using six numeric comparison operators.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>Vergleicht numerische Werte mithilfe von sechs numerischen Vergleichsoperatoren.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Each operator takes as operands two expressions that evaluate to numeric values.</source>
          <target state="translated">Jeder Operator akzeptiert zwei Ausdrücke, die numerische Werte ergeben, als Operanden.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The following table lists the operators and shows examples of each.</source>
          <target state="translated">In der folgenden Tabelle werden die Operatoren aufgelistet und zeigt Beispiele für jeden.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Operator</source>
          <target state="translated">Operator</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Condition tested</source>
          <target state="translated">Getestete Bedingung</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">Beispiele</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`=`</ph> (Equality)</source>
          <target state="translated"><ph id="ph1">`=`</ph>(Gleichheit)</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Is the value of the first expression equal to the value of the second?</source>
          <target state="translated">Ist der Wert des ersten Ausdrucks gleich dem Wert des zweiten?</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`23`</ph>   <ph id="ph2">`=`</ph>   <ph id="ph3">`33    ' False`</ph></source>
          <target state="translated"><ph id="ph1">`23`</ph>   <ph id="ph2">`=`</ph>   <ph id="ph3">`33    ' False`</ph></target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`23`</ph>   <ph id="ph2">`=`</ph>   <ph id="ph3">`23    ' True`</ph></source>
          <target state="translated"><ph id="ph1">`23`</ph>   <ph id="ph2">`=`</ph>   <ph id="ph3">`23    ' True`</ph></target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`23`</ph>   <ph id="ph2">`=`</ph>   <ph id="ph3">`12    ' False`</ph></source>
          <target state="translated"><ph id="ph1">`23`</ph>   <ph id="ph2">`=`</ph>   <ph id="ph3">`12    ' False`</ph></target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`&lt;&gt;`</ph> (Inequality)</source>
          <target state="translated"><ph id="ph1">`&lt;&gt;`</ph>(Ungleichheit)</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Is the value of the first expression unequal to the value of the second?</source>
          <target state="translated">Ist der Wert des ersten Ausdrucks ungleich dem Wert des zweiten?</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`23`</ph>   <ph id="ph2">`&lt;&gt;`</ph>   <ph id="ph3">`33    ' True`</ph></source>
          <target state="translated"><ph id="ph1">`23`</ph>   <ph id="ph2">`&lt;&gt;`</ph>   <ph id="ph3">`33    ' True`</ph></target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`23`</ph>   <ph id="ph2">`&lt;&gt;`</ph>   <ph id="ph3">`23    ' False`</ph></source>
          <target state="translated"><ph id="ph1">`23`</ph>   <ph id="ph2">`&lt;&gt;`</ph>   <ph id="ph3">`23    ' False`</ph></target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`23`</ph>   <ph id="ph2">`&lt;&gt;`</ph>   <ph id="ph3">`12    ' True`</ph></source>
          <target state="translated"><ph id="ph1">`23`</ph>   <ph id="ph2">`&lt;&gt;`</ph>   <ph id="ph3">`12    ' True`</ph></target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`&lt;`</ph> (Less than)</source>
          <target state="translated"><ph id="ph1">`&lt;`</ph>(Kleiner als)</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Is the value of the first expression less than the value of the second?</source>
          <target state="translated">Ist der Wert des ersten Ausdrucks kleiner als der Wert des zweiten?</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`23`</ph>   <ph id="ph2">`&lt;`</ph>   <ph id="ph3">`33    ' True`</ph></source>
          <target state="translated"><ph id="ph1">`23`</ph>   <ph id="ph2">`&lt;`</ph>   <ph id="ph3">`33    ' True`</ph></target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`23`</ph>   <ph id="ph2">`&lt;`</ph>   <ph id="ph3">`23    ' False`</ph></source>
          <target state="translated"><ph id="ph1">`23`</ph>   <ph id="ph2">`&lt;`</ph>   <ph id="ph3">`23    ' False`</ph></target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`23`</ph>   <ph id="ph2">`&lt;`</ph>   <ph id="ph3">`12    ' False`</ph></source>
          <target state="translated"><ph id="ph1">`23`</ph>   <ph id="ph2">`&lt;`</ph>   <ph id="ph3">`12    ' False`</ph></target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`&gt;`</ph> (Greater than)</source>
          <target state="translated"><ph id="ph1">`&gt;`</ph>(Größer als)</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Is the value of the first expression greater than the value of the second?</source>
          <target state="translated">Ist der Wert des ersten Ausdrucks größer als der Wert des zweiten?</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`23`</ph>   <ph id="ph2">`&gt;`</ph>   <ph id="ph3">`33    ' False`</ph></source>
          <target state="translated"><ph id="ph1">`23`</ph>   <ph id="ph2">`&gt;`</ph>   <ph id="ph3">`33    ' False`</ph></target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`23`</ph>   <ph id="ph2">`&gt;`</ph>   <ph id="ph3">`23    ' False`</ph></source>
          <target state="translated"><ph id="ph1">`23`</ph>   <ph id="ph2">`&gt;`</ph>   <ph id="ph3">`23    ' False`</ph></target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`23`</ph>   <ph id="ph2">`&gt;`</ph>   <ph id="ph3">`12    ' True`</ph></source>
          <target state="translated"><ph id="ph1">`23`</ph>   <ph id="ph2">`&gt;`</ph>   <ph id="ph3">`12    ' True`</ph></target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`&lt;=`</ph> (Less than or equal to)</source>
          <target state="translated"><ph id="ph1">`&lt;=`</ph>(Kleiner als oder gleich)</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Is the value of the first expression less than or equal to the value of the second?</source>
          <target state="translated">Ist der Wert des ersten Ausdrucks kleiner oder gleich dem Wert des zweiten?</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`23`</ph>   <ph id="ph2">`&lt;=`</ph>   <ph id="ph3">`33    ' True`</ph></source>
          <target state="translated"><ph id="ph1">`23`</ph>   <ph id="ph2">`&lt;=`</ph>   <ph id="ph3">`33    ' True`</ph></target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`23`</ph>   <ph id="ph2">`&lt;=`</ph>   <ph id="ph3">`23    ' True`</ph></source>
          <target state="translated"><ph id="ph1">`23`</ph>   <ph id="ph2">`&lt;=`</ph>   <ph id="ph3">`23    ' True`</ph></target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`23`</ph>   <ph id="ph2">`&lt;=`</ph>   <ph id="ph3">`12    ' False`</ph></source>
          <target state="translated"><ph id="ph1">`23`</ph>   <ph id="ph2">`&lt;=`</ph>   <ph id="ph3">`12    ' False`</ph></target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`&gt;=`</ph> (Greater than or equal to)</source>
          <target state="translated"><ph id="ph1">`&gt;=`</ph>(Größer als oder gleich)</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Is the value of the first expression greater than or equal to the value of the second?</source>
          <target state="translated">Ist der Wert des ersten Ausdrucks, größer als oder gleich dem Wert des zweiten?</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`23`</ph>   <ph id="ph2">`&gt;=`</ph>   <ph id="ph3">`33    ' False`</ph></source>
          <target state="translated"><ph id="ph1">`23`</ph>   <ph id="ph2">`&gt;=`</ph>   <ph id="ph3">`33    ' False`</ph></target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`23`</ph>   <ph id="ph2">`&gt;=`</ph>   <ph id="ph3">`23    ' True`</ph></source>
          <target state="translated"><ph id="ph1">`23`</ph>   <ph id="ph2">`&gt;=`</ph>   <ph id="ph3">`23    ' True`</ph></target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`23`</ph>   <ph id="ph2">`&gt;=`</ph>   <ph id="ph3">`12    ' True`</ph></source>
          <target state="translated"><ph id="ph1">`23`</ph>   <ph id="ph2">`&gt;=`</ph>   <ph id="ph3">`12    ' True`</ph></target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Comparing Strings</source>
          <target state="translated">Vergleichen von Zeichenfolgen</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> compares strings using the <bpt id="p1">[</bpt>Like Operator<ept id="p1">](../../../../visual-basic/language-reference/operators/like-operator.md)</ept> as well as the numeric comparison operators.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>vergleicht Zeichenfolgen anhand der <bpt id="p1">[</bpt>Like-Operator<ept id="p1">](../../../../visual-basic/language-reference/operators/like-operator.md)</ept> sowie den numerischen Vergleichsoperatoren.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Like`</ph> operator allows you to specify a pattern.</source>
          <target state="translated">Die <ph id="ph1">`Like`</ph> Operator können Sie ein Muster angeben.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The string is then compared against the pattern, and if it matches, the result is <ph id="ph1">`True`</ph>.</source>
          <target state="translated">Die Zeichenfolge wird dann mit dem Muster verglichen, und bei Übereinstimmung ist das Ergebnis ist <ph id="ph1">`True`</ph>.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Otherwise, the result is <ph id="ph1">`False`</ph>.</source>
          <target state="translated">Andernfalls das Ergebnis ist <ph id="ph1">`False`</ph>.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The numeric operators allow you to compare <ph id="ph1">`String`</ph> values based on their sort order, as the following example shows.</source>
          <target state="translated">Mit den numerischen Operatoren können Sie vergleichen <ph id="ph1">`String`</ph> Werte basierend auf ihrer Sortierreihenfolge wie im folgenden Beispiel gezeigt.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The result in the preceding example is <ph id="ph1">`True`</ph> because the first character in the first string sorts before the first character in the second string.</source>
          <target state="translated">Das Ergebnis im vorherigen Beispiel ist <ph id="ph1">`True`</ph> , da das erste Zeichen in der ersten Zeichenfolge vor dem ersten Zeichen in der zweiten Zeichenfolge sortiert.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>If the first characters were equal, the comparison would continue to the next character in both strings, and so on.</source>
          <target state="translated">Wenn die ersten Zeichen gleich wären, würde der Vergleich weiterhin auf das nächste Zeichen in beiden Zeichenfolgen usw..</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>You can also test equality of strings using the equality operator, as the following example shows.</source>
          <target state="translated">Sie können auch mit dem Gleichheitsoperator, wie im folgenden Beispiel gezeigt Zeichenfolgen auf Gleichheit testen.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>If one string is a prefix of another, such as "aa" and "aaa", the longer string is considered to be greater than the shorter string.</source>
          <target state="translated">Wenn eine Zeichenfolge einer anderen vorangestellt, z. B. "aa" und "aaa", gilt die längere Zeichenfolge größer als die kürzere Zeichenfolge sein.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The following example illustrates this.</source>
          <target state="translated">Dies wird anhand des folgenden Beispiels veranschaulicht.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The sort order is based on either a binary comparison or a textual comparison depending on the setting of <ph id="ph1">`Option Compare`</ph>.</source>
          <target state="translated">Die Sortierreihenfolge basiert auf einem binären Vergleich oder einen Textvergleich abhängig von der Einstellung des <ph id="ph1">`Option Compare`</ph>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>For more information see <bpt id="p1">[</bpt>Option Compare Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/option-compare-statement.md)</ept>.</source>
          <target state="translated">Weitere Informationen finden Sie unter <bpt id="p1">[</bpt>Option Compare-Anweisung<ept id="p1">](../../../../visual-basic/language-reference/statements/option-compare-statement.md)</ept>.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Comparing Objects</source>
          <target state="translated">Vergleichen von Objekten</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> compares two object reference variables with the <bpt id="p1">[</bpt>Is Operator<ept id="p1">](../../../../visual-basic/language-reference/operators/is-operator.md)</ept> and the <bpt id="p2">[</bpt>IsNot Operator<ept id="p2">](../../../../visual-basic/language-reference/operators/isnot-operator.md)</ept>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>Vergleicht zwei Objektverweisvariablen mit dem <bpt id="p1">[</bpt>Is-Operator<ept id="p1">](../../../../visual-basic/language-reference/operators/is-operator.md)</ept> und <bpt id="p2">[</bpt>IsNot-Operator<ept id="p2">](../../../../visual-basic/language-reference/operators/isnot-operator.md)</ept>.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>You can use either of these operators to determine if two reference variables refer to the same object instance.</source>
          <target state="translated">Sie können beiden Operatoren verwenden, um festzustellen, ob zwei Verweisvariablen auf die gleiche Objektinstanz verweisen.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The following example illustrates this.</source>
          <target state="translated">Dies wird anhand des folgenden Beispiels veranschaulicht.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrOperators#65<ept id="p2">](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/comparison-operators_1.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrOperators&amp;#65;<ept id="p2">](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/comparison-operators_1.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>In the preceding example, <ph id="ph1">`x Is y`</ph> evaluates to <ph id="ph2">`True`</ph>, because both variables refer to the same instance.</source>
          <target state="translated">Im vorangehenden Beispiel <ph id="ph1">`x Is y`</ph> ergibt <ph id="ph2">`True`</ph>, da beide Variablen auf dieselbe Instanz verweisen.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Contrast this result with the following example.</source>
          <target state="translated">Vergleichen Sie dieses Ergebnis mit dem folgenden Beispiel.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrOperators#66<ept id="p2">](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/comparison-operators_2.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrOperators&amp;#66;<ept id="p2">](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/comparison-operators_2.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>In the preceding example, <ph id="ph1">`x Is y`</ph> evaluates to <ph id="ph2">`False`</ph>, because although the variables refer to objects of the same type, they refer to different instances of that type.</source>
          <target state="translated">Im vorangehenden Beispiel <ph id="ph1">`x Is y`</ph> ergibt <ph id="ph2">`False`</ph>, da die Variablen zwar auf Objekte vom gleichen Typ, jedoch auf unterschiedliche Instanzen dieses Typs verweisen.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>When you want to test for two objects not pointing to the same instance, the <ph id="ph1">`IsNot`</ph> operator lets you avoid a grammatically clumsy combination of <ph id="ph2">`Not`</ph> and <ph id="ph3">`Is`</ph>.</source>
          <target state="translated">Wenn Sie zwei Objekte nicht auf dieselbe Instanz verweisen möchten die <ph id="ph1">`IsNot`</ph> Operator können Sie eine umständliche Grammatik einer Kombination von vermeiden <ph id="ph2">`Not`</ph> und <ph id="ph3">`Is`</ph>.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The following example illustrates this.</source>
          <target state="translated">Dies wird anhand des folgenden Beispiels veranschaulicht.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrOperators#67<ept id="p2">](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/comparison-operators_3.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrOperators&amp;#67;<ept id="p2">](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/comparison-operators_3.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>In the preceding example, <ph id="ph1">`If a IsNot b`</ph> is equivalent to <ph id="ph2">`If Not a Is b`</ph>.</source>
          <target state="translated">Im vorangehenden Beispiel <ph id="ph1">`If a IsNot b`</ph> entspricht <ph id="ph2">`If Not a Is b`</ph>.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Comparing Object Type</source>
          <target state="translated">Vergleichen des Objekttyps</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>You can test whether an object is of a particular type with the <ph id="ph1">`TypeOf`</ph>...<ph id="ph2">`Is`</ph> expression.</source>
          <target state="translated">Sie können testen, ob ein Objekt eines bestimmten Typs mit der <ph id="ph1">`TypeOf`</ph>... <ph id="ph2">`Is`</ph> Ausdruck.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The syntax is as follows:</source>
          <target state="translated">Die Syntax lautet wie folgt:</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`typename`</ph> specifies an interface type, then the <ph id="ph2">`TypeOf`</ph>...<ph id="ph3">`Is`</ph> expression returns <ph id="ph4">`True`</ph> if the object implements the interface type.</source>
          <target state="translated">Wenn <ph id="ph1">`typename`</ph> gibt einen Schnittstellentyp, der <ph id="ph2">`TypeOf`</ph>... <ph id="ph3">`Is`</ph> gibt <ph id="ph4">`True`</ph> , wenn das Objekt den Schnittstellentyp implementiert.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`typename`</ph> is a class type, then the expression returns <ph id="ph2">`True`</ph> if the object is an instance of the specified class or of a class that derives from the specified class.</source>
          <target state="translated">Wenn <ph id="ph1">`typename`</ph> ein Klassentyp ist, gibt der Ausdruck <ph id="ph2">`True`</ph> Wenn das Objekt eine Instanz der angegebenen Klasse oder eine Klasse, die von der angegebenen Klasse abgeleitet wird.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The following example illustrates this.</source>
          <target state="translated">Dies wird anhand des folgenden Beispiels veranschaulicht.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrOperators#68<ept id="p2">](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/comparison-operators_4.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrOperators&amp;#68;<ept id="p2">](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/comparison-operators_4.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>In the preceding example, the <ph id="ph1">`TypeOf x Is Control`</ph> expression evaluates to <ph id="ph2">`True`</ph> because the type of <ph id="ph3">`x`</ph> is <ph id="ph4">`Button`</ph>, which inherits from <ph id="ph5">`Control`</ph>.</source>
          <target state="translated">Im vorhergehenden Beispiel die <ph id="ph1">`TypeOf x Is Control`</ph> Ausdruck ergibt <ph id="ph2">`True`</ph> da der Typ des <ph id="ph3">`x`</ph> ist <ph id="ph4">`Button`</ph>, erbt von <ph id="ph5">`Control`</ph>.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>TypeOf Operator<ept id="p1">](../../../../visual-basic/language-reference/operators/typeof-operator.md)</ept>.</source>
          <target state="translated">Weitere Informationen finden Sie unter <bpt id="p1">[</bpt>TypeOf-Operator<ept id="p1">](../../../../visual-basic/language-reference/operators/typeof-operator.md)</ept>.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">Siehe auch</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Value Comparisons<ept id="p1">](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/value-comparisons.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Wertvergleiche<ept id="p1">](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/value-comparisons.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Comparison Operators<ept id="p1">](../../../../visual-basic/language-reference/operators/comparison-operators.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Vergleichsoperatoren<ept id="p1">](../../../../visual-basic/language-reference/operators/comparison-operators.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Operators<ept id="p1">](../../../../visual-basic/language-reference/operators/index.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Operatoren<ept id="p1">](../../../../visual-basic/language-reference/operators/index.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Arithmetic Operators in Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/arithmetic-operators.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Arithmetische Operatoren in Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/arithmetic-operators.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Concatenation Operators in Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/concatenation-operators.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Verkettungsoperatoren in Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/concatenation-operators.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Logical and Bitwise Operators in Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/logical-and-bitwise-operators.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>Logische und bitweise Operatoren in Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/logical-and-bitwise-operators.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>