<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9c4716765199798e50c4318b290f8a2d76ef5841</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\linq\concepts-and-terminology-functional-transformation.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cd5803ed9a248b4bd60fc7ea879f9c96c047ef0f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6b64e56314df8aae6ed63927c7cf91f69523f5db</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Handback file name: lo-mt_concepts-and-terminology-functional-transformation.b2d8335f23837451d6389ecea21e021e6a90701b.de-de is different with handoff file name: concepts-and-terminology-functional-transformation.b2d8335f23837451d6389ecea21e021e6a90701b.de-de.</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Concepts and Terminology (Functional Transformation) (Visual Basic) | Microsoft Docs</source>
          <target state="translated">Konzepte und Terminologie (funktionale Transformation) (Visual Basic) | Microsoft-Dokumentation</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Concepts and Terminology (Functional Transformation) (Visual Basic)</source>
          <target state="translated">Konzepte und Terminologie (funktionale Transformation) (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic introduces the concepts and terminology of pure functional transformations.</source>
          <target state="translated">Dieses Thema führt Sie in die Konzepte und Begriffe ein, die im Zusammenhang mit reinen funktionalen Transformationen verwendet werden.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The functional transformation approach to transforming data yields code that is often quicker to program, more expressive, and easier to debug and maintain than more traditional, imperative programming.</source>
          <target state="translated">Bei Verwendung der funktionalen Transformation zum Transformieren von Daten erhalten Sie Code, der häufig schneller programmiert werden kann, ausdrucksstärker ist und einfacher von Fehlern bereinigt und verwaltet werden kann als Code, der auf die herkömmliche imperative Methode zurückzuführen ist.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Note that the topics in this section are not intended to fully explain functional programming.</source>
          <target state="translated">Beachten Sie, dass die Themen in diesem Abschnitt keine vollständige Erläuterung der funktionalen Programmierung darstellen.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Instead, these topics identify some of the functional programming capabilities that make it easier to transform XML from one shape to another.</source>
          <target state="translated">In diesen Themen werden vielmehr einige der Funktionen zur funktionalen Programmierung beschrieben, die das Transformieren von XML von einer Form in eine andere erleichtern.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>What Is Pure Functional Transformation?</source>
          <target state="translated">Was ist die reine funktionale Transformation?</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">*</bpt>pure functional transformation<ept id="p1">*</ept>, a set of functions, called <bpt id="p2">*</bpt>pure functions<ept id="p2">*</ept>, define how to transform a set of structured data from its original form into another form.</source>
          <target state="translated">In <bpt id="p1">*</bpt>reinen funktionalen Transformation<ept id="p1">*</ept>, einen Satz von Funktionen, die sogenannten <bpt id="p2">*</bpt>reinen Funktionen<ept id="p2">*</ept>, definieren, wie ein Satz strukturierter Daten aus ihrer Originalform in eine andere Form transformiert.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The word "pure" indicates that the functions are <bpt id="p1">*</bpt>composable<ept id="p1">*</ept>, which requires that they are:</source>
          <target state="translated">Das Wort "rein" gibt an, dass die Funktionen <bpt id="p1">*</bpt>zusammensetzbar<ept id="p1">*</ept>, erfordert, dass sie sind:</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Self-contained<ept id="p1">*</ept>, so that they can be freely ordered and rearranged without entanglement or interdependencies with the rest of the program.</source>
          <target state="translated"><bpt id="p1">*</bpt>Eigenständige<ept id="p1">*</ept>, sodass sie kostenlos sortiert und ohne verflechtungen oder Abhängigkeiten vom Rest des Programms neu angeordnet werden können.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Pure transformations have no knowledge of or effect upon their environment.</source>
          <target state="translated">Reine Transformationen existieren komplett unabhängig von ihrer Umgebung und beeinflussen diese auch nicht.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>That is, the functions used in the transformation have no <bpt id="p1">*</bpt>side effects<ept id="p1">*</ept>.</source>
          <target state="translated">D. h., die in der Transformation verwendeten Funktionen verfügen über keine <bpt id="p1">*</bpt>Nebeneffekte<ept id="p1">*</ept>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Stateless<ept id="p1">*</ept>, so that executing the same function or specific set of functions on the same input will always result in the same output.</source>
          <target state="translated"><bpt id="p1">*</bpt>Statusfreie<ept id="p1">*</ept>, so dass die Ausführung derselben Funktion oder eines bestimmten Satzes von Funktionen in derselben Eingabe auch immer zur selben Ausgabe führt.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Pure transformations have no memory of their prior use.</source>
          <target state="translated">Reine Transformationen besitzen keine „Erinnerung“ an ihre vorherige Verwendung.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In the rest of this tutorial, the term "pure function" is used in a general sense to indicate a programming approach, and not a specific language feature.</source>
          <target state="translated">Im übrigen Teil dieses Lernprogramms wird der Begriff „reine Funktion“ allgemein als Bezeichnung für einen Programmieransatz und nicht als Bezeichnung für eine bestimmte Sprachfunktion verwendet.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Note that pure functions must be implemented as functions in Visual Basic.</source>
          <target state="translated">Beachten Sie, dass reine Funktionen als Funktionen in Visual Basic implementiert werden müssen.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Also, you should not confuse pure functions with pure virtual methods in C++.</source>
          <target state="translated">Verwechseln Sie bitte auch nicht die reinen Funktionen mit den reinen virtuellen Methoden in C++.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The latter indicates that the containing class is abstract and that no method body is supplied.</source>
          <target state="translated">Die reinen virtuellen Methoden in C++ geben an, dass die enthaltene Klasse abstrakt ist und dass kein Methodentext angegeben wird.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Functional Programming</source>
          <target state="translated">Funktionale Programmierung</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Functional programming<ept id="p1">*</ept> is a programming approach that directly supports pure functional transformation.</source>
          <target state="translated"><bpt id="p1">*</bpt>Funktionale Programmierung<ept id="p1">*</ept> ist ein Programmieransatz, die reine funktionale Transformation direkt unterstützt.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Historically, general-purpose functional programming languages, such as ML, Scheme, Haskell, and F#, have been primarily of interest to the academic community.</source>
          <target state="translated">In der Vergangenheit wurden allgemeine FP-Sprachen, wie ML, Scheme, Haskell und f# wird hauptsächlich für die akademische Community von Interesse.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Although it has always been possible to write pure functional transformations in Visual Basic, the difficulty of doing so has not made it an attractive option to most programmers.</source>
          <target state="translated">Es war, zwar immer möglich, die in Visual Basic reine funktionale Transformationen schreiben hat die Schwierigkeit besteht also nicht es eine interessante Option für die meisten Programmierer.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>With later versions of Visual Basic, however, new language constructs such as lambda expressions and type inference make it functional programming much easier and more productive.</source>
          <target state="translated">Höheren Versionen von Visual Basic stehen jedoch neue Sprachkonstrukte, z. B. Lambda-Ausdrücke und Typrückschluss, funktionale Programmierung wesentlich einfacher und produktiver.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For more information about functional programming, see <bpt id="p1">[</bpt>Functional Programming vs. Imperative Programming (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/functional-programming-vs-imperative-programming.md)</ept>.</source>
          <target state="translated">Weitere Informationen zum funktionalen Programmieren finden Sie unter <bpt id="p1">[</bpt>Vs funktionale Programmierung. Imperative Programmierung (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/functional-programming-vs-imperative-programming.md)</ept>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Domain-Specific FP Languages</source>
          <target state="translated">Domänenspezifische FP-Sprachen</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Although general functional programming languages have not been widely adopted, specific domain-specific functional programming languages have had better success.</source>
          <target state="translated">Während allgemeine FP-Sprachen keine große Verbreitung gefunden haben, konnten sich bestimmte domänenspezifische FP-Sprachen durchsetzen.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For example, Cascading Style Sheets (CSS) are used to determine the look and feel of many Web pages, and Extensible Stylesheet Language Transformations (XSLT) style sheets are used extensively in XML data manipulation.</source>
          <target state="translated">So wird z. B. das Aussehen vieler Internetseiten durch Cascading Style Sheets (CSS) gesteuert, während für die Bearbeitung von XML-Daten häufig XSLT-Stylesheets (Extensible Stylesheet Language Transformations) verwendet werden.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For more information about XSLT, see <bpt id="p1">[</bpt>XSLT Transformations<ept id="p1">](http://msdn.microsoft.com/library/202f8820-224c-494f-b61e-cd127eac6e03)</ept>.</source>
          <target state="translated">Weitere Informationen zu XSLT finden Sie unter <bpt id="p1">[</bpt>XSLT-Transformationen<ept id="p1">](http://msdn.microsoft.com/library/202f8820-224c-494f-b61e-cd127eac6e03)</ept>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Terminology</source>
          <target state="translated">Terminologie</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The following table defines some terms related to functional transformations.</source>
          <target state="translated">Im Folgenden finden Sie Definitionen für eine Reihe von Begriffen, die im Zusammenhang mit der funktionalen Transformation verwendet werden:</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>higher-order (first-class) function</source>
          <target state="translated">Funktion höherer Ordnung (Funktion erster Ordnung)</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>A function that can be treated as a programmatic object.</source>
          <target state="translated">Funktion, die als programmgesteuertes Objekt behandelt werden kann.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For example, a higher-order function can be passed to or returned from other functions.</source>
          <target state="translated">So kann eine Funktion höherer Ordnung z. B. an andere Funktionen übergeben oder von anderen Funktionen zurückgegeben werden.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>In Visual Basic, delegates and lambda expressions are language features that support higher-order functions.</source>
          <target state="translated">In Visual Basic sind Delegaten und Lambda-Ausdrücke, die Funktionen höherer Ordnung unterstützen Funktionen der Sprache.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>To write a higher-order function, you declare one or more arguments to take delegates, and you often use lambda expressions when calling it.</source>
          <target state="translated">Beim Schreiben einer Funktion höherer Ordnung deklarieren Sie für mindestens ein Argument, das diese Delegate akzeptiert, und beim Aufrufen einer solchen Funktion verwenden Sie häufig Lambdaausdrücke.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Many of the standard query operators are higher-order functions.</source>
          <target state="translated">Viele der Standardabfrageoperatoren sind Funktionen höherer Ordnung.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Standard Query Operators Overview (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/standard-query-operators-overview.md)</ept>.</source>
          <target state="translated">Weitere Informationen finden Sie unter <bpt id="p1">[</bpt>Standard Query Operators Overview (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/standard-query-operators-overview.md)</ept>.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>lambda expression</source>
          <target state="translated">Lambdaausdruck</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Essentially, an inline anonymous function that can be used wherever a delegate type is expected.</source>
          <target state="translated">Im Wesentlichen eine anonyme Inlinefunktion, die überall dort verwendet werden kann, wo ein Delegattyp erwartet wird.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This is a simplified definition of lambda expressions, but it is adequate for the purposes of this tutorial.</source>
          <target state="translated">Dies ist zwar eine vereinfachte Definition für Lambdaausdrücke, im Rahmen dieses Lernprogramms reicht sie aber aus.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For more information about, see <bpt id="p1">[</bpt>Lambda Expressions<ept id="p1">](../../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)</ept>.</source>
          <target state="translated">Weitere Informationen finden Sie unter <bpt id="p1">[</bpt>Lambda-Ausdrücke<ept id="p1">](../../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)</ept>.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>collection</source>
          <target state="translated">Auflistung</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A structured set of data, usually of a uniform type.</source>
          <target state="translated">Strukturierter Satz von Daten, die in der Regel alle denselben Typ haben.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>To be compatible with LINQ, a collection must implement the &lt;xref:System.Collections.IEnumerable&gt; interface or the &lt;xref:System.Linq.IQueryable&gt; interface (or one of their generic counterparts, &lt;xref:System.Collections.Generic.IEnumerator%601&gt; or &lt;xref:System.Linq.IQueryable%601&gt;).</source>
          <target state="translated">Um die Kompatibilität mit LINQ muss eine Auflistung implementieren muss die &lt;xref:System.Collections.IEnumerable&gt;Schnittstelle oder die &lt;xref:System.Linq.IQueryable&gt;Schnittstelle (oder eines ihrer generischen Gegenstücke, &lt;xref:System.Collections.Generic.IEnumerator%601&gt;oder &lt;xref:System.Linq.IQueryable%601&gt;).&lt;/xref:System.Linq.IQueryable%601&gt; &lt;/xref:System.Collections.Generic.IEnumerator%601&gt; &lt;/xref:System.Linq.IQueryable&gt; &lt;/xref:System.Collections.IEnumerable&gt;</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>tuple (anonymous types)</source>
          <target state="translated">Tupel (anonyme Typen)</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>A mathematical concept, a tuple is a finite sequence of objects, each of a specific type.</source>
          <target state="translated">Begriff aus der Mathematik, der eine endliche Abfolge von Objekten bezeichnet, die jeweils einen bestimmten Typ haben.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>A tuple is also known as an ordered list.</source>
          <target state="translated">Ein Tupel wird auch als geordnete Zusammenstellung bezeichnet.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Anonymous types are a language implementation of this concept, which enable an unnamed class type to be declared and an object of that type to be instantiated at the same time.</source>
          <target state="translated">Dieses Konzept ist in Programmiersprachen als anonymer Typ implementiert, der es ermöglicht, einen nicht benannten Klassentyp zu deklarieren und gleichzeitig ein Objekt desselben Typs zu instanziieren.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For more information, see  <bpt id="p1">[</bpt>Anonymous Types<ept id="p1">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/anonymous-types.md)</ept>.</source>
          <target state="translated">Weitere Informationen finden Sie unter <bpt id="p1">[</bpt>anonyme Typen<ept id="p1">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/anonymous-types.md)</ept>.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>type inference (implicit typing)</source>
          <target state="translated">Typableitung (implizite Typisierung)</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The ability of a compiler to determine the type of a variable in the absence of an explicit type declaration.</source>
          <target state="translated">Fähigkeit eines Compilers, den Typ einer Variablen in Abwesenheit einer expliziten Typdeklaration zu bestimmen.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Local Type Inference<ept id="p1">](../../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)</ept>.</source>
          <target state="translated">Weitere Informationen finden Sie unter <bpt id="p1">[</bpt>lokalen Typrückschluss<ept id="p1">](../../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)</ept>.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>deferred execution and lazy evaluation</source>
          <target state="translated">Verzögerte Ausführung und verzögerte Auswertung</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The delaying of evaluation of an expression until its resolved value is actually required.</source>
          <target state="translated">Bei der verzögerten Auswertung (Lazy Evaluation) eines Ausdrucks wird mit der Auswertung so lange gewartet, bis der aufgelöste Wert tatsächlich benötigt wird.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Deferred execution is supported in collections.</source>
          <target state="translated">Die verzögerte Ausführung (Deferred Execution) wird in Auflistungen unterstützt.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Basic Query Operations (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/basic-query-operations.md)</ept> and <bpt id="p2">[</bpt>Deferred Execution and Lazy Evaluation in LINQ to XML (Visual Basic)<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/deferred-execution-and-lazy-evaluation-in-linq-to-xml.md)</ept>.</source>
          <target state="translated">Weitere Informationen finden Sie unter <bpt id="p1">[</bpt>Grundlegende Abfrageoperationen (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/basic-query-operations.md)</ept> und <bpt id="p2">[</bpt>verzögerte Ausführung und verzögerte Auswertung in LINQ to XML (Visual Basic)<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/deferred-execution-and-lazy-evaluation-in-linq-to-xml.md)</ept>.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>These language features will be used in code samples throughout this section.</source>
          <target state="translated">Diese Sprachfunktionen werden in Codebeispielen im gesamten Abschnitt verwendet.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">Siehe auch</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Introduction to Pure Functional Transformations (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/introduction-to-pure-functional-transformations.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Einführung in reine funktionale Transformationen (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/introduction-to-pure-functional-transformations.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Functional Programming vs. Imperative Programming (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/functional-programming-vs-imperative-programming.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>Funktionale Programmierung und Imperative Programmierung (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/functional-programming-vs-imperative-programming.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>