<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">17324fb6dca653aa3c15e3bad2fcc5ac35828bef</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\linq\how-to-use-annotation-trees-to-transform-linq-to-xml-trees-in-an-xslt-style.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b944c4dc4ba979ee448051a03493d1755466425f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fd49b1daddbcbbd088ce85c8bb2b413dc2c57b16</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Handback file name: lo-mt_how-to-use-annotation-trees-to-transform-linq-to-xml-trees-in-an-xslt-style.b54bff99773dc035f2edc8e0fbecdbf8ec4502e0.de-de is different with handoff file name: how-to-use-annotation-trees-to-transform-linq-to-xml-trees-in-an-xslt-style.b54bff99773dc035f2edc8e0fbecdbf8ec4502e0.de-de.</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Use Annotations to Transform LINQ to XML Trees in an XSLT Style (Visual Basic) | Microsoft Docs</source>
          <target state="translated">Gewusst wie: Verwenden von Anmerkungen zum Transformieren von LINQ to XML-Strukturen in eine XSLT-Formatvorlage (Visual Basic) | Microsoft-Dokumentation</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Use Annotations to Transform LINQ to XML Trees in an XSLT Style (Visual Basic)</source>
          <target state="translated">Gewusst wie: Verwenden von Anmerkungen zum Transformieren von LINQ to XML-Strukturen in eine XSLT-Formatvorlage (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Annotations can be used to facilitate transforms of an XML tree.</source>
          <target state="translated">Sie können Anmerkungen verwenden, um das Transformieren von XML-Strukturen zu ermöglichen.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Some XML documents are "document centric with mixed content."</source>
          <target state="translated">Einige XML-Dokumente sind "dokumentorientiert mit gemischtem Inhalt".</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>With such documents, you don't necessarily know the shape of child nodes of an element.</source>
          <target state="translated">Bei solchen Dokumenten kennen Sie nicht unbedingt die Form der untergeordneten Knoten eines Elements.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For instance, a node that contains text may look like this:</source>
          <target state="translated">So könnte z. B. ein Knoten, der Text enthält, wie folgt aussehen:</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For any given text node, there may be any number of child <ph id="ph1">`&lt;b&gt;`</ph> and <ph id="ph2">`&lt;i&gt;`</ph> elements.</source>
          <target state="translated">Pro vorhandenem Textknoten kann eine unbegrenzte Anzahl untergeordneter <ph id="ph1">`&lt;b&gt;`</ph>-Elemente und <ph id="ph2">`&lt;i&gt;`</ph>-Elemente vorhanden sein.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This approach extends to a number of other situations: such as, pages that can contain a variety of child elements, such as regular paragraphs, bulleted paragraphs, and bitmaps.</source>
          <target state="translated">Dieser Ansatz führt zu einer Reihe anderer Situationen: z. B. Seiten, die eine Vielzahl untergeordneter Elemente, z. B. normale Absätze, Absätze mit Aufzählungszeichen und Bitmaps enthalten können.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Cells in a table may contain text, drop down lists, or bitmaps.</source>
          <target state="translated">Zellen in einer Tabelle können Text, Dropdownlisten oder Bitmaps enthalten.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>One of the primary characteristics of document centric XML is that you do not know which child element any particular element will have.</source>
          <target state="translated">Eine der wichtigsten Eigenschaften von dokumentorientiertem XML besteht darin, dass Sie nicht wissen, welche untergeordneten Elemente ein bestimmtes Element besitzen wird.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If you want to transform elements in a tree where you don't necessarily know much about the children of the elements that you want to transform, then this approach that uses annotations is an effective approach.</source>
          <target state="translated">Wenn Sie Elemente in einer Struktur transformieren möchten und nicht wirklich viel über die untergeordneten Elemente der Elemente wissen, die transformiert werden sollen, bietet sich die Verwendung von Anmerkungen als effektiver Ansatz an.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The summary of the approach is:</source>
          <target state="translated">Dieser Ansatz sieht, grob zusammengefasst, wie folgt aus:</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>First, annotate elements in the tree with a replacement element.</source>
          <target state="translated">Zuerst werden die Elemente in der Struktur mit einem Ersetzungselement mit einer Anmerkung versehen.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Second, iterate through the entire tree, creating a new tree where you replace each element with its annotation.</source>
          <target state="translated">Danach wird die gesamte Struktur durchlaufen, wobei eine neue Struktur erstellt wird, in der alle Elemente durch ihre Anmerkung ersetzt werden.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This example implements the iteration and creation of the new tree in a function named <ph id="ph1">`XForm`</ph>.</source>
          <target state="translated">Dieses Beispiel implementiert die Iteration und die Erstellung der neuen Struktur mit einer Funktion mit dem Namen <ph id="ph1">`XForm`</ph>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In detail, the approach consists of:</source>
          <target state="translated">Genauer gesagt setzt sich der Ansatz aus folgenden Schritten zusammen:</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Execute one or more LINQ to XML queries that return the set of elements that you want to transform from one shape to another.</source>
          <target state="translated">Führen Sie mindestens eine LINQ to XML-Abfrage aus, die den Satz von Elementen zurückgibt, die Sie in eine andere Form transformieren möchten.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For each element in the query, add a new &lt;xref:System.Xml.Linq.XElement&gt; object as an annotation to the element.</source>
          <target state="translated">Für jedes Element in der Abfrage, fügen Sie einen neuen &lt;xref:System.Xml.Linq.XElement&gt;-Objekt als Anmerkung zum Element.&lt;/xref:System.Xml.Linq.XElement&gt;</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This new element will replace the annotated element in the new, transformed tree.</source>
          <target state="translated">Dieses neue Element ersetzt in der neuen, transformierten Struktur das Element, das Sie mit der Anmerkung versehen haben.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This is simple code to write, as demonstrated by the example.</source>
          <target state="translated">Das folgende Beispiel zeigt, dass der dazu zu schreibende Code recht einfach ist:</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The new element that is added as an annotation can contain new child nodes; it can form a sub-tree with any desired shape.</source>
          <target state="translated">Das neue Element, das als Anmerkung hinzugefügt wird, kann neue untergeordnete Knoten enthalten, und es kann eine Teilstruktur jeder beliebigen Form bilden.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>There is a special rule: If a child node of the new element is in a different namespace, a namespace that is made up for this purpose (in this example, the namespace is <ph id="ph1">`http://www.microsoft.com/LinqToXmlTransform/2007`</ph>), then that child element is not copied to the new tree.</source>
          <target state="translated">Dabei gilt folgende spezielle Regel: Wenn sich ein untergeordneter Knoten des neuen Elements in einem anderen Namespace befindet, einem Namespace, der zu diesem Zweck erfunden wurde (in diesem Beispiel lautet der Namespace <ph id="ph1">`http://www.microsoft.com/LinqToXmlTransform/2007`</ph>), wird dieses untergeordnete Element nicht in die neue Struktur kopiert.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Instead, if the namespace is the above mentioned special namespace, and the local name of the element is <ph id="ph1">`ApplyTransforms`</ph>, then the child nodes of the element in the source tree are iterated, and copied to the new tree (with the exception that annotated child elements are themselves transformed according to these rules).</source>
          <target state="translated">Stattdessen gilt: Wenn es sich bei dem Namespace um den oben erwähnten speziellen Namespace handelt und der lokale Name des Elements <ph id="ph1">`ApplyTransforms`</ph> lautet, dann werden die untergeordneten Knoten des Elements in der ursprünglichen Struktur durchlaufen und in die neue Struktur kopiert (mit der Ausnahme, dass mit Anmerkungen versehene untergeordnete Elemente diesen Regeln entsprechend selbst transformiert werden).</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This is somewhat analogous to the specification of transforms in XSL.</source>
          <target state="translated">Dies entspricht in gewissem Maße der Spezifikation von Transformationen in XSL.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The query that selects a set of nodes is analogous to the XPath expression for a template.</source>
          <target state="translated">Die Abfrage, die einen Satz von Knoten auswählt, entspricht dem XPath-Ausdruck für eine Vorlage.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The code to create the new &lt;xref:System.Xml.Linq.XElement&gt; that is saved as an annotation is analogous to the sequence constructor in XSL, and the <ph id="ph1">`ApplyTransforms`</ph> element is analogous in function to the <ph id="ph2">`xsl:apply-templates`</ph> element in XSL.</source>
          <target state="translated">Der Code zum Erstellen des neuen &lt;xref:System.Xml.Linq.XElement&gt;, das als Anmerkung entspricht dem Sequenzkonstruktor in XSL, gespeichert wird und die <ph id="ph1">`ApplyTransforms`</ph> Element entspricht der Funktion in das <ph id="ph2">`xsl:apply-templates`</ph> -Element in XSL.&lt;/xref:System.Xml.Linq.XElement&gt;</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>One advantage to taking this approach - as you formulate queries, you are always writing queries on the unmodified source tree.</source>
          <target state="translated">Ein Vorteil dieses Ansatzes besteht darin, dass Sie beim Formulieren von Abfragen stets Abfragen für die nicht geänderte Quellstruktur schreiben.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You need not worry about how modifications to the tree affect the queries that you are writing.</source>
          <target state="translated">Sie müssen sich damit keine Gedanken machen, wie sich Änderungen an der Struktur auf die Abfragen auswirken, die Sie schreiben.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Transforming a Tree</source>
          <target state="translated">Transformieren einer Struktur</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This first example renames all <ph id="ph1">`Paragraph`</ph> nodes to <ph id="ph2">`para`</ph>.</source>
          <target state="translated">Bei diesem ersten Beispiel werden alle <ph id="ph1">`Paragraph`</ph>-Knoten in <ph id="ph2">`para`</ph> umbenannt.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This example produces the following output:</source>
          <target state="translated">Dieses Beispiel erzeugt die folgende Ausgabe:</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>A More Complicated Transform</source>
          <target state="translated">Kompliziertere Transformation</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The following example queries the tree and calculates the average and sum of the <ph id="ph1">`Data`</ph> elements, and adds them as new elements to the tree.</source>
          <target state="translated">Das folgende Beispiel fragt die Struktur ab, berechnet den Durchschnitt und die Summe der <ph id="ph1">`Data`</ph>-Elemente und fügt diese als neue Elemente zur Struktur hinzu.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This example produces the following output:</source>
          <target state="translated">Dieses Beispiel erzeugt die folgende Ausgabe:</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Effecting the Transform</source>
          <target state="translated">Ausführen der Transformation</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>A small function, <ph id="ph1">`XForm`</ph>, creates a new transformed tree from the original, annotated tree.</source>
          <target state="translated">Eine kleine Funktion, <ph id="ph1">`XForm`</ph>, erstellt aus der ursprünglichen, mit Anmerkungen versehenen Struktur eine neue transformierte Struktur.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The pseudo code for the function is quite simple:</source>
          <target state="translated">Der Pseudocode für die Funktion ist recht einfach:</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Following is the implementation of this function:</source>
          <target state="translated">Es folgt die Implementierung dieser Funktion:</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Complete Example</source>
          <target state="translated">Vollständiges Beispiel</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The following code is a complete example that includes the <ph id="ph1">`XForm`</ph> function.</source>
          <target state="translated">Der folgende Code ist ein vollständiges Beispiel, das die <ph id="ph1">`XForm`</ph>-Funktion enthält.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>It includes a few of the typical uses of this type of transform:</source>
          <target state="translated">Er beinhaltet einige typische Verwendungen dieser Transformationsart:</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This example produces the following output:</source>
          <target state="translated">Dieses Beispiel erzeugt die folgende Ausgabe:</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">Siehe auch</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Advanced LINQ to XML Programming (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/advanced-linq-to-xml-programming.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Erweiterte LINQ to XML-Programmierung (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/advanced-linq-to-xml-programming.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>