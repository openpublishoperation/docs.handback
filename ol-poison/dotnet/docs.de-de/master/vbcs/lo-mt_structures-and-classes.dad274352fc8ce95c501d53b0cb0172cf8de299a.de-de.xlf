<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e7402ec0fcfc279470d39a4919d3b5ec8b5d9dff</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\data-types\structures-and-classes.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ad3aeb05a6eb801d11a7118faa7babd02bf82958</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e791bc1570715fed0060c8c58d5509ff02983807</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Handback file name: lo-mt_structures-and-classes.dad274352fc8ce95c501d53b0cb0172cf8de299a.de-de is different with handoff file name: structures-and-classes.dad274352fc8ce95c501d53b0cb0172cf8de299a.de-de.</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Structures and Classes (Visual Basic) | Microsoft Docs</source>
          <target state="translated">Strukturen und Klassen (Visual Basic) | Microsoft-Dokumentation</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Structures and Classes (Visual Basic)</source>
          <target state="translated">Strukturen und Klassen (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> unifies the syntax for structures and classes, with the result that both entities support most of the same features.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>Die Syntax für Strukturen und Klassen, mit dem Ergebnis, dass größtenteils die gleichen Funktionen unterstützen vereinheitlicht.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>However, there are also important differences between structures and classes.</source>
          <target state="translated">Es gibt jedoch auch wichtige Unterschiede zwischen Strukturen und Klassen.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Classes have the advantage of being reference types — passing a reference is more efficient than passing a structure variable with all its data.</source>
          <target state="translated">Klassen haben den Vorteil, Verweistypen – Übergabe eines Verweises ist effizienter als die Übergabe einer Strukturvariablen mit allen zugehörigen Daten.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>On the other hand, structures do not require allocation of memory on the global heap.</source>
          <target state="translated">Auf der anderen Seite erfordern Strukturen keine Zuordnung von Arbeitsspeicher auf dem globalen Heap.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Because you cannot inherit from a structure, structures should be used only for objects that do not need to be extended.</source>
          <target state="translated">Da Sie von einer Struktur geerbt werden können, sollten Strukturen nur für Objekte verwendet werden, die nicht erweitert werden müssen.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Use structures when the object you wish to create has a small instance size, and take into account the performance characteristics of classes versus structures.</source>
          <target state="translated">Verwenden Sie Strukturen, wenn das Objekt, das Sie erstellen möchten, hat eine Größe von kleinen Instanz und die Leistungsmerkmale von Klassen und Strukturen berücksichtigen.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Similarities</source>
          <target state="translated">Ähnlichkeit</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Structures and classes are similar in the following respects:</source>
          <target state="translated">Strukturen und Klassen sind ähnlich wie in folgender Hinsicht:</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Both are <bpt id="p1">*</bpt>container<ept id="p1">*</ept> types, meaning that they contain other types as members.</source>
          <target state="translated">Beide sind <bpt id="p1">*</bpt>Container<ept id="p1">*</ept> Typen, d. h., dass sie andere Typen als Member enthalten.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Both have members, which can include constructors, methods, properties, fields, constants, enumerations, events, and event handlers.</source>
          <target state="translated">Beide verfügen über Member, die Konstruktoren, Methoden, Eigenschaften, Felder, Konstanten, Enumerationen, Ereignisse und Ereignishandler enthalten können.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>However, do not confuse these members with the declared <bpt id="p1">*</bpt>elements<ept id="p1">*</ept> of a structure.</source>
          <target state="translated">Verwechseln Sie jedoch nicht diese Member mit dem deklarierten <bpt id="p1">*</bpt>Elemente<ept id="p1">*</ept> einer Struktur.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Members of both can have individualized access levels.</source>
          <target state="translated">Die Member beider können Zugriffsebenen aufweisen.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For example, one member can be declared <ph id="ph1">`Public`</ph> and another <ph id="ph2">`Private`</ph>.</source>
          <target state="translated">Beispielsweise kann ein Member deklariert werden <ph id="ph1">`Public`</ph> und anderen <ph id="ph2">`Private`</ph>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Both can implement interfaces.</source>
          <target state="translated">Beide können Schnittstellen implementieren.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Both can have shared constructors, with or without parameters.</source>
          <target state="translated">Beide können freigegebene Konstruktoren mit oder ohne Parameter verfügen.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Both can expose a <bpt id="p1">*</bpt>default property<ept id="p1">*</ept>, provided that property takes at least one parameter.</source>
          <target state="translated">Beide verfügbar machen, können eine <bpt id="p1">*</bpt>Standardeigenschaft<ept id="p1">*</ept>, vorausgesetzt, dass die Eigenschaft nimmt mindestens einen Parameter.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Both can declare and raise events, and both can declare delegates.</source>
          <target state="translated">Beide können deklarieren und Auslösen von Ereignissen, und beide können Delegaten deklarieren.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Differences</source>
          <target state="translated">Unterschiede</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Structures and classes differ in the following particulars:</source>
          <target state="translated">Strukturen und Klassen unterscheiden sich in den folgenden Angaben:</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Structures are <bpt id="p1">*</bpt>value types<ept id="p1">*</ept>; classes are <bpt id="p2">*</bpt>reference types<ept id="p2">*</ept>.</source>
          <target state="translated">Strukturen sind <bpt id="p1">*</bpt>Werttypen<ept id="p1">*</ept>; Klassen sind <bpt id="p2">*</bpt>Verweistypen<ept id="p2">*</ept>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>A variable of a structure type contains the structure's data, rather than containing a reference to the data as a class type does.</source>
          <target state="translated">Eine Variable eines Strukturtyps enthält die Struktur Daten, anstatt mit einem Verweis auf die Daten als Typ einer Klasse ist.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Structures use stack allocation; classes use heap allocation.</source>
          <target state="translated">Strukturen verwenden stapelzuordnung. Klassen verwenden Heapzuweisung.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>All structure elements are <ph id="ph1">`Public`</ph> by default; class variables and constants are <ph id="ph2">`Private`</ph> by default, while other class members are <ph id="ph3">`Public`</ph> by default.</source>
          <target state="translated">Alle Strukturelemente sind <ph id="ph1">`Public`</ph> standardmäßig-Klasse Variablen und Konstanten sind <ph id="ph2">`Private`</ph> , während andere Klassenmember sind standardmäßig <ph id="ph3">`Public`</ph> standardmäßig.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This behavior for class members provides compatibility with the Visual Basic 6.0 system of defaults.</source>
          <target state="translated">Dieses Verhalten für Klassenmember bietet Kompatibilität mit dem Visual Basic 6.0-System Standardwerte.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A structure must have at least one nonshared variable or nonshared, noncustom event element; a class can be completely empty.</source>
          <target state="translated">Eine Struktur müssen mindestens eine nicht freigegebene Variable oder weder freigegebenes noch benutzerdefiniertes Ereigniselement. eine Klasse kann völlig leer sein.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Structure elements cannot be declared as <ph id="ph1">`Protected`</ph>; class members can.</source>
          <target state="translated">Strukturelemente nicht deklariert werden, als <ph id="ph1">`Protected`</ph>; Klassenmember können.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>A structure procedure can handle events only if it is a <bpt id="p1">[</bpt>Shared<ept id="p1">](../../../../visual-basic/language-reference/modifiers/shared.md)</ept><ph id="ph1">`Sub`</ph> procedure, and only by means of the <bpt id="p2">[</bpt>AddHandler Statement<ept id="p2">](../../../../visual-basic/language-reference/statements/addhandler-statement.md)</ept>; any class procedure can handle events, using either the <bpt id="p3">[</bpt>Handles<ept id="p3">](../../../../visual-basic/language-reference/statements/handles-clause.md)</ept> keyword or the <ph id="ph2">`AddHandler`</ph> statement.</source>
          <target state="translated">Eine Strukturprozedur kann Ereignisse behandeln, nur, wenn es eine <bpt id="p1">[</bpt>Shared<ept id="p1">](../../../../visual-basic/language-reference/modifiers/shared.md)</ept> <ph id="ph1">`Sub`</ph> Verfahren und nur von der <bpt id="p2">[</bpt>AddHandler-Anweisung<ept id="p2">](../../../../visual-basic/language-reference/statements/addhandler-statement.md)</ept>; jede Klassenprozedur kann Ereignisse entweder behandeln die <bpt id="p3">[</bpt>behandelt<ept id="p3">](../../../../visual-basic/language-reference/statements/handles-clause.md)</ept> Schlüsselwort oder <ph id="ph2">`AddHandler`</ph> Anweisung.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Events<ept id="p1">](../../../../visual-basic/programming-guide/language-features/events/index.md)</ept>.</source>
          <target state="translated">Weitere Informationen finden Sie unter <bpt id="p1">[</bpt>Ereignisse<ept id="p1">](../../../../visual-basic/programming-guide/language-features/events/index.md)</ept>.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Structure variable declarations cannot specify initializers or initial sizes for arrays; class variable declarations can.</source>
          <target state="translated">Struktur Variablendeklarationen können keine Initialisierer oder Anfangsgröße für Arrays angeben; Klasse Variablendeklarationen können.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Structures implicitly inherit from the &lt;xref:System.ValueType?displayProperty=fullName&gt; class and cannot inherit from any other type; classes can inherit from any class or classes other than &lt;xref:System.ValueType?displayProperty=fullName&gt;.</source>
          <target state="translated">Strukturen erben implizit von der &lt;xref:System.ValueType?displayProperty=fullName&gt;-Klasse und nicht von einem anderen Typ; erben Klassen können von einer Klasse oder einer anderen &lt;xref:System.ValueType?displayProperty=fullName&gt;.&lt;/xref:System.ValueType?displayProperty=fullName&gt; Klassen erben&lt;/xref:System.ValueType?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Structures are not inheritable; classes are.</source>
          <target state="translated">Strukturen können nicht vererbt werden; Klassen sind.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Structures are never terminated, so the common language runtime (CLR) never calls the &lt;xref:System.Object.Finalize%2A&gt; method on any structure; classes are terminated by the garbage collector (GC), which calls &lt;xref:System.Object.Finalize%2A&gt; on a class when it detects there are no active references remaining.</source>
          <target state="translated">Strukturen werden nie beendet, sodass die common Language Runtime (CLR) aufgerufen werden, nie die &lt;xref:System.Object.Finalize%2A&gt;-Methode für eine Struktur; Klassen werden vom Garbage Collector (GC), der aufgerufen wird, beendet &lt;xref:System.Object.Finalize%2A&gt;für eine Klasse, wenn es erkennt keine aktiven Verweise mehr vorhanden sind.&lt;/xref:System.Object.Finalize%2A&gt; &lt;/xref:System.Object.Finalize%2A&gt;</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>A structure does not require a constructor; a class does.</source>
          <target state="translated">Eine Struktur ist einen Konstruktor nicht erforderlich. eine Klasse ist.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Structures can have nonshared constructors only if they take parameters; classes can have them with or without parameters.</source>
          <target state="translated">Strukturen können nicht freigegebene Konstruktoren nur, wenn sie Parameter annehmen; Klassen können sie mit oder ohne Parameter aufweisen.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Every structure has an implicit public constructor without parameters.</source>
          <target state="translated">Jede Struktur verfügt über einen impliziten öffentlichen Konstruktor ohne Parameter.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>This constructor initializes all the structure's data elements to their default values.</source>
          <target state="translated">Dieser Konstruktor initialisiert alle die Datenmember der Struktur mit ihren Standardwerten.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>You cannot redefine this behavior.</source>
          <target state="translated">Sie können dieses Verhalten nicht neu definieren.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Instances and Variables</source>
          <target state="translated">Instanzen und Variablen</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Because structures are value types, each structure variable is permanently bound to an individual structure instance.</source>
          <target state="translated">Da Strukturen Werttypen sind, wird Strukturvariablen permanent an eine einzelne Strukturinstanz gebunden.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>But classes are reference types, and an object variable can refer to various class instances at different times.</source>
          <target state="translated">Jedoch sind Klassen Verweistypen, und eine Objektvariable kann zu unterschiedlichen Zeitpunkten auf unterschiedliche Klasseninstanzen verweisen.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This distinction affects your usage of structures and classes in the following ways:</source>
          <target state="translated">Dieser Unterschied wirkt sich auf folgende Weise auf die Verwendung von Strukturen und Klassen aus:</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Initialization.<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>Die Initialisierung.<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>A structure variable implicitly includes an initialization of the elements using the structure's parameterless constructor.</source>
          <target state="translated">Eine Strukturvariable umfasst implizit eine Initialisierung der Elemente mithilfe des parameterlosen Konstruktors der Struktur.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Therefore, <ph id="ph1">`Dim s As struct1`</ph> is equivalent to <ph id="ph2">`Dim s As struct1 = New struct1()`</ph>.</source>
          <target state="translated">Aus diesem Grund <ph id="ph1">`Dim s As struct1`</ph> entspricht <ph id="ph2">`Dim s As struct1 = New struct1()`</ph>.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Assigning Variables.<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>Zuweisen von Variablen.<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>When you assign one structure variable to another, or pass a structure instance to a procedure argument, the current values of all the variable elements are copied to the new structure.</source>
          <target state="translated">Wenn Sie eine Strukturvariable zu einem anderen zuweisen oder eine Strukturinstanz an Prozedurarguments übergeben, werden die aktuellen Werte aller Variablenelemente in die neue Struktur kopiert.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>When you assign one object variable to another, or pass an object variable to a procedure, only the reference pointer is copied.</source>
          <target state="translated">Wenn Sie eine Objektvariable zu einem anderen zuweisen oder eine Objektvariable an eine Prozedur übergeben, wird nur der Verweiszeiger kopiert.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Assigning Nothing.<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>Zuweisen von Nothing.<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>You can assign the value <bpt id="p1">[</bpt>Nothing<ept id="p1">](../../../../visual-basic/language-reference/nothing.md)</ept> to a structure variable, but the instance continues to be associated with the variable.</source>
          <target state="translated">Weisen Sie den Wert <bpt id="p1">[</bpt>nichts<ept id="p1">](../../../../visual-basic/language-reference/nothing.md)</ept> auf eine Struktur Variable, aber die Instanz weiterhin der Variablen zugeordnet werden.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>You can still call its methods and access its data elements, although variable elements are reinitialized by the assignment.</source>
          <target state="translated">Weiterhin können Sie ihre Methoden aufrufen und die Datenelemente zugreifen, obwohl die Variablenelemente durch die Zuweisung erneut initialisiert werden.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>In contrast, if you set an object variable to <ph id="ph1">`Nothing`</ph>, you dissociate it from any class instance, and you cannot access any members through the variable until you assign another instance to it.</source>
          <target state="translated">Im Gegensatz dazu, wenn Sie eine Objektvariablen auf <ph id="ph1">`Nothing`</ph>, heben Sie die Zuweisung von allen Klasseninstanzen und Sie können nicht auf Member über die Variable zugreifen, bis Sie eine andere Instanz zuweisen.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Multiple Instances.<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>Mehrere Instanzen.<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>An object variable can have different class instances assigned to it at different times, and several object variables can refer to the same class instance at the same time.</source>
          <target state="translated">Eine Objektvariablen kann verschiedene Klasseninstanzen zu unterschiedlichen Zeiten zugewiesen, und verschiedene Objektvariablen können gleichzeitig auf die gleiche Klasseninstanz verweisen.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Changes you make to the values of class members affect those members when accessed through another variable pointing to the same instance.</source>
          <target state="translated">Vorgenommenen Änderungen auf die Werte von Klassenmembern Einfluss auf die Elemente, die beim Zugriff über eine andere Variable, die auf dieselbe Instanz verweisen.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Structure elements, however, are isolated within their own instance.</source>
          <target state="translated">Strukturelemente sind hingegen in ihrer eigenen Instanz isoliert.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Changes to their values are not reflected in any other structure variables, even in other instances of the same <ph id="ph1">`Structure`</ph> declaration.</source>
          <target state="translated">Ändert die Werte werden nicht widergespiegelt, in anderen Strukturvariablen, auch in anderen Instanzen des gleichen <ph id="ph1">`Structure`</ph> Deklaration.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Equality.<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>Gleichheit.<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Equality testing of two structures must be performed with an element-by-element test.</source>
          <target state="translated">Gleichheitstest zwei Strukturen muss für ein Element für Element durchgeführt werden.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Two object variables can be compared using the &lt;xref:System.Object.Equals%2A&gt; method.</source>
          <target state="translated">Zwei Objektvariablen können verglichen werden, mithilfe der &lt;xref:System.Object.Equals%2A&gt;-Methode.&lt;/xref:System.Object.Equals%2A&gt;</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Object.Equals%2A&gt; indicates whether the two variables point to the same instance.</source>
          <target state="translated">&lt;xref:System.Object.Equals%2A&gt;Gibt an, ob die zwei Variablen auf dieselbe Instanz verweisen.&lt;/xref:System.Object.Equals%2A&gt;</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">Siehe auch</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Data Types<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/index.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Datentypen<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/index.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Composite Data Types<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/composite-data-types.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Zusammengesetzte Datentypen<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/composite-data-types.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Value Types and Reference Types<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Werttypen und Verweistypen<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Structures<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/structures.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Strukturen<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/structures.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Troubleshooting Data Types<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/troubleshooting-data-types.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Problembehandlung bei Datentypen<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/troubleshooting-data-types.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Structures and Other Programming Elements<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/structures-and-other-programming-elements.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Strukturen und andere Programmierelemente<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/structures-and-other-programming-elements.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Objects and Classes<ept id="p1">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/index.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>Objekte und Klassen<ept id="p1">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/index.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>