<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">379359e3a338746ccd440dbe1ad58c483e562dbe</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\language-reference\statements\try-catch-finally-statement.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5b921289ea855bcedff299c9aabf2debd637dcab</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dfd3d978ccc9bd35935fbe8240dd53f4b5b0a57e</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Handback file name: lo-mt_try-catch-finally-statement.4d83248318ea744e7e852042d524c8c12047e68f.de-de is different with handoff file name: try-catch-finally-statement.4d83248318ea744e7e852042d524c8c12047e68f.de-de.</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Try...Catch...Finally Statement (Visual Basic) | Microsoft Docs</source>
          <target state="translated">Versuchen Sie es... Catch... Finally-Anweisung (Visual Basic) | Microsoft-Dokumentation</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Try...Catch...Finally Statement (Visual Basic)</source>
          <target state="translated">Try...Catch...Finally-Anweisung (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Provides a way to handle some or all possible errors that may occur in a given block of code, while still running code.</source>
          <target state="translated">Bietet eine Möglichkeit, einige oder alle möglichen Fehler zu behandeln, die in einem bestimmten Codeblock auftreten können, während noch Code ausgeführt.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
          <target state="translated">Syntax</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parts</source>
          <target state="translated">Teile</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Term</source>
          <target state="translated">Begriff</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Definition</source>
          <target state="translated">Definition</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">Optional.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Statement(s) where an error can occur.</source>
          <target state="translated">Anweisung(en), in dem ein Fehler auftreten kann.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Can be a compound statement.</source>
          <target state="translated">Kann eine Verbundanweisung sein.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">Optional.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Multiple <ph id="ph1">`Catch`</ph> blocks permitted.</source>
          <target state="translated">Mehrere <ph id="ph1">`Catch`</ph> Blöcke zulässig.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If an exception occurs when processing the <ph id="ph1">`Try`</ph> block, each <ph id="ph2">`Catch`</ph> statement is examined in textual order to determine whether it handles the exception, with <ph id="ph3">`exception`</ph> representing the exception that has been thrown.</source>
          <target state="translated">Wenn eine Ausnahme auftritt, bei der Verarbeitung der <ph id="ph1">`Try`</ph> blockieren, jede <ph id="ph2">`Catch`</ph> -Anweisung überprüft wird, in Textform Reihenfolge zu bestimmen, ob sie die Ausnahme, wobei behandelt <ph id="ph3">`exception`</ph> , die die ausgelöste Ausnahme darstellt.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">Optional.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Any variable name.</source>
          <target state="translated">Ein beliebiger Variablenname.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The initial value of <ph id="ph1">`exception`</ph> is the value of the thrown error.</source>
          <target state="translated">Der Anfangswert von <ph id="ph1">`exception`</ph> ist der Wert des ausgelösten Fehlers.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Used with <ph id="ph1">`Catch`</ph> to specify the error caught.</source>
          <target state="translated">Mit verwendet <ph id="ph1">`Catch`</ph> an der Fehler abgefangen.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If omitted, the <ph id="ph1">`Catch`</ph> statement catches any exception.</source>
          <target state="translated">Wenn nicht angegeben, die <ph id="ph1">`Catch`</ph> Anweisung fängt jede Ausnahme.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">Optional.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Specifies the type of class filter.</source>
          <target state="translated">Gibt den Typ der Klasse Filter.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If the value of <ph id="ph1">`exception`</ph> is of the type specified by <ph id="ph2">`type`</ph> or of a derived type, the identifier becomes bound to the exception object.</source>
          <target state="translated">Wenn der Wert der <ph id="ph1">`exception`</ph> des angegebenen Typs ist <ph id="ph2">`type`</ph> oder eines abgeleiteten Typs, der Bezeichner an das Ausnahmeobjekt gebunden wird.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">Optional.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Catch`</ph> statement with a <ph id="ph2">`When`</ph> clause catches exceptions only when <ph id="ph3">`expression`</ph> evaluates to <ph id="ph4">`True`</ph>.</source>
          <target state="translated">Ein <ph id="ph1">`Catch`</ph> -Anweisung mit einem <ph id="ph2">`When`</ph> -Klausel fängt Ausnahmen nur, wenn <ph id="ph3">`expression`</ph> ergibt <ph id="ph4">`True`</ph>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`When`</ph> clause is applied only after checking the type of the exception, and <ph id="ph2">`expression`</ph> may refer to the identifier representing the exception.</source>
          <target state="translated">Ein <ph id="ph1">`When`</ph> -Klausel wird nur angewendet, nachdem der Typ der Ausnahme überprüft und <ph id="ph2">`expression`</ph> bezieht sich möglicherweise auf den Bezeichner darstellt.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">Optional.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Must be implicitly convertible to <ph id="ph1">`Boolean`</ph>.</source>
          <target state="translated">Muss implizit in <ph id="ph1">`Boolean`</ph>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Any expression that describes a generic filter.</source>
          <target state="translated">Ein beliebiger Ausdruck, der einen allgemeinen Filter beschreibt.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Typically used to filter by error number.</source>
          <target state="translated">In der Regel verwendet zum Filtern nach Fehlernummern.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Used with <ph id="ph1">`When`</ph> keyword to specify circumstances under which the error is caught.</source>
          <target state="translated">Mit verwendet <ph id="ph1">`When`</ph> -Schlüsselwort verwenden, um die Angabe der Umstände, unter denen der Fehler abgefangen wird.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">Optional.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Statement(s) to handle errors that occur in the associated <ph id="ph1">`Try`</ph> block.</source>
          <target state="translated">Anweisung(en) zur Behandlung von Fehlern, die auftreten, in der zugeordneten <ph id="ph1">`Try`</ph> Block.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Can be a compound statement.</source>
          <target state="translated">Kann eine Verbundanweisung sein.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">Optional.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Keyword that breaks out of the <ph id="ph1">`Try...Catch...Finally`</ph> structure.</source>
          <target state="translated">Schlüsselwort, das von unterbricht die <ph id="ph1">`Try...Catch...Finally`</ph> Struktur.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Execution resumes with the code immediately following the <ph id="ph1">`End Try`</ph> statement.</source>
          <target state="translated">Die Ausführung wird fortgesetzt, durch den Code direkt nach der <ph id="ph1">`End Try`</ph> Anweisung.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Finally`</ph> statement will still be executed.</source>
          <target state="translated">Die <ph id="ph1">`Finally`</ph> -Anweisung wird weiterhin ausgeführt werden.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Not allowed in <ph id="ph1">`Finally`</ph> blocks.</source>
          <target state="translated">Nicht zulässig <ph id="ph1">`Finally`</ph> blockiert.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">Optional.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Finally`</ph> block is always executed when execution leaves any part of the <ph id="ph2">`Try...Catch`</ph> statement.</source>
          <target state="translated">Ein <ph id="ph1">`Finally`</ph> -Block wird immer ausgeführt, wenn die Ausführung eines beliebigen Teils der <ph id="ph2">`Try...Catch`</ph> Anweisung.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">Optional.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Statement(s) that are executed after all other error processing has occurred.</source>
          <target state="translated">Anweisung(en), die ausgeführt werden, nachdem sämtlicher Fehler aufgetreten ist.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Terminates the <ph id="ph1">`Try...Catch...Finally`</ph> structure.</source>
          <target state="translated">Beendet die <ph id="ph1">`Try...Catch...Finally`</ph> Struktur.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Remarks</source>
          <target state="translated">Hinweise</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If you expect that a particular exception might occur during a particular section of code, put the code in a <ph id="ph1">`Try`</ph> block and use a <ph id="ph2">`Catch`</ph> block to retain control and handle the exception if it occurs.</source>
          <target state="translated">Wenn Sie erwarten, dass eine bestimmte Ausnahme während eines bestimmten Codeabschnitts auftreten kann, fügen Sie den Code in eine <ph id="ph1">`Try`</ph> blockieren, und verwenden eine <ph id="ph2">`Catch`</ph> Block behalten die Kontrolle und die Ausnahme behandeln, wenn diese ausgeführt wird.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Try…Catch`</ph> statement consists of a <ph id="ph2">`Try`</ph> block followed by one or more <ph id="ph3">`Catch`</ph> clauses, which specify handlers for various exceptions.</source>
          <target state="translated">Ein <ph id="ph1">`Try…Catch`</ph> -Anweisung besteht aus einem <ph id="ph2">`Try`</ph> Block gefolgt von einer oder mehreren <ph id="ph3">`Catch`</ph> Klauseln, die Handler für verschiedene Ausnahmen angeben.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>When an exception is thrown in a <ph id="ph1">`Try`</ph> block, <ph id="ph2">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> looks for the <ph id="ph3">`Catch`</ph> statement that handles the exception.</source>
          <target state="translated">Wenn eine Ausnahme ausgelöst wird, einem <ph id="ph1">`Try`</ph> Block <ph id="ph2">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> sucht nach der <ph id="ph3">`Catch`</ph> -Anweisung, die die Ausnahme behandelt.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>If a matching <ph id="ph1">`Catch`</ph> statement is not found, <ph id="ph2">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> examines the method that called the current method, and so on up the call stack.</source>
          <target state="translated">Wenn ein entsprechender <ph id="ph1">`Catch`</ph> Anweisung nicht gefunden wird, <ph id="ph2">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> überprüft die Methode, die die aktuelle Methode ist und so weiter oben in der Aufrufliste aufgerufen.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>If no <ph id="ph1">`Catch`</ph> block is found, <ph id="ph2">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> displays an unhandled exception message to the user and stops execution of the program.</source>
          <target state="translated">Wenn kein <ph id="ph1">`Catch`</ph> Block gefunden wird, <ph id="ph2">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> wird dem Benutzer eine nicht behandelte Ausnahme angezeigt, und beendet die Ausführung des Programms.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>You can use more than one <ph id="ph1">`Catch`</ph> statement in a <ph id="ph2">`Try…Catch`</ph> statement.</source>
          <target state="translated">Sie können mehrere <ph id="ph1">`Catch`</ph> -Anweisung in eine <ph id="ph2">`Try…Catch`</ph> Anweisung.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>If you do this, the order of the <ph id="ph1">`Catch`</ph> clauses is significant because they are examined in order.</source>
          <target state="translated">Wenn Sie die Reihenfolge der dazu die <ph id="ph1">`Catch`</ph> Klauseln ist wichtig, da sie in der Reihenfolge untersucht werden.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Catch the more specific exceptions before the less specific ones.</source>
          <target state="translated">Fangen Sie spezifischere Ausnahmen vor den weniger spezifischen ab.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The following <ph id="ph1">`Catch`</ph> statement conditions are the least specific, and will catch all exceptions that derive from the &lt;xref:System.Exception&gt; class.</source>
          <target state="translated">Die folgenden <ph id="ph1">`Catch`</ph> Anweisung Zustände sind allgemeinsten und fängt alle Ausnahmen, die von der &lt;xref:System.Exception&gt;Klasse&lt;/xref:System.Exception&gt; abgeleitet werden</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>You should ordinarily use one of these variations as the last <ph id="ph1">`Catch`</ph> block in the <ph id="ph2">`Try...Catch...Finally`</ph> structure, after catching all the specific exceptions you expect.</source>
          <target state="translated">Verwenden eines Variationen in der Regel wie in den letzten <ph id="ph1">`Catch`</ph> -Block in der <ph id="ph2">`Try...Catch...Finally`</ph> -Struktur verwenden, nachdem Sie alle gewünschten spezifischen Ausnahmen abfangen.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Control flow can never reach a <ph id="ph1">`Catch`</ph> block that follows either of these variations.</source>
          <target state="translated">Kontrollfluss erreichen nie einen <ph id="ph1">`Catch`</ph> -Block, der entweder der Variationen folgt.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`type`</ph> is <ph id="ph2">`Exception`</ph>, for example: <ph id="ph3">`Catch ex As Exception`</ph></source>
          <target state="translated">Die <ph id="ph1">`type`</ph> ist <ph id="ph2">`Exception`</ph>, beispielsweise:<ph id="ph3">`Catch ex As Exception`</ph></target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The statement has no <ph id="ph1">`exception`</ph> variable, for example: <ph id="ph2">`Catch`</ph></source>
          <target state="translated">Die Anweisung hat keine <ph id="ph1">`exception`</ph> Variable, Beispiel:<ph id="ph2">`Catch`</ph></target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>When a <ph id="ph1">`Try…Catch…Finally`</ph> statement is nested in another <ph id="ph2">`Try`</ph> block, <ph id="ph3">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> first examines each <ph id="ph4">`Catch`</ph> statement in the innermost <ph id="ph5">`Try`</ph> block.</source>
          <target state="translated">Wenn ein <ph id="ph1">`Try…Catch…Finally`</ph> -Anweisung in einer anderen geschachtelt ist <ph id="ph2">`Try`</ph> Block <ph id="ph3">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> zuerst überprüft jede <ph id="ph4">`Catch`</ph> -Anweisung in der innersten <ph id="ph5">`Try`</ph> Block.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>If no matching <ph id="ph1">`Catch`</ph> statement is found, the search proceeds to the <ph id="ph2">`Catch`</ph> statements of the outer <ph id="ph3">`Try…Catch…Finally`</ph> block.</source>
          <target state="translated">Wenn keine übereinstimmende <ph id="ph1">`Catch`</ph> Anweisung gefunden wird, wird die Suche wird fortgesetzt, um die <ph id="ph2">`Catch`</ph> -Anweisungen des äußeren <ph id="ph3">`Try…Catch…Finally`</ph> Block.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Local variables from a <ph id="ph1">`Try`</ph> block are not available in a <ph id="ph2">`Catch`</ph> block because they are separate blocks.</source>
          <target state="translated">Lokale Variablen aus einer <ph id="ph1">`Try`</ph> Block sind nicht verfügbar in eine <ph id="ph2">`Catch`</ph> blockiert werden, da sie eigene Blöcke handelt.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>If you want to use a variable in more than one block, declare the variable outside the <ph id="ph1">`Try...Catch...Finally`</ph> structure.</source>
          <target state="translated">Wenn Sie eine Variable in mehreren Blöcken verwenden möchten, deklarieren Sie die Variable außerhalb der <ph id="ph1">`Try...Catch...Finally`</ph> Struktur.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Try…Catch…Finally`</ph> statement is available as an IntelliSense code snippet.</source>
          <target state="translated">Die <ph id="ph1">`Try…Catch…Finally`</ph> -Anweisung ist als IntelliSense-Codeausschnitt verfügbar.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>In the Code Snippets Manager, expand <bpt id="p1">**</bpt>Code Patterns - If, For Each, Try Catch, Property, etc<ept id="p1">**</ept>, and then <bpt id="p2">**</bpt>Error Handling (Exceptions)<ept id="p2">**</ept>.</source>
          <target state="translated">Erweitern Sie im Codeausschnitt-Manager, <bpt id="p1">**</bpt>Codemuster - If, For Each, Try Catch, Eigenschaft usw.<ept id="p1">**</ept>, und klicken Sie dann <bpt id="p2">**</bpt>Fehlerbehandlung (Ausnahmen)<ept id="p2">**</ept>.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Code Snippets<ept id="p1">](https://docs.microsoft.com/visualstudio/ide/code-snippets)</ept>.</source>
          <target state="translated">Weitere Informationen finden Sie unter <bpt id="p1">[</bpt>Codeausschnitte<ept id="p1">](https://docs.microsoft.com/visualstudio/ide/code-snippets)</ept>.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Finally Block</source>
          <target state="translated">Finally-Block</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>If you have one or more statements that must run before you exit the <ph id="ph1">`Try`</ph> structure, use a <ph id="ph2">`Finally`</ph> block.</source>
          <target state="translated">Wenn Sie eine oder mehrere Anweisungen, die ausgeführt werden muss, bevor Sie verlassen haben die <ph id="ph1">`Try`</ph> verwenden eine <ph id="ph2">`Finally`</ph> Block.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Control passes to the <ph id="ph1">`Finally`</ph> block just before it passes out of the <ph id="ph2">`Try…Catch`</ph> structure.</source>
          <target state="translated">Die Steuerung an die <ph id="ph1">`Finally`</ph> blockieren, kurz bevor sie übergeben die <ph id="ph2">`Try…Catch`</ph> Struktur.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>This is true even if an exception occurs anywhere inside the <ph id="ph1">`Try`</ph> structure.</source>
          <target state="translated">Dies gilt auch beim Auftreten einer Ausnahme an einer beliebigen Stelle innerhalb der <ph id="ph1">`Try`</ph> Struktur.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Finally`</ph> block is useful for running any code that must execute even if there is an exception.</source>
          <target state="translated">Ein <ph id="ph1">`Finally`</ph> -Block ist nützlich zum Ausführen von Code, ausführen muss, auch wenn eine Ausnahme aufgetreten ist.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Control is passed to the <ph id="ph1">`Finally`</ph> block regardless of how the <ph id="ph2">`Try...Catch`</ph> block exits.</source>
          <target state="translated">Erhält die Kontrolle der <ph id="ph1">`Finally`</ph> Block unabhängig davon, wie der <ph id="ph2">`Try...Catch`</ph> -Block beendet wird.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The code in a <ph id="ph1">`Finally`</ph> block runs even if your code encounters a <ph id="ph2">`Return`</ph> statement in a <ph id="ph3">`Try`</ph> or <ph id="ph4">`Catch`</ph> block.</source>
          <target state="translated">Der Code in einer <ph id="ph1">`Finally`</ph> -Block ausgeführt, auch wenn im Code auftritt einer <ph id="ph2">`Return`</ph> -Anweisung in einer <ph id="ph3">`Try`</ph> oder <ph id="ph4">`Catch`</ph> Block.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Control does not pass from a <ph id="ph1">`Try`</ph> or <ph id="ph2">`Catch`</ph> block to the corresponding <ph id="ph3">`Finally`</ph> block in the following cases:</source>
          <target state="translated">Steuerelement übergibt nicht aus einer <ph id="ph1">`Try`</ph> oder <ph id="ph2">`Catch`</ph> -block, um das entsprechende <ph id="ph3">`Finally`</ph> blockieren in den folgenden Fällen:</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">[</bpt>End Statement<ept id="p1">](../../../visual-basic/language-reference/statements/end-statement.md)</ept> is encountered in the <ph id="ph1">`Try`</ph> or <ph id="ph2">`Catch`</ph> block.</source>
          <target state="translated">Ein <bpt id="p1">[</bpt>End-Anweisung<ept id="p1">](../../../visual-basic/language-reference/statements/end-statement.md)</ept> gefunden wird in der <ph id="ph1">`Try`</ph> oder <ph id="ph2">`Catch`</ph> Block.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.StackOverflowException&gt; is thrown in the <ph id="ph1">`Try`</ph> or <ph id="ph2">`Catch`</ph> block.</source>
          <target state="translated">Ein &lt;xref:System.StackOverflowException&gt;wird ausgelöst, der <ph id="ph1">`Try`</ph> oder <ph id="ph2">`Catch`</ph> Block.&lt;/xref:System.StackOverflowException&gt;</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>It is not valid to explicitly transfer execution into a <ph id="ph1">`Finally`</ph> block.</source>
          <target state="translated">Es ist nicht zulässig, die Ausführung in explizit übertragen ein <ph id="ph1">`Finally`</ph> Block.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Transferring execution out of a <ph id="ph1">`Finally`</ph> block is not valid, except through an exception.</source>
          <target state="translated">Übertragen die Ausführung von einem <ph id="ph1">`Finally`</ph> Block ist nicht gültig, außer durch eine Ausnahme.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>If a <ph id="ph1">`Try`</ph> statement does not contain at least one <ph id="ph2">`Catch`</ph> block, it must contain a <ph id="ph3">`Finally`</ph> block.</source>
          <target state="translated">Wenn ein <ph id="ph1">`Try`</ph> Anweisung enthält keine mindestens <ph id="ph2">`Catch`</ph> Block muss enthalten eine <ph id="ph3">`Finally`</ph> Block.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>If you do not have to catch specific exceptions, the <ph id="ph1">`Using`</ph> statement behaves like a <ph id="ph2">`Try…Finally`</ph> block, and guarantees disposal of the resources, regardless of how you exit the block.</source>
          <target state="translated">Wenn Sie keinen bestimmte Ausnahmen abfangen, die <ph id="ph1">`Using`</ph> Anweisung verhält sich wie eine <ph id="ph2">`Try…Finally`</ph> Block und garantiert die Freigabe von Ressourcen unabhängig davon, wie Sie den Block beenden.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>This is true even with an unhandled exception.</source>
          <target state="translated">Dies gilt auch dann eine nicht behandelte Ausnahme.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Using Statement<ept id="p1">](../../../visual-basic/language-reference/statements/using-statement.md)</ept>.</source>
          <target state="translated">Weitere Informationen finden Sie unter <bpt id="p1">[</bpt>Using-Anweisung<ept id="p1">](../../../visual-basic/language-reference/statements/using-statement.md)</ept>.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Exception Argument</source>
          <target state="translated">Ausnahme-Argument</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Catch`</ph> block <ph id="ph2">`exception`</ph> argument is an instance of the &lt;xref:System.Exception&gt; class or a class that derives from the <ph id="ph3">`Exception`</ph> class.</source>
          <target state="translated">Die <ph id="ph1">`Catch`</ph> Block <ph id="ph2">`exception`</ph> Argument ist eine Instanz von der &lt;xref:System.Exception&gt;Klasse oder eine Klasse, die von abgeleitet ist die <ph id="ph3">`Exception`</ph> Klasse&lt;/xref:System.Exception&gt;</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Exception`</ph> class instance corresponds to the error that occurred in the <ph id="ph2">`Try`</ph> block.</source>
          <target state="translated">Die <ph id="ph1">`Exception`</ph> -Klasseninstanz entspricht der aufgetretenen Fehler der <ph id="ph2">`Try`</ph> Block.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The properties of the <ph id="ph1">`Exception`</ph> object help to identify the cause and location of an exception.</source>
          <target state="translated">Die Eigenschaften der <ph id="ph1">`Exception`</ph> -Objekt Hilfe, um die Ursache und Ort einer Ausnahme zu identifizieren.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>For example, the &lt;xref:System.Exception.StackTrace%2A&gt; property lists the called methods that led to the exception, helping you find where the error occurred in the code.</source>
          <target state="translated">Zum Beispiel die &lt;xref:System.Exception.StackTrace%2A&gt;-Eigenschaft führt die aufgerufenen Methoden, die auf die Ausnahme, führten des Fehlers im Code führte.&lt;/xref:System.Exception.StackTrace%2A&gt;</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Exception.Message%2A&gt; returns a message that describes the exception.</source>
          <target state="translated">&lt;xref:System.Exception.Message%2A&gt;Gibt eine Meldung, die die Ausnahme beschreibt.&lt;/xref:System.Exception.Message%2A&gt;</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Exception.HelpLink%2A&gt; returns a link to an associated Help file.</source>
          <target state="translated">&lt;xref:System.Exception.HelpLink%2A&gt;Gibt einen Link zu einer zugehörigen Hilfedatei zurück.&lt;/xref:System.Exception.HelpLink%2A&gt;</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Exception.InnerException%2A&gt; returns the <ph id="ph1">`Exception`</ph> object that caused the current exception, or it returns <ph id="ph2">`Nothing`</ph> if there is no original <ph id="ph3">`Exception`</ph>.</source>
          <target state="translated">&lt;xref:System.Exception.InnerException%2A&gt;Gibt die <ph id="ph1">`Exception`</ph> -Objekt, das die aktuelle Ausnahme oder verursacht gibt <ph id="ph2">`Nothing`</ph> Wenn keine ursprüngliche <ph id="ph3">`Exception`</ph>.&lt;/xref:System.Exception.InnerException%2A&gt;</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Considerations When Using a Try…Catch Statement</source>
          <target state="translated">Aspekte der Verwendung ein Try... Catch-Anweisung</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Use a <ph id="ph1">`Try…Catch`</ph> statement only to signal the occurrence of unusual or unanticipated program events.</source>
          <target state="translated">Verwenden einer <ph id="ph1">`Try…Catch`</ph> Anweisung nur für das Programm ungewöhnliche oder unerwartete Ereignisse auftreten signalisiert.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Reasons for this include the following:</source>
          <target state="translated">Folgende: Gründe</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Catching exceptions at runtime creates additional overhead, and is likely to be slower than pre-checking to avoid exceptions.</source>
          <target state="translated">Abfangen von Ausnahmen zur Laufzeit führt zu zusätzlichem Aufwand und ist wahrscheinlich langsamer als Vorabüberprüfungen, um Ausnahmen zu vermeiden.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>If a <ph id="ph1">`Catch`</ph> block is not handled correctly, the exception might not be reported correctly to users.</source>
          <target state="translated">Wenn ein <ph id="ph1">`Catch`</ph> Block nicht ordnungsgemäß behandelt wird und die Ausnahme möglicherweise nicht korrekt für Benutzer gemeldet werden.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Exception handling makes a program more complex.</source>
          <target state="translated">Ausnahmebehandlung macht ein Programm komplexer.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>You do not always need a <ph id="ph1">`Try…Catch`</ph> statement to check for a condition that is likely to occur.</source>
          <target state="translated">Sie brauchen nicht immer eine <ph id="ph1">`Try…Catch`</ph> Anweisung für eine Bedingung überprüft, die zu rechnen ist.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The following example checks whether a file exists before trying to open it.</source>
          <target state="translated">Im folgenden Beispiel wird überprüft, ob eine Datei vorhanden ist, bevor Sie versuchen, ihn zu öffnen.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>This reduces the need for catching an exception thrown by the &lt;xref:System.IO.File.OpenText%2A&gt; method.</source>
          <target state="translated">Dies reduziert die Notwendigkeit für das Abfangen einer Ausnahme von der &lt;xref:System.IO.File.OpenText%2A&gt;-Methode.&lt;/xref:System.IO.File.OpenText%2A&gt;</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#94<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/try-catch-finally-statement_1.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements&amp;#94;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/try-catch-finally-statement_1.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Ensure that code in <ph id="ph1">`Catch`</ph> blocks can properly report exceptions to users, whether through thread-safe logging or appropriate messages.</source>
          <target state="translated">Vergewissern Sie sich, Code in <ph id="ph1">`Catch`</ph> Blöcke Ausnahmen für Benutzer über threadsichere oder die entsprechenden Nachrichten können ordnungsgemäß gemeldet werden.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Otherwise, exceptions might remain unknown.</source>
          <target state="translated">Andernfalls bleiben Ausnahmen möglicherweise unbekannt.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Async Methods</source>
          <target state="translated">Asynchrone Methoden</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>If you mark a method with the <bpt id="p1">[</bpt>Async<ept id="p1">](../../../visual-basic/language-reference/modifiers/async.md)</ept> modifier, you can use the <bpt id="p2">[</bpt>Await<ept id="p2">](../../../visual-basic/language-reference/operators/await-operator.md)</ept> operator in the method.</source>
          <target state="translated">Markieren Sie eine Methode mit der <bpt id="p1">[</bpt>Async<ept id="p1">](../../../visual-basic/language-reference/modifiers/async.md)</ept> -Modifizierer können Sie die <bpt id="p2">[</bpt>"await"<ept id="p2">](../../../visual-basic/language-reference/operators/await-operator.md)</ept> -Operator in der Methode.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>A statement with the <ph id="ph1">`Await`</ph> operator suspends execution of the method until the awaited task completes.</source>
          <target state="translated">Eine Anweisung mit der <ph id="ph1">`Await`</ph> -Operator hält die Ausführung der Methode, bis die Aufgabe abgeschlossen ist.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The task represents ongoing work.</source>
          <target state="translated">Die Aufgabe stellt derzeit ausgeführte Arbeit dar.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>When the task that's associated with the <ph id="ph1">`Await`</ph> operator finishes, execution resumes in the same method.</source>
          <target state="translated">Wenn die Aufgabe, die zugeordnet ist die <ph id="ph1">`Await`</ph> Operator abgeschlossen ist, setzt der Ausführung in derselben Methode.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Control Flow in Async Programs<ept id="p1">](../../../visual-basic/programming-guide/concepts/async/control-flow-in-async-programs.md)</ept>.</source>
          <target state="translated">Weitere Informationen finden Sie unter <bpt id="p1">[</bpt>Ablaufsteuerung in asynchronen Programmen<ept id="p1">](../../../visual-basic/programming-guide/concepts/async/control-flow-in-async-programs.md)</ept>.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>A task returned by an Async method may end in a faulted state, indicating that it completed due to an unhandled exception.</source>
          <target state="translated">Ein von einer asynchronen Methode zurückgegebene Task am Ende womöglich einen Fehlerzustand, der angibt, dass es aufgrund einer nicht behandelten Ausnahme abgeschlossen.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>A task may also end in a canceled state, which results in an <ph id="ph1">`OperationCanceledException`</ph> being thrown out of the await expression.</source>
          <target state="translated">Eine Aufgabe kann auch beenden, in einem abgebrochenen Zustand, wodurch eine <ph id="ph1">`OperationCanceledException`</ph> ausgelöst wird, aus der Await-Ausdruck.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>To catch either type of exception, place the <ph id="ph1">`Await`</ph> expression that's associated with the task in a <ph id="ph2">`Try`</ph> block, and catch the exception in the <ph id="ph3">`Catch`</ph> block.</source>
          <target state="translated">Um entweder Typ von Ausnahme abfangen möchten, setzen Sie die <ph id="ph1">`Await`</ph> -Ausdruck, der die Aufgabe zugeordnet ist ein <ph id="ph2">`Try`</ph> blockieren, und die Ausnahme in der <ph id="ph3">`Catch`</ph> Block.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>An example is provided later in this topic.</source>
          <target state="translated">Ein Beispiel ist unten in diesem Thema bereitgestellt.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>A task can be in a faulted state because multiple exceptions were responsible for its faulting.</source>
          <target state="translated">Eine Aufgabe kann in einem fehlerhaften Zustand sein, da mehrere Ausnahmen für die fehlgeschlagene verantwortlich waren.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>For example, the task might be the result of a call to &lt;xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">Der Task kann z. B. das Ergebnis eines Aufrufs von &lt;xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=fullName&gt;.&lt;/xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=fullName&gt; werden.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>When you await such a task, the caught exception is only one of the exceptions, and you can't predict which exception will be caught.</source>
          <target state="translated">Wenn Sie eine solche Aufgabe warten, die abgefangene Ausnahme ist nur eine der Ausnahmen, und Sie nicht vorhersagen, welche Ausnahme abgefangen wird.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>An example is provided later in this topic.</source>
          <target state="translated">Ein Beispiel ist unten in diesem Thema bereitgestellt.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`Await`</ph> expression can't be inside a <ph id="ph2">`Catch`</ph> block or <ph id="ph3">`Finally`</ph> block.</source>
          <target state="translated">Ein <ph id="ph1">`Await`</ph> Ausdruck kann nicht innerhalb einer <ph id="ph2">`Catch`</ph> Block oder <ph id="ph3">`Finally`</ph> Block.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Iterators</source>
          <target state="translated">Iteratoren</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>An iterator function or <ph id="ph1">`Get`</ph> accessor performs a custom iteration over a collection.</source>
          <target state="translated">Ein Iteratorfunktion oder <ph id="ph1">`Get`</ph> Accessor führt eine benutzerdefinierte Iteration durch eine Auflistung.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>An iterator uses a <bpt id="p1">[</bpt>Yield<ept id="p1">](../../../visual-basic/language-reference/statements/yield-statement.md)</ept> statement to return each element of the collection one at a time.</source>
          <target state="translated">Ein Iterator verwendet eine <bpt id="p1">[</bpt>ergeben<ept id="p1">](../../../visual-basic/language-reference/statements/yield-statement.md)</ept> -Anweisung jedes Element der Auflistung zu einem Zeitpunkt zurückgegeben.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>You call an iterator function by using a <bpt id="p1">[</bpt>For Each...Next Statement<ept id="p1">](../../../visual-basic/language-reference/statements/for-each-next-statement.md)</ept>.</source>
          <target state="translated">Rufen Sie eine Iteratorfunktion mit einem <bpt id="p1">[</bpt>für jeden... Nächste Anweisung<ept id="p1">](../../../visual-basic/language-reference/statements/for-each-next-statement.md)</ept>.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Yield`</ph> statement can be inside a <ph id="ph2">`Try`</ph> block.</source>
          <target state="translated">Ein <ph id="ph1">`Yield`</ph> Anweisung kann innerhalb einer <ph id="ph2">`Try`</ph> Block.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Try`</ph> block that contains a <ph id="ph2">`Yield`</ph> statement can have <ph id="ph3">`Catch`</ph> blocks, and can have a <ph id="ph4">`Finally`</ph> block.</source>
          <target state="translated">Ein <ph id="ph1">`Try`</ph> Block mit einer <ph id="ph2">`Yield`</ph> -Anweisung kann verfügen <ph id="ph3">`Catch`</ph> blockiert, und kann einen <ph id="ph4">`Finally`</ph> Block.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>See the "Try Blocks in Visual Basic" section of <bpt id="p1">[</bpt>Iterators<ept id="p1">](http://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7)</ept> for an example.</source>
          <target state="translated">Finden Sie im Abschnitt "versuchen Blöcke in Visual Basic" <bpt id="p1">[</bpt>Iteratoren<ept id="p1">](http://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7)</ept> ein Beispiel.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Yield`</ph> statement cannot be inside a <ph id="ph2">`Catch`</ph> block or a <ph id="ph3">`Finally`</ph> block.</source>
          <target state="translated">Ein <ph id="ph1">`Yield`</ph> Anweisung kann nicht innerhalb einer <ph id="ph2">`Catch`</ph> Block oder ein <ph id="ph3">`Finally`</ph> Block.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`For Each`</ph> body (outside of the iterator function) throws an exception, a <ph id="ph2">`Catch`</ph> block in the iterator function is not executed, but a <ph id="ph3">`Finally`</ph> block in the iterator function is executed.</source>
          <target state="translated">Wenn die <ph id="ph1">`For Each`</ph> -Text (außerhalb der Iteratorfunktion) eine Ausnahme auslöst, ein <ph id="ph2">`Catch`</ph> -Block in der Iteratorfunktion wird nicht ausgeführt, aber ein <ph id="ph3">`Finally`</ph> Block in der Iteratorfunktion ausgeführt wird.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Catch`</ph> block inside an iterator function catches only exceptions that occur inside the iterator function.</source>
          <target state="translated">Ein <ph id="ph1">`Catch`</ph> Block innerhalb einer Iteratorfunktion nur Ausnahmen abzufangen, die innerhalb der Iteratorfunktion auftreten.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Partial-Trust Situations</source>
          <target state="translated">Teilweise vertrauenswürdigen Umgebungen</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>In partial-trust situations, such as an application hosted on a network share, <ph id="ph1">`Try...Catch...Finally`</ph> does not catch security exceptions that occur before the method that contains the call is invoked.</source>
          <target state="translated">In teilweise vertrauenswürdigen Situationen, z. B. eine Anwendung, die auf einer Netzwerkfreigabe bereitgestellt <ph id="ph1">`Try...Catch...Finally`</ph> fängt keine aufgetretenen Sicherheitsausnahmen angezeigt werden, bevor die Methode, die den Aufruf enthält aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The following example, when you put it on a server share and run from there, produces the error "System.Security.SecurityException: Request Failed."</source>
          <target state="translated">Im folgende Beispiel, wenn Sie es auf einer Serverfreigabe und dort ablegen, wird der Fehler "System.Security.SecurityException: Fehler bei der Anforderung."</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>For more information about security exceptions, see the &lt;xref:System.Security.SecurityException&gt; class.</source>
          <target state="translated">Weitere Informationen über Sicherheitsausnahmen finden Sie in der &lt;xref:System.Security.SecurityException&gt;Klasse.&lt;/xref:System.Security.SecurityException&gt;</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#85<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/try-catch-finally-statement_2.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements&amp;#85;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/try-catch-finally-statement_2.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>In such a partial-trust situation, you have to put the <ph id="ph1">`Process.Start`</ph> statement in a separate <ph id="ph2">`Sub`</ph>.</source>
          <target state="translated">In einem teilweise vertrauenswürdigen solchen, muss die <ph id="ph1">`Process.Start`</ph> Anweisung in einem separaten <ph id="ph2">`Sub`</ph>.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The initial call to the <ph id="ph1">`Sub`</ph> will fail.</source>
          <target state="translated">Der erste Aufruf der <ph id="ph1">`Sub`</ph> schlägt fehl.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>This enables <ph id="ph1">`Try...Catch`</ph> to catch it before the <ph id="ph2">`Sub`</ph> that contains <ph id="ph3">`Process.Start`</ph> is started and the security exception produced.</source>
          <target state="translated">Auf diese Weise können <ph id="ph1">`Try...Catch`</ph> abzufangen, bevor die <ph id="ph2">`Sub`</ph> , enthält <ph id="ph3">`Process.Start`</ph> wird gestartet und die Sicherheitsausnahme erzeugt.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Beispiel</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The following example illustrates the structure of the <ph id="ph1">`Try...Catch...Finally`</ph> statement.</source>
          <target state="translated">Das folgende Beispiel veranschaulicht die Struktur der <ph id="ph1">`Try...Catch...Finally`</ph> Anweisung.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#86<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/try-catch-finally-statement_3.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements&amp;#86;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/try-catch-finally-statement_3.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Beispiel</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>In the following example, the <ph id="ph1">`CreateException`</ph> method throws a <ph id="ph2">`NullReferenceException`</ph>.</source>
          <target state="translated">Im folgenden Beispiel die <ph id="ph1">`CreateException`</ph> -Methode löst eine <ph id="ph2">`NullReferenceException`</ph>.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The code that generates the exception is not in a <ph id="ph1">`Try`</ph> block.</source>
          <target state="translated">Der Code, der die Ausnahme generiert befindet sich nicht in einem <ph id="ph1">`Try`</ph> Block.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Therefore, the <ph id="ph1">`CreateException`</ph> method does not handle the exception.</source>
          <target state="translated">Aus diesem Grund die <ph id="ph1">`CreateException`</ph> Methode die Ausnahme nicht behandelt.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`RunSample`</ph> method does handle the exception because the call to the <ph id="ph2">`CreateException`</ph> method is in a <ph id="ph3">`Try`</ph> block.</source>
          <target state="translated">Die <ph id="ph1">`RunSample`</ph> Methode die Ausnahme behandeln, da der Aufruf der <ph id="ph2">`CreateException`</ph> -Methode wird in einer <ph id="ph3">`Try`</ph> Block.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The example includes <ph id="ph1">`Catch`</ph> statements for several types of exceptions, ordered from the most specific to the most general.</source>
          <target state="translated">Das Beispiel enthält <ph id="ph1">`Catch`</ph> Anweisungen für verschiedene Arten von Ausnahmen, geordnet von der spezifischsten bis zur die allgemeinste.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#91<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/try-catch-finally-statement_4.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements&amp;#91;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/try-catch-finally-statement_4.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Beispiel</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The following example shows how to use a <ph id="ph1">`Catch When`</ph> statement to filter on a conditional expression.</source>
          <target state="translated">Das folgende Beispiel zeigt, wie Sie eine <ph id="ph1">`Catch When`</ph> Anweisung, um nach einem bedingten Ausdruck zu filtern.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>If the conditional expression evaluates to <ph id="ph1">`True`</ph>, the code in the <ph id="ph2">`Catch`</ph> block runs.</source>
          <target state="translated">Wenn der bedingte Ausdruck ergibt <ph id="ph1">`True`</ph>, den Code in der <ph id="ph2">`Catch`</ph> -Block ausgeführt.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#92<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/try-catch-finally-statement_5.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements&amp;#92;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/try-catch-finally-statement_5.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Beispiel</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The following example has a <ph id="ph1">`Try…Catch`</ph> statement that is contained in a <ph id="ph2">`Try`</ph> block.</source>
          <target state="translated">Im folgenden Beispiel ist ein <ph id="ph1">`Try…Catch`</ph> -Anweisung, die in enthalten ist ein <ph id="ph2">`Try`</ph> Block.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>The inner <ph id="ph1">`Catch`</ph> block throws an exception that has its <ph id="ph2">`InnerException`</ph> property set to the original exception.</source>
          <target state="translated">Die innere <ph id="ph1">`Catch`</ph> Block löst eine Ausnahme aus, dessen <ph id="ph2">`InnerException`</ph> -Eigenschaft auf die ursprüngliche Ausnahme festgelegt.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>The outer <ph id="ph1">`Catch`</ph> block reports its own exception and the inner exception.</source>
          <target state="translated">Die äußere <ph id="ph1">`Catch`</ph> -Block meldet seine eigene Ausnahme und die innere Ausnahme.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#93<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/try-catch-finally-statement_6.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements&amp;#93;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/try-catch-finally-statement_6.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Beispiel</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The following example illustrates exception handling for async methods.</source>
          <target state="translated">Im folgenden Beispiel wird die Ausnahmebehandlung für asynchrone Methoden veranschaulicht.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>To catch an exception that applies to an async task, the <ph id="ph1">`Await`</ph> expression is in a <ph id="ph2">`Try`</ph> block of the caller, and the exception is caught in the <ph id="ph3">`Catch`</ph> block.</source>
          <target state="translated">Eine Ausnahme abfangen, die für eine asynchrone Aufgabe, gilt die <ph id="ph1">`Await`</ph> Ausdruck wird einer <ph id="ph2">`Try`</ph> in Block der Aufrufer und die Ausnahme abgefangen der <ph id="ph3">`Catch`</ph> Block.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Uncomment the <ph id="ph1">`Throw New Exception`</ph> line in the example to demonstrate exception handling.</source>
          <target state="translated">Heben Sie die Auskommentierung der Zeile <ph id="ph1">`Throw New Exception`</ph> im Beispiel auf, um die Ausnahmebehandlung zu veranschaulichen.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>The exception is caught in the <ph id="ph1">`Catch`</ph> block, the task's <ph id="ph2">`IsFaulted`</ph> property is set to <ph id="ph3">`True`</ph>, and the task's <ph id="ph4">`Exception.InnerException`</ph> property is set to the exception.</source>
          <target state="translated">Wird die Ausnahme der <ph id="ph1">`Catch`</ph> zu blockieren, der Aufgabe <ph id="ph2">`IsFaulted`</ph> -Eigenschaft auf festgelegt ist <ph id="ph3">`True`</ph>, und die Aufgabe <ph id="ph4">`Exception.InnerException`</ph> Eigenschaft auf die Ausnahme festgelegt ist.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Uncomment the <ph id="ph1">`Throw New OperationCancelledException`</ph> line to demonstrate what happens when you cancel an asynchronous process.</source>
          <target state="translated">Kommentieren Sie die <ph id="ph1">`Throw New OperationCancelledException`</ph> Zeile zeigen, was passiert, wenn Sie einen asynchronen Prozess abbrechen.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>The exception is caught in the <ph id="ph1">`Catch`</ph> block, and the task's <ph id="ph2">`IsCanceled`</ph> property is set to <ph id="ph3">`True`</ph>.</source>
          <target state="translated">Wird die Ausnahme der <ph id="ph1">`Catch`</ph> -Block ausgeführt, und der Aufgabe <ph id="ph2">`IsCanceled`</ph> -Eigenschaft auf festgelegt ist <ph id="ph3">`True`</ph>.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>However, under some conditions that don't apply to this example, <ph id="ph1">`IsFaulted`</ph> is set to <ph id="ph2">`True`</ph> and <ph id="ph3">`IsCanceled`</ph> is set to <ph id="ph4">`False`</ph>.</source>
          <target state="translated">Jedoch unter bestimmten Umständen, die für dieses Beispiel gelten nicht <ph id="ph1">`IsFaulted`</ph> Wert <ph id="ph2">`True`</ph> und <ph id="ph3">`IsCanceled`</ph> Wert <ph id="ph4">`False`</ph>.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>csAsyncExceptions#1<ept id="p2">](../../../csharp/language-reference/keywords/codesnippet/VisualBasic/try-catch-finally-statement_7.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>CsAsyncExceptions&amp;#1;<ept id="p2">](../../../csharp/language-reference/keywords/codesnippet/VisualBasic/try-catch-finally-statement_7.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Beispiel</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>The following example illustrates exception handling where multiple tasks can result in multiple exceptions.</source>
          <target state="translated">Das folgende Beispiel veranschaulicht die Behandlung von Ausnahmen in Fällen, in denen mehrere Aufgaben zu mehreren Ausnahmen führen können.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Try`</ph> block has the <ph id="ph2">`Await`</ph> expression for the task that &lt;xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=fullName&gt; returned.</source>
          <target state="translated">Die <ph id="ph1">`Try`</ph> -Block ist die <ph id="ph2">`Await`</ph> Ausdruck für die Aufgabe, die &lt;xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=fullName&gt;zurückgegeben.&lt;/xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>The task is complete when the three tasks to which &lt;xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=fullName&gt; is applied are complete.</source>
          <target state="translated">Die Aufgabe ist abgeschlossen, wenn die drei, auf die Aufgaben &lt;xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=fullName&gt;angewendet wird abgeschlossen sind.&lt;/xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Each of the three tasks causes an exception.</source>
          <target state="translated">Jede der drei Aufgaben löst eine Ausnahme aus.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Catch`</ph> block iterates through the exceptions, which are found in the <ph id="ph2">`Exception.InnerExceptions`</ph> property of the task that <ph id="ph3">`Task.WhenAll`</ph> returned.</source>
          <target state="translated">Die <ph id="ph1">`Catch`</ph> Block durchläuft die Ausnahmen, die in enthalten sind die <ph id="ph2">`Exception.InnerExceptions`</ph> -Eigenschaft der Aufgabe, die <ph id="ph3">`Task.WhenAll`</ph> zurückgegeben.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>csAsyncExceptions#3<ept id="p2">](../../../csharp/language-reference/keywords/codesnippet/VisualBasic/try-catch-finally-statement_8.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>CsAsyncExceptions&amp;3;<ept id="p2">](../../../csharp/language-reference/keywords/codesnippet/VisualBasic/try-catch-finally-statement_8.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">Siehe auch</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>&lt;xref:Microsoft.VisualBasic.Information.Err%2A&gt;</source>
          <target state="translated">&lt;xref:Microsoft.VisualBasic.Information.Err%2A&gt;&lt;/xref:Microsoft.VisualBasic.Information.Err%2A&gt;</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Exception&gt;</source>
          <target state="translated">&lt;xref:System.Exception&gt;&lt;/xref:System.Exception&gt;</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Exit Statement<ept id="p1">](../../../visual-basic/language-reference/statements/exit-statement.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Exit-Anweisung<ept id="p1">](../../../visual-basic/language-reference/statements/exit-statement.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>On Error Statement<ept id="p1">](../../../visual-basic/language-reference/statements/on-error-statement.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>On Error-Anweisung<ept id="p1">](../../../visual-basic/language-reference/statements/on-error-statement.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Best Practices for Using Code Snippets<ept id="p1">](https://docs.microsoft.com/visualstudio/ide/best-practices-for-using-code-snippets)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Bewährte Methoden für die Verwendung von Codeausschnitten<ept id="p1">](https://docs.microsoft.com/visualstudio/ide/best-practices-for-using-code-snippets)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Exception Handling<ept id="p1">](https://msdn.microsoft.com/library/dd997415)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Behandlung von Ausnahmen<ept id="p1">](https://msdn.microsoft.com/library/dd997415)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Throw Statement<ept id="p1">](../../../visual-basic/language-reference/statements/throw-statement.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>Throw-Anweisung<ept id="p1">](../../../visual-basic/language-reference/statements/throw-statement.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>