<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a966b69feca7a7021cafbccb7971913ea781c479</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\linq\type-relationships-in-query-operations.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">67448ac455263820f6bf6c4aa5dedfa148279d20</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f11474c2b7d5eb9902484fd122f08ef7743f0509</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Handback file name: lo-mt_type-relationships-in-query-operations.6953927c2768f8ceabd53e0f7c03fc153c34da2a.de-de is different with handoff file name: type-relationships-in-query-operations.6953927c2768f8ceabd53e0f7c03fc153c34da2a.de-de.</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Type Relationships in Query Operations (Visual Basic) | Microsoft Docs</source>
          <target state="translated">Typbeziehungen in Abfrageoperationen (Visual Basic) | Microsoft-Dokumentation</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Type Relationships in Query Operations (Visual Basic)</source>
          <target state="translated">Typbeziehungen in Abfrageoperationen (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Variables used in <ph id="ph1">[!INCLUDE[vbteclinqext](../../../../csharp/getting-started/includes/vbteclinqext_md.md)]</ph> query operations are strongly typed and must be compatible with each other.</source>
          <target state="translated">Variablen in <ph id="ph1">[!INCLUDE[vbteclinqext](../../../../csharp/getting-started/includes/vbteclinqext_md.md)]</ph> Abfrage Vorgänge sind stark typisiert und müssen miteinander kompatibel sein.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Strong typing is used in the data source, in the query itself, and in the query execution.</source>
          <target state="translated">Starke Typisierung wird in der Datenquelle, in der Abfrage selbst und in die Ausführung der Abfrage verwendet werden.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The following illustration identifies terms used to describe a <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> query.</source>
          <target state="translated">Die folgende Abbildung Begriffe, die zum Beschreiben einer <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> Abfrage.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For more information about the parts of a query, see <bpt id="p1">[</bpt>Basic Query Operations (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/basic-query-operations.md)</ept>.</source>
          <target state="translated">Weitere Informationen über die Teile einer Abfrage finden Sie unter <bpt id="p1">[</bpt>Grundlegende Abfrageoperationen (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/basic-query-operations.md)</ept>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Pseudocode query with elements highlighted.<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/media/sjltyperels.png "SJLtypeRels")</ept></source>
          <target state="translated"><bpt id="p1">![</bpt>Pseudocode-Abfrage mit hervorgehobenen Elementen.<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/media/sjltyperels.png "SJLtypeRels")</ept></target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Parts of a LINQ query</source>
          <target state="translated">Teile einer LINQ-Abfrage</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The type of the range variable in the query must be compatible with the type of the elements in the data source.</source>
          <target state="translated">Der Typ der Bereichsvariablen in der Abfrage muss mit dem Typ der Elemente in der Datenquelle übereinstimmen.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The type of the query variable must be compatible with the sequence element defined in the <ph id="ph1">`Select`</ph> clause.</source>
          <target state="translated">Der Typ der Abfragevariablen muss kompatibel mit dem Sequenzelement gemäß der <ph id="ph1">`Select`</ph> Klausel.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Finally, the type of the sequence elements also must be compatible with the type of the loop control variable that is used in the <ph id="ph1">`For Each`</ph> statement that executes the query.</source>
          <target state="translated">Schließlich der Typ der Sequenzelemente auch muss kompatibel mit dem Typ, der die Loop-Steuerelementvariable, die in verwendet wird die <ph id="ph1">`For Each`</ph> -Anweisung, die die Abfrage ausgeführt wird.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This strong typing facilitates identification of type errors at compile time.</source>
          <target state="translated">Diese starke Typisierung erleichtert die Identifizierung von Typfehler zur Kompilierzeit.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> makes strong typing convenient by implementing local type inference, also known as <bpt id="p1">*</bpt>implicit typing<ept id="p1">*</ept>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>erleichtert eine starke Typisierung durch die Implementierung von lokaler Typrückschluss, auch bekannt als <bpt id="p1">*</bpt>implizite Typisierung<ept id="p1">*</ept>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>That feature is used in the previous example, and you will see it used throughout the <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> samples and documentation.</source>
          <target state="translated">Feature im vorherigen Beispiel verwendet wird, und sehen Sie in allen verwendet die <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> Beispiele und Dokumentation.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In Visual Basic, local type inference is accomplished simply by using a <ph id="ph1">`Dim`</ph> statement without an <ph id="ph2">`As`</ph> clause.</source>
          <target state="translated">Der lokale Typrückschluss erfolgt in Visual Basic einfach mithilfe einer <ph id="ph1">`Dim`</ph> -Anweisung ohne ein <ph id="ph2">`As`</ph> Klausel.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In the following example, <ph id="ph1">`city`</ph> is strongly typed as a string.</source>
          <target state="translated">Im folgenden Beispiel <ph id="ph1">`city`</ph> als Zeichenfolge stark typisiert ist.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQTypeRels#1<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/type-relationships-in-query-operations_1.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQTypeRels&amp;#1;<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/type-relationships-in-query-operations_1.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Local type inference works only when <ph id="ph1">`Option Infer`</ph> is set to <ph id="ph2">`On`</ph>.</source>
          <target state="translated">Der lokale Typrückschluss funktioniert nur, wenn <ph id="ph1">`Option Infer`</ph> Wert <ph id="ph2">`On`</ph>.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Option Infer Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/option-infer-statement.md)</ept>.</source>
          <target state="translated">Weitere Informationen finden Sie unter <bpt id="p1">[</bpt>Option Infer-Anweisung<ept id="p1">](../../../../visual-basic/language-reference/statements/option-infer-statement.md)</ept>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>However, even if you use local type inference in a query, the same type relationships are present among the variables in the data source, the query variable, and the query execution loop.</source>
          <target state="translated">Auch wenn Sie den lokalen Typrückschluss in einer Abfrage verwenden, sind jedoch die gleichen typbeziehungen zwischen den Variablen in der Datenquelle, die Abfragevariable und der Ausführungsschleife Abfrage vorhanden.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>It is useful to have a basic understanding of these type relationships when you are writing <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> queries, or working with the samples and code examples in the documentation.</source>
          <target state="translated">Es empfiehlt sich, ein grundlegendes Verständnis dieser Typ Beziehungen haben, wenn Sie schreiben <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> Abfragen oder Arbeiten mit den Beispielen und Codebeispielen in der Dokumentation.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>You may need to specify an explicit type for a range variable that does not match the type returned from the data source.</source>
          <target state="translated">Sie müssen möglicherweise einen expliziten Typ für eine Bereichsvariable angeben, der nicht den Typ der Datenquelle übereinstimmt.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You can specify the type of the range variable by using an <ph id="ph1">`As`</ph> clause.</source>
          <target state="translated">Sie können den Typ der Bereichsvariablen angeben, mit einem <ph id="ph1">`As`</ph> Klausel.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>However, this results in an error if the conversion is a <bpt id="p1">[</bpt>narrowing conversion<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md)</ept> and <ph id="ph1">`Option Strict`</ph> is set to <ph id="ph2">`On`</ph>.</source>
          <target state="translated">Dies führt jedoch zu einem Fehler, wenn die Konvertierung ist ein <bpt id="p1">[</bpt>einschränkende Konvertierung<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md)</ept> und <ph id="ph1">`Option Strict`</ph> Wert <ph id="ph2">`On`</ph>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Therefore, we recommend that you perform the conversion on the values retrieved from the data source.</source>
          <target state="translated">Wir empfehlen daher, die aus der Datenquelle abgerufenen Werte die Konvertierung ausführen.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You can convert the values from the data source to the explicit range variable type by using the &lt;xref:System.Linq.Enumerable.Cast%2A&gt; method.</source>
          <target state="translated">Sie können die Werte in den Typ der expliziten Bereich aus der Datenquelle konvertieren, mithilfe der &lt;xref:System.Linq.Enumerable.Cast%2A&gt;-Methode.&lt;/xref:System.Linq.Enumerable.Cast%2A&gt;</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>You can also cast the values selected in the <ph id="ph1">`Select`</ph> clause to an explicit type that is different from the type of the range variable.</source>
          <target state="translated">Sie können auch die Werte in ausgewählten Umwandeln der <ph id="ph1">`Select`</ph> -Klausel, um einen expliziten Typ, der den Typ der Bereichsvariablen unterscheidet.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>These points are illustrated in the following code.</source>
          <target state="translated">Diese Punkte werden im folgenden Code veranschaulicht.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQTypeRels#4<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/type-relationships-in-query-operations_2.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQTypeRels&amp;4;<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/type-relationships-in-query-operations_2.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Queries That Return Entire Elements of the Source Data</source>
          <target state="translated">Abfragen, die ganze Elemente der Quelldaten zurückgeben</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The following example shows a <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> query operation that returns a sequence of elements selected from the source data.</source>
          <target state="translated">Das folgende Beispiel zeigt eine <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> Abfrageoperation, die eine Sequenz von Elementen, die aus den Quelldaten ausgewählt zurückgibt.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The source, <ph id="ph1">`names`</ph>, contains an array of strings, and the query output is a sequence containing strings that start with the letter M.</source>
          <target state="translated">Die Quelle <ph id="ph1">`names`</ph>, enthält ein Array von Zeichenfolgen, und die Abfrageausgabe ist eine Sequenz mit Zeichenfolgen, die mit dem Buchstaben M beginnen.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQTypeRels#2<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/type-relationships-in-query-operations_3.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQTypeRels&amp;#2;<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/type-relationships-in-query-operations_3.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This is equivalent to the following code, but is much shorter and easier to write.</source>
          <target state="translated">Dies entspricht dem folgenden Code, aber viel kürzer und einfacher zu schreiben.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Reliance on local type inference in queries is the preferred style in Visual Basic.</source>
          <target state="translated">Abhängigkeit von lokalem Typrückschluss in Abfragen ist das bevorzugte Format in Visual Basic.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQTypeRels#3<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/type-relationships-in-query-operations_4.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQTypeRels&amp;3;<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/type-relationships-in-query-operations_4.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The following relationships exist in both of the previous code examples, whether the types are determined implicitly or explicitly.</source>
          <target state="translated">In den beiden vorherigen Codebeispielen, bestehen die folgenden Beziehungen, ob Typen implizit oder explizit bestimmt werden.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The type of the elements in the data source, <ph id="ph1">`names`</ph>, is the type of the range variable, <ph id="ph2">`name`</ph>, in the query.</source>
          <target state="translated">Der Typ der Elemente in der Datenquelle <ph id="ph1">`names`</ph>, ist der Typ der Bereichsvariablen <ph id="ph2">`name`</ph>, in der Abfrage.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The type of the object that is selected, <ph id="ph1">`name`</ph>, determines the type of the query variable, <ph id="ph2">`mNames`</ph>.</source>
          <target state="translated">Der Typ des Objekts, das ausgewählt ist, <ph id="ph1">`name`</ph>, bestimmt den Typ der Abfragevariablen, <ph id="ph2">`mNames`</ph>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Here <ph id="ph1">`name`</ph> is a string, so the query variable is IEnumerable(Of String) in Visual Basic.</source>
          <target state="translated">Hier <ph id="ph1">`name`</ph> ist eine Zeichenfolge, daher ist die Abfragevariable IEnumerable (Of String) in Visual Basic.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The query defined in <ph id="ph1">`mNames`</ph> is executed in the <ph id="ph2">`For Each`</ph> loop.</source>
          <target state="translated">Die in definierte Abfrage <ph id="ph1">`mNames`</ph> ausgeführt wird, der <ph id="ph2">`For Each`</ph> Schleife.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The loop iterates over the result of executing the query.</source>
          <target state="translated">Die Schleife durchläuft das Ergebnis der Ausführung der Abfrage.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">`mNames`</ph>, when it is executed, will return a sequence of strings, the loop iteration variable, <ph id="ph2">`nm`</ph>, also is a string.</source>
          <target state="translated">Da <ph id="ph1">`mNames`</ph>, wenn er ausgeführt wird, gibt eine Sequenz von Zeichenfolgen, die Schleifeniterationsvariable <ph id="ph2">`nm`</ph>, ist auch eine Zeichenfolge.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Queries That Return One Field from Selected Elements</source>
          <target state="translated">Abfragen, die ein Feld aus ausgewählten Elementen zurückgeben</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The following example shows a <ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../csharp/includes/vbtecdlinq_md.md)]</ph> query operation that returns a sequence containing only one part of each element selected from the data source.</source>
          <target state="translated">Das folgende Beispiel zeigt eine <ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../csharp/includes/vbtecdlinq_md.md)]</ph> Abfrageoperation, die eine Sequenz zurückgibt, enthält nur ein Teil jedes Element aus der Datenquelle ausgewählt.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The query takes a collection of <ph id="ph1">`Customer`</ph> objects as its data source and projects only the <ph id="ph2">`Name`</ph> property in the result.</source>
          <target state="translated">Die Abfrage nimmt eine Auflistung von <ph id="ph1">`Customer`</ph> Objekte als Datenquelle und projiziert nur die <ph id="ph2">`Name`</ph> -Eigenschaft im Ergebnis.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Because the customer name is a string, the query produces a sequence of strings as output.</source>
          <target state="translated">Da der Kundenname eine Zeichenfolge ist, erzeugt die Abfrage eine Sequenz von Zeichenfolgen als Ausgabe.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>0<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>0<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The relationships between variables are like those in the simpler example.</source>
          <target state="translated">Die Beziehung zwischen Variablen sind vergleichbar mit der einfacher wird.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The type of the elements in the data source, <ph id="ph1">`customers`</ph>, is the type of the range variable, <ph id="ph2">`cust`</ph>, in the query.</source>
          <target state="translated">Der Typ der Elemente in der Datenquelle <ph id="ph1">`customers`</ph>, ist der Typ der Bereichsvariablen <ph id="ph2">`cust`</ph>, in der Abfrage.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>In this example, that type is <ph id="ph1">`Customer`</ph>.</source>
          <target state="translated">In diesem Beispiel ist <ph id="ph1">`Customer`</ph>.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Select`</ph> statement returns the <ph id="ph2">`Name`</ph> property of each <ph id="ph3">`Customer`</ph> object instead of the whole object.</source>
          <target state="translated">Die <ph id="ph1">`Select`</ph> Anweisung gibt die <ph id="ph2">`Name`</ph> -Eigenschaft jedes <ph id="ph3">`Customer`</ph> Objekt anstelle des gesamten Objekts.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">`Name`</ph> is a string, the query variable, <ph id="ph2">`custNames`</ph>, will again be IEnumerable(Of String), not of <ph id="ph3">`Customer`</ph>.</source>
          <target state="translated">Da <ph id="ph1">`Name`</ph> ist eine Zeichenfolge, die Abfragevariable <ph id="ph2">`custNames`</ph>, werden nicht erneut IEnumerable (Of String), der <ph id="ph3">`Customer`</ph>.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">`custNames`</ph> represents a sequence of strings, the <ph id="ph2">`For Each`</ph> loop's iteration variable, <ph id="ph3">`custName`</ph>, must be a string.</source>
          <target state="translated">Da <ph id="ph1">`custNames`</ph> stellt eine Sequenz von Zeichenfolgen, die <ph id="ph2">`For Each`</ph> die Iterationsvariable-Schleife, <ph id="ph3">`custName`</ph>, muss eine Zeichenfolge sein.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Without local type inference, the previous example would be more cumbersome to write and to understand, as the following example shows.</source>
          <target state="translated">Ohne lokaler Typrückschluss wäre das vorherige Beispiel komplizierter zu schreiben und zu verstehen, wie im folgenden Beispiel gezeigt.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>1<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>1<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Queries That Require Anonymous Types</source>
          <target state="translated">Abfragen, die anonyme Typen erfordern</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The following example shows a more complex situation.</source>
          <target state="translated">Das folgende Beispiel zeigt eine komplexere Situation.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>In the previous example, it was inconvenient to specify types for all the variables explicitly.</source>
          <target state="translated">Im vorherigen Beispiel war es unpraktisch, Typen für alle Variablen explizit angeben.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>In this example, it is impossible.</source>
          <target state="translated">In diesem Beispiel ist es unmöglich.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Instead of selecting entire <ph id="ph1">`Customer`</ph> elements from the data source, or a single field from each element, the <ph id="ph2">`Select`</ph> clause in this query returns two properties of the original <ph id="ph3">`Customer`</ph> object: <ph id="ph4">`Name`</ph> and <ph id="ph5">`City`</ph>.</source>
          <target state="translated">Anstelle des gesamten <ph id="ph1">`Customer`</ph> Elemente aus der Datenquelle oder ein einzelnes Feld aus jedem Element der <ph id="ph2">`Select`</ph> -Klausel in dieser Abfrage gibt zwei Eigenschaften des ursprünglichen <ph id="ph3">`Customer`</ph> Objekt: <ph id="ph4">`Name`</ph> und <ph id="ph5">`City`</ph>.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>In response to the <ph id="ph1">`Select`</ph> clause, the compiler defines an anonymous type that contains those two properties.</source>
          <target state="translated">Als Antwort auf die <ph id="ph1">`Select`</ph> -Klausel, definiert der Compiler einen anonymen Typ, der diese beiden Eigenschaften enthält.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The result of executing <ph id="ph1">`nameCityQuery`</ph> in the <ph id="ph2">`For Each`</ph> loop is a collection of instances of the new anonymous type.</source>
          <target state="translated">Das Ergebnis der Ausführung <ph id="ph1">`nameCityQuery`</ph> in den <ph id="ph2">`For Each`</ph> Schleife ist eine Auflistung von Instanzen des neuen anonymen Typs.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Because the anonymous type has no usable name, you cannot specify the type of <ph id="ph1">`nameCityQuery`</ph> or <ph id="ph2">`custInfo`</ph> explicitly.</source>
          <target state="translated">Da der anonyme Typ keinen verwendbaren Namen hat, kann nicht, geben Sie den Typ des <ph id="ph1">`nameCityQuery`</ph> oder <ph id="ph2">`custInfo`</ph> explizit.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>That is, with an anonymous type, you have no type name to use in place of <ph id="ph1">`String`</ph> in <ph id="ph2">`IEnumerable(Of String)`</ph>.</source>
          <target state="translated">Mit einem anonymen Typ, haben Sie also keinen Typnamen anstelle der <ph id="ph1">`String`</ph> in <ph id="ph2">`IEnumerable(Of String)`</ph>.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Anonymous Types<ept id="p1">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/anonymous-types.md)</ept>.</source>
          <target state="translated">Weitere Informationen finden Sie unter <bpt id="p1">[</bpt>anonyme Typen<ept id="p1">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/anonymous-types.md)</ept>.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>2<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>2<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Although it is not possible to specify types for all the variables in the previous example, the relationships remain the same.</source>
          <target state="translated">Obwohl es nicht möglich, Typen für alle Variablen im vorherigen Beispiel angegeben ist, werden die Beziehungen nicht geändert.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The type of the elements in the data source is again the type of the range variable in the query.</source>
          <target state="translated">Der Typ der Elemente in der Datenquelle ist erneut den Typ der Bereichsvariablen in der Abfrage.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>In this example, <ph id="ph1">`cust`</ph> is an instance of <ph id="ph2">`Customer`</ph>.</source>
          <target state="translated">In diesem Beispiel <ph id="ph1">`cust`</ph> ist eine Instanz von <ph id="ph2">`Customer`</ph>.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Because the <ph id="ph1">`Select`</ph> statement produces an anonymous type, the query variable, <ph id="ph2">`nameCityQuery`</ph>, must be implicitly typed as an anonymous type.</source>
          <target state="translated">Da die <ph id="ph1">`Select`</ph> -Anweisung erstellt einen anonymen Typ der Abfragevariablen <ph id="ph2">`nameCityQuery`</ph>, implizit als anonymer Typ typisiert sein.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>An anonymous type has no usable name, and therefore cannot be specified explicitly.</source>
          <target state="translated">Ein anonymer Typ hat keinen verwendbaren Namen und kann daher nicht explizit angegeben werden.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The type of the iteration variable in the <ph id="ph1">`For Each`</ph> loop is the anonymous type created in step 2.</source>
          <target state="translated">Der Typ der Iterationsvariablen in der <ph id="ph1">`For Each`</ph> Schleife wird in Schritt 2 erstellten anonymen Typs.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Because the type has no usable name, the type of the loop iteration variable must be determined implicitly.</source>
          <target state="translated">Da der Typ keinen verwendbaren Namen aufweist, muss der Typ der Schleifeniterationsvariablen implizit bestimmt werden.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">Siehe auch</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Getting Started with LINQ in Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/getting-started-with-linq.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Erste Schritte mit LINQ in Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/getting-started-with-linq.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Anonymous Types<ept id="p1">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/anonymous-types.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Anonyme Typen<ept id="p1">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/anonymous-types.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Local Type Inference<ept id="p1">](../../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Lokaler Typrückschluss<ept id="p1">](../../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Introduction to LINQ in Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/language-features/linq/introduction-to-linq.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Einführung in LINQ in Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/language-features/linq/introduction-to-linq.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>LINQ<ept id="p1">](../../../../visual-basic/programming-guide/language-features/linq/index.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>LINQ<ept id="p1">](../../../../visual-basic/programming-guide/language-features/linq/index.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Queries<ept id="p1">](../../../../visual-basic/language-reference/queries/queries.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>Abfragen<ept id="p1">](../../../../visual-basic/language-reference/queries/queries.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>