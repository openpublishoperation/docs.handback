<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9c4716765199798e50c4318b290f8a2d76ef5841</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\linq\concepts-and-terminology-functional-transformation.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cd5803ed9a248b4bd60fc7ea879f9c96c047ef0f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6b64e56314df8aae6ed63927c7cf91f69523f5db</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Handback file name: lo-mt_concepts-and-terminology-functional-transformation.b2d8335f23837451d6389ecea21e021e6a90701b.es-es is different with handoff file name: concepts-and-terminology-functional-transformation.b2d8335f23837451d6389ecea21e021e6a90701b.es-es.</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Concepts and Terminology (Functional Transformation) (Visual Basic) | Microsoft Docs</source>
          <target state="translated">Conceptos y terminología (transformación funcional) (Visual Basic) | Documentos de Microsoft</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Concepts and Terminology (Functional Transformation) (Visual Basic)</source>
          <target state="translated">Conceptos y terminología (transformación funcional) (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic introduces the concepts and terminology of pure functional transformations.</source>
          <target state="translated">Este tema presenta los conceptos y la terminología en relación con las transformaciones funcionales.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The functional transformation approach to transforming data yields code that is often quicker to program, more expressive, and easier to debug and maintain than more traditional, imperative programming.</source>
          <target state="translated">La aproximación que utiliza la transformación funcional para transformar datos permite obtener un código que normalmente se escribe más rápido, es más expresivo y fácil de mantener y depurar, si lo comparamos con la programación imperativa, que es más tradicional.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Note that the topics in this section are not intended to fully explain functional programming.</source>
          <target state="translated">Observe que los temas incluidos en esta lección no pretenden explicar con detalle cómo es la programación funcional.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Instead, these topics identify some of the functional programming capabilities that make it easier to transform XML from one shape to another.</source>
          <target state="translated">En su lugar, pretenden resaltar algunas de las características de la programación funcional que facilitan el proceso de transformar un XML de una forma a otra.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>What Is Pure Functional Transformation?</source>
          <target state="translated">¿En qué consiste la transformación funcional pura?</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">*</bpt>pure functional transformation<ept id="p1">*</ept>, a set of functions, called <bpt id="p2">*</bpt>pure functions<ept id="p2">*</ept>, define how to transform a set of structured data from its original form into another form.</source>
          <target state="translated">En <bpt id="p1">*</bpt>transformación funcional pura<ept id="p1">*</ept>, un conjunto de funciones, denominadas <bpt id="p2">*</bpt>funciones puras<ept id="p2">*</ept>, definir cómo transformar un conjunto de datos estructurados de su forma original a otra forma.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The word "pure" indicates that the functions are <bpt id="p1">*</bpt>composable<ept id="p1">*</ept>, which requires that they are:</source>
          <target state="translated">La palabra "pura" indica que las funciones son <bpt id="p1">*</bpt>admite composición<ept id="p1">*</ept>, lo que significa son:</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Self-contained<ept id="p1">*</ept>, so that they can be freely ordered and rearranged without entanglement or interdependencies with the rest of the program.</source>
          <target state="translated"><bpt id="p1">*</bpt>Autónoma<ept id="p1">*</ept>, de modo que puedan libremente ordenadas y reorganizar sin preocuparse o interdependencias con el resto del programa.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Pure transformations have no knowledge of or effect upon their environment.</source>
          <target state="translated">Las transformaciones puras no tienen conocimiento sobre su entorno ni ningún efecto sobre éste.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>That is, the functions used in the transformation have no <bpt id="p1">*</bpt>side effects<ept id="p1">*</ept>.</source>
          <target state="translated">Es decir, las funciones utilizadas en la transformación no tienen <bpt id="p1">*</bpt>efectos secundarios<ept id="p1">*</ept>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Stateless<ept id="p1">*</ept>, so that executing the same function or specific set of functions on the same input will always result in the same output.</source>
          <target state="translated"><bpt id="p1">*</bpt>Sin estado<ept id="p1">*</ept>, de modo que se ejecuta la misma función o un conjunto específico de funciones de la misma entrada siempre resultado será el mismo resultado.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Pure transformations have no memory of their prior use.</source>
          <target state="translated">Las transformaciones puras no recuerdan sus ejecuciones anteriores.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In the rest of this tutorial, the term "pure function" is used in a general sense to indicate a programming approach, and not a specific language feature.</source>
          <target state="translated">Para el resto de este tutorial, el término "función pura" se utilizará en sentido general para señalar una técnica de programación y no una característica específica del lenguaje.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Note that pure functions must be implemented as functions in Visual Basic.</source>
          <target state="translated">Tenga en cuenta que las funciones puras deben implementarse como funciones en Visual Basic.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Also, you should not confuse pure functions with pure virtual methods in C++.</source>
          <target state="translated">Además, no debería confundir las funciones puras con los métodos virtuales puros de C++.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The latter indicates that the containing class is abstract and that no method body is supplied.</source>
          <target state="translated">Estos últimos indican que la clase contenedora es abstracta y que no incluye ningún cuerpo de método.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Functional Programming</source>
          <target state="translated">Programación funcional</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Functional programming<ept id="p1">*</ept> is a programming approach that directly supports pure functional transformation.</source>
          <target state="translated"><bpt id="p1">*</bpt>Programación funcional<ept id="p1">*</ept> es una técnica de programación que admite directamente la transformación funcional pura.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Historically, general-purpose functional programming languages, such as ML, Scheme, Haskell, and F#, have been primarily of interest to the academic community.</source>
          <target state="translated">Históricamente, el uso generales lenguajes de programación funcionales, como ML, combinación, Haskell y F #, han sido principalmente de interés para la Comunidad académica.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Although it has always been possible to write pure functional transformations in Visual Basic, the difficulty of doing so has not made it an attractive option to most programmers.</source>
          <target state="translated">Aunque siempre ha sido posible escribir transformaciones funcionales puras en Visual Basic, la dificultad para hacerlo no la ha convertido, una opción atractiva a los programadores.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>With later versions of Visual Basic, however, new language constructs such as lambda expressions and type inference make it functional programming much easier and more productive.</source>
          <target state="translated">Con las versiones posteriores de Visual Basic, no obstante, nuevos constructores del lenguaje, como las expresiones lambda e inferencia de tipo que la programación funcional sea más fácil y más productivo.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For more information about functional programming, see <bpt id="p1">[</bpt>Functional Programming vs. Imperative Programming (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/functional-programming-vs-imperative-programming.md)</ept>.</source>
          <target state="translated">Para obtener más información acerca de la programación funcional, vea <bpt id="p1">[</bpt>frente a la programación funcional. Programación imperativa (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/functional-programming-vs-imperative-programming.md)</ept>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Domain-Specific FP Languages</source>
          <target state="translated">Lenguajes de programación funcionales para ciertos campos</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Although general functional programming languages have not been widely adopted, specific domain-specific functional programming languages have had better success.</source>
          <target state="translated">Aunque todavía no se han adoptado mayoritariamente los lenguajes de programación funcionales, sí han tenido más éxito los lenguajes de programación funcionales específicos para ciertos campos.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For example, Cascading Style Sheets (CSS) are used to determine the look and feel of many Web pages, and Extensible Stylesheet Language Transformations (XSLT) style sheets are used extensively in XML data manipulation.</source>
          <target state="translated">Por ejemplo, las hojas de estilos en cascada (CSS) se utilizan para definir la apariencia de numerosas paginas web y las hojas de estilos del Lenguaje de transformación basado en hojas de estilo (XSLT) se utilizan muy a menudo para la manipulación de datos XML.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For more information about XSLT, see <bpt id="p1">[</bpt>XSLT Transformations<ept id="p1">](http://msdn.microsoft.com/library/202f8820-224c-494f-b61e-cd127eac6e03)</ept>.</source>
          <target state="translated">Para obtener más información acerca de XSLT, consulte <bpt id="p1">[</bpt>transformaciones XSLT<ept id="p1">](http://msdn.microsoft.com/library/202f8820-224c-494f-b61e-cd127eac6e03)</ept>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Terminology</source>
          <target state="translated">Terminología</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The following table defines some terms related to functional transformations.</source>
          <target state="translated">La siguiente tabla define algunos términos relacionados con las transformaciones funcionales.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>higher-order (first-class) function</source>
          <target state="translated">Función de orden superior (primera clase)</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>A function that can be treated as a programmatic object.</source>
          <target state="translated">Función que se puede tratar como un objeto de programación.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For example, a higher-order function can be passed to or returned from other functions.</source>
          <target state="translated">Por ejemplo, es posible pasar una función de orden superior como argumento de otra función, así como ser devuelta por otra función.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>In Visual Basic, delegates and lambda expressions are language features that support higher-order functions.</source>
          <target state="translated">En Visual Basic, delegados y las expresiones lambda son características del lenguaje que admiten funciones de orden superior.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>To write a higher-order function, you declare one or more arguments to take delegates, and you often use lambda expressions when calling it.</source>
          <target state="translated">Si desea escribir una función de orden superior, deberá declarar uno o más argumentos para recibir delegados, y a menudo utilizará expresiones lambda cuando llame a dichas funciones.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Many of the standard query operators are higher-order functions.</source>
          <target state="translated">La mayoría de operadores estándar de consulta son funciones de orden superior.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Standard Query Operators Overview (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/standard-query-operators-overview.md)</ept>.</source>
          <target state="translated">Para obtener más información, consulte <bpt id="p1">[</bpt>Standard Query Operators Overview (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/standard-query-operators-overview.md)</ept>.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>lambda expression</source>
          <target state="translated">Expresión lambda</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Essentially, an inline anonymous function that can be used wherever a delegate type is expected.</source>
          <target state="translated">En esencia, es posible utilizar una función anónima alineada siempre que se espere como argumento un tipo delegado.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This is a simplified definition of lambda expressions, but it is adequate for the purposes of this tutorial.</source>
          <target state="translated">Esta es una definición simplificada de las expresiones lambda, pero resulta adecuada para los objetivos de este tutorial.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For more information about, see <bpt id="p1">[</bpt>Lambda Expressions<ept id="p1">](../../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)</ept>.</source>
          <target state="translated">Para obtener más información, consulte <bpt id="p1">[</bpt>expresiones Lambda<ept id="p1">](../../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)</ept>.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>collection</source>
          <target state="translated">colección</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A structured set of data, usually of a uniform type.</source>
          <target state="translated">Conjunto de datos estructurados, normalmente del mismo tipo.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>To be compatible with LINQ, a collection must implement the &lt;xref:System.Collections.IEnumerable&gt; interface or the &lt;xref:System.Linq.IQueryable&gt; interface (or one of their generic counterparts, &lt;xref:System.Collections.Generic.IEnumerator%601&gt; or &lt;xref:System.Linq.IQueryable%601&gt;).</source>
          <target state="translated">Para ser compatible con LINQ, una colección debe implementar la &lt;xref:System.Collections.IEnumerable&gt;interfaz o &lt;xref:System.Linq.IQueryable&gt;interfaz (o uno de sus equivalentes genéricas, &lt;xref:System.Collections.Generic.IEnumerator%601&gt;o &lt;xref:System.Linq.IQueryable%601&gt;).&lt;/xref:System.Linq.IQueryable%601&gt; &lt;/xref:System.Collections.Generic.IEnumerator%601&gt; &lt;/xref:System.Linq.IQueryable&gt; &lt;/xref:System.Collections.IEnumerable&gt;</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>tuple (anonymous types)</source>
          <target state="translated">Tupla (tipos anónimos)</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>A mathematical concept, a tuple is a finite sequence of objects, each of a specific type.</source>
          <target state="translated">Se trata de un concepto matemático: una tupa es una secuencia finita de objetos, cada uno de los cuales es de un tipo específico.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>A tuple is also known as an ordered list.</source>
          <target state="translated">A las tuplas también se las conoce como listas ordenadas.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Anonymous types are a language implementation of this concept, which enable an unnamed class type to be declared and an object of that type to be instantiated at the same time.</source>
          <target state="translated">Los tipos anónimos son una implementación del lenguaje para este concepto, lo que permite declarar un tipo de clase sin nombre e instanciar un objeto de este tipo al mismo tiempo.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For more information, see  <bpt id="p1">[</bpt>Anonymous Types<ept id="p1">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/anonymous-types.md)</ept>.</source>
          <target state="translated">Para obtener más información, consulte <bpt id="p1">[</bpt>tipos anónimos<ept id="p1">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/anonymous-types.md)</ept>.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>type inference (implicit typing)</source>
          <target state="translated">Inferencia de tipos (tipos implícitos)</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The ability of a compiler to determine the type of a variable in the absence of an explicit type declaration.</source>
          <target state="translated">Consiste en la capacidad del compilador para determinar el tipo de una variable en caso de que no exista una declaración de tipos explícita.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Local Type Inference<ept id="p1">](../../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)</ept>.</source>
          <target state="translated">Para obtener más información, consulte <bpt id="p1">[</bpt>inferencia de tipo Local<ept id="p1">](../../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)</ept>.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>deferred execution and lazy evaluation</source>
          <target state="translated">Ejecución aplazada y evaluación diferida</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The delaying of evaluation of an expression until its resolved value is actually required.</source>
          <target state="translated">Es posible retrasar la evaluación de una expresión hasta que se requiera el valor resultante.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Deferred execution is supported in collections.</source>
          <target state="translated">Las colecciones admiten la ejecución aplazada.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Basic Query Operations (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/basic-query-operations.md)</ept> and <bpt id="p2">[</bpt>Deferred Execution and Lazy Evaluation in LINQ to XML (Visual Basic)<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/deferred-execution-and-lazy-evaluation-in-linq-to-xml.md)</ept>.</source>
          <target state="translated">Para obtener más información, consulte <bpt id="p1">[</bpt>operaciones básicas de consulta (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/basic-query-operations.md)</ept> y <bpt id="p2">[</bpt>ejecución diferida y evaluación diferida en LINQ to XML (Visual Basic)<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/deferred-execution-and-lazy-evaluation-in-linq-to-xml.md)</ept>.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>These language features will be used in code samples throughout this section.</source>
          <target state="translated">Estas características del lenguaje se utilizarán en códigos de ejemplo a lo largo de esta sección.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">Vea también</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Introduction to Pure Functional Transformations (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/introduction-to-pure-functional-transformations.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Introducción a las transformaciones funcionales puras (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/introduction-to-pure-functional-transformations.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Functional Programming vs. Imperative Programming (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/functional-programming-vs-imperative-programming.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>Diferencias entre la programación funcional y Programación imperativa (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/functional-programming-vs-imperative-programming.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>