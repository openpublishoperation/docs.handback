<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">58aee9f8c348eb06daec2b8c9e332f3f2775bcb6</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\objects-and-classes\inheritance-basics.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">84d342f99e10401a2018edb38b730dd4cf0a4552</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bbb4dd46a018dab0ad9bdfa89c3338a69e016210</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Handback file name: lo-mt_inheritance-basics.4dfae8e1f5ccc02781bc19748b0cdaa01c7eb23c.es-es is different with handoff file name: inheritance-basics.4dfae8e1f5ccc02781bc19748b0cdaa01c7eb23c.es-es.</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Inheritance Basics (Visual Basic) | Microsoft Docs</source>
          <target state="translated">Fundamentos de la herencia (Visual Basic) | Documentos de Microsoft</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Inheritance Basics (Visual Basic)</source>
          <target state="translated">Fundamentos de la herencia (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Inherits`</ph> statement is used to declare a new class, called a <bpt id="p1">*</bpt>derived class<ept id="p1">*</ept>, based on an existing class, known as a <bpt id="p2">*</bpt>base class<ept id="p2">*</ept>.</source>
          <target state="translated">El <ph id="ph1">`Inherits`</ph> instrucción se utiliza para declarar una nueva clase, denominada una <bpt id="p1">*</bpt>clase derivada<ept id="p1">*</ept>, en función de una clase existente, conocida como un <bpt id="p2">*</bpt>clase base<ept id="p2">*</ept>.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Derived classes inherit, and can extend, the properties, methods, events, fields, and constants defined in the base class.</source>
          <target state="translated">Las clases derivadas heredan y pueden extender, las propiedades, métodos, eventos, campos y constantes definidas en la clase base.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The following section describes some of the rules for inheritance, and the modifiers you can use to change the way classes inherit or are inherited:</source>
          <target state="translated">La siguiente sección describe algunas de las reglas para la herencia y los modificadores que puede utilizar para cambiar las clases de manera heredan o son heredados:</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>By default, all classes are inheritable unless marked with the <ph id="ph1">`NotInheritable`</ph> keyword.</source>
          <target state="translated">De forma predeterminada, todas las clases son heredables a menos que se marca con el <ph id="ph1">`NotInheritable`</ph> (palabra clave).</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Classes can inherit from other classes in your project or from classes in other assemblies that your project references.</source>
          <target state="translated">Las clases pueden heredar de otras clases en el proyecto o de clases en otros ensamblados a los que hace referencia a su proyecto.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Unlike languages that allow multiple inheritance, <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> allows only single inheritance in classes; that is, derived classes can have only one base class.</source>
          <target state="translated">A diferencia de los lenguajes que permiten herencia múltiple, <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> permite herencia única sólo en las clases; es decir, las clases derivadas pueden tener sólo una clase base.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Although multiple inheritance is not allowed in classes, classes can implement multiple interfaces, which can effectively accomplish the same ends.</source>
          <target state="translated">Aunque no se permite la herencia múltiple en las clases, las clases pueden implementar varias interfaces, que se pueden lograr de manera eficaz los mismos fines.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>To prevent exposing restricted items in a base class, the access type of a derived class must be equal to or more restrictive than its base class.</source>
          <target state="translated">Para evitar la exposición de elementos restringidos en una clase base, el tipo de acceso de una clase derivada debe ser igual o más restrictivo que su clase base.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For example, a <ph id="ph1">`Public`</ph> class cannot inherit a <ph id="ph2">`Friend`</ph> or a <ph id="ph3">`Private`</ph> class, and a <ph id="ph4">`Friend`</ph> class cannot inherit a <ph id="ph5">`Private`</ph> class.</source>
          <target state="translated">Por ejemplo, un <ph id="ph1">`Public`</ph> clase no puede heredar una <ph id="ph2">`Friend`</ph> o un <ph id="ph3">`Private`</ph> (clase) y un <ph id="ph4">`Friend`</ph> clase no puede heredar una <ph id="ph5">`Private`</ph> clase.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Inheritance Modifiers</source>
          <target state="translated">Modificadores de herencia</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> introduces the following class-level statements and modifiers to support inheritance:</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>presenta las siguientes instrucciones de nivel de clase y modificadores para admitir la herencia:</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Inherits`</ph> statement — Specifies the base class.</source>
          <target state="translated"><ph id="ph1">`Inherits`</ph>instrucción: especifica la clase base.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`NotInheritable`</ph> modifier — Prevents programmers from using the class as a base class.</source>
          <target state="translated"><ph id="ph1">`NotInheritable`</ph>modificador: evita que los programadores utilicen la clase como una clase base.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MustInherit`</ph> modifier — Specifies that the class is intended for use as a base class only.</source>
          <target state="translated"><ph id="ph1">`MustInherit`</ph>modificador: Especifica que la clase está diseñada para su uso como clase base.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Instances of <ph id="ph1">`MustInherit`</ph> classes cannot be created directly; they can only be created as base class instances of a derived class.</source>
          <target state="translated">Instancias de <ph id="ph1">`MustInherit`</ph> clases no se pueden crear directamente; sólo se pueden crear instancias de clase como base de una clase derivada.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>(Other programming languages, such as C++ and C#, use the term <bpt id="p1">*</bpt>abstract class<ept id="p1">*</ept> to describe such a class.)</source>
          <target state="translated">(Otros lenguajes de programación, como C++ y C#, utilizan el término <bpt id="p1">*</bpt>clase abstracta<ept id="p1">*</ept> para describir tal clase.)</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Overriding Properties and Methods in Derived Classes</source>
          <target state="translated">Reemplazar propiedades y métodos en clases derivadas</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>By default, a derived class inherits properties and methods from its base class.</source>
          <target state="translated">De forma predeterminada, una clase derivada hereda las propiedades y métodos de su clase base.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If an inherited property or method has to behave differently in the derived class it can be <bpt id="p1">*</bpt>overridden<ept id="p1">*</ept>.</source>
          <target state="translated">Si una propiedad o método heredado debe comportarse de forma diferente en la clase derivada puede ser <bpt id="p1">*</bpt>se reemplaza<ept id="p1">*</ept>.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>That is, you can define a new implementation of the method in the derived class.</source>
          <target state="translated">Es decir, puede definir una nueva implementación del método en la clase derivada.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The following modifiers are used to control how properties and methods are overridden:</source>
          <target state="translated">Los siguientes modificadores se utilizan para controlar cómo se reemplazan propiedades y métodos:</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Overridable`</ph> — Allows a property or method in a class to be overridden in a derived class.</source>
          <target state="translated"><ph id="ph1">`Overridable`</ph>Permite un método o propiedad en una clase para invalidarse en una clase derivada.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Overrides`</ph> — Overrides an <ph id="ph2">`Overridable`</ph> property or method defined in the base class.</source>
          <target state="translated"><ph id="ph1">`Overrides`</ph>: Reemplaza una <ph id="ph2">`Overridable`</ph> propiedad o método definido en la clase base.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`NotOverridable`</ph> — Prevents a property or method from being overridden in an inheriting class.</source>
          <target state="translated"><ph id="ph1">`NotOverridable`</ph>: Impide que una propiedad o método se invalide en una clase heredera.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>By default, <ph id="ph1">`Public`</ph> methods are <ph id="ph2">`NotOverridable`</ph>.</source>
          <target state="translated">De forma predeterminada, <ph id="ph1">`Public`</ph> métodos son <ph id="ph2">`NotOverridable`</ph>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MustOverride`</ph> — Requires that a derived class override the property or method.</source>
          <target state="translated"><ph id="ph1">`MustOverride`</ph>: Requiere que una clase derivada reemplace la propiedad o método.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">`MustOverride`</ph> keyword is used, the method definition consists of just the <ph id="ph2">`Sub`</ph>, <ph id="ph3">`Function`</ph>, or <ph id="ph4">`Property`</ph> statement.</source>
          <target state="translated">Cuando el <ph id="ph1">`MustOverride`</ph> se utiliza la palabra clave, la definición del método consta de solamente el <ph id="ph2">`Sub`</ph>, <ph id="ph3">`Function`</ph>, o <ph id="ph4">`Property`</ph> instrucción.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>No other statements are allowed, and specifically there is no <ph id="ph1">`End Sub`</ph> or <ph id="ph2">`End Function`</ph> statement.</source>
          <target state="translated">Se permite ninguna otra instrucción y, específicamente no hay ningún <ph id="ph1">`End Sub`</ph> o <ph id="ph2">`End Function`</ph> instrucción.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MustOverride`</ph> methods must be declared in <ph id="ph2">`MustInherit`</ph> classes.</source>
          <target state="translated"><ph id="ph1">`MustOverride`</ph>métodos deben declararse en <ph id="ph2">`MustInherit`</ph> clases.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Suppose you want to define classes to handle payroll.</source>
          <target state="translated">Suponga que desea definir clases para controlar la nómina.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You could define a generic <ph id="ph1">`Payroll`</ph> class that contains a <ph id="ph2">`RunPayroll`</ph> method that calculates payroll for a typical week.</source>
          <target state="translated">Puede definir un tipo genérico <ph id="ph1">`Payroll`</ph> clase que contiene un <ph id="ph2">`RunPayroll`</ph> método calcular la nómina de una semana típica.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>You could then use <ph id="ph1">`Payroll`</ph> as a base class for a more specialized <ph id="ph2">`BonusPayroll`</ph> class, which could be used when distributing employee bonuses.</source>
          <target state="translated">Se podría utilizar <ph id="ph1">`Payroll`</ph> como una clase base para más especializadas <ph id="ph2">`BonusPayroll`</ph> clase, que se utilizaría para distribuir bonificaciones del empleado.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`BonusPayroll`</ph> class can inherit, and override, the <ph id="ph2">`PayEmployee`</ph> method defined in the base <ph id="ph3">`Payroll`</ph> class.</source>
          <target state="translated">El <ph id="ph1">`BonusPayroll`</ph> clase puede heredar y reemplazar, el <ph id="ph2">`PayEmployee`</ph> método definido en la base de <ph id="ph3">`Payroll`</ph> clase.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The following example defines a base class, <ph id="ph1">`Payroll,`</ph> and a derived class, <ph id="ph2">`BonusPayroll`</ph>, which overrides an inherited method, <ph id="ph3">`PayEmployee`</ph>.</source>
          <target state="translated">En el ejemplo siguiente se define una clase base, <ph id="ph1">`Payroll,`</ph> y una clase derivada, <ph id="ph2">`BonusPayroll`</ph>, que reemplaza un método heredado, <ph id="ph3">`PayEmployee`</ph>.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>A procedure, <ph id="ph1">`RunPayroll`</ph>, creates and then passes a <ph id="ph2">`Payroll`</ph> object and a <ph id="ph3">`BonusPayroll`</ph> object to a function, <ph id="ph4">`Pay`</ph>, that executes the <ph id="ph5">`PayEmployee`</ph> method of both objects.</source>
          <target state="translated">Un procedimiento, <ph id="ph1">`RunPayroll`</ph>, crea y, a continuación, se pasa un <ph id="ph2">`Payroll`</ph> objeto y un <ph id="ph3">`BonusPayroll`</ph> objeto a una función, <ph id="ph4">`Pay`</ph>, que se ejecuta el <ph id="ph5">`PayEmployee`</ph> método de ambos objetos.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrOOP#28<ept id="p2">](../../../../visual-basic/misc/codesnippet/VisualBasic/inheritance-basics_1.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrOOP&amp;#28;<ept id="p2">](../../../../visual-basic/misc/codesnippet/VisualBasic/inheritance-basics_1.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The MyBase Keyword</source>
          <target state="translated">La palabra clave MyBase</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`MyBase`</ph> keyword behaves like an object variable that refers to the base class of the current instance of a class.</source>
          <target state="translated">El <ph id="ph1">`MyBase`</ph> (palabra clave) se comporta como una variable de objeto que hace referencia a la clase base de la instancia actual de una clase.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MyBase`</ph> is frequently used to access base class members that are overridden or shadowed in a derived class.</source>
          <target state="translated"><ph id="ph1">`MyBase`</ph>se suele utilizar para tener acceso a miembros de clase base que se reemplazan o se sombrean en una clase derivada.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>In particular, <ph id="ph1">`MyBase.New`</ph> is used to explicitly call a base class constructor from a derived class constructor.</source>
          <target state="translated">En particular, <ph id="ph1">`MyBase.New`</ph> se utiliza para llamar explícitamente a un constructor de clase base desde un constructor de clase derivada.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For example, suppose you are designing a derived class that overrides a method inherited from the base class.</source>
          <target state="translated">Por ejemplo, suponga que está diseñando una clase derivada que reemplaza un método heredado de la clase base.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The overridden method can call the method in the base class and modify the return value as shown in the following code fragment:</source>
          <target state="translated">El método reemplazado puede llamar al método en la clase base y modificar el valor devuelto como se muestra en el siguiente fragmento de código:</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrOOP#109<ept id="p2">](../../../../visual-basic/misc/codesnippet/VisualBasic/inheritance-basics_2.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrOOP&amp;#109;<ept id="p2">](../../../../visual-basic/misc/codesnippet/VisualBasic/inheritance-basics_2.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The following list describes restrictions on using <ph id="ph1">`MyBase`</ph>:</source>
          <target state="translated">La siguiente lista describe las restricciones sobre el uso de <ph id="ph1">`MyBase`</ph>:</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MyBase`</ph> refers to the immediate base class and its inherited members.</source>
          <target state="translated"><ph id="ph1">`MyBase`</ph>hace referencia a la clase base inmediata y a sus miembros heredados.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>It cannot be used to access <ph id="ph1">`Private`</ph> members in the class.</source>
          <target state="translated">No se puede utilizar para tener acceso a <ph id="ph1">`Private`</ph> miembros de la clase.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MyBase`</ph> is a keyword, not a real object.</source>
          <target state="translated"><ph id="ph1">`MyBase`</ph>es una palabra clave, no un objeto real.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MyBase`</ph> cannot be assigned to a variable, passed to procedures, or used in an <ph id="ph2">`Is`</ph> comparison.</source>
          <target state="translated"><ph id="ph1">`MyBase`</ph>no se asigna a una variable, pasar a procedimientos ni utilizar en una <ph id="ph2">`Is`</ph> comparación.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The method that <ph id="ph1">`MyBase`</ph> qualifies does not have to be defined in the immediate base class; it may instead be defined in an indirectly inherited base class.</source>
          <target state="translated">El método que <ph id="ph1">`MyBase`</ph> se consideran no tienen que definirse en la clase base inmediata; en su lugar puede definirse en una clase base heredada indirectamente.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>In order for a reference qualified by <ph id="ph1">`MyBase`</ph> to compile correctly, some base class must contain a method matching the name and types of parameters that appear in the call.</source>
          <target state="translated">En una referencia calificada por <ph id="ph1">`MyBase`</ph> para compilar correctamente, alguna clase base debe contener un método correspondiente al nombre y tipos de parámetros que aparecen en la llamada.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>You cannot use <ph id="ph1">`MyBase`</ph> to call <ph id="ph2">`MustOverride`</ph> base class methods.</source>
          <target state="translated">No puede usar <ph id="ph1">`MyBase`</ph> para llamar a <ph id="ph2">`MustOverride`</ph> métodos de la clase de base.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MyBase`</ph> cannot be used to qualify itself.</source>
          <target state="translated"><ph id="ph1">`MyBase`</ph>no se puede usar para calificar a sí mismo.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Therefore, the following code is not valid:</source>
          <target state="translated">Por lo tanto, el código siguiente no es válido:</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MyBase`</ph> cannot be used in modules.</source>
          <target state="translated"><ph id="ph1">`MyBase`</ph>no se puede utilizar en módulos.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MyBase`</ph> cannot be used to access base class members that are marked as <ph id="ph2">`Friend`</ph> if the base class is in a different assembly.</source>
          <target state="translated"><ph id="ph1">`MyBase`</ph>no se puede utilizar para tener acceso a miembros de clase base que están marcados como <ph id="ph2">`Friend`</ph> si la clase base está en un ensamblado diferente.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>For more information and another example, see <bpt id="p1">[</bpt>How to: Access a Variable Hidden by a Derived Class<ept id="p1">](../../../../visual-basic/programming-guide/language-features/declared-elements/how-to-access-a-variable-hidden-by-a-derived-class.md)</ept>.</source>
          <target state="translated">Para obtener más información y otro ejemplo, vea <bpt id="p1">[</bpt>Cómo: obtener acceso a una Variable oculta una clase derivada<ept id="p1">](../../../../visual-basic/programming-guide/language-features/declared-elements/how-to-access-a-variable-hidden-by-a-derived-class.md)</ept>.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The MyClass Keyword</source>
          <target state="translated">La palabra clave MyClass</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`MyClass`</ph> keyword behaves like an object variable that refers to the current instance of a class as originally implemented.</source>
          <target state="translated">El <ph id="ph1">`MyClass`</ph> (palabra clave) se comporta como una variable de objeto que hace referencia a la instancia actual de una clase se implementó originalmente.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MyClass`</ph> resembles <ph id="ph2">`Me`</ph>, but every method and property call on <ph id="ph3">`MyClass`</ph> is treated as if the method or property were <bpt id="p1">[</bpt>NotOverridable<ept id="p1">](../../../../visual-basic/language-reference/modifiers/notoverridable.md)</ept>.</source>
          <target state="translated"><ph id="ph1">`MyClass`</ph>es similar a <ph id="ph2">`Me`</ph>, pero llama cada método y propiedad en <ph id="ph3">`MyClass`</ph> se trata como si el método o propiedad fuesen <bpt id="p1">[</bpt>NotOverridable<ept id="p1">](../../../../visual-basic/language-reference/modifiers/notoverridable.md)</ept>.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Therefore, the method or property is not affected by overriding in a derived class.</source>
          <target state="translated">Por lo tanto, el método o propiedad no se ve afectado por el reemplazo de una clase derivada.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MyClass`</ph> is a keyword, not a real object.</source>
          <target state="translated"><ph id="ph1">`MyClass`</ph>es una palabra clave, no un objeto real.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MyClass`</ph> cannot be assigned to a variable, passed to procedures, or used in an <ph id="ph2">`Is`</ph> comparison.</source>
          <target state="translated"><ph id="ph1">`MyClass`</ph>no se asigna a una variable, pasar a procedimientos ni utilizar en una <ph id="ph2">`Is`</ph> comparación.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MyClass`</ph> refers to the containing class and its inherited members.</source>
          <target state="translated"><ph id="ph1">`MyClass`</ph>hace referencia a la clase contenedora y sus miembros heredados.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MyClass`</ph> can be used as a qualifier for <ph id="ph2">`Shared`</ph> members.</source>
          <target state="translated"><ph id="ph1">`MyClass`</ph>se puede utilizar como calificador para <ph id="ph2">`Shared`</ph> miembros.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MyClass`</ph> cannot be used inside a <ph id="ph2">`Shared`</ph> method, but can be used inside an instance method to access a shared member of a class.</source>
          <target state="translated"><ph id="ph1">`MyClass`</ph>no se puede utilizar dentro de un <ph id="ph2">`Shared`</ph> (método), pero se puede utilizar dentro de un método de instancia para tener acceso a un miembro compartido de una clase.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MyClass`</ph> cannot be used in standard modules.</source>
          <target state="translated"><ph id="ph1">`MyClass`</ph>no se puede utilizar en módulos estándar.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MyClass`</ph> can be used to qualify a method that is defined in a base class and that has no implementation of the method provided in that class.</source>
          <target state="translated"><ph id="ph1">`MyClass`</ph>puede utilizarse para calificar un método que se define en una clase base y que no tiene ninguna implementación del método proporcionado en esa clase.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Such a reference has the same meaning as <ph id="ph1">`MyBase.`</ph><bpt id="p1">*</bpt>Method<ept id="p1">*</ept>.</source>
          <target state="translated">Este tipo de referencia tiene el mismo significado que <ph id="ph1">`MyBase.`</ph> <bpt id="p1">*</bpt>método<ept id="p1">*</ept>.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The following example compares <ph id="ph1">`Me`</ph> and <ph id="ph2">`MyClass`</ph>.</source>
          <target state="translated">En el ejemplo siguiente se comparan <ph id="ph1">`Me`</ph> y <ph id="ph2">`MyClass`</ph>.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Even though <ph id="ph1">`derivedClass`</ph> overrides <ph id="ph2">`testMethod`</ph>, the <ph id="ph3">`MyClass`</ph> keyword in <ph id="ph4">`useMyClass`</ph> nullifies the effects of overriding, and the compiler resolves the call to the base class version of <ph id="ph5">`testMethod`</ph>.</source>
          <target state="translated">Aunque <ph id="ph1">`derivedClass`</ph> reemplaza <ph id="ph2">`testMethod`</ph>, <ph id="ph3">`MyClass`</ph> palabra clave en <ph id="ph4">`useMyClass`</ph> anula el efecto del reemplazo y el compilador se resuelve la llamada a la versión de la clase base <ph id="ph5">`testMethod`</ph>.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">Vea también</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Inherits Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/inherits-statement.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Inherits (instrucción)<ept id="p1">](../../../../visual-basic/language-reference/statements/inherits-statement.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Me, My, MyBase, and MyClass<ept id="p1">](../../../../visual-basic/programming-guide/program-structure/me-my-mybase-and-myclass.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>Me, My, MyBase y MyClass<ept id="p1">](../../../../visual-basic/programming-guide/program-structure/me-my-mybase-and-myclass.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>