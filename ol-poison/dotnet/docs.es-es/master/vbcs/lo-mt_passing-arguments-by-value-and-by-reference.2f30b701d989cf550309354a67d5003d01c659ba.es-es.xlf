<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">56d1ceba14020ca7f3dc750c2318efd3e9586af0</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\procedures\passing-arguments-by-value-and-by-reference.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">62c343a889477a34526a3d140496ad330999cfea</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">24567c563777208151f3bb3bab04ba6930b4dd9c</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Handback file name: lo-mt_passing-arguments-by-value-and-by-reference.2f30b701d989cf550309354a67d5003d01c659ba.es-es is different with handoff file name: passing-arguments-by-value-and-by-reference.2f30b701d989cf550309354a67d5003d01c659ba.es-es.</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Passing Arguments by Value and by Reference (Visual Basic) | Microsoft Docs</source>
          <target state="translated">Pasar argumentos por valor y por referencia (Visual Basic) | Documentos de Microsoft</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Passing Arguments by Value and by Reference (Visual Basic)</source>
          <target state="translated">Pasar argumentos por valor y por referencia (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>, you can pass an argument to a procedure <bpt id="p1">*</bpt>by value<ept id="p1">*</ept> or <bpt id="p2">*</bpt>by reference<ept id="p2">*</ept>.</source>
          <target state="translated">En <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>, puede pasar un argumento a un procedimiento <bpt id="p1">*</bpt>por valor<ept id="p1">*</ept> o <bpt id="p2">*</bpt>por referencia<ept id="p2">*</ept>.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This is known as the <bpt id="p1">*</bpt>passing mechanism<ept id="p1">*</ept>, and it determines whether the procedure can modify the programming element underlying the argument in the calling code.</source>
          <target state="translated">Esto se conoce como el <bpt id="p1">*</bpt>mecanismo para pasar argumentos<ept id="p1">*</ept>, y determina si el procedimiento puede modificar el elemento de programación subyacente al argumento en el código de llamada.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The procedure declaration determines the passing mechanism for each parameter by specifying the <bpt id="p1">[</bpt>ByVal<ept id="p1">](../../../../visual-basic/language-reference/modifiers/byval.md)</ept> or <bpt id="p2">[</bpt>ByRef<ept id="p2">](../../../../visual-basic/language-reference/modifiers/byref.md)</ept> keyword.</source>
          <target state="translated">La declaración del procedimiento determina el mecanismo para pasar argumentos de cada parámetro especificando la <bpt id="p1">[</bpt>ByVal<ept id="p1">](../../../../visual-basic/language-reference/modifiers/byval.md)</ept> o <bpt id="p2">[</bpt>ByRef<ept id="p2">](../../../../visual-basic/language-reference/modifiers/byref.md)</ept> (palabra clave).</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Distinctions</source>
          <target state="translated">Diferencias</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>When passing an argument to a procedure, be aware of several different distinctions that interact with each other:</source>
          <target state="translated">Al pasar un argumento a un procedimiento, tenga distintas condiciones que interactúan entre sí:</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Whether the underlying programming element is modifiable or nonmodifiable</source>
          <target state="translated">Si el elemento de programación subyacente es modificable o no modificable</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Whether the argument itself is modifiable or nonmodifiable</source>
          <target state="translated">Si el propio argumento es modificable o no modificable</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Whether the argument is being passed by value or by reference</source>
          <target state="translated">Si el argumento se pasa por valor o por referencia</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Whether the argument data type is a value type or a reference type</source>
          <target state="translated">Si el tipo de datos de argumento es un tipo de valor o un tipo de referencia</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Differences Between Modifiable and Nonmodifiable Arguments<ept id="p1">](./differences-between-modifiable-and-nonmodifiable-arguments.md)</ept> and <bpt id="p2">[</bpt>Differences Between Passing an Argument By Value and By Reference<ept id="p2">](./differences-between-passing-an-argument-by-value-and-by-reference.md)</ept>.</source>
          <target state="translated">Para obtener más información, consulte <bpt id="p1">[</bpt>diferencias entre modificables y no modificables argumentos<ept id="p1">](./differences-between-modifiable-and-nonmodifiable-arguments.md)</ept> y <bpt id="p2">[</bpt>las diferencias entre pasar un argumento por valor y por referencia<ept id="p2">](./differences-between-passing-an-argument-by-value-and-by-reference.md)</ept>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Choice of Passing Mechanism</source>
          <target state="translated">Elección del mecanismo para pasar argumentos</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You should choose the passing mechanism carefully for each argument.</source>
          <target state="translated">Debe elegir el mecanismo para pasar argumentos cuidadosamente para cada argumento.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Protection<ept id="p1">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>Protección<ept id="p1">**</ept>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In choosing between the two passing mechanisms, the most important criterion is the exposure of calling variables to change.</source>
          <target state="translated">Para elegir entre los mecanismos de dos paso, el criterio más importante es la exposición de las variables para cambiar de llamada.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The advantage of passing an argument <ph id="ph1">`ByRef`</ph> is that the procedure can return a value to the calling code through that argument.</source>
          <target state="translated">La ventaja de pasar un argumento <ph id="ph1">`ByRef`</ph> es que el procedimiento puede devolver un valor al código de llamada por medio del argumento.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The advantage of passing an argument <ph id="ph1">`ByVal`</ph> is that it protects a variable from being changed by the procedure.</source>
          <target state="translated">La ventaja de pasar un argumento <ph id="ph1">`ByVal`</ph> es que protege a la variable se puede modificar el procedimiento.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Performance<ept id="p1">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>Rendimiento<ept id="p1">**</ept>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Although the passing mechanism can affect the performance of your code, the difference is usually insignificant.</source>
          <target state="translated">Aunque el mecanismo de paso puede afectar al rendimiento del código, la diferencia es suele ser insignificante.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>One exception to this is a value type passed <ph id="ph1">`ByVal`</ph>.</source>
          <target state="translated">Una excepción a esto es un tipo de valor que se pasa <ph id="ph1">`ByVal`</ph>.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> copies the entire data contents of the argument.</source>
          <target state="translated">En este caso, <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> copia el contenido completo de datos del argumento.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Therefore, for a large value type such as a structure, it can be more efficient to pass it <ph id="ph1">`ByRef`</ph>.</source>
          <target state="translated">Por lo tanto, para un tipo de valor grande, como una estructura, puede ser más eficaz que lo pase <ph id="ph1">`ByRef`</ph>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For reference types, only the pointer to the data is copied (four bytes on 32-bit platforms, eight bytes on 64-bit platforms).</source>
          <target state="translated">Tipos de referencia, sólo el puntero a los datos es (cuatro bytes copiados en plataformas de 32 bits, ocho bytes en plataformas de 64 bits).</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Therefore, you can pass arguments of type <ph id="ph1">`String`</ph> or <ph id="ph2">`Object`</ph> by value without harming performance.</source>
          <target state="translated">Por lo tanto, puede pasar argumentos de tipo <ph id="ph1">`String`</ph> o <ph id="ph2">`Object`</ph> por valor sin perjudicar al rendimiento.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Determination of the Passing Mechanism</source>
          <target state="translated">Determinación del mecanismo para pasar argumentos</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The procedure declaration specifies the passing mechanism for each parameter.</source>
          <target state="translated">La declaración del procedimiento especifica el mecanismo para pasar argumentos de cada parámetro.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The calling code can't override a <ph id="ph1">`ByVal`</ph> mechanism.</source>
          <target state="translated">El código de llamada no puede reemplazar un <ph id="ph1">`ByVal`</ph> mecanismo.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If a parameter is declared with <ph id="ph1">`ByRef`</ph>, the calling code can force the mechanism to <ph id="ph2">`ByVal`</ph> by enclosing the argument name in parentheses in the call.</source>
          <target state="translated">Si se declara un parámetro con <ph id="ph1">`ByRef`</ph>, el código de llamada puede forzar al mecanismo para <ph id="ph2">`ByVal`</ph> incluyendo el nombre del argumento entre paréntesis en la llamada.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Force an Argument to Be Passed by Value<ept id="p1">](./how-to-force-an-argument-to-be-passed-by-value.md)</ept>.</source>
          <target state="translated">Para obtener más información, consulte <bpt id="p1">[</bpt>Cómo: forzar un argumento para pasar por valor<ept id="p1">](./how-to-force-an-argument-to-be-passed-by-value.md)</ept>.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The default in <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> is to pass arguments by value.</source>
          <target state="translated">El valor predeterminado de <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> es pasar argumentos por valor.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>When to Pass an Argument by Value</source>
          <target state="translated">Cuándo se debe pasar un argumento por valor</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If the calling code element underlying the argument is a nonmodifiable element, declare the corresponding parameter <bpt id="p1">[</bpt>ByVal<ept id="p1">](../../../../visual-basic/language-reference/modifiers/byval.md)</ept>.</source>
          <target state="translated">Si el elemento de código de llamada subyacente al argumento es un elemento no modificable, declare el parámetro correspondiente <bpt id="p1">[</bpt>ByVal<ept id="p1">](../../../../visual-basic/language-reference/modifiers/byval.md)</ept>.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>No code can change the value of a nonmodifiable element.</source>
          <target state="translated">Ningún código puede cambiar el valor de un elemento no modificable.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>If the underlying element is modifiable, but you do not want the procedure to be able to change its value, declare the parameter <ph id="ph1">`ByVal`</ph>.</source>
          <target state="translated">Si el elemento subyacente es modificable, pero no desea que el procedimiento pueda cambiar su valor, declare el parámetro <ph id="ph1">`ByVal`</ph>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Only the calling code can change the value of a modifiable element passed by value.</source>
          <target state="translated">Solo el código de llamada puede cambiar el valor de un elemento modificable transferido por valor.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>When to Pass an Argument by Reference</source>
          <target state="translated">Cuándo se debe pasar un argumento por referencia</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If the procedure has a genuine need to change the underlying element in the calling code, declare the corresponding parameter <bpt id="p1">[</bpt>ByRef<ept id="p1">](../../../../visual-basic/language-reference/modifiers/byref.md)</ept>.</source>
          <target state="translated">Si el procedimiento necesita realmente cambiar el elemento subyacente en el código de llamada, declare el parámetro correspondiente <bpt id="p1">[</bpt>ByRef<ept id="p1">](../../../../visual-basic/language-reference/modifiers/byref.md)</ept>.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If the correct execution of the code depends on the procedure changing the underlying element in the calling code, declare the parameter <ph id="ph1">`ByRef`</ph>.</source>
          <target state="translated">Si la ejecución correcta del código depende del procedimiento que cambia el elemento subyacente en el código de llamada, declare el parámetro <ph id="ph1">`ByRef`</ph>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If you pass it by value, or if the calling code overrides the <ph id="ph1">`ByRef`</ph> passing mechanism by enclosing the argument in parentheses, the procedure call might produce unexpected results.</source>
          <target state="translated">Si se pasa por valor o si el código de llamada reemplaza el <ph id="ph1">`ByRef`</ph> mecanismo para pasar argumentos encerrando el argumento entre paréntesis, la llamada al procedimiento podría producir resultados inesperados.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Ejemplo</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Descripción</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The following example illustrates when to pass arguments by value and when to pass them by reference.</source>
          <target state="translated">En el ejemplo siguiente se muestra cuándo pasar argumentos por valor y pasar por referencia.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Procedure <ph id="ph1">`Calculate`</ph> has both a <ph id="ph2">`ByVal`</ph> and a <ph id="ph3">`ByRef`</ph> parameter.</source>
          <target state="translated">Procedimiento <ph id="ph1">`Calculate`</ph> tiene un <ph id="ph2">`ByVal`</ph> y un <ph id="ph3">`ByRef`</ph> parámetro.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Given an interest rate, <ph id="ph1">`rate`</ph>, and a sum of money, <ph id="ph2">`debt`</ph>, the task of the procedure is to calculate a new value for <ph id="ph3">`debt`</ph> that is the result of applying the interest rate to the original value of <ph id="ph4">`debt`</ph>.</source>
          <target state="translated">Dada una tasa de interés, <ph id="ph1">`rate`</ph>y la suma de dinero, <ph id="ph2">`debt`</ph>, la tarea del procedimiento es calcular un nuevo valor para <ph id="ph3">`debt`</ph> que es el resultado de aplicar la tasa de interés al valor original de <ph id="ph4">`debt`</ph>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">`debt`</ph> is a <ph id="ph2">`ByRef`</ph> parameter, the new total is reflected in the value of the argument in the calling code that corresponds to <ph id="ph3">`debt`</ph>.</source>
          <target state="translated">Porque <ph id="ph1">`debt`</ph> es una <ph id="ph2">`ByRef`</ph> parámetro, el nuevo total se refleja en el valor del argumento en el código de llamada que corresponde a <ph id="ph3">`debt`</ph>.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Parameter <ph id="ph1">`rate`</ph> is a <ph id="ph2">`ByVal`</ph> parameter because <ph id="ph3">`Calculate`</ph> should not change its value.</source>
          <target state="translated">Parámetro <ph id="ph1">`rate`</ph> es una <ph id="ph2">`ByVal`</ph> parámetro porque <ph id="ph3">`Calculate`</ph> no debe cambiar su valor.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Code</source>
          <target state="translated">Código</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnProcedures#74<ept id="p2">](./codesnippet/VisualBasic/passing-arguments-by-value-and-by-reference_1.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnProcedures&amp;#74;<ept id="p2">](./codesnippet/VisualBasic/passing-arguments-by-value-and-by-reference_1.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">Vea también</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Procedures<ept id="p1">](./index.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Procedimientos<ept id="p1">](./index.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Procedure Parameters and Arguments<ept id="p1">](./procedure-parameters-and-arguments.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Argumentos y parámetros de procedimiento<ept id="p1">](./procedure-parameters-and-arguments.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Pass Arguments to a Procedure<ept id="p1">](./how-to-pass-arguments-to-a-procedure.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Cómo: pasar argumentos a un procedimiento<ept id="p1">](./how-to-pass-arguments-to-a-procedure.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Change the Value of a Procedure Argument<ept id="p1">](./how-to-change-the-value-of-a-procedure-argument.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Cómo: cambiar el valor de un argumento de procedimiento<ept id="p1">](./how-to-change-the-value-of-a-procedure-argument.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Protect a Procedure Argument Against Value Changes<ept id="p1">](./how-to-protect-a-procedure-argument-against-value-changes.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Cómo: proteger un argumento de procedimiento realicen cambios de valor<ept id="p1">](./how-to-protect-a-procedure-argument-against-value-changes.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Force an Argument to Be Passed by Value<ept id="p1">](./how-to-force-an-argument-to-be-passed-by-value.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Cómo: forzar un argumento para pasar por valor<ept id="p1">](./how-to-force-an-argument-to-be-passed-by-value.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Passing Arguments by Position and by Name<ept id="p1">](./passing-arguments-by-position-and-by-name.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Pasar argumentos por posición o por nombre<ept id="p1">](./passing-arguments-by-position-and-by-name.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Value Types and Reference Types<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>Tipos de valores y tipos de referencias<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>