<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e622436905893872521994f6dc1a5bc1c8b3d06a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\linq\refactoring-into-pure-functions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a3c178ff6c32487001cf6e01c8ab97ff0838655a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">734c77ad98f910cf0ab62e09062b2bbf519350b4</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Handback file name: lo-mt_refactoring-into-pure-functions.70258ad4b71ad57e79382cce089cc94c17cb24ef.es-es is different with handoff file name: refactoring-into-pure-functions.70258ad4b71ad57e79382cce089cc94c17cb24ef.es-es.</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Refactoring Into Pure Functions (Visual Basic) | Microsoft Docs</source>
          <target state="translated">Refactorizar en funciones puras (Visual Basic) | Documentos de Microsoft</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Refactoring Into Pure Functions (Visual Basic)</source>
          <target state="translated">Refactorizar en funciones puras (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>An important aspect of pure functional transformations is learning how to refactor code using pure functions.</source>
          <target state="translated">Un aspecto importante de las transformaciones funcionales puras es aprender cómo refactorizar código usando funciones puras.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>As noted previously in this section, a pure function has two useful characteristics:</source>
          <target state="translated">Tal como se indicó previamente en esta sección, una función pura tiene dos características útiles:</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>It has no side effects.</source>
          <target state="translated">No tiene efectos secundarios.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The function does not change any variables or the data of any type outside of the function.</source>
          <target state="translated">La función no cambia variables o datos de ningún tipo fuera de la función.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>It is consistent.</source>
          <target state="translated">Es coherente.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Given the same set of input data, it will always return the same output value.</source>
          <target state="translated">Con el mismo conjunto de datos de entrada, siempre devolverá el mismo valor de salida.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>One way of transitioning to functional programming is to refactor existing code to eliminate unnecessary side effects and external dependencies.</source>
          <target state="translated">Una forma de realizar una transición a la programación funcional es refactorizar código existente para eliminar efectos secundarios innecesarios y dependencias externas.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In this way, you can create pure function versions of existing code.</source>
          <target state="translated">De esta forma puede crear versiones de función pura del código existente.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This topic discusses what a pure function is and what it is not.</source>
          <target state="translated">En este tema se trata qué es una función pura y qué no es.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Tutorial: Manipulating Content in a WordprocessingML Document (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/tutorial-manipulating-content-in-a-wordprocessingml-document.md)</ept> tutorial shows how to manipulate a WordprocessingML document, and includes two examples of how to refactor using a pure function.</source>
          <target state="translated">El <bpt id="p1">[</bpt>Tutorial: manipular contenido en un documento WordprocessingML (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/tutorial-manipulating-content-in-a-wordprocessingml-document.md)</ept> tutorial muestra cómo manipular un documento WordprocessingML e incluye dos ejemplos de cómo refactorizar usando una función pura.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Eliminating Side Effects and External Dependencies</source>
          <target state="translated">Eliminar efectos secundarios y dependencias externas</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The following examples contrast two non-pure functions and a pure function.</source>
          <target state="translated">Los siguientes ejemplos contraponen dos funciones no puras y una función pura.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Non-Pure Function that Changes a Class Member</source>
          <target state="translated">Función no pura que cambia un miembro de clase</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In the following code, the <ph id="ph1">`HypenatedConcat`</ph> function is not a pure function, because it modifies the <ph id="ph2">`aMember`</ph> data member in the class:</source>
          <target state="translated">En el siguiente código, la función <ph id="ph1">`HypenatedConcat`</ph> no es una función pura porque modifica el miembro de datos <ph id="ph2">`aMember`</ph> en la clase:</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This code produces the following output:</source>
          <target state="translated">Este código genera el siguiente resultado:</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Note that it is irrelevant whether the data being modified has <ph id="ph1">`public`</ph> or <ph id="ph2">`private`</ph> access, or is a  <ph id="ph3">`shared`</ph> member or an instance member.</source>
          <target state="translated">Tenga en cuenta que es irrelevante si los datos que se está modificaciones tienen <ph id="ph1">`public`</ph> o <ph id="ph2">`private`</ph> tener acceso, o es una <ph id="ph3">`shared`</ph> o un miembro de instancia.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>A pure function does not change any data outside of the function.</source>
          <target state="translated">Una función pura no cambia datos fuera de la función.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Non-Pure Function that Changes an Argument</source>
          <target state="translated">Función no pura que cambia un argumento</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Furthermore, the following version of this same function is not pure because it modifies the contents of its parameter, <ph id="ph1">`sb`</ph>.</source>
          <target state="translated">Asimismo, la siguiente versión de esta misma función no es pura porque modifica el contenido de su parámetro, <ph id="ph1">`sb`</ph>.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This version of the program produces the same output as the first version, because the <ph id="ph1">`HypenatedConcat`</ph> function has changed the value (state) of its first parameter by invoking the &lt;xref:System.Text.StringBuilder.Append%2A&gt; member function.</source>
          <target state="translated">Esta versión del programa crea el mismo resultado que la primera versión, porque la <ph id="ph1">`HypenatedConcat`</ph> función ha cambiado el valor (estado) de su primer parámetro invocando la &lt;xref:System.Text.StringBuilder.Append%2A&gt;función miembro.&lt;/xref:System.Text.StringBuilder.Append%2A&gt;</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Note that this alteration occurs despite that fact that <ph id="ph1">`HypenatedConcat`</ph> uses call-by-value parameter passing.</source>
          <target state="translated">Tenga en cuenta que esta modificación se produce a pesar del hecho que <ph id="ph1">`HypenatedConcat`</ph> usar el paso de parámetros llamada por valor.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For reference types, if you pass a parameter by value, it results in a copy of the reference to an object being passed.</source>
          <target state="translated">Para los tipos de referencia, si pasa un parámetro por valor, tiene como resultado una copia de la referencia a un objeto que se está pasando.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This copy is still associated with the same instance data as the original reference (until the reference variable is assigned to a new object).</source>
          <target state="translated">Esta copia sigue asociada con los mismos datos de la instancia que la referencia original (hasta que la variable de referencia se asigna a un objeto nuevo).</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Call-by-reference is not necessarily required for a function to modify a parameter.</source>
          <target state="translated">La llamada por referencia no es necesariamente requerida para que una función modifique un parámetro.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Pure Function</source>
          <target state="translated">Función pura</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This next version of the program hows how to implement the <ph id="ph1">`HypenatedConcat`</ph> function as a pure function.</source>
          <target state="translated">La versión siguiente del programa muestra cómo implementar la función <ph id="ph1">`HypenatedConcat`</ph> como una función pura.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Again, this version produces the same line of output: <ph id="ph1">`StringOne-StringTwo`</ph>.</source>
          <target state="translated">De nuevo, esta versión crea la misma línea de salida: <ph id="ph1">`StringOne-StringTwo`</ph>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Note that to retain the concatenated value, it is stored in the intermediate variable <ph id="ph1">`s2`</ph>.</source>
          <target state="translated">Tenga en cuenta que para conservar un valor concatenado, se almacena en la variable intermedia <ph id="ph1">`s2`</ph>.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>One approach that can be very useful is to write functions that are locally impure (that is, they declare and modify local variables) but are globally pure.</source>
          <target state="translated">Un enfoque que puede ser muy útil para escribir funciones que son localmente impuras (es decir, declaran y modifican variables locales) pero que son globalmente puras.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Such functions have many of the desirable composability characteristics, but avoid some of the more convoluted functional programming idioms, such as having to use recursion when a simple loop would accomplish the same thing.</source>
          <target state="translated">Tales funciones tienen muchas características deseables de facilidad de creación, pero evitan algunas de las expresiones de programación funcional más complicadas, como tener que usar una recursión cuando un simple bucle lograría lo mismo.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Standard Query Operators</source>
          <target state="translated">Operadores de consulta estándar</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>An important characteristic of the standard query operators is that they are implemented as pure functions.</source>
          <target state="translated">Una característica importante de los operadores de consulta estándar es que se implementan como funciones puras.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Standard Query Operators Overview (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/standard-query-operators-overview.md)</ept>.</source>
          <target state="translated">Para obtener más información, consulte <bpt id="p1">[</bpt>Standard Query Operators Overview (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/standard-query-operators-overview.md)</ept>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">Vea también</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Introduction to Pure Functional Transformations (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/introduction-to-pure-functional-transformations.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Introducción a las transformaciones funcionales puras (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/introduction-to-pure-functional-transformations.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Functional Programming vs. Imperative Programming (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/functional-programming-vs-imperative-programming.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>Diferencias entre la programación funcional y Programación imperativa (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/functional-programming-vs-imperative-programming.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>