<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">379359e3a338746ccd440dbe1ad58c483e562dbe</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\language-reference\statements\try-catch-finally-statement.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5b921289ea855bcedff299c9aabf2debd637dcab</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dfd3d978ccc9bd35935fbe8240dd53f4b5b0a57e</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Handback file name: lo-mt_try-catch-finally-statement.4d83248318ea744e7e852042d524c8c12047e68f.es-es is different with handoff file name: try-catch-finally-statement.4d83248318ea744e7e852042d524c8c12047e68f.es-es.</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Try...Catch...Finally Statement (Visual Basic) | Microsoft Docs</source>
          <target state="translated">Try... Catch... Finally (instrucción) (Visual Basic) | Documentos de Microsoft</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Try...Catch...Finally Statement (Visual Basic)</source>
          <target state="translated">Instrucción Try...Catch...Finally (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Provides a way to handle some or all possible errors that may occur in a given block of code, while still running code.</source>
          <target state="translated">Proporciona una manera de controlar algunos o todos los errores posibles que pueden producirse en un determinado bloque de código, mientras sigue ejecutando el código.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
          <target state="translated">Sintaxis</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parts</source>
          <target state="translated">Elementos</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Term</source>
          <target state="translated">Término</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Definition</source>
          <target state="translated">Definición</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">Opcional.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Statement(s) where an error can occur.</source>
          <target state="translated">Instrucciones donde puede producirse un error.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Can be a compound statement.</source>
          <target state="translated">Puede ser una instrucción compuesta.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">Opcional.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Multiple <ph id="ph1">`Catch`</ph> blocks permitted.</source>
          <target state="translated">Varios <ph id="ph1">`Catch`</ph> bloques permitido.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If an exception occurs when processing the <ph id="ph1">`Try`</ph> block, each <ph id="ph2">`Catch`</ph> statement is examined in textual order to determine whether it handles the exception, with <ph id="ph3">`exception`</ph> representing the exception that has been thrown.</source>
          <target state="translated">Si se produce una excepción al procesar el <ph id="ph1">`Try`</ph> bloquear cada <ph id="ph2">`Catch`</ph> instrucción se examina en orden textual para determinar si controla la excepción con <ph id="ph3">`exception`</ph> que representa la excepción que se ha producido.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">Opcional.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Any variable name.</source>
          <target state="translated">Cualquier nombre de variable.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The initial value of <ph id="ph1">`exception`</ph> is the value of the thrown error.</source>
          <target state="translated">El valor inicial de <ph id="ph1">`exception`</ph> es el valor del error producido.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Used with <ph id="ph1">`Catch`</ph> to specify the error caught.</source>
          <target state="translated">Se utiliza con <ph id="ph1">`Catch`</ph> especificar el error detectado.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If omitted, the <ph id="ph1">`Catch`</ph> statement catches any exception.</source>
          <target state="translated">Si se omite, el <ph id="ph1">`Catch`</ph> instrucción detecta cualquier excepción.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">Opcional.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Specifies the type of class filter.</source>
          <target state="translated">Especifica el tipo de filtro de clase.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If the value of <ph id="ph1">`exception`</ph> is of the type specified by <ph id="ph2">`type`</ph> or of a derived type, the identifier becomes bound to the exception object.</source>
          <target state="translated">Si el valor de <ph id="ph1">`exception`</ph> es del tipo especificado por <ph id="ph2">`type`</ph> o de un tipo derivado, el identificador queda enlazado al objeto de excepción.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">Opcional.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Catch`</ph> statement with a <ph id="ph2">`When`</ph> clause catches exceptions only when <ph id="ph3">`expression`</ph> evaluates to <ph id="ph4">`True`</ph>.</source>
          <target state="translated">Un <ph id="ph1">`Catch`</ph> instrucción con un <ph id="ph2">`When`</ph> cláusula detecta excepciones sólo cuando <ph id="ph3">`expression`</ph> se evalúa como <ph id="ph4">`True`</ph>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`When`</ph> clause is applied only after checking the type of the exception, and <ph id="ph2">`expression`</ph> may refer to the identifier representing the exception.</source>
          <target state="translated">Un <ph id="ph1">`When`</ph> cláusula se aplica únicamente después de comprobar el tipo de la excepción, y <ph id="ph2">`expression`</ph> pueden hacer referencia al identificador que representa la excepción.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">Opcional.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Must be implicitly convertible to <ph id="ph1">`Boolean`</ph>.</source>
          <target state="translated">Debe ser implícitamente convertible a <ph id="ph1">`Boolean`</ph>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Any expression that describes a generic filter.</source>
          <target state="translated">Cualquier expresión que describe un filtro genérico.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Typically used to filter by error number.</source>
          <target state="translated">Se utiliza normalmente para filtrar por número de error.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Used with <ph id="ph1">`When`</ph> keyword to specify circumstances under which the error is caught.</source>
          <target state="translated">Se utiliza con <ph id="ph1">`When`</ph> (palabra clave) para especificar las circunstancias bajo las que se captura el error.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">Opcional.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Statement(s) to handle errors that occur in the associated <ph id="ph1">`Try`</ph> block.</source>
          <target state="translated">Instrucciones para controlar los errores que se producen en el asociado <ph id="ph1">`Try`</ph> bloque.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Can be a compound statement.</source>
          <target state="translated">Puede ser una instrucción compuesta.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">Opcional.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Keyword that breaks out of the <ph id="ph1">`Try...Catch...Finally`</ph> structure.</source>
          <target state="translated">Palabra clave que interrumpe fuera de la <ph id="ph1">`Try...Catch...Finally`</ph> estructura.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Execution resumes with the code immediately following the <ph id="ph1">`End Try`</ph> statement.</source>
          <target state="translated">La ejecución se reanuda con el código que sigue el <ph id="ph1">`End Try`</ph> instrucción.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Finally`</ph> statement will still be executed.</source>
          <target state="translated">El <ph id="ph1">`Finally`</ph> todavía se ejecutará la instrucción.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Not allowed in <ph id="ph1">`Finally`</ph> blocks.</source>
          <target state="translated">No se permite en <ph id="ph1">`Finally`</ph> bloques.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">Opcional.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Finally`</ph> block is always executed when execution leaves any part of the <ph id="ph2">`Try...Catch`</ph> statement.</source>
          <target state="translated">Un <ph id="ph1">`Finally`</ph> bloque siempre se ejecuta cuando la ejecución sale de cualquier parte de la <ph id="ph2">`Try...Catch`</ph> instrucción.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">Opcional.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Statement(s) that are executed after all other error processing has occurred.</source>
          <target state="translated">Instrucciones que se ejecutan una vez realizado el resto del procesamiento de error.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Terminates the <ph id="ph1">`Try...Catch...Finally`</ph> structure.</source>
          <target state="translated">Finaliza el <ph id="ph1">`Try...Catch...Finally`</ph> estructura.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Remarks</source>
          <target state="translated">Comentarios</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If you expect that a particular exception might occur during a particular section of code, put the code in a <ph id="ph1">`Try`</ph> block and use a <ph id="ph2">`Catch`</ph> block to retain control and handle the exception if it occurs.</source>
          <target state="translated">Si piensa que podría producir una excepción determinada en una sección concreta del código, coloque el código en un <ph id="ph1">`Try`</ph> bloquear y usar un <ph id="ph2">`Catch`</ph> bloque para conservar el control y controlar la excepción si se produce.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Try…Catch`</ph> statement consists of a <ph id="ph2">`Try`</ph> block followed by one or more <ph id="ph3">`Catch`</ph> clauses, which specify handlers for various exceptions.</source>
          <target state="translated">Un <ph id="ph1">`Try…Catch`</ph> instrucción consta de un <ph id="ph2">`Try`</ph> bloque seguido de uno o varios <ph id="ph3">`Catch`</ph> cláusulas que especifican controladores para diferentes excepciones.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>When an exception is thrown in a <ph id="ph1">`Try`</ph> block, <ph id="ph2">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> looks for the <ph id="ph3">`Catch`</ph> statement that handles the exception.</source>
          <target state="translated">Cuando se produce una excepción un <ph id="ph1">`Try`</ph> bloque, <ph id="ph2">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> busca el <ph id="ph3">`Catch`</ph> instrucción que controla la excepción.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>If a matching <ph id="ph1">`Catch`</ph> statement is not found, <ph id="ph2">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> examines the method that called the current method, and so on up the call stack.</source>
          <target state="translated">Si una coincidencia <ph id="ph1">`Catch`</ph> no se encuentra la instrucción, <ph id="ph2">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> examina el método que llamó al método actual, y así sucesivamente la pila de llamadas.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>If no <ph id="ph1">`Catch`</ph> block is found, <ph id="ph2">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> displays an unhandled exception message to the user and stops execution of the program.</source>
          <target state="translated">Si no hay ningún <ph id="ph1">`Catch`</ph> bloque se encuentra, <ph id="ph2">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> muestra al usuario un mensaje de excepción no controlada y detiene la ejecución del programa.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>You can use more than one <ph id="ph1">`Catch`</ph> statement in a <ph id="ph2">`Try…Catch`</ph> statement.</source>
          <target state="translated">Puede usar más de una <ph id="ph1">`Catch`</ph> instrucción en un <ph id="ph2">`Try…Catch`</ph> instrucción.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>If you do this, the order of the <ph id="ph1">`Catch`</ph> clauses is significant because they are examined in order.</source>
          <target state="translated">Si lo hace, el orden de la <ph id="ph1">`Catch`</ph> cláusulas es importante, ya que se examinan en orden.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Catch the more specific exceptions before the less specific ones.</source>
          <target state="translated">Detectar las excepciones más específicas antes que las menos específicas.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The following <ph id="ph1">`Catch`</ph> statement conditions are the least specific, and will catch all exceptions that derive from the &lt;xref:System.Exception&gt; class.</source>
          <target state="translated">El siguiente <ph id="ph1">`Catch`</ph> condiciones de instrucción son menos específicos y todas las detectará excepciones que derivan de la &lt;xref:System.Exception&gt;clase.&lt;/xref:System.Exception&gt;</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>You should ordinarily use one of these variations as the last <ph id="ph1">`Catch`</ph> block in the <ph id="ph2">`Try...Catch...Finally`</ph> structure, after catching all the specific exceptions you expect.</source>
          <target state="translated">Normalmente debe usar una de estas variaciones en la última <ph id="ph1">`Catch`</ph> bloquear el <ph id="ph2">`Try...Catch...Finally`</ph> estructura después de detectar todas las excepciones específicas que espera.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Control flow can never reach a <ph id="ph1">`Catch`</ph> block that follows either of these variations.</source>
          <target state="translated">Flujo de control nunca puede alcanzar un <ph id="ph1">`Catch`</ph> cualquiera de estas variaciones en el siguiente bloque.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`type`</ph> is <ph id="ph2">`Exception`</ph>, for example: <ph id="ph3">`Catch ex As Exception`</ph></source>
          <target state="translated">El <ph id="ph1">`type`</ph> es <ph id="ph2">`Exception`</ph>, por ejemplo:<ph id="ph3">`Catch ex As Exception`</ph></target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The statement has no <ph id="ph1">`exception`</ph> variable, for example: <ph id="ph2">`Catch`</ph></source>
          <target state="translated">La instrucción no tiene ningún <ph id="ph1">`exception`</ph> variable, por ejemplo:<ph id="ph2">`Catch`</ph></target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>When a <ph id="ph1">`Try…Catch…Finally`</ph> statement is nested in another <ph id="ph2">`Try`</ph> block, <ph id="ph3">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> first examines each <ph id="ph4">`Catch`</ph> statement in the innermost <ph id="ph5">`Try`</ph> block.</source>
          <target state="translated">Cuando un <ph id="ph1">`Try…Catch…Finally`</ph> instrucción está anidada en otro <ph id="ph2">`Try`</ph> bloque, <ph id="ph3">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> primero examina cada <ph id="ph4">`Catch`</ph> instrucción interno <ph id="ph5">`Try`</ph> bloque.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>If no matching <ph id="ph1">`Catch`</ph> statement is found, the search proceeds to the <ph id="ph2">`Catch`</ph> statements of the outer <ph id="ph3">`Try…Catch…Finally`</ph> block.</source>
          <target state="translated">Si no hay coincidencia <ph id="ph1">`Catch`</ph> se encuentra una instrucción, la búsqueda continúa en la <ph id="ph2">`Catch`</ph> instrucciones de externo <ph id="ph3">`Try…Catch…Finally`</ph> bloque.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Local variables from a <ph id="ph1">`Try`</ph> block are not available in a <ph id="ph2">`Catch`</ph> block because they are separate blocks.</source>
          <target state="translated">Las variables locales de un <ph id="ph1">`Try`</ph> bloque no están disponibles en un <ph id="ph2">`Catch`</ph> bloquear porque se trata de bloques independientes.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>If you want to use a variable in more than one block, declare the variable outside the <ph id="ph1">`Try...Catch...Finally`</ph> structure.</source>
          <target state="translated">Si desea utilizar una variable en más de un bloque, declare la variable fuera del <ph id="ph1">`Try...Catch...Finally`</ph> estructura.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Try…Catch…Finally`</ph> statement is available as an IntelliSense code snippet.</source>
          <target state="translated">El <ph id="ph1">`Try…Catch…Finally`</ph> instrucción está disponible como un fragmento de código de IntelliSense.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>In the Code Snippets Manager, expand <bpt id="p1">**</bpt>Code Patterns - If, For Each, Try Catch, Property, etc<ept id="p1">**</ept>, and then <bpt id="p2">**</bpt>Error Handling (Exceptions)<ept id="p2">**</ept>.</source>
          <target state="translated">En el Administrador de fragmentos de código, expanda <bpt id="p1">**</bpt>modelos de código - si, para cada uno, Try Catch, propiedad, etcetera<ept id="p1">**</ept>y, a continuación, <bpt id="p2">**</bpt>control de errores (excepciones)<ept id="p2">**</ept>.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Code Snippets<ept id="p1">](https://docs.microsoft.com/visualstudio/ide/code-snippets)</ept>.</source>
          <target state="translated">Para obtener más información, vea <bpt id="p1">[</bpt>Fragmentos de código<ept id="p1">](https://docs.microsoft.com/visualstudio/ide/code-snippets)</ept>.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Finally Block</source>
          <target state="translated">Bloque finally</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>If you have one or more statements that must run before you exit the <ph id="ph1">`Try`</ph> structure, use a <ph id="ph2">`Finally`</ph> block.</source>
          <target state="translated">Si tiene una o más instrucciones que deben ejecutarse antes de salir de la <ph id="ph1">`Try`</ph> estructura, use un <ph id="ph2">`Finally`</ph> bloque.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Control passes to the <ph id="ph1">`Finally`</ph> block just before it passes out of the <ph id="ph2">`Try…Catch`</ph> structure.</source>
          <target state="translated">El control pasa a la <ph id="ph1">`Finally`</ph> bloquear antes de transferirlos fuera de la <ph id="ph2">`Try…Catch`</ph> estructura.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>This is true even if an exception occurs anywhere inside the <ph id="ph1">`Try`</ph> structure.</source>
          <target state="translated">Esto es así incluso si se produce una excepción en cualquier lugar dentro de la <ph id="ph1">`Try`</ph> estructura.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Finally`</ph> block is useful for running any code that must execute even if there is an exception.</source>
          <target state="translated">Un <ph id="ph1">`Finally`</ph> bloque es útil para ejecutar cualquier código que deba ejecutarse incluso si hay una excepción.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Control is passed to the <ph id="ph1">`Finally`</ph> block regardless of how the <ph id="ph2">`Try...Catch`</ph> block exits.</source>
          <target state="translated">El control pasa a la <ph id="ph1">`Finally`</ph> bloque con independencia del <ph id="ph2">`Try...Catch`</ph> bloquear salidas.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The code in a <ph id="ph1">`Finally`</ph> block runs even if your code encounters a <ph id="ph2">`Return`</ph> statement in a <ph id="ph3">`Try`</ph> or <ph id="ph4">`Catch`</ph> block.</source>
          <target state="translated">El código en un <ph id="ph1">`Finally`</ph> bloque se ejecuta incluso si el código encuentra un <ph id="ph2">`Return`</ph> instrucción en un <ph id="ph3">`Try`</ph> o <ph id="ph4">`Catch`</ph> bloque.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Control does not pass from a <ph id="ph1">`Try`</ph> or <ph id="ph2">`Catch`</ph> block to the corresponding <ph id="ph3">`Finally`</ph> block in the following cases:</source>
          <target state="translated">El control no pasar de un <ph id="ph1">`Try`</ph> o <ph id="ph2">`Catch`</ph> bloquear correspondiente <ph id="ph3">`Finally`</ph> bloquear en los casos siguientes:</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">[</bpt>End Statement<ept id="p1">](../../../visual-basic/language-reference/statements/end-statement.md)</ept> is encountered in the <ph id="ph1">`Try`</ph> or <ph id="ph2">`Catch`</ph> block.</source>
          <target state="translated">Un <bpt id="p1">[</bpt>instrucción End<ept id="p1">](../../../visual-basic/language-reference/statements/end-statement.md)</ept> se encuentra en la <ph id="ph1">`Try`</ph> o <ph id="ph2">`Catch`</ph> bloque.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.StackOverflowException&gt; is thrown in the <ph id="ph1">`Try`</ph> or <ph id="ph2">`Catch`</ph> block.</source>
          <target state="translated">Un &lt;xref:System.StackOverflowException&gt;se produce en el <ph id="ph1">`Try`</ph> o <ph id="ph2">`Catch`</ph> bloque.&lt;/xref:System.StackOverflowException&gt;</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>It is not valid to explicitly transfer execution into a <ph id="ph1">`Finally`</ph> block.</source>
          <target state="translated">No es válido transferir explícitamente la ejecución en un <ph id="ph1">`Finally`</ph> bloque.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Transferring execution out of a <ph id="ph1">`Finally`</ph> block is not valid, except through an exception.</source>
          <target state="translated">Transferir la ejecución fuera de un <ph id="ph1">`Finally`</ph> bloque no es válido, excepto a través de una excepción.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>If a <ph id="ph1">`Try`</ph> statement does not contain at least one <ph id="ph2">`Catch`</ph> block, it must contain a <ph id="ph3">`Finally`</ph> block.</source>
          <target state="translated">Si un <ph id="ph1">`Try`</ph> instrucción no contiene al menos una <ph id="ph2">`Catch`</ph> bloque, debe contener una <ph id="ph3">`Finally`</ph> bloque.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>If you do not have to catch specific exceptions, the <ph id="ph1">`Using`</ph> statement behaves like a <ph id="ph2">`Try…Finally`</ph> block, and guarantees disposal of the resources, regardless of how you exit the block.</source>
          <target state="translated">Si no tiene que capturar excepciones específicas, la <ph id="ph1">`Using`</ph> instrucción se comporta como un <ph id="ph2">`Try…Finally`</ph> bloque y garantiza la disposición de los recursos, independientemente de cómo salga del bloque.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>This is true even with an unhandled exception.</source>
          <target state="translated">Esto es cierto incluso con una excepción no controlada.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Using Statement<ept id="p1">](../../../visual-basic/language-reference/statements/using-statement.md)</ept>.</source>
          <target state="translated">Para obtener más información, consulte <bpt id="p1">[</bpt>instrucción Using<ept id="p1">](../../../visual-basic/language-reference/statements/using-statement.md)</ept>.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Exception Argument</source>
          <target state="translated">Argumento de excepción</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Catch`</ph> block <ph id="ph2">`exception`</ph> argument is an instance of the &lt;xref:System.Exception&gt; class or a class that derives from the <ph id="ph3">`Exception`</ph> class.</source>
          <target state="translated">El <ph id="ph1">`Catch`</ph> bloque <ph id="ph2">`exception`</ph> argumento es una instancia de la &lt;xref:System.Exception&gt;clase o una clase que deriva de la <ph id="ph3">`Exception`</ph> clase&lt;/xref:System.Exception&gt;</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Exception`</ph> class instance corresponds to the error that occurred in the <ph id="ph2">`Try`</ph> block.</source>
          <target state="translated">El <ph id="ph1">`Exception`</ph> instancia de la clase que corresponde al error que se produjo en el <ph id="ph2">`Try`</ph> bloque.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The properties of the <ph id="ph1">`Exception`</ph> object help to identify the cause and location of an exception.</source>
          <target state="translated">Las propiedades de la <ph id="ph1">`Exception`</ph> objeto ayuda a identificar la causa y la ubicación de una excepción.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>For example, the &lt;xref:System.Exception.StackTrace%2A&gt; property lists the called methods that led to the exception, helping you find where the error occurred in the code.</source>
          <target state="translated">Por ejemplo, el &lt;xref:System.Exception.StackTrace%2A&gt;listas de propiedades de los métodos llamados que produjeron la excepción, lo que le ayuda a encontrar dónde se produjo el error en el código.&lt;/xref:System.Exception.StackTrace%2A&gt;</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Exception.Message%2A&gt; returns a message that describes the exception.</source>
          <target state="translated">&lt;xref:System.Exception.Message%2A&gt;Devuelve un mensaje que describe la excepción.&lt;/xref:System.Exception.Message%2A&gt;</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Exception.HelpLink%2A&gt; returns a link to an associated Help file.</source>
          <target state="translated">&lt;xref:System.Exception.HelpLink%2A&gt;Devuelve un vínculo a un archivo de ayuda asociado.&lt;/xref:System.Exception.HelpLink%2A&gt;</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Exception.InnerException%2A&gt; returns the <ph id="ph1">`Exception`</ph> object that caused the current exception, or it returns <ph id="ph2">`Nothing`</ph> if there is no original <ph id="ph3">`Exception`</ph>.</source>
          <target state="translated">&lt;xref:System.Exception.InnerException%2A&gt;Devuelve el <ph id="ph1">`Exception`</ph> devuelve el objeto que produjo la excepción actual, o bien <ph id="ph2">`Nothing`</ph> si no hay ningún original <ph id="ph3">`Exception`</ph>.&lt;/xref:System.Exception.InnerException%2A&gt;</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Considerations When Using a Try…Catch Statement</source>
          <target state="translated">Consideraciones al usar un bloque Try... Catch (instrucción)</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Use a <ph id="ph1">`Try…Catch`</ph> statement only to signal the occurrence of unusual or unanticipated program events.</source>
          <target state="translated">Use un <ph id="ph1">`Try…Catch`</ph> instrucción sólo para señalizar la aparición de eventos de programa inusuales o inesperados.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Reasons for this include the following:</source>
          <target state="translated">Las razones siguientes:</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Catching exceptions at runtime creates additional overhead, and is likely to be slower than pre-checking to avoid exceptions.</source>
          <target state="translated">Detectar excepciones en tiempo de ejecución crea una sobrecarga adicional y es probable que sea más lenta que la comprobación previa para evitar las excepciones.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>If a <ph id="ph1">`Catch`</ph> block is not handled correctly, the exception might not be reported correctly to users.</source>
          <target state="translated">Si un <ph id="ph1">`Catch`</ph> bloque no se administra correctamente, la excepción podría no mostrarse correctamente a los usuarios.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Exception handling makes a program more complex.</source>
          <target state="translated">Control de excepciones hace que un programa más complejo.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>You do not always need a <ph id="ph1">`Try…Catch`</ph> statement to check for a condition that is likely to occur.</source>
          <target state="translated">No necesita siempre un <ph id="ph1">`Try…Catch`</ph> instrucción para comprobar una condición que es probable que ocurra.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The following example checks whether a file exists before trying to open it.</source>
          <target state="translated">En el ejemplo siguiente se comprueba si existe un archivo antes de intentar abrirlo.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>This reduces the need for catching an exception thrown by the &lt;xref:System.IO.File.OpenText%2A&gt; method.</source>
          <target state="translated">Esto reduce la necesidad de detectar una excepción producida por el &lt;xref:System.IO.File.OpenText%2A&gt;método.&lt;/xref:System.IO.File.OpenText%2A&gt;</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#94<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/try-catch-finally-statement_1.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements&amp;#94;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/try-catch-finally-statement_1.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Ensure that code in <ph id="ph1">`Catch`</ph> blocks can properly report exceptions to users, whether through thread-safe logging or appropriate messages.</source>
          <target state="translated">Garantizar que el código en <ph id="ph1">`Catch`</ph> bloques pueden comunicar correctamente las excepciones a los usuarios, ya sea a través de subprocesos registro o los mensajes adecuados.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Otherwise, exceptions might remain unknown.</source>
          <target state="translated">De lo contrario, las excepciones pueden permanecer desconocidas.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Async Methods</source>
          <target state="translated">Métodos asincrónicos</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>If you mark a method with the <bpt id="p1">[</bpt>Async<ept id="p1">](../../../visual-basic/language-reference/modifiers/async.md)</ept> modifier, you can use the <bpt id="p2">[</bpt>Await<ept id="p2">](../../../visual-basic/language-reference/operators/await-operator.md)</ept> operator in the method.</source>
          <target state="translated">Si marca un método con la <bpt id="p1">[</bpt>Async<ept id="p1">](../../../visual-basic/language-reference/modifiers/async.md)</ept> modificador, puede utilizar el <bpt id="p2">[</bpt>Await<ept id="p2">](../../../visual-basic/language-reference/operators/await-operator.md)</ept> operador en el método.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>A statement with the <ph id="ph1">`Await`</ph> operator suspends execution of the method until the awaited task completes.</source>
          <target state="translated">Una instrucción con el <ph id="ph1">`Await`</ph> operador suspende la ejecución del método hasta que se complete la tarea esperada.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The task represents ongoing work.</source>
          <target state="translated">La tarea representa el trabajo en curso.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>When the task that's associated with the <ph id="ph1">`Await`</ph> operator finishes, execution resumes in the same method.</source>
          <target state="translated">Cuando la tarea que está asociada la <ph id="ph1">`Await`</ph> operador finalice, se reanuda la ejecución en el mismo método.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Control Flow in Async Programs<ept id="p1">](../../../visual-basic/programming-guide/concepts/async/control-flow-in-async-programs.md)</ept>.</source>
          <target state="translated">Para obtener más información, consulte <bpt id="p1">[</bpt>flujo de Control en programas Async<ept id="p1">](../../../visual-basic/programming-guide/concepts/async/control-flow-in-async-programs.md)</ept>.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>A task returned by an Async method may end in a faulted state, indicating that it completed due to an unhandled exception.</source>
          <target state="translated">Una tarea devuelta por un método asincrónico puede encontrarse en un estado de error que indica que ha completado debido a una excepción no controlada.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>A task may also end in a canceled state, which results in an <ph id="ph1">`OperationCanceledException`</ph> being thrown out of the await expression.</source>
          <target state="translated">También puede finalizar una tarea en un estado cancelado, lo que resulta en una <ph id="ph1">`OperationCanceledException`</ph> que se producen fuera de la expresión await.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>To catch either type of exception, place the <ph id="ph1">`Await`</ph> expression that's associated with the task in a <ph id="ph2">`Try`</ph> block, and catch the exception in the <ph id="ph3">`Catch`</ph> block.</source>
          <target state="translated">Para detectar cualquier tipo de excepción, coloque el <ph id="ph1">`Await`</ph> expresión asociada con la tarea en un <ph id="ph2">`Try`</ph> bloquear y detectar la excepción en el <ph id="ph3">`Catch`</ph> bloque.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>An example is provided later in this topic.</source>
          <target state="translated">Más adelante en este tema se proporciona un ejemplo.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>A task can be in a faulted state because multiple exceptions were responsible for its faulting.</source>
          <target state="translated">Una tarea puede estar en un estado de error porque varias excepciones eran responsables de su ausencia.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>For example, the task might be the result of a call to &lt;xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">Por ejemplo, la tarea podría ser el resultado de una llamada a &lt;xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=fullName&gt;.&lt;/xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>When you await such a task, the caught exception is only one of the exceptions, and you can't predict which exception will be caught.</source>
          <target state="translated">Cuando se espera dicha tarea, la excepción detectada es sólo una de las excepciones y no se puede predecir qué excepción será detectada.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>An example is provided later in this topic.</source>
          <target state="translated">Más adelante en este tema se proporciona un ejemplo.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`Await`</ph> expression can't be inside a <ph id="ph2">`Catch`</ph> block or <ph id="ph3">`Finally`</ph> block.</source>
          <target state="translated">Un <ph id="ph1">`Await`</ph> expresión no puede estar dentro de un <ph id="ph2">`Catch`</ph> bloque o <ph id="ph3">`Finally`</ph> bloque.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Iterators</source>
          <target state="translated">Iteradores</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>An iterator function or <ph id="ph1">`Get`</ph> accessor performs a custom iteration over a collection.</source>
          <target state="translated">Una función de iterador o <ph id="ph1">`Get`</ph> descriptor de acceso realiza una iteración personalizada en una colección.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>An iterator uses a <bpt id="p1">[</bpt>Yield<ept id="p1">](../../../visual-basic/language-reference/statements/yield-statement.md)</ept> statement to return each element of the collection one at a time.</source>
          <target state="translated">Un iterador se usa un <bpt id="p1">[</bpt>producen<ept id="p1">](../../../visual-basic/language-reference/statements/yield-statement.md)</ept> instrucción para devolver cada elemento de la colección a la vez.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>You call an iterator function by using a <bpt id="p1">[</bpt>For Each...Next Statement<ept id="p1">](../../../visual-basic/language-reference/statements/for-each-next-statement.md)</ept>.</source>
          <target state="translated">Puede llamar a una función de iterador con un <bpt id="p1">[</bpt>For Each... Next (instrucción)<ept id="p1">](../../../visual-basic/language-reference/statements/for-each-next-statement.md)</ept>.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Yield`</ph> statement can be inside a <ph id="ph2">`Try`</ph> block.</source>
          <target state="translated">Un <ph id="ph1">`Yield`</ph> instrucción puede estar dentro de un <ph id="ph2">`Try`</ph> bloque.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Try`</ph> block that contains a <ph id="ph2">`Yield`</ph> statement can have <ph id="ph3">`Catch`</ph> blocks, and can have a <ph id="ph4">`Finally`</ph> block.</source>
          <target state="translated">Un <ph id="ph1">`Try`</ph> bloque que contiene un <ph id="ph2">`Yield`</ph> instrucción puede tener <ph id="ph3">`Catch`</ph> bloquea y puede tener un <ph id="ph4">`Finally`</ph> bloque.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>See the "Try Blocks in Visual Basic" section of <bpt id="p1">[</bpt>Iterators<ept id="p1">](http://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7)</ept> for an example.</source>
          <target state="translated">Consulte la sección "Probar bloques en Visual Basic" de <bpt id="p1">[</bpt>iteradores<ept id="p1">](http://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7)</ept> para obtener un ejemplo.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Yield`</ph> statement cannot be inside a <ph id="ph2">`Catch`</ph> block or a <ph id="ph3">`Finally`</ph> block.</source>
          <target state="translated">Un <ph id="ph1">`Yield`</ph> instrucción no puede estar dentro de un <ph id="ph2">`Catch`</ph> bloque o una <ph id="ph3">`Finally`</ph> bloque.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`For Each`</ph> body (outside of the iterator function) throws an exception, a <ph id="ph2">`Catch`</ph> block in the iterator function is not executed, but a <ph id="ph3">`Finally`</ph> block in the iterator function is executed.</source>
          <target state="translated">Si el <ph id="ph1">`For Each`</ph> cuerpo (fuera de la función de iterador) produce una excepción, un <ph id="ph2">`Catch`</ph> no se ejecuta el bloque de la función del iterador, pero un <ph id="ph3">`Finally`</ph> se ejecuta el bloque de la función del iterador.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Catch`</ph> block inside an iterator function catches only exceptions that occur inside the iterator function.</source>
          <target state="translated">Un <ph id="ph1">`Catch`</ph> bloque dentro de una función de iterador captura solo las excepciones que se producen dentro de la función de iterador.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Partial-Trust Situations</source>
          <target state="translated">Situaciones de confianza parcial</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>In partial-trust situations, such as an application hosted on a network share, <ph id="ph1">`Try...Catch...Finally`</ph> does not catch security exceptions that occur before the method that contains the call is invoked.</source>
          <target state="translated">En situaciones de confianza parcial, como una aplicación hospedada en un recurso compartido de red, <ph id="ph1">`Try...Catch...Finally`</ph> no detecta excepciones de seguridad que se producen antes de invocar el método que contiene la llamada.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The following example, when you put it on a server share and run from there, produces the error "System.Security.SecurityException: Request Failed."</source>
          <target state="translated">El siguiente ejemplo, cuando se coloca en un recurso compartido de servidor y se ejecuta desde allí, produce el error "System.Security.SecurityException: error de solicitud."</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>For more information about security exceptions, see the &lt;xref:System.Security.SecurityException&gt; class.</source>
          <target state="translated">Para obtener más información acerca de las excepciones de seguridad, vea la &lt;xref:System.Security.SecurityException&gt;clase.&lt;/xref:System.Security.SecurityException&gt;</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#85<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/try-catch-finally-statement_2.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements&amp;#85;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/try-catch-finally-statement_2.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>In such a partial-trust situation, you have to put the <ph id="ph1">`Process.Start`</ph> statement in a separate <ph id="ph2">`Sub`</ph>.</source>
          <target state="translated">En esta situación de confianza parcial, tiene que poner el <ph id="ph1">`Process.Start`</ph> instrucción en otro <ph id="ph2">`Sub`</ph>.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The initial call to the <ph id="ph1">`Sub`</ph> will fail.</source>
          <target state="translated">La llamada inicial a la <ph id="ph1">`Sub`</ph> se producirá un error.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>This enables <ph id="ph1">`Try...Catch`</ph> to catch it before the <ph id="ph2">`Sub`</ph> that contains <ph id="ph3">`Process.Start`</ph> is started and the security exception produced.</source>
          <target state="translated">Esto permite <ph id="ph1">`Try...Catch`</ph> capturarla antes de la <ph id="ph2">`Sub`</ph> que contiene <ph id="ph3">`Process.Start`</ph> se inicia y se produce la excepción de seguridad.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Ejemplo</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The following example illustrates the structure of the <ph id="ph1">`Try...Catch...Finally`</ph> statement.</source>
          <target state="translated">En el ejemplo siguiente se muestra la estructura de la <ph id="ph1">`Try...Catch...Finally`</ph> instrucción.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#86<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/try-catch-finally-statement_3.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements&amp;#86;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/try-catch-finally-statement_3.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Ejemplo</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>In the following example, the <ph id="ph1">`CreateException`</ph> method throws a <ph id="ph2">`NullReferenceException`</ph>.</source>
          <target state="translated">En el ejemplo siguiente, la <ph id="ph1">`CreateException`</ph> método produce un <ph id="ph2">`NullReferenceException`</ph>.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The code that generates the exception is not in a <ph id="ph1">`Try`</ph> block.</source>
          <target state="translated">El código que genera la excepción no está en un <ph id="ph1">`Try`</ph> bloque.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Therefore, the <ph id="ph1">`CreateException`</ph> method does not handle the exception.</source>
          <target state="translated">Por lo tanto, la <ph id="ph1">`CreateException`</ph> método no controla la excepción.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`RunSample`</ph> method does handle the exception because the call to the <ph id="ph2">`CreateException`</ph> method is in a <ph id="ph3">`Try`</ph> block.</source>
          <target state="translated">El <ph id="ph1">`RunSample`</ph> método controlar la excepción porque la llamada a la <ph id="ph2">`CreateException`</ph> método está en un <ph id="ph3">`Try`</ph> bloque.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The example includes <ph id="ph1">`Catch`</ph> statements for several types of exceptions, ordered from the most specific to the most general.</source>
          <target state="translated">El ejemplo incluye <ph id="ph1">`Catch`</ph> instrucciones para varios tipos de excepciones, se ordenan desde el más específico al más general.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#91<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/try-catch-finally-statement_4.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements&amp;#91;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/try-catch-finally-statement_4.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Ejemplo</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The following example shows how to use a <ph id="ph1">`Catch When`</ph> statement to filter on a conditional expression.</source>
          <target state="translated">En el ejemplo siguiente se muestra cómo utilizar un <ph id="ph1">`Catch When`</ph> instrucción para filtrar en una expresión condicional.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>If the conditional expression evaluates to <ph id="ph1">`True`</ph>, the code in the <ph id="ph2">`Catch`</ph> block runs.</source>
          <target state="translated">Si la expresión condicional se evalúa como <ph id="ph1">`True`</ph>, el código en el <ph id="ph2">`Catch`</ph> bloquear ejecuciones.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#92<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/try-catch-finally-statement_5.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements&amp;#92;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/try-catch-finally-statement_5.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Ejemplo</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The following example has a <ph id="ph1">`Try…Catch`</ph> statement that is contained in a <ph id="ph2">`Try`</ph> block.</source>
          <target state="translated">El ejemplo siguiente tiene un <ph id="ph1">`Try…Catch`</ph> instrucción que se encuentra en un <ph id="ph2">`Try`</ph> bloque.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>The inner <ph id="ph1">`Catch`</ph> block throws an exception that has its <ph id="ph2">`InnerException`</ph> property set to the original exception.</source>
          <target state="translated">Interno <ph id="ph1">`Catch`</ph> bloque produce una excepción que tiene su <ph id="ph2">`InnerException`</ph> propiedad establecida en la excepción original.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>The outer <ph id="ph1">`Catch`</ph> block reports its own exception and the inner exception.</source>
          <target state="translated">Externo <ph id="ph1">`Catch`</ph> bloque informa acerca de su propia excepción y la excepción interna.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#93<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/try-catch-finally-statement_6.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements&amp;#93;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/try-catch-finally-statement_6.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Ejemplo</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The following example illustrates exception handling for async methods.</source>
          <target state="translated">En el ejemplo siguiente se muestra el control de excepciones de los métodos asincrónicos.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>To catch an exception that applies to an async task, the <ph id="ph1">`Await`</ph> expression is in a <ph id="ph2">`Try`</ph> block of the caller, and the exception is caught in the <ph id="ph3">`Catch`</ph> block.</source>
          <target state="translated">Para detectar una excepción que se aplica a una tarea asincrónica, el <ph id="ph1">`Await`</ph> expresión está en un <ph id="ph2">`Try`</ph> bloque del llamador y la excepción se detecta en el <ph id="ph3">`Catch`</ph> bloque.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Uncomment the <ph id="ph1">`Throw New Exception`</ph> line in the example to demonstrate exception handling.</source>
          <target state="translated">Quite la marca de comentario de la línea <ph id="ph1">`Throw New Exception`</ph> en el ejemplo para demostrar el control de excepciones.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>The exception is caught in the <ph id="ph1">`Catch`</ph> block, the task's <ph id="ph2">`IsFaulted`</ph> property is set to <ph id="ph3">`True`</ph>, and the task's <ph id="ph4">`Exception.InnerException`</ph> property is set to the exception.</source>
          <target state="translated">La excepción es detectada en el <ph id="ph1">`Catch`</ph> bloquear la tarea <ph id="ph2">`IsFaulted`</ph> propiedad está establecida en <ph id="ph3">`True`</ph>y la tarea <ph id="ph4">`Exception.InnerException`</ph> propiedad se establece en la excepción.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Uncomment the <ph id="ph1">`Throw New OperationCancelledException`</ph> line to demonstrate what happens when you cancel an asynchronous process.</source>
          <target state="translated">Quite el <ph id="ph1">`Throw New OperationCancelledException`</ph> línea para mostrar qué ocurre cuando se cancela un proceso asincrónico.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>The exception is caught in the <ph id="ph1">`Catch`</ph> block, and the task's <ph id="ph2">`IsCanceled`</ph> property is set to <ph id="ph3">`True`</ph>.</source>
          <target state="translated">La excepción es detectada en el <ph id="ph1">`Catch`</ph> bloque y la tarea <ph id="ph2">`IsCanceled`</ph> propiedad está establecida en <ph id="ph3">`True`</ph>.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>However, under some conditions that don't apply to this example, <ph id="ph1">`IsFaulted`</ph> is set to <ph id="ph2">`True`</ph> and <ph id="ph3">`IsCanceled`</ph> is set to <ph id="ph4">`False`</ph>.</source>
          <target state="translated">Sin embargo, en algunas condiciones que no se aplican a este ejemplo, <ph id="ph1">`IsFaulted`</ph> está establecido en <ph id="ph2">`True`</ph> y <ph id="ph3">`IsCanceled`</ph> está establecido en <ph id="ph4">`False`</ph>.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>csAsyncExceptions#1<ept id="p2">](../../../csharp/language-reference/keywords/codesnippet/VisualBasic/try-catch-finally-statement_7.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>csAsyncExceptions n.º&amp;1;<ept id="p2">](../../../csharp/language-reference/keywords/codesnippet/VisualBasic/try-catch-finally-statement_7.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Ejemplo</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>The following example illustrates exception handling where multiple tasks can result in multiple exceptions.</source>
          <target state="translated">En el ejemplo siguiente se muestra el control de excepciones en el que varias tareas pueden producir varias excepciones.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Try`</ph> block has the <ph id="ph2">`Await`</ph> expression for the task that &lt;xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=fullName&gt; returned.</source>
          <target state="translated">El <ph id="ph1">`Try`</ph> bloque tiene el <ph id="ph2">`Await`</ph> expresión para la tarea que &lt;xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=fullName&gt;devuelto.&lt;/xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>The task is complete when the three tasks to which &lt;xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=fullName&gt; is applied are complete.</source>
          <target state="translated">La tarea está completa cuando las tres tareas que &lt;xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=fullName&gt;se aplica completados.&lt;/xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Each of the three tasks causes an exception.</source>
          <target state="translated">Cada una de las tres tareas produce una excepción.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Catch`</ph> block iterates through the exceptions, which are found in the <ph id="ph2">`Exception.InnerExceptions`</ph> property of the task that <ph id="ph3">`Task.WhenAll`</ph> returned.</source>
          <target state="translated">El <ph id="ph1">`Catch`</ph> bloque itera a través de las excepciones, que se encuentran en la <ph id="ph2">`Exception.InnerExceptions`</ph> propiedad de la tarea que <ph id="ph3">`Task.WhenAll`</ph> devuelto.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>csAsyncExceptions#3<ept id="p2">](../../../csharp/language-reference/keywords/codesnippet/VisualBasic/try-catch-finally-statement_8.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>csAsyncExceptions&amp;3;<ept id="p2">](../../../csharp/language-reference/keywords/codesnippet/VisualBasic/try-catch-finally-statement_8.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">Vea también</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>&lt;xref:Microsoft.VisualBasic.Information.Err%2A&gt;</source>
          <target state="translated">&lt;xref:Microsoft.VisualBasic.Information.Err%2A&gt;&lt;/xref:Microsoft.VisualBasic.Information.Err%2A&gt;</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Exception&gt;</source>
          <target state="translated">&lt;xref:System.Exception&gt;&lt;/xref:System.Exception&gt;</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Exit Statement<ept id="p1">](../../../visual-basic/language-reference/statements/exit-statement.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Exit (instrucción)<ept id="p1">](../../../visual-basic/language-reference/statements/exit-statement.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>On Error Statement<ept id="p1">](../../../visual-basic/language-reference/statements/on-error-statement.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>On Error (instrucción)<ept id="p1">](../../../visual-basic/language-reference/statements/on-error-statement.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Best Practices for Using Code Snippets<ept id="p1">](https://docs.microsoft.com/visualstudio/ide/best-practices-for-using-code-snippets)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Procedimientos recomendados para utilizar fragmentos de código<ept id="p1">](https://docs.microsoft.com/visualstudio/ide/best-practices-for-using-code-snippets)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Exception Handling<ept id="p1">](https://msdn.microsoft.com/library/dd997415)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Control de excepciones<ept id="p1">](https://msdn.microsoft.com/library/dd997415)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Throw Statement<ept id="p1">](../../../visual-basic/language-reference/statements/throw-statement.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>Throw (instrucción)<ept id="p1">](../../../visual-basic/language-reference/statements/throw-statement.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>