<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">577be6330cb76da436470c383841a717dd6e3200</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\language-reference\operators\data-types-of-operator-results.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">acdc519b77fc3ba002f7c4b83b44ddc2774fa9cf</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b17a409f5bca9b1f5e040ddbc93bcd55b32e79df</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Handback file name: lo-mt_data-types-of-operator-results.7d11f360a68d8690b5c43018f84994934355807d.fr-fr is different with handoff file name: data-types-of-operator-results.7d11f360a68d8690b5c43018f84994934355807d.fr-fr.</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Data Types of Operator Results (Visual Basic) | Microsoft Docs</source>
          <target state="translated">Types de données des résultats d’opérateur (Visual Basic) | Documents Microsoft</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Data Types of Operator Results (Visual Basic)</source>
          <target state="translated">Types de données des résultats d'opérateur (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> determines the result data type of an operation based on the data types of the operands.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>Détermine le type de données de résultat d’une opération basée sur les types de données des opérandes.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In some cases this might be a data type with a greater range than that of either operand.</source>
          <target state="translated">Dans certains cas, cela peut être un type de données avec une plage supérieure à celle de des opérandes.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Data Type Ranges</source>
          <target state="translated">Plages de types de données</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The ranges of the relevant data types, in order from smallest to largest, are as follows:</source>
          <target state="translated">Les plages des types de données pertinents, dans l’ordre du plus petit au plus grand, sont les suivantes :</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Boolean<ept id="p1">](../../../visual-basic/language-reference/data-types/boolean-data-type.md)</ept> — two possible values</source>
          <target state="translated"><bpt id="p1">[</bpt>Boolean<ept id="p1">](../../../visual-basic/language-reference/data-types/boolean-data-type.md)</ept> — deux valeurs possibles</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>SByte<ept id="p1">](../../../visual-basic/language-reference/data-types/sbyte-data-type.md)</ept>, <bpt id="p2">[</bpt>Byte<ept id="p2">](../../../visual-basic/language-reference/data-types/byte-data-type.md)</ept> — 256 possible integral values</source>
          <target state="translated"><bpt id="p1">[</bpt>SByte<ept id="p1">](../../../visual-basic/language-reference/data-types/sbyte-data-type.md)</ept>, <bpt id="p2">[</bpt>octets<ept id="p2">](../../../visual-basic/language-reference/data-types/byte-data-type.md)</ept> — 256 valeurs intégrales possibles</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Short<ept id="p1">](../../../visual-basic/language-reference/data-types/short-data-type.md)</ept>, <bpt id="p2">[</bpt>UShort<ept id="p2">](../../../visual-basic/language-reference/data-types/ushort-data-type.md)</ept> — 65,536 (6.5...E+4) possible integral values</source>
          <target state="translated"><bpt id="p1">[</bpt>Short<ept id="p1">](../../../visual-basic/language-reference/data-types/short-data-type.md)</ept>, <bpt id="p2">[</bpt>UShort<ept id="p2">](../../../visual-basic/language-reference/data-types/ushort-data-type.md)</ept> : 65 536 (6.5... E + 4) valeurs intégrales possibles</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Integer<ept id="p1">](../../../visual-basic/language-reference/data-types/integer-data-type.md)</ept>, <bpt id="p2">[</bpt>UInteger<ept id="p2">](../../../visual-basic/language-reference/data-types/uinteger-data-type.md)</ept> — 4,294,967,296 (4.2...E+9) possible integral values</source>
          <target state="translated"><bpt id="p1">[</bpt>Entier<ept id="p1">](../../../visual-basic/language-reference/data-types/integer-data-type.md)</ept>, <bpt id="p2">[</bpt>UInteger<ept id="p2">](../../../visual-basic/language-reference/data-types/uinteger-data-type.md)</ept> : 4 294 967 296 (4.2... E + 9) valeurs intégrales possibles</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Long<ept id="p1">](../../../visual-basic/language-reference/data-types/long-data-type.md)</ept>, <bpt id="p2">[</bpt>ULong<ept id="p2">](../../../visual-basic/language-reference/data-types/ulong-data-type.md)</ept> — 18,446,744,073,709,551,615 (1.8...E+19) possible integral values</source>
          <target state="translated"><bpt id="p1">[</bpt>Long<ept id="p1">](../../../visual-basic/language-reference/data-types/long-data-type.md)</ept>, <bpt id="p2">[</bpt>ULong<ept id="p2">](../../../visual-basic/language-reference/data-types/ulong-data-type.md)</ept> — 18,446,744,073,709,551,615 (1.8... E + 19) valeurs intégrales possibles</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Decimal<ept id="p1">](../../../visual-basic/language-reference/data-types/decimal-data-type.md)</ept> — 1.5...E+29 possible integral values, maximum range 7.9...E+28 (absolute value)</source>
          <target state="translated"><bpt id="p1">[</bpt>Décimal<ept id="p1">](../../../visual-basic/language-reference/data-types/decimal-data-type.md)</ept> : 1,5... E + 29 valeurs intégrales possibles, nombre maximales de plage 7.9... E + 28 (valeur absolue)</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Single<ept id="p1">](../../../visual-basic/language-reference/data-types/single-data-type.md)</ept> — maximum range 3.4...E+38 (absolute value)</source>
          <target state="translated"><bpt id="p1">[</bpt>Seul<ept id="p1">](../../../visual-basic/language-reference/data-types/single-data-type.md)</ept> : plage maximale est 3,4... E + 38 (valeur absolue)</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Double<ept id="p1">](../../../visual-basic/language-reference/data-types/double-data-type.md)</ept> — maximum range 1.7...E+308 (absolute value)</source>
          <target state="translated"><bpt id="p1">[</bpt>Double<ept id="p1">](../../../visual-basic/language-reference/data-types/double-data-type.md)</ept> : plage maximale est 1,7... E + 308 (valeur absolue)</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For more information on <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> data types, see <bpt id="p1">[</bpt>Data Types<ept id="p1">](../../../visual-basic/language-reference/data-types/data-type-summary.md)</ept>.</source>
          <target state="translated">Pour plus d’informations sur <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> des types de données, consultez <bpt id="p1">[</bpt>des Types de données<ept id="p1">](../../../visual-basic/language-reference/data-types/data-type-summary.md)</ept>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If an operand evaluates to <bpt id="p1">[</bpt>Nothing<ept id="p1">](../../../visual-basic/language-reference/nothing.md)</ept>, the <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> arithmetic operators treat it as zero.</source>
          <target state="translated">Si un opérande a la valeur <bpt id="p1">[</bpt>rien<ept id="p1">](../../../visual-basic/language-reference/nothing.md)</ept>, le <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> opérateurs arithmétiques considèrent comme égales à zéro.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Decimal Arithmetic</source>
          <target state="translated">Arithmétique décimale</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Note that the <bpt id="p1">[</bpt>Decimal<ept id="p1">](../../../visual-basic/language-reference/data-types/decimal-data-type.md)</ept> data type is neither floating-point nor integer.</source>
          <target state="translated">Notez que la <bpt id="p1">[</bpt>décimal<ept id="p1">](../../../visual-basic/language-reference/data-types/decimal-data-type.md)</ept> type de données n’est ni à virgule flottante, ni entier.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If either operand of a <ph id="ph1">`+`</ph>, <ph id="ph2">`–`</ph>, <ph id="ph3">`*`</ph>, <ph id="ph4">`/`</ph>, or <ph id="ph5">`Mod`</ph> operation is <ph id="ph6">`Decimal`</ph> and the other is not <ph id="ph7">`Single`</ph> or <ph id="ph8">`Double`</ph>, <ph id="ph9">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> widens the other operand to <ph id="ph10">`Decimal`</ph>.</source>
          <target state="translated">Si des opérandes d’une <ph id="ph1">`+`</ph>, <ph id="ph2">`–`</ph>, <ph id="ph3">`*`</ph>, <ph id="ph4">`/`</ph>, ou <ph id="ph5">`Mod`</ph> opération <ph id="ph6">`Decimal`</ph> et l’autre n’est pas <ph id="ph7">`Single`</ph> ou <ph id="ph8">`Double`</ph>, <ph id="ph9">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> étend l’autre opérande à <ph id="ph10">`Decimal`</ph>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>It performs the operation in <ph id="ph1">`Decimal`</ph>, and the result data type is <ph id="ph2">`Decimal`</ph>.</source>
          <target state="translated">Il effectue l’opération dans <ph id="ph1">`Decimal`</ph>, et le type de données de résultat est <ph id="ph2">`Decimal`</ph>.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Floating-Point Arithmetic</source>
          <target state="translated">Arithmétique à virgule flottante</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> performs most floating-point arithmetic in <bpt id="p1">[</bpt>Double<ept id="p1">](../../../visual-basic/language-reference/data-types/double-data-type.md)</ept>, which is the most efficient data type for such operations.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>effectue la plupart des arithmétique à virgule flottante dans <bpt id="p1">[</bpt>Double<ept id="p1">](../../../visual-basic/language-reference/data-types/double-data-type.md)</ept>, qui est les plus efficace des données de type pour ces opérations.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>However, if one operand is <bpt id="p1">[</bpt>Single<ept id="p1">](../../../visual-basic/language-reference/data-types/single-data-type.md)</ept> and the other is not <ph id="ph1">`Double`</ph>, <ph id="ph2">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> performs the operation in <ph id="ph3">`Single`</ph>.</source>
          <target state="translated">Toutefois, si un opérande est <bpt id="p1">[</bpt>unique<ept id="p1">](../../../visual-basic/language-reference/data-types/single-data-type.md)</ept> et l’autre n’est pas <ph id="ph1">`Double`</ph>, <ph id="ph2">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> effectue l’opération dans <ph id="ph3">`Single`</ph>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>It widens each operand as necessary to the appropriate data type before the operation, and the result has that data type.</source>
          <target state="translated">Il élargit chaque opérande si nécessaire, pour le type de données approprié avant l’opération, et le résultat est du même type de données.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>/ and ^ Operators</source>
          <target state="translated">/ et ^ opérateurs</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`/`</ph> operator is defined only for the <bpt id="p1">[</bpt>Decimal<ept id="p1">](../../../visual-basic/language-reference/data-types/decimal-data-type.md)</ept>, <bpt id="p2">[</bpt>Single<ept id="p2">](../../../visual-basic/language-reference/data-types/single-data-type.md)</ept>, and <bpt id="p3">[</bpt>Double<ept id="p3">](../../../visual-basic/language-reference/data-types/double-data-type.md)</ept> data types.</source>
          <target state="translated">Le <ph id="ph1">`/`</ph> opérateur est défini uniquement pour le <bpt id="p1">[</bpt>décimal<ept id="p1">](../../../visual-basic/language-reference/data-types/decimal-data-type.md)</ept>, <bpt id="p2">[</bpt>unique<ept id="p2">](../../../visual-basic/language-reference/data-types/single-data-type.md)</ept>, et <bpt id="p3">[</bpt>Double<ept id="p3">](../../../visual-basic/language-reference/data-types/double-data-type.md)</ept> des types de données.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> widens each operand as necessary to the appropriate data type before the operation, and the result has that data type.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>élargit chaque opérande si nécessaire, pour le type de données approprié avant l’opération et le résultat est du même type de données.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The following table shows the result data types for the <ph id="ph1">`/`</ph> operator.</source>
          <target state="translated">Le tableau suivant montre le résultat de types de données pour le <ph id="ph1">`/`</ph> opérateur.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Note that this table is symmetric; for a given combination of operand data types, the result data type is the same regardless of the order of the operands.</source>
          <target state="translated">Notez que ce tableau est symétrique ; pour une combinaison donnée de types de données d’opérande, le type de données de résultat est le même quel que soit l’ordre des opérandes.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Any integer type</source>
          <target state="translated">Un type d’entier</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Decimal</source>
          <target state="translated">Decimal</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Single</source>
          <target state="translated">Single</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Double</source>
          <target state="translated">Double</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Decimal</source>
          <target state="translated">Decimal</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Single</source>
          <target state="translated">Single</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Single</source>
          <target state="translated">Single</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Double</source>
          <target state="translated">Double</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Single</source>
          <target state="translated">Single</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Double</source>
          <target state="translated">Double</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Double</source>
          <target state="translated">Double</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Double</source>
          <target state="translated">Double</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Double</source>
          <target state="translated">Double</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Any integer type</source>
          <target state="translated">Un type d’entier</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Decimal</source>
          <target state="translated">Decimal</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Single</source>
          <target state="translated">Single</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Double</source>
          <target state="translated">Double</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Double</source>
          <target state="translated">Double</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`^`</ph> operator is defined only for the <ph id="ph2">`Double`</ph> data type.</source>
          <target state="translated">Le <ph id="ph1">`^`</ph> opérateur est défini uniquement pour la <ph id="ph2">`Double`</ph> type de données.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> widens each operand as necessary to <ph id="ph2">`Double`</ph> before the operation, and the result data type is always <ph id="ph3">`Double`</ph>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>élargit chaque opérande correctement à <ph id="ph2">`Double`</ph> avant l’opération et le résultat de type de données est toujours <ph id="ph3">`Double`</ph>.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Integer Arithmetic</source>
          <target state="translated">Arithmétique sur les entiers</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The result data type of an integer operation depends on the data types of the operands.</source>
          <target state="translated">Le type de données de résultat d’une opération entier varie selon les types de données des opérandes.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>In general, <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> uses the following policies for determining the result data type:</source>
          <target state="translated">En règle générale, <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> utilise les stratégies suivantes pour déterminer le type de données de résultat :</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>If both operands of a binary operator have the same data type, the result has that data type.</source>
          <target state="translated">Si les deux opérandes d’un opérateur binaire ont le même type de données, le résultat est du même type de données.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>An exception is <ph id="ph1">`Boolean`</ph>, which is forced to <ph id="ph2">`Short`</ph>.</source>
          <target state="translated">Une exception est <ph id="ph1">`Boolean`</ph>, qui est forcé à <ph id="ph2">`Short`</ph>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>If an unsigned operand participates with a signed operand, the result has a signed type with at least as large a range as either operand.</source>
          <target state="translated">Si un opérande non signé est inclus avec un opérande signé, le résultat est un type signé au moins aussi grande une plage en tant que des opérandes.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Otherwise, the result usually has the larger of the two operand data types.</source>
          <target state="translated">Sinon, le résultat est généralement le plus grand des deux types de données d’opérande.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Note that the result data type might not be the same as either operand data type.</source>
          <target state="translated">Notez que le type de données de résultat ne peut pas être identique à un type de données d’opérande.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The result data type is not always large enough to hold all possible values resulting from the operation.</source>
          <target state="translated">Le type de données de résultat n’est pas toujours suffisamment grand pour contenir toutes les valeurs possibles résultant de l’opération.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.OverflowException&gt; exception can occur if the value is too large for the result data type.</source>
          <target state="translated">Un &lt;xref:System.OverflowException&gt;exception peut se produire si la valeur est trop grande pour le type de données de résultat.&lt;/xref:System.OverflowException&gt;</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Unary + and – Operators</source>
          <target state="translated">Unaire + et -les opérateurs</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The following table shows the result data types for the two unary operators, <ph id="ph1">`+`</ph> and <ph id="ph2">`–`</ph>.</source>
          <target state="translated">Le tableau suivant présente les types de données du résultat pour les opérateurs unaires, <ph id="ph1">`+`</ph> et <ph id="ph2">`–`</ph>.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Unary <ph id="ph1">`+`</ph></source>
          <target state="translated">Unaire<ph id="ph1">`+`</ph></target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Short</source>
          <target state="translated">Short</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>SByte</source>
          <target state="translated">SByte</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Byte</source>
          <target state="translated">Byte</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Short</source>
          <target state="translated">Short</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>UShort</source>
          <target state="translated">UShort</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Integer</source>
          <target state="translated">Entier</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>UInteger</source>
          <target state="translated">UInteger</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>ULong</source>
          <target state="translated">ULong</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Unary <ph id="ph1">`–`</ph></source>
          <target state="translated">Unaire<ph id="ph1">`–`</ph></target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Short</source>
          <target state="translated">Short</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>SByte</source>
          <target state="translated">SByte</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Short</source>
          <target state="translated">Short</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Short</source>
          <target state="translated">Short</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Integer</source>
          <target state="translated">Entier</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Integer</source>
          <target state="translated">Entier</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Decimal</source>
          <target state="translated">Decimal</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;</ph><ph id="ph2">\&lt;</ph> and &gt;&gt; Operators</source>
          <target state="translated"><ph id="ph1">&lt;</ph><ph id="ph2">\&lt;</ph>et &gt;&gt; opérateurs</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The following table shows the result data types for the two bit-shift operators, <ph id="ph1">`&lt;&lt;`</ph> and <ph id="ph2">`&gt;&gt;`</ph>.</source>
          <target state="translated">Le tableau suivant présente les types de données du résultat pour les deux opérateurs de décalage de bits, <ph id="ph1">`&lt;&lt;`</ph> et <ph id="ph2">`&gt;&gt;`</ph>.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> treats each bit-shift operator as a unary operator on its left operand (the bit pattern to be shifted).</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>traite chaque opérateur de décalage de bits comme un opérateur unaire sur son opérande gauche (modèle binaire à décaler).</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`&lt;&lt;`</ph>, <ph id="ph2">`&gt;&gt;`</ph></source>
          <target state="translated"><ph id="ph1">`&lt;&lt;`</ph>, <ph id="ph2">`&gt;&gt;`</ph></target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Short</source>
          <target state="translated">Short</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>SByte</source>
          <target state="translated">SByte</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Byte</source>
          <target state="translated">Byte</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Short</source>
          <target state="translated">Short</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>UShort</source>
          <target state="translated">UShort</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Integer</source>
          <target state="translated">Entier</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>UInteger</source>
          <target state="translated">UInteger</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>ULong</source>
          <target state="translated">ULong</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>If the left operand is <ph id="ph1">`Decimal`</ph>, <ph id="ph2">`Single`</ph>, <ph id="ph3">`Double`</ph>, or <ph id="ph4">`String`</ph>, <ph id="ph5">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> attempts to convert it to <ph id="ph6">`Long`</ph> before the operation, and the result data type is <ph id="ph7">`Long`</ph>.</source>
          <target state="translated">Si l’opérande de gauche est <ph id="ph1">`Decimal`</ph>, <ph id="ph2">`Single`</ph>, <ph id="ph3">`Double`</ph>, ou <ph id="ph4">`String`</ph>, <ph id="ph5">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> tente du convertir en <ph id="ph6">`Long`</ph> avant l’opération et le résultat est de type de données <ph id="ph7">`Long`</ph>.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The right operand (the number of bit positions to shift) must be <ph id="ph1">`Integer`</ph> or a type that widens to <ph id="ph2">`Integer`</ph>.</source>
          <target state="translated">L’opérande droit (le nombre de positions de bits à décaler) doit être <ph id="ph1">`Integer`</ph> ou un type qui s’étend à <ph id="ph2">`Integer`</ph>.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Binary +, –, *, and Mod Operators</source>
          <target state="translated">Binaire +, -, * et les opérateurs Mod</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The following table shows the result data types for the binary <ph id="ph1">`+`</ph> and <ph id="ph2">`–`</ph> operators and the <ph id="ph3">`*`</ph> and <ph id="ph4">`Mod`</ph> operators.</source>
          <target state="translated">Le tableau suivant montre le résultat de types de données pour le fichier binaire <ph id="ph1">`+`</ph> et <ph id="ph2">`–`</ph> opérateurs et <ph id="ph3">`*`</ph> et <ph id="ph4">`Mod`</ph> opérateurs.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Note that this table is symmetric; for a given combination of operand data types, the result data type is the same regardless of the order of the operands.</source>
          <target state="translated">Notez que ce tableau est symétrique ; pour une combinaison donnée de types de données d’opérande, le type de données de résultat est le même quel que soit l’ordre des opérandes.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Short</source>
          <target state="translated">Courte</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>SByte</source>
          <target state="translated">SByte</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Short</source>
          <target state="translated">Short</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Short</source>
          <target state="translated">Short</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Integer</source>
          <target state="translated">Entier</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Integer</source>
          <target state="translated">Entier</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Decimal</source>
          <target state="translated">Decimal</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>SByte</source>
          <target state="translated">SByte</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>SByte</source>
          <target state="translated">SByte</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Short</source>
          <target state="translated">Short</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Short</source>
          <target state="translated">Short</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Integer</source>
          <target state="translated">Entier</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Integer</source>
          <target state="translated">Entier</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Decimal</source>
          <target state="translated">Decimal</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Short</source>
          <target state="translated">Courte</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Short</source>
          <target state="translated">Short</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Byte</source>
          <target state="translated">Byte</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Short</source>
          <target state="translated">Short</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>UShort</source>
          <target state="translated">UShort</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Integer</source>
          <target state="translated">Entier</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>UInteger</source>
          <target state="translated">UInteger</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>ULong</source>
          <target state="translated">ULong</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Short</source>
          <target state="translated">Courte</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Short</source>
          <target state="translated">Short</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Short</source>
          <target state="translated">Short</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Short</source>
          <target state="translated">Short</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Integer</source>
          <target state="translated">Entier</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Integer</source>
          <target state="translated">Entier</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Decimal</source>
          <target state="translated">Decimal</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Integer</source>
          <target state="translated">Entier</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Integer</source>
          <target state="translated">Entier</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>UShort</source>
          <target state="translated">UShort</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Integer</source>
          <target state="translated">Entier</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>UShort</source>
          <target state="translated">UShort</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Integer</source>
          <target state="translated">Entier</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>UInteger</source>
          <target state="translated">UInteger</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>ULong</source>
          <target state="translated">ULong</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Integer</source>
          <target state="translated">Entier</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Integer</source>
          <target state="translated">Entier</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Integer</source>
          <target state="translated">Entier</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Integer</source>
          <target state="translated">Entier</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Integer</source>
          <target state="translated">Entier</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Integer</source>
          <target state="translated">Entier</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Decimal</source>
          <target state="translated">Decimal</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Longue</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>UInteger</source>
          <target state="translated">UInteger</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>UInteger</source>
          <target state="translated">UInteger</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>UInteger</source>
          <target state="translated">UInteger</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>ULong</source>
          <target state="translated">ULong</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Longue</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Decimal</source>
          <target state="translated">Decimal</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Decimal</source>
          <target state="translated">Decimal</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Decimal</source>
          <target state="translated">Decimal</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>ULong</source>
          <target state="translated">ULong</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Decimal</source>
          <target state="translated">Decimal</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>ULong</source>
          <target state="translated">ULong</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Decimal</source>
          <target state="translated">Decimal</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>ULong</source>
          <target state="translated">ULong</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Decimal</source>
          <target state="translated">Decimal</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>ULong</source>
          <target state="translated">ULong</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>\ Operator</source>
          <target state="translated">\, opérateur</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>The following table shows the result data types for the <ph id="ph1">`\`</ph> operator.</source>
          <target state="translated">Le tableau suivant montre le résultat de types de données pour le <ph id="ph1">`\`</ph> opérateur.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Note that this table is symmetric; for a given combination of operand data types, the result data type is the same regardless of the order of the operands.</source>
          <target state="translated">Notez que ce tableau est symétrique ; pour une combinaison donnée de types de données d’opérande, le type de données de résultat est le même quel que soit l’ordre des opérandes.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Short</source>
          <target state="translated">Courte</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>SByte</source>
          <target state="translated">SByte</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Short</source>
          <target state="translated">Short</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Short</source>
          <target state="translated">Short</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Integer</source>
          <target state="translated">Entier</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Integer</source>
          <target state="translated">Entier</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Longue</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>SByte</source>
          <target state="translated">SByte</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>SByte</source>
          <target state="translated">SByte</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Short</source>
          <target state="translated">Short</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Short</source>
          <target state="translated">Short</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Integer</source>
          <target state="translated">Entier</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Integer</source>
          <target state="translated">Entier</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Longue</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Short</source>
          <target state="translated">Courte</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Short</source>
          <target state="translated">Short</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Byte</source>
          <target state="translated">Byte</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Short</source>
          <target state="translated">Short</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>UShort</source>
          <target state="translated">UShort</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Integer</source>
          <target state="translated">Entier</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>UInteger</source>
          <target state="translated">UInteger</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>ULong</source>
          <target state="translated">ULong</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Short</source>
          <target state="translated">Courte</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Short</source>
          <target state="translated">Short</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Short</source>
          <target state="translated">Short</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Short</source>
          <target state="translated">Short</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Integer</source>
          <target state="translated">Entier</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Integer</source>
          <target state="translated">Entier</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Longue</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Integer</source>
          <target state="translated">Entier</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Integer</source>
          <target state="translated">Entier</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>UShort</source>
          <target state="translated">UShort</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Integer</source>
          <target state="translated">Entier</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>UShort</source>
          <target state="translated">UShort</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Integer</source>
          <target state="translated">Entier</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>UInteger</source>
          <target state="translated">UInteger</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>ULong</source>
          <target state="translated">ULong</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Integer</source>
          <target state="translated">Entier</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Integer</source>
          <target state="translated">Entier</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>Integer</source>
          <target state="translated">Entier</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Integer</source>
          <target state="translated">Entier</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Integer</source>
          <target state="translated">Entier</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Integer</source>
          <target state="translated">Entier</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>UInteger</source>
          <target state="translated">UInteger</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>UInteger</source>
          <target state="translated">UInteger</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>UInteger</source>
          <target state="translated">UInteger</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>ULong</source>
          <target state="translated">ULong</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Longue</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>ULong</source>
          <target state="translated">ULong</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>ULong</source>
          <target state="translated">ULong</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>ULong</source>
          <target state="translated">ULong</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>ULong</source>
          <target state="translated">ULong</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>If either operand of the <ph id="ph1">`\`</ph> operator is <bpt id="p1">[</bpt>Decimal<ept id="p1">](../../../visual-basic/language-reference/data-types/decimal-data-type.md)</ept>, <bpt id="p2">[</bpt>Single<ept id="p2">](../../../visual-basic/language-reference/data-types/single-data-type.md)</ept>, or <bpt id="p3">[</bpt>Double<ept id="p3">](../../../visual-basic/language-reference/data-types/double-data-type.md)</ept>, <ph id="ph2">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> attempts to convert it to <bpt id="p4">[</bpt>Long<ept id="p4">](../../../visual-basic/language-reference/data-types/long-data-type.md)</ept> before the operation, and the result data type is <ph id="ph3">`Long`</ph>.</source>
          <target state="translated">Si des opérandes de le <ph id="ph1">`\`</ph> opérateur est <bpt id="p1">[</bpt>décimal<ept id="p1">](../../../visual-basic/language-reference/data-types/decimal-data-type.md)</ept>, <bpt id="p2">[</bpt>unique<ept id="p2">](../../../visual-basic/language-reference/data-types/single-data-type.md)</ept>, ou <bpt id="p3">[</bpt>Double<ept id="p3">](../../../visual-basic/language-reference/data-types/double-data-type.md)</ept>, <ph id="ph2">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> tente du convertir en <bpt id="p4">[</bpt>Long<ept id="p4">](../../../visual-basic/language-reference/data-types/long-data-type.md)</ept> avant l’opération et le résultat est de type de données <ph id="ph3">`Long`</ph>.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Relational and Bitwise Comparisons</source>
          <target state="translated">Comparaisons relationnelles et au niveau du bit</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>The result data type of a relational operation (<ph id="ph1">`=`</ph>, <ph id="ph2">`&lt;&gt;`</ph>, <ph id="ph3">`&lt;`</ph>, <ph id="ph4">`&gt;`</ph>, <ph id="ph5">`&lt;=`</ph>, <ph id="ph6">`&gt;=`</ph>) is always <ph id="ph7">`Boolean`</ph><bpt id="p1">[</bpt>Boolean Data Type<ept id="p1">](../../../visual-basic/language-reference/data-types/boolean-data-type.md)</ept>.</source>
          <target state="translated">Le type de données de résultat d’une opération relationnelle (<ph id="ph1">`=`</ph>, <ph id="ph2">`&lt;&gt;`</ph>, <ph id="ph3">`&lt;`</ph>, <ph id="ph4">`&gt;`</ph>, <ph id="ph5">`&lt;=`</ph>, <ph id="ph6">`&gt;=`</ph>) est toujours <ph id="ph7">`Boolean`</ph> <bpt id="p1">[</bpt>Type de données booléen<ept id="p1">](../../../visual-basic/language-reference/data-types/boolean-data-type.md)</ept>.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>The same is true for logical operations (<ph id="ph1">`And`</ph>, <ph id="ph2">`AndAlso`</ph>, <ph id="ph3">`Not`</ph>, <ph id="ph4">`Or`</ph>, <ph id="ph5">`OrElse`</ph>, <ph id="ph6">`Xor`</ph>) on <ph id="ph7">`Boolean`</ph> operands.</source>
          <target state="translated">Cela vaut pour les opérations logiques (<ph id="ph1">`And`</ph>, <ph id="ph2">`AndAlso`</ph>, <ph id="ph3">`Not`</ph>, <ph id="ph4">`Or`</ph>, <ph id="ph5">`OrElse`</ph>, <ph id="ph6">`Xor`</ph>) sur <ph id="ph7">`Boolean`</ph> opérandes.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>The result data type of a bitwise logical operation depends on the data types of the operands.</source>
          <target state="translated">Le type de données de résultat d’une opération logique au niveau du bit varie selon les types de données des opérandes.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>Note that <ph id="ph1">`AndAlso`</ph> and <ph id="ph2">`OrElse`</ph> are defined only for <ph id="ph3">`Boolean`</ph>, and <ph id="ph4">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> converts each operand as necessary to <ph id="ph5">`Boolean`</ph> before performing the operation.</source>
          <target state="translated">Notez que <ph id="ph1">`AndAlso`</ph> et <ph id="ph2">`OrElse`</ph> sont définis uniquement pour <ph id="ph3">`Boolean`</ph>, et <ph id="ph4">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> convertit chaque opérande si nécessaire en <ph id="ph5">`Boolean`</ph> avant d’effectuer l’opération.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>=, &lt;&gt;, <ph id="ph1">\&lt;</ph>, &gt;, <ph id="ph2">\&lt;</ph>=, and &gt;= Operators</source>
          <target state="translated">=, &lt;&gt;, <ph id="ph1">\&lt;</ph>, &gt;, <ph id="ph2">\&lt;</ph>=, and &gt;= Operators</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>If both operands are <ph id="ph1">`Boolean`</ph>, <ph id="ph2">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> considers <ph id="ph3">`True`</ph> to be less than <ph id="ph4">`False`</ph>.</source>
          <target state="translated">Si les deux opérandes sont <ph id="ph1">`Boolean`</ph>, <ph id="ph2">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> considère <ph id="ph3">`True`</ph> être inférieur à <ph id="ph4">`False`</ph>.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>If a numeric type is compared with a <ph id="ph1">`String`</ph>, <ph id="ph2">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> attempts to convert the <ph id="ph3">`String`</ph> to <ph id="ph4">`Double`</ph> before the operation.</source>
          <target state="translated">Si un type numérique est comparé à un <ph id="ph1">`String`</ph>, <ph id="ph2">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> essaie de convertir la <ph id="ph3">`String`</ph> à <ph id="ph4">`Double`</ph> avant l’opération.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Char`</ph> or <ph id="ph2">`Date`</ph> operand can be compared only with another operand of the same data type.</source>
          <target state="translated">A <ph id="ph1">`Char`</ph> ou <ph id="ph2">`Date`</ph> opérande peut être comparé qu’avec un autre opérande du même type de données.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>The result data type is always <ph id="ph1">`Boolean`</ph>.</source>
          <target state="translated">Le type de données de résultat est toujours <ph id="ph1">`Boolean`</ph>.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>Bitwise Not Operator</source>
          <target state="translated">Opérateur de bits Not (opérateur)</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>The following table shows the result data types for the bitwise <ph id="ph1">`Not`</ph> operator.</source>
          <target state="translated">Le tableau suivant montre le résultat de l’opérateur de bits des types de données <ph id="ph1">`Not`</ph> opérateur.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>Boolean</source>
          <target state="translated">Booléen</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>SByte</source>
          <target state="translated">SByte</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>Byte</source>
          <target state="translated">Byte</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>Short</source>
          <target state="translated">Short</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>UShort</source>
          <target state="translated">UShort</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Integer</source>
          <target state="translated">Entier</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>UInteger</source>
          <target state="translated">UInteger</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>ULong</source>
          <target state="translated">ULong</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>If the operand is <ph id="ph1">`Decimal`</ph>, <ph id="ph2">`Single`</ph>, <ph id="ph3">`Double`</ph>, or <ph id="ph4">`String`</ph>, <ph id="ph5">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> attempts to convert it to <ph id="ph6">`Long`</ph> before the operation, and the result data type is <ph id="ph7">`Long`</ph>.</source>
          <target state="translated">Si l’opérande est <ph id="ph1">`Decimal`</ph>, <ph id="ph2">`Single`</ph>, <ph id="ph3">`Double`</ph>, ou <ph id="ph4">`String`</ph>, <ph id="ph5">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> tente du convertir en <ph id="ph6">`Long`</ph> avant l’opération et le résultat est de type de données <ph id="ph7">`Long`</ph>.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>Bitwise And, Or, and Xor Operators</source>
          <target state="translated">Au niveau du bit et, ou et les opérateurs Xor</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>The following table shows the result data types for the bitwise <ph id="ph1">`And`</ph>, <ph id="ph2">`Or`</ph>, and <ph id="ph3">`Xor`</ph> operators.</source>
          <target state="translated">Le tableau suivant montre le résultat de l’opérateur de bits des types de données <ph id="ph1">`And`</ph>, <ph id="ph2">`Or`</ph>, et <ph id="ph3">`Xor`</ph> opérateurs.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>Note that this table is symmetric; for a given combination of operand data types, the result data type is the same regardless of the order of the operands.</source>
          <target state="translated">Notez que ce tableau est symétrique ; pour une combinaison donnée de types de données d’opérande, le type de données de résultat est le même quel que soit l’ordre des opérandes.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>Boolean</source>
          <target state="translated">Booléen</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>SByte</source>
          <target state="translated">SByte</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>Short</source>
          <target state="translated">Short</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>Short</source>
          <target state="translated">Short</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>Integer</source>
          <target state="translated">Entier</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>Integer</source>
          <target state="translated">Entier</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Longue</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>SByte</source>
          <target state="translated">SByte</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>SByte</source>
          <target state="translated">SByte</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>Short</source>
          <target state="translated">Short</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>Short</source>
          <target state="translated">Short</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>Integer</source>
          <target state="translated">Entier</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>Integer</source>
          <target state="translated">Entier</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Longue</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>Short</source>
          <target state="translated">Courte</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>Short</source>
          <target state="translated">Short</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>Byte</source>
          <target state="translated">Byte</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>Short</source>
          <target state="translated">Short</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>UShort</source>
          <target state="translated">UShort</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>Integer</source>
          <target state="translated">Entier</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>UInteger</source>
          <target state="translated">UInteger</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>ULong</source>
          <target state="translated">ULong</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>Short</source>
          <target state="translated">Courte</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>Short</source>
          <target state="translated">Short</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>Short</source>
          <target state="translated">Short</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>Short</source>
          <target state="translated">Short</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>Integer</source>
          <target state="translated">Entier</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>Integer</source>
          <target state="translated">Entier</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Longue</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>Integer</source>
          <target state="translated">Entier</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>Integer</source>
          <target state="translated">Entier</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>UShort</source>
          <target state="translated">UShort</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>Integer</source>
          <target state="translated">Entier</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>UShort</source>
          <target state="translated">UShort</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>Integer</source>
          <target state="translated">Entier</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>UInteger</source>
          <target state="translated">UInteger</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>ULong</source>
          <target state="translated">ULong</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>Integer</source>
          <target state="translated">Entier</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>Integer</source>
          <target state="translated">Entier</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>Integer</source>
          <target state="translated">Entier</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>Integer</source>
          <target state="translated">Entier</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>Integer</source>
          <target state="translated">Entier</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>Integer</source>
          <target state="translated">Entier</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>UInteger</source>
          <target state="translated">UInteger</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>UInteger</source>
          <target state="translated">UInteger</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>UInteger</source>
          <target state="translated">UInteger</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>ULong</source>
          <target state="translated">ULong</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Longue</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>ULong</source>
          <target state="translated">ULong</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>ULong</source>
          <target state="translated">ULong</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>ULong</source>
          <target state="translated">ULong</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>Long</source>
          <target state="translated">Long</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>ULong</source>
          <target state="translated">ULong</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>If an operand is <ph id="ph1">`Decimal`</ph>, <ph id="ph2">`Single`</ph>, <ph id="ph3">`Double`</ph>, or <ph id="ph4">`String`</ph>, <ph id="ph5">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> attempts to convert it to <ph id="ph6">`Long`</ph> before the operation, and the result data type is the same as if that operand had already been <ph id="ph7">`Long`</ph>.</source>
          <target state="translated">Si un opérande est <ph id="ph1">`Decimal`</ph>, <ph id="ph2">`Single`</ph>, <ph id="ph3">`Double`</ph>, ou <ph id="ph4">`String`</ph>, <ph id="ph5">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> tente du convertir en <ph id="ph6">`Long`</ph> avant l’opération et les données de résultat type est le même que si cet opérande était déjà <ph id="ph7">`Long`</ph>.</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>Miscellaneous Operators</source>
          <target state="translated">Opérateurs divers</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`&amp;`</ph> operator is defined only for concatenation of <ph id="ph2">`String`</ph> operands.</source>
          <target state="translated">Le <ph id="ph1">`&amp;`</ph> opérateur est défini uniquement pour la concaténation de <ph id="ph2">`String`</ph> opérandes.</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> converts each operand as necessary to <ph id="ph2">`String`</ph> before the operation, and the result data type is always <ph id="ph3">`String`</ph>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>Convertit chaque opérande si nécessaire en <ph id="ph2">`String`</ph> avant l’opération et le résultat de type de données est toujours <ph id="ph3">`String`</ph>.</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>For the purposes of the <ph id="ph1">`&amp;`</ph> operator, all conversions to <ph id="ph2">`String`</ph> are considered to be widening, even if <ph id="ph3">`Option Strict`</ph> is <ph id="ph4">`On`</ph>.</source>
          <target state="translated">Dans le cadre de la <ph id="ph1">`&amp;`</ph> opérateur, toutes les conversions en <ph id="ph2">`String`</ph> sont considérées comme des étendues, même si <ph id="ph3">`Option Strict`</ph> est <ph id="ph4">`On`</ph>.</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Is`</ph> and <ph id="ph2">`IsNot`</ph> operators require both operands to be of a reference type.</source>
          <target state="translated">Le <ph id="ph1">`Is`</ph> et <ph id="ph2">`IsNot`</ph> opérateurs requièrent les deux opérandes soient d’un type référence.</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`TypeOf`</ph>...<ph id="ph2">`Is`</ph> expression requires the first operand to be of a reference type and the second operand to be the name of a data type.</source>
          <target state="translated">The <ph id="ph1">`TypeOf`</ph>... <ph id="ph2">`Is`</ph> expression requiert que le premier opérande soit d’un type référence et le deuxième opérande par le nom d’un type de données.</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>In all these cases the result data type is <ph id="ph1">`Boolean`</ph>.</source>
          <target state="translated">Dans tous les cas les données de résultat est type <ph id="ph1">`Boolean`</ph>.</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Like`</ph> operator is defined only for pattern matching of <ph id="ph2">`String`</ph> operands.</source>
          <target state="translated">Le <ph id="ph1">`Like`</ph> opérateur est défini uniquement pour les critères spéciaux de <ph id="ph2">`String`</ph> opérandes.</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> attempts to convert each operand as necessary to <ph id="ph2">`String`</ph> before the operation.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>essaie de convertir chaque opérande si nécessaire en <ph id="ph2">`String`</ph> avant l’opération.</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>The result data type is always <ph id="ph1">`Boolean`</ph>.</source>
          <target state="translated">Le type de données de résultat est toujours <ph id="ph1">`Boolean`</ph>.</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">Voir aussi</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Data Types<ept id="p1">](../../../visual-basic/language-reference/data-types/data-type-summary.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Types de données<ept id="p1">](../../../visual-basic/language-reference/data-types/data-type-summary.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Operators and Expressions<ept id="p1">](../../../visual-basic/programming-guide/language-features/operators-and-expressions/index.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Opérateurs et Expressions<ept id="p1">](../../../visual-basic/programming-guide/language-features/operators-and-expressions/index.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Arithmetic Operators in Visual Basic<ept id="p1">](../../../visual-basic/programming-guide/language-features/operators-and-expressions/arithmetic-operators.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Opérateurs arithmétiques en Visual Basic<ept id="p1">](../../../visual-basic/programming-guide/language-features/operators-and-expressions/arithmetic-operators.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Comparison Operators in Visual Basic<ept id="p1">](../../../visual-basic/programming-guide/language-features/operators-and-expressions/comparison-operators.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Opérateurs de comparaison en Visual Basic<ept id="p1">](../../../visual-basic/programming-guide/language-features/operators-and-expressions/comparison-operators.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Operators<ept id="p1">](../../../visual-basic/language-reference/operators/index.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Opérateurs<ept id="p1">](../../../visual-basic/language-reference/operators/index.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Operator Precedence in Visual Basic<ept id="p1">](../../../visual-basic/language-reference/operators/operator-precedence.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Priorité des opérateurs dans Visual Basic<ept id="p1">](../../../visual-basic/language-reference/operators/operator-precedence.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Operators Listed by Functionality<ept id="p1">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Opérateurs répertoriés par fonctionnalité<ept id="p1">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Arithmetic Operators<ept id="p1">](../../../visual-basic/language-reference/operators/arithmetic-operators.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Opérateurs arithmétiques<ept id="p1">](../../../visual-basic/language-reference/operators/arithmetic-operators.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Comparison Operators<ept id="p1">](../../../visual-basic/language-reference/operators/comparison-operators.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Opérateurs de comparaison<ept id="p1">](../../../visual-basic/language-reference/operators/comparison-operators.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Option Strict Statement<ept id="p1">](../../../visual-basic/language-reference/statements/option-strict-statement.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>Option Strict (instruction)<ept id="p1">](../../../visual-basic/language-reference/statements/option-strict-statement.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>