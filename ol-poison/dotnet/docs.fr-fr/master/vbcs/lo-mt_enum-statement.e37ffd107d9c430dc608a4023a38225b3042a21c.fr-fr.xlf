<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f9d3377300d30fd045c041367a528766fa9a8ed9</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\language-reference\statements\enum-statement.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2b09c73c74bc0db1ba8bbd1042818a1466dc971f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d78a4ee823d61f61738552b0928e99d74c4d9afd</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Handback file name: lo-mt_enum-statement.e37ffd107d9c430dc608a4023a38225b3042a21c.fr-fr is different with handoff file name: enum-statement.e37ffd107d9c430dc608a4023a38225b3042a21c.fr-fr.</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Enum Statement (Visual Basic) | Microsoft Docs</source>
          <target state="translated">Enum, instruction (Visual Basic) | Documents Microsoft</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Enum Statement (Visual Basic)</source>
          <target state="translated">Enum, instruction (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Declares an enumeration and defines the values of its members.</source>
          <target state="translated">Déclare une énumération et définit les valeurs de ses membres.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
          <target state="translated">Syntaxe</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parts</source>
          <target state="translated">Composants</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">Facultatif.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>List of attributes that apply to this enumeration.</source>
          <target state="translated">Liste des attributs qui s’appliquent à cette énumération.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You must enclose the <bpt id="p1">[</bpt>attribute list<ept id="p1">](../../../visual-basic/language-reference/statements/attribute-list.md)</ept> in angle brackets ("<ph id="ph1">`&lt;`</ph>" and "<ph id="ph2">`&gt;`</ph>").</source>
          <target state="translated">Vous devez placer le <bpt id="p1">[</bpt>liste d’attributs<ept id="p1">](../../../visual-basic/language-reference/statements/attribute-list.md)</ept> dans des crochets pointus («<ph id="ph1">`&lt;`</ph>« et »<ph id="ph2">`&gt;`</ph>»).</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.FlagsAttribute&gt; attribute indicates that the value of an instance of the enumeration can include multiple enumeration members, and that each member represents a bit field in the enumeration value.</source>
          <target state="translated">Le &lt;xref:System.FlagsAttribute&gt;attribut indique que la valeur d’une instance de l’énumération peut inclure plusieurs membres d’énumération, et que chaque membre représente un champ de bits dans la valeur d’énumération.&lt;/xref:System.FlagsAttribute&gt;</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">Facultatif.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Specifies what code can access this enumeration.</source>
          <target state="translated">Spécifie le code pouvant accéder à cette énumération.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Can be one of the following:</source>
          <target state="translated">Il peut s'agir d'une des valeurs suivantes :</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Public<ept id="p1">](../../../visual-basic/language-reference/modifiers/public.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Public<ept id="p1">](../../../visual-basic/language-reference/modifiers/public.md)</ept></target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Protected<ept id="p1">](../../../visual-basic/language-reference/modifiers/protected.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Protected<ept id="p1">](../../../visual-basic/language-reference/modifiers/protected.md)</ept></target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Friend<ept id="p1">](../../../visual-basic/language-reference/modifiers/friend.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Friend<ept id="p1">](../../../visual-basic/language-reference/modifiers/friend.md)</ept></target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Private<ept id="p1">](../../../visual-basic/language-reference/modifiers/private.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Private<ept id="p1">](../../../visual-basic/language-reference/modifiers/private.md)</ept></target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You can specify <ph id="ph1">`Protected``Friend`</ph> to allow access from code within the enumeration's class, a derived class, or the same assembly.</source>
          <target state="translated">Vous pouvez spécifier <ph id="ph1">`Protected``Friend`</ph> pour autoriser l’accès à partir de code dans la classe de l’énumération, une classe dérivée ou le même assembly.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">Facultatif.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Specifies that this enumeration redeclares and hides an identically named programming element, or set of overloaded elements, in a base class.</source>
          <target state="translated">Spécifie que cette énumération redéclare et masque un élément de programmation portant le même nom ou un ensemble d’éléments surchargés, dans une classe de base.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You can specify <bpt id="p1">[</bpt>Shadows<ept id="p1">](../../../visual-basic/language-reference/modifiers/shadows.md)</ept> only on the enumeration itself, not on any of its members.</source>
          <target state="translated">Vous pouvez spécifier <bpt id="p1">[</bpt>ombres<ept id="p1">](../../../visual-basic/language-reference/modifiers/shadows.md)</ept> uniquement sur l’énumération elle-même, et non sur un de ses membres.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Required.</source>
          <target state="translated">Obligatoire.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Name of the enumeration.</source>
          <target state="translated">Nom de l’énumération.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For information on valid names, see <bpt id="p1">[</bpt>Declared Element Names<ept id="p1">](../../../visual-basic/programming-guide/language-features/declared-elements/declared-element-names.md)</ept>.</source>
          <target state="translated">Pour plus d’informations sur les noms valides, consultez la page <bpt id="p1">[</bpt>noms d’éléments déclarés<ept id="p1">](../../../visual-basic/programming-guide/language-features/declared-elements/declared-element-names.md)</ept>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">Facultatif.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Data type of the enumeration and all its members.</source>
          <target state="translated">Type de données de l’énumération et tous ses membres.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Required.</source>
          <target state="translated">Obligatoire.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>List of member constants being declared in this statement.</source>
          <target state="translated">Liste des constantes membres déclarées dans cette instruction.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Multiple members appear on individual source code lines.</source>
          <target state="translated">Plusieurs membres apparaissent sur les lignes de code source individuel.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Each <ph id="ph1">`member`</ph> has the following syntax and parts: <ph id="ph2">`[&lt;attribute list&gt;] member name [ = initializer ]`</ph></source>
          <target state="translated">Chaque <ph id="ph1">`member`</ph> possède la syntaxe et les éléments suivants :<ph id="ph2">`[&lt;attribute list&gt;] member name [ = initializer ]`</ph></target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Part</source>
          <target state="translated">Élément</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Description</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Required.</source>
          <target state="translated">Obligatoire.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Name of this member.</source>
          <target state="translated">Nom de ce membre.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">Facultatif.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Expression that is evaluated at compile time and assigned to this member.</source>
          <target state="translated">Expression qui est évaluée au moment de la compilation et assignée à ce membre.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`End`</ph> <ph id="ph2">`Enum`</ph></source>
          <target state="translated"><ph id="ph1">`End`</ph> <ph id="ph2">`Enum`</ph></target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Terminates the <ph id="ph1">`Enum`</ph> block.</source>
          <target state="translated">Met fin au bloc <ph id="ph1">`Enum`</ph>.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Remarks</source>
          <target state="translated">Notes</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If you have a set of unchanging values that are logically related to each other, you can define them together in an enumeration.</source>
          <target state="translated">Si vous avez un ensemble de valeurs immuables qui sont logiquement liés entre eux, vous pouvez les définir ensemble dans une énumération.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This provides meaningful names for the enumeration and its members, which are easier to remember than their values.</source>
          <target state="translated">Cela fournit des noms explicites pour l’énumération et ses membres, qui sont plus faciles à mémoriser que leurs valeurs.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>You can then use the enumeration members in many places in your code.</source>
          <target state="translated">Vous pouvez ensuite utiliser les membres d’énumération dans de nombreux endroits dans votre code.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The benefits of using enumerations include the following:</source>
          <target state="translated">Les avantages de l’utilisation d’énumérations sont les suivantes :</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Reduces errors caused by transposing or mistyping numbers.</source>
          <target state="translated">Réduit les erreurs dues à la transposition ou entrée incorrecte de nombres.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Makes it easy to change values in the future.</source>
          <target state="translated">Rend plus facile à modifier les valeurs dans le futur.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Makes code easier to read, which means it is less likely that errors will be introduced.</source>
          <target state="translated">Rend le code plus facile à lire, ce qui signifie qu’il est peu probable que les erreurs seront introduites.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Ensures forward compatibility.</source>
          <target state="translated">Garantit la compatibilité ascendante.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>If you use enumerations, your code is less likely to fail if in the future someone changes the values corresponding to the member names.</source>
          <target state="translated">Si vous utilisez des énumérations, votre code est moins susceptible d’échouer si l’avenir quelqu'un modifie les valeurs correspondant aux noms de membres.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>An enumeration has a name, an underlying data type, and a set of members.</source>
          <target state="translated">Une énumération a un nom, un type de données sous-jacent et un jeu de membres.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Each member represents a constant.</source>
          <target state="translated">Chaque membre représente une constante.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>An enumeration declared at class, structure, module, or interface level, outside any procedure, is a <bpt id="p1">*</bpt>member enumeration<ept id="p1">*</ept>.</source>
          <target state="translated">Une énumération déclarée au niveau de la classe, structure, module ou niveau de l’interface, en dehors de toute procédure, est une <bpt id="p1">*</bpt>énumération membre<ept id="p1">*</ept>.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>It is a member of the class, structure, module, or interface that declares it.</source>
          <target state="translated">Il est membre de la classe, une structure, un module ou une interface qui la déclare.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Member enumerations can be accessed from anywhere within their class, structure, module, or interface.</source>
          <target state="translated">Les énumérations de membres sont accessibles à partir de n’importe où au sein de leur classe, une structure, un module ou une interface.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Code outside a class, structure, or module must qualify a member enumeration's name with the name of that class, structure, or module.</source>
          <target state="translated">Code à l’extérieur d’une classe, structure ou module doit qualifier le nom d’une énumération de membre avec le nom de cette classe, une structure ou un module.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>You can avoid the need to use fully qualified names by adding an <bpt id="p1">[</bpt>Imports<ept id="p1">](../../../visual-basic/language-reference/statements/imports-statement-net-namespace-and-type.md)</ept> statement to the source file.</source>
          <target state="translated">Vous pouvez éviter la nécessité d’utiliser des noms qualifiés complets en ajoutant une <bpt id="p1">[</bpt>importations<ept id="p1">](../../../visual-basic/language-reference/statements/imports-statement-net-namespace-and-type.md)</ept> instruction dans le fichier source.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>An enumeration declared at namespace level, outside any class, structure, module, or interface, is a member of the namespace in which it appears.</source>
          <target state="translated">Une énumération déclarée au niveau de l’espace de noms, en dehors de toute classe, une structure, un module ou une interface, est un membre de l’espace de noms dans lequel il apparaît.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>declaration context<ept id="p1">*</ept> for an enumeration must be a source file, namespace, class, structure, module, or interface, and cannot be a procedure.</source>
          <target state="translated">Le <bpt id="p1">*</bpt>contexte de déclaration<ept id="p1">*</ept> pour une énumération doit être un fichier source, espace de noms, classe, structure, module ou interface et ne peut pas être une procédure.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Declaration Contexts and Default Access Levels<ept id="p1">](../../../visual-basic/language-reference/statements/declaration-contexts-and-default-access-levels.md)</ept>.</source>
          <target state="translated">Pour plus d’informations, consultez <bpt id="p1">[</bpt>contextes de déclaration et niveaux d’accès par défaut<ept id="p1">](../../../visual-basic/language-reference/statements/declaration-contexts-and-default-access-levels.md)</ept>.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>You can apply attributes to an enumeration as a whole, but not to its members individually.</source>
          <target state="translated">Vous pouvez appliquer des attributs à une énumération dans son ensemble, mais pas à ses membres individuellement.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>An attribute contributes information to the assembly's metadata.</source>
          <target state="translated">Un attribut fournit des informations aux métadonnées de l’assembly.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Data Type</source>
          <target state="translated">Type de données</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Enum`</ph> statement can declare the data type of an enumeration.</source>
          <target state="translated">La <ph id="ph1">`Enum`</ph> instruction peut déclarer le type de données d’une énumération.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Each member takes the enumeration's data type.</source>
          <target state="translated">Chaque membre prend le type de données de l’énumération.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>You can specify <ph id="ph1">`Byte`</ph>, <ph id="ph2">`Integer`</ph>, <ph id="ph3">`Long`</ph>, <ph id="ph4">`SByte`</ph>, <ph id="ph5">`Short`</ph>, <ph id="ph6">`UInteger`</ph>, <ph id="ph7">`ULong`</ph>, or <ph id="ph8">`UShort`</ph>.</source>
          <target state="translated">You can specify <ph id="ph1">`Byte`</ph>, <ph id="ph2">`Integer`</ph>, <ph id="ph3">`Long`</ph>, <ph id="ph4">`SByte`</ph>, <ph id="ph5">`Short`</ph>, <ph id="ph6">`UInteger`</ph>, <ph id="ph7">`ULong`</ph>, or <ph id="ph8">`UShort`</ph>.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>If you do not specify <ph id="ph1">`datatype`</ph> for the enumeration, each member takes the data type of its <ph id="ph2">`initializer`</ph>.</source>
          <target state="translated">Si vous ne spécifiez pas <ph id="ph1">`datatype`</ph> pour l’énumération, chaque membre prend le type de données de ses <ph id="ph2">`initializer`</ph>.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>If you specify both <ph id="ph1">`datatype`</ph> and <ph id="ph2">`initializer`</ph>, the data type of <ph id="ph3">`initializer`</ph> must be convertible to <ph id="ph4">`datatype`</ph>.</source>
          <target state="translated">Si vous spécifiez les deux <ph id="ph1">`datatype`</ph> et <ph id="ph2">`initializer`</ph>, type de données de <ph id="ph3">`initializer`</ph> doit être convertible en <ph id="ph4">`datatype`</ph>.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>If neither <ph id="ph1">`datatype`</ph> nor <ph id="ph2">`initializer`</ph> is present, the data type defaults to <ph id="ph3">`Integer`</ph>.</source>
          <target state="translated">Si ni <ph id="ph1">`datatype`</ph> ni <ph id="ph2">`initializer`</ph> est présent, le type de données par défaut, <ph id="ph3">`Integer`</ph>.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Initializing Members</source>
          <target state="translated">Initialisation des membres</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Enum`</ph> statement can initialize the contents of selected members in <ph id="ph2">`memberlist`</ph>.</source>
          <target state="translated">Le <ph id="ph1">`Enum`</ph> instruction peut initialiser le contenu de membres sélectionnés dans <ph id="ph2">`memberlist`</ph>.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>You use <ph id="ph1">`initializer`</ph> to supply an expression to be assigned to the member.</source>
          <target state="translated">Vous utilisez <ph id="ph1">`initializer`</ph> pour fournir une expression à assigner au membre.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>If you do not specify <ph id="ph1">`initializer`</ph> for a member, Visual Basic initializes it either to zero (if it is the first <ph id="ph2">`member`</ph> in <ph id="ph3">`memberlist`</ph>), or to a value greater by one than that of the immediately preceding <ph id="ph4">`member`</ph>.</source>
          <target state="translated">Si vous ne spécifiez pas <ph id="ph1">`initializer`</ph> d’un membre, Visual Basic l’initialise soit à zéro (s’il s’agit de la première <ph id="ph2">`member`</ph> dans <ph id="ph3">`memberlist`</ph>), ou une valeur supérieure d’une unité à celle de la précédant <ph id="ph4">`member`</ph>.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The expression supplied in each <ph id="ph1">`initializer`</ph> can be any combination of literals, other constants that are already defined, and enumeration members that are already defined, including a previous member of this enumeration.</source>
          <target state="translated">L’expression fournie dans chaque <ph id="ph1">`initializer`</ph> peut être n’importe quelle combinaison de littéraux, d’autres constantes qui sont déjà définies et de membres de l’énumération qui sont déjà définies, y compris un membre précédent de cette énumération.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>You can use arithmetic and logical operators to combine such elements.</source>
          <target state="translated">Vous pouvez utiliser des opérateurs arithmétiques et logiques pour combiner ces éléments.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>You cannot use variables or functions in <ph id="ph1">`initializer`</ph>.</source>
          <target state="translated">Vous ne pouvez pas utiliser de variables ni fonctions dans <ph id="ph1">`initializer`</ph>.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>However, you can use conversion keywords such as <ph id="ph1">`CByte`</ph> and <ph id="ph2">`CShort`</ph>.</source>
          <target state="translated">Toutefois, vous pouvez utiliser des mots clés de conversion tels que <ph id="ph1">`CByte`</ph> et <ph id="ph2">`CShort`</ph>.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>You can also use <ph id="ph1">`AscW`</ph> if you call it with a constant <ph id="ph2">`String`</ph> or <ph id="ph3">`Char`</ph> argument, since that can be evaluated at compile time.</source>
          <target state="translated">Vous pouvez également utiliser <ph id="ph1">`AscW`</ph> si vous l’appelez avec une constante <ph id="ph2">`String`</ph> ou <ph id="ph3">`Char`</ph> argument, étant donné que qui peut être évaluée au moment de la compilation.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Enumerations cannot have floating-point values.</source>
          <target state="translated">Les énumérations ne peut pas avoir de valeurs à virgule flottante.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>If a member is assigned a floating-point value and <ph id="ph1">`Option Strict`</ph> is set to on, a compiler error occurs.</source>
          <target state="translated">Si un membre est attribué une valeur à virgule flottante et <ph id="ph1">`Option Strict`</ph> a la valeur on, une erreur de compilation se produit.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Option Strict`</ph> is off, the value is automatically converted to the <ph id="ph2">`Enum`</ph> type.</source>
          <target state="translated">Si <ph id="ph1">`Option Strict`</ph> est désactivé, la valeur est automatiquement convertie en la <ph id="ph2">`Enum`</ph> type.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>If the value of a member exceeds the allowable range for the underlying data type, or if you initialize any member to the maximum value allowed by the underlying data type, the compiler reports an error.</source>
          <target state="translated">Si la valeur d’un membre dépasse la plage autorisée pour le type de données sous-jacent, ou si vous initialisez un membre à la valeur maximale autorisée par le type de données sous-jacent, le compilateur signale une erreur.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Modifiers</source>
          <target state="translated">Modificateurs</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Class, structure, module, and interface member enumerations default to public access.</source>
          <target state="translated">Classe, structure, module et interface membres énumérations par défaut d’un accès public.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>You can adjust their access levels with the access modifiers.</source>
          <target state="translated">Vous pouvez régler leurs niveaux d’accès avec les modificateurs d’accès.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Namespace member enumerations default to friend access.</source>
          <target state="translated">Namespace membre énumérations par défaut d’un accès ami.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>You can adjust their access levels to public, but not to private or protected.</source>
          <target state="translated">Vous pouvez régler leurs niveaux d’accès public, mais pas en privé ou protégé.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Access Levels in Visual Basic<ept id="p1">](../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md)</ept>.</source>
          <target state="translated">Pour plus d’informations, consultez <bpt id="p1">[</bpt>niveaux d’accès dans Visual Basic<ept id="p1">](../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md)</ept>.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>All enumeration members have public access, and you cannot use any access modifiers on them.</source>
          <target state="translated">Tous les membres d’énumération ont un accès public, et vous ne pouvez pas utiliser les modificateurs d’accès sur ces derniers.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>However, if the enumeration itself has a more restricted access level, the specified enumeration access level takes precedence.</source>
          <target state="translated">Toutefois, si l’énumération proprement dite possède un niveau d’accès plus restreint, le niveau d’accès spécifié (énumération) est prioritaire.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>By default, all enumerations are types and their fields are constants.</source>
          <target state="translated">Par défaut, toutes les énumérations sont des types et leurs champs sont des constantes.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Therefore the <ph id="ph1">`Shared`</ph>, <ph id="ph2">`Static`</ph>, and <ph id="ph3">`ReadOnly`</ph> keywords cannot be used when declaring an enumeration or its members.</source>
          <target state="translated">Par conséquent, le <ph id="ph1">`Shared`</ph>, <ph id="ph2">`Static`</ph>, et <ph id="ph3">`ReadOnly`</ph> mots clés ne peuvent pas être utilisés lors de la déclaration d’une énumération ou ses membres.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Assigning Multiple Values</source>
          <target state="translated">Attribution de plusieurs valeurs</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Enumerations typically represent mutually exclusive values.</source>
          <target state="translated">Énumérations représentent généralement les valeurs qui s’excluent mutuellement.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>By including the &lt;xref:System.FlagsAttribute&gt; attribute in the <ph id="ph1">`Enum`</ph> declaration, you can instead assign multiple values to an instance of the enumeration.</source>
          <target state="translated">En incluant la &lt;xref:System.FlagsAttribute&gt;l’attribut dans le <ph id="ph1">`Enum`</ph> déclaration, vous pouvez à la place attribuer plusieurs valeurs à une instance de l’énumération.&lt;/xref:System.FlagsAttribute&gt;</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.FlagsAttribute&gt; attribute specifies that the enumeration be treated as a bit field, that is, a set of flags.</source>
          <target state="translated">Le &lt;xref:System.FlagsAttribute&gt;attribut spécifie que l’énumération considérée comme un champ de bits, c'est-à-dire un ensemble d’indicateurs.&lt;/xref:System.FlagsAttribute&gt;</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>These are called <bpt id="p1">*</bpt>bitwise<ept id="p1">*</ept> enumerations.</source>
          <target state="translated">Il s’agit de <bpt id="p1">*</bpt>au niveau du bit<ept id="p1">*</ept> énumérations.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>When you declare an enumeration by using the &lt;xref:System.FlagsAttribute&gt; attribute, we recommend that you use powers of 2, that is, 1, 2, 4, 8, 16, and so on, for the values.</source>
          <target state="translated">Lorsque vous déclarez une énumération à l’aide de la &lt;xref:System.FlagsAttribute&gt;attribut, nous vous recommandons d’utiliser les puissances de 2, qui est, 1, 2, 4, 8, 16 et ainsi de suite, pour les valeurs.&lt;/xref:System.FlagsAttribute&gt;</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>We also recommend that "None" be the name of a member whose value is 0.</source>
          <target state="translated">Nous vous recommandons également de « None » soit le nom d’un membre dont la valeur est 0.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>For additional guidelines, see &lt;xref:System.FlagsAttribute&gt; and &lt;xref:System.Enum&gt;.</source>
          <target state="translated">Pour obtenir des instructions supplémentaires, consultez la page &lt;xref:System.FlagsAttribute&gt;et &lt;xref:System.Enum&gt;.&lt;/xref:System.Enum&gt; &lt;/xref:System.FlagsAttribute&gt;</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Exemple</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The following example shows how to use the <ph id="ph1">`Enum`</ph> statement.</source>
          <target state="translated">L’exemple suivant montre comment utiliser la <ph id="ph1">`Enum`</ph> instruction.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Note that the member is referred to as <ph id="ph1">`EggSizeEnum.Medium`</ph>, and not as <ph id="ph2">`Medium`</ph>.</source>
          <target state="translated">Notez que le membre est appelé <ph id="ph1">`EggSizeEnum.Medium`</ph>et non comme <ph id="ph2">`Medium`</ph>.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbEnumsTask#41<ept id="p2">](../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/enum-statement_1.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt># VbEnumsTask&amp;41;<ept id="p2">](../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/enum-statement_1.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Exemple</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The method in the following example is outside the <ph id="ph1">`Egg`</ph> class.</source>
          <target state="translated">La méthode dans l’exemple suivant est en dehors de la <ph id="ph1">`Egg`</ph> classe.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Therefore, <ph id="ph1">`EggSizeEnum`</ph> is fully qualified as <ph id="ph2">`Egg.EggSizeEnum`</ph>.</source>
          <target state="translated">Par conséquent, <ph id="ph1">`EggSizeEnum`</ph> est le nom complet en tant que <ph id="ph2">`Egg.EggSizeEnum`</ph>.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbEnumsTask#42<ept id="p2">](../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/enum-statement_2.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbEnumsTask&amp;#42;<ept id="p2">](../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/enum-statement_2.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Exemple</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The following example uses the <ph id="ph1">`Enum`</ph> statement to define a related set of named constant values.</source>
          <target state="translated">L’exemple suivant utilise la <ph id="ph1">`Enum`</ph> instruction pour définir un ensemble des valeurs des constantes nommées.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>In this case, the values are colors you might choose to design data entry forms for a database.</source>
          <target state="translated">Dans ce cas, les valeurs sont des couleurs que vous pouvez choisir de concevoir des formulaires de saisie de données pour une base de données.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbEnumsTask#30<ept id="p2">](../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/enum-statement_3.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>30 VbEnumsTask<ept id="p2">](../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/enum-statement_3.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Exemple</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The following example shows values that include both positive and negative numbers.</source>
          <target state="translated">L’exemple suivant montre les valeurs qui incluent des nombres positifs et négatifs.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbEnumsTask#31<ept id="p2">](../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/enum-statement_4.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbEnumsTask&amp;#31;<ept id="p2">](../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/enum-statement_4.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Exemple</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>In the following example, an <ph id="ph1">`As`</ph> clause is used to specify the <ph id="ph2">`datatype`</ph> of an enumeration.</source>
          <target state="translated">Dans l’exemple suivant, un <ph id="ph1">`As`</ph> clause est utilisée pour spécifier le <ph id="ph2">`datatype`</ph> d’une énumération.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbEnumsTask#6<ept id="p2">](../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/enum-statement_5.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbEnumsTask n °&amp;6;<ept id="p2">](../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/enum-statement_5.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Exemple</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The following example shows how to use a bitwise enumeration.</source>
          <target state="translated">L’exemple suivant montre comment utiliser une énumération au niveau du bit.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Multiple values can be assigned to an instance of a bitwise enumeration.</source>
          <target state="translated">Plusieurs valeurs peuvent être assignées à une instance d’une énumération au niveau du bit.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Enum`</ph> declaration includes the &lt;xref:System.FlagsAttribute&gt; attribute, which indicates that the enumeration can be treated as a set of flags.</source>
          <target state="translated">Le <ph id="ph1">`Enum`</ph> déclaration comprend le &lt;xref:System.FlagsAttribute&gt;attribut qui indique que l’énumération peut être traitée comme un ensemble d’indicateurs.&lt;/xref:System.FlagsAttribute&gt;</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbEnumsTask#61<ept id="p2">](../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/enum-statement_6.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbEnumsTask&amp;#61;<ept id="p2">](../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/enum-statement_6.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Exemple</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The following example iterates through an enumeration.</source>
          <target state="translated">L’exemple suivant itère une énumération.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>It uses the &lt;xref:System.Enum.GetNames%2A&gt; method to retrieve an array of member names from the enumeration, and &lt;xref:System.Enum.GetValues%2A&gt; to retrieve an array of member values.</source>
          <target state="translated">Il utilise le &lt;xref:System.Enum.GetNames%2A&gt;méthode pour récupérer un tableau des noms de membres de l’énumération, et &lt;xref:System.Enum.GetValues%2A&gt;pour récupérer un tableau de valeurs de membre.&lt;/xref:System.Enum.GetValues%2A&gt; &lt;/xref:System.Enum.GetNames%2A&gt;</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbEnumsTask#51<ept id="p2">](../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/enum-statement_7.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbEnumsTask&amp;#51;<ept id="p2">](../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/enum-statement_7.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">Voir aussi</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Enum&gt;</source>
          <target state="translated">&lt;xref:System.Enum&gt;&lt;/xref:System.Enum&gt;</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>&lt;xref:Microsoft.VisualBasic.Strings.AscW%2A&gt;</source>
          <target state="translated">&lt;xref:Microsoft.VisualBasic.Strings.AscW%2A&gt;&lt;/xref:Microsoft.VisualBasic.Strings.AscW%2A&gt;</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Const Statement<ept id="p1">](../../../visual-basic/language-reference/statements/const-statement.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Const (instruction)<ept id="p1">](../../../visual-basic/language-reference/statements/const-statement.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Dim Statement<ept id="p1">](../../../visual-basic/language-reference/statements/dim-statement.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Dim (instruction)<ept id="p1">](../../../visual-basic/language-reference/statements/dim-statement.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Implicit and Explicit Conversions<ept id="p1">](../../../visual-basic/programming-guide/language-features/data-types/implicit-and-explicit-conversions.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Conversions implicites et explicites<ept id="p1">](../../../visual-basic/programming-guide/language-features/data-types/implicit-and-explicit-conversions.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Type Conversion Functions<ept id="p1">](../../../visual-basic/language-reference/functions/type-conversion-functions.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Fonctions de Conversion de type<ept id="p1">](../../../visual-basic/language-reference/functions/type-conversion-functions.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Constants and Enumerations<ept id="p1">](../../../visual-basic/language-reference/constants-and-enumerations.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>Constantes et énumérations<ept id="p1">](../../../visual-basic/language-reference/constants-and-enumerations.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>