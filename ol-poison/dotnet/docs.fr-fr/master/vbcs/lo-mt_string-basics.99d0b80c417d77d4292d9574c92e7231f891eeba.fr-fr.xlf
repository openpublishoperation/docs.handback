<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a9475c57f01c78fd5c4e2d2674f22f18ad4772e5</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\strings\string-basics.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a7f9e9b14c109329d815d4f52387e301b5df2f99</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7c5e67119ef701c76351df357251a868600c4647</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Handback file name: lo-mt_string-basics.99d0b80c417d77d4292d9574c92e7231f891eeba.fr-fr is different with handoff file name: string-basics.99d0b80c417d77d4292d9574c92e7231f891eeba.fr-fr.</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>String Basics in Visual Basic | Microsoft Docs</source>
          <target state="translated">Notions de base dans Visual Basic de chaîne | Documents Microsoft</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>String Basics in Visual Basic</source>
          <target state="translated">Concepts de base des chaînes en Visual Basic</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`String`</ph> data type represents a series of characters (each representing in turn an instance of the <ph id="ph2">`Char`</ph> data type).</source>
          <target state="translated">Le type de données <ph id="ph1">`String`</ph> représente une série de caractères (chacun représentant à son tour une instance du type de données <ph id="ph2">`Char`</ph>).</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This topic introduces the basic concepts of strings in <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>.</source>
          <target state="translated">Cette rubrique présente les concepts de base des chaînes en <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>String Variables</source>
          <target state="translated">Variables de chaîne</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>An instance of a string can be assigned a literal value that represents a series of characters.</source>
          <target state="translated">Il est possible d'assigner à une instance de chaîne une valeur littérale représentant une série de caractères.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">Exemple :</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStrings#63<ept id="p2">](../../../../visual-basic/language-reference/functions/codesnippet/VisualBasic/string-basics_1.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStrings&amp;#63;<ept id="p2">](../../../../visual-basic/language-reference/functions/codesnippet/VisualBasic/string-basics_1.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`String`</ph> variable can also accept any expression that evaluates to a string.</source>
          <target state="translated">Une variable <ph id="ph1">`String`</ph> peut également accepter une expression quelconque qui prend la valeur d'une chaîne.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Examples are shown below:</source>
          <target state="translated">En voici quelques exemples :</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStrings#64<ept id="p2">](../../../../visual-basic/language-reference/functions/codesnippet/VisualBasic/string-basics_2.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStrings&amp;#64;<ept id="p2">](../../../../visual-basic/language-reference/functions/codesnippet/VisualBasic/string-basics_2.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Any literal that is assigned to a <ph id="ph1">`String`</ph> variable must be enclosed in quotation marks ("").</source>
          <target state="translated">Tout littéral assigné à une variable <ph id="ph1">`String`</ph> doit être placé entre guillemets ("").</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This means that a quotation mark within a string cannot be represented by a quotation mark.</source>
          <target state="translated">Cela signifie que des guillemets dans une chaîne ne peuvent pas être représentés par des guillemets.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For example, the following code causes a compiler error:</source>
          <target state="translated">Par exemple, le code suivant génère une erreur du compilateur :</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStrings#65<ept id="p2">](../../../../visual-basic/language-reference/functions/codesnippet/VisualBasic/string-basics_3.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStrings&amp;#65;<ept id="p2">](../../../../visual-basic/language-reference/functions/codesnippet/VisualBasic/string-basics_3.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This code causes an error because the compiler terminates the string after the second quotation mark, and the remainder of the string is interpreted as code.</source>
          <target state="translated">Ce code entraîne une erreur car le compilateur arrête la chaîne après les deuxièmes guillemets, et le reste de la chaîne est interprété comme du code.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>To solve this problem, <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> interprets two quotation marks in a string literal as one quotation mark in the string.</source>
          <target state="translated">Pour résoudre ce problème, <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> interprète deux guillemets dans un littéral de chaîne comme des guillemets simples dans la chaîne.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The following example demonstrates the correct way to include a quotation mark in a string:</source>
          <target state="translated">L'exemple suivant illustre comment inclure correctement des guillemets dans une chaîne :</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStrings#66<ept id="p2">](../../../../visual-basic/language-reference/functions/codesnippet/VisualBasic/string-basics_4.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStrings&amp;#66;<ept id="p2">](../../../../visual-basic/language-reference/functions/codesnippet/VisualBasic/string-basics_4.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In the preceding example, the two quotation marks preceding the word <ph id="ph1">`Look`</ph> become one quotation mark in the string.</source>
          <target state="translated">Dans l'exemple précédent, les deux guillemets qui précèdent le mot <ph id="ph1">`Look`</ph> deviennent des guillemets simples dans la chaîne.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The three quotation marks at the end of the line represent one quotation mark in the string and the string termination character.</source>
          <target state="translated">Les trois guillemets à la fin de la ligne correspondent aux guillemets simples dans la chaîne et au caractère de fin de chaîne.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>String literals can contain multiple lines:</source>
          <target state="translated">Les littéraux de chaîne peuvent contenir plusieurs lignes :</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The resulting string contains newline sequences that you used in your string literal (vbcr, vbcrlf, etc.).</source>
          <target state="translated">La chaîne obtenue contient les séquences de saut de ligne que vous utilisiez dans votre littéral de chaîne (vbcr, vbcrlf, etc.).</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>You no longer need to use the old workaround:</source>
          <target state="translated">Vous n'avez plus besoin d'utiliser l'ancienne solution de contournement :</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Characters in Strings</source>
          <target state="translated">Caractères dans des chaînes</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>A string can be thought of as a series of <ph id="ph1">`Char`</ph> values, and the <ph id="ph2">`String`</ph> type has built-in functions that allow you to perform many manipulations on a string that resemble the manipulations allowed by arrays.</source>
          <target state="translated">Une chaîne peut être considérée comme une série de valeurs <ph id="ph1">`Char`</ph> et le type <ph id="ph2">`String`</ph> possède des fonctions intégrées qui vous permettent d'exécuter de nombreuses manipulations sur une chaîne qui ressemblent aux manipulations autorisées par les tableaux.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Like all array in <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph>, these are zero-based arrays.</source>
          <target state="translated">Comme tous les tableaux dans le <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph>, ce sont des tableaux de base zéro.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You may refer to a specific character in a string through the <ph id="ph1">`Chars`</ph> property, which provides a way to access a character by the position in which it appears in the string.</source>
          <target state="translated">Vous pouvez vous référer à un caractère spécifique dans une chaîne via la propriété <ph id="ph1">`Chars`</ph>, ce qui permet d'accéder à un caractère à la position où il apparaît dans la chaîne.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">Exemple :</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStrings#67<ept id="p2">](../../../../visual-basic/language-reference/functions/codesnippet/VisualBasic/string-basics_5.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStrings&amp;#67;<ept id="p2">](../../../../visual-basic/language-reference/functions/codesnippet/VisualBasic/string-basics_5.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In the above example, the <ph id="ph1">`Chars`</ph> property of the string returns the fourth character in the string, which is <ph id="ph2">`D`</ph>, and assigns it to <ph id="ph3">`myChar`</ph>.</source>
          <target state="translated">Dans l'exemple ci-dessus, la propriété <ph id="ph1">`Chars`</ph> de la chaîne retourne le quatrième caractère de la chaîne, qui est <ph id="ph2">`D`</ph>, et l'assigne à <ph id="ph3">`myChar`</ph>.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You can also get the length of a particular string through the <ph id="ph1">`Length`</ph> property.</source>
          <target state="translated">Vous pouvez également obtenir la longueur d'une chaîne particulière via la propriété <ph id="ph1">`Length`</ph>.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If you need to perform multiple array-type manipulations on a string, you can convert it to an array of <ph id="ph1">`Char`</ph> instances using the <ph id="ph2">`ToCharArray`</ph> function of the string.</source>
          <target state="translated">Si vous devez exécuter plusieurs manipulations de type tableau sur une chaîne, vous pouvez la convertir en tableau d'instances <ph id="ph1">`Char`</ph> à l'aide de la fonction <ph id="ph2">`ToCharArray`</ph> de la chaîne.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">Exemple :</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStrings#68<ept id="p2">](../../../../visual-basic/language-reference/functions/codesnippet/VisualBasic/string-basics_6.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStrings&amp;#68;<ept id="p2">](../../../../visual-basic/language-reference/functions/codesnippet/VisualBasic/string-basics_6.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The variable <ph id="ph1">`myArray`</ph> now contains an array of <ph id="ph2">`Char`</ph> values, each representing a character from <ph id="ph3">`myString`</ph>.</source>
          <target state="translated">La variable <ph id="ph1">`myArray`</ph> contient à présent un tableau de valeurs <ph id="ph2">`Char`</ph>, dont chacune représente un caractère issu de <ph id="ph3">`myString`</ph>.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The Immutability of Strings</source>
          <target state="translated">Immuabilité des chaînes</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>A string is <bpt id="p1">*</bpt>immutable<ept id="p1">*</ept>, which means its value cannot be changed once it has been created.</source>
          <target state="translated">Une chaîne est <bpt id="p1">*</bpt>immuable<ept id="p1">*</ept>, ce qui signifie que sa valeur ne peut pas être modifiée une fois qu’il a été créé.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>However, this does not prevent you from assigning more than one value to a string variable.</source>
          <target state="translated">Toutefois, cela ne vous empêche pas d'assigner plusieurs valeurs à une variable de chaîne.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Consider the following example:</source>
          <target state="translated">Prenons l'exemple suivant :</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStrings#69<ept id="p2">](../../../../visual-basic/language-reference/functions/codesnippet/VisualBasic/string-basics_7.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStrings&amp;#69;<ept id="p2">](../../../../visual-basic/language-reference/functions/codesnippet/VisualBasic/string-basics_7.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Here, a string variable is created, given a value, and then its value is changed.</source>
          <target state="translated">Ici, une variable de chaîne est créée, une valeur lui est attribuée, puis sa valeur est modifiée.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>More specifically, in the first line, an instance of type <ph id="ph1">`String`</ph> is created and given the value <ph id="ph2">`This string is immutable`</ph>.</source>
          <target state="translated">Plus spécifiquement, dans la première ligne, une instance de type <ph id="ph1">`String`</ph> est créée et la valeur <ph id="ph2">`This string is immutable`</ph> lui est attribuée.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>In the second line of the example, a new instance is created and given the value <ph id="ph1">`Or is it?`</ph>, and the string variable discards its reference to the first instance and stores a reference to the new instance.</source>
          <target state="translated">Dans la seconde ligne de l'exemple, une nouvelle instance est créée et la valeur <ph id="ph1">`Or is it?`</ph> lui est attribuée. La variable de chaîne ignore sa référence à la première instance et stocke une référence à la nouvelle instance.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Unlike other intrinsic data types, <ph id="ph1">`String`</ph> is a reference type.</source>
          <target state="translated">Contrairement à d'autres types de données intrinsèques, <ph id="ph1">`String`</ph> est un type référence.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>When a variable of reference type is passed as an argument to a function or subroutine, a reference to the memory address where the data is stored is passed instead of the actual value of the string.</source>
          <target state="translated">Quand une variable de type référence est passée en tant qu'argument à une fonction ou à une sous-routine, une référence à l'adresse mémoire où sont stockées les données est passée à la place de la valeur réelle de la chaîne.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>So in the previous example, the name of the variable remains the same, but it points to a new and different instance of the <ph id="ph1">`String`</ph> class, which holds the new value.</source>
          <target state="translated">Ainsi, dans l'exemple précédent, le nom de la variable reste le même, mais il pointe vers une instance nouvelle et différente de la classe <ph id="ph1">`String`</ph>, qui contient la nouvelle valeur.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">Voir aussi</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Introduction to Strings in Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/language-features/strings/introduction-to-strings.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Introduction aux chaînes en Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/language-features/strings/introduction-to-strings.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>String Data Type<ept id="p1">](../../../../visual-basic/language-reference/data-types/string-data-type.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Type de données String<ept id="p1">](../../../../visual-basic/language-reference/data-types/string-data-type.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Char Data Type<ept id="p1">](../../../../visual-basic/language-reference/data-types/char-data-type.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Type de données char<ept id="p1">](../../../../visual-basic/language-reference/data-types/char-data-type.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Basic String Operations<ept id="p1">](http://msdn.microsoft.com/library/8133d357-90b5-4b62-9927-43323d99b6b6)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>Opérations de chaînes de base<ept id="p1">](http://msdn.microsoft.com/library/8133d357-90b5-4b62-9927-43323d99b6b6)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>