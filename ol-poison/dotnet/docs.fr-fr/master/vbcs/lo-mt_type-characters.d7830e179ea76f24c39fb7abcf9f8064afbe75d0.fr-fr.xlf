<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6e112e7d221ef8e7a660094306bbb242c988e843</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\data-types\type-characters.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">694c08f7a4a184a2ee1a75612e047963513d01c9</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">29fad93a9ca6f6f9fe35d50f35556acd0a9767ae</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Handback file name: lo-mt_type-characters.d7830e179ea76f24c39fb7abcf9f8064afbe75d0.fr-fr is different with handoff file name: type-characters.d7830e179ea76f24c39fb7abcf9f8064afbe75d0.fr-fr.</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Type Characters (Visual Basic) | Microsoft Docs</source>
          <target state="translated">Tapez les caractères (Visual Basic) | Documents Microsoft</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Type Characters (Visual Basic)</source>
          <target state="translated">Caractères de type (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>In addition to specifying a data type in a declaration statement, you can force the data type of some programming elements with a <bpt id="p1">*</bpt>type character<ept id="p1">*</ept>.</source>
          <target state="translated">En plus de spécifier un type de données dans une instruction de déclaration, vous pouvez forcer le type de données de certains éléments de programmation avec un <bpt id="p1">*</bpt>caractère de type<ept id="p1">*</ept>.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The type character must immediately follow the element, with no intervening characters of any kind.</source>
          <target state="translated">Le caractère de type doit suivre immédiatement l’élément, sans caractères concernés de n’importe quel type.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The type character is not part of the name of the element.</source>
          <target state="translated">Le caractère de type ne fait pas partie du nom de l’élément.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>An element defined with a type character can be referenced without the type character.</source>
          <target state="translated">Un élément défini avec un caractère de type peut être référencé sans caractère de type.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Identifier Type Characters</source>
          <target state="translated">Caractères de Type d’identificateur</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> supplies a set of <bpt id="p1">*</bpt>identifier type characters<ept id="p1">*</ept>, which you can use in a declaration to specify the data type of a variable or constant.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>fournit un jeu de <bpt id="p1">*</bpt>caractères de type d’identificateur<ept id="p1">*</ept>, que vous pouvez utiliser dans une déclaration pour spécifier le type de données d’une variable ou constante.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The following table shows the available identifier type characters with examples of usage.</source>
          <target state="translated">Le tableau suivant présente les caractères de type identificateur disponible avec des exemples d’utilisation.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Identifier type character</source>
          <target state="translated">Caractère de type d’identificateur</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Data type</source>
          <target state="translated">Type de données</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Exemple</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>No identifier type characters exist for the <ph id="ph1">`Boolean`</ph>, <ph id="ph2">`Byte`</ph>, <ph id="ph3">`Char`</ph>, <ph id="ph4">`Date`</ph>, <ph id="ph5">`Object`</ph>, <ph id="ph6">`SByte`</ph>, <ph id="ph7">`Short`</ph>, <ph id="ph8">`UInteger`</ph>, <ph id="ph9">`ULong`</ph>, or <ph id="ph10">`UShort`</ph> data types, or for any composite data types such as arrays or structures.</source>
          <target state="translated">Il n’existe aucun caractère de type identificateur pour le <ph id="ph1">`Boolean`</ph>, <ph id="ph2">`Byte`</ph>, <ph id="ph3">`Char`</ph>, <ph id="ph4">`Date`</ph>, <ph id="ph5">`Object`</ph>, <ph id="ph6">`SByte`</ph>, <ph id="ph7">`Short`</ph>, <ph id="ph8">`UInteger`</ph>, <ph id="ph9">`ULong`</ph>, ou <ph id="ph10">`UShort`</ph> des types de données, ni pour les types de données composites tels que les tableaux ou les structures.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In some cases, you can append the <ph id="ph1">`$`</ph> character to a <ph id="ph2">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> function, for example <ph id="ph3">`Left$`</ph> instead of <ph id="ph4">`Left`</ph>, to obtain a returned value of type <ph id="ph5">`String`</ph>.</source>
          <target state="translated">Dans certains cas, vous pouvez ajouter la <ph id="ph1">`$`</ph> à un <ph id="ph2">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> de fonction, par exemple <ph id="ph3">`Left$`</ph> au lieu de <ph id="ph4">`Left`</ph>, afin d’obtenir une valeur retournée de type <ph id="ph5">`String`</ph>.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In all cases, the identifier type character must immediately follow the identifier name.</source>
          <target state="translated">Dans tous les cas, le caractère de type identificateur doit suivre immédiatement le nom d’identificateur.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Literal Type Characters</source>
          <target state="translated">Caractères de Type littéral</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>literal<ept id="p1">*</ept> is a textual representation of a particular value of a data type.</source>
          <target state="translated">A <bpt id="p1">*</bpt>littéral<ept id="p1">*</ept> est une représentation textuelle d’une valeur particulière d’un type de données.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Default Literal Types</source>
          <target state="translated">Types de littéral par défaut</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The form of a literal as it appears in your code ordinarily determines its data type.</source>
          <target state="translated">La forme d’un littéral, tel qu’il apparaît dans votre code normalement détermine son type de données.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The following table shows these default types.</source>
          <target state="translated">Le tableau suivant présente les types par défaut.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Textual form of literal</source>
          <target state="translated">Forme textuelle de littéral</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Default data type</source>
          <target state="translated">Type de données par défaut</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Exemple</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Numeric, no fractional part</source>
          <target state="translated">Numérique, aucune partie fractionnaire</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Numeric, no fractional part, too large for <ph id="ph1">`Integer`</ph></source>
          <target state="translated">Numérique, aucune partie fractionnaire, trop grand pour<ph id="ph1">`Integer`</ph></target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Numeric, fractional part</source>
          <target state="translated">Numérique, partie fractionnaire</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Enclosed in double quotation marks</source>
          <target state="translated">Placé entre guillemets doubles</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Enclosed within number signs</source>
          <target state="translated">Compris entre signes dièse</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Forced Literal Types</source>
          <target state="translated">Types de littéral forcés</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> supplies a set of <bpt id="p1">*</bpt>literal type characters<ept id="p1">*</ept>, which you can use to force a literal to assume a data type other than the one its form indicates.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>fournit un jeu de <bpt id="p1">*</bpt>caractères de type littéral<ept id="p1">*</ept>, que vous pouvez utiliser pour forcer un littéral à prendre un type de données différent de celui de son formulaire indique.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You do this by appending the character to the end of the literal.</source>
          <target state="translated">Pour cela, en ajoutant le caractère à la fin du littéral.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The following table shows the available literal type characters with examples of usage.</source>
          <target state="translated">Le tableau suivant présente les caractères de type de littéral disponibles avec des exemples d’utilisation.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Literal type character</source>
          <target state="translated">Caractère de type littéral</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Data type</source>
          <target state="translated">Type de données</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Exemple</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>No literal type characters exist for the <ph id="ph1">`Boolean`</ph>, <ph id="ph2">`Byte`</ph>, <ph id="ph3">`Date`</ph>, <ph id="ph4">`Object`</ph>, <ph id="ph5">`SByte`</ph>, or <ph id="ph6">`String`</ph> data types, or for any composite data types such as arrays or structures.</source>
          <target state="translated">Il n’existe aucun caractère de type de littéral pour les <ph id="ph1">`Boolean`</ph>, <ph id="ph2">`Byte`</ph>, <ph id="ph3">`Date`</ph>, <ph id="ph4">`Object`</ph>, <ph id="ph5">`SByte`</ph>, ou <ph id="ph6">`String`</ph> des types de données, ni pour les types de données composites tels que les tableaux ou les structures.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Literals can also use the identifier type characters (<ph id="ph1">`%`</ph>, <ph id="ph2">`&amp;`</ph>, <ph id="ph3">`@`</ph>, <ph id="ph4">`!`</ph>, <ph id="ph5">`#`</ph>, <ph id="ph6">`$`</ph>), as can variables, constants, and expressions.</source>
          <target state="translated">Les littéraux peuvent également utiliser les caractères de type d’identificateur (<ph id="ph1">`%`</ph>, <ph id="ph2">`&amp;`</ph>, <ph id="ph3">`@`</ph>, <ph id="ph4">`!`</ph>, <ph id="ph5">`#`</ph>, <ph id="ph6">`$`</ph>), comme des variables, des constantes et des expressions.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>However, the literal type characters (<ph id="ph1">`S`</ph>, <ph id="ph2">`I`</ph>, <ph id="ph3">`L`</ph>, <ph id="ph4">`D`</ph>, <ph id="ph5">`F`</ph>, <ph id="ph6">`R`</ph>, <ph id="ph7">`C`</ph>) can be used only with literals.</source>
          <target state="translated">Toutefois, les caractères de type de littéral (<ph id="ph1">`S`</ph>, <ph id="ph2">`I`</ph>, <ph id="ph3">`L`</ph>, <ph id="ph4">`D`</ph>, <ph id="ph5">`F`</ph>, <ph id="ph6">`R`</ph>, <ph id="ph7">`C`</ph>) peut être utilisé uniquement avec des littéraux.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>In all cases, the literal type character must immediately follow the literal value.</source>
          <target state="translated">Dans tous les cas, le caractère de type de littéral doit suivre immédiatement la valeur littérale.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Hexadecimal and Octal Literals</source>
          <target state="translated">Littéraux hexadécimaux et octaux</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The compiler normally construes an integer literal to be in the decimal (base 10) number system.</source>
          <target state="translated">Le compilateur construes normalement un littéral d’entier dans le système décimal (base 10).</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>You can force an integer literal to be hexadecimal (base 16) with the <ph id="ph1">`&amp;H`</ph> prefix, and you can force it to be octal (base 8) with the <ph id="ph2">`&amp;O`</ph> prefix.</source>
          <target state="translated">Vous pouvez forcer un littéral entier à être hexadécimal (base 16) avec le <ph id="ph1">`&amp;H`</ph> préfixe et vous pouvez le forcer à être octal (base 8) avec le <ph id="ph2">`&amp;O`</ph> préfixe.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The digits that follow the prefix must be appropriate for the number system.</source>
          <target state="translated">Les chiffres qui suivent le préfixe doivent être appropriées pour le système.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The following table illustrates this.</source>
          <target state="translated">Le tableau suivant illustre ce comportement.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Number base</source>
          <target state="translated">Nombre de base</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Prefix</source>
          <target state="translated">Préfixe</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Valid digit values</source>
          <target state="translated">Valeurs de chiffre valide</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Exemple</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Hexadecimal (base 16)</source>
          <target state="translated">Hexadécimale (base 16)</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>0-9 and A-F</source>
          <target state="translated">0-9 et A-F</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Octal (base 8)</source>
          <target state="translated">Octale (base 8)</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>0-7</source>
          <target state="translated">0-7</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>You can follow a prefixed literal with a literal type character.</source>
          <target state="translated">Vous pouvez suivre un littéral préfixé avec un caractère de type littéral.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The following example shows this.</source>
          <target state="translated">L’exemple suivant illustre ce point.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>In the previous example, <ph id="ph1">`counter`</ph> has the decimal value of -32768, and <ph id="ph2">`flags`</ph> has the decimal value of +32768.</source>
          <target state="translated">Dans l’exemple précédent, <ph id="ph1">`counter`</ph> a la valeur décimale-32&amp;768; et <ph id="ph2">`flags`</ph> a la valeur décimale +&amp;32;&amp;768;.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">Voir aussi</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Data Types<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/index.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Types de données<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/index.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Elementary Data Types<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/elementary-data-types.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Types de données élémentaires<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/elementary-data-types.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Value Types and Reference Types<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Types valeur et Types référence<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Type Conversions in Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/type-conversions.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Conversions de type dans Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/type-conversions.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Troubleshooting Data Types<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/troubleshooting-data-types.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Dépannage des Types de données<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/troubleshooting-data-types.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Variable Declaration<ept id="p1">](../../../../visual-basic/programming-guide/language-features/variables/variable-declaration.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Déclaration de variable<ept id="p1">](../../../../visual-basic/programming-guide/language-features/variables/variable-declaration.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Data Types<ept id="p1">](../../../../visual-basic/language-reference/data-types/data-type-summary.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>Types de données<ept id="p1">](../../../../visual-basic/language-reference/data-types/data-type-summary.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>