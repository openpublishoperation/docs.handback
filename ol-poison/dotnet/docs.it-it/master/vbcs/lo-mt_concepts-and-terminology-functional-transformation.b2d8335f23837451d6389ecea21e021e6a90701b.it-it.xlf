<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9c4716765199798e50c4318b290f8a2d76ef5841</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\linq\concepts-and-terminology-functional-transformation.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cd5803ed9a248b4bd60fc7ea879f9c96c047ef0f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6b64e56314df8aae6ed63927c7cf91f69523f5db</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Handback file name: lo-mt_concepts-and-terminology-functional-transformation.b2d8335f23837451d6389ecea21e021e6a90701b.it-it is different with handoff file name: concepts-and-terminology-functional-transformation.b2d8335f23837451d6389ecea21e021e6a90701b.it-it.</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Concepts and Terminology (Functional Transformation) (Visual Basic) | Microsoft Docs</source>
          <target state="translated">Concetti e terminologia (trasformazione funzionale) (Visual Basic) | Documenti di Microsoft</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Concepts and Terminology (Functional Transformation) (Visual Basic)</source>
          <target state="translated">Concetti e terminologia (trasformazione funzionale) (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic introduces the concepts and terminology of pure functional transformations.</source>
          <target state="translated">In questo argomento vengono presentati i concetti e i termini associati alle trasformazioni funzionali pure.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The functional transformation approach to transforming data yields code that is often quicker to program, more expressive, and easier to debug and maintain than more traditional, imperative programming.</source>
          <target state="translated">La trasformazione funzionale dei dati consente di ottenere codice spesso più rapidamente programmabile, più espressivo e di cui è più facile eseguire il debug e la manutenzione rispetto alla più tradizionale programmazione imperativa.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Note that the topics in this section are not intended to fully explain functional programming.</source>
          <target state="translated">Si noti che gli argomenti di questa sezione non offrono una spiegazione dettagliata sulla programmazione funzionale,</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Instead, these topics identify some of the functional programming capabilities that make it easier to transform XML from one shape to another.</source>
          <target state="translated">ma indicano solo alcune delle funzionalità che semplificano la trasformazione del codice XML da una forma a un'altra.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>What Is Pure Functional Transformation?</source>
          <target state="translated">Informazioni sulla trasformazione funzionale pure</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">*</bpt>pure functional transformation<ept id="p1">*</ept>, a set of functions, called <bpt id="p2">*</bpt>pure functions<ept id="p2">*</ept>, define how to transform a set of structured data from its original form into another form.</source>
          <target state="translated">In <bpt id="p1">*</bpt>sulla trasformazione funzionale pure<ept id="p1">*</ept>, un set di funzioni, denominate <bpt id="p2">*</bpt>funzioni pure<ept id="p2">*</ept>, definire la modalità di trasformazione di un set di dati strutturati dal formato originale in un altro formato.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The word "pure" indicates that the functions are <bpt id="p1">*</bpt>composable<ept id="p1">*</ept>, which requires that they are:</source>
          <target state="translated">Il termine "pure" indica che le funzioni sono <bpt id="p1">*</bpt>componibile<ept id="p1">*</ept>, che richiede che siano:</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Self-contained<ept id="p1">*</ept>, so that they can be freely ordered and rearranged without entanglement or interdependencies with the rest of the program.</source>
          <target state="translated"><bpt id="p1">*</bpt>Indipendente<ept id="p1">*</ept>, in modo che possano essere liberamente ordinate e ridisposte senza ostacoli o interdipendenze con il resto del programma.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Pure transformations have no knowledge of or effect upon their environment.</source>
          <target state="translated">Le trasformazioni pure non conoscono l'ambiente, né influiscono su di esso.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>That is, the functions used in the transformation have no <bpt id="p1">*</bpt>side effects<ept id="p1">*</ept>.</source>
          <target state="translated">Vale a dire le funzioni usate nella trasformazione non presentano <bpt id="p1">*</bpt>gli effetti collaterali<ept id="p1">*</ept>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Stateless<ept id="p1">*</ept>, so that executing the same function or specific set of functions on the same input will always result in the same output.</source>
          <target state="translated"><bpt id="p1">*</bpt>Senza stato<ept id="p1">*</ept>, in modo che eseguendo la stessa funzione o un set specifico di funzioni sullo stesso input si otterrà sempre lo stesso output.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Pure transformations have no memory of their prior use.</source>
          <target state="translated">Le trasformazioni pure non mantengono in memoria informazioni sull'utilizzo precedente.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In the rest of this tutorial, the term "pure function" is used in a general sense to indicate a programming approach, and not a specific language feature.</source>
          <target state="translated">Nelle restanti parti di questa esercitazione il termine "funzione pure" viene usato in senso generale per indicare un approccio di programmazione e non una funzionalità specifica del linguaggio.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Note that pure functions must be implemented as functions in Visual Basic.</source>
          <target state="translated">Si noti che le funzioni pure devono essere implementate come funzioni in Visual Basic.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Also, you should not confuse pure functions with pure virtual methods in C++.</source>
          <target state="translated">È inoltre opportuno non confondere le funzioni pure con i metodi virtuali pure di C++.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The latter indicates that the containing class is abstract and that no method body is supplied.</source>
          <target state="translated">Questi ultimi indicano che la classe contenitore è astratta e che non viene fornito alcun corpo del metodo.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Functional Programming</source>
          <target state="translated">Programmazione funzionale</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Functional programming<ept id="p1">*</ept> is a programming approach that directly supports pure functional transformation.</source>
          <target state="translated"><bpt id="p1">*</bpt>Programmazione funzionale<ept id="p1">*</ept> è un approccio di programmazione che supporta direttamente la trasformazione funzionale pure.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Historically, general-purpose functional programming languages, such as ML, Scheme, Haskell, and F#, have been primarily of interest to the academic community.</source>
          <target state="translated">In passato, generici linguaggi di programmazione funzionale, ad esempio ML, schema, Haskell e F #, sono stati principalmente di interesse della comunità accademica.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Although it has always been possible to write pure functional transformations in Visual Basic, the difficulty of doing so has not made it an attractive option to most programmers.</source>
          <target state="translated">Sebbene sia sempre stato possibile scrivere trasformazioni funzionali pure in Visual Basic, la difficoltà di procedere in modo non ha un'opzione interessante per la maggior parte dei programmatori.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>With later versions of Visual Basic, however, new language constructs such as lambda expressions and type inference make it functional programming much easier and more productive.</source>
          <target state="translated">Nelle versioni successive di Visual Basic, tuttavia, nuovi costrutti di linguaggio, ad esempio espressioni lambda e inferenza del tipo rendere la programmazione funzionale più semplice ed efficiente.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For more information about functional programming, see <bpt id="p1">[</bpt>Functional Programming vs. Imperative Programming (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/functional-programming-vs-imperative-programming.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni sulla programmazione funzionale, vedere <bpt id="p1">[</bpt>vs programmazione funzionale. Programmazione imperativa (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/functional-programming-vs-imperative-programming.md)</ept>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Domain-Specific FP Languages</source>
          <target state="translated">Strumenti della programmazione funzionale specifici per il dominio</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Although general functional programming languages have not been widely adopted, specific domain-specific functional programming languages have had better success.</source>
          <target state="translated">Sebbene i linguaggi di programmazione funzionale generici non sono stati adottati diffusamente, quelli specifici per il dominio hanno trovato miglior accoglienza.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For example, Cascading Style Sheets (CSS) are used to determine the look and feel of many Web pages, and Extensible Stylesheet Language Transformations (XSLT) style sheets are used extensively in XML data manipulation.</source>
          <target state="translated">Ad esempio, i CSS (Cascading Style Sheets) vengono usati per determinare l'aspetto di molte pagine Web, mentre i fogli di stile XSLT (Extensible Stylesheet Language Transformations) vengono ampiamente usati per la modifica dei dati XML.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For more information about XSLT, see <bpt id="p1">[</bpt>XSLT Transformations<ept id="p1">](http://msdn.microsoft.com/library/202f8820-224c-494f-b61e-cd127eac6e03)</ept>.</source>
          <target state="translated">Per ulteriori informazioni su XSLT, vedere <bpt id="p1">[</bpt>le trasformazioni XSLT<ept id="p1">](http://msdn.microsoft.com/library/202f8820-224c-494f-b61e-cd127eac6e03)</ept>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Terminology</source>
          <target state="translated">Terminologia</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The following table defines some terms related to functional transformations.</source>
          <target state="translated">Nella tabella seguente sono riportate le definizioni di alcuni termini correlati alle trasformazioni funzionali.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>higher-order (first-class) function</source>
          <target state="translated">funzione di ordine superiore (prima classe)</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>A function that can be treated as a programmatic object.</source>
          <target state="translated">Funzione che può essere considerata come oggetto a livello di codice.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For example, a higher-order function can be passed to or returned from other functions.</source>
          <target state="translated">Ad esempio, una funzione di ordine superiore può essere passata ad altre funzioni o restituita da altre funzioni.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>In Visual Basic, delegates and lambda expressions are language features that support higher-order functions.</source>
          <target state="translated">In Visual Basic, delegati e le espressioni lambda sono funzionalità del linguaggio che supportano le funzioni di ordine superiore.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>To write a higher-order function, you declare one or more arguments to take delegates, and you often use lambda expressions when calling it.</source>
          <target state="translated">Per scrivere una funzione di ordine superiore, è necessario dichiarare uno o più argomenti che accettano delegati e usare spesso espressioni lambda per la chiamata.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Many of the standard query operators are higher-order functions.</source>
          <target state="translated">Molti degli operatori di query standard sono funzioni di ordine superiore.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Standard Query Operators Overview (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/standard-query-operators-overview.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>Panoramica di operatori Query Standard (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/standard-query-operators-overview.md)</ept>.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>lambda expression</source>
          <target state="translated">espressione lambda</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Essentially, an inline anonymous function that can be used wherever a delegate type is expected.</source>
          <target state="translated">Essenzialmente funzione anonima inline utilizzabile in tutti i casi in cui è previsto un tipo delegato.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This is a simplified definition of lambda expressions, but it is adequate for the purposes of this tutorial.</source>
          <target state="translated">Questa è una definizione semplificata delle espressioni lambda, sebbene appropriata per gli scopi di questa esercitazione.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For more information about, see <bpt id="p1">[</bpt>Lambda Expressions<ept id="p1">](../../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>le espressioni Lambda<ept id="p1">](../../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)</ept>.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>collection</source>
          <target state="translated">raccolta</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A structured set of data, usually of a uniform type.</source>
          <target state="translated">Set strutturato di dati, in genere di tipo uniforme.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>To be compatible with LINQ, a collection must implement the &lt;xref:System.Collections.IEnumerable&gt; interface or the &lt;xref:System.Linq.IQueryable&gt; interface (or one of their generic counterparts, &lt;xref:System.Collections.Generic.IEnumerator%601&gt; or &lt;xref:System.Linq.IQueryable%601&gt;).</source>
          <target state="translated">Per essere compatibile con LINQ, è necessario implementare una raccolta di &lt;xref:System.Collections.IEnumerable&gt;interfaccia o &lt;xref:System.Linq.IQueryable&gt;interfaccia (o una delle controparti generiche &lt;xref:System.Collections.Generic.IEnumerator%601&gt;o &lt;xref:System.Linq.IQueryable%601&gt;).&lt;/xref:System.Linq.IQueryable%601&gt; &lt;/xref:System.Collections.Generic.IEnumerator%601&gt; &lt;/xref:System.Linq.IQueryable&gt; &lt;/xref:System.Collections.IEnumerable&gt;</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>tuple (anonymous types)</source>
          <target state="translated">tupla (tipi anonimi)</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>A mathematical concept, a tuple is a finite sequence of objects, each of a specific type.</source>
          <target state="translated">Concetto matematico. Corrisponde a una sequenza finita di oggetti, ognuno di un tipo specifico,</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>A tuple is also known as an ordered list.</source>
          <target state="translated">Una tupla è anche nota come elenco ordinato.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Anonymous types are a language implementation of this concept, which enable an unnamed class type to be declared and an object of that type to be instantiated at the same time.</source>
          <target state="translated">I tipi anonimi costituiscono un'implementazione del linguaggio di questo concetto e consentono di dichiarare un tipo di classe senza nome e contemporaneamente di creare un'istanza di un oggetto di tale tipo.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For more information, see  <bpt id="p1">[</bpt>Anonymous Types<ept id="p1">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/anonymous-types.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>tipi anonimi<ept id="p1">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/anonymous-types.md)</ept>.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>type inference (implicit typing)</source>
          <target state="translated">inferenza dei tipi (tipizzazione implicita)</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The ability of a compiler to determine the type of a variable in the absence of an explicit type declaration.</source>
          <target state="translated">Capacità di un compilatore di determinare il tipo di una variabile anche in mancanza di una dichiarazione di tipo esplicita.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Local Type Inference<ept id="p1">](../../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>l'inferenza del tipo locale<ept id="p1">](../../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)</ept>.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>deferred execution and lazy evaluation</source>
          <target state="translated">esecuzione posticipata e valutazione lazy</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The delaying of evaluation of an expression until its resolved value is actually required.</source>
          <target state="translated">Azione che consiste nel posticipare la valutazione di un'espressione finché il valore risolto non è effettivamente necessario.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Deferred execution is supported in collections.</source>
          <target state="translated">L'esecuzione posticipata è supportata nelle raccolte.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Basic Query Operations (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/basic-query-operations.md)</ept> and <bpt id="p2">[</bpt>Deferred Execution and Lazy Evaluation in LINQ to XML (Visual Basic)<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/deferred-execution-and-lazy-evaluation-in-linq-to-xml.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>Basic Query Operations (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/basic-query-operations.md)</ept> e <bpt id="p2">[</bpt>esecuzione posticipata e valutazione differita in LINQ to XML (Visual Basic)<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/deferred-execution-and-lazy-evaluation-in-linq-to-xml.md)</ept>.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>These language features will be used in code samples throughout this section.</source>
          <target state="translated">Queste funzionalità del linguaggio saranno usate negli esempi di codice di tutta questa sezione.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">Vedere anche</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Introduction to Pure Functional Transformations (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/introduction-to-pure-functional-transformations.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Introduzione alle trasformazioni funzionali Pure (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/introduction-to-pure-functional-transformations.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Functional Programming vs. Imperative Programming (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/functional-programming-vs-imperative-programming.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>Differenze tra programmazione funzionale e Programmazione imperativa (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/functional-programming-vs-imperative-programming.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>