<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">11baaa6985f0681aa9c67c4f2470fb9917db5b78</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\procedures\function-procedures.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d10c541e9fdffffc46702845240e6a4b8805ed3d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">639d4d68bea76080355b631a32517a0eb45e333f</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Handback file name: lo-mt_function-procedures.bc8510e6055a83ac163a5c034912857a819c3792.it-it is different with handoff file name: function-procedures.bc8510e6055a83ac163a5c034912857a819c3792.it-it.</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Function Procedures (Visual Basic) | Microsoft Docs</source>
          <target state="translated">Funzione routine (Visual Basic) | Documenti di Microsoft</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Function Procedures (Visual Basic)</source>
          <target state="translated">Routine Function (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Function`</ph> procedure is a series of <ph id="ph2">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> statements enclosed by the <ph id="ph3">`Function`</ph> and <ph id="ph4">`End Function`</ph> statements.</source>
          <target state="translated">Oggetto <ph id="ph1">`Function`</ph> routine è una serie di <ph id="ph2">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> racchiuso tra istruzioni il <ph id="ph3">`Function`</ph> e <ph id="ph4">`End Function`</ph> istruzioni.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Function`</ph> procedure performs a task and then returns control to the calling code.</source>
          <target state="translated">Il <ph id="ph1">`Function`</ph> routine esegue un'attività e quindi restituisce il controllo al codice chiamante.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>When it returns control, it also returns a value to the calling code.</source>
          <target state="translated">Quando restituisce il controllo, restituisce anche un valore al codice chiamante.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Each time the procedure is called, its statements run, starting with the first executable statement after the <ph id="ph1">`Function`</ph> statement and ending with the first <ph id="ph2">`End Function`</ph>, <ph id="ph3">`Exit Function`</ph>, or <ph id="ph4">`Return`</ph> statement encountered.</source>
          <target state="translated">Ogni volta che viene chiamata la routine, le relative istruzioni di esecuzione, a partire dalla prima istruzione eseguibile dopo il <ph id="ph1">`Function`</ph> istruzione e terminando con il primo <ph id="ph2">`End Function`</ph>, <ph id="ph3">`Exit Function`</ph>, o <ph id="ph4">`Return`</ph> istruzione rilevata.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You can define a <ph id="ph1">`Function`</ph> procedure in a module, class, or structure.</source>
          <target state="translated">È possibile definire un <ph id="ph1">`Function`</ph> procedura in un modulo, classe o struttura.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>It is <ph id="ph1">`Public`</ph> by default, which means you can call it from anywhere in your application that has access to the module, class, or structure in which you defined it.</source>
          <target state="translated">È <ph id="ph1">`Public`</ph> per impostazione predefinita, il che significa è possibile chiamare da qualsiasi punto dell'applicazione che ha accesso al modulo, classe o struttura in cui è stata definita.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Function`</ph> procedure can take arguments, such as constants, variables, or expressions, which are passed to it by the calling code.</source>
          <target state="translated">Oggetto <ph id="ph1">`Function`</ph> procedure può accettare argomenti, ad esempio costanti, variabili o espressioni, che vengono passate al metodo dal codice chiamante.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Declaration Syntax</source>
          <target state="translated">Sintassi di dichiarazione</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The syntax for declaring a <ph id="ph1">`Function`</ph> procedure is as follows:</source>
          <target state="translated">La sintassi per dichiarare un <ph id="ph1">`Function`</ph> è la seguente procedura:</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>modifiers<ept id="p1">*</ept> can specify access level and information regarding overloading, overriding, sharing, and shadowing.</source>
          <target state="translated">Il <bpt id="p1">*</bpt>modificatori<ept id="p1">*</ept> possibile specificare il livello di accesso e le informazioni su overload, override, condivisione e shadowing.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Function Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/function-statement.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>istruzione Function<ept id="p1">](../../../../visual-basic/language-reference/statements/function-statement.md)</ept>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You declare each parameter the same way you do for <bpt id="p1">[</bpt>Sub Procedures<ept id="p1">](./sub-procedures.md)</ept>.</source>
          <target state="translated">Ciascun parametro viene dichiarato esattamente come avviene per <bpt id="p1">[</bpt>Sub (routine)<ept id="p1">](./sub-procedures.md)</ept>.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Data Type</source>
          <target state="translated">Tipo di dati</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Every <ph id="ph1">`Function`</ph> procedure has a data type, just as every variable does.</source>
          <target state="translated">Ogni <ph id="ph1">`Function`</ph> routine ha un tipo di dati, solo ogni variabile.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This data type is specified by the <ph id="ph1">`As`</ph> clause in the <ph id="ph2">`Function`</ph> statement, and it determines the data type of the value the function returns to the calling code.</source>
          <target state="translated">Questo tipo di dati è specificato mediante il <ph id="ph1">`As`</ph> clausola il <ph id="ph2">`Function`</ph> istruzione che determina il tipo di dati del valore restituito dalla funzione al codice chiamante.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The following sample declarations illustrate this.</source>
          <target state="translated">Le seguenti dichiarazioni di esempio illustrare questo concetto.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For more information, see "Parts" in <bpt id="p1">[</bpt>Function Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/function-statement.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere "Parti" in <bpt id="p1">[</bpt>istruzione Function<ept id="p1">](../../../../visual-basic/language-reference/statements/function-statement.md)</ept>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Returning Values</source>
          <target state="translated">Restituzione di valori</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The value a <ph id="ph1">`Function`</ph> procedure sends back to the calling code is called its return value.</source>
          <target state="translated">Il valore di un <ph id="ph1">`Function`</ph> procedure invia back al codice chiamante viene chiamato il relativo valore restituito.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The procedure returns this value in one of two ways:</source>
          <target state="translated">La procedura restituisce questo valore in uno dei due modi:</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>It uses the <ph id="ph1">`Return`</ph> statement to specify the return value, and returns control immediately to the calling program.</source>
          <target state="translated">Usa il <ph id="ph1">`Return`</ph> controllare l'istruzione per specificare il valore restituito e restituisce immediatamente al programma chiamante.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The following example illustrates this.</source>
          <target state="translated">Questa condizione è illustrata nell'esempio seguente.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>It assigns a value to its own function name in one or more statements of the procedure.</source>
          <target state="translated">Assegna un valore per il proprio nome di funzione in una o più istruzioni della procedura.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Control does not return to the calling program until an <ph id="ph1">`Exit Function`</ph> or <ph id="ph2">`End Function`</ph> statement is executed.</source>
          <target state="translated">Il controllo viene restituito al programma chiamante fino a un <ph id="ph1">`Exit Function`</ph> o <ph id="ph2">`End Function`</ph> viene eseguita un'istruzione.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The following example illustrates this.</source>
          <target state="translated">Questa condizione è illustrata nell'esempio seguente.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The advantage of assigning the return value to the function name is that control does not return from the procedure until it encounters an <ph id="ph1">`Exit Function`</ph> or <ph id="ph2">`End Function`</ph> statement.</source>
          <target state="translated">Il vantaggio dell'assegnazione del valore restituito per il nome della funzione è che il controllo viene restituito dalla routine finché non viene rilevata un' <ph id="ph1">`Exit Function`</ph> o <ph id="ph2">`End Function`</ph> istruzione.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>This allows you to assign a preliminary value and adjust it later if necessary.</source>
          <target state="translated">In questo modo è possibile assegnare un valore preliminare e modificarlo in un secondo momento se necessario.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For more information about returning values, see <bpt id="p1">[</bpt>Function Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/function-statement.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni sulla restituzione di valori, vedere <bpt id="p1">[</bpt>istruzione Function<ept id="p1">](../../../../visual-basic/language-reference/statements/function-statement.md)</ept>.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For information about returning arrays, see <bpt id="p1">[</bpt>Arrays<ept id="p1">](../../../../visual-basic/programming-guide/language-features/arrays/index.md)</ept>.</source>
          <target state="translated">Per informazioni sulla restituzione di matrici, vedere <bpt id="p1">[</bpt>matrici<ept id="p1">](../../../../visual-basic/programming-guide/language-features/arrays/index.md)</ept>.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Calling Syntax</source>
          <target state="translated">Sintassi di chiamata</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You invoke a <ph id="ph1">`Function`</ph> procedure by including its name and arguments either on the right side of an assignment statement or in an expression.</source>
          <target state="translated">Richiamare un <ph id="ph1">`Function`</ph> procedura includendo il nome e gli argomenti sul lato destro di un'istruzione di assegnazione o in un'espressione.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>You must provide values for all arguments that are not optional, and you must enclose the argument list in parentheses.</source>
          <target state="translated">È necessario fornire valori per tutti gli argomenti che non sono facoltativi e racchiudere l'elenco di argomenti racchiuso tra parentesi.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>If no arguments are supplied, you can optionally omit the parentheses.</source>
          <target state="translated">Se viene fornito alcun argomento, è possibile omettere le parentesi.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The syntax for a call to a <ph id="ph1">`Function`</ph> procedure is as follows:</source>
          <target state="translated">La sintassi per una chiamata a un <ph id="ph1">`Function`</ph> è la seguente procedura:</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>lvalue<ept id="p1">*</ept>  <ph id="ph1">`=`</ph>  <bpt id="p2">*</bpt>functionname<ept id="p2">*</ept> <ph id="ph2">`[(`</ph> <bpt id="p3">*</bpt>argumentlist<ept id="p3">*</ept> <ph id="ph3">`)]`</ph></source>
          <target state="translated"><bpt id="p1">*</bpt>lvalue<ept id="p1">*</ept><ph id="ph1">`=`</ph><bpt id="p2">*</bpt>functionname<ept id="p2">*</ept> <ph id="ph2">`[(`</ph> <bpt id="p3">*</bpt>argumentlist<ept id="p3">*</ept>    <ph id="ph3">`)]`</ph></target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`If ((`</ph> <bpt id="p1">*</bpt>functionname<ept id="p1">*</ept> <ph id="ph2">`[(`</ph> <bpt id="p2">*</bpt>argumentlist<ept id="p2">*</ept> <ph id="ph3">`)] / 3) &lt;=`</ph>  <bpt id="p3">*</bpt>expression<ept id="p3">*</ept> <ph id="ph4">`) Then`</ph></source>
          <target state="translated"><ph id="ph1">`If ((`</ph><bpt id="p1">*</bpt>functionname<ept id="p1">*</ept> <ph id="ph2">`[(`</ph> <bpt id="p2">*</bpt>argumentlist<ept id="p2">*</ept> <ph id="ph3">`)] / 3) &lt;=`</ph> <bpt id="p3">*</bpt>espressione<ept id="p3">*</ept>  <ph id="ph4">`) Then`</ph></target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>When you call a <ph id="ph1">`Function`</ph> procedure, you do not have to use its return value.</source>
          <target state="translated">Quando si chiama un <ph id="ph1">`Function`</ph> procedura, non è necessario utilizzare il valore restituito.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If you do not, all the actions of the function are performed, but the return value is ignored.</source>
          <target state="translated">In caso contrario, vengono eseguite tutte le azioni della funzione, ma il valore restituito viene ignorato.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>&lt;xref:Microsoft.VisualBasic.Interaction.MsgBox%2A&gt; is often called in this manner.</source>
          <target state="translated">&lt;xref:Microsoft.VisualBasic.Interaction.MsgBox%2A&gt;viene spesso definito in questo modo.&lt;/xref:Microsoft.VisualBasic.Interaction.MsgBox%2A&gt;</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Illustration of Declaration and Call</source>
          <target state="translated">Illustrazione di dichiarazione e chiamata</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The following <ph id="ph1">`Function`</ph> procedure calculates the longest side, or hypotenuse, of a right triangle, given the values for the other two sides.</source>
          <target state="translated">Nell'esempio <ph id="ph1">`Function`</ph> procedure calcola il lato più lungo, ovvero l'ipotenusa, di un triangolo rettangolo, in base ai valori degli altri due lati.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnProcedures#1<ept id="p2">](./codesnippet/VisualBasic/function-procedures_1.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnProcedures n.&amp;1;<ept id="p2">](./codesnippet/VisualBasic/function-procedures_1.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The following example shows a typical call to <ph id="ph1">`hypotenuse`</ph>.</source>
          <target state="translated">Nell'esempio seguente viene illustrata una tipica chiamata a <ph id="ph1">`hypotenuse`</ph>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnProcedures#6<ept id="p2">](./codesnippet/VisualBasic/function-procedures_2.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>6 VbVbcnProcedures<ept id="p2">](./codesnippet/VisualBasic/function-procedures_2.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">Vedere anche</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Procedures<ept id="p1">](./index.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Procedure<ept id="p1">](./index.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Sub Procedures<ept id="p1">](./sub-procedures.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Sub (routine)<ept id="p1">](./sub-procedures.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Property Procedures<ept id="p1">](./property-procedures.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Proprietà (routine)<ept id="p1">](./property-procedures.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Operator Procedures<ept id="p1">](./operator-procedures.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Routine di operatore<ept id="p1">](./operator-procedures.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Procedure Parameters and Arguments<ept id="p1">](./procedure-parameters-and-arguments.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Gli argomenti e parametri di routine<ept id="p1">](./procedure-parameters-and-arguments.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Function Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/function-statement.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Istruzione Function<ept id="p1">](../../../../visual-basic/language-reference/statements/function-statement.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Create a Procedure that Returns a Value<ept id="p1">](./how-to-create-a-procedure-that-returns-a-value.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Procedura: creare una routine che restituisce un valore<ept id="p1">](./how-to-create-a-procedure-that-returns-a-value.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Return a Value from a Procedure<ept id="p1">](./how-to-return-a-value-from-a-procedure.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Procedura: restituire un valore da una routine<ept id="p1">](./how-to-return-a-value-from-a-procedure.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Call a Procedure That Returns a Value<ept id="p1">](./how-to-call-a-procedure-that-returns-a-value.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>Procedura: Chiamare una routine che restituisce un valore<ept id="p1">](./how-to-call-a-procedure-that-returns-a-value.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>