<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7fd7a2defabe2d03b658977cc0106e3bbf985202</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\linq\functional-programming-vs-imperative-programming.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e5770038fa361658af832cff09006d1185be7625</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">baced08be04c396bf5de15960c97b8b5f5e24b27</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Handback file name: lo-mt_functional-programming-vs-imperative-programming.d508d6f187eecfa98e31b3226cc38dec8b54683b.it-it is different with handoff file name: functional-programming-vs-imperative-programming.d508d6f187eecfa98e31b3226cc38dec8b54683b.it-it.</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Functional Programming vs. Imperative Programming (Visual Basic) | Microsoft Docs</source>
          <target state="translated">Differenze tra programmazione funzionale e Programmazione imperativa (Visual Basic) | Documenti di Microsoft</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Functional Programming vs. Imperative Programming (Visual Basic)</source>
          <target state="translated">Differenze tra programmazione funzionale e Programmazione imperativa (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic compares and contrasts functional programming with more traditional imperative (procedural) programming.</source>
          <target state="translated">In questo argomento vengono presentate le differenze tra la programmazione funzionale e la più tradizionale programmazione imperativa (procedurale).</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Functional Programming vs. Imperative Programming</source>
          <target state="translated">Differenze tra programmazione funzionale e programmazione imperativa</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>functional programming<ept id="p1">*</ept> paradigm was explicitly created to support a pure functional approach to problem solving.</source>
          <target state="translated">Il <bpt id="p1">*</bpt>programmazione funzionale<ept id="p1">*</ept> paradigma è stato creato espressamente per supportare un approccio funzionale puro alla risoluzione dei problemi.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Functional programming is a form of <bpt id="p1">*</bpt>declarative programming<ept id="p1">*</ept>.</source>
          <target state="translated">Programmazione funzionale è una forma di <bpt id="p1">*</bpt>programmazione dichiarativa<ept id="p1">*</ept>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>In contrast, most mainstream languages, including object-oriented programming (OOP) languages such as C#, Visual Basic, C++, and Java, were designed to primarily support <bpt id="p1">*</bpt>imperative<ept id="p1">*</ept> (procedural) programming.</source>
          <target state="translated">Al contrario, la maggior parte dei linguaggi più diffusi, tra cui orientata agli oggetti (OOP) linguaggi quali c#, Visual Basic, C++ e Java, sono stati progettati principalmente per supportare <bpt id="p1">*</bpt>imperativo<ept id="p1">*</ept> (procedurale).</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>With an imperative approach, a developer writes code that describes in exacting detail the steps that the computer must take to accomplish the goal.</source>
          <target state="translated">Con un approccio imperativo lo sviluppatore scrive codice in cui vengono descritti in dettaglio i passaggi esatti che devono essere eseguiti dal computer per raggiungere l'obiettivo.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This is sometimes referred to as <bpt id="p1">*</bpt>algorithmic<ept id="p1">*</ept> programming.</source>
          <target state="translated">Ciò è talvolta detta <bpt id="p1">*</bpt>algoritmico<ept id="p1">*</ept> di programmazione.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In contrast, a functional approach involves composing the problem as a set of functions to be executed.</source>
          <target state="translated">Al contrario, un approccio funzionale implica la composizione del problema come set di funzioni da eseguire.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You define carefully the input to each function, and what each function returns.</source>
          <target state="translated">È necessario definire con attenzione l'input e l'output di ogni funzione.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The following table describes some of the general differences between these two approaches.</source>
          <target state="translated">Nella tabella seguente sono descritte alcune delle differenze generali tra questi due approcci.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Characteristic</source>
          <target state="translated">Caratteristica</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Imperative approach</source>
          <target state="translated">Approccio imperativo</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Functional approach</source>
          <target state="translated">Approccio funzionale</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Programmer focus</source>
          <target state="translated">Obiettivo del programmatore</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>How to perform tasks (algorithms) and how to track changes in state.</source>
          <target state="translated">Come eseguire attività (algoritmi) e come tenere traccia delle modifiche di stato.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>What information is desired and what transformations are required.</source>
          <target state="translated">Quali informazioni si desiderano e quali trasformazioni sono richieste.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>State changes</source>
          <target state="translated">Modifiche di stato</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Important.</source>
          <target state="translated">Importante.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Non-existent.</source>
          <target state="translated">Non esistente.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Order of execution</source>
          <target state="translated">Ordine di esecuzione</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Important.</source>
          <target state="translated">Importante.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Low importance.</source>
          <target state="translated">Importanza limitata.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Primary flow control</source>
          <target state="translated">Controllo del flusso primario</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Loops, conditionals, and function (method) calls.</source>
          <target state="translated">Cicli, condizionali e chiamate di funzioni (metodi).</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Function calls, including recursion.</source>
          <target state="translated">Chiamate di funzioni, inclusa la ricorsione.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Primary manipulation unit</source>
          <target state="translated">Unità di modifica primaria</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Instances of structures or classes.</source>
          <target state="translated">Istanze di strutture o classi.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Functions as first-class objects and data collections.</source>
          <target state="translated">Funzioni come oggetti e raccolte dati di prima classe.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Although most languages were designed to support a specific programming paradigm, many general languages are flexible enough to support multiple paradigms.</source>
          <target state="translated">Anche se la maggior parte dei linguaggi è progettata per supportare un paradigma di programmazione specifico, i linguaggi generici sono in genere sufficientemente flessibili da supportare più paradigmi.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For example, most languages that contain function pointers can be used to credibly support functional programming.</source>
          <target state="translated">Ad esempio, è possibile usare la maggior parte dei linguaggi che contengono puntatori a funzioni per supportare efficacemente la programmazione funzionale.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Furthermore, Visual Basic includes explicit language extensions to support functional programming, including lambda expressions and type inference.</source>
          <target state="translated">Inoltre, Visual Basic sono disponibili estensioni del linguaggio esplicite per supportare la programmazione funzionale, tra cui espressioni lambda e inferenza del tipo.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>LINQ technology is a form of declarative, functional programming.</source>
          <target state="translated">La tecnologia LINQ è un tipo di programmazione funzionale e dichiarativa.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Functional Programming Using XSLT</source>
          <target state="translated">Programmazione funzionale tramite XSLT</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Many XSLT developers are familiar with the pure functional approach.</source>
          <target state="translated">Gli sviluppatori XSLT hanno in genere una certa familiarità con l'approccio funzionale.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The most effective way to develop an XSLT style sheet is to treat each template as an isolated, composable transformation.</source>
          <target state="translated">Il modo più efficace per sviluppare un foglio di stile XSLT consiste nel considerare ogni modello come una trasformazione isolata e componibile.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The order of execution is completely de-emphasized.</source>
          <target state="translated">All'ordine di esecuzione non viene data alcuna importanza.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>XSLT does not allow side effects (with the exception that escaping mechanisms for executing procedural code can introduce side effects that result in functional impurity).</source>
          <target state="translated">XSLT non consente effetti collaterali, con l'eccezione che i meccanismi di escape per l'esecuzione di codice procedurale può introdurre effetti collaterali che pregiudicano la purezza funzionale.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>However, although XSLT is an effective tool, some of its characteristics are not optimal.</source>
          <target state="translated">Tuttavia, pur essendo uno strumento efficace, alcune caratteristiche di XSLT non sono ottimali.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For example, expressing programming constructs in XML makes code relatively verbose, and therefore difficult to maintain.</source>
          <target state="translated">Ad esempio, l'espressione di costrutti di programmazione in XML rende il codice relativamente dettagliato e pertanto difficile da mantenere.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Also, the heavy reliance on recursion for flow control can result in code that is hard to read.</source>
          <target state="translated">Inoltre, l'affidamento eccessivo alla ricorsione per il controllo del flusso può generare codice difficile da leggere.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For more information about XSLT, see <bpt id="p1">[</bpt>XSLT Transformations<ept id="p1">](http://msdn.microsoft.com/library/202f8820-224c-494f-b61e-cd127eac6e03)</ept>.</source>
          <target state="translated">Per ulteriori informazioni su XSLT, vedere <bpt id="p1">[</bpt>le trasformazioni XSLT<ept id="p1">](http://msdn.microsoft.com/library/202f8820-224c-494f-b61e-cd127eac6e03)</ept>.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>However, XSLT has proved the value of using a pure functional approach for transforming XML from one shape to another.</source>
          <target state="translated">Tuttavia, XSLT ha dimostrato il vantaggio dell'utilizzo di un approccio funzionale puro per trasformare XML da una forma a un'altra.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Pure functional programming with LINQ to XML is similar in many ways to XSLT.</source>
          <target state="translated">La programmazione funzionale con LINQ to XML è simile a XSLT per molti aspetti.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>However, the programming constructs introduced by LINQ to XML and Visual Basic allow you to write pure functional transformations that are more readable and maintainable than XSLT.</source>
          <target state="translated">Tuttavia, i costrutti di programmazione introdotti da LINQ t XML e Visual Basic consentono di scrivere trasformazioni funzionale pure che risultano più leggibile e conservabile rispetto a XSLT.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Advantages of Pure Functions</source>
          <target state="translated">Vantaggi delle funzioni pure</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The primary reason to implement functional transformations as pure functions is that pure functions are composable: that is, self-contained and stateless.</source>
          <target state="translated">Il motivo principale per implementare le trasformazioni funzionali come funzioni pure è che le funzioni pure sono componibili, ossia sono autonome e senza stato.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>These characteristics bring a number of benefits, including the following:</source>
          <target state="translated">Queste caratteristiche offrono numerosi vantaggi, tra cui quelli riportati di seguito:</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Increased readability and maintainability.</source>
          <target state="translated">Maggiore facilità di lettura e manutenibilità,</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>This is because each function is designed to accomplish a specific task given its arguments.</source>
          <target state="translated">in quanto ogni funzione è progettata per realizzare un'attività specifica con gli argomenti assegnati.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The function does not rely on any external state.</source>
          <target state="translated">La funzione non si basa su alcuno stato esterno.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Easier reiterative development.</source>
          <target state="translated">Sviluppo iterativo più semplice,</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Because the code is easier to refactor, changes to design are often easier to implement.</source>
          <target state="translated">in quanto è più agevole eseguire il refactoring del codice ed è più facile implementare le modifiche di progettazione.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>For example, suppose you write a complicated transformation, and then realize that some code is repeated several times in the transformation.</source>
          <target state="translated">Si supponga ad esempio di scrivere una trasformazione complicata e poi di realizzare che una parte di codice viene ripetuta diverse volte al suo interno.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>If you refactor through a pure method, you can call your pure method at will without worrying about side effects.</source>
          <target state="translated">Se si esegue il refactoring tramite un metodo puro, è possibile chiamare il metodo puro quando è necessario senza preoccuparsi degli effetti collaterali.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Easier testing and debugging.</source>
          <target state="translated">Procedure più semplici di test e debug,</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Because pure functions can more easily be tested in isolation, you can write test code that calls the pure function with typical values, valid edge cases, and invalid edge cases.</source>
          <target state="translated">in quanto le funzioni pure possono essere più facilmente testate in isolamento ed è possibile scrivere codice di test che chiama la funzione pura con valori tipici, casi limite validi e casi limite non validi.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Transitioning for OOP Developers</source>
          <target state="translated">Transizione per gli sviluppatori OOP</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>In traditional object-oriented programming (OOP), most developers are accustomed to programming in the imperative/procedural style.</source>
          <target state="translated">Nella tradizionale programmazione orientata a oggetti (OOP, Object-Oriented Programming), gli sviluppatori sono in genere abituati a programmare nello stile imperativo/procedurale.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>To switch to developing in a pure functional style, they have to make a transition in their thinking and their approach to development.</source>
          <target state="translated">Per passare allo sviluppo in uno stile funzionale puro, devono modificare il loro modo di ragionare e l'approccio adottato per lo sviluppo.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>To solve problems, OOP developers design class hierarchies, focus on proper encapsulation, and think in terms of class contracts.</source>
          <target state="translated">Per risolvere i problemi, gli sviluppatori progettano gerarchie di classi, si dedicano al corretto incapsulamento e ragionano in termini di contratti tra classi.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The behavior and state of object types are paramount, and language features, such as classes, interfaces, inheritance, and polymorphism, are provided to address these concerns.</source>
          <target state="translated">Il comportamento e lo stato dei tipi di oggetto sono di fondamentale importanza e per rispondere a tale esigenza vengono fornite funzionalità del linguaggio quali classi, interfacce, ereditarietà e polimorfismo.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>In contrast, functional programming approaches computational problems as an exercise in the evaluation of pure functional transformations of data collections.</source>
          <target state="translated">Al contrario, l'approccio della programmazione funzionale ai problemi si traduce nella valutazione di trasformazioni funzionali pure di raccolte dati.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Functional programming avoids state and mutable data, and instead emphasizes the application of functions.</source>
          <target state="translated">Nella programmazione funzionale vengono evitati i dati di stato e modificabili e viene data invece una maggiore enfasi all'applicazione di funzioni.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Fortunately, Visual Basic doesn't require the full leap to functional programming, because it supports both imperative and functional programming approaches.</source>
          <target state="translated">Fortunatamente, Visual Basic non necessario passare completamente alla programmazione funzionale, in quanto supporta sia funzionale l'approccio imperativo.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>A developer can choose which approach is most appropriate for a particular scenario.</source>
          <target state="translated">Gli sviluppatori possono scegliere l'approccio più appropriato per un determinato scenario.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>In fact, programs often combine both approaches.</source>
          <target state="translated">In effetti, nei programmi vengono spesso combinati entrambi gli approcci.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">Vedere anche</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Introduction to Pure Functional Transformations (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/introduction-to-pure-functional-transformations.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Introduzione alle trasformazioni funzionali Pure (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/introduction-to-pure-functional-transformations.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>XSLT Transformations<ept id="p1">](http://msdn.microsoft.com/library/202f8820-224c-494f-b61e-cd127eac6e03)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Trasformazioni XSLT<ept id="p1">](http://msdn.microsoft.com/library/202f8820-224c-494f-b61e-cd127eac6e03)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Refactoring Into Pure Functions (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/refactoring-into-pure-functions.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>Refactoring in funzioni Pure (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/refactoring-into-pure-functions.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>