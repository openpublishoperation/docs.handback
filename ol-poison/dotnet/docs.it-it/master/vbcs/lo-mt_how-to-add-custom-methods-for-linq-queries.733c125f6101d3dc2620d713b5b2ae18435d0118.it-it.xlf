<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">166eb731d41e009c374ba55f929eed302793ecd0</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\linq\how-to-add-custom-methods-for-linq-queries.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1c2cbf6a624a9d2a49c5809ca6c2ec5b88dc5754</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bab00aae8047bb822ef597b4b3557b0809db7cad</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Handback file name: lo-mt_how-to-add-custom-methods-for-linq-queries.733c125f6101d3dc2620d713b5b2ae18435d0118.it-it is different with handoff file name: how-to-add-custom-methods-for-linq-queries.733c125f6101d3dc2620d713b5b2ae18435d0118.it-it.</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Add Custom Methods for LINQ Queries (Visual Basic) | Microsoft Docs</source>
          <target state="translated">Procedura: aggiungere metodi personalizzati per le query LINQ (Visual Basic) | Documenti di Microsoft</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Add Custom Methods for LINQ Queries (Visual Basic)</source>
          <target state="translated">Procedura: aggiungere metodi personalizzati per le query LINQ (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You can extend the set of methods that you can use for LINQ queries by adding extension methods to the &lt;xref:System.Collections.Generic.IEnumerable%601&gt; interface.</source>
          <target state="translated">È possibile estendere il set di metodi che è possibile utilizzare per le query LINQ aggiungendo metodi di estensione per il &lt;xref:System.Collections.Generic.IEnumerable%601&gt;interfaccia.&lt;/xref:System.Collections.Generic.IEnumerable%601&gt;</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For example, in addition to the standard average or maximum operations, you can create a custom aggregate method to compute a single value from a sequence of values.</source>
          <target state="translated">Oltre alla media standard o un numero massimo di operazioni, ad esempio, è possibile creare un metodo di aggregazione personalizzato per un singolo valore da una sequenza di valori di calcolo.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You can also create a method that works as a custom filter or a specific data transform for a sequence of values and returns a new sequence.</source>
          <target state="translated">È inoltre possibile creare un metodo che funziona come un filtro personalizzato o una trasformazione di dati specifico per una sequenza di valori e restituisce una nuova sequenza.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Examples of such methods are &lt;xref:System.Linq.Enumerable.Distinct%2A&gt;, &lt;xref:System.Linq.Enumerable.Skip%2A&gt;, and &lt;xref:System.Linq.Enumerable.Reverse%2A&gt;.</source>
          <target state="translated">Esempi di tali metodi sono &lt;xref:System.Linq.Enumerable.Distinct%2A&gt;, &lt;xref:System.Linq.Enumerable.Skip%2A&gt;e &lt;xref:System.Linq.Enumerable.Reverse%2A&gt;.&lt;/xref:System.Linq.Enumerable.Reverse%2A&gt; &lt;/xref:System.Linq.Enumerable.Skip%2A&gt; &lt;/xref:System.Linq.Enumerable.Distinct%2A&gt;</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>When you extend the &lt;xref:System.Collections.Generic.IEnumerable%601&gt; interface, you can apply your custom methods to any enumerable collection.</source>
          <target state="translated">Quando si estende il &lt;xref:System.Collections.Generic.IEnumerable%601&gt;interfaccia, è possibile applicare i metodi personalizzati per qualsiasi raccolta enumerabile.&lt;/xref:System.Collections.Generic.IEnumerable%601&gt;</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Extension Methods<ept id="p1">](../../../../visual-basic/programming-guide/language-features/procedures/extension-methods.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>metodi di estensione<ept id="p1">](../../../../visual-basic/programming-guide/language-features/procedures/extension-methods.md)</ept>.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Adding an Aggregate Method</source>
          <target state="translated">Aggiunta di un metodo di aggregazione</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>An aggregate method computes a single value from a set of values.</source>
          <target state="translated">Un metodo di aggregazione calcola un singolo valore da un set di valori.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>LINQ provides several aggregate methods, including &lt;xref:System.Linq.Enumerable.Average%2A&gt;, &lt;xref:System.Linq.Enumerable.Min%2A&gt;, and &lt;xref:System.Linq.Enumerable.Max%2A&gt;.</source>
          <target state="translated">LINQ fornisce diversi metodi di aggregazione, tra cui &lt;xref:System.Linq.Enumerable.Average%2A&gt;, &lt;xref:System.Linq.Enumerable.Min%2A&gt;e &lt;xref:System.Linq.Enumerable.Max%2A&gt;.&lt;/xref:System.Linq.Enumerable.Max%2A&gt; &lt;/xref:System.Linq.Enumerable.Min%2A&gt; &lt;/xref:System.Linq.Enumerable.Average%2A&gt;</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You can create your own aggregate method by adding an extension method to the &lt;xref:System.Collections.Generic.IEnumerable%601&gt; interface.</source>
          <target state="translated">È possibile creare il proprio metodo di aggregazione mediante l'aggiunta di un metodo di estensione per il &lt;xref:System.Collections.Generic.IEnumerable%601&gt;interfaccia.&lt;/xref:System.Collections.Generic.IEnumerable%601&gt;</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The following code example shows how to create an extension method called <ph id="ph1">`Median`</ph> to compute a median for a sequence of numbers of type <ph id="ph2">`double`</ph>.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come creare un metodo di estensione denominato <ph id="ph1">`Median`</ph> per calcolare un valore medio per una sequenza di numeri di tipo <ph id="ph2">`double`</ph>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You call this extension method for any enumerable collection in the same way you call other aggregate methods from the &lt;xref:System.Collections.Generic.IEnumerable%601&gt; interface.</source>
          <target state="translated">Chiamare questo metodo di estensione per qualsiasi raccolta enumerabile nello stesso modo chiamare altri metodi di aggregazione dal &lt;xref:System.Collections.Generic.IEnumerable%601&gt;interfaccia.&lt;/xref:System.Collections.Generic.IEnumerable%601&gt;</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In Visual Basic, you can either use a method call or standard query syntax for the <ph id="ph1">`Aggregate`</ph> or <ph id="ph2">`Group By`</ph> clause.</source>
          <target state="translated">In Visual Basic, è possibile utilizzare una chiamata al metodo o una sintassi di query standard per il <ph id="ph1">`Aggregate`</ph> o <ph id="ph2">`Group By`</ph> clausola.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Aggregate Clause<ept id="p1">](../../../../visual-basic/language-reference/queries/aggregate-clause.md)</ept> and <bpt id="p2">[</bpt>Group By Clause<ept id="p2">](../../../../visual-basic/language-reference/queries/group-by-clause.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>clausola Aggregate<ept id="p1">](../../../../visual-basic/language-reference/queries/aggregate-clause.md)</ept> e <bpt id="p2">[</bpt>Group By Clause<ept id="p2">](../../../../visual-basic/language-reference/queries/group-by-clause.md)</ept>.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The following code example shows how to use the <ph id="ph1">`Median`</ph> method for an array of type <ph id="ph2">`double`</ph>.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare il <ph id="ph1">`Median`</ph> metodo per una matrice di tipo <ph id="ph2">`double`</ph>.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>1<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>1<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>2<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>2<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Overloading an Aggregate Method to Accept Various Types</source>
          <target state="translated">L'overload di un metodo di aggregazione per accettare tipi diversi</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You can overload your aggregate method so that it accepts sequences of various types.</source>
          <target state="translated">È possibile eseguire l'overload del metodo di aggregazione in modo che accetti le sequenze di vario tipo.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The standard approach is to create an overload for each type.</source>
          <target state="translated">L'approccio standard consiste nel creare un overload per ogni tipo.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Another approach is to create an overload that will take a generic type and convert it to a specific type by using a delegate.</source>
          <target state="translated">Un altro approccio consiste nel creare un overload che accettano un tipo generico e convertirlo in un tipo specifico tramite un delegato.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>You can also combine both approaches.</source>
          <target state="translated">È inoltre possibile combinare entrambi gli approcci.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>To create an overload for each type</source>
          <target state="translated">Per creare un overload per ogni tipo</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You can create a specific overload for each type that you want to support.</source>
          <target state="translated">È possibile creare un overload specifico per ogni tipo che si desidera supportare.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The following code example shows an overload of the <ph id="ph1">`Median`</ph> method for the <ph id="ph2">`integer`</ph> type.</source>
          <target state="translated">Esempio di codice seguente viene illustrato un overload di <ph id="ph1">`Median`</ph> metodo per la <ph id="ph2">`integer`</ph> tipo.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>3<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>3<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You can now call the <ph id="ph1">`Median`</ph> overloads for both <ph id="ph2">`integer`</ph> and <ph id="ph3">`double`</ph> types, as shown in the following code:</source>
          <target state="translated">È ora possibile chiamare il <ph id="ph1">`Median`</ph> overload per entrambe <ph id="ph2">`integer`</ph> e <ph id="ph3">`double`</ph> tipi, come illustrato nel codice seguente:</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>4<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>4<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>5<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>5<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>6<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>6<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>To create a generic overload</source>
          <target state="translated">Per creare un overload generico</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>You can also create an overload that accepts a sequence of generic objects.</source>
          <target state="translated">È inoltre possibile creare un overload che accetta una sequenza di oggetti generici.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This overload takes a delegate as a parameter and uses it to convert a sequence of objects of a generic type to a specific type.</source>
          <target state="translated">Questo overload accetta un delegato come parametro e lo utilizza per convertire una sequenza di oggetti di un tipo generico a un tipo specifico.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The following code shows an overload of the <ph id="ph1">`Median`</ph> method that takes the &lt;xref:System.Func%602&gt; delegate as a parameter.</source>
          <target state="translated">Nel codice seguente viene illustrato un overload di <ph id="ph1">`Median`</ph> metodo che accetta il &lt;xref:System.Func%602&gt;delegato come parametro.&lt;/xref:System.Func%602&gt;</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This delegate takes an object of generic type T and returns an object of type <ph id="ph1">`double`</ph>.</source>
          <target state="translated">Questo delegato accetta un oggetto di tipo generico T e restituisce un oggetto di tipo <ph id="ph1">`double`</ph>.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>You can now call the <ph id="ph1">`Median`</ph> method for a sequence of objects of any type.</source>
          <target state="translated">È ora possibile chiamare il <ph id="ph1">`Median`</ph> metodo per una sequenza di oggetti di qualsiasi tipo.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If the type does not have its own method overload, you have to pass a delegate parameter.</source>
          <target state="translated">Se il tipo non dispone di un proprio overload del metodo, è necessario passare un parametro delegato.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>In Visual Basic, you can use a lambda expression for this purpose.</source>
          <target state="translated">In Visual Basic, è possibile utilizzare un'espressione lambda a questo scopo.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Also, if you use the <ph id="ph1">`Aggregate`</ph> or <ph id="ph2">`Group By`</ph> clause instead of the method call, you can pass any value or expression that is in the scope this clause.</source>
          <target state="translated">Inoltre, se si utilizza il <ph id="ph1">`Aggregate`</ph> o <ph id="ph2">`Group By`</ph> clausola anziché la chiamata al metodo, è possibile passare qualsiasi valore o espressione che si trova nell'ambito di questa clausola.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The following example code shows how to call the <ph id="ph1">`Median`</ph> method for an array of integers and an array of strings.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come chiamare il <ph id="ph1">`Median`</ph> metodo per una matrice di integer e una matrice di stringhe.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For strings, the median for the lengths of strings in the array is calculated.</source>
          <target state="translated">Per le stringhe, viene calcolato il valore mediano per la lunghezza delle stringhe nella matrice.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The example shows how to pass the &lt;xref:System.Func%602&gt; delegate parameter to the <ph id="ph1">`Median`</ph> method for each case.</source>
          <target state="translated">Nell'esempio viene illustrato come passare il &lt;xref:System.Func%602&gt;parametro per delegare il <ph id="ph1">`Median`</ph> metodo per ogni case.&lt;/xref:System.Func%602&gt;</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>8<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>8<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Adding a Method That Returns a Collection</source>
          <target state="translated">Aggiunta di un metodo che restituisce una raccolta</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>You can extend the &lt;xref:System.Collections.Generic.IEnumerable%601&gt; interface with a custom query method that returns a sequence of values.</source>
          <target state="translated">È possibile estendere il &lt;xref:System.Collections.Generic.IEnumerable%601&gt;interfaccia con un metodo di query personalizzato che restituisce una sequenza di valori.&lt;/xref:System.Collections.Generic.IEnumerable%601&gt;</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>In this case, the method must return a collection of type &lt;xref:System.Collections.Generic.IEnumerable%601&gt;.</source>
          <target state="translated">In questo caso, il metodo deve restituire una raccolta di tipo &lt;xref:System.Collections.Generic.IEnumerable%601&gt;.&lt;/xref:System.Collections.Generic.IEnumerable%601&gt;</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Such methods can be used to apply filters or data transforms to a sequence of values.</source>
          <target state="translated">Tali metodi consente di applicare filtri o trasformazioni di dati in una sequenza di valori.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The following example shows how to create an extension method named <ph id="ph1">`AlternateElements`</ph> that returns every other element in a collection, starting from the first element.</source>
          <target state="translated">Nell'esempio seguente viene illustrato come creare un metodo di estensione denominato <ph id="ph1">`AlternateElements`</ph> che restituisce tutti gli altri elementi in una raccolta, a partire dal primo elemento.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>9<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>9<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>You can call this extension method for any enumerable collection just as you would call other methods from the &lt;xref:System.Collections.Generic.IEnumerable%601&gt; interface, as shown in the following code:</source>
          <target state="translated">È possibile chiamare questo metodo di estensione per qualsiasi raccolta enumerabile come chiamare altri metodi di &lt;xref:System.Collections.Generic.IEnumerable%601&gt;interfaccia, come illustrato nel codice seguente:&lt;/xref:System.Collections.Generic.IEnumerable%601&gt;</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">Vedere anche</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</source>
          <target state="translated">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;&lt;/xref:System.Collections.Generic.IEnumerable%601&gt;</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Extension Methods<ept id="p1">](../../../../visual-basic/programming-guide/language-features/procedures/extension-methods.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>Metodi di estensione<ept id="p1">](../../../../visual-basic/programming-guide/language-features/procedures/extension-methods.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>