<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d38928df51006a8db9417d34ccbe6cd03091db66</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\linq\how-to-retrieve-the-value-of-an-element-linq-to-xml.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9cc9d546856ce7a6a7734a984ee7b8c33330672f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a7403f48c91557abea4d1e6d7173ce4c42ef410f</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Handback file name: lo-mt_how-to-retrieve-the-value-of-an-element-linq-to-xml.840fb9dbeb49b61e21e5ad35b3125a034c79e689.it-it is different with handoff file name: how-to-retrieve-the-value-of-an-element-linq-to-xml.840fb9dbeb49b61e21e5ad35b3125a034c79e689.it-it.</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Retrieve the Value of an Element (LINQ to XML) (Visual Basic) | Microsoft Docs</source>
          <target state="translated">Procedura: recuperare il valore di un elemento (LINQ to XML) (Visual Basic) | Documenti di Microsoft</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Retrieve the Value of an Element (LINQ to XML) (Visual Basic)</source>
          <target state="translated">Procedura: recuperare il valore di un elemento (LINQ to XML) (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic shows how to get the value of elements.</source>
          <target state="translated">In questo argomento viene illustrato come ottenere il valore degli elementi.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>There are two main ways to do this.</source>
          <target state="translated">Questa operazione può essere eseguita in due modi.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>One way is to cast an &lt;xref:System.Xml.Linq.XElement&gt; or an &lt;xref:System.Xml.Linq.XAttribute&gt; to the desired type.</source>
          <target state="translated">È possibile eseguire il cast un &lt;xref:System.Xml.Linq.XElement&gt;o &lt;xref:System.Xml.Linq.XAttribute&gt;al tipo desiderato.&lt;/xref:System.Xml.Linq.XAttribute&gt; &lt;/xref:System.Xml.Linq.XElement&gt;</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The explicit conversion operator then converts the contents of the element or attribute to the specified type and assigns it to your variable.</source>
          <target state="translated">L'operatore di conversione esplicito converte quindi il contenuto dell'elemento o dell'attributo nel tipo specificato e lo assegna alla variabile.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Alternatively, you can use the &lt;xref:System.Xml.Linq.XElement.Value%2A?displayProperty=fullName&gt; property or the &lt;xref:System.Xml.Linq.XAttribute.Value%2A?displayProperty=fullName&gt; property.</source>
          <target state="translated">In alternativa, è possibile utilizzare il &lt;xref:System.Xml.Linq.XElement.Value%2A?displayProperty=fullName&gt;proprietà o &lt;xref:System.Xml.Linq.XAttribute.Value%2A?displayProperty=fullName&gt;proprietà.&lt;/xref:System.Xml.Linq.XAttribute.Value%2A?displayProperty=fullName&gt; &lt;/xref:System.Xml.Linq.XElement.Value%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>With Visual Basic, the best approach is to use the &lt;xref:System.Xml.Linq.XElement.Value%2A?displayProperty=fullName&gt; property.</source>
          <target state="translated">Con Visual Basic, l'approccio migliore consiste nell'utilizzare il &lt;xref:System.Xml.Linq.XElement.Value%2A?displayProperty=fullName&gt;proprietà.&lt;/xref:System.Xml.Linq.XElement.Value%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Esempio</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>To retrieve the value of an element, you just cast the &lt;xref:System.Xml.Linq.XElement&gt; object to your desired type.</source>
          <target state="translated">Per recuperare il valore di un elemento, sufficiente eseguire il cast di &lt;xref:System.Xml.Linq.XElement&gt;oggetto al tipo desiderato.&lt;/xref:System.Xml.Linq.XElement&gt;</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You can always cast an element to a string, as follows:</source>
          <target state="translated">È sempre possibile eseguire il cast di un elemento in una stringa, come segue:</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This example produces the following output:</source>
          <target state="translated">Questo esempio produce il seguente output:</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Esempio</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You can also cast elements to types other than string.</source>
          <target state="translated">È anche possibile eseguire il cast di elementi in tipi diversi da stringa.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For example, if you have an element that contains an integer, you can cast it to <ph id="ph1">`int`</ph>, as shown in the following code:</source>
          <target state="translated">Ad esempio, se un elemento contiene un Integer, è possibile eseguirne il cast in <ph id="ph1">`int`</ph>, come illustrato nel codice seguente:</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This example produces the following output:</source>
          <target state="translated">Questo esempio produce il seguente output:</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> provides explicit cast operators for the following data types: <ph id="ph2">`string`</ph>, <ph id="ph3">`bool`</ph>, <ph id="ph4">`bool?`</ph>, <ph id="ph5">`int`</ph>, <ph id="ph6">`int?`</ph>, <ph id="ph7">`uint`</ph>, <ph id="ph8">`uint?`</ph>, <ph id="ph9">`long`</ph>, <ph id="ph10">`long?`</ph>, <ph id="ph11">`ulong`</ph>, <ph id="ph12">`ulong?`</ph>, <ph id="ph13">`float`</ph>, <ph id="ph14">`float?`</ph>, <ph id="ph15">`double`</ph>, <ph id="ph16">`double?`</ph>, <ph id="ph17">`decimal`</ph>, <ph id="ph18">`decimal?`</ph>, <ph id="ph19">`DateTime`</ph>, <ph id="ph20">`DateTime?`</ph>, <ph id="ph21">`TimeSpan`</ph>, <ph id="ph22">`TimeSpan?`</ph>, <ph id="ph23">`GUID`</ph>, and <ph id="ph24">`GUID?`</ph>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph>provides explicit cast operators for the following data types: <ph id="ph2">`string`</ph>, <ph id="ph3">`bool`</ph>, <ph id="ph4">`bool?`</ph>, <ph id="ph5">`int`</ph>, <ph id="ph6">`int?`</ph>, <ph id="ph7">`uint`</ph>, <ph id="ph8">`uint?`</ph>, <ph id="ph9">`long`</ph>, <ph id="ph10">`long?`</ph>, <ph id="ph11">`ulong`</ph>, <ph id="ph12">`ulong?`</ph>, <ph id="ph13">`float`</ph>, <ph id="ph14">`float?`</ph>, <ph id="ph15">`double`</ph>, <ph id="ph16">`double?`</ph>, <ph id="ph17">`decimal`</ph>, <ph id="ph18">`decimal?`</ph>, <ph id="ph19">`DateTime`</ph>, <ph id="ph20">`DateTime?`</ph>, <ph id="ph21">`TimeSpan`</ph>, <ph id="ph22">`TimeSpan?`</ph>, <ph id="ph23">`GUID`</ph>, and <ph id="ph24">`GUID?`</ph>.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> provides the same cast operators for &lt;xref:System.Xml.Linq.XAttribute&gt; objects.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph>fornisce gli stessi operatori di cast per &lt;xref:System.Xml.Linq.XAttribute&gt;oggetti.&lt;/xref:System.Xml.Linq.XAttribute&gt;</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Esempio</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You can use the &lt;xref:System.Xml.Linq.XElement.Value%2A&gt; property to retrieve the contents of an element:</source>
          <target state="translated">È possibile utilizzare il &lt;xref:System.Xml.Linq.XElement.Value%2A&gt;proprietà per recuperare il contenuto di un elemento:&lt;/xref:System.Xml.Linq.XElement.Value%2A&gt;</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This example produces the following output:</source>
          <target state="translated">Questo esempio produce il seguente output:</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Esempio</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Sometimes you try to retrieve the value of an element even though you are not sure it exists.</source>
          <target state="translated">A volte, si tenta di recuperare il valore di un elemento anche se non si è certi che esista.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In this case, when you assign the casted element to a nullable type (either <ph id="ph1">`string`</ph> or one of the nullable types in the <ph id="ph2">[!INCLUDE[dnprdnshort](../../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph>), if the element does not exist the assigned variable is just set to <ph id="ph3">`Nothing`</ph>.</source>
          <target state="translated">In questo caso, quando si assegna l'elemento sottoposto a cast a un tipo nullable (sia <ph id="ph1">`string`</ph> o uno dei tipi nullable di <ph id="ph2">[!INCLUDE[dnprdnshort](../../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph>), se l'elemento non esiste l'oggetto assegnato variabile viene semplicemente impostata su <ph id="ph3">`Nothing`</ph>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The following code shows that when the element might or might not exist, it is easier to use casting than to use the &lt;xref:System.Xml.Linq.XElement.Value%2A&gt; property.</source>
          <target state="translated">Il codice seguente viene dimostrato che quando l'elemento potrebbe o non esistere, è preferibile eseguire il cast anziché usare la &lt;xref:System.Xml.Linq.XElement.Value%2A&gt;proprietà.&lt;/xref:System.Xml.Linq.XElement.Value%2A&gt;</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This code produces the following output:</source>
          <target state="translated">L'output del codice è il seguente:</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In general, you can write simpler code when using casting to retrieve the contents of elements and attributes.</source>
          <target state="translated">In generale, è possibile scrivere codice più semplice quando si usa il cast per recuperare il contenuto di elementi e attributi.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">Vedere anche</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>LINQ to XML Axes (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/linq-to-xml-axes.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Assi LINQ to XML (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/linq-to-xml-axes.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>