<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5f4053de05f0a7a42fccdade1714e08f8eb172e6</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\declared-elements\shadowing.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6a3dcb4742e65cad554563505301890edd140982</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">19bcf9cde653fc46382e953b8d81fe8a5a281d58</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Handback file name: lo-mt_shadowing.65aa29f022d448fb02c6973ee65b708f899f9679.it-it is different with handoff file name: shadowing.65aa29f022d448fb02c6973ee65b708f899f9679.it-it.</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Shadowing in Visual Basic | Microsoft Docs</source>
          <target state="translated">Shadowing in Visual Basic | Documenti di Microsoft</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Shadowing in Visual Basic</source>
          <target state="translated">Shadowing in Visual Basic</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>When two programming elements share the same name, one of them can hide, or <bpt id="p1">*</bpt>shadow<ept id="p1">*</ept>, the other one.</source>
          <target state="translated">Quando due elementi di programmazione condividono lo stesso nome, è possibile nascondere una di esse, o <bpt id="p1">*</bpt>shadow<ept id="p1">*</ept>, l'altro.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In such a situation, the shadowed element is not available for reference; instead, when your code uses the element name, the <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> compiler resolves it to the shadowing element.</source>
          <target state="translated">In questo caso, l'elemento nascosto non è disponibile per riferimento; al contrario, quando il codice utilizza il nome dell'elemento, il <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> compilatore risolve tale nome nell'elemento di shadowing.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Purpose</source>
          <target state="translated">Scopo</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The main purpose of shadowing is to protect the definition of your class members.</source>
          <target state="translated">Lo scopo principale di shadowing è di proteggere la definizione dei membri della classe.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The base class might undergo a change that creates an element with the same name as one you have already defined.</source>
          <target state="translated">La classe di base può essere sottoposto a una modifica che crea un elemento con lo stesso nome di uno che già definito.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>If this happens, the <ph id="ph1">`Shadows`</ph> modifier forces references through your class to be resolved to the member you defined, instead of to the new base class element.</source>
          <target state="translated">In questo caso, il <ph id="ph1">`Shadows`</ph> modificatore impone che fa riferimento tramite la classe deve essere risolto al membro è definito, anziché il nuovo elemento di classe di base.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Types of Shadowing</source>
          <target state="translated">Tipi di Shadowing</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>An element can shadow another element in two different ways.</source>
          <target state="translated">Un elemento può nascondere un altro elemento in due modi diversi.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The shadowing element can be declared inside a subregion of the region containing the shadowed element, in which case the shadowing is accomplished <bpt id="p1">*</bpt>through scope<ept id="p1">*</ept>.</source>
          <target state="translated">L'elemento di shadowing può essere dichiarato all'interno di una sottoarea dell'area contenente l'elemento nascosto, in cui viene eseguito lo shadowing <bpt id="p1">*</bpt>mediante l'ambito<ept id="p1">*</ept>.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Or a deriving class can redefine a member of a base class, in which case the shadowing is done <bpt id="p1">*</bpt>through inheritance<ept id="p1">*</ept>.</source>
          <target state="translated">O una classe derivata può ridefinire un membro di una classe base, in cui viene eseguito lo shadowing <bpt id="p1">*</bpt>tramite l'ereditarietà<ept id="p1">*</ept>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Shadowing Through Scope</source>
          <target state="translated">Shadowing tramite l'ambito</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>It is possible for programming elements in the same module, class, or structure to have the same name but different scope.</source>
          <target state="translated">È possibile per la programmazione di elementi nella stesso modulo, classe o struttura abbiano lo stesso nome ma ambito diverso.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>When two elements are declared in this manner and the code refers to the name they share, the element with the narrower scope shadows the other element (block scope is the narrowest).</source>
          <target state="translated">Quando vengono dichiarati due elementi in questo modo, il codice fa riferimento al nome condividono l'elemento con ambito più ristretto nasconde l'altro elemento (ambito blocco è ristretto).</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For example, a module can define a <ph id="ph1">`Public`</ph> variable named <ph id="ph2">`temp`</ph>, and a procedure within the module can declare a local variable also named <ph id="ph3">`temp`</ph>.</source>
          <target state="translated">Ad esempio, un modulo è possibile definire un <ph id="ph1">`Public`</ph> variabile denominata <ph id="ph2">`temp`</ph>, e una routine all'interno del modulo consente di dichiarare una variabile locale denominata anche <ph id="ph3">`temp`</ph>.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>References to <ph id="ph1">`temp`</ph> from within the procedure access the local variable, while references to <ph id="ph2">`temp`</ph> from outside the procedure access the <ph id="ph3">`Public`</ph> variable.</source>
          <target state="translated">Riferimenti agli <ph id="ph1">`temp`</ph> dall'interno la procedura di accesso alla variabile locale, mentre i riferimenti a <ph id="ph2">`temp`</ph> dall'esterno della routine accedono il <ph id="ph3">`Public`</ph> variabile.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In this case, the procedure variable <ph id="ph1">`temp`</ph> shadows the module variable <ph id="ph2">`temp`</ph>.</source>
          <target state="translated">In questo caso, la variabile della procedura <ph id="ph1">`temp`</ph> nasconde la variabile del modulo <ph id="ph2">`temp`</ph>.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The following illustration shows two variables, both named <ph id="ph1">`temp`</ph>.</source>
          <target state="translated">La figura seguente mostra due variabili, entrambe denominate <ph id="ph1">`temp`</ph>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The local variable <ph id="ph1">`temp`</ph> shadows the member variable <ph id="ph2">`temp`</ph> when accessed from within its own procedure <ph id="ph3">`p`</ph>.</source>
          <target state="translated">La variabile locale <ph id="ph1">`temp`</ph> nasconde la variabile membro <ph id="ph2">`temp`</ph> quando eseguito dall'interno della relativa routine <ph id="ph3">`p`</ph>.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>However, the <ph id="ph1">`MyClass`</ph> keyword bypasses the shadowing and accesses the member variable.</source>
          <target state="translated">Tuttavia, il <ph id="ph1">`MyClass`</ph> (parola chiave) ignora lo shadowing e accede alla variabile membro.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Graphic diagram of shadowing through scope<ept id="p1">](../../../../visual-basic/programming-guide/language-features/declared-elements/media/shadowscope.gif "ShadowScope")</ept></source>
          <target state="translated"><bpt id="p1">![</bpt>Diagramma grafico dello shadowing tramite l'ambito<ept id="p1">](../../../../visual-basic/programming-guide/language-features/declared-elements/media/shadowscope.gif "ShadowScope")</ept></target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Shadowing through scope</source>
          <target state="translated">Shadowing tramite l'ambito</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For an example of shadowing through scope, see <bpt id="p1">[</bpt>How to: Hide a Variable with the Same Name as Your Variable<ept id="p1">](../../../../visual-basic/programming-guide/language-features/declared-elements/how-to-hide-a-variable-with-the-same-name-as-your-variable.md)</ept>.</source>
          <target state="translated">Per un esempio di shadowing tramite l'ambito, vedere <bpt id="p1">[</bpt>procedura: nascondere una variabile con lo stesso nome di variabile<ept id="p1">](../../../../visual-basic/programming-guide/language-features/declared-elements/how-to-hide-a-variable-with-the-same-name-as-your-variable.md)</ept>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Shadowing Through Inheritance</source>
          <target state="translated">Shadowing tramite eredità</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If a derived class redefines a programming element inherited from a base class, the redefining element shadows the original element.</source>
          <target state="translated">Se una classe derivata ridefinisce un elemento di programmazione ereditato da una classe base, l'elemento ridefinisce nasconde l'elemento originale.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>You can shadow any type of declared element, or set of overloaded elements, with any other type.</source>
          <target state="translated">È possibile nascondere qualsiasi tipo di elemento dichiarato o set di elementi in overload con qualsiasi altro tipo.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For example, an <ph id="ph1">`Integer`</ph> variable can shadow a <ph id="ph2">`Function`</ph> procedure.</source>
          <target state="translated">Ad esempio, un <ph id="ph1">`Integer`</ph> variabile può nascondere un <ph id="ph2">`Function`</ph> procedura.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If you shadow a procedure with another procedure, you can use a different parameter list and a different return type.</source>
          <target state="translated">Se si nasconde una routine con un'altra routine, è possibile utilizzare un elenco di parametri e un tipo restituito diverso.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The following illustration shows a base class <ph id="ph1">`b`</ph> and a derived class <ph id="ph2">`d`</ph> that inherits from <ph id="ph3">`b`</ph>.</source>
          <target state="translated">Nella figura seguente viene illustrata una classe base <ph id="ph1">`b`</ph> e una classe derivata <ph id="ph2">`d`</ph> che eredita da <ph id="ph3">`b`</ph>.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The base class defines a procedure named <ph id="ph1">`proc`</ph>, and the derived class shadows it with another procedure of the same name.</source>
          <target state="translated">La classe di base definisce una routine denominata <ph id="ph1">`proc`</ph>, mentre la classe derivata nasconde con un'altra routine con lo stesso nome.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The first <ph id="ph1">`Call`</ph> statement accesses the shadowing <ph id="ph2">`proc`</ph> in the derived class.</source>
          <target state="translated">Il primo <ph id="ph1">`Call`</ph> istruzione accede lo shadowing <ph id="ph2">`proc`</ph> nella classe derivata.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>However, the <ph id="ph1">`MyBase`</ph> keyword bypasses the shadowing and accesses the shadowed procedure in the base class.</source>
          <target state="translated">Tuttavia, il <ph id="ph1">`MyBase`</ph> (parola chiave) ignora lo shadowing e accedere alla routine nascosta nella classe di base.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Graphic diagram of shadowing through inheritance<ept id="p1">](../../../../visual-basic/programming-guide/language-features/declared-elements/media/shadowinherit.gif "ShadowInherit")</ept></source>
          <target state="translated"><bpt id="p1">![</bpt>Diagramma grafico dello shadowing tramite eredità<ept id="p1">](../../../../visual-basic/programming-guide/language-features/declared-elements/media/shadowinherit.gif "ShadowInherit")</ept></target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Shadowing through inheritance</source>
          <target state="translated">Shadowing tramite eredità</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For an example of shadowing through inheritance, see <bpt id="p1">[</bpt>How to: Hide a Variable with the Same Name as Your Variable<ept id="p1">](../../../../visual-basic/programming-guide/language-features/declared-elements/how-to-hide-a-variable-with-the-same-name-as-your-variable.md)</ept> and <bpt id="p2">[</bpt>How to: Hide an Inherited Variable<ept id="p2">](../../../../visual-basic/programming-guide/language-features/declared-elements/how-to-hide-an-inherited-variable.md)</ept>.</source>
          <target state="translated">Per un esempio dello shadowing tramite eredità, vedere <bpt id="p1">[</bpt>procedura: nascondere una variabile con lo stesso nome di variabile<ept id="p1">](../../../../visual-basic/programming-guide/language-features/declared-elements/how-to-hide-a-variable-with-the-same-name-as-your-variable.md)</ept> e <bpt id="p2">[</bpt>procedura: nascondere una variabile ereditata<ept id="p2">](../../../../visual-basic/programming-guide/language-features/declared-elements/how-to-hide-an-inherited-variable.md)</ept>.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Shadowing and Access Level</source>
          <target state="translated">Shadowing e livello di accesso</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The shadowing element is not always accessible from the code using the derived class.</source>
          <target state="translated">L'elemento di shadowing non è sempre accessibile dal codice utilizzando la classe derivata.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For example, it might be declared <ph id="ph1">`Private`</ph>.</source>
          <target state="translated">Ad esempio, potrebbe essere dichiarato <ph id="ph1">`Private`</ph>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>In such a case, shadowing is defeated and the compiler resolves any reference to the same element it would have if there had been no shadowing.</source>
          <target state="translated">In tal caso, lo shadowing viene annullato e il compilatore risolve qualsiasi riferimento all'elemento stesso avrebbe se fosse disponibile alcun shadowing.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This element is the accessible element the fewest derivational steps backward from the shadowing class.</source>
          <target state="translated">Questo elemento è l'elemento accessibile il minor numero di derivazionali indietro passaggi dalla classe di shadowing.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>If the shadowed element is a procedure, the resolution is to the closest accessible version with the same name, parameter list, and return type.</source>
          <target state="translated">Se l'elemento nascosto è una procedura, la risoluzione è nella versione accessibile più vicina con lo stesso nome, elenco di parametri e il tipo restituito.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The following example shows an inheritance hierarchy of three classes.</source>
          <target state="translated">Nell'esempio seguente viene illustrata una gerarchia di ereditarietà delle tre classi.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Each class defines a <ph id="ph1">`Sub`</ph> procedure <ph id="ph2">`display`</ph>, and each derived class shadows the <ph id="ph3">`display`</ph> procedure in its base class.</source>
          <target state="translated">Ogni classe definisce un <ph id="ph1">`Sub`</ph> procedura <ph id="ph2">`display`</ph>, e ciascuna classe derivata nasconde la <ph id="ph3">`display`</ph> procedura nella relativa classe base.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>In the preceding example, the derived class <ph id="ph1">`secondClass`</ph> shadows <ph id="ph2">`display`</ph> with a <ph id="ph3">`Private`</ph> procedure.</source>
          <target state="translated">Nell'esempio precedente, la classe derivata <ph id="ph1">`secondClass`</ph> ombreggiature <ph id="ph2">`display`</ph> con un <ph id="ph3">`Private`</ph> procedura.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>When module <ph id="ph1">`callDisplay`</ph> calls <ph id="ph2">`display`</ph> in <ph id="ph3">`secondClass`</ph>, the calling code is outside <ph id="ph4">`secondClass`</ph> and therefore cannot access the private <ph id="ph5">`display`</ph> procedure.</source>
          <target state="translated">Quando modulo <ph id="ph1">`callDisplay`</ph> chiamate <ph id="ph2">`display`</ph> in <ph id="ph3">`secondClass`</ph>, il codice chiamante è esterno <ph id="ph4">`secondClass`</ph> e pertanto non può accedere privato <ph id="ph5">`display`</ph> procedura.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Shadowing is defeated, and the compiler resolves the reference to the base class <ph id="ph1">`display`</ph> procedure.</source>
          <target state="translated">Lo shadowing viene annullato e il compilatore risolve il riferimento alla classe di base <ph id="ph1">`display`</ph> procedura.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>However, the further derived class <ph id="ph1">`thirdClass`</ph> declares <ph id="ph2">`display`</ph> as <ph id="ph3">`Public`</ph>, so the code in <ph id="ph4">`callDisplay`</ph> can access it.</source>
          <target state="translated">Tuttavia, l'altra classe derivata <ph id="ph1">`thirdClass`</ph> dichiara <ph id="ph2">`display`</ph> come <ph id="ph3">`Public`</ph>, pertanto il codice in <ph id="ph4">`callDisplay`</ph> possano accedervi.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Shadowing and Overriding</source>
          <target state="translated">Shadowing e override</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Do not confuse shadowing with overriding.</source>
          <target state="translated">Non confondere shadowing e override.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Both are used when a derived class inherits from a base class, and both redefine one declared element with another.</source>
          <target state="translated">Entrambi vengono utilizzati quando una classe derivata eredita da una classe base ed entrambi consentono di ridefinire un elemento dichiarato con un altro.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>But there are significant differences between the two.</source>
          <target state="translated">Ma esistono differenze significative tra i due.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>For a comparison, see <bpt id="p1">[</bpt>Differences Between Shadowing and Overriding<ept id="p1">](../../../../visual-basic/programming-guide/language-features/declared-elements/differences-between-shadowing-and-overriding.md)</ept>.</source>
          <target state="translated">Per un confronto, vedere <bpt id="p1">[</bpt>le differenze tra Shadowing e sostituzione<ept id="p1">](../../../../visual-basic/programming-guide/language-features/declared-elements/differences-between-shadowing-and-overriding.md)</ept>.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Shadowing and Overloading</source>
          <target state="translated">Shadowing e overload</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>If you shadow the same base class element with more than one element in your derived class, the shadowing elements become overloaded versions of that element.</source>
          <target state="translated">Se si nasconde lo stesso elemento di classe di base con più di un elemento nella classe derivata, gli elementi di shadowing diventeranno versioni di overload di tale elemento.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Procedure Overloading<ept id="p1">](../../../../visual-basic/programming-guide/language-features/procedures/procedure-overloading.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>overload di routine<ept id="p1">](../../../../visual-basic/programming-guide/language-features/procedures/procedure-overloading.md)</ept>.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Accessing a Shadowed Element</source>
          <target state="translated">Accesso a un elemento nascosto</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>When you access an element from a derived class, you normally do so through the current instance of that derived class, by qualifying the element name with the <ph id="ph1">`Me`</ph> keyword.</source>
          <target state="translated">Quando si accede a un elemento da una classe derivata, normalmente avviene tramite l'istanza corrente della classe derivata, qualificando il nome dell'elemento con il <ph id="ph1">`Me`</ph> (parola chiave).</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>If your derived class shadows the element in the base class, you can access the base class element by qualifying it with the <ph id="ph1">`MyBase`</ph> keyword.</source>
          <target state="translated">Se la classe derivata nasconde l'elemento nella classe di base, è possibile accedere all'elemento della classe base qualificandola con il <ph id="ph1">`MyBase`</ph> (parola chiave).</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>For an example of accessing a shadowed element, see <bpt id="p1">[</bpt>How to: Access a Variable Hidden by a Derived Class<ept id="p1">](../../../../visual-basic/programming-guide/language-features/declared-elements/how-to-access-a-variable-hidden-by-a-derived-class.md)</ept>.</source>
          <target state="translated">Per un esempio di accesso a un elemento nascosto, vedere <bpt id="p1">[</bpt>procedura: accedere a una variabile nascosta da una classe derivata<ept id="p1">](../../../../visual-basic/programming-guide/language-features/declared-elements/how-to-access-a-variable-hidden-by-a-derived-class.md)</ept>.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Declaration of the Object Variable</source>
          <target state="translated">Dichiarazione di variabile oggetto</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>How you create the object variable can also affect whether the derived class accesses a shadowing element or the shadowed element.</source>
          <target state="translated">Come si crea la variabile oggetto può anche determinare se la classe derivata accede a un elemento di shadowing o all'elemento nascosto.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The following example creates two objects from a derived class, but one object is declared as the base class and the other as the derived class.</source>
          <target state="translated">Nell'esempio seguente crea due oggetti da una classe derivata, ma un oggetto viene dichiarato come classe di base e l'altro come classe derivata.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>In the preceding example, the variable <ph id="ph1">`basObj`</ph> is declared as the base class.</source>
          <target state="translated">Nell'esempio precedente, la variabile <ph id="ph1">`basObj`</ph> viene dichiarata come classe di base.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Assigning a <ph id="ph1">`dervCls`</ph> object to it constitutes a widening conversion and is therefore valid.</source>
          <target state="translated">L'assegnazione di un <ph id="ph1">`dervCls`</ph> oggetto costituisce una conversione di ampliamento e risulta quindi valido.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>However, the base class cannot access the shadowing version of the variable <ph id="ph1">`z`</ph> in the derived class, so the compiler resolves <ph id="ph2">`basObj.z`</ph> to the original base class value.</source>
          <target state="translated">Tuttavia, la classe di base non può accedere alla versione di shadowing della variabile <ph id="ph1">`z`</ph> nella classe derivata, pertanto, il compilatore risolve <ph id="ph2">`basObj.z`</ph> il valore di classe di base originale.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">Vedere anche</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>References to Declared Elements<ept id="p1">](../../../../visual-basic/programming-guide/language-features/declared-elements/references-to-declared-elements.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Riferimenti a elementi dichiarati<ept id="p1">](../../../../visual-basic/programming-guide/language-features/declared-elements/references-to-declared-elements.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Scope in Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/language-features/declared-elements/scope.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Ambito in Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/language-features/declared-elements/scope.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Widening and Narrowing Conversions<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Ampliamento e restrizione conversioni<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Shadows<ept id="p1">](../../../../visual-basic/language-reference/modifiers/shadows.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Ombreggiature<ept id="p1">](../../../../visual-basic/language-reference/modifiers/shadows.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Overrides<ept id="p1">](../../../../visual-basic/language-reference/modifiers/overrides.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Esegue l'override<ept id="p1">](../../../../visual-basic/language-reference/modifiers/overrides.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Me, My, MyBase, and MyClass<ept id="p1">](../../../../visual-basic/programming-guide/program-structure/me-my-mybase-and-myclass.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Me, My, MyBase e MyClass<ept id="p1">](../../../../visual-basic/programming-guide/program-structure/me-my-mybase-and-myclass.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Inheritance Basics<ept id="p1">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/inheritance-basics.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>Nozioni fondamentali sull'ereditarietà<ept id="p1">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/inheritance-basics.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>