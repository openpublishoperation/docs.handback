<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-6a73dd2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2c31622ff97f30e565ed2cd82128518d04d5d1dc</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\base-types\alternation.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p2</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2346f420e8bbef8241c357ca7b884aee9e99c0b2</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3d3448326504745578e19e66b9f54daab59c4a45</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">file alternation.d53325d8b22222a052fbeb19994affe1399919ce.ja-jp.xlf is out of handoff scope</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Alternation constructs in regular expressions</source>
          <target state="translated">正規表現での代替構成体</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Alternation constructs in regular expressions</source>
          <target state="translated">正規表現での代替構成体</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Alternation constructs in regular expressions</source>
          <target state="translated">正規表現での代替構成体</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Alternation constructs modify a regular expression to enable either/or or conditional matching.</source>
          <target state="translated">代替構成体は、択一条件または条件一致を有効にするように正規表現を変更します。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>.NET supports three alternation constructs:</source>
          <target state="translated">.NET では、次の 3 つの代替構成体がサポートされています。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Pattern matching with <bpt id="p1">**</bpt><ph id="ph1">|</ph><ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt><ph id="ph1">|</ph><ept id="p1">**</ept> を使用したパターン マッチ</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Conditional matching with <bpt id="p1">**</bpt>(?(<ept id="p1">**</ept><bpt id="p2">_</bpt>expression<ept id="p2">_</ept><bpt id="p3">**</bpt>)<ept id="p3">**</ept><bpt id="p4">_</bpt>yes<ept id="p4">_</ept><bpt id="p5">**</bpt><ph id="ph1">|</ph><ept id="p5">**</ept><bpt id="p6">_</bpt>no<ept id="p6">_</ept><bpt id="p7">**</bpt>)<ept id="p7">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>(?(<ept id="p1">**</ept><bpt id="p2">_</bpt>expression<ept id="p2">_</ept><bpt id="p3">**</bpt>)<ept id="p3">**</ept><bpt id="p4">_</bpt>yes<ept id="p4">_</ept><bpt id="p5">**</bpt><ph id="ph1">|</ph><ept id="p5">**</ept><bpt id="p6">_</bpt>no<ept id="p6">_</ept><bpt id="p7">**</bpt>)<ept id="p7">**</ept> を使用した条件一致</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Conditional matching based on a valid captured group</source>
          <target state="translated">有効なキャプチャ グループに基づく条件一致</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Pattern matching with |</source>
          <target state="translated">| を使用したパターン マッチ</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You can use the vertical bar (|) character to match any one of a series of patterns, where the | character separates each pattern.</source>
          <target state="translated">縦棒 (|) 文字を使って、| 文字で各パターンを区切った一連のパターンのいずれかと照合できます。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Like the positive character class, the | character can be used to match any one of a number of single characters.</source>
          <target state="translated">肯定的文字クラスと同じように、| 文字を使うと、複数の文字のいずれか 1 文字と照合できます。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The following example uses both a positive character class and either/or pattern matching with the | character to locate occurrences of the words "gray" or "grey" in a string.</source>
          <target state="translated">次の例は、肯定的文字クラスと | 文字との択一パターン マッチを使って、文字列から単語 "gray"や "grey" を検索します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In this case, the | character produces a regular expression that is more verbose.</source>
          <target state="translated">この場合、| 文字を使うと、より詳細な正規表現が生成されます。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The regular expression that uses the | character, <ph id="ph1">`\bgr(a|e)y\b,`</ph> is interpreted as shown in the following table.</source>
          <target state="translated">| 文字を使う正規表現 <ph id="ph1">`\bgr(a|e)y\b,`</ph> の解釈を次の表に示します。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">パターン</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">説明</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Start at a word boundary.</source>
          <target state="translated">ワード境界から開始します。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Match the characters "gr".</source>
          <target state="translated">文字 "gr" と一致します。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>`(a</source>
          <target state="translated">`(a</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>e)`</source>
          <target state="translated">e)`</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Match either an "a" or an "e".</source>
          <target state="translated">"a" または "e" と一致します。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Match a "y" on a word boundary.</source>
          <target state="translated">ワード境界にある "y" と一致します。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The | character can also be used to perform an either/or match with multiple characters or subexpressions, which can include any combination of character literals and regular expression language elements.</source>
          <target state="translated">また、| 文字を使って、複数の文字や部分式との択一照合を実行できます。これは、文字リテラルと正規表現言語要素を自由に組み合わせて使うことができます。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>(The character class does not provide this functionality.) The following example uses the | character to extract either a U.S. Social Security Number (SSN), which is a 9-digit number with the format <bpt id="p1">*</bpt>ddd-dd-dddd<ept id="p1">*</ept>, or a U.S. Employer Identification Number (EIN), which is a 9-digit number with the format <bpt id="p2">*</bpt>dd-ddddddd<ept id="p2">*</ept>.</source>
          <target state="translated">(文字クラスにこの機能はありません)。次の例では、| 文字を使って、米国の社会保障番号 (SSN) (<bpt id="p1">*</bpt>ddd-dd-dddd<ept id="p1">*</ept> という形式の 9 桁の数字)、または米国の雇用者番号 (EIN) (<bpt id="p2">*</bpt>dd-ddddddd<ept id="p2">*</ept> という形式の 9 桁の数字) のいずれかを抽出します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The regular expression <ph id="ph1">`\b(\d{2}-\d{7}|\d{3}-\d{2}-\d{4})\b`</ph> is interpreted as shown in the following table.</source>
          <target state="translated">この正規表現 <ph id="ph1">`\b(\d{2}-\d{7}|\d{3}-\d{2}-\d{4})\b`</ph> の解釈を次の表に示します。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">パターン</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">説明</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Start at a word boundary.</source>
          <target state="translated">ワード境界から開始します。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>`(\d{2}-\d{7}</source>
          <target state="translated">`(\d{2}-\d{7}</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>;\d{3}-\d{2}-\d{4})`</source>
          <target state="translated">;\d{3}-\d{2}-\d{4})`</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Match either of the following: two decimal digits followed by a hyphen followed by seven decimal digits; or three decimal digits, a hyphen, two decimal digits, another hyphen, and four decimal digits.</source>
          <target state="translated">「2 桁と 7 桁の 10 進数がハイフンでつながれた文字列」または「3 桁、2 桁、4 桁の 10 進数がそれぞれハイフンでつながれた文字列」のいずれかと一致します。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>End the match at a word boundary.</source>
          <target state="translated">ワード境界で照合を終了します。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Conditional matching with an expression</source>
          <target state="translated">式を使用した条件一致</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This language element attempts to match one of two patterns depending on whether it can match an initial pattern.</source>
          <target state="translated">この言語要素では、最初のパターンに一致するかどうかに応じて、2 つのパターンのいずれかの照合を実行します。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Its syntax is:</source>
          <target state="translated">構文は次のとおりです。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>(?(<ept id="p1">**</ept><bpt id="p2">_</bpt>expression<ept id="p2">_</ept><bpt id="p3">**</bpt>)<ept id="p3">**</ept><bpt id="p4">_</bpt>yes<ept id="p4">_</ept><bpt id="p5">**</bpt><ph id="ph1">|</ph><ept id="p5">**</ept><bpt id="p6">_</bpt>no<ept id="p6">_</ept><bpt id="p7">**</bpt>)<ept id="p7">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>(?(<ept id="p1">**</ept><bpt id="p2">_</bpt>expression<ept id="p2">_</ept><bpt id="p3">**</bpt>)<ept id="p3">**</ept><bpt id="p4">_</bpt>yes<ept id="p4">_</ept><bpt id="p5">**</bpt><ph id="ph1">|</ph><ept id="p5">**</ept><bpt id="p6">_</bpt>no<ept id="p6">_</ept><bpt id="p7">**</bpt>)<ept id="p7">**</ept></target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>where <bpt id="p1">*</bpt>expression<ept id="p1">*</ept> is the initial pattern to match, <bpt id="p2">*</bpt>yes<ept id="p2">*</ept> is the pattern to match if expression is matched, and <bpt id="p3">*</bpt>no<ept id="p3">*</ept> is the optional pattern to match if <bpt id="p4">*</bpt>expression<ept id="p4">*</ept> is not matched.</source>
          <target state="translated">ここで、<bpt id="p1">*</bpt>expression<ept id="p1">*</ept> は照合する最初のパターン、<bpt id="p2">*</bpt>yes<ept id="p2">*</ept> は expression が一致した場合に照合するパターン、<bpt id="p3">*</bpt>no<ept id="p3">*</ept> は <bpt id="p4">*</bpt>expression<ept id="p4">*</ept> が一致しなかった場合に照合するパターン (省略可能) です。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The regular expression engine treats <bpt id="p1">*</bpt>expression<ept id="p1">*</ept> as a zero-width assertion; that is, the regular expression engine does not advance in the input stream after it evaluates <bpt id="p2">*</bpt>expression<ept id="p2">*</ept>.</source>
          <target state="translated"><bpt id="p1">*</bpt>expression<ept id="p1">*</ept> は正規表現エンジンによってゼロ幅アサーションとして処理されるので、<bpt id="p2">*</bpt>expression<ept id="p2">*</ept> が評価された後、正規表現エンジンによる入力ストリーム内の評価位置は前に進みません。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Therefore, this construct is equivalent to the following:</source>
          <target state="translated">そのため、この構成体は次の構成体と同じです。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>(?(?<ept id="p1">**</ept><ph id="ph1">=</ph><bpt id="p2">_</bpt>expression<ept id="p2">_</ept><bpt id="p3">**</bpt>)<ept id="p3">**</ept><bpt id="p4">_</bpt>yes<ept id="p4">_</ept><bpt id="p5">**</bpt><ph id="ph2">|</ph><ept id="p5">**</ept><bpt id="p6">_</bpt>no<ept id="p6">_</ept><bpt id="p7">**</bpt>)<ept id="p7">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>(?(?<ept id="p1">**</ept><ph id="ph1">=</ph><bpt id="p2">_</bpt>expression<ept id="p2">_</ept><bpt id="p3">**</bpt>)<ept id="p3">**</ept><bpt id="p4">_</bpt>yes<ept id="p4">_</ept><bpt id="p5">**</bpt><ph id="ph2">|</ph><ept id="p5">**</ept><bpt id="p6">_</bpt>no<ept id="p6">_</ept><bpt id="p7">**</bpt>)<ept id="p7">**</ept></target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>where <bpt id="p1">**</bpt>(?<ept id="p1">**</ept><ph id="ph1">=</ph><bpt id="p2">_</bpt>expression<ept id="p2">_</ept><bpt id="p3">**</bpt>)<ept id="p3">**</ept> is a zero-width assertion construct.</source>
          <target state="translated">ここで、<bpt id="p1">**</bpt>(?<ept id="p1">**</ept><ph id="ph1">=</ph><bpt id="p2">_</bpt>expression<ept id="p2">_</ept><bpt id="p3">**</bpt>)<ept id="p3">**</ept> はゼロ幅アサーションの構成体として解釈されます</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>(For more information, see <bpt id="p1">[</bpt>Grouping constructs in regular expressions<ept id="p1">](grouping.md)</ept>.) Because the regular expression engine interprets <bpt id="p2">*</bpt>expression<ept id="p2">*</ept> as an anchor (a zero-width assertion), <bpt id="p3">*</bpt>expression<ept id="p3">*</ept> must either be a zero-width assertion (for more information, see <bpt id="p4">[</bpt>Anchors in regular expressions<ept id="p4">](anchors.md)</ept>) or a subexpression that is also contained in <bpt id="p5">*</bpt>yes<ept id="p5">*</ept>.</source>
          <target state="translated">(詳細については、「<bpt id="p1">[</bpt>正規表現でのグループ化構成体<ept id="p1">](grouping.md)</ept>」をご覧ください)。正規表現エンジンによって <bpt id="p2">*</bpt>expression<ept id="p2">*</ept> はアンカー (ゼロ幅アサーション) として解釈されるので、<bpt id="p3">*</bpt>expression<ept id="p3">*</ept> は、ゼロ幅アサーション (詳細については、「<bpt id="p4">[</bpt>正規表現のアンカー<ept id="p4">](anchors.md)</ept>」を参照) または <bpt id="p5">*</bpt>yes<ept id="p5">*</ept> にも含まれている部分式のどちらかである必要があります。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Otherwise, the <bpt id="p1">*</bpt>yes<ept id="p1">*</ept> pattern cannot be matched.</source>
          <target state="translated">それ以外の場合、<bpt id="p1">*</bpt>yes<ept id="p1">*</ept> パターンには一致しません。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">*</bpt>expression<ept id="p1">*</ept> is a named or numbered capturing group, the alternation construct is interpreted as a capture test; for more information, see the next section, <bpt id="p2">[</bpt>Conditional matching based on a valid captured group<ept id="p2">](#conditional-matching-based-on-a-valid-captured-group)</ept>.</source>
          <target state="translated"><bpt id="p1">*</bpt>expression<ept id="p1">*</ept> が名前付きキャプチャ グループや番号付きキャプチャ グループである場合、代替構成体はキャプチャ テストとして解釈されます。詳しくは、次のセクション「<bpt id="p2">[</bpt>有効なキャプチャ グループに基づく条件一致<ept id="p2">](#conditional-matching-based-on-a-valid-captured-group)</ept>」をご覧ください。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>In other words, the regular expression engine does not attempt to match the captured substring, but instead tests for the presence or absence of the group.</source>
          <target state="translated">つまり、正規表現エンジンは、キャプチャした部分文字列を照合しようとはせず、代わりにグループが存在するかどうかをテストします。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The following example is a variation of the example that appears in the previous section.</source>
          <target state="translated">次の例は、前のセクションで説明した例を少し変更したものです。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>It uses conditional matching to determine whether the first three characters after a word boundary are two digits followed by a hyphen.</source>
          <target state="translated">条件一致を使用して、ワード境界の後の最初の 3 文字が「2 桁の数字の後にハイフン」であるかどうかを判定します。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>If they are, it attempts to match a U.S. Employer Identification Number (EIN).</source>
          <target state="translated">一致した場合は、米国の雇用者番号 (EIN) との照合を試みます。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>If not, it attempts to match a U.S. Social Security Number (SSN).</source>
          <target state="translated">一致しない場合は、米国の社会保険番号 (SSN) との照合を試みます。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The regular expression pattern <ph id="ph1">`\b(?(\d{2}-)\d{2}-\d{7}|\d{3}-\d{2}-\d{4})\b`</ph> is interpreted as shown in the following table.</source>
          <target state="translated">この正規表現パターン <ph id="ph1">`\b(?(\d{2}-)\d{2}-\d{7}|\d{3}-\d{2}-\d{4})\b`</ph> の解釈を次の表に示します。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">パターン</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">説明</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Start at a word boundary.</source>
          <target state="translated">ワード境界から開始します。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Determine whether the next three characters consist of two digits followed by a hyphen.</source>
          <target state="translated">次の 3 文字が「2 桁の数字の後にハイフン」で構成されているかどうかを判定します。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>If the previous pattern matches, match two digits followed by a hyphen followed by seven digits.</source>
          <target state="translated">前のパターンに一致する場合は、「2 桁の数字の後にハイフン、その後に 7 桁の数字」を照合します。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>If the previous pattern does not match, match three decimal digits, a hyphen, two decimal digits, another hyphen, and four decimal digits.</source>
          <target state="translated">前のパターンに一致しない場合は、「3 桁の 10 進数、ハイフン、2 桁の 10 進数、もう 1 つのハイフン、および 4 桁の 10 進数」を照合します。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Match a word boundary.</source>
          <target state="translated">ワード境界に一致します。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Conditional matching based on a valid captured group</source>
          <target state="translated">有効なキャプチャ グループに基づく条件一致</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>This language element attempts to match one of two patterns depending on whether it has matched a specified capturing group.</source>
          <target state="translated">この言語要素では、指定されたキャプチャ グループに一致するかどうかに応じて、2 つのパターンのいずれかを照合します。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Its syntax is:</source>
          <target state="translated">構文は次のとおりです。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>(?(<ept id="p1">**</ept><bpt id="p2">_</bpt>name<ept id="p2">_</ept><bpt id="p3">**</bpt>)<ept id="p3">**</ept><bpt id="p4">_</bpt>yes<ept id="p4">_</ept><bpt id="p5">**</bpt><ph id="ph1">|</ph><ept id="p5">**</ept><bpt id="p6">_</bpt>no<ept id="p6">_</ept><bpt id="p7">**</bpt>)<ept id="p7">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>(?(<ept id="p1">**</ept><bpt id="p2">_</bpt>name<ept id="p2">_</ept><bpt id="p3">**</bpt>)<ept id="p3">**</ept><bpt id="p4">_</bpt>yes<ept id="p4">_</ept><bpt id="p5">**</bpt><ph id="ph1">|</ph><ept id="p5">**</ept><bpt id="p6">_</bpt>no<ept id="p6">_</ept><bpt id="p7">**</bpt>)<ept id="p7">**</ept></target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>or</source>
          <target state="translated">または</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>(?(<ept id="p1">**</ept><bpt id="p2">_</bpt>number<ept id="p2">_</ept><bpt id="p3">**</bpt>)<ept id="p3">**</ept><bpt id="p4">_</bpt>yes<ept id="p4">_</ept><bpt id="p5">**</bpt><ph id="ph1">|</ph><ept id="p5">**</ept><bpt id="p6">_</bpt>no<ept id="p6">_</ept><bpt id="p7">**</bpt>)<ept id="p7">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>(?(<ept id="p1">**</ept><bpt id="p2">_</bpt>number<ept id="p2">_</ept><bpt id="p3">**</bpt>)<ept id="p3">**</ept><bpt id="p4">_</bpt>yes<ept id="p4">_</ept><bpt id="p5">**</bpt><ph id="ph1">|</ph><ept id="p5">**</ept><bpt id="p6">_</bpt>no<ept id="p6">_</ept><bpt id="p7">**</bpt>)<ept id="p7">**</ept></target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>where <bpt id="p1">*</bpt>name<ept id="p1">*</ept> is the name and <bpt id="p2">*</bpt>number<ept id="p2">*</ept> is the number of a capturing group, <bpt id="p3">*</bpt>yes<ept id="p3">*</ept> is the expression to match if name or number has a match, and <bpt id="p4">*</bpt>no<ept id="p4">*</ept> is the optional expression to match if it does not.</source>
          <target state="translated">ここで、<bpt id="p1">*</bpt>name<ept id="p1">*</ept> はキャプチャ グループの名前、<bpt id="p2">*</bpt>number<ept id="p2">*</ept> はキャプチャ グループの番号です。<bpt id="p3">*</bpt>yes<ept id="p3">*</ept> は、name または number が一致する場合に照合する式です。<bpt id="p4">*</bpt>no<ept id="p4">*</ept> は、一致しない場合に照合する式 (省略可能) です。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">*</bpt>name<ept id="p1">*</ept> does not correspond to the name of a capturing group that is used in the regular expression pattern, the alternation construct is interpreted as an expression test, as explained in the previous section.</source>
          <target state="translated"><bpt id="p1">*</bpt>name<ept id="p1">*</ept> が正規表現パターンで使用されているキャプチャ グループの名前に一致しない場合、その代替構成体は式のテスト (前のセクションで説明したもの) として解釈されます。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Typically, this means that expression evaluates to <ph id="ph1">`false`</ph>.</source>
          <target state="translated">通常、これは expression が <ph id="ph1">`false`</ph> に評価されることを意味します。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`number`</ph> does not correspond to a numbered capturing group that is used in the regular expression pattern, the regular expression engine throws an <bpt id="p1">[</bpt>ArgumentException<ept id="p1">](xref:System.ArgumentException)</ept>.</source>
          <target state="translated"><ph id="ph1">`number`</ph> が正規表現パターンで使用されている番号付きキャプチャ グループに対応しない場合は、正規表現エンジンが <bpt id="p1">[</bpt>ArgumentException<ept id="p1">](xref:System.ArgumentException)</ept> をスローします。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The following example is a variation of the example that appears in the previous section.</source>
          <target state="translated">次の例は、前のセクションで説明した例を少し変更したものです。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>It uses a capturing group named <ph id="ph1">`n2`</ph> that consists of two digits followed by a hyphen.</source>
          <target state="translated">「2 桁の数字の後にハイフン」で構成される <ph id="ph1">`n2`</ph> という名前付きキャプチャ グループを使用しています。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The alternation construct tests whether this capturing group has been matched in the input string.</source>
          <target state="translated">代替構成体により、このキャプチャ グループが入力文字列に一致したかどうかテストされます。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>If it has, the alternation construct attempts to match the last seven digits of a nine-digit U.S. Employer Identification Number (EIN).</source>
          <target state="translated">一致した場合は、場合に、米国の 9 桁の雇用者番号 (EIN) との照合を試みます。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>If it has not, it attempts to match a nine-digit U.S. Social Security Number (SSN).</source>
          <target state="translated">一致しなかった場合は、米国の 9 桁の社会保険番号 (SSN) との照合を試みます。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The regular expression pattern <ph id="ph1">`\b(?&lt;n2&gt;\d{2}-)*(?(n2)\d{7}|\d{3}-\d{2}-\d{4})\b`</ph> is interpreted as shown in the following table.</source>
          <target state="translated">この正規表現パターン <ph id="ph1">`\b(?&lt;n2&gt;\d{2}-)*(?(n2)\d{7}|\d{3}-\d{2}-\d{4})\b`</ph> の解釈を次の表に示します。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">パターン</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">説明</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Start at a word boundary.</source>
          <target state="translated">ワード境界から開始します。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Match zero or one occurrence of two digits followed by a hyphen.</source>
          <target state="translated">「2 桁の数字の後にハイフン」の 0 個または 1 個の出現と照合します。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Name this capturing group <ph id="ph1">`n2`</ph>.</source>
          <target state="translated">このキャプチャ グループに <ph id="ph1">`n2`</ph> という名前を付けます。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Test whether <ph id="ph1">`n2`</ph> was matched in the input string.</source>
          <target state="translated"><ph id="ph1">`n2`</ph> への一致が入力文字列内に見つかるかどうかテストします。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`n2`</ph> was matched, match seven decimal digits.</source>
          <target state="translated"><ph id="ph1">`n2`</ph> が一致した場合は、7 桁の 10 進数を照合します。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>;\d{3}-\d{2}-\d{4}`</source>
          <target state="translated">;\d{3}-\d{2}-\d{4}`</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`n2`</ph> was not matched, match three decimal digits, a hyphen, two decimal digits, another hyphen, and four decimal digits.</source>
          <target state="translated"><ph id="ph1">`n2`</ph> が一致しなかった場合は、「3 桁の 10 進数、ハイフン、2 桁の 10 進数、もう 1 つのハイフン、および 4 桁の 10 進数」を照合します。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Match a word boundary.</source>
          <target state="translated">ワード境界に一致します。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>A variation of this example that uses a numbered group instead of a named group is shown in the following example.</source>
          <target state="translated">この例を少し変更して、名前付きグループではなく番号付きグループを使用する例を次に示します。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Its regular expression pattern is <ph id="ph1">`\b(\d{2}-)*(?(1)\d{7}|\d{3}-\d{2}-\d{4})\b`</ph>.</source>
          <target state="translated">正規表現パターンは <ph id="ph1">`\b(\d{2}-)*(?(1)\d{7}|\d{3}-\d{2}-\d{4})\b`</ph> です。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">関連項目</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Regular expression language - quick reference<ept id="p1">](quick-ref.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>正規表現言語 - クイック リファレンス<ept id="p1">](quick-ref.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>