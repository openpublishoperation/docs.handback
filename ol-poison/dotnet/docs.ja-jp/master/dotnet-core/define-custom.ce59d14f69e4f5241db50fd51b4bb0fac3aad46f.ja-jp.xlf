<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-6a73dd2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bb62bdd03d4af4f764ac3bc8734c67902fffa798</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\base-types\define-custom.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p2</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e8a578b2399cfe91b7acaa018b32cc2f442e7ad7</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0579fc15ad2e495ba4d1411d44b05f042ced4df4</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">file define-custom.ce59d14f69e4f5241db50fd51b4bb0fac3aad46f.ja-jp.xlf is out of handoff scope</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: define and use custom numeric format providers</source>
          <target state="translated">方法: カスタム数値書式プロバイダーを定義して使用する</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to define and use custom numeric format providers</source>
          <target state="translated">方法: カスタム数値書式プロバイダーを定義して使用する</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>How to: define and use custom numeric format providers</source>
          <target state="translated">方法: カスタム数値書式プロバイダーを定義して使用する</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>.NET gives you extensive control over the string representation of numeric values.</source>
          <target state="translated">.NET では、数値の文字列形式を広範囲に制御できます。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>It supports the following features for customizing the format of numeric values:</source>
          <target state="translated">数値の書式をカスタマイズするため、次の機能をサポートしています。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Standard numeric format strings, which provide a predefined set of formats for converting numbers to their string representation.</source>
          <target state="translated">標準の数値書式指定文字列: 数値をその文字列形式に変換するための定義済みの書式セットを提供します。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You can use them with any numeric formatting method, such as <bpt id="p1">[</bpt>Decimal.ToString(String<ept id="p1">](xref:System.Decimal.ToString(System.String))</ept>, that has a format parameter.</source>
          <target state="translated">これらは、format パラメーターを持つ <bpt id="p1">[</bpt>Decimal.ToString(String<ept id="p1">](xref:System.Decimal.ToString(System.String))</ept> などの任意の数値書式指定メソッドと共に使用できます。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For details, see <bpt id="p1">[</bpt>Standard numeric format strings<ept id="p1">](standard-numeric.md)</ept>.</source>
          <target state="translated">詳細については、「<bpt id="p1">[</bpt>標準の数値書式指定文字列<ept id="p1">](standard-numeric.md)</ept>」を参照してください。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Custom numeric format strings, which provide a set of symbols that can be combined to define custom numeric format specifiers.</source>
          <target state="translated">カスタム数値書式指定文字列: カスタム数値書式指定子を定義するために結合できる記号のセットを提供します。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>They can also be used with any numeric formatting method, such as <bpt id="p1">[</bpt>Decimal.ToString(String<ept id="p1">](xref:System.Decimal.ToString(System.String))</ept>, that has a format parameter.</source>
          <target state="translated">これらは、format パラメーターを持つ <bpt id="p1">[</bpt>Decimal.ToString(String<ept id="p1">](xref:System.Decimal.ToString(System.String))</ept> などの任意の数値書式指定メソッドでも使用できます。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For details, see <bpt id="p1">[</bpt>Custom numeric format strings<ept id="p1">](custom-numeric.md)</ept>.</source>
          <target state="translated">詳細については、「<bpt id="p1">[</bpt>カスタム数値書式指定文字列<ept id="p1">](custom-numeric.md)</ept>」を参照してください。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Custom <bpt id="p1">[</bpt>CultureInfo<ept id="p1">](xref:System.Globalization.CultureInfo)</ept> or <bpt id="p2">[</bpt>NumberFormatInfo<ept id="p2">](xref:System.Globalization.NumberFormatInfo)</ept> objects, which define the symbols and format patterns used in displaying the string representations of numeric values.</source>
          <target state="translated">カスタムの <bpt id="p1">[</bpt>CultureInfo<ept id="p1">](xref:System.Globalization.CultureInfo)</ept> オブジェクトまたは <bpt id="p2">[</bpt>NumberFormatInfo<ept id="p2">](xref:System.Globalization.NumberFormatInfo)</ept> オブジェクト: 記号を定義し、数値の文字列形式を表示するために使用されるパターンの書式を設定します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You can use them with any numeric formatting method, such as <bpt id="p1">[</bpt>ToString<ept id="p1">](xref:System.Int32.ToString(System.IFormatProvider))</ept>, that has a <bpt id="p2">*</bpt>provider<ept id="p2">*</ept> parameter.</source>
          <target state="translated">これらは、<bpt id="p2">*</bpt>provider<ept id="p2">*</ept> パラメーターを持つ <bpt id="p1">[</bpt>ToString<ept id="p1">](xref:System.Int32.ToString(System.IFormatProvider))</ept> などの数値書式指定メソッドと共に使用できます。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Typically, the <bpt id="p1">*</bpt>provider<ept id="p1">*</ept> parameter is used to specify culture-specific formatting.</source>
          <target state="translated">通常、<bpt id="p1">*</bpt>provider<ept id="p1">*</ept> パラメーターは、カルチャに固有の書式を指定するために使用されます。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In some cases (such as when an application must display a formatted account number, an identification number, or a postal code) these three techniques are inappropriate.</source>
          <target state="translated">一部の例には (アプリケーションで書式設定されたアカウント番号や ID 番号、郵便番号を表示する必要がある場合など)、これら 3 つの方法は適していません。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>.NET also enables you to define a formatting object that is neither a <bpt id="p1">[</bpt>CultureInfo<ept id="p1">](xref:System.Globalization.CultureInfo)</ept> nor a <bpt id="p2">[</bpt>NumberFormatInfo<ept id="p2">](xref:System.Globalization.NumberFormatInfo)</ept> object to determine how a numeric value is formatted.</source>
          <target state="translated">.NET では、<bpt id="p1">[</bpt>CultureInfo<ept id="p1">](xref:System.Globalization.CultureInfo)</ept> オブジェクトでも <bpt id="p2">[</bpt>NumberFormatInfo<ept id="p2">](xref:System.Globalization.NumberFormatInfo)</ept> オブジェクトでもない書式設定オブジェクトを定義して、数値を書式設定する方法を決定することもできます。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This topic provides the step-by-step instructions for implementing such an object, and provides an example that formats telephone numbers.</source>
          <target state="translated">このトピックでは、このようなオブジェクトを実装するため、詳細な手順を説明し、電話番号の書式を設定する例について説明します。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>To define a custom format provider</source>
          <target state="translated">カスタム書式プロバイダーを定義するには</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Define a class that implements the <bpt id="p1">[</bpt>IFormatProvider<ept id="p1">](xref:System.IFormatProvider)</ept> and <bpt id="p2">[</bpt>ICustomFormatter<ept id="p2">](xref:System.ICustomFormatter)</ept> interfaces.</source>
          <target state="translated"><bpt id="p1">[</bpt>IFormatProvider<ept id="p1">](xref:System.IFormatProvider)</ept> インターフェイスと <bpt id="p2">[</bpt>ICustomFormatter<ept id="p2">](xref:System.ICustomFormatter)</ept> インターフェイスを実装するクラスを定義します。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Implement the <bpt id="p1">[</bpt>IFormatProvider.GetFormat<ept id="p1">](xref:System.IFormatProvider.GetFormat(System.Type))</ept> method.</source>
          <target state="translated"><bpt id="p1">[</bpt>IFormatProvider.GetFormat<ept id="p1">](xref:System.IFormatProvider.GetFormat(System.Type))</ept> メソッドを実装します。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>GetFormat<ept id="p1">](xref:System.IFormatProvider.GetFormat(System.Type))</ept> is a callback method that the formatting method (such as the <bpt id="p2">[</bpt>String.Format(IFormatProvider,String,Object[])<ept id="p2">](xref:System.String.Format(System.IFormatProvider,System.String,System.Object))</ept> method) invokes to retrieve the object that is actually responsible for performing custom formatting.</source>
          <target state="translated"><bpt id="p1">[</bpt>GetFormat<ept id="p1">](xref:System.IFormatProvider.GetFormat(System.Type))</ept> は、書式指定メソッド (<bpt id="p2">[</bpt>String.Format(IFormatProvider,String,Object[])<ept id="p2">](xref:System.String.Format(System.IFormatProvider,System.String,System.Object))</ept> メソッドなど) が実際にカスタム書式設定の実行を担当するオブジェクトを取得するために呼び出すコールバック メソッドです。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>A typical implementation of <bpt id="p1">[</bpt>GetFormat<ept id="p1">](xref:System.IFormatProvider.GetFormat(System.Type))</ept> does the following:</source>
          <target state="translated"><bpt id="p1">[</bpt>GetFormat<ept id="p1">](xref:System.IFormatProvider.GetFormat(System.Type))</ept> の一般的な実装は、次のとおりです。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>a.</source>
          <target state="translated">a. </target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Determines whether the <bpt id="p1">[</bpt>Type<ept id="p1">](xref:System.Type)</ept> object passed as a method parameter represents an <bpt id="p2">[</bpt>ICustomFormatter<ept id="p2">](xref:System.ICustomFormatter)</ept> interface.</source>
          <target state="translated"><bpt id="p1">[</bpt>Type<ept id="p1">](xref:System.Type)</ept> オブジェクトを <bpt id="p2">[</bpt>ICustomFormatter<ept id="p2">](xref:System.ICustomFormatter)</ept> インターフェイスとして表すメソッド パラメーターとして渡すかどうかを決定します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>b.</source>
          <target state="translated">b. </target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If the parameter does represent the <bpt id="p1">[</bpt>ICustomFormatter<ept id="p1">](xref:System.ICustomFormatter)</ept> interface, <bpt id="p2">[</bpt>GetFormat<ept id="p2">](xref:System.IFormatProvider.GetFormat(System.Type))</ept> returns an object that implements the <bpt id="p3">[</bpt>ICustomFormatter<ept id="p3">](xref:System.ICustomFormatter)</ept> interface that is responsible for providing custom formatting.</source>
          <target state="translated">パラメーターが <bpt id="p1">[</bpt>ICustomFormatter<ept id="p1">](xref:System.ICustomFormatter)</ept> インターフェイスを表す場合、<bpt id="p2">[</bpt>GetFormat<ept id="p2">](xref:System.IFormatProvider.GetFormat(System.Type))</ept> はカスタム書式設定の提供を担当する <bpt id="p3">[</bpt>ICustomFormatter<ept id="p3">](xref:System.ICustomFormatter)</ept> インターフェイスを実装するオブジェクトを返します。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Typically, the custom formatting object returns itself.</source>
          <target state="translated">通常、カスタム書式指定オブジェクトは、それ自体を返します。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>c.</source>
          <target state="translated">c.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If the parameter does not represent the <bpt id="p1">[</bpt>ICustomFormatter<ept id="p1">](xref:System.ICustomFormatter)</ept> interface, <bpt id="p2">[</bpt>GetFormat<ept id="p2">](xref:System.IFormatProvider.GetFormat(System.Type))</ept> returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">パラメーターが <bpt id="p1">[</bpt>ICustomFormatter<ept id="p1">](xref:System.ICustomFormatter)</ept> インターフェイスを表していない場合、<bpt id="p2">[</bpt>GetFormat<ept id="p2">](xref:System.IFormatProvider.GetFormat(System.Type))</ept> は <ph id="ph1">`null`</ph> を返します。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Implement the <bpt id="p1">[</bpt>ICustomFormatter.Format<ept id="p1">](xref:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider))</ept> method.</source>
          <target state="translated"><bpt id="p1">[</bpt>ICustomFormatter.Format<ept id="p1">](xref:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider))</ept> メソッドを実装します。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This method is called by the <bpt id="p1">[</bpt>String.Format(IFormatProvider,String,Object[])<ept id="p1">](xref:System.String.Format(System.IFormatProvider,System.String,System.Object))</ept> method and is responsible for returning the string representation of a number.</source>
          <target state="translated">このメソッドは、<bpt id="p1">[</bpt>String.Format(IFormatProvider,String,Object[])<ept id="p1">](xref:System.String.Format(System.IFormatProvider,System.String,System.Object))</ept> メソッドによって呼び出され、数値の文字列形式を返します。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Implementing the method typically involves the following:</source>
          <target state="translated">メソッドの実装には通常、次の作業を行います。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>a.</source>
          <target state="translated">a. </target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Optionally, make sure that the method is legitimately intended to provide formatting services by examining the <bpt id="p1">*</bpt>provider<ept id="p1">*</ept> parameter.</source>
          <target state="translated">必要に応じて、<bpt id="p1">*</bpt>provider<ept id="p1">*</ept> パラメーターを調べることで、メソッドが書式指定サービスを提供する正当なものであることを確認します。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For formatting objects that implement both <bpt id="p1">[</bpt>IFormatProvider<ept id="p1">](xref:System.IFormatProvider)</ept> and <bpt id="p2">[</bpt>ICustomFormatter<ept id="p2">](xref:System.ICustomFormatter)</ept>, this involves testing the <bpt id="p3">*</bpt>provider<ept id="p3">*</ept> parameter for equality with the current formatting object.</source>
          <target state="translated"><bpt id="p1">[</bpt>IFormatProvider<ept id="p1">](xref:System.IFormatProvider)</ept> と <bpt id="p2">[</bpt>ICustomFormatter<ept id="p2">](xref:System.ICustomFormatter)</ept> の両方を実装する書式設定オブジェクトの場合、現在の書式設定オブジェクトと等しいことを確認するため、<bpt id="p3">*</bpt>provider<ept id="p3">*</ept> パラメーターをテストする必要があります。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>b.</source>
          <target state="translated">b. </target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Determine whether the formatting object should support custom format specifiers.</source>
          <target state="translated">書式指定オブジェクトが、カスタム書式指定子をサポートするかどうかを決定します </target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>(For example, an "N" format specifier might indicate that a U.S. telephone number should be output in NANP format, and an "I" might indicate output in ITU-T Recommendation E.123 format.) If format specifiers are used, the method should handle the specific format specifier.</source>
          <target state="translated">(たとえば、"N" 書式指定子は、米国の電話番号を NANP 形式で出力することを示し、"I" はITU-T 推奨 E.123 形式での出力を示すことができます)。書式指定子を使用している場合、メソッドが特定の書式指定子を処理する必要があります。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>It is passed to the method in the format parameter.</source>
          <target state="translated">これが format パラメーターでメソッドに渡されます。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>If no specifier is present, the value of the <bpt id="p1">*</bpt>format<ept id="p1">*</ept> parameter is <bpt id="p2">[</bpt>String.Empty<ept id="p2">](xref:System.String#System_String_Empty)</ept>.</source>
          <target state="translated">指定子がない場合、<bpt id="p1">*</bpt>format<ept id="p1">*</ept> パラメーターの値は <bpt id="p2">[</bpt>String.Empty<ept id="p2">](xref:System.String#System_String_Empty)</ept> です。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>c.</source>
          <target state="translated">c.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Retrieve the numeric value passed to the method as the <bpt id="p1">*</bpt>arg<ept id="p1">*</ept> parameter.</source>
          <target state="translated"><bpt id="p1">*</bpt>arg<ept id="p1">*</ept> パラメーターとしてメソッドに渡される数値を取得します。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Perform whatever manipulations are required to convert it to its string representation.</source>
          <target state="translated">文字列形式に変換するために必要な操作を実行します。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>d.</source>
          <target state="translated">d.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Return the string representation of the <bpt id="p1">*</bpt>arg<ept id="p1">*</ept> parameter.</source>
          <target state="translated"><bpt id="p1">*</bpt>arg<ept id="p1">*</ept> パラメーターの文字列表現を返します。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>To use a custom numeric formatting object</source>
          <target state="translated">カスタム数値書式設定オブジェクトを使用するには</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Create a new instance of the custom formatting class.</source>
          <target state="translated">カスタム書式指定クラスの新しいインスタンスを作成します。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Call the <bpt id="p1">[</bpt>String.Format(IFormatProvider,String,Object[])<ept id="p1">](xref:System.String.Format(System.IFormatProvider,System.String,System.Object))</ept> formatting method, passing it the custom formatting object, the formatting specifier (or <bpt id="p2">[</bpt>String.Empty<ept id="p2">](xref:System.String.Empty)</ept>, if one is not used), and the numeric value to be formatted.</source>
          <target state="translated">それをカスタム書式指定オブジェクト、書式指定子 (使用されていない場合は <bpt id="p2">[</bpt>String.Empty<ept id="p2">](xref:System.String.Empty)</ept>)、および書式設定する数値に渡す、<bpt id="p1">[</bpt>String.Format(IFormatProvider,String,Object[])<ept id="p1">](xref:System.String.Format(System.IFormatProvider,System.String,System.Object))</ept> 書式指定メソッドを呼び出します。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">例</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The following example defines a custom numeric format provider named <ph id="ph1">`TelephoneFormatter`</ph> that converts a number that represents a U.S. telephone number to its NANP or E.123 format.</source>
          <target state="translated">次の例では、米国の電話番号を表す数値を NANP または E.123 形式に変換する、<ph id="ph1">`TelephoneFormatter`</ph> という名前のカスタム数値書式プロバイダーを定義します。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The method handles two format specifiers, "N" (which outputs the NANP format) and "I" (which outputs the international E.123 format).</source>
          <target state="translated">このメソッドは、"N" (NANP 形式を出力) と "I" (国際 E.123 形式を出力) の 2 つの書式指定子を処理します。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The custom numeric format provider can be used only with the <bpt id="p1">[</bpt>String.Format(IFormatProvider,String,Object[])<ept id="p1">](xref:System.String.Format(System.IFormatProvider,System.String,System.Object))</ept> method.</source>
          <target state="translated">カスタム数値書式プロバイダーは、<bpt id="p1">[</bpt>String.Format(IFormatProvider,String,Object[])<ept id="p1">](xref:System.String.Format(System.IFormatProvider,System.String,System.Object))</ept> メソッドでのみ使用できます。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The other overloads of numeric formatting methods (such as <ph id="ph1">`ToString`</ph>) that have a parameter of type <bpt id="p1">[</bpt>IFormatProvider<ept id="p1">](xref:System.IFormatProvider)</ept> all pass the <bpt id="p2">[</bpt>IFormatProvider.GetFormat<ept id="p2">](xref:System.IFormatProvider.GetFormat(System.Type))</ept> implementation a <bpt id="p3">[</bpt>Type<ept id="p3">](xref:System.Type)</ept> object that represents the <bpt id="p4">[</bpt>NumberFormatInfo<ept id="p4">](xref:System.Globalization.NumberFormatInfo)</ept> type.</source>
          <target state="translated"><bpt id="p1">[</bpt>IFormatProvider<ept id="p1">](xref:System.IFormatProvider)</ept> 型のパラメーターがある数値書式指定メソッド (<ph id="ph1">`ToString`</ph> など) の他のオーバーロードはすべて、<bpt id="p4">[</bpt>NumberFormatInfo<ept id="p4">](xref:System.Globalization.NumberFormatInfo)</ept> 型を表す <bpt id="p3">[</bpt>Type<ept id="p3">](xref:System.Type)</ept> オブジェクトの <bpt id="p2">[</bpt>IFormatProvider.GetFormat<ept id="p2">](xref:System.IFormatProvider.GetFormat(System.Type))</ept> 実装を渡します。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>In return, they expect the method to return a <bpt id="p1">[</bpt>NumberFormatInfo<ept id="p1">](xref:System.Globalization.NumberFormatInfo)</ept> object.</source>
          <target state="translated">代わりに、これらはメソッドが <bpt id="p1">[</bpt>NumberFormatInfo<ept id="p1">](xref:System.Globalization.NumberFormatInfo)</ept> オブジェクトを返すことを期待します。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>If it does not, the custom numeric format provider is ignored, and the <bpt id="p1">[</bpt>NumberFormatInfo<ept id="p1">](xref:System.Globalization.NumberFormatInfo)</ept> object for the current culture is used in its place.</source>
          <target state="translated">そうでない場合、カスタム数値書式プロバイダーは無視され、現在のカルチャの <bpt id="p1">[</bpt>NumberFormatInfo<ept id="p1">](xref:System.Globalization.NumberFormatInfo)</ept> オブジェクトがその代わりに使用されます。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>In the example, the <ph id="ph1">`TelephoneFormatter.GetFormat`</ph> method handles the possibility that it may be inappropriately passed to a numeric formatting method by examining the method parameter and returning <bpt id="p1">*</bpt>null<ept id="p1">*</ept> if it represents a type other than <bpt id="p2">[</bpt>ICustomFormatter<ept id="p2">](xref:System.ICustomFormatter)</ept>.</source>
          <target state="translated">この例では、メソッド パラメーターを検査し、<bpt id="p2">[</bpt>ICustomFormatter<ept id="p2">](xref:System.ICustomFormatter)</ept> 以外の型を表す場合には <bpt id="p1">*</bpt>null<ept id="p1">*</ept> を返すことで、<ph id="ph1">`TelephoneFormatter.GetFormat`</ph> メソッドはそれが書式指定メソッドに不適切に渡される可能性を処理します。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>If a custom numeric format provider supports a set of format specifiers, make sure you provide a default behavior if no format specifier is supplied in the format item used in the <bpt id="p1">[</bpt>String.Format(IFormatProvider,String,Object[])<ept id="p1">](xref:System.String.Format(System.IFormatProvider,System.String,System.Object))</ept> method call.</source>
          <target state="translated">カスタム数値書式プロバイダーが一連の書式指定子をサポートしている場合、<bpt id="p1">[</bpt>String.Format(IFormatProvider,String,Object[])<ept id="p1">](xref:System.String.Format(System.IFormatProvider,System.String,System.Object))</ept> メソッドの呼び出しで使用される書式指定項目で書式指定子が指定されていない場合に、既定の動作を提供することを確認します。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>In the example, "N" is the default format specifier.</source>
          <target state="translated">例では、"N" が既定の書式指定子です。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>This allows for a number to be converted to a formatted telephone number by providing an explicit format specifier.</source>
          <target state="translated">これにより、明示的な書式指定子を提供することによって、数値を書式設定された電話番号に変換できます。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The following example illustrates such a method call.</source>
          <target state="translated">このようなメソッドの呼び出しの例を次に示します。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>But it also allows the conversion to occur if no format specifier is present.</source>
          <target state="translated">ただし、書式指定子が存在しない場合に、変換を行うようにすることもできます。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The following example illustrates such a method call.</source>
          <target state="translated">このようなメソッドの呼び出しの例を次に示します。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>If no default format specifier is defined, your implementation of the <bpt id="p1">[</bpt>ICustomFormatter.Format<ept id="p1">](xref:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider))</ept> method should include code such as the following so that .NET can provide formatting that your code does not support.</source>
          <target state="translated">既定の書式指定子が定義されていない場合、<bpt id="p1">[</bpt>ICustomFormatter.Format<ept id="p1">](xref:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider))</ept> メソッドの実装には、使用しているコードでサポートされていない書式設定を .NET が提供できるように、次のようなコードを含める必要があります。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>In the case of this example, the method that implements <bpt id="p1">[</bpt>ICustomFormatter.Format<ept id="p1">](xref:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider))</ept> is intended to serve as a callback method for the <bpt id="p2">[</bpt>String.Format(IFormatProvider,String,Object[])<ept id="p2">](xref:System.String.Format(System.IFormatProvider,System.String,System.Object))</ept> method.</source>
          <target state="translated">この例の場合、<bpt id="p1">[</bpt>ICustomFormatter.Format<ept id="p1">](xref:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider))</ept> を実装するメソッドは、<bpt id="p2">[</bpt>String.Format(IFormatProvider,String,Object[])<ept id="p2">](xref:System.String.Format(System.IFormatProvider,System.String,System.Object))</ept> メソッドのコールバック メソッドとして機能することを意図しています。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Therefore, it examines the <bpt id="p1">*</bpt>formatProvider<ept id="p1">*</ept> parameter to determine whether it contains a reference to the current <ph id="ph1">`TelephoneFormatter`</ph> object.</source>
          <target state="translated">そのため、<bpt id="p1">*</bpt>formatProvider<ept id="p1">*</ept> パラメーターを調べ、現在の <ph id="ph1">`TelephoneFormatter`</ph> オブジェクトへの参照が含まれるかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>However, the method can also be called directly from code.</source>
          <target state="translated">ただし、メソッドはコードから直接呼び出すこともできます。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>In that case, you can use the <bpt id="p1">*</bpt>formatProvider <ept id="p1">*</ept>parameter to provide a <bpt id="p2">[</bpt>CultureInfo<ept id="p2">](xref:System.Globalization.CultureInfo)</ept> or <bpt id="p3">[</bpt>NumberFormatInfo<ept id="p3">](xref:System.Globalization.NumberFormatInfo)</ept> object that supplies culture-specific formatting information.</source>
          <target state="translated">その場合は、<bpt id="p1">*</bpt>formatProvider<ept id="p1">*</ept> パラメーターを使用して、カルチャに固有の書式情報を提供する <bpt id="p2">[</bpt>CultureInfo<ept id="p2">](xref:System.Globalization.CultureInfo)</ept> オブジェクトまたは <bpt id="p3">[</bpt>NumberFormatInfo<ept id="p3">](xref:System.Globalization.NumberFormatInfo)</ept> オブジェクトを提供することができます。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">関連項目</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Performing formatting operations<ept id="p1">](performing-formatting-operations.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>書式設定操作の実行<ept id="p1">](performing-formatting-operations.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>