<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-6a73dd2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1fc1edd64c330fe579f389750432665ed982976e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\base-types\regular-expressions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p2</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bb8cd979c415dc48a6370770f1440df5f7f1a5bc</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8b1fef4c3b2d180d298bf0053e7b1429da798284</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">file regular-expressions.650af38eb01fb720a48390548446abb693afa7bb.ja-jp.xlf is out of handoff scope</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Regular expressions in .NET</source>
          <target state="translated">.NET の正規表現</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Regular expressions in .NET</source>
          <target state="translated">.NET の正規表現</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Regular expressions in .NET</source>
          <target state="translated">.NET の正規表現</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Regular expressions provide a powerful, flexible, and efficient method for processing text.</source>
          <target state="translated">正規表現を使用すると、強力、柔軟、そして効率的な方法でテキストを処理できます。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The extensive pattern-matching notation of regular expressions enables you to quickly parse large amounts of text to find specific character patterns; to validate text to ensure that it matches a predefined pattern (such as an e-mail address); to extract, edit, replace, or delete text substrings; and to add the extracted strings to a collection in order to generate a report.</source>
          <target state="translated">正規表現の広範なパターン一致表記法を使用することで、大量のテキストをすばやく解析して特定の文字パターンを検索したり、決められたパターン (電子メール アドレスなど) と照らしてテキストを検証したりできるほか、テキストの部分文字列を抽出、編集、置換、または削除したり、抽出した文字列をコレクションに追加してレポートを生成したりすることもできます。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For many applications that deal with strings or that parse large blocks of text, regular expressions are an indispensable tool.</source>
          <target state="translated">文字列処理や大量のテキストを解析する多くのアプリケーションにとって、正規表現は欠くことのできないツールです。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>How Regular Expressions Work</source>
          <target state="translated">正規表現の動作</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The centerpiece of text processing with regular expressions is the regular expression engine, which is represented by the <bpt id="p1">[</bpt>System.Text.RegularExpressions.Regex<ept id="p1">](xref:System.Text.RegularExpressions.Regex)</ept> object in .NET.</source>
          <target state="translated">正規表現を使ったテキスト処理の最も重要な部分は、.NET の <bpt id="p1">[</bpt>System.Text.RegularExpressions.Regex<ept id="p1">](xref:System.Text.RegularExpressions.Regex)</ept> オブジェクトによって表される正規表現エンジンです。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>At a minimum, processing text using regular expressions requires that the regular expression engine be provided with the following two items of information:</source>
          <target state="translated">正規表現を使ったテキスト処理では、正規表現エンジンに対し、最低でも次の 2 つの情報を与える必要があります。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The regular expression pattern to identify in the text.</source>
          <target state="translated">テキストを識別する正規表現パターン。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In .NET, regular expression patterns are defined by a special syntax or language, which is compatible with Perl 5 regular expressions and adds some additional features such as right-to-left matching.</source>
          <target state="translated">.NET では、正規表現のパターンが特殊な構文または言語で定義されます。この構文または言語には、Perl 5 の正規表現と互換性があるほか、右から左への一致処理など、いくつかの機能が追加されています。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Regular Expression Language - Quick Reference<ept id="p1">](quick-ref.md)</ept>.</source>
          <target state="translated">詳細については、「<bpt id="p1">[</bpt>正規表現言語 - クイック リファレンス<ept id="p1">](quick-ref.md)</ept>」をご覧ください。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The text to parse for the regular expression pattern.</source>
          <target state="translated">正規表現パターンの解析対象となるテキスト。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The methods of the <bpt id="p1">[</bpt>Regex<ept id="p1">](xref:System.Text.RegularExpressions.Regex)</ept> class let you perform the following operations:</source>
          <target state="translated"><bpt id="p1">[</bpt>Regex<ept id="p1">](xref:System.Text.RegularExpressions.Regex)</ept> クラスのメソッドを使用すると、次のような処理を実行できます。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Determine whether the regular expression pattern occurs in the input text by calling the <bpt id="p1">[</bpt>Regex.IsMatch<ept id="p1">](xref:System.Text.RegularExpressions.Regex.IsMatch(System.String))</ept> method.</source>
          <target state="translated">入力されたテキストに特定の正規表現パターンが出現するかどうかを調べるには、<bpt id="p1">[</bpt>Regex.IsMatch<ept id="p1">](xref:System.Text.RegularExpressions.Regex.IsMatch(System.String))</ept> メソッドを呼び出します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For an example that uses the <bpt id="p1">[</bpt>IsMatch<ept id="p1">](xref:System.Text.RegularExpressions.Regex.IsMatch(System.String))</ept> method for validating text, see <bpt id="p2">[</bpt>How to: Verify that Strings Are in Valid Email Format<ept id="p2">](verify-format.md)</ept>.</source>
          <target state="translated">テキストを検証するために <bpt id="p1">[</bpt>IsMatch<ept id="p1">](xref:System.Text.RegularExpressions.Regex.IsMatch(System.String))</ept> メソッドを使用する例については、「<bpt id="p2">[</bpt>方法: 文字列が有効な電子メール形式であるかどうかを検証する<ept id="p2">](verify-format.md)</ept>」をご覧ください。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Retrieve one or all occurrences of text that matches the regular expression pattern by calling the <bpt id="p1">[</bpt>Regex.Match<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Match(System.String))</ept> or <bpt id="p2">[</bpt>Regex.Matches<ept id="p2">](xref:System.Text.RegularExpressions.Regex.Matches(System.String))</ept> method.</source>
          <target state="translated">正規表現パターンと一致したテキストを 1 つまたはすべて取得するには、<bpt id="p1">[</bpt>Regex.Match<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Match(System.String))</ept> メソッドまたは <bpt id="p2">[</bpt>Regex.Matches<ept id="p2">](xref:System.Text.RegularExpressions.Regex.Matches(System.String))</ept> メソッドを呼び出します。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The former method returns a <bpt id="p1">[</bpt>System.Text.RegularExpressions.Match<ept id="p1">](xref:System.Text.RegularExpressions.Match)</ept> object that provides information about the matching text.</source>
          <target state="translated">前者は、一致したテキストの情報を保持する <bpt id="p1">[</bpt>System.Text.RegularExpressions.Match<ept id="p1">](xref:System.Text.RegularExpressions.Match)</ept> オブジェクトを返します。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The latter returns a <bpt id="p1">[</bpt>MatchCollection<ept id="p1">](xref:System.Text.RegularExpressions.MatchCollection)</ept> object that contains one <bpt id="p2">[</bpt>System.Text.RegularExpressions.Match<ept id="p2">](xref:System.Text.RegularExpressions.Match)</ept> object for each match found in the parsed text.</source>
          <target state="translated">後者は、解析対象のテキストに見つかった各一致につき 1 つの <bpt id="p2">[</bpt>System.Text.RegularExpressions.Match<ept id="p2">](xref:System.Text.RegularExpressions.Match)</ept> オブジェクトを含む <bpt id="p1">[</bpt>MatchCollection<ept id="p1">](xref:System.Text.RegularExpressions.MatchCollection)</ept> オブジェクトを返します。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Replace text that matches the regular expression pattern by calling the <bpt id="p1">[</bpt>Regex.Replace<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Replace(System.String,System.String))</ept> method.</source>
          <target state="translated">正規表現パターンと一致したテキストを置換するには、<bpt id="p1">[</bpt>Regex.Replace<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Replace(System.String,System.String))</ept> メソッドを呼び出します。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For examples that use the <bpt id="p1">[</bpt>Replace<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Replace(System.String,System.String))</ept> method to change date formats and remove invalid characters from a string, see <bpt id="p2">[</bpt>How to: Strip Invalid Characters from a String<ept id="p2">](strip-characters.md)</ept> and <bpt id="p3">[</bpt>Regular Expression Example: Changing Date Formats<ept id="p3">](changing-formats.md)</ept>.</source>
          <target state="translated"><bpt id="p1">[</bpt>Replace<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Replace(System.String,System.String))</ept> メソッドを使用して日付形式を変更したり文字列から無効な文字を削除したりする例については、「<bpt id="p2">[</bpt>方法: 文字列から無効な文字を取り除く<ept id="p2">](strip-characters.md)</ept>」および「<bpt id="p3">[</bpt>正規表現の例: 日付形式の変更<ept id="p3">](changing-formats.md)</ept>」をご覧ください。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For an overview of the regular expression object model, see <bpt id="p1">[</bpt>The Regular Expression Object Model<ept id="p1">](object-model.md)</ept>.</source>
          <target state="translated">正規表現のオブジェクト モデルの概要については、「<bpt id="p1">[</bpt>正規表現のオブジェクト モデル<ept id="p1">](object-model.md)</ept>」をご覧ください。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For more information about the regular expression language, see <bpt id="p1">[</bpt>Regular Expression Language - Quick Reference<ept id="p1">](quick-ref.md)</ept>.</source>
          <target state="translated">正規表現言語の詳細については、「<bpt id="p1">[</bpt>正規表現言語 - クイック リファレンス<ept id="p1">](quick-ref.md)</ept>」をご覧ください。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Regular Expression Examples</source>
          <target state="translated">正規表現の例</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>String<ept id="p1">](xref:System.String)</ept> class includes a number of string search and replacement methods that you can use when you want to locate literal strings in a larger string.</source>
          <target state="translated"><bpt id="p1">[</bpt>String<ept id="p1">](xref:System.String)</ept> クラスには、より大きな文字列内のリテラル文字列を検索する際に使用できる文字列の検索メソッドと置換メソッドが数多く含まれています。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Regular expressions are most useful either when you want to locate one of several substrings in a larger string, or when you want to identify patterns in a string, as the following examples illustrate.</source>
          <target state="translated">正規表現は、次の例に示すように、文字列内の部分文字列のいずれかを検索する場合、または文字列内のパターンを識別する場合に最も役立ちます。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Example 1: Replacing Substrings</source>
          <target state="translated">例 1: 部分文字列の置換</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Assume that a mailing list contains names that sometimes include a title (Mr., Mrs., Miss, or Ms.) along with a first and last name.</source>
          <target state="translated">氏名に敬称 (Mr.、Mrs.、Miss、または Ms.) が付いている場合がある名前が、宛先リストに含まれるとします。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If you do not want to include the titles when you generate envelope labels from the list, you can use a regular expression to remove the titles, as the following example illustrates.</source>
          <target state="translated">そのリストから封筒のラベルを生成する場合に敬称が含まれないようにするには、次の例に示すように、正規表現を使用して敬称を削除します。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The regular expression pattern <ph id="ph1">`(Mr\.? |Mrs\.? |Miss |Ms\.? )`</ph> matches any occurrence of "Mr ", "Mr. ", "Mrs ", "Mrs. ", "Miss ", "Ms or "Ms. ".</source>
          <target state="translated">正規表現パターン <ph id="ph1">`(Mr\.? |Mrs\.? |Miss |Ms\.? )`</ph> は、"Mr "、"Mr. "、"Mrs "、"Mrs. "、"Miss "、"Ms"、または "Ms. " の出現と一致します。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The call to the <bpt id="p1">[</bpt>Regex.Replace<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Replace(System.String,System.String))</ept> method replaces the matched string with <bpt id="p2">[</bpt>String.Empty<ept id="p2">](xref:System.String.Empty)</ept>; in other words, it removes it from the original string.</source>
          <target state="translated"><bpt id="p1">[</bpt>Regex.Replace<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Replace(System.String,System.String))</ept> メソッドを呼び出すと、一致する文字列が <bpt id="p2">[</bpt>String.Empty<ept id="p2">](xref:System.String.Empty)</ept> に置き換えられます。つまり、元の文字列から削除されます。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Example 2: Identifying Duplicated Words</source>
          <target state="translated">例 2: 重複する単語の識別</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Accidentally duplicating words is a common error that writers make.</source>
          <target state="translated">記述者が単語を誤って重複入力するというエラーがよくあります。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>A regular expression can be used to identify duplicated words, as the following example shows.</source>
          <target state="translated">次の例に示すように、正規表現を使用して重複する単語を識別できます。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The regular expression pattern <ph id="ph1">`\b(\w+?)\s\1\b`</ph> can be interpreted as follows:</source>
          <target state="translated">正規表現パターン <ph id="ph1">`\b(\w+?)\s\1\b`</ph> は、次のように解釈できます。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Syntax</source>
          <target state="translated">構文</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Meaning</source>
          <target state="translated">説明</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Start at a word boundary.</source>
          <target state="translated">ワード境界から開始します。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Match one or more word characters, but as few characters as possible.</source>
          <target state="translated">1 つ以上 (ただし、できるだけ少ない文字数) の単語文字と一致します。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Together, they form a group that can be referred to as <ph id="ph1">`\1`</ph>.</source>
          <target state="translated">同時に、<ph id="ph1">`\1`</ph> というグループを形成します。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Match a white-space character.</source>
          <target state="translated">空白文字と一致します。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Match the substring that is equal to the group named <ph id="ph1">`\1`</ph>.</source>
          <target state="translated"><ph id="ph1">`\1`</ph> という名前のグループと等しい部分文字列と一致します。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Match a word boundary.</source>
          <target state="translated">ワード境界に一致します。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Regex.Matches<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions))</ept> method is called with regular expression options set to <bpt id="p2">[</bpt>RegexOptions.IgnoreCase<ept id="p2">](xref:System.Text.RegularExpressions.RegexOptions.IgnoreCase)</ept>.</source>
          <target state="translated"><bpt id="p1">[</bpt>Regex.Matches<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions))</ept> メソッドは、正規表現オプションを <bpt id="p2">[</bpt>RegexOptions.IgnoreCase<ept id="p2">](xref:System.Text.RegularExpressions.RegexOptions.IgnoreCase)</ept> に設定して呼び出されます。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Therefore, the match operation is case-insensitive, and the example identifies the substring "This this" as a duplication.</source>
          <target state="translated">したがって、照合操作では大文字と小文字が区別されず、この例では部分文字列 "This this" が重複として識別されます。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Note that the input string includes the substring "this?</source>
          <target state="translated">入力文字列には部分文字列 "this?</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>This".</source>
          <target state="translated">This" が含まれています。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>However, because of the intervening punctuation mark, it is not identified as a duplication.</source>
          <target state="translated">ただし、句読点が介在するので、重複として識別されません。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Example 3: Dynamically Building a Culture-Sensitive Regular Expression</source>
          <target state="translated">例 3: カルチャに依存した正規表現の動的な構築</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The following example illustrates the power of regular expressions combined with the flexibility offered by .NET's globalization features.</source>
          <target state="translated">ここでは、正規表現による強力なテキスト処理と、.NET の柔軟なグローバリゼーション機能を組み合わせて使用する例を紹介します。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>It uses the <bpt id="p1">[</bpt>NumberFormatInfo<ept id="p1">](xref:System.Globalization.NumberFormatInfo)</ept> object to determine the format of currency values in the system's current culture.</source>
          <target state="translated">この例では、システムの現在のカルチャで用いられている通貨値の形式を調べるために、<bpt id="p1">[</bpt>NumberFormatInfo<ept id="p1">](xref:System.Globalization.NumberFormatInfo)</ept> オブジェクトが使用されています。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>It then uses that information to dynamically construct a regular expression that extracts currency values from the text.</source>
          <target state="translated">さらに、その情報を基に、テキストから通貨値を抽出する正規表現を動的に構築します。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For each match, it extracts the subgroup that contains the numeric string only, converts it to a <bpt id="p1">[</bpt>Decimal<ept id="p1">](xref:System.Decimal)</ept> value, and calculates a running total.</source>
          <target state="translated">検出された一致ごとに、数値文字列のみを含んだサブグループを抽出し、<bpt id="p1">[</bpt>Decimal<ept id="p1">](xref:System.Decimal)</ept> 値に変換して、通算の合計を計算します。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>On a computer whose current culture is English - United States (en-US), the example dynamically builds the regular expression <ph id="ph1">`\$\s*[-+]?([0-9]{0,3}(,[0-9]{3})*(\.[0-9]+)?)`</ph>.</source>
          <target state="translated">現在 "英語 - 米国" (en-US) カルチャが使用されているコンピューターでは、<ph id="ph1">`\$\s*[-+]?([0-9]{0,3}(,[0-9]{3})*(\.[0-9]+)?)`</ph> という正規表現が動的に作成されます。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>This regular expression pattern can be interpreted as follows:</source>
          <target state="translated">この正規表現パターンは、次のように解釈できます。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Syntax</source>
          <target state="translated">構文</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Meaning</source>
          <target state="translated">説明</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Look for a single occurrence of the dollar symbol ($) in the input string.</source>
          <target state="translated">入力文字列に含まれる単一のドル記号 ($) を検索します。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The regular expression pattern string includes a backslash to indicate that the dollar symbol is to be interpreted literally rather than as a regular expression anchor.</source>
          <target state="translated">この正規表現パターン文字列に使用されている円記号は、ドル記号を正規表現のアンカーではなく、文字として扱うことを意味します。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>(The $ symbol alone would indicate that the regular expression engine should try to begin its match at the end of a string.) To ensure that the current culture's currency symbol is not misinterpreted as a regular expression symbol, the example calls the <bpt id="p1">[</bpt>Escape<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Escape(System.String))</ept> method to escape the character.</source>
          <target state="translated">ドル記号 ($) を単独で指定した場合、正規表現エンジンは、比較の開始位置を文字列の終端に設定します。現在のカルチャの通貨記号が正規表現記号として解釈されるのを防ぐため、この例では、<bpt id="p1">[</bpt>Escape<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Escape(System.String))</ept> メソッドを呼び出して文字をエスケープしています。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Look for zero or more occurrences of a white-space character.</source>
          <target state="translated">空白文字の 0 回以上の繰り返しを検索します。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Look for zero or one occurrence of either a positive sign or a negative sign.</source>
          <target state="translated">正の符号または負の符号の 0 回または 1 回の繰り返しを検索します。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The outer parentheses around this expression define it as a capturing group or a subexpression.</source>
          <target state="translated">外側の丸かっこで囲まれている表現は、キャプチャ グループまたは部分式として定義されます。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>If a match is found, information about this part of the matching string can be retrieved from the second <bpt id="p1">[</bpt>Group<ept id="p1">](xref:System.Text.RegularExpressions.Group)</ept> object in the <bpt id="p2">[</bpt>GroupCollection<ept id="p2">](xref:System.Text.RegularExpressions.GroupCollection)</ept> object returned by the <bpt id="p3">[</bpt>Match.Groups<ept id="p3">](xref:System.Text.RegularExpressions.Match.Groups)</ept> property.</source>
          <target state="translated">一致が見つかった場合、一致文字列のその部分に関する情報を、<bpt id="p3">[</bpt>Match.Groups<ept id="p3">](xref:System.Text.RegularExpressions.Match.Groups)</ept> プロパティから返された <bpt id="p2">[</bpt>GroupCollection<ept id="p2">](xref:System.Text.RegularExpressions.GroupCollection)</ept> オブジェクトの 2 つ目の <bpt id="p1">[</bpt>Group<ept id="p1">](xref:System.Text.RegularExpressions.Group)</ept> オブジェクトから取得できます。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>(The first element in the collection represents the entire match.)</source>
          <target state="translated">(コレクションの 1 つ目の要素は、一致した文字列全体を表します)。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Look for zero to three occurrences of the decimal digits 0 through 9.</source>
          <target state="translated">10 進数字 (0 ～ 9) の 0 回以上、3 回以下の繰り返しを検索します。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Look for zero or more occurrences of a group separator followed by three decimal digits.</source>
          <target state="translated">桁区切り記号と 3 桁の 10 進数字の 0 回以上の繰り返しを検索します。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Look for a single occurrence of the decimal separator.</source>
          <target state="translated">単一の小数点を検索します。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Look for one or more decimal digits.</source>
          <target state="translated">10 進数字の 1 回以上の繰り返しを検索します。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Look for zero or one occurrence of the decimal separator followed by at least one decimal digit.</source>
          <target state="translated">小数点と 1 桁以上の数字の 0 回または 1 回の繰り返しを検索します。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Related Topics</source>
          <target state="translated">関連トピック</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Title</source>
          <target state="translated">タイトル</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">説明</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Regular expression language - quick reference<ept id="p1">](quick-ref.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>正規表現言語 - クイック リファレンス<ept id="p1">](quick-ref.md)</ept></target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Provides information on the set of characters, operators, and constructs that you can use to define regular expressions.</source>
          <target state="translated">正規表現を定義するために使う一連の文字、演算子、および構成体について説明します。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>The regular expression object model<ept id="p1">](object-model.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>正規表現のオブジェクト モデル<ept id="p1">](object-model.md)</ept></target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Provides information and code examples that illustrate how to use the regular expression classes.</source>
          <target state="translated">正規表現クラスの使用方法について詳しく説明し、コード例を示します。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Details of regular expression behavior<ept id="p1">](regex-behavior.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>正規表現の動作の詳細<ept id="p1">](regex-behavior.md)</ept></target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Provides information about the capabilities and behavior of .NETregular expressions.</source>
          <target state="translated">.NET の正規表現の機能と動作について説明します。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Regular expression examples<ept id="p1">](regex-examples.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>正規表現の例<ept id="p1">](regex-examples.md)</ept></target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Provides code examples that illustrate typical uses of regular expressions.</source>
          <target state="translated">正規表現の一般的な使用方法を示すコード例が用意されています。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Reference</source>
          <target state="translated">参照</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.Text.RegularExpressions<ept id="p1">](xref:System.Text.RegularExpressions)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>System.Text.RegularExpressions<ept id="p1">](xref:System.Text.RegularExpressions)</ept></target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.Text.RegularExpressions.Regex<ept id="p1">](xref:System.Text.RegularExpressions.Regex)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>System.Text.RegularExpressions.Regex<ept id="p1">](xref:System.Text.RegularExpressions.Regex)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>