<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c724bf8b6794e71d49b32c7d3ce9e010f541f68f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\operators-and-expressions\arithmetic-operators.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">168c9f9933b2e34f593a9fafbf545bcaf77a67a3</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">22434cdfba0b468075a3151b855b9c76e3fb27c9</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Handback file name: lo-mt_arithmetic-operators.d40b7d716eace7bfd9ca27742d78467e761c6a3e.ja-jp is different with handoff file name: arithmetic-operators.d40b7d716eace7bfd9ca27742d78467e761c6a3e.ja-jp.</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Arithmetic Operators in Visual Basic | Microsoft Docs</source>
          <target state="translated">Visual Basic における算術演算子 |Microsoft ドキュメント</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Arithmetic Operators in Visual Basic</source>
          <target state="translated">Visual Basic における算術演算子</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Arithmetic operators are used to perform many of the familiar arithmetic operations that involve the calculation of numeric values represented by literals, variables, other expressions, function and property calls, and constants.</source>
          <target state="translated">算術演算子を使用して、リテラル、変数、その他の式、関数とプロパティの呼び出し、および定数で表される数値の計算に関連する一般的な算術演算の多くを実行できます。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Also classified with arithmetic operators are the bit-shift operators, which act at the level of the individual bits of the operands and shift their bit patterns to the left or right.</source>
          <target state="translated">算術演算子にも分類は、オペランドのビットごとのレベルで動作し、ビット パターンを左または右にシフトするビット シフト演算子です。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Arithmetic Operations</source>
          <target state="translated">算術演算</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You can add two values in an expression together with the <bpt id="p1">[</bpt>+ Operator<ept id="p1">](../../../../visual-basic/language-reference/operators/addition-operator.md)</ept>, or subtract one from another with the <bpt id="p2">[</bpt>- Operator (Visual Basic)<ept id="p2">](../../../../visual-basic/language-reference/operators/subtraction-operator.md)</ept>, as the following example demonstrates.</source>
          <target state="translated">と共に式の中で&amp;2; つの値を追加することができます、 <bpt id="p1">[</bpt>+ 演算子<ept id="p1">](../../../../visual-basic/language-reference/operators/addition-operator.md)</ept>、または減算一方から他方に、 <bpt id="p2">[</bpt>-演算子 (Visual Basic)<ept id="p2">](../../../../visual-basic/language-reference/operators/subtraction-operator.md)</ept>、次の例で示すようにします。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrOperators#57<ept id="p2">](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/arithmetic-operators_1.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrOperators #&amp;57;<ept id="p2">](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/arithmetic-operators_1.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Negation also uses the <bpt id="p1">[</bpt>- Operator (Visual Basic)<ept id="p1">](../../../../visual-basic/language-reference/operators/subtraction-operator.md)</ept>, but with only one operand, as the following example demonstrates.</source>
          <target state="translated">否定を使用しても、 <bpt id="p1">[</bpt>-演算子 (Visual Basic)<ept id="p1">](../../../../visual-basic/language-reference/operators/subtraction-operator.md)</ept>が&amp;1; つだけのオペランドでとして次の例を示します。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrOperators#58<ept id="p2">](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/arithmetic-operators_2.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrOperators #&amp;58;<ept id="p2">](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/arithmetic-operators_2.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Multiplication and division use the <bpt id="p1">[</bpt>* Operator<ept id="p1">](../../../../visual-basic/language-reference/operators/multiplication-operator.md)</ept> and <bpt id="p2">[</bpt>/ Operator (Visual Basic)<ept id="p2">](../../../../visual-basic/language-reference/operators/floating-point-division-operator.md)</ept>, respectively, as the following example demonstrates.</source>
          <target state="translated">乗算と除算の使用、 <bpt id="p1">[</bpt>* 演算子<ept id="p1">](../../../../visual-basic/language-reference/operators/multiplication-operator.md)</ept>と<bpt id="p2">[</bpt>/演算子 (Visual Basic)<ept id="p2">](../../../../visual-basic/language-reference/operators/floating-point-division-operator.md)</ept>、それぞれに、次の例に示します。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrOperators#59<ept id="p2">](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/arithmetic-operators_3.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrOperators #&amp;59;<ept id="p2">](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/arithmetic-operators_3.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Exponentiation uses the <bpt id="p1">[</bpt>^ Operator<ept id="p1">](../../../../visual-basic/language-reference/operators/exponentiation-operator.md)</ept>, as the following example demonstrates.</source>
          <target state="translated">指数演算を使用して、 <bpt id="p1">[</bpt>^ 演算子<ept id="p1">](../../../../visual-basic/language-reference/operators/exponentiation-operator.md)</ept>、次の例に示します。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrOperators#60<ept id="p2">](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/arithmetic-operators_4.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrOperators&amp;#60;<ept id="p2">](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/arithmetic-operators_4.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Integer division is carried out using the <bpt id="p1">[</bpt>\ Operator (Visual Basic)<ept id="p1">](../../../../visual-basic/language-reference/operators/integer-division-operator.md)</ept>.</source>
          <target state="translated">使用整数の除算が実行される、 <bpt id="p1">[</bpt>\ 演算子 (Visual Basic)<ept id="p1">](../../../../visual-basic/language-reference/operators/integer-division-operator.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Integer division returns the quotient, that is, the integer that represents the number of times the divisor can divide into the dividend without consideration of any remainder.</source>
          <target state="translated">整数除算の商を返します、つまり、回数の合計を表す整数除数できます除算被除数の残りの部分について十分に考慮せずにします。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Both the divisor and the dividend must be integral types (<ph id="ph1">`SByte`</ph>, <ph id="ph2">`Byte`</ph>, <ph id="ph3">`Short`</ph>, <ph id="ph4">`UShort`</ph>, <ph id="ph5">`Integer`</ph>, <ph id="ph6">`UInteger`</ph>, <ph id="ph7">`Long`</ph>, and <ph id="ph8">`ULong`</ph>) for this operator.</source>
          <target state="translated">除数と被除数の両方が整数型にする必要があります (<ph id="ph1">`SByte`</ph>、 <ph id="ph2">`Byte`</ph>、 <ph id="ph3">`Short`</ph>、 <ph id="ph4">`UShort`</ph>、 <ph id="ph5">`Integer`</ph>、 <ph id="ph6">`UInteger`</ph>、 <ph id="ph7">`Long`</ph>、および<ph id="ph8">`ULong`</ph>) オペレーターのです。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>All other types must be converted to an integral type first.</source>
          <target state="translated">他のすべての型は、整数型へ最初に変換する必要があります。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The following example demonstrates integer division.</source>
          <target state="translated">次の例では、整数の除算を示します。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrOperators#61<ept id="p2">](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/arithmetic-operators_5.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrOperators&amp;#61;<ept id="p2">](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/arithmetic-operators_5.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Modulus arithmetic is performed using the <bpt id="p1">[</bpt>Mod Operator<ept id="p1">](../../../../visual-basic/language-reference/operators/mod-operator.md)</ept>.</source>
          <target state="translated">使用して剰余演算を実行、 <bpt id="p1">[</bpt>Mod 演算子<ept id="p1">](../../../../visual-basic/language-reference/operators/mod-operator.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This operator returns the remainder after dividing the divisor into the dividend an integral number of times.</source>
          <target state="translated">この演算子は、整数回数、被除数を除数で割った剰余を返します。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If both divisor and dividend are integral types, the returned value is integral.</source>
          <target state="translated">除数と被除数の両方が整数型の場合、返される値は整数です。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If divisor and dividend are floating-point types, the returned value is also floating-point.</source>
          <target state="translated">除数と被除数が浮動小数点型の場合、返される値が浮動小数点型もします。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The following example demonstrates this behavior.</source>
          <target state="translated">次の例では、この動作を示します。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrOperators#62<ept id="p2">](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/arithmetic-operators_6.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrOperators #&amp;62;<ept id="p2">](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/arithmetic-operators_6.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrOperators#63<ept id="p2">](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/arithmetic-operators_7.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrOperators #&amp;63;<ept id="p2">](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/arithmetic-operators_7.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Attempted Division by Zero</source>
          <target state="translated">0 による除算</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Division by zero has different results depending on the data types involved.</source>
          <target state="translated">0 による除算には、関連するデータ型によって異なる結果があります。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In integral divisions (<ph id="ph1">`SByte`</ph>, <ph id="ph2">`Byte`</ph>, <ph id="ph3">`Short`</ph>, <ph id="ph4">`UShort`</ph>, <ph id="ph5">`Integer`</ph>, <ph id="ph6">`UInteger`</ph>, <ph id="ph7">`Long`</ph>, <ph id="ph8">`ULong`</ph>), the <ph id="ph9">[!INCLUDE[dnprdnshort](../../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph> throws a &lt;xref:System.DivideByZeroException&gt; exception.</source>
          <target state="translated">In integral divisions (<ph id="ph1">`SByte`</ph>, <ph id="ph2">`Byte`</ph>, <ph id="ph3">`Short`</ph>, <ph id="ph4">`UShort`</ph>, <ph id="ph5">`Integer`</ph>, <ph id="ph6">`UInteger`</ph>, <ph id="ph7">`Long`</ph>, <ph id="ph8">`ULong`</ph>), the <ph id="ph9">[!INCLUDE[dnprdnshort](../../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph> throws a &lt;xref:System.DivideByZeroException&gt; exception.&lt;/xref:System.DivideByZeroException&gt;</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In division operations on the <ph id="ph1">`Decimal`</ph> or <ph id="ph2">`Single`</ph> data type, the <ph id="ph3">[!INCLUDE[dnprdnshort](../../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph> also throws a &lt;xref:System.DivideByZeroException&gt; exception.</source>
          <target state="translated">除算の操作、<ph id="ph1">`Decimal`</ph>または<ph id="ph2">`Single`</ph>データ型、<ph id="ph3">[!INCLUDE[dnprdnshort](../../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph>もスロー、&lt;xref:System.DivideByZeroException&gt;例外&lt;/xref:System.DivideByZeroException&gt;。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In floating-point divisions involving the <ph id="ph1">`Double`</ph> data type, no exception is thrown, and the result is the class member representing &lt;xref:System.Double.NaN&gt;, &lt;xref:System.Double.PositiveInfinity&gt;, or &lt;xref:System.Double.NegativeInfinity&gt;, depending on the dividend.</source>
          <target state="translated">浮動小数点の部署が関係する、<ph id="ph1">`Double`</ph>データ型は、例外はスローされませんし、結果を表すクラスのメンバーは、 &lt;xref:System.Double.NaN&gt;、 &lt;xref:System.Double.PositiveInfinity&gt;、または&lt;xref:System.Double.NegativeInfinity&gt;被除数によって異なります&lt;/xref:System.Double.NegativeInfinity&gt;&lt;/xref:System.Double.PositiveInfinity&gt;&lt;/xref:System.Double.NaN&gt;。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The following table summarizes the various results of attempting to divide a <ph id="ph1">`Double`</ph> value by zero.</source>
          <target state="translated">次の表に、除算の結果、 <ph id="ph1">`Double`</ph>&amp;0; の値。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Dividend data type</source>
          <target state="translated">被除数のデータ型</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Divisor data type</source>
          <target state="translated">除数のデータ型</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Dividend value</source>
          <target state="translated">被除数の値</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Result</source>
          <target state="translated">結果</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>0</source>
          <target state="translated">0</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Double.NaN&gt; (not a mathematically defined number)</source>
          <target state="translated">&lt;xref:System.Double.NaN&gt;(数学的に定義された番号ではない)&lt;/xref:System.Double.NaN&gt;</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>&gt; 0</source>
          <target state="translated">&gt; 0</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Double.PositiveInfinity&gt;</source>
          <target state="translated">&lt;xref:System.Double.PositiveInfinity&gt;&lt;/xref:System.Double.PositiveInfinity&gt;</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph> 0</source>
          <target state="translated"><ph id="ph1">\&lt;</ph> 0</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Double.NegativeInfinity&gt;</source>
          <target state="translated">&lt;xref:System.Double.NegativeInfinity&gt;&lt;/xref:System.Double.NegativeInfinity&gt;</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>When you catch a &lt;xref:System.DivideByZeroException&gt; exception, you can use its members to help you handle it.</source>
          <target state="translated">&lt;xref:System.DivideByZeroException&gt;例外、それを処理するためには、そのメンバーを使用して&lt;/xref:System.DivideByZeroException&gt;をキャッチします。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>For example, the &lt;xref:System.Exception.Message%2A&gt; property holds the message text for the exception.</source>
          <target state="translated">たとえば、&lt;xref:System.Exception.Message%2A&gt;プロパティは例外のメッセージ テキストを保持します&lt;/xref:System.Exception.Message%2A&gt;。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Try...Catch...Finally Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/try-catch-finally-statement.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください<bpt id="p1">[</bpt>しようとしています.。キャッチしてください.Finally ステートメント<ept id="p1">](../../../../visual-basic/language-reference/statements/try-catch-finally-statement.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Bit-Shift Operations</source>
          <target state="translated">ビット シフト演算</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>A bit-shift operation performs an arithmetic shift on a bit pattern.</source>
          <target state="translated">ビット シフト演算は、ビット パターン上で算術シフトを実行します。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The pattern is contained in the operand on the left, while the operand on the right specifies the number of positions to shift the pattern.</source>
          <target state="translated">パターンは、左側のオペランドで含まれているし、右側のオペランドがパターンをシフトする位置の数を指定します。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>You can shift the pattern to the right with the <bpt id="p1">[</bpt>&gt;&gt; Operator<ept id="p1">](../../../../visual-basic/language-reference/operators/right-shift-operator.md)</ept> or to the left with the <bpt id="p2">[</bpt>&lt;&lt; Operator<ept id="p2">](../../../../visual-basic/language-reference/operators/left-shift-operator.md)</ept>.</source>
          <target state="translated">パターンをシフトすると、右側にすることができます、 <bpt id="p1">[</bpt>&gt;&gt; 演算子<ept id="p1">](../../../../visual-basic/language-reference/operators/right-shift-operator.md)</ept>を使用して、左、 <bpt id="p2">[</bpt> &lt;&gt; &lt;/&gt;<ept id="p2">](../../../../visual-basic/language-reference/operators/left-shift-operator.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The data type of the pattern operand must be <ph id="ph1">`SByte`</ph>, <ph id="ph2">`Byte`</ph>, <ph id="ph3">`Short`</ph>, <ph id="ph4">`UShort`</ph>, <ph id="ph5">`Integer`</ph>, <ph id="ph6">`UInteger`</ph>, <ph id="ph7">`Long`</ph>, or <ph id="ph8">`ULong`</ph>.</source>
          <target state="translated">パターンのオペランドのデータ型である必要があります<ph id="ph1">`SByte`</ph>、 <ph id="ph2">`Byte`</ph>、 <ph id="ph3">`Short`</ph>、 <ph id="ph4">`UShort`</ph>、 <ph id="ph5">`Integer`</ph>、 <ph id="ph6">`UInteger`</ph>、 <ph id="ph7">`Long`</ph>、または<ph id="ph8">`ULong`</ph>です。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The data type of the shift amount operand must be <ph id="ph1">`Integer`</ph> or must widen to <ph id="ph2">`Integer`</ph>.</source>
          <target state="translated">Shift キーを押し量オペランドのデータ型である必要があります<ph id="ph1">`Integer`</ph>に拡大変換する必要がありますか<ph id="ph2">`Integer`</ph>します。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Arithmetic shifts are not circular, which means the bits shifted off one end of the result are not reintroduced at the other end.</source>
          <target state="translated">算術シフトは、循環ので、もう一方の end にシフトし、結果の&amp;1; つ溢れたビットは行われません。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The bit positions vacated by a shift are set as follows:</source>
          <target state="translated">シフトによって空いたビット位置は、次のように設定されます。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>0 for an arithmetic left shift</source>
          <target state="translated">算術左シフトの場合は&amp;0;</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>0 for an arithmetic right shift of a positive number</source>
          <target state="translated">正の数値の算術演算の右シフトで&amp;0;</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>0 for an arithmetic right shift of an unsigned data type (<ph id="ph1">`Byte`</ph>, <ph id="ph2">`UShort`</ph>, <ph id="ph3">`UInteger`</ph>, <ph id="ph4">`ULong`</ph>)</source>
          <target state="translated">署名されていないデータ型の算術右シフトでは&amp;0; (<ph id="ph1">`Byte`</ph>、 <ph id="ph2">`UShort`</ph>、 <ph id="ph3">`UInteger`</ph>、 <ph id="ph4">`ULong`</ph>)</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>1 for an arithmetic right shift of a negative number (<ph id="ph1">`SByte`</ph>, <ph id="ph2">`Short`</ph>, <ph id="ph3">`Integer`</ph>, or <ph id="ph4">`Long`</ph>)</source>
          <target state="translated">負の数値の算術右シフトの場合は&amp;1; (<ph id="ph1">`SByte`</ph>、 <ph id="ph2">`Short`</ph>、 <ph id="ph3">`Integer`</ph>、または<ph id="ph4">`Long`</ph>)</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The following example shifts an <ph id="ph1">`Integer`</ph> value both left and right.</source>
          <target state="translated">次の例戻して、<ph id="ph1">`Integer`</ph>左側と右側の両方の値します。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrOperators#64<ept id="p2">](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/arithmetic-operators_8.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrOperators #&amp;64;<ept id="p2">](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/arithmetic-operators_8.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Arithmetic shifts never generate overflow exceptions.</source>
          <target state="translated">算術シフトでは、オーバーフロー例外が生成されません。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Bitwise Operations</source>
          <target state="translated">ビット処理演算</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>In addition to being logical operators, <ph id="ph1">`Not`</ph>, <ph id="ph2">`Or`</ph>, <ph id="ph3">`And`</ph>, and <ph id="ph4">`Xor`</ph> also perform bitwise arithmetic when used on numeric values.</source>
          <target state="translated">論理演算子だけでなく<ph id="ph1">`Not`</ph>、 <ph id="ph2">`Or`</ph>、 <ph id="ph3">`And`</ph>、および<ph id="ph4">`Xor`</ph>も数値で使用する場合のビットごとの演算を実行します。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>For more information, see "Bitwise Operations" in <bpt id="p1">[</bpt>Logical and Bitwise Operators in Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/logical-and-bitwise-operators.md)</ept>.</source>
          <target state="translated">詳細については、ビットごと「操作」を参照してください<bpt id="p1">[</bpt>論理と Visual Basic ではビットごとの演算子<ept id="p1">](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/logical-and-bitwise-operators.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Type Safety</source>
          <target state="translated">タイプ セーフ</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Operands should normally be of the same type.</source>
          <target state="translated">オペランドは、同じ型の通常でする必要があります。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>For example, if you are doing addition with an <ph id="ph1">`Integer`</ph> variable, you should add it to another <ph id="ph2">`Integer`</ph> variable, and you should assign the result to a variable of type <ph id="ph3">`Integer`</ph> as well.</source>
          <target state="translated">などの追加を行う場合、<ph id="ph1">`Integer`</ph>変数に追加する別<ph id="ph2">`Integer`</ph>して、変数は、型の変数に結果を割り当てる必要があります<ph id="ph3">`Integer`</ph>もします。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>One way to ensure good type-safe coding practice is to use the <bpt id="p1">[</bpt>Option Strict Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/option-strict-statement.md)</ept>.</source>
          <target state="translated">適切なタイプ セーフのことを確認する方法の&amp;1; つコーディングの推奨手順を使用するが、 <bpt id="p1">[</bpt>Option Strict ステートメント<ept id="p1">](../../../../visual-basic/language-reference/statements/option-strict-statement.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>If you set <ph id="ph1">`Option Strict On`</ph>, <ph id="ph2">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> automatically performs <bpt id="p1">*</bpt>type-safe<ept id="p1">*</ept> conversions.</source>
          <target state="translated">設定した場合<ph id="ph1">`Option Strict On`</ph>、<ph id="ph2">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>が自動的に実行<bpt id="p1">*</bpt>タイプセーフ<ept id="p1">*</ept>変換します。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>For example, if you try to add an <ph id="ph1">`Integer`</ph> variable to a <ph id="ph2">`Double`</ph> variable and assign the value to a <ph id="ph3">`Double`</ph> variable, the operation proceeds normally, because an <ph id="ph4">`Integer`</ph> value can be converted to <ph id="ph5">`Double`</ph> without loss of data.</source>
          <target state="translated">追加しようとする場合など、<ph id="ph1">`Integer`</ph>変数を<ph id="ph2">`Double`</ph>変数値を代入し、<ph id="ph3">`Double`</ph>変数、操作は正常に続行、ため、<ph id="ph4">`Integer`</ph>に値を変換できる<ph id="ph5">`Double`</ph>データを失うことがなく。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Type-unsafe conversions, on the other hand, cause a compiler error with <ph id="ph1">`Option Strict On`</ph>.</source>
          <target state="translated">型の安全でない変換では、その一方とコンパイラ エラーが発生する<ph id="ph1">`Option Strict On`</ph>です。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>For example, if you try to add an <ph id="ph1">`Integer`</ph> variable to a <ph id="ph2">`Double`</ph> variable and assign the value to an <ph id="ph3">`Integer`</ph> variable, a compiler error results, because a <ph id="ph4">`Double`</ph> variable cannot be implicitly converted to type <ph id="ph5">`Integer`</ph>.</source>
          <target state="translated">追加しようとする場合など、<ph id="ph1">`Integer`</ph>変数を<ph id="ph2">`Double`</ph>変数に値を割り当てると、<ph id="ph3">`Integer`</ph>変数、コンパイラ エラー結果、ため、<ph id="ph4">`Double`</ph>変数を型に暗黙的に変換できません<ph id="ph5">`Integer`</ph>します。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>If you set <ph id="ph1">`Option Strict Off`</ph>, however, <ph id="ph2">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> allows implicit narrowing conversions to take place, although they can result in the unexpected loss of data or precision.</source>
          <target state="translated">設定した場合<ph id="ph1">`Option Strict Off`</ph>、ただし、<ph id="ph2">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>予期しないデータまたは精度の損失で発生する可能性が発生する暗黙的な縮小変換を使用します。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>For this reason, we recommend that you use <ph id="ph1">`Option Strict On`</ph> when writing production code.</source>
          <target state="translated">このため、使用をお勧めする<ph id="ph1">`Option Strict On`</ph>実稼働コードを記述する場合。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Widening and Narrowing Conversions<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>拡大変換と縮小変換<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">関連項目</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Arithmetic Operators<ept id="p1">](../../../../visual-basic/language-reference/operators/arithmetic-operators.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>算術演算子<ept id="p1">](../../../../visual-basic/language-reference/operators/arithmetic-operators.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Bit Shift Operators<ept id="p1">](../../../../visual-basic/language-reference/operators/bit-shift-operators.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>ビット シフト演算子<ept id="p1">](../../../../visual-basic/language-reference/operators/bit-shift-operators.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Comparison Operators in Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/comparison-operators.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Visual Basic における比較演算子<ept id="p1">](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/comparison-operators.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Concatenation Operators in Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/concatenation-operators.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Visual Basic の連結演算子<ept id="p1">](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/concatenation-operators.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Logical and Bitwise Operators in Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/logical-and-bitwise-operators.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Visual Basic での論理/ビット処理演算子<ept id="p1">](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/logical-and-bitwise-operators.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Efficient Combination of Operators<ept id="p1">](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/efficient-combination-of-operators.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>演算子の効率のよい組み合わせ<ept id="p1">](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/efficient-combination-of-operators.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>