<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">703d3fc3f503017edf38521d77f9b15a92d0ebf3</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\async\async-return-types.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">14d5c5c08d314d8cba1e1d008bca242e49b0ebaf</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">95d6b73c1a0412eea0b716e496a460af7e228958</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Handback file name: lo-mt_async-return-types.8118ad87a2c2adf0b527a103ca0d8558d6f77df6.ja-jp is different with handoff file name: async-return-types.8118ad87a2c2adf0b527a103ca0d8558d6f77df6.ja-jp.</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Async Return Types (Visual Basic) | Microsoft Docs</source>
          <target state="translated">非同期の戻り値の型 (Visual Basic) |Microsoft ドキュメント</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Async Return Types (Visual Basic)</source>
          <target state="translated">非同期の戻り値の型 (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Async methods have three possible return types: &lt;xref:System.Threading.Tasks.Task%601&gt;, &lt;xref:System.Threading.Tasks.Task&gt;, and void.</source>
          <target state="translated">非同期のメソッドがある&amp;3; つの戻り値の型: &lt;xref:System.Threading.Tasks.Task%601&gt;、 &lt;xref:System.Threading.Tasks.Task&gt;、および void&lt;/xref:System.Threading.Tasks.Task&gt; &lt;/xref:System.Threading.Tasks.Task%601&gt; 。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In Visual Basic, the void return type is written as a <bpt id="p1">[</bpt>Sub<ept id="p1">](../../../../visual-basic/programming-guide/language-features/procedures/sub-procedures.md)</ept> procedure.</source>
          <target state="translated">Visual Basic では、void の戻り値の型として書き込まれる、 <bpt id="p1">[</bpt>Sub<ept id="p1">](../../../../visual-basic/programming-guide/language-features/procedures/sub-procedures.md)</ept>プロシージャです。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For more information about async methods, see <bpt id="p1">[</bpt>Asynchronous Programming with Async and Await (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/index.md)</ept>.</source>
          <target state="translated">非同期のメソッドの詳細については、次を参照してください。 <bpt id="p1">[</bpt>Async と Await (Visual Basic) を使用した非同期プログラミング<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/index.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Each return type is examined in one of the following sections, and you can find a full example that uses all three types at the end of the topic.</source>
          <target state="translated">それぞれの戻り値の型は、次のセクションの&amp;1; つで確認でき、トピックの最後で&amp;3; 種類のすべてを使用する例を参照できます。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>To run the example, you must have Visual Studio 2012 or newer and the .NET Framework 4.5 or newer installed on your computer.</source>
          <target state="translated">例を実行するには、Visual Studio 2012 以降と .NET Framework 4.5 が必要または以降のコンピューターにインストールします。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="BKMK_TaskTReturnType"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Task(T) Return Type</source>
          <target state="translated"><bpt id="p1">&lt;a name="BKMK_TaskTReturnType"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>戻り値の型を task (t)</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Threading.Tasks.Task%601&gt; return type is used for an async method that contains a <bpt id="p1">[</bpt>Return<ept id="p1">](../../../../visual-basic/language-reference/statements/return-statement.md)</ept> statement in which the operand has type <ph id="ph1">`TResult`</ph>.</source>
          <target state="translated">&lt;xref:System.Threading.Tasks.Task%601&gt;戻り値の型を含む非同期メソッドに使用、<bpt id="p1">[</bpt>返す<ept id="p1">](../../../../visual-basic/language-reference/statements/return-statement.md)</ept>ステートメントのオペランドが型を持つ<ph id="ph1">`TResult`</ph>&lt;/xref:System.Threading.Tasks.Task%601&gt;。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In the following example, the <ph id="ph1">`TaskOfT_MethodAsync`</ph> async method contains a return statement that returns an integer.</source>
          <target state="translated">次の例では、<ph id="ph1">`TaskOfT_MethodAsync`</ph> 非同期メソッドには整数を返す return ステートメントが含まれます。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Therefore, the method declaration must specify a return type of <ph id="ph1">`Task(Of Integer)`</ph>.</source>
          <target state="translated">このため、メソッドの宣言での戻り値の型を指定する必要があります<ph id="ph1">`Task(Of Integer)`</ph>します。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`TaskOfT_MethodAsync`</ph> is called from within an await expression, the await expression retrieves the integer value (the value of <ph id="ph2">`leisureHours`</ph>) that's stored in the task that's returned by <ph id="ph3">`TaskOfT_MethodAsync`</ph>.</source>
          <target state="translated"><ph id="ph1">`TaskOfT_MethodAsync`</ph> が await 式の中から呼び出されると、await 式は <ph id="ph2">`leisureHours`</ph> から返されるタスクに格納されている整数値 (<ph id="ph3">`TaskOfT_MethodAsync`</ph> の値) を取得します。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For more information about await expressions, see <bpt id="p1">[</bpt>Await Operator<ept id="p1">](../../../../visual-basic/language-reference/operators/await-operator.md)</ept>.</source>
          <target state="translated">詳細については、await 式を参照してください<bpt id="p1">[</bpt>Await 演算子<ept id="p1">](../../../../visual-basic/language-reference/operators/await-operator.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The following code calls and awaits method <ph id="ph1">`TaskOfT_MethodAsync`</ph>.</source>
          <target state="translated">次のコードは、<ph id="ph1">`TaskOfT_MethodAsync`</ph> メソッドを呼び出して待機します。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The result is assigned to the <ph id="ph1">`result1`</ph> variable.</source>
          <target state="translated">結果は <ph id="ph1">`result1`</ph> 変数に割り当てられます。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You can better understand how this happens by separating the call to <ph id="ph1">`TaskOfT_MethodAsync`</ph> from the application of <ph id="ph2">`Await`</ph>, as the following code shows.</source>
          <target state="translated">呼び出しを分割することによりこのしくみをよく理解できます<ph id="ph1">`TaskOfT_MethodAsync`</ph>のアプリケーションから<ph id="ph2">`Await`</ph>次のコードを示します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>A call to method <ph id="ph1">`TaskOfT_MethodAsync`</ph> that isn't immediately awaited returns a <ph id="ph2">`Task(Of Integer)`</ph>, as you would expect from the declaration of the method.</source>
          <target state="translated">メソッドの呼び出しを<ph id="ph1">`TaskOfT_MethodAsync`</ph>直ちに待機返しますではない、<ph id="ph2">`Task(Of Integer)`</ph>メソッドの宣言から予想されるように、します。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The task is assigned to the <ph id="ph1">`integerTask`</ph> variable in the example.</source>
          <target state="translated">タスクは、この例の <ph id="ph1">`integerTask`</ph> 変数に割り当てられます。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">`integerTask`</ph> is a &lt;xref:System.Threading.Tasks.Task%601&gt;, it contains a &lt;xref:System.Threading.Tasks.Task%601.Result&gt; property of type <ph id="ph2">`TResult`</ph>.</source>
          <target state="translated"><ph id="ph1">`integerTask`</ph>は、&lt;xref:System.Threading.Tasks.Task%601&gt;が含まれている、&lt;xref:System.Threading.Tasks.Task%601.Result&gt;型のプロパティ<ph id="ph2">`TResult`</ph>&lt;/xref:System.Threading.Tasks.Task%601.Result&gt;&lt;/xref:System.Threading.Tasks.Task%601&gt;。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In this case, TResult represents an integer type.</source>
          <target state="translated">この場合、TResult が整数型を表します。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`Await`</ph> is applied to <ph id="ph2">`integerTask`</ph>, the await expression evaluates to the contents of the &lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt; property of <ph id="ph3">`integerTask`</ph>.</source>
          <target state="translated"><ph id="ph1">`Await`</ph>に適用される<ph id="ph2">`integerTask`</ph>、await 式の評価の内容が、&lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt;プロパティの<ph id="ph3">`integerTask`</ph>&lt;/xref:System.Threading.Tasks.Task%601.Result%2A&gt;。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The value is assigned to the <ph id="ph1">`result2`</ph> variable.</source>
          <target state="translated">この値は <ph id="ph1">`result2`</ph> 変数に割り当てられます。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt; property is a blocking property.</source>
          <target state="translated">&lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt;プロパティは blocking プロパティです&lt;/xref:System.Threading.Tasks.Task%601.Result%2A&gt;。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If you try to access it before its task is finished, the thread that's currently active is blocked until the task completes and the value is available.</source>
          <target state="translated">タスクが終了する前にアクセスしようとすると、現在アクティブなスレッドは、タスクが完了して値が使用可能になるまで、ブロックされます。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In most cases, you should access the value by using <ph id="ph1">`Await`</ph> instead of accessing the property directly.</source>
          <target state="translated">ほとんどの場合を使用して値にアクセスする必要があります<ph id="ph1">`Await`</ph>プロパティに直接アクセスする代わりにします。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The display statements in the following code verify that the values of the <ph id="ph1">`result1`</ph> variable, the <ph id="ph2">`result2`</ph> variable, and the <ph id="ph3">`Result`</ph> property are the same.</source>
          <target state="translated">次のコードの表示ステートメントは、<ph id="ph1">`result1`</ph> 変数、<ph id="ph2">`result2`</ph> 変数、および <ph id="ph3">`Result`</ph> プロパティの値が同じであることを確認します。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Remember that the <ph id="ph1">`Result`</ph> property is a blocking property and shouldn't be accessed before its task has been awaited.</source>
          <target state="translated"><ph id="ph1">`Result`</ph> プロパティは Blocking プロパティであり、タスクが待機される前にアクセスしないように注意してください。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="BKMK_TaskReturnType"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Task Return Type</source>
          <target state="translated"><bpt id="p1">&lt;a name="BKMK_TaskReturnType"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>タスクの戻り値の型</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Async methods that don't contain a return statement or that contain a return statement that doesn't return an operand usually have a return type of &lt;xref:System.Threading.Tasks.Task&gt;.</source>
          <target state="translated">Return ステートメントを含まないまたはオペランドに通常返さない return ステートメントを含む非同期メソッドがある&lt;xref:System.Threading.Tasks.Task&gt;。&lt;/xref:System.Threading.Tasks.Task&gt;の戻り値の型</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Such methods would be <bpt id="p1">[</bpt>Sub<ept id="p1">](../../../../visual-basic/programming-guide/language-features/procedures/sub-procedures.md)</ept> procedures if they were written to run synchronously.</source>
          <target state="translated">このようなメソッドになります<bpt id="p1">[</bpt>Sub<ept id="p1">](../../../../visual-basic/programming-guide/language-features/procedures/sub-procedures.md)</ept>プロシージャが作成されている場合に同期的に実行します。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If you use a <ph id="ph1">`Task`</ph> return type for an async method, a calling method can use an <ph id="ph2">`Await`</ph> operator to suspend the caller's completion until the called async method has finished.</source>
          <target state="translated">使用する場合、<ph id="ph1">`Task`</ph>型を返す非同期メソッドの呼び出し方法を使用することができます、<ph id="ph2">`Await`</ph>呼び出した非同期メソッドが終了するまで、呼び出し元の完了を中断する演算子です。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>In the following example, async method <ph id="ph1">`Task_MethodAsync`</ph> doesn't contain a return statement.</source>
          <target state="translated">次の例では、非同期メソッド <ph id="ph1">`Task_MethodAsync`</ph> には、return ステートメントが含まれていません。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Therefore, you specify a return type of <ph id="ph1">`Task`</ph> for the method, which enables <ph id="ph2">`Task_MethodAsync`</ph> to be awaited.</source>
          <target state="translated">したがって、<ph id="ph1">`Task`</ph> を待機させるメソッドに、戻り値の型 <ph id="ph2">`Task_MethodAsync`</ph> を指定します。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The definition of the <ph id="ph1">`Task`</ph> type doesn't include a <ph id="ph2">`Result`</ph> property to store a return value.</source>
          <target state="translated"><ph id="ph1">`Task`</ph> 型の定義は、戻り値を格納する <ph id="ph2">`Result`</ph> プロパティを含みません。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Task_MethodAsync`</ph> is called and awaited by using an await statement instead of an await expression, similar to the calling statement for a synchronous <ph id="ph2">`Sub`</ph> or void-returning method.</source>
          <target state="translated"><ph id="ph1">`Task_MethodAsync`</ph> は、同期 <ph id="ph2">`Sub`</ph> または void を返すメソッドを呼び出す場合と同様に、await 式でなく、await ステートメントを使って呼び出され、待機されます。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The application of an <ph id="ph1">`Await`</ph> operator in this case doesn't produce a value.</source>
          <target state="translated">アプリケーション、<ph id="ph1">`Await`</ph>演算子はこの場合、値を生成しません。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The following code calls and awaits method <ph id="ph1">`Task_MethodAsync`</ph>.</source>
          <target state="translated">次のコードは、<ph id="ph1">`Task_MethodAsync`</ph> メソッドを呼び出して待機します。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>As in the previous &lt;xref:System.Threading.Tasks.Task%601&gt; example, you can separate the call to <ph id="ph1">`Task_MethodAsync`</ph> from the application of an <ph id="ph2">`Await`</ph> operator, as the following code shows.</source>
          <target state="translated">以前と同様に&lt;xref:System.Threading.Tasks.Task%601&gt;例では、呼び出しを分離することができます<ph id="ph1">`Task_MethodAsync`</ph>のアプリケーションから、<ph id="ph2">`Await`</ph>演算子は、次のコードに示すようにします&lt;/xref:System.Threading.Tasks.Task%601&gt;。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>However, remember that a <ph id="ph1">`Task`</ph> doesn't have a <ph id="ph2">`Result`</ph> property, and that no value is produced when an await operator is applied to a <ph id="ph3">`Task`</ph>.</source>
          <target state="translated">ただし <ph id="ph1">`Task`</ph> は <ph id="ph2">`Result`</ph> プロパティを持たないこと、また await 演算子が <ph id="ph3">`Task`</ph> に適用されるときに値は生成されないことに注意します。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The following code separates calling <ph id="ph1">`Task_MethodAsync`</ph> from awaiting the task that <ph id="ph2">`Task_MethodAsync`</ph> returns.</source>
          <target state="translated">次のコードは <ph id="ph1">`Task_MethodAsync`</ph> の呼び出しを <ph id="ph2">`Task_MethodAsync`</ph> が返すタスクの待機から分離します。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>6<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>6<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="BKMK_VoidReturnType"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Void Return Type</source>
          <target state="translated"><bpt id="p1">&lt;a name="BKMK_VoidReturnType"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>戻り値の型を無効にします。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The primary use of <ph id="ph1">`Sub`</ph> procedures is in event handlers, where there is no return type (referred to as a void return type in other languages).</source>
          <target state="translated">主な用途<ph id="ph1">`Sub`</ph>手順は、イベント ハンドラーの戻り値の型を (その他の言語に void 戻り値の型と呼ばれます) が存在しません。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>A void return also can be used to override void-returning methods or for methods that perform activities that can be categorized as "fire and forget."</source>
          <target state="translated">void である戻り値は、void を返すメソッドを上書きするためにも使われます。または「ファイア アンド フォーゲット (撃ち放し)」と分類されるアクティビティを実行するメソッドに対して使われます。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>However, you should return a <ph id="ph1">`Task`</ph> wherever possible, because a void-returning async method can't be awaited.</source>
          <target state="translated">ただし、void を返す非同期メソッドを待機することはできないため、できる限り <ph id="ph1">`Task`</ph> を返す必要があります。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Any caller of such a method must be able to continue to completion without waiting for the called async method to finish, and the caller must be independent of any values or exceptions that the async method generates.</source>
          <target state="translated">このようなメソッドの呼び出し元は、呼び出した非同期メソッドが完了するのを待たずに、完了まで継続できる必要があります。また呼び出し元は、非同期メソッドが生成する値または例外とは無関係である必要があります。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The caller of a void-returning async method can't catch exceptions that are thrown from the method, and such unhandled exceptions are likely to cause your application to fail.</source>
          <target state="translated">void を返す非同期メソッドの呼び出し元は、メソッドがスローする例外をキャッチすることはできません。そのようなハンドルされない例外によって、アプリケーションが失敗する可能性が高くなります。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>If an exception occurs in an async method that returns a &lt;xref:System.Threading.Tasks.Task&gt; or &lt;xref:System.Threading.Tasks.Task%601&gt;, the exception is stored in the returned task, and rethrown when the task is awaited.</source>
          <target state="translated">返す非同期メソッドで例外が発生したかどうか、&lt;xref:System.Threading.Tasks.Task&gt;または&lt;xref:System.Threading.Tasks.Task%601&gt;、例外が返されるタスクに格納され、タスクが待機するときに再度スローされます&lt;/xref:System.Threading.Tasks.Task%601&gt;&lt;/xref:System.Threading.Tasks.Task&gt;。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Therefore, make sure that any async method that can produce an exception has a return type of &lt;xref:System.Threading.Tasks.Task&gt; or &lt;xref:System.Threading.Tasks.Task%601&gt; and that calls to the method are awaited.</source>
          <target state="translated">そのため、例外を生成できる非同期のメソッドの戻り値の型があることを確認して行って&lt;xref:System.Threading.Tasks.Task&gt;または&lt;xref:System.Threading.Tasks.Task%601&gt;メソッドの呼び出しが待機している&lt;/xref:System.Threading.Tasks.Task%601&gt;&lt;/xref:System.Threading.Tasks.Task&gt;。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>For more information about how to catch exceptions in async methods, see <bpt id="p1">[</bpt>Try...Catch...Finally Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/try-catch-finally-statement.md)</ept>.</source>
          <target state="translated">非同期のメソッドで例外をキャッチする方法の詳細については、次を参照してください<bpt id="p1">[</bpt>しようとしています.。キャッチしてください.Finally ステートメント<ept id="p1">](../../../../visual-basic/language-reference/statements/try-catch-finally-statement.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The following code defines an async event handler.</source>
          <target state="translated">次のコードは非同期のイベント ハンドラーを定義します。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>7<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>7<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="BKMK_Example"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Complete Example</source>
          <target state="translated"><bpt id="p1">&lt;a name="BKMK_Example"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>コード例を全体します。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The following Windows Presentation Foundation (WPF) project contains the code examples from this topic.</source>
          <target state="translated">次の Windows Presentation Foundation (WPF) プロジェクトには、このトピックのコード例が含まれています。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>To run the project, perform the following steps:</source>
          <target state="translated">このプロジェクトを実行するには、次の手順を実行します。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Start Visual Studio.</source>
          <target state="translated">Visual Studio を起動します。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>On the menu bar, choose <bpt id="p1">**</bpt>File<ept id="p1">**</ept>, <bpt id="p2">**</bpt>New<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Project<ept id="p3">**</ept>.</source>
          <target state="translated">メニュー バーで、 <bpt id="p1">**</bpt>[ファイル]<ept id="p1">**</ept>、 <bpt id="p2">**</bpt>[新規作成]<ept id="p2">**</ept>、 <bpt id="p3">**</bpt>[プロジェクト]<ept id="p3">**</ept>の順にクリックします。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>New Project<ept id="p1">**</ept> dialog box opens.</source>
          <target state="translated"><bpt id="p1">**</bpt>[新しいプロジェクト]<ept id="p1">**</ept> ダイアログ ボックスが表示されます。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Installed<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Templates<ept id="p2">**</ept> category, choose <bpt id="p3">**</bpt>Visual Basic<ept id="p3">**</ept>, and then choose <bpt id="p4">**</bpt>Windows<ept id="p4">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>インストールされている<ept id="p1">**</ept>、<bpt id="p2">**</bpt>テンプレート<ept id="p2">**</ept>カテゴリで、選択<bpt id="p3">**</bpt>Visual Basic<ept id="p3">**</ept>、にして<bpt id="p4">**</bpt>Windows<ept id="p4">**</ept>します。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Choose <bpt id="p1">**</bpt>WPF Application<ept id="p1">**</ept> from the list of project types.</source>
          <target state="translated">選択<bpt id="p1">**</bpt>WPF アプリケーション<ept id="p1">**</ept>プロジェクトの種類の一覧からです。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Enter <ph id="ph1">`AsyncReturnTypes`</ph> as the name of the project, and then choose the <bpt id="p1">**</bpt>OK<ept id="p1">**</ept> button.</source>
          <target state="translated">入力<ph id="ph1">`AsyncReturnTypes`</ph>として、プロジェクトの名前を選択し、 <bpt id="p1">**</bpt>ok<ept id="p1">**</ept>  ボタンをクリックします。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The new project appears in <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>.</source>
          <target state="translated">新しいプロジェクトに表示されます<bpt id="p1">**</bpt>ソリューション エクスプ ローラー<ept id="p1">**</ept>します。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>In the Visual Studio Code Editor, choose the <bpt id="p1">**</bpt>MainWindow.xaml<ept id="p1">**</ept> tab.</source>
          <target state="translated">Visual Studio コード エディターで、 <bpt id="p1">**</bpt>[MainWindow.xaml]<ept id="p1">**</ept> タブをクリックします。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>If the tab is not visible, open the shortcut menu for MainWindow.xaml in <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, and then choose <bpt id="p2">**</bpt>Open<ept id="p2">**</ept>.</source>
          <target state="translated">MainWindow.xaml のショートカット メニューを開き、タブが表示されていない場合は、<bpt id="p1">**</bpt>ソリューション エクスプ ローラー<ept id="p1">**</ept>、にして<bpt id="p2">**</bpt>開く<ept id="p2">**</ept>します。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>XAML<ept id="p1">**</ept> window of MainWindow.xaml, replace the code with the following code.</source>
          <target state="translated"><bpt id="p1">**</bpt>XAML<ept id="p1">**</ept> MainWindow.xaml のウィンドウは、次のコードで、コードを置き換えます。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>A simple window that contains a text box and a button appears in the <bpt id="p1">**</bpt>Design<ept id="p1">**</ept> window of MainWindow.xaml.</source>
          <target state="translated">テキスト ボックスとボタンを含む簡単なウィンドウに表示、<bpt id="p1">**</bpt>デザイン<ept id="p1">**</ept>MainWindow.xaml のウィンドウです。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, open the shortcut menu for MainWindow.xaml.vb, and then choose <bpt id="p2">**</bpt>View Code<ept id="p2">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>ソリューション エクスプ ローラー<ept id="p1">**</ept>MainWindow.xaml.vb のショートカット メニューを開き、クリックして<bpt id="p2">**</bpt>コードの表示<ept id="p2">**</ept>します。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Replace the code in MainWindow.xaml.vb with the following code.</source>
          <target state="translated">MainWindow.xaml.vb のコードを次のコードに置き換えます。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Choose the F5 key to run the program, and then choose the <bpt id="p1">**</bpt>Start<ept id="p1">**</ept> button.</source>
          <target state="translated">F5 キーを押してプログラムを実行し、 <bpt id="p1">**</bpt>[Start]<ept id="p1">**</ept> を複数回クリックします。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The following output should appear.</source>
          <target state="translated">次の出力が表示されます。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">関連項目</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Threading.Tasks.Task.FromResult%2A&gt;</source>
          <target state="translated">&lt;xref:System.Threading.Tasks.Task.FromResult%2A&gt;&lt;/xref:System.Threading.Tasks.Task.FromResult%2A&gt;</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Walkthrough: Accessing the Web by Using Async and Await (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/walkthrough-accessing-the-web-by-using-async-and-await.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>チュートリアル: Async を使用して Web へのアクセスと Await (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/walkthrough-accessing-the-web-by-using-async-and-await.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Control Flow in Async Programs (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/control-flow-in-async-programs.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>(Visual Basic) の非同期プログラムにおける制御フロー<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/control-flow-in-async-programs.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Async<ept id="p1">](../../../../visual-basic/language-reference/modifiers/async.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>非同期<ept id="p1">](../../../../visual-basic/language-reference/modifiers/async.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Await Operator<ept id="p1">](../../../../visual-basic/language-reference/operators/await-operator.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>Await 演算子<ept id="p1">](../../../../visual-basic/language-reference/operators/await-operator.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>