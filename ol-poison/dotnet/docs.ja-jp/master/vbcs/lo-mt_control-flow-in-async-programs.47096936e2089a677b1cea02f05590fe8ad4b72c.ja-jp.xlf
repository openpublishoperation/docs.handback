<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">15e02fbc023db9ae2f3ee9f40598faa7c9c027a0</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\async\control-flow-in-async-programs.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">47eb82f5369b89caf2e6f4c88e9053625fa7905e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">92f3041b31405b2b386c0e3bc9a68023e49ebfc2</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Handback file name: lo-mt_control-flow-in-async-programs.47096936e2089a677b1cea02f05590fe8ad4b72c.ja-jp is different with handoff file name: control-flow-in-async-programs.47096936e2089a677b1cea02f05590fe8ad4b72c.ja-jp.</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Control Flow in Async Programs (Visual Basic) | Microsoft Docs</source>
          <target state="translated">非同期プログラム (Visual Basic) でフロー制御 |Microsoft ドキュメント</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Control Flow in Async Programs (Visual Basic)</source>
          <target state="translated">(Visual Basic) の非同期プログラムにおける制御フロー</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You can write and maintain asynchronous programs more easily by using the <ph id="ph1">`Async`</ph> and <ph id="ph2">`Await`</ph> keywords.</source>
          <target state="translated"><ph id="ph1">`Async`</ph> キーワードと <ph id="ph2">`Await`</ph> キーワードを使用すると、非同期のプログラムの作成と保守をより簡単に行えます。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>However, the results might surprise you if you don't understand how your program operates.</source>
          <target state="translated">ただし、プログラムがどのように動作するかを理解しないと、その結果は予想に反するものになる場合があります。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This topic traces the flow of control through a simple async program to show you when control moves from one method to another and what information is transferred each time.</source>
          <target state="translated">このトピックでは、簡単な非同期プログラムによる制御フローをトレースして、制御があるメソッドから別のメソッドに移るタイミングと、その都度転送される情報について説明します。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Async`</ph> and <ph id="ph2">`Await`</ph> keywords were introduced in Visual Studio 2012.</source>
          <target state="translated"><ph id="ph1">`Async`</ph> キーワードおよび <ph id="ph2">`Await`</ph> キーワードは、Visual Studio 2012 で導入されました。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>In general, you mark methods that contain asynchronous code with the <bpt id="p1">[</bpt>Async<ept id="p1">](../../../../visual-basic/language-reference/modifiers/async.md)</ept> modifier.</source>
          <target state="translated">一般を使用した非同期コードを含むメソッドをマークする、 <bpt id="p1">[</bpt>Async<ept id="p1">](../../../../visual-basic/language-reference/modifiers/async.md)</ept>修飾子です。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In a method that's marked with an async modifier, you can use an <bpt id="p1">[</bpt>Await (Visual Basic)<ept id="p1">](../../../../visual-basic/language-reference/operators/await-operator.md)</ept> operator to specify where the method pauses to wait for a called asynchronous process to complete.</source>
          <target state="translated">Async 修飾子でマークされているメソッドで使用することができます、 <bpt id="p1">[</bpt>Await (Visual Basic)<ept id="p1">](../../../../visual-basic/language-reference/operators/await-operator.md)</ept>メソッドが呼び出された非同期プロセスを完了するまで待機する一時停止を指定する演算子です。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Asynchronous Programming with Async and Await (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/index.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。 <bpt id="p1">[</bpt>Async と Await (Visual Basic) を使用した非同期プログラミング<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/index.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The following example uses async methods to download the contents of a specified website as a string and to display the length of the string.</source>
          <target state="translated">次の例では、非同期メソッドを使用して、指定した Web サイトのコンテンツを文字列としてダウンロードし、その文字列の長さを表示します。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The example contains the following two methods.</source>
          <target state="translated">この例には、次の&amp;2; つのメソッドが含まれています。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`startButton_Click`</ph>, which calls <ph id="ph2">`AccessTheWebAsync`</ph> and displays the result.</source>
          <target state="translated"><ph id="ph1">`startButton_Click`</ph> を呼び出して結果を表示する <ph id="ph2">`AccessTheWebAsync`</ph>。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`AccessTheWebAsync`</ph>, which downloads the contents of a website as a string and returns the length of the string.</source>
          <target state="translated">Web サイトのコンテンツを文字列としてダウンロードして、その文字列の長さを返す <ph id="ph1">`AccessTheWebAsync`</ph>。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`AccessTheWebAsync`</ph> uses an asynchronous &lt;xref:System.Net.Http.HttpClient&gt; method, &lt;xref:System.Net.Http.HttpClient.GetStringAsync%28System.String%29&gt;, to download the contents.</source>
          <target state="translated"><ph id="ph1">`AccessTheWebAsync`</ph>非同期を使用して&lt;xref:System.Net.Http.HttpClient&gt;メソッド、 &lt;xref:System.Net.Http.HttpClient.GetStringAsync%28System.String%29&gt;、コンテンツをダウンロードします&lt;/xref:System.Net.Http.HttpClient.GetStringAsync%28System.String%29&gt;&lt;/xref:System.Net.Http.HttpClient&gt;。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Numbered display lines appear at strategic points throughout the program to help you understand how the program runs and to explain what happens at each point that is marked.</source>
          <target state="translated">番号付き表示行はプログラム全体で重要なポイントを示し、プログラムがどのように実行され、マークされている各ポイントで何が発生するかを理解するために役立ちます。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The display lines are labeled "ONE" through "SIX."</source>
          <target state="translated">表示行には「1」から「6」までのラベルが付けられています。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The labels represent the order in which the program reaches these lines of code.</source>
          <target state="translated">このラベルは、プログラムがこれらのコード行に到達する順序を表します。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The following code shows an outline of the program.</source>
          <target state="translated">次のコードは、プログラムの概要を示します。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Each of the labeled locations, "ONE" through "SIX," displays information about the current state of the program.</source>
          <target state="translated">「1」から「6」までのそれぞれのラベルの位置は、プログラムの現在の状態に関する情報を表示します。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The following output is produced.</source>
          <target state="translated">次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Set Up the Program</source>
          <target state="translated">プログラムをセットアップする</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>You can download the code that this topic uses from MSDN, or you can build it yourself.</source>
          <target state="translated">このトピックで使用するコードは、MSDN からダウンロードするか、または自分でビルドできます。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>To run the example, you must have Visual Studio 2012 or newer and  the .NET Framework 4.5 or newer installed on your computer.</source>
          <target state="translated">例を実行するには、Visual Studio 2012 以降と .NET Framework 4.5 が必要または以降のコンピューターにインストールします。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Download the Program</source>
          <target state="translated">プログラムをダウンロードする</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>You can download the application for this topic from <bpt id="p1">[</bpt>Async Sample: Control Flow in Async Programs<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=255285)</ept>.</source>
          <target state="translated">このトピックからのアプリケーションをダウンロードする<bpt id="p1">[</bpt>Async サンプル: 非同期プログラムにおける制御のフロー<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=255285)</ept>します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The following steps open and run the program.</source>
          <target state="translated">次の手順でプログラムを開いて実行します。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Unzip the downloaded file, and then start Visual Studio.</source>
          <target state="translated">ダウンロードしたファイルを解凍し、Visual Studio を開始します。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>On the menu bar, choose <bpt id="p1">**</bpt>File<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Open<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Project/Solution<ept id="p3">**</ept>.</source>
          <target state="translated">メニュー バーで <bpt id="p1">**</bpt>[ファイル]<ept id="p1">**</ept>、 <bpt id="p2">**</bpt>[開く]<ept id="p2">**</ept>、 <bpt id="p3">**</bpt>[プロジェクト/ソリューション]<ept id="p3">**</ept>の順に選択します。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Navigate to the folder that holds the unzipped sample code, open the solution (.sln) file, and then choose the F5 key to build and run the project.</source>
          <target state="translated">解凍したサンプル コードが含まれるフォルダーに移動し、ソリューション (.sln) ファイルを開き、F5 キーを押してプロジェクトをビルドし、実行します。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Build the Program Yourself</source>
          <target state="translated">プログラムを手動でビルドする</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The following Windows Presentation Foundation (WPF) project contains the code example for this topic.</source>
          <target state="translated">次の Windows Presentation Foundation (WPF) プロジェクトには、このトピックのコード例が含まれています。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>To run the project, perform the following steps:</source>
          <target state="translated">このプロジェクトを実行するには、次の手順を実行します。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Start Visual Studio.</source>
          <target state="translated">Visual Studio を起動します。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>On the menu bar, choose <bpt id="p1">**</bpt>File<ept id="p1">**</ept>, <bpt id="p2">**</bpt>New<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Project<ept id="p3">**</ept>.</source>
          <target state="translated">メニュー バーで、 <bpt id="p1">**</bpt>[ファイル]<ept id="p1">**</ept>、 <bpt id="p2">**</bpt>[新規作成]<ept id="p2">**</ept>、 <bpt id="p3">**</bpt>[プロジェクト]<ept id="p3">**</ept>の順にクリックします。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>New Project<ept id="p1">**</ept> dialog box opens.</source>
          <target state="translated"><bpt id="p1">**</bpt>[新しいプロジェクト]<ept id="p1">**</ept> ダイアログ ボックスが表示されます。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Installed Templates<ept id="p1">**</ept> pane, choose <bpt id="p2">**</bpt>Visual Basic<ept id="p2">**</ept>, and then choose <bpt id="p3">**</bpt>WPF Application<ept id="p3">**</ept> from the list of project types.</source>
          <target state="translated"><bpt id="p1">**</bpt>インストールされたテンプレート<ept id="p1">**</ept> ウィンドウで、選択<bpt id="p2">**</bpt>Visual Basic<ept id="p2">**</ept>、にして<bpt id="p3">**</bpt>WPF アプリケーション<ept id="p3">**</ept>プロジェクトの種類の一覧からです。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Enter <ph id="ph1">`AsyncTracer`</ph> as the name of the project, and then choose the <bpt id="p1">**</bpt>OK<ept id="p1">**</ept> button.</source>
          <target state="translated">入力<ph id="ph1">`AsyncTracer`</ph>として、プロジェクトの名前を選択し、 <bpt id="p1">**</bpt>ok<ept id="p1">**</ept>  ボタンをクリックします。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The new project appears in <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>.</source>
          <target state="translated">新しいプロジェクトに表示されます<bpt id="p1">**</bpt>ソリューション エクスプ ローラー<ept id="p1">**</ept>します。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>In the Visual Studio Code Editor, choose the <bpt id="p1">**</bpt>MainWindow.xaml<ept id="p1">**</ept> tab.</source>
          <target state="translated">Visual Studio コード エディターで、 <bpt id="p1">**</bpt>[MainWindow.xaml]<ept id="p1">**</ept> タブをクリックします。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If the tab isn’t visible, open the shortcut menu for MainWindow.xaml in <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, and then choose <bpt id="p2">**</bpt>View Code<ept id="p2">**</ept>.</source>
          <target state="translated">タブが表示されない場合で MainWindow.xaml のショートカット メニューを開き<bpt id="p1">**</bpt>ソリューション エクスプ ローラー<ept id="p1">**</ept>、にして<bpt id="p2">**</bpt>コードの表示<ept id="p2">**</ept>します。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>XAML<ept id="p1">**</ept> view of MainWindow.xaml, replace the code with the following code.</source>
          <target state="translated"><bpt id="p1">**</bpt>XAML<ept id="p1">**</ept> MainWindow.xaml のビューで、コードを次のコードに置き換えます。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>A simple window that contains a text box and a button appears in the <bpt id="p1">**</bpt>Design<ept id="p1">**</ept> view of MainWindow.xaml.</source>
          <target state="translated">テキスト ボックスとボタンを含む簡単なウィンドウに表示、<bpt id="p1">**</bpt>デザイン<ept id="p1">**</ept>MainWindow.xaml のビューです。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Add a reference for &lt;xref:System.Net.Http&gt;.</source>
          <target state="translated">&lt;xref:System.Net.Http&gt;。&lt;/xref:System.Net.Http&gt;への参照を追加します。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, open the shortcut menu for MainWindow.xaml.vb, and then choose <bpt id="p2">**</bpt>View Code<ept id="p2">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>ソリューション エクスプ ローラー<ept id="p1">**</ept>MainWindow.xaml.vb のショートカット メニューを開き、クリックして<bpt id="p2">**</bpt>コードの表示<ept id="p2">**</ept>します。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>In MainWindow.xaml.vb , replace the code with the following code.</source>
          <target state="translated">MainWindow.xaml.vb で、コードを次のコードに置き換えます。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Choose the F5 key to run the program, and then choose the <bpt id="p1">**</bpt>Start<ept id="p1">**</ept> button.</source>
          <target state="translated">F5 キーを押してプログラムを実行し、 <bpt id="p1">**</bpt>[Start]<ept id="p1">**</ept> を複数回クリックします。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The following output should appear.</source>
          <target state="translated">次の出力が表示されます。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Trace the Program</source>
          <target state="translated">プログラムのトレース</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Steps ONE and TWO</source>
          <target state="translated">手順&amp;1;. および&amp;2;.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The first two display lines trace the path as <ph id="ph1">`startButton_Click`</ph> calls <ph id="ph2">`AccessTheWebAsync`</ph>, and <ph id="ph3">`AccessTheWebAsync`</ph> calls the asynchronous &lt;xref:System.Net.Http.HttpClient&gt; method &lt;xref:System.Net.Http.HttpClient.GetStringAsync%28System.String%29&gt;.</source>
          <target state="translated">最初の&amp;2; つの表示行がパスをトレースする<ph id="ph1">`startButton_Click`</ph>呼び出し<ph id="ph2">`AccessTheWebAsync`</ph>、および<ph id="ph3">`AccessTheWebAsync`</ph>非同期&lt;xref:System.Net.Http.HttpClient&gt;&lt;xref:System.Net.Http.HttpClient.GetStringAsync%28System.String%29&gt;.&lt;/xref:System.Net.Http.HttpClient.GetStringAsync%28System.String%29&gt;メソッド&lt;/xref:System.Net.Http.HttpClient&gt;を呼び出す</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The following image outlines the calls from method to method.</source>
          <target state="translated">次の図は、メソッドからメソッドへの呼び出しを示しています。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Steps ONE and TWO<ept id="p1">]</ept><bpt id="p2">(../../../../csharp/programming-guide/concepts/async/media/asynctrace-onetwo.png "</bpt>AsyncTrace-ONETWO<ept id="p2">")</ept></source>
          <target state="translated"><bpt id="p1">![</bpt>手順&amp;1;. および&amp;2;<ept id="p1">]</ept><bpt id="p2">(../../../../csharp/programming-guide/concepts/async/media/asynctrace-onetwo.png "</bpt>AsyncTrace ONETWO<ept id="p2">")</ept></target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The return type of both <ph id="ph1">`AccessTheWebAsync`</ph> and <ph id="ph2">`client.GetStringAsync`</ph> is &lt;xref:System.Threading.Tasks.Task%601&gt;.</source>
          <target state="translated">両方の戻り値の型<ph id="ph1">`AccessTheWebAsync`</ph>と<ph id="ph2">`client.GetStringAsync`</ph> &lt;xref:System.Threading.Tasks.Task%601&gt;.&lt;/xref:System.Threading.Tasks.Task%601&gt;は、</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For <ph id="ph1">`AccessTheWebAsync`</ph>, TResult is an integer.</source>
          <target state="translated"><ph id="ph1">`AccessTheWebAsync`</ph> では、TResult は整数です。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>For <ph id="ph1">`GetStringAsync`</ph>, TResult is a string.</source>
          <target state="translated"><ph id="ph1">`GetStringAsync`</ph> では、TResult は文字列です。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>For more information about async method return types, see <bpt id="p1">[</bpt>Async Return Types (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/async-return-types.md)</ept>.</source>
          <target state="translated">非同期メソッドの戻り値の型の詳細については、次を参照してください。 <bpt id="p1">[</bpt>Async を返す型 (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/async-return-types.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>A task-returning async method returns a task instance when control shifts back to the caller.</source>
          <target state="translated">タスクを返す非同期のメソッドは、制御が呼び出し元に戻ると、タスク インスタンスを返します。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Control returns from an async method to its caller either when an <ph id="ph1">`Await`</ph> operator is encountered in the called method or when the called method ends.</source>
          <target state="translated">呼び出し元に、非同期メソッドから制御が戻りますいずれかの場合、<ph id="ph1">`Await`</ph>演算子が呼び出されたメソッドまたは呼び出されたメソッドが終了した場合に検出されました。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The display lines that are labeled "THREE" through "SIX" trace this part of the process.</source>
          <target state="translated">「3」から「6」のラベルの付いた表示行はこのプロセスの部分をトレースします。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Step THREE</source>
          <target state="translated">手順&amp;3;.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">`AccessTheWebAsync`</ph>, the asynchronous method &lt;xref:System.Net.Http.HttpClient.GetStringAsync%28System.String%29&gt; is called to download the contents of the target webpage.</source>
          <target state="translated"><ph id="ph1">`AccessTheWebAsync`</ph>、非同期メソッド&lt;xref:System.Net.Http.HttpClient.GetStringAsync%28System.String%29&gt;対象 web ページのコンテンツをダウンロードするために呼び出される&lt;/xref:System.Net.Http.HttpClient.GetStringAsync%28System.String%29&gt;。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Control returns from <ph id="ph1">`client.GetStringAsync`</ph> to <ph id="ph2">`AccessTheWebAsync`</ph> when <ph id="ph3">`client.GetStringAsync`</ph> returns.</source>
          <target state="translated"><ph id="ph1">`client.GetStringAsync`</ph> が制御を返すと、<ph id="ph2">`AccessTheWebAsync`</ph> から <ph id="ph3">`client.GetStringAsync`</ph> に制御が戻ります。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`client.GetStringAsync`</ph> method returns a task of string that’s assigned to the <ph id="ph2">`getStringTask`</ph> variable in <ph id="ph3">`AccessTheWebAsync`</ph>.</source>
          <target state="translated"><ph id="ph1">`client.GetStringAsync`</ph> メソッドは、<ph id="ph2">`getStringTask`</ph> の <ph id="ph3">`AccessTheWebAsync`</ph> 変数に割り当てる文字列のタスクを返します。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The following line in the example program shows the call to <ph id="ph1">`client.GetStringAsync`</ph> and the assignment.</source>
          <target state="translated">プログラム例の次の行は、<ph id="ph1">`client.GetStringAsync`</ph> の呼び出しと割り当てを示しています。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>5<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>5<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>You can think of the task as a promise by <ph id="ph1">`client.GetStringAsync`</ph> to produce an actual string eventually.</source>
          <target state="translated">このタスクは <ph id="ph1">`client.GetStringAsync`</ph> により実際の文字列が最終的に生成される約束と見なすことができます。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>In the meantime, if <ph id="ph1">`AccessTheWebAsync`</ph> has work to do that doesn't depend on the promised string from <ph id="ph2">`client.GetStringAsync`</ph>, that work can continue while  <ph id="ph3">`client.GetStringAsync`</ph> waits.</source>
          <target state="translated"><ph id="ph1">`AccessTheWebAsync`</ph> には <ph id="ph2">`client.GetStringAsync`</ph> から約束された文字列に依存しない処理がある場合、その処理は <ph id="ph3">`client.GetStringAsync`</ph> を待機している間は、続行できます。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>In the example, the following lines of output, which are labeled "THREE,” represent the opportunity to do independent work</source>
          <target state="translated">この例では、「3」のラベルの付いた行の出力は、独立した処理を行う機会を表します。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>6<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>6<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The following statement suspends progress in <ph id="ph1">`AccessTheWebAsync`</ph> when <ph id="ph2">`getStringTask`</ph> is awaited.</source>
          <target state="translated">次のステートメントは <ph id="ph1">`AccessTheWebAsync`</ph> が待機中の場合 <ph id="ph2">`getStringTask`</ph> の進行を中断します。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>7<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>7<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The following image shows the flow of control from <ph id="ph1">`client.GetStringAsync`</ph> to the assignment to <ph id="ph2">`getStringTask`</ph> and from the creation of <ph id="ph3">`getStringTask`</ph> to the application of an Await operator.</source>
          <target state="translated">次の図は、コントロールからのフローを示しています。<ph id="ph1">`client.GetStringAsync`</ph>への割り当てへ<ph id="ph2">`getStringTask`</ph>との作成から<ph id="ph3">`getStringTask`</ph>Await 演算子のアプリケーションにします。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Step THREE<ept id="p1">]</ept><bpt id="p2">(../../../../csharp/programming-guide/concepts/async/media/asynctrace-three.png "</bpt>AsyncTrace-Three<ept id="p2">")</ept></source>
          <target state="translated"><bpt id="p1">![</bpt>ステップ&amp;3;<ept id="p1">]</ept><bpt id="p2">(../../../../csharp/programming-guide/concepts/async/media/asynctrace-three.png "</bpt>AsyncTrace&amp;3;<ept id="p2">")</ept></target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The await expression suspends <ph id="ph1">`AccessTheWebAsync`</ph> until <ph id="ph2">`client.GetStringAsync`</ph> returns.</source>
          <target state="translated">await 式は <ph id="ph1">`AccessTheWebAsync`</ph> が制御を返すまで <ph id="ph2">`client.GetStringAsync`</ph> を中断します。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>In the meantime, control returns to the caller of <ph id="ph1">`AccessTheWebAsync`</ph>, <ph id="ph2">`startButton_Click`</ph>.</source>
          <target state="translated">その間、コントロールは <ph id="ph1">`AccessTheWebAsync`</ph> の呼び出し元である <ph id="ph2">`startButton_Click`</ph> に戻されます。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Typically, you await the call to an asynchronous method immediately.</source>
          <target state="translated">通常、直ちに非同期メソッドへの呼び出しの待機状態となります。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>For example, the following assignment could replace the previous code that creates and then awaits <ph id="ph1">`getStringTask`</ph>: <ph id="ph2">`Dim urlContents As String = Await client.GetStringAsync("http://msdn.microsoft.com")`</ph></source>
          <target state="translated">たとえば、次の割り当てで作成し、それを待機する前のコードを置き換えられます<ph id="ph1">`getStringTask`</ph>:<ph id="ph2">`Dim urlContents As String = Await client.GetStringAsync("http://msdn.microsoft.com")`</ph></target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>In this topic, the await operator is applied later to accommodate the output lines that mark the flow of control through the program.</source>
          <target state="translated">このトピックでは、await 演算子が後で適用され、プログラムでの制御フローを示す出力行を格納します。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Step FOUR</source>
          <target state="translated">手順&amp;4;.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The declared return type of <ph id="ph1">`AccessTheWebAsync`</ph> is <ph id="ph2">`Task(Of Integer)`</ph>.</source>
          <target state="translated">戻り値の型の宣言、<ph id="ph1">`AccessTheWebAsync`</ph>は<ph id="ph2">`Task(Of Integer)`</ph>です。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Therefore, when <ph id="ph1">`AccessTheWebAsync`</ph> is suspended, it returns a task of integer to <ph id="ph2">`startButton_Click`</ph>.</source>
          <target state="translated">したがって、<ph id="ph1">`AccessTheWebAsync`</ph> が中断されると、<ph id="ph2">`startButton_Click`</ph> に整数のタスクを返します。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>You should understand that the returned task isn’t <ph id="ph1">`getStringTask`</ph>.</source>
          <target state="translated">返されたタスクは <ph id="ph1">`getStringTask`</ph> ではないことに注意する必要があります。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The returned task is a new task of integer that represents what remains to be done in the suspended method, <ph id="ph1">`AccessTheWebAsync`</ph>.</source>
          <target state="translated">返されたタスクは、中断されたメソッド <ph id="ph1">`AccessTheWebAsync`</ph> での未処理を表す、整数の新しいタスクです。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The task is a promise from <ph id="ph1">`AccessTheWebAsync`</ph> to produce an integer when the task is complete.</source>
          <target state="translated">これにより、タスクが完了したときに <ph id="ph1">`AccessTheWebAsync`</ph> が整数を生成することが保証されます。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The following statement assigns this task to the <ph id="ph1">`getLengthTask`</ph> variable.</source>
          <target state="translated">次のステートメントはこのタスクを <ph id="ph1">`getLengthTask`</ph> 変数に割り当てます。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>8<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>8<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>As in <ph id="ph1">`AccessTheWebAsync`</ph>, <ph id="ph2">`startButton_Click`</ph> can continue with work that doesn’t depend on the results of the asynchronous task (<ph id="ph3">`getLengthTask`</ph>) until the task is awaited.</source>
          <target state="translated"><ph id="ph1">`AccessTheWebAsync`</ph> と同様に、<ph id="ph2">`startButton_Click`</ph> は、非同期タスク (<ph id="ph3">`getLengthTask`</ph>) の結果に依存しない処理を、タスクが待機するまで続行できます。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The following output lines represent that work.</source>
          <target state="translated">次の出力行はその処理を表します。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>9<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>9<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Progress in <ph id="ph1">`startButton_Click`</ph> is suspended when <ph id="ph2">`getLengthTask`</ph> is awaited.</source>
          <target state="translated"><ph id="ph1">`startButton_Click`</ph> が待機すると、<ph id="ph2">`getLengthTask`</ph> の進行は中断します。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The following assignment statement suspends <ph id="ph1">`startButton_Click`</ph> until <ph id="ph2">`AccessTheWebAsync`</ph> is complete.</source>
          <target state="translated">次の代入ステートメントは、<ph id="ph1">`startButton_Click`</ph> が完了するまで <ph id="ph2">`AccessTheWebAsync`</ph> を中断します。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>10<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>10<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>In the following illustration, the arrows show the flow of control from the await expression in <ph id="ph1">`AccessTheWebAsync`</ph> to the assignment of a value to <ph id="ph2">`getLengthTask`</ph>, followed by normal processing in <ph id="ph3">`startButton_Click`</ph> until <ph id="ph4">`getLengthTask`</ph> is awaited.</source>
          <target state="translated">次の図で、矢印は <ph id="ph1">`AccessTheWebAsync`</ph> の await 式から <ph id="ph2">`getLengthTask`</ph> への値の割り当てへの制御のフロー、および <ph id="ph3">`startButton_Click`</ph> が待機するまでの <ph id="ph4">`getLengthTask`</ph> の通常の処理を示しています。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Step FOUR<ept id="p1">]</ept><bpt id="p2">(../../../../csharp/programming-guide/concepts/async/media/asynctrace-four.png "</bpt>AsyncTrace-FOUR<ept id="p2">")</ept></source>
          <target state="translated"><bpt id="p1">![</bpt>ステップ&amp;4;<ept id="p1">]</ept><bpt id="p2">(../../../../csharp/programming-guide/concepts/async/media/asynctrace-four.png "</bpt>AsyncTrace&amp;4;<ept id="p2">")</ept></target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Step FIVE</source>
          <target state="translated">手順&amp;5;.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`client.GetStringAsync`</ph> signals that it’s complete, processing in <ph id="ph2">`AccessTheWebAsync`</ph> is released from suspension and can continue past the await statement.</source>
          <target state="translated"><ph id="ph1">`client.GetStringAsync`</ph> が終了を通知すると、<ph id="ph2">`AccessTheWebAsync`</ph> の処理は中断から解放され、await ステートメントを越えて続行できます。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The following lines of output represent the resumption of processing.</source>
          <target state="translated">次の出力行は、処理の再開を表します。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>11<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>11<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The operand of the return statement, <ph id="ph1">`urlContents.Length`</ph>, is stored in the task that  <ph id="ph2">`AccessTheWebAsync`</ph> returns.</source>
          <target state="translated">return ステートメントのオペランド <ph id="ph1">`urlContents.Length`</ph> は <ph id="ph2">`AccessTheWebAsync`</ph> が返すタスクに格納されます。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The await expression retrieves that value from <ph id="ph1">`getLengthTask`</ph> in <ph id="ph2">`startButton_Click`</ph>.</source>
          <target state="translated">await 式はその値を <ph id="ph1">`getLengthTask`</ph> の <ph id="ph2">`startButton_Click`</ph> から取得します。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The following image shows the transfer of control after <ph id="ph1">`client.GetStringAsync`</ph> (and <ph id="ph2">`getStringTask`</ph>) are complete.</source>
          <target state="translated">次の図は、<ph id="ph1">`client.GetStringAsync`</ph> (および <ph id="ph2">`getStringTask`</ph>) が完了した後の制御の移動を示します。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Step FIVE<ept id="p1">]</ept><bpt id="p2">(../../../../csharp/programming-guide/concepts/async/media/asynctrace-five.png "</bpt>AsyncTrace-FIVE<ept id="p2">")</ept></source>
          <target state="translated"><bpt id="p1">![</bpt>ステップ&amp;5;<ept id="p1">]</ept><bpt id="p2">(../../../../csharp/programming-guide/concepts/async/media/asynctrace-five.png "</bpt>AsyncTrace&amp;5;<ept id="p2">")</ept></target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`AccessTheWebAsync`</ph> runs to completion, and control returns to <ph id="ph2">`startButton_Click`</ph>, which is awaiting the completion.</source>
          <target state="translated"><ph id="ph1">`AccessTheWebAsync`</ph> は完了するまで実行され、完了を待機していた <ph id="ph2">`startButton_Click`</ph> に制御が戻ります。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Step SIX</source>
          <target state="translated">手順&amp;6;.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`AccessTheWebAsync`</ph> signals that it’s complete, processing can continue past the await statement in <ph id="ph2">`startButton_Async`</ph>.</source>
          <target state="translated"><ph id="ph1">`AccessTheWebAsync`</ph> が終了を通知すると、処理は <ph id="ph2">`startButton_Async`</ph> の await ステートメントを越えて続行できます。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>In fact, the program has nothing more to do.</source>
          <target state="translated">実際、プログラムはそれ以上行うことがありません。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The following lines of output represent the resumption of processing in <ph id="ph1">`startButton_Async`</ph>:</source>
          <target state="translated">次の出力行は、<ph id="ph1">`startButton_Async`</ph> の処理の再開を表します。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>12<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>12<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The await expression retrieves from <ph id="ph1">`getLengthTask`</ph> the integer value that’s the operand of the return statement in <ph id="ph2">`AccessTheWebAsync`</ph>.</source>
          <target state="translated">await 式は <ph id="ph1">`getLengthTask`</ph> から <ph id="ph2">`AccessTheWebAsync`</ph> の return ステートメントのオペランドである整数値を取得します。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The following statement assigns that value to the <ph id="ph1">`contentLength`</ph> variable.</source>
          <target state="translated">次のステートメントはその値を <ph id="ph1">`contentLength`</ph> 変数に割り当てます。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>13<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>13<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The following image shows the return of control from <ph id="ph1">`AccessTheWebAsync`</ph> to <ph id="ph2">`startButton_Click`</ph>.</source>
          <target state="translated">次の図は <ph id="ph1">`AccessTheWebAsync`</ph> から <ph id="ph2">`startButton_Click`</ph> に制御が戻ることを示しています。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Step SIX<ept id="p1">]</ept><bpt id="p2">(../../../../csharp/programming-guide/concepts/async/media/asynctrace-six.png "</bpt>AsyncTrace-SIX<ept id="p2">")</ept></source>
          <target state="translated"><bpt id="p1">![</bpt>ステップ&amp;6;<ept id="p1">]</ept><bpt id="p2">(../../../../csharp/programming-guide/concepts/async/media/asynctrace-six.png "</bpt>AsyncTrace&amp;6;<ept id="p2">")</ept></target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">関連項目</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Asynchronous Programming with Async and Await (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/index.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>非同期プログラミングを Async と Await (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/index.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Async Return Types (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/async-return-types.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>非同期の戻り値の型 (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/async-return-types.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Walkthrough: Accessing the Web by Using Async and Await (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/walkthrough-accessing-the-web-by-using-async-and-await.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>チュートリアル: Async を使用して Web へのアクセスと Await (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/walkthrough-accessing-the-web-by-using-async-and-await.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Async Sample: Control Flow in Async Programs (C# and Visual Basic)<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=255285)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>(C# および Visual Basic)、非同期プログラムにおける制御フローの非同期のサンプル:<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=255285)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>