<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">00d5d0e83a88a0c7ac3ade92d09c584fce64fcd8</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\language-reference\statements\dim-statement.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a22ed6218a9fbae9b8b39d1afb10c4157d21b103</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cf658227bdd83bd7c60daf6f59a08a864146c03b</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Handback file name: lo-mt_dim-statement.392cfefd19b3ed95783a163992eae1593bd4020b.ja-jp is different with handoff file name: dim-statement.392cfefd19b3ed95783a163992eae1593bd4020b.ja-jp.</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Dim Statement (Visual Basic) | Microsoft Docs</source>
          <target state="translated">Dim ステートメント (Visual Basic) |Microsoft ドキュメント</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Dim Statement (Visual Basic)</source>
          <target state="translated">Dim ステートメント (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Declares and allocates storage space for one or more variables.</source>
          <target state="translated">宣言し、1 つまたは複数の変数の記憶域を割り当てます。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
          <target state="translated">構文</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parts</source>
          <target state="translated">指定項目</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">省略可能です。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Attribute List<ept id="p1">](../../../visual-basic/language-reference/statements/attribute-list.md)</ept>.</source>
          <target state="translated">参照してください<bpt id="p1">[</bpt>属性一覧<ept id="p1">](../../../visual-basic/language-reference/statements/attribute-list.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">省略可能です。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Can be one of the following:</source>
          <target state="translated">次のいずれかの値を指定します。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Public<ept id="p1">](../../../visual-basic/language-reference/modifiers/public.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Public<ept id="p1">](../../../visual-basic/language-reference/modifiers/public.md)</ept></target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Protected<ept id="p1">](../../../visual-basic/language-reference/modifiers/protected.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Protected<ept id="p1">](../../../visual-basic/language-reference/modifiers/protected.md)</ept></target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Friend<ept id="p1">](../../../visual-basic/language-reference/modifiers/friend.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Friend<ept id="p1">](../../../visual-basic/language-reference/modifiers/friend.md)</ept></target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Private<ept id="p1">](../../../visual-basic/language-reference/modifiers/private.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Private<ept id="p1">](../../../visual-basic/language-reference/modifiers/private.md)</ept></target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Access Levels in Visual Basic<ept id="p1">](../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md)</ept>.</source>
          <target state="translated">参照してください<bpt id="p1">[</bpt>Visual Basic でのレベルのアクセス<ept id="p1">](../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">省略可能です。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Shared<ept id="p1">](../../../visual-basic/language-reference/modifiers/shared.md)</ept>.</source>
          <target state="translated">参照してください<bpt id="p1">[</bpt>共有<ept id="p1">](../../../visual-basic/language-reference/modifiers/shared.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">省略可能です。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Shadows<ept id="p1">](../../../visual-basic/language-reference/modifiers/shadows.md)</ept>.</source>
          <target state="translated">参照してください<bpt id="p1">[</bpt>シャドウ<ept id="p1">](../../../visual-basic/language-reference/modifiers/shadows.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">省略可能です。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Static<ept id="p1">](../../../visual-basic/language-reference/modifiers/static.md)</ept>.</source>
          <target state="translated">参照してください<bpt id="p1">[</bpt>静的<ept id="p1">](../../../visual-basic/language-reference/modifiers/static.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">省略可能です。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>ReadOnly<ept id="p1">](../../../visual-basic/language-reference/modifiers/readonly.md)</ept>.</source>
          <target state="translated">参照してください<bpt id="p1">[</bpt>ReadOnly<ept id="p1">](../../../visual-basic/language-reference/modifiers/readonly.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">省略可能です。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Specifies that these are object variables that refer to instances of a class that can raise events.</source>
          <target state="translated">これらがイベントを発生させるクラスのインスタンスを参照するオブジェクト変数であることを指定します。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>WithEvents<ept id="p1">](../../../visual-basic/language-reference/modifiers/withevents.md)</ept>.</source>
          <target state="translated">参照してください<bpt id="p1">[</bpt>WithEvents<ept id="p1">](../../../visual-basic/language-reference/modifiers/withevents.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Required.</source>
          <target state="translated">必須です。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>List of variables being declared in this statement.</source>
          <target state="translated">このステートメントで宣言されている変数の一覧です。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Each <ph id="ph1">`variable`</ph> has the following syntax and parts:</source>
          <target state="translated"><ph id="ph1">`variable`</ph> の構文と指定項目は次のとおりです。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`variablename [ ( [ boundslist ] ) ] [ As [ New ] datatype [ With`</ph>{<ph id="ph2">`[ .propertyname = propinitializer [ , ... ] ] } ] ] [ = initializer ]`</ph></source>
          <target state="translated"><ph id="ph1">`variablename [ ( [ boundslist ] ) ] [ As [ New ] datatype [ With`</ph>{<ph id="ph2">`[ .propertyname = propinitializer [ , ... ] ] } ] ] [ = initializer ]`</ph></target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Part</source>
          <target state="translated">パーツ</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">説明</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Required.</source>
          <target state="translated">必須です。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Name of the variable.</source>
          <target state="translated">変数名。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Declared Element Names<ept id="p1">](../../../visual-basic/programming-guide/language-features/declared-elements/declared-element-names.md)</ept>.</source>
          <target state="translated">参照してください<bpt id="p1">[</bpt>宣言された要素の名前<ept id="p1">](../../../visual-basic/programming-guide/language-features/declared-elements/declared-element-names.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">省略可能です。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>List of bounds of each dimension of an array variable.</source>
          <target state="translated">配列変数の各次元の境界のリストです。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">省略可能です。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Creates a new instance of the class when the <ph id="ph1">`Dim`</ph> statement runs.</source>
          <target state="translated">クラスの新しいインスタンスを作成するときに、<ph id="ph1">`Dim`</ph>ステートメントが実行されています。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">省略可能です。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Data type of the variable.</source>
          <target state="translated">変数のデータ型。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">省略可能です。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Introduces the object initializer list.</source>
          <target state="translated">オブジェクト初期化子リストを紹介します。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">省略可能です。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The name of a property in the class you are making an instance of.</source>
          <target state="translated">インスタンスを作成するクラスのプロパティの名前。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Required after <ph id="ph1">`propertyname`</ph> =.</source>
          <target state="translated">後に必要な<ph id="ph1">`propertyname`</ph>= です。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The expression that is evaluated and assigned to the property name.</source>
          <target state="translated">この式は評価され、プロパティ名に割り当てられているです。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Optional if <ph id="ph1">`New`</ph> is not specified.</source>
          <target state="translated">省略可能な場合<ph id="ph1">`New`</ph>が指定されていません。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Expression that is evaluated and assigned to the variable when it is created.</source>
          <target state="translated">評価され、作成時に、変数に代入する式です。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Remarks</source>
          <target state="translated">コメント</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The Visual Basic compiler uses the <ph id="ph1">`Dim`</ph> statement to determine the variable's data type and other information, such as what code can access the variable.</source>
          <target state="translated">Visual Basic コンパイラを使用して、<ph id="ph1">`Dim`</ph>変数のデータ型と変数にアクセスできるコードなど、他の情報を確認するステートメントです。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The following example declares a variable to hold an <ph id="ph1">`Integer`</ph> value.</source>
          <target state="translated">次の例を保持する変数の宣言、<ph id="ph1">`Integer`</ph>値。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>You can specify any data type or the name of an enumeration, structure, class, or interface.</source>
          <target state="translated">任意のデータ型または列挙型、構造体、クラス、インターフェイスの名前を指定することができます。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>For a reference type, you use the <ph id="ph1">`New`</ph> keyword to create a new instance of the class or structure that is specified by the data type.</source>
          <target state="translated">参照型を使用する、<ph id="ph1">`New`</ph>データ型で、クラスの新しいインスタンスを作成または構造体にキーワードを指定します。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>If you use <ph id="ph1">`New`</ph>, you do not use an initializer expression.</source>
          <target state="translated">使用する場合<ph id="ph1">`New`</ph>、初期化子式を使用しないでください。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Instead, you supply arguments, if they are required, to the constructor of the class from which you are creating the variable.</source>
          <target state="translated">代わりに、変数の作成元となるクラスのコンス トラクターに必要な場合は、引数を指定します。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>You can declare a variable in a procedure, block, class, structure, or module.</source>
          <target state="translated">プロシージャ、ブロック、クラス、構造体、またはモジュール内の変数を宣言することができます。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>You cannot declare a variable in a source file, namespace, or interface.</source>
          <target state="translated">ソース ファイル、名前空間、またはインターフェイスの変数を宣言することはできません。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Declaration Contexts and Default Access Levels<ept id="p1">](../../../visual-basic/language-reference/statements/declaration-contexts-and-default-access-levels.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>宣言コンテキストとアクセス レベルの既定の<ept id="p1">](../../../visual-basic/language-reference/statements/declaration-contexts-and-default-access-levels.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>A variable that is declared at module level, outside any procedure, is a <bpt id="p1">*</bpt>member variable<ept id="p1">*</ept> or <bpt id="p2">*</bpt>field<ept id="p2">*</ept>.</source>
          <target state="translated">プロシージャの外部のモジュール レベルで宣言されている変数は、<bpt id="p1">*</bpt>メンバー変数<ept id="p1">*</ept>または<bpt id="p2">*</bpt>フィールド<ept id="p2">*</ept>します。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Member variables are in scope throughout their class, structure, or module.</source>
          <target state="translated">メンバー変数は、クラス、構造体、またはモジュール全体に及びます。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>A variable that is declared at procedure level is a <bpt id="p1">*</bpt>local variable<ept id="p1">*</ept>.</source>
          <target state="translated">プロシージャ レベルで宣言されている変数は、<bpt id="p1">*</bpt>ローカル変数<ept id="p1">*</ept>します。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Local variables are in scope only within their procedure or block.</source>
          <target state="translated">ローカル変数はそのプロシージャまたはブロック内でのみに及びます。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The following access modifiers are used to declare variables outside a procedure: <ph id="ph1">`Public`</ph>, <ph id="ph2">`Protected`</ph>, <ph id="ph3">`Friend`</ph>, <ph id="ph4">`Protected Friend`</ph>, and <ph id="ph5">`Private`</ph>.</source>
          <target state="translated">プロシージャの外の変数を宣言する次のアクセス修飾子を使用します。 <ph id="ph1">`Public`</ph>、 <ph id="ph2">`Protected`</ph>、 <ph id="ph3">`Friend`</ph>、 <ph id="ph4">`Protected Friend`</ph>、および<ph id="ph5">`Private`</ph>です。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Access Levels in Visual Basic<ept id="p1">](../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。 <bpt id="p1">[</bpt>Visual Basic でのアクセス レベル<ept id="p1">](../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Dim`</ph> keyword is optional and usually omitted if you specify any of the following modifiers: <ph id="ph2">`Public`</ph>, <ph id="ph3">`Protected`</ph>, <ph id="ph4">`Friend`</ph>, <ph id="ph5">`Protected Friend`</ph>, <ph id="ph6">`Private`</ph>, <ph id="ph7">`Shared`</ph>, <ph id="ph8">`Shadows`</ph>, <ph id="ph9">`Static`</ph>, <ph id="ph10">`ReadOnly`</ph>, or <ph id="ph11">`WithEvents`</ph>.</source>
          <target state="translated"><ph id="ph1">`Dim`</ph>キーワードを省略し、次の修飾子のいずれかを指定する場合は通常省略: <ph id="ph2">`Public`</ph>、 <ph id="ph3">`Protected`</ph>、 <ph id="ph4">`Friend`</ph>、 <ph id="ph5">`Protected Friend`</ph>、 <ph id="ph6">`Private`</ph>、 <ph id="ph7">`Shared`</ph>、 <ph id="ph8">`Shadows`</ph>、 <ph id="ph9">`Static`</ph>、 <ph id="ph10">`ReadOnly`</ph>、または<ph id="ph11">`WithEvents`</ph>です。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Option Explicit`</ph> is on (the default), the compiler requires a declaration for every variable you use.</source>
          <target state="translated">場合<ph id="ph1">`Option Explicit`</ph>はコンパイラ on (既定値) を使用するすべての変数の宣言が必要です。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Option Explicit Statement<ept id="p1">](../../../visual-basic/language-reference/statements/option-explicit-statement.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。 <bpt id="p1">[</bpt>Option Explicit ステートメント<ept id="p1">](../../../visual-basic/language-reference/statements/option-explicit-statement.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Specifying an Initial Value</source>
          <target state="translated">初期値を指定します。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>You can assign a value to a variable when it is created.</source>
          <target state="translated">作成されるときに、変数に値を割り当てることができます。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>For a value type, you use an <bpt id="p1">*</bpt>initializer<ept id="p1">*</ept> to supply an expression to be assigned to the variable.</source>
          <target state="translated">値の型を使用する、<bpt id="p1">*</bpt>初期化子<ept id="p1">*</ept>変数に割り当てられる式を指定します。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The expression must evaluate to a constant that can be calculated at compile time.</source>
          <target state="translated">式は、コンパイル時に計算できる定数に評価される必要があります。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>If an initializer is specified and a data type is not specified in an <ph id="ph1">`As`</ph> clause, <bpt id="p1">*</bpt>type inference<ept id="p1">*</ept> is used to infer the data type from the initializer.</source>
          <target state="translated">初期化子が指定されており、データ型がで指定されていない場合、<ph id="ph1">`As`</ph>句、<bpt id="p1">*</bpt>型の推論<ept id="p1">*</ept>は初期化子からのデータ型の推論に使用します。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>In the following example, both <ph id="ph1">`num1`</ph> and <ph id="ph2">`num2`</ph> are strongly typed as integers.</source>
          <target state="translated">次の例では両方とも<ph id="ph1">`num1`</ph>と<ph id="ph2">`num2`</ph>整数として厳密に型指定します。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>In the second declaration, type inference infers the type from the value 3.</source>
          <target state="translated">2 番目の宣言では、型の推論は、値 3 から型を推測します。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Type inference applies at the procedure level.</source>
          <target state="translated">型の推論は、プロシージャ レベルで適用されます。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>It does not apply outside a procedure in a class, structure, module, or interface.</source>
          <target state="translated">これは、クラス、構造体、モジュール、またはインターフェイスのプロシージャの外側は適用されません。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>For more information about type inference, see <bpt id="p1">[</bpt>Option Infer Statement<ept id="p1">](../../../visual-basic/language-reference/statements/option-infer-statement.md)</ept> and <bpt id="p2">[</bpt>Local Type Inference<ept id="p2">](../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)</ept>.</source>
          <target state="translated">型の推定の詳細については、次を参照してください。 <bpt id="p1">[</bpt>Option Infer ステートメント<ept id="p1">](../../../visual-basic/language-reference/statements/option-infer-statement.md)</ept>と<bpt id="p2">[</bpt>ローカル型推論<ept id="p2">](../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>For information about what happens when a data type or initializer is not specified, see <bpt id="p1">[</bpt>Default Data Types and Values<ept id="p1">](../../../visual-basic/language-reference/statements/dim-statement.md#default)</ept> later in this topic.</source>
          <target state="translated">データ型または初期化子が指定されていないときの動作方法については、次を参照してください。<bpt id="p1">[</bpt>既定のデータ型や値<ept id="p1">](../../../visual-basic/language-reference/statements/dim-statement.md#default)</ept>このトピックで後述します。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>You can use an <bpt id="p1">*</bpt>object initializer<ept id="p1">*</ept> to declare instances of named and anonymous types.</source>
          <target state="translated">使用することができます、<bpt id="p1">*</bpt>オブジェクト初期化子<ept id="p1">*</ept>匿名の名前付きの型のインスタンスを宣言します。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The following code creates an instance of a <ph id="ph1">`Student`</ph> class and uses an object initializer to initialize properties.</source>
          <target state="translated">次のコードは、のインスタンスを作成、<ph id="ph1">`Student`</ph>クラスし、オブジェクト初期化子を使用してプロパティを初期化します。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>For more information about object initializers, see <bpt id="p1">[</bpt>How to: Declare an Object by Using an Object Initializer<ept id="p1">](../../../visual-basic/programming-guide/language-features/objects-and-classes/how-to-declare-an-object-by-using-an-object-initializer.md)</ept>, <bpt id="p2">[</bpt>Object Initializers: Named and Anonymous Types<ept id="p2">](../../../visual-basic/programming-guide/language-features/objects-and-classes/object-initializers-named-and-anonymous-types.md)</ept>, and <bpt id="p3">[</bpt>Anonymous Types<ept id="p3">](../../../visual-basic/programming-guide/language-features/objects-and-classes/anonymous-types.md)</ept>.</source>
          <target state="translated">オブジェクト初期化子の詳細については、次を参照してください。<bpt id="p1">[</bpt>方法: オブジェクト初期化子を使用してオブジェクトを宣言<ept id="p1">](../../../visual-basic/programming-guide/language-features/objects-and-classes/how-to-declare-an-object-by-using-an-object-initializer.md)</ept>、<bpt id="p2">[</bpt>オブジェクト初期化子: 名前付きおよび匿名型<ept id="p2">](../../../visual-basic/programming-guide/language-features/objects-and-classes/object-initializers-named-and-anonymous-types.md)</ept>、および<bpt id="p3">[</bpt>匿名型<ept id="p3">](../../../visual-basic/programming-guide/language-features/objects-and-classes/anonymous-types.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Declaring Multiple Variables</source>
          <target state="translated">複数の変数を宣言します。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>You can declare several variables in one declaration statement, specifying the variable name for each one, and following each array name with parentheses.</source>
          <target state="translated">かっこを使用し、各配列名ごとに、変数名を指定する&amp;1; つの宣言ステートメントで複数の変数を宣言することができます。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Multiple variables are separated by commas.</source>
          <target state="translated">複数の変数を指定するときは、コンマで区切ります。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>If you declare more than one variable with one <ph id="ph1">`As`</ph> clause, you cannot supply an initializer for that group of variables.</source>
          <target state="translated">いずれかで&amp;1; つ以上の変数を宣言する場合は、<ph id="ph1">`As`</ph>句の変数には、そのグループの初期化子を指定することはできません。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>You can specify different data types for different variables by using a separate <ph id="ph1">`As`</ph> clause for each variable you declare.</source>
          <target state="translated">別々 の異なる変数に異なるデータ型を指定する<ph id="ph1">`As`</ph>を宣言する各変数の句。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Each variable takes the data type specified in the first <ph id="ph1">`As`</ph> clause encountered after its <ph id="ph2">`variablename`</ph> part.</source>
          <target state="translated">各変数は、最初に指定されているデータ型を受け取り<ph id="ph1">`As`</ph>句の後に発生したその<ph id="ph2">`variablename`</ph>部分です。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Arrays</source>
          <target state="translated">配列</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>You can declare a variable to hold an <bpt id="p1">*</bpt>array<ept id="p1">*</ept>, which can hold multiple values.</source>
          <target state="translated">保持する変数を宣言する、<bpt id="p1">*</bpt>配列<ept id="p1">*</ept>、複数の値を保持することができます。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>To specify that a variable holds an array, follow its <ph id="ph1">`variablename`</ph> immediately with parentheses.</source>
          <target state="translated">変数は配列を保持することを指定するには、次の<ph id="ph1">`variablename`</ph>直後のかっこを使用します。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>For more information about arrays, see <bpt id="p1">[</bpt>Arrays<ept id="p1">](../../../visual-basic/programming-guide/language-features/arrays/index.md)</ept>.</source>
          <target state="translated">配列の概要の詳細については、次を参照してください。<bpt id="p1">[</bpt>配列<ept id="p1">](../../../visual-basic/programming-guide/language-features/arrays/index.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>You can specify the lower and upper bound of each dimension of an array.</source>
          <target state="translated">配列の各次元の上限と下限を指定することができます。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>To do this, include a <ph id="ph1">`boundslist`</ph> inside the parentheses.</source>
          <target state="translated">これを行うには、含める、<ph id="ph1">`boundslist`</ph>かっこ内にします。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>For each dimension, the <ph id="ph1">`boundslist`</ph> specifies the upper bound and optionally the lower bound.</source>
          <target state="translated">各ディメンションに対して、<ph id="ph1">`boundslist`</ph>上限と下限の境界のオプションでを指定します。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The lower bound is always zero, whether you specify it or not.</source>
          <target state="translated">下限値は常に&amp;0;、指定するかどうかどうか。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Each index can vary from zero through its upper bound value.</source>
          <target state="translated">各インデックスには、0 ~ 上限値は異なります。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The following two statements are equivalent.</source>
          <target state="translated">次の&amp;2; つのステートメントは等価です。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Each statement declares an array of 21 <ph id="ph1">`Integer`</ph> elements.</source>
          <target state="translated">各ステートメントが 21 の配列を宣言して<ph id="ph1">`Integer`</ph>要素。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>When you access the array, the index can vary from 0 through 20.</source>
          <target state="translated">配列にアクセスする場合は、インデックスが 0 ~ 20 異なることができます。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The following statement declares a two-dimensional array of type <ph id="ph1">`Double`</ph>.</source>
          <target state="translated">次のステートメントは、型の&amp;2; 次元配列を宣言して<ph id="ph1">`Double`</ph>します。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The array has 4 rows (3 + 1) of 6 columns (5 + 1) each.</source>
          <target state="translated">配列には、6 列 (5 + 1) ごとの 4 つの行 (3 + 1) があります。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Note that an upper bound represents the highest possible value for the index, not the length of the dimension.</source>
          <target state="translated">上限の境界がの次元の長さではなく、インデックスを指定できる最大値を表すことに注意してください。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The length of the dimension is the upper bound plus one.</source>
          <target state="translated">次元の長さは、上限の境界と&amp;1; つです。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>An array can have from 1 to 32 dimensions.</source>
          <target state="translated">配列は、32 のディメンションに 1 ができます。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>You can leave all the bounds blank in an array declaration.</source>
          <target state="translated">すべての境界に配列の宣言で空白しておきます。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>If you do this, the array has the number of dimensions you specify, but it is uninitialized.</source>
          <target state="translated">これを行う場合は、配列は、指定したディメンションの数が初期化されていません。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>It has a value of <ph id="ph1">`Nothing`</ph> until you initialize at least some of its elements.</source>
          <target state="translated">値がある<ph id="ph1">`Nothing`</ph>には、少なくとも初期化しないと、その要素の一部です。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Dim`</ph> statement must specify bounds either for all dimensions or for no dimensions.</source>
          <target state="translated"><ph id="ph1">`Dim`</ph>ステートメントは、境界内のすべてのディメンションまたはディメンションがありませんのいずれかを指定する必要があります。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>If the array has more than one dimension, you must include commas between the parentheses to indicate the number of dimensions.</source>
          <target state="translated">配列に&amp;1; つ以上のディメンションがある場合は、ディメンションの数を示すためにかっこで囲まれたコンマを含める必要があります。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>You can declare a <bpt id="p1">*</bpt>zero-length array<ept id="p1">*</ept> by declaring one of the array's dimensions to be -1.</source>
          <target state="translated">宣言することができます、<bpt id="p1">*</bpt>長さ&amp;0; の配列<ept id="p1">*</ept>を-1 配列の次元のいずれかを宣言することで。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>A variable that holds a zero-length array does not have the value <ph id="ph1">`Nothing`</ph>.</source>
          <target state="translated">長さ&amp;0; の配列を保持する変数は、値を持たない<ph id="ph1">`Nothing`</ph>します。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Zero-length arrays are required by certain common language runtime functions.</source>
          <target state="translated">共通言語ランタイムの一部の関数では、長さ&amp;0; の配列が必要です。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>If you try to access such an array, a runtime exception occurs.</source>
          <target state="translated">このような配列にアクセスしようとすると、ランタイム例外が発生します。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Arrays<ept id="p1">](../../../visual-basic/programming-guide/language-features/arrays/index.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>配列<ept id="p1">](../../../visual-basic/programming-guide/language-features/arrays/index.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>You can initialize the values of an array by using an array literal.</source>
          <target state="translated">配列の値を初期化するには、配列リテラルを使用します。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>To do this, surround the initialization values with braces (<ph id="ph1">`{}`</ph>).</source>
          <target state="translated">これを行うには、初期化値を中かっこで囲みます (<ph id="ph1">`{}`</ph>)。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>For multidimensional arrays, the initialization for each separate dimension is enclosed in braces in the outer dimension.</source>
          <target state="translated">多次元配列の各次元の初期化は、外側のディメンションの中かっこで囲まれました。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The elements are specified in row-major order.</source>
          <target state="translated">要素は、行優先順で指定されます。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>For more information about array literals, see <bpt id="p1">[</bpt>Arrays<ept id="p1">](../../../visual-basic/programming-guide/language-features/arrays/index.md)</ept>.</source>
          <target state="translated">配列リテラルの詳細については、次を参照してください。<bpt id="p1">[</bpt>配列<ept id="p1">](../../../visual-basic/programming-guide/language-features/arrays/index.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="default"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Default Data Types and Values</source>
          <target state="translated"><bpt id="p1">&lt;a name="default"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>既定のデータ型し、値</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The following table describes the results of various combinations of specifying the data type and initializer in a <ph id="ph1">`Dim`</ph> statement.</source>
          <target state="translated">次の表では、<ph id="ph1">`Dim`</ph> ステートメントのデータ型と初期化子を指定するさまざまな組み合わせの結果を示します。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Data type specified?</source>
          <target state="translated">データ型が指定されているか</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Initializer specified?</source>
          <target state="translated">初期化子が指定されているか</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">例</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Result</source>
          <target state="translated">結果</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>No</source>
          <target state="translated">Ｘ</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>No</source>
          <target state="translated">いいえ</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">[</bpt>Option Strict<ept id="p1">](../../../visual-basic/language-reference/statements/option-strict-statement.md)</ept> is off (the default), the variable is set to <ph id="ph1">`Nothing`</ph>.</source>
          <target state="translated">場合<bpt id="p1">[</bpt>Option Strict<ept id="p1">](../../../visual-basic/language-reference/statements/option-strict-statement.md)</ept>に設定されている、変数、off (既定)、<ph id="ph1">`Nothing`</ph>です。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Option Strict`</ph> is on, a compile-time error occurs.</source>
          <target state="translated"><ph id="ph1">`Option Strict`</ph> がオンの場合、コンパイル時エラーが発生します。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>No</source>
          <target state="translated">Ｘ</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Yes</source>
          <target state="translated">はい</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">[</bpt>Option Infer<ept id="p1">](../../../visual-basic/language-reference/statements/option-infer-statement.md)</ept> is on (the default), the variable takes the data type of the initializer.</source>
          <target state="translated">場合<bpt id="p1">[</bpt>Option Infer<ept id="p1">](../../../visual-basic/language-reference/statements/option-infer-statement.md)</ept> on (既定値) は、変数は、データが、初期化子の型します。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Local Type Inference<ept id="p1">](../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)</ept>.</source>
          <target state="translated">参照してください<bpt id="p1">[</bpt>ローカル型推論<ept id="p1">](../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Option Infer`</ph> is off and <ph id="ph2">`Option Strict`</ph> is off, the variable takes the data type of <ph id="ph3">`Object`</ph>.</source>
          <target state="translated"><ph id="ph1">`Option Infer`</ph> がオフで、<ph id="ph2">`Option Strict`</ph> がオフの場合、変数は <ph id="ph3">`Object`</ph> のデータ型になります。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Option Infer`</ph> is off and <ph id="ph2">`Option Strict`</ph> is on, a compile-time error occurs.</source>
          <target state="translated"><ph id="ph1">`Option Infer`</ph> がオフで、<ph id="ph2">`Option Strict`</ph> がオンの場合、コンパイル時エラーが発生します。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Yes</source>
          <target state="translated">○</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>No</source>
          <target state="translated">Ｘ</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The variable is initialized to the default value for the data type.</source>
          <target state="translated">変数は、データ型の既定値に初期化されます。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>See the table later in this section.</source>
          <target state="translated">このセクションの後半の表を参照してください。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Yes</source>
          <target state="translated">はい</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Yes</source>
          <target state="translated">○</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>If the data type of the initializer is not convertible to the specified data type, a compile-time error occurs.</source>
          <target state="translated">初期化子のデータ型を指定したデータ型に変換できない場合は、コンパイル時エラーが発生します。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>If you specify a data type but do not specify an initializer, <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> initializes the variable to the default value for its data type.</source>
          <target state="translated">データ型を指定して、初期化子を指定しない場合<ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>は変数のデータ型の既定値を初期化します。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The following table shows the default initialization values.</source>
          <target state="translated">次の表は、既定値に初期値を示します。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Data type</source>
          <target state="translated">データ型</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Default value</source>
          <target state="translated">既定値</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>All numeric types (including <ph id="ph1">`Byte`</ph> and <ph id="ph2">`SByte`</ph>)</source>
          <target state="translated">すべての数値型 (を含む<ph id="ph1">`Byte`</ph>と<ph id="ph2">`SByte`</ph>)</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>0</source>
          <target state="translated">0</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Binary 0</source>
          <target state="translated">バイナリ 0</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>All reference types (including <ph id="ph1">`Object`</ph>, <ph id="ph2">`String`</ph>, and all arrays)</source>
          <target state="translated">参照型はすべて (を含む<ph id="ph1">`Object`</ph>、 <ph id="ph2">`String`</ph>、およびすべての配列)</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>12:00 AM of January 1 of the year 1 (01/01/0001 12:00:00 AM)</source>
          <target state="translated">1 年 1 月 1 日の午前 12時 00分 (01/01/0001 12時 00分: 00 AM)</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Each element of a structure is initialized as if it were a separate variable.</source>
          <target state="translated">構造体の各要素は別々 の変数の場合と同様に初期化されます。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>If you declare the length of an array but do not initialize its elements, each element is initialized as if it were a separate variable.</source>
          <target state="translated">配列の長さを宣言、要素を初期化しない場合は、各要素は別々 の変数の場合と同様に初期化されます。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Static Local Variable Lifetime</source>
          <target state="translated">静的ローカル変数有効期間</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Static`</ph> local variable has a longer lifetime than that of the procedure in which it is declared.</source>
          <target state="translated">A<ph id="ph1">`Static`</ph>ローカル変数が宣言されているプロシージャの場合よりも有効期間が長くなります。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>The boundaries of the variable's lifetime depend on where the procedure is declared and whether it is <ph id="ph1">`Shared`</ph>.</source>
          <target state="translated">変数の有効期間の境界は、プロシージャが宣言されていると、かどうかによって異なります。<ph id="ph1">`Shared`</ph>します。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Procedure declaration</source>
          <target state="translated">プロシージャの宣言</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Variable initialized</source>
          <target state="translated">初期化された変数</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Variable stops existing</source>
          <target state="translated">既存の変数を停止します。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>In a module</source>
          <target state="translated">モジュールで</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>The first time the procedure is called</source>
          <target state="translated">初めてのプロシージャが呼び出されたとき</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>When your program stops execution</source>
          <target state="translated">プログラムが実行を停止します。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>In a class or structure, procedure is <ph id="ph1">`Shared`</ph></source>
          <target state="translated">手順は、クラスまたは構造体は、します。<ph id="ph1">`Shared`</ph></target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>The first time the procedure is called either on a specific instance or on the class or structure itself</source>
          <target state="translated">最初に特定のインスタンスで、またはクラスまたは構造体自体でプロシージャが呼び出されます</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>When your program stops execution</source>
          <target state="translated">プログラムが実行を停止します。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>In a class or structure, procedure isn't <ph id="ph1">`Shared`</ph></source>
          <target state="translated">クラスまたは構造体では、プロシージャはではありません。<ph id="ph1">`Shared`</ph></target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>The first time the procedure is called on a specific instance</source>
          <target state="translated">初めてのプロシージャが特定のインスタンスで呼び出されたとき</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>When the instance is released for garbage collection (GC)</source>
          <target state="translated">ガベージ コレクション (GC) のインスタンスを解放する場合</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Attributes and Modifiers</source>
          <target state="translated">属性および修飾子</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>You can apply attributes only to member variables, not to local variables.</source>
          <target state="translated">属性は、ローカル変数ではなく、メンバー変数にのみ適用できます。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>An attribute contributes information to the assembly's metadata, which is not meaningful for temporary storage such as local variables.</source>
          <target state="translated">属性は、意味のあるローカル変数などの一時的なストレージではないアセンブリのメタデータに情報を提供します。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>At module level, you cannot use the <ph id="ph1">`Static`</ph> modifier to declare member variables.</source>
          <target state="translated">モジュール レベルでは使用できません、<ph id="ph1">`Static`</ph>修飾子をメンバー変数を宣言します。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>At procedure level, you cannot use <ph id="ph1">`Shared`</ph>, <ph id="ph2">`Shadows`</ph>, <ph id="ph3">`ReadOnly`</ph>, <ph id="ph4">`WithEvents`</ph>, or any access modifiers to declare local variables.</source>
          <target state="translated">プロシージャ レベルでは使用できません<ph id="ph1">`Shared`</ph>、 <ph id="ph2">`Shadows`</ph>、 <ph id="ph3">`ReadOnly`</ph>、 <ph id="ph4">`WithEvents`</ph>、またはいずれかのアクセスをローカル変数を宣言する修飾子です。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>You can specify what code can access a variable by supplying an <ph id="ph1">`accessmodifier`</ph>.</source>
          <target state="translated">指定することによって、変数にアクセスできるコードを指定する、<ph id="ph1">`accessmodifier`</ph>です。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Class and module member variables (outside any procedure) default to private access, and structure member variables default to public access.</source>
          <target state="translated">クラスとモジュールのメンバー (プロシージャ) の外部変数デフォルト プライベート アクセスには、構造体のメンバー変数の既定でパブリック アクセス。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>You can adjust their access levels with the access modifiers.</source>
          <target state="translated">アクセス修飾子を使用してこれらのアクセス レベルを調整できます。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>You cannot use access modifiers on local variables (inside a procedure).</source>
          <target state="translated">ローカル変数 (プロシージャ) 内では、アクセス修飾子を使用できません。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>You can specify <ph id="ph1">`WithEvents`</ph> only on member variables, not on local variables inside a procedure.</source>
          <target state="translated">指定できます<ph id="ph1">`WithEvents`</ph>のみメンバー変数ではなく、プロシージャ内のローカル変数。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>If you specify <ph id="ph1">`WithEvents`</ph>, the data type of the variable must be a specific class type, not <ph id="ph2">`Object`</ph>.</source>
          <target state="translated">指定した場合<ph id="ph1">`WithEvents`</ph>、変数のデータ型がない、特定のクラス型をする必要があります<ph id="ph2">`Object`</ph>します。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>You cannot declare an array with <ph id="ph1">`WithEvents`</ph>.</source>
          <target state="translated">配列を宣言することはできません<ph id="ph1">`WithEvents`</ph>します。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>For more information about events, see <bpt id="p1">[</bpt>Events<ept id="p1">](../../../visual-basic/programming-guide/language-features/events/index.md)</ept>.</source>
          <target state="translated">イベントの詳細については、次を参照してください。<bpt id="p1">[</bpt>イベント<ept id="p1">](../../../visual-basic/programming-guide/language-features/events/index.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Code outside a class, structure, or module must qualify a member variable's name with the name of that class, structure, or module.</source>
          <target state="translated">コードをクラスの外部構造体、またはモジュール修飾する必要があります、クラス、構造体、モジュールの名前のメンバー変数の名前。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Code outside a procedure or block cannot refer to any local variables within that procedure or block.</source>
          <target state="translated">プロシージャまたはブロックは、そのプロシージャまたはブロック内のローカル変数を参照できません外部をコードします。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Releasing Managed Resources</source>
          <target state="translated">マネージ リソースを解放します。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>The .NET Framework garbage collector disposes of managed resources without any extra coding on your part.</source>
          <target state="translated">ユーザー側でコードを追加せずに、.NET Framework のガベージ コレクターがマネージ リソースを破棄します。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>However, you can force the disposal of a managed resource instead of waiting for the garbage collector.</source>
          <target state="translated">ただし、ガベージ コレクターを待つことがなく管理されているリソースの破棄を強制できます。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>If a class holds onto a particularly valuable and scarce resource (such as a database connection or file handle), you might not want to wait until the next garbage collection to clean up a class instance that's no longer in use.</source>
          <target state="translated">クラスは、データベース接続やファイル ハンドル) などの特に役に立つと不足しているリソース上に保持している場合、次のガベージ コレクションが不要で使用されるクラスのインスタンスをクリーンアップするまで待機することがないできます。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>A class may implement the &lt;xref:System.IDisposable&gt; interface to provide a way to release resources before a garbage collection.</source>
          <target state="translated">クラスで実装が、&lt;xref:System.IDisposable&gt;ガベージ コレクションの前にリソースを解放する方法を提供するインターフェイス&lt;/xref:System.IDisposable&gt;。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>A class that implements that interface exposes a <ph id="ph1">`Dispose`</ph> method that can be called to force valuable resources to be released immediately.</source>
          <target state="translated">そのインターフェイスを実装するクラスは、公開、<ph id="ph1">`Dispose`</ph>メソッド強制的に貴重なリソースをすぐに解放するために呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Using`</ph> statement automates the process of acquiring a resource, executing a set of statements, and then disposing of the resource.</source>
          <target state="translated"><ph id="ph1">`Using`</ph>ステートメントがリソースを取得する、一連のステートメントを実行して、リソースを破棄し、プロセスを自動化します。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>However, the resource must implement the &lt;xref:System.IDisposable&gt; interface.</source>
          <target state="translated">ただし、リソースを実装する必要があります、&lt;xref:System.IDisposable&gt;インターフェイス&lt;/xref:System.IDisposable&gt;。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Using Statement<ept id="p1">](../../../visual-basic/language-reference/statements/using-statement.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。 <bpt id="p1">[</bpt>Using ステートメント<ept id="p1">](../../../visual-basic/language-reference/statements/using-statement.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">例</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>The following example declares variables by using the <ph id="ph1">`Dim`</ph> statement with various options.</source>
          <target state="translated">次の例では、変数を宣言を使用して、<ph id="ph1">`Dim`</ph>さまざまなオプションを含むステートメント。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#141<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/dim-statement_1.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements #&amp;141;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/dim-statement_1.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">例</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>The following example lists the prime numbers between 1 and 30.</source>
          <target state="translated">次の例は、1 ~ 30 の素数を一覧表示します。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>The scope of local variables is described in code comments.</source>
          <target state="translated">ローカル変数のスコープには、コードのコメントが記載されています。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#142<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/dim-statement_2.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements #&amp;142;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/dim-statement_2.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">例</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>In the following example, the <ph id="ph1">`speedValue`</ph> variable is declared at the class level.</source>
          <target state="translated">次の例では、<ph id="ph1">`speedValue`</ph>変数はクラス レベルで宣言します。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Private`</ph> keyword is used to declare the variable.</source>
          <target state="translated"><ph id="ph1">`Private`</ph>変数を宣言するキーワードを使用します。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>The variable can be accessed by any procedure in the <ph id="ph1">`Car`</ph> class.</source>
          <target state="translated">変数は、の任意のプロシージャからアクセスできる、<ph id="ph1">`Car`</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#144<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/dim-statement_3.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements #&amp;144;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/dim-statement_3.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#145<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/dim-statement_4.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements #&amp;145;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/dim-statement_4.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">関連項目</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Const Statement<ept id="p1">](../../../visual-basic/language-reference/statements/const-statement.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Const ステートメント<ept id="p1">](../../../visual-basic/language-reference/statements/const-statement.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>ReDim Statement<ept id="p1">](../../../visual-basic/language-reference/statements/redim-statement.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>ReDim ステートメント<ept id="p1">](../../../visual-basic/language-reference/statements/redim-statement.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Option Explicit Statement<ept id="p1">](../../../visual-basic/language-reference/statements/option-explicit-statement.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Option Explicit ステートメント<ept id="p1">](../../../visual-basic/language-reference/statements/option-explicit-statement.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Option Infer Statement<ept id="p1">](../../../visual-basic/language-reference/statements/option-infer-statement.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Option Infer ステートメント<ept id="p1">](../../../visual-basic/language-reference/statements/option-infer-statement.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Option Strict Statement<ept id="p1">](../../../visual-basic/language-reference/statements/option-strict-statement.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Option Strict ステートメント<ept id="p1">](../../../visual-basic/language-reference/statements/option-strict-statement.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Compile Page, Project Designer (Visual Basic)<ept id="p1">](https://docs.microsoft.com/visualstudio/ide/reference/compile-page-project-designer-visual-basic)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>[コンパイル] ページ、プロジェクト デザイナー (Visual Basic)<ept id="p1">](https://docs.microsoft.com/visualstudio/ide/reference/compile-page-project-designer-visual-basic)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Variable Declaration<ept id="p1">](../../../visual-basic/programming-guide/language-features/variables/variable-declaration.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>変数宣言<ept id="p1">](../../../visual-basic/programming-guide/language-features/variables/variable-declaration.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Arrays<ept id="p1">](../../../visual-basic/programming-guide/language-features/arrays/index.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>配列<ept id="p1">](../../../visual-basic/programming-guide/language-features/arrays/index.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Object Initializers: Named and Anonymous Types<ept id="p1">](../../../visual-basic/programming-guide/language-features/objects-and-classes/object-initializers-named-and-anonymous-types.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>オブジェクト初期化子: 名前付きおよび匿名型<ept id="p1">](../../../visual-basic/programming-guide/language-features/objects-and-classes/object-initializers-named-and-anonymous-types.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Anonymous Types<ept id="p1">](../../../visual-basic/programming-guide/language-features/objects-and-classes/anonymous-types.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>匿名型<ept id="p1">](../../../visual-basic/programming-guide/language-features/objects-and-classes/anonymous-types.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Object Initializers: Named and Anonymous Types<ept id="p1">](../../../visual-basic/programming-guide/language-features/objects-and-classes/object-initializers-named-and-anonymous-types.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>オブジェクト初期化子: 名前付きおよび匿名型<ept id="p1">](../../../visual-basic/programming-guide/language-features/objects-and-classes/object-initializers-named-and-anonymous-types.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Declare an Object by Using an Object Initializer<ept id="p1">](../../../visual-basic/programming-guide/language-features/objects-and-classes/how-to-declare-an-object-by-using-an-object-initializer.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>方法: オブジェクト初期化子を使用してオブジェクトを宣言<ept id="p1">](../../../visual-basic/programming-guide/language-features/objects-and-classes/how-to-declare-an-object-by-using-an-object-initializer.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Local Type Inference<ept id="p1">](../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>ローカル型の推論<ept id="p1">](../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>