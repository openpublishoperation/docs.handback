<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b81a1c81d970beee32925c3f2fe6ca3bcad79151</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\data-types\efficient-use-of-data-types.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3e59352ceb53f22579ab04c14d276fb0bb98223f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">71ddf66d7016749f4ee8468f5c82265a10045730</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Handback file name: lo-mt_efficient-use-of-data-types.ef4235d19125a9fb4b7e469f4f2de394f28c6b6a.ja-jp is different with handoff file name: efficient-use-of-data-types.ef4235d19125a9fb4b7e469f4f2de394f28c6b6a.ja-jp.</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Efficient Use of Data Types (Visual Basic) | Microsoft Docs</source>
          <target state="translated">データ型 (Visual Basic) を効率的に使用 |Microsoft ドキュメント</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Efficient Use of Data Types (Visual Basic)</source>
          <target state="translated">データ型の有効な使用方法 (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Undeclared variables and variables declared without a data type are assigned the <ph id="ph1">`Object`</ph> data type.</source>
          <target state="translated">宣言されていない変数とデータ型なしで宣言された変数が割り当てられている、<ph id="ph1">`Object`</ph>データ型。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This makes it easy to write programs quickly, but it can cause them to execute more slowly.</source>
          <target state="translated">これにより、プログラムの記述を簡単にが実行速度が低下します。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Strong Typing</source>
          <target state="translated">厳密な型指定</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Specifying data types for all your variables is known as <bpt id="p1">*</bpt>strong typing<ept id="p1">*</ept>.</source>
          <target state="translated">すべての変数のデータ型の指定と呼ばれます<bpt id="p1">*</bpt>厳密な型指定<ept id="p1">*</ept>します。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Using strong typing has several advantages:</source>
          <target state="translated">厳密な型指定を使用すると、いくつかの利点があります。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>It enables IntelliSense support for your variables.</source>
          <target state="translated">これにより、IntelliSense での変数をサポートできます。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This allows you to see their properties and other members as you type in the code.</source>
          <target state="translated">これにより、コードに入力すると、そのプロパティおよびその他のメンバーを参照してください。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>It takes advantage of compiler type checking.</source>
          <target state="translated">これは、コンパイラの型チェック利用をします。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This catches statements that can fail at run time due to errors such as overflow.</source>
          <target state="translated">これは、実行時のオーバーフローなどのエラーにより失敗するステートメントを検出します。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>It also catches calls to methods on objects that do not support them.</source>
          <target state="translated">サポートしていないオブジェクトに対するメソッドの呼び出しをキャッチします。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>It results in faster execution of your code.</source>
          <target state="translated">コードの実行を高速になります。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Most Efficient Data Types</source>
          <target state="translated">最も効率的なデータ型</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For variables that never contain fractions, the integral data types are more efficient than the nonintegral types.</source>
          <target state="translated">小数を含まない変数の場合は、整数データ型は、非整数型よりも効率的です。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>, <ph id="ph2">`Integer`</ph> and <ph id="ph3">`UInteger`</ph> are the most efficient numeric types.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>、<ph id="ph2">`Integer`</ph>と<ph id="ph3">`UInteger`</ph>は最も効率的な数値型。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For fractional numbers, <ph id="ph1">`Double`</ph> is the most efficient data type, because the processors on current platforms perform floating-point operations in double precision.</source>
          <target state="translated">小数値<ph id="ph1">`Double`</ph>を最も効率的なデータ型は、現在のプラットフォーム上のプロセッサでは、倍精度浮動小数点演算を実行するためです。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>However, operations with <ph id="ph1">`Double`</ph> are not as fast as with the integral types such as <ph id="ph2">`Integer`</ph>.</source>
          <target state="translated">ただし、操作が<ph id="ph1">`Double`</ph>などの整数型と同様に高速ではない<ph id="ph2">`Integer`</ph>します。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Specifying Data Type</source>
          <target state="translated">データ型の指定</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">[</bpt>Dim Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/dim-statement.md)</ept> to declare a variable of a specific type.</source>
          <target state="translated">使用して、 <bpt id="p1">[</bpt>Dim ステートメント<ept id="p1">](../../../../visual-basic/language-reference/statements/dim-statement.md)</ept>特定の型の変数を宣言します。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You can simultaneously specify its access level by using the <bpt id="p1">[</bpt>Public<ept id="p1">](../../../../visual-basic/language-reference/modifiers/public.md)</ept>, <bpt id="p2">[</bpt>Protected<ept id="p2">](../../../../visual-basic/language-reference/modifiers/protected.md)</ept>, <bpt id="p3">[</bpt>Friend<ept id="p3">](../../../../visual-basic/language-reference/modifiers/friend.md)</ept>, or <bpt id="p4">[</bpt>Private<ept id="p4">](../../../../visual-basic/language-reference/modifiers/private.md)</ept> keyword, as in the following example.</source>
          <target state="translated">同時に使用してアクセス レベルを指定することができます、<bpt id="p1">[</bpt>パブリック<ept id="p1">](../../../../visual-basic/language-reference/modifiers/public.md)</ept>、 <bpt id="p2">[</bpt>Protected<ept id="p2">](../../../../visual-basic/language-reference/modifiers/protected.md)</ept>、<bpt id="p3">[</bpt>フレンド<ept id="p3">](../../../../visual-basic/language-reference/modifiers/friend.md)</ept>、または<bpt id="p4">[</bpt>プライベート<ept id="p4">](../../../../visual-basic/language-reference/modifiers/private.md)</ept>キーワードは、次の例に示すようにします。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Character Conversion</source>
          <target state="translated">文字の変換</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`AscW`</ph> and <ph id="ph2">`ChrW`</ph> functions operate in Unicode.</source>
          <target state="translated"><ph id="ph1">`AscW`</ph>と<ph id="ph2">`ChrW`</ph>関数は Unicode に操作します。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>You should use them in preference to <ph id="ph1">`Asc`</ph> and <ph id="ph2">`Chr`</ph>, which must translate into and out of Unicode.</source>
          <target state="translated">優先的に使用する必要があります<ph id="ph1">`Asc`</ph>と<ph id="ph2">`Chr`</ph>Unicode との間に変換する必要があります。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">関連項目</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>&lt;xref:Microsoft.VisualBasic.Strings.Asc%2A&gt;</source>
          <target state="translated">&lt;xref:Microsoft.VisualBasic.Strings.Asc%2A&gt;&lt;/xref:Microsoft.VisualBasic.Strings.Asc%2A&gt;</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>&lt;xref:Microsoft.VisualBasic.Strings.AscW%2A&gt;</source>
          <target state="translated">&lt;xref:Microsoft.VisualBasic.Strings.AscW%2A&gt;&lt;/xref:Microsoft.VisualBasic.Strings.AscW%2A&gt;</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>&lt;xref:Microsoft.VisualBasic.Strings.Chr%2A&gt;</source>
          <target state="translated">&lt;xref:Microsoft.VisualBasic.Strings.Chr%2A&gt;&lt;/xref:Microsoft.VisualBasic.Strings.Chr%2A&gt;</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>&lt;xref:Microsoft.VisualBasic.Strings.ChrW%2A&gt;</source>
          <target state="translated">&lt;xref:Microsoft.VisualBasic.Strings.ChrW%2A&gt;&lt;/xref:Microsoft.VisualBasic.Strings.ChrW%2A&gt;</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Data Types<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/index.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>データ型<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/index.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Numeric Data Types<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/numeric-data-types.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>数値データ型<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/numeric-data-types.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Variable Declaration<ept id="p1">](../../../../visual-basic/programming-guide/language-features/variables/variable-declaration.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>変数宣言<ept id="p1">](../../../../visual-basic/programming-guide/language-features/variables/variable-declaration.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Using IntelliSense<ept id="p1">](https://docs.microsoft.com/visualstudio/ide/using-intellisense)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>IntelliSense の使用<ept id="p1">](https://docs.microsoft.com/visualstudio/ide/using-intellisense)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>