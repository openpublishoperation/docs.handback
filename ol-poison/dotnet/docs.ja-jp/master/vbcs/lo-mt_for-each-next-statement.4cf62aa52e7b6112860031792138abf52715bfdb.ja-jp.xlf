<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e0173877fa4a57da76fd774d70ce63d2beda23ad</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\language-reference\statements\for-each-next-statement.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">920e8ab760e0c35e9cebdee25d71d97faf03fa31</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a514e215bd4dd062ffed073774d33b147900c2be</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Handback file name: lo-mt_for-each-next-statement.4cf62aa52e7b6112860031792138abf52715bfdb.ja-jp is different with handoff file name: for-each-next-statement.4cf62aa52e7b6112860031792138abf52715bfdb.ja-jp.</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>For Each...Next Statement (Visual Basic) | Microsoft Docs</source>
          <target state="translated">各.次のステートメント (Visual Basic) |Microsoft ドキュメント</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>For Each...Next Statement (Visual Basic)</source>
          <target state="translated">For Each...Next ステートメント (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Repeats a group of statements for each element in a collection.</source>
          <target state="translated">ステートメントのコレクション内の各要素に対して繰り返します。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
          <target state="translated">構文</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parts</source>
          <target state="translated">指定項目</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Term</source>
          <target state="translated">用語</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Definition</source>
          <target state="translated">定義</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Required in the <ph id="ph1">`For Each`</ph> statement.</source>
          <target state="translated">必要な<ph id="ph1">`For Each`</ph>ステートメントです。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Optional in the <ph id="ph1">`Next`</ph> statement.</source>
          <target state="translated">省略可能で、<ph id="ph1">`Next`</ph>ステートメントです。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Variable.</source>
          <target state="translated">変数。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Used to iterate through the elements of the collection.</source>
          <target state="translated">コレクションの要素を反復処理するために使用します。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Required if <ph id="ph1">`element`</ph> isn't already declared.</source>
          <target state="translated">必要な場合<ph id="ph1">`element`</ph>既に宣言されていません。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Data type of <ph id="ph1">`element`</ph>.</source>
          <target state="translated">データ型<ph id="ph1">`element`</ph>します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Required.</source>
          <target state="translated">必須です。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A variable with a type that's a collection type or Object.</source>
          <target state="translated">コレクション型またはオブジェクトの型を含む変数。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Refers to the collection over which the <ph id="ph1">`statements`</ph> are to be repeated.</source>
          <target state="translated">どのコレクションを参照、<ph id="ph1">`statements`</ph>られます。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">省略可能です。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>One or more statements between <ph id="ph1">`For Each`</ph> and <ph id="ph2">`Next`</ph> that run on each item in <ph id="ph3">`group`</ph>.</source>
          <target state="translated">1 つまたは複数のステートメントの間で<ph id="ph1">`For Each`</ph>と<ph id="ph2">`Next`</ph>内の各項目で実行される<ph id="ph3">`group`</ph>します。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">省略可能です。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Transfers control to the start of the <ph id="ph1">`For Each`</ph> loop.</source>
          <target state="translated">先頭に制御を転送、<ph id="ph1">`For Each`</ph>ループします。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">省略可能です。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Transfers control out of the <ph id="ph1">`For Each`</ph> loop.</source>
          <target state="translated">制御を転送、<ph id="ph1">`For Each`</ph>ループします。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Required.</source>
          <target state="translated">必須です。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Terminates the definition of the <ph id="ph1">`For Each`</ph> loop.</source>
          <target state="translated">定義を終了、<ph id="ph1">`For Each`</ph>ループします。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Simple Example</source>
          <target state="translated">簡単な例</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Use a <ph id="ph1">`For Each`</ph>...<ph id="ph2">`Next`</ph> loop when you want to repeat a set of statements for each element of a collection or array.</source>
          <target state="translated">Use a <ph id="ph1">`For Each`</ph>...<ph id="ph2">`Next`</ph>コレクションまたは配列の各要素の一連のステートメントを繰り返し使用するときにループ処理します。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>For...Next Statement<ept id="p1">](../../../visual-basic/language-reference/statements/for-next-statement.md)</ept> works well when you can associate each iteration of a loop with a control variable and determine that variable's initial and final values.</source>
          <target state="translated">A <bpt id="p1">[</bpt>For...次のステートメントの<ept id="p1">](../../../visual-basic/language-reference/statements/for-next-statement.md)</ept>うまくループの各反復処理を制御変数に関連付けるし、その変数の最初と最後の値を決定することができます。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>However, when you are dealing with a collection, the concept of initial and final values isn't meaningful, and you don't necessarily know how many elements the collection has.</source>
          <target state="translated">ただし、コレクションを処理するときは、最初と最後の値の概念は、わかりやすいと、コレクションは、要素の数がわからないとは限りません。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In this kind of case, a <ph id="ph1">`For Each`</ph>...<ph id="ph2">`Next`</ph> loop is often a better choice.</source>
          <target state="translated">このような場合で、 <ph id="ph1">`For Each`</ph>.<ph id="ph2">`Next`</ph>ループは、多くの場合、方が適しています。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In the following example, the <ph id="ph1">`For Each`</ph>…<ph id="ph2">`Next`</ph></source>
          <target state="translated">次の例では、 <ph id="ph1">`For Each`</ph>.<ph id="ph2">`Next`</ph></target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>statement iterates through all the elements of a List collection.</source>
          <target state="translated">ステートメントは、リスト コレクションのすべての要素を反復処理します。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#121<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/for-each-next-statement_1.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements #&amp;121;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/for-each-next-statement_1.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For more examples, see <bpt id="p1">[</bpt>Collections<ept id="p1">](http://msdn.microsoft.com/library/e76533a9-5033-4a0b-b003-9c2be60d185b)</ept> and <bpt id="p2">[</bpt>Arrays<ept id="p2">](../../../visual-basic/programming-guide/language-features/arrays/index.md)</ept>.</source>
          <target state="translated">例については、次を参照してください。<bpt id="p1">[</bpt>コレクション<ept id="p1">](http://msdn.microsoft.com/library/e76533a9-5033-4a0b-b003-9c2be60d185b)</ept>と<bpt id="p2">[</bpt>配列<ept id="p2">](../../../visual-basic/programming-guide/language-features/arrays/index.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Nested Loops</source>
          <target state="translated">入れ子になったループ</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>You can nest <ph id="ph1">`For Each`</ph> loops by putting one loop within another.</source>
          <target state="translated">入れ子にすることができます<ph id="ph1">`For Each`</ph>内に別の&amp;1; つのループを記述することによってループします。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The following example demonstrates nested <ph id="ph1">`For Each`</ph>…<ph id="ph2">`Next`</ph></source>
          <target state="translated">次の例で入れ子になった<ph id="ph1">`For Each`</ph>.<ph id="ph2">`Next`</ph></target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>structures.</source>
          <target state="translated">構造体。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#122<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/for-each-next-statement_2.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements #&amp;122;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/for-each-next-statement_2.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>When you nest loops, each loop must have a unique <ph id="ph1">`element`</ph> variable.</source>
          <target state="translated">ループを入れ子にする場合は、各ループが一意が必要<ph id="ph1">`element`</ph>変数です。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>You can also nest different kinds of control structures within each other.</source>
          <target state="translated">さまざまな種類の他の制御構造を入れ子にすることもできます。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Nested Control Structures<ept id="p1">](../../../visual-basic/programming-guide/language-features/control-flow/nested-control-structures.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>制御構造の入れ子になった<ept id="p1">](../../../visual-basic/programming-guide/language-features/control-flow/nested-control-structures.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Exit For and Continue For</source>
          <target state="translated">終了し、継続</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Exit For<ept id="p1">](../../../visual-basic/language-reference/statements/exit-statement.md)</ept> statement causes execution to exit the <ph id="ph1">`For`</ph>…<ph id="ph2">`Next`</ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Exit For<ept id="p1">](../../../visual-basic/language-reference/statements/exit-statement.md)</ept>ステートメントは、実行を終了する、 <ph id="ph1">`For`</ph>.<ph id="ph2">`Next`</ph></target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>loop and transfers control to the statement that follows the <ph id="ph1">`Next`</ph> statement.</source>
          <target state="translated">次のステートメントをループおよび転送の制御、<ph id="ph1">`Next`</ph>ステートメントです。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Continue For`</ph> statement transfers control immediately to the next iteration of the loop.</source>
          <target state="translated"><ph id="ph1">`Continue For`</ph>に制御を移しますすぐに、ループの次の反復処理します。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Continue Statement<ept id="p1">](../../../visual-basic/language-reference/statements/continue-statement.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。 <bpt id="p1">[</bpt>Continue ステートメント<ept id="p1">](../../../visual-basic/language-reference/statements/continue-statement.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The following example shows how to use the <ph id="ph1">`Continue For`</ph> and <ph id="ph2">`Exit For`</ph> statements.</source>
          <target state="translated">次の例では、使用する方法、<ph id="ph1">`Continue For`</ph>と<ph id="ph2">`Exit For`</ph>ステートメントです。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#123<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/for-each-next-statement_3.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements&amp;#123;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/for-each-next-statement_3.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>You can put any number of <ph id="ph1">`Exit For`</ph> statements in a <ph id="ph2">`For Each`</ph> loop.</source>
          <target state="translated">任意の数を配置する<ph id="ph1">`Exit For`</ph>内のステートメント、<ph id="ph2">`For Each`</ph>ループします。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>When used within nested <ph id="ph1">`For Each`</ph> loops, <ph id="ph2">`Exit For`</ph> causes execution to exit the innermost loop and transfers control to the next higher level of nesting.</source>
          <target state="translated">使用すると内で入れ子になった<ph id="ph1">`For Each`</ph>ループ、<ph id="ph2">`Exit For`</ph>実行を入れ子の上位のレベルに最も内側のループと転送コントロールを終了します。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Exit For`</ph> is often used after an evaluation of some condition, for example, in an <ph id="ph2">`If`</ph>...<ph id="ph3">`Then`</ph>...<ph id="ph4">`Else`</ph> structure.</source>
          <target state="translated"><ph id="ph1">`Exit For`</ph>いくつかの条件の評価後は、よく使用など、 <ph id="ph2">`If`</ph>.<ph id="ph3">`Then`</ph>...<ph id="ph4">`Else`</ph>構造体。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>You might want to use <ph id="ph1">`Exit For`</ph> for the following conditions:</source>
          <target state="translated">使用することができます<ph id="ph1">`Exit For`</ph>次の条件。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Continuing to iterate is unnecessary or impossible.</source>
          <target state="translated">反復処理に進むことは不要なか不可能です。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>This might be caused by an erroneous value or a termination request.</source>
          <target state="translated">値が間違っているか、終了要求によってためと考えられます。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>An exception is caught in a <ph id="ph1">`Try`</ph>...<ph id="ph2">`Catch`</ph>...<ph id="ph3">`Finally`</ph>.</source>
          <target state="translated">例外がキャッチされました、 <ph id="ph1">`Try`</ph>.<ph id="ph2">`Catch`</ph>...<ph id="ph3">`Finally`</ph>.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>You might use <ph id="ph1">`Exit For`</ph> at the end of the <ph id="ph2">`Finally`</ph> block.</source>
          <target state="translated">使用する<ph id="ph1">`Exit For`</ph>の最後に、<ph id="ph2">`Finally`</ph>ブロックします。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>There an endless loop, which is a loop that could run a large or even infinite number of times.</source>
          <target state="translated">何度も長時間または無限でも実行できるループ、無限ループがあります。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>If you detect such a condition, you can use <ph id="ph1">`Exit For`</ph> to escape the loop.</source>
          <target state="translated">このような条件を検出した場合を使用できます<ph id="ph1">`Exit For`</ph>ループを抜けます。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Do...Loop Statement<ept id="p1">](../../../visual-basic/language-reference/statements/do-loop-statement.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください<bpt id="p1">[</bpt>操作を行います.。ステートメントのループ<ept id="p1">](../../../visual-basic/language-reference/statements/do-loop-statement.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Iterators</source>
          <target state="translated">反復子</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>You use an <bpt id="p1">*</bpt>iterator<ept id="p1">*</ept> to perform a custom iteration over a collection.</source>
          <target state="translated">使用する、<bpt id="p1">*</bpt>反復子<ept id="p1">*</ept>コレクションに対するカスタム イテレーションを実行します。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>An iterator can be a function or a <ph id="ph1">`Get`</ph> accessor.</source>
          <target state="translated">関数は、反復子または<ph id="ph1">`Get`</ph>アクセサー。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>It uses a <ph id="ph1">`Yield`</ph> statement to return each element of the collection one at a time.</source>
          <target state="translated">使用して、<ph id="ph1">`Yield`</ph>ステートメントを一度に&amp;1; つのコレクションの各要素を返します。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>You call an iterator by using a <ph id="ph1">`For Each...Next`</ph> statement.</source>
          <target state="translated">使用して、反復子を呼び出す、<ph id="ph1">`For Each...Next`</ph>ステートメントです。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Each iteration of the <ph id="ph1">`For Each`</ph> loop calls the iterator.</source>
          <target state="translated"><ph id="ph1">`For Each`</ph> ループの各イテレーションは、反復子を呼び出します。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>When a <ph id="ph1">`Yield`</ph> statement is reached in the iterator, the expression in the <ph id="ph2">`Yield`</ph> statement is returned, and the current location in code is retained.</source>
          <target state="translated">ときに、<ph id="ph1">`Yield`</ph>ステートメントが反復子の式に到達、<ph id="ph2">`Yield`</ph>ステートメントが返され、コードの現在位置が保持されます。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Execution is restarted from that location the next time that the iterator is called.</source>
          <target state="translated">次回、反復子が呼び出されると、この位置から実行が再開されます。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The following example uses an iterator function.</source>
          <target state="translated">次の例では、iterator 関数を使用します。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The iterator function has a <ph id="ph1">`Yield`</ph> statement that's inside a <bpt id="p1">[</bpt>For…Next<ept id="p1">](../../../visual-basic/language-reference/statements/for-next-statement.md)</ept> loop.</source>
          <target state="translated">Iterator 関数が、<ph id="ph1">`Yield`</ph>ステートメント内にある、<bpt id="p1">[</bpt>にしています.次<ept id="p1">](../../../visual-basic/language-reference/statements/for-next-statement.md)</ept>ループします。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">`ListEvenNumbers`</ph> method, each iteration of the <ph id="ph2">`For Each`</ph> statement body creates a call to the iterator function, which proceeds to the next <ph id="ph3">`Yield`</ph> statement.</source>
          <target state="translated"><ph id="ph1">`ListEvenNumbers`</ph>メソッドは、の各反復処理、<ph id="ph2">`For Each`</ph>ステートメント本体を次の手順を実行する反復子関数の呼び出しを作成<ph id="ph3">`Yield`</ph>ステートメントです。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#127<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/for-each-next-statement_4.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements&amp;#127;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/for-each-next-statement_4.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Iterators<ept id="p1">](http://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7)</ept>, <bpt id="p2">[</bpt>Yield Statement<ept id="p2">](../../../visual-basic/language-reference/statements/yield-statement.md)</ept>, and <bpt id="p3">[</bpt>Iterator<ept id="p3">](../../../visual-basic/language-reference/modifiers/iterator.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>反復子<ept id="p1">](http://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7)</ept>、 <bpt id="p2">[</bpt>Yield ステートメント<ept id="p2">](../../../visual-basic/language-reference/statements/yield-statement.md)</ept>、および<bpt id="p3">[</bpt>反復子<ept id="p3">](../../../visual-basic/language-reference/modifiers/iterator.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Technical Implementation</source>
          <target state="translated">技術的な実装</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>When a <ph id="ph1">`For Each`</ph>…<ph id="ph2">`Next`</ph></source>
          <target state="translated">ときに、 <ph id="ph1">`For Each`</ph>.<ph id="ph2">`Next`</ph></target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>statement runs, Visual Basic evaluates the collection only one time, before the loop starts.</source>
          <target state="translated">ステートメントが実行されて、Visual Basic では、コレクション、ループの開始前に&amp;1; つだけの時間を評価します。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>If your statement block changes <ph id="ph1">`element`</ph> or <ph id="ph2">`group`</ph>, these changes don't affect the iteration of the loop.</source>
          <target state="translated">ステートメント ブロックが変更された場合<ph id="ph1">`element`</ph>または<ph id="ph2">`group`</ph>、これらの変更、ループの反復処理に影響を与えません。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>When all the elements in the collection have been successively assigned to <ph id="ph1">`element`</ph>, the <ph id="ph2">`For Each`</ph> loop stops and control passes to the statement following the <ph id="ph3">`Next`</ph> statement.</source>
          <target state="translated">ときに、コレクション内のすべての要素が連続的に割り当てられた<ph id="ph1">`element`</ph>、<ph id="ph2">`For Each`</ph>ループが停止し、次のステートメントのパスを制御、<ph id="ph3">`Next`</ph>ステートメントです。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`element`</ph> hasn't been declared outside this loop, you must declare it in the <ph id="ph2">`For Each`</ph> statement.</source>
          <target state="translated">場合<ph id="ph1">`element`</ph>宣言されていないこのループの外側に宣言する必要がありますで、<ph id="ph2">`For Each`</ph>ステートメントです。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>You can declare the type of <ph id="ph1">`element`</ph> explicitly by using an <ph id="ph2">`As`</ph> statement, or you can rely on type inference to assign the type.</source>
          <target state="translated">型を宣言する<ph id="ph1">`element`</ph>を使用して明示的に、<ph id="ph2">`As`</ph>ステートメント、またはは、型を割り当てる型の推定で利用できます。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>In either case, the scope of <ph id="ph1">`element`</ph> is the body of the loop.</source>
          <target state="translated">いずれの場合、スコープの<ph id="ph1">`element`</ph>がループの本体。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>However, you cannot declare <ph id="ph1">`element`</ph> both outside and inside the loop.</source>
          <target state="translated">ただし、宣言することはできません<ph id="ph1">`element`</ph>外側と、ループ内の両方です。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>You can optionally specify <ph id="ph1">`element`</ph> in the <ph id="ph2">`Next`</ph> statement.</source>
          <target state="translated">必要に応じて指定することができます<ph id="ph1">`element`</ph>で、<ph id="ph2">`Next`</ph>ステートメントです。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>This improves the readability of your program, especially if you have nested <ph id="ph1">`For Each`</ph> loops.</source>
          <target state="translated">入れ子にしていない場合に特にがプログラムを読みやすく<ph id="ph1">`For Each`</ph>ループします。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>You must specify the same variable as the one that appears in the corresponding <ph id="ph1">`For Each`</ph> statement.</source>
          <target state="translated">対応する、含まれているものと同じ変数を指定する必要があります<ph id="ph1">`For Each`</ph>ステートメントです。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>You might want to avoid changing the value of <ph id="ph1">`element`</ph> inside a loop.</source>
          <target state="translated">値を変更しないようにすることができます<ph id="ph1">`element`</ph>ループの中。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Doing this can make it more difficult to read and debug your code.</source>
          <target state="translated">これを行うできるようになります読み取りやコードのデバッグが困難です。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Changing the value of <ph id="ph1">`group`</ph> doesn't affect the collection or its elements, which were determined when the loop was first entered.</source>
          <target state="translated">値を変更する<ph id="ph1">`group`</ph>コレクションまたはその要素は、ループが最初に入力されたときに決定されたには影響しません。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>When you're nesting loops, if a <ph id="ph1">`Next`</ph> statement of an outer nesting level is encountered before the <ph id="ph2">`Next`</ph> of an inner level, the compiler signals an error.</source>
          <target state="translated">場合に、ループがネストしているとき、<ph id="ph1">`Next`</ph>する前に外部の入れ子レベルのステートメントが検出された、 <ph id="ph2">`Next`</ph> 、内側のレベルのコンパイラがエラーを通知します。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>However, the compiler can detect this overlapping error only if you specify <ph id="ph1">`element`</ph> in every <ph id="ph2">`Next`</ph> statement.</source>
          <target state="translated">ただし、コンパイラが検出できるこれを指定する場合にのみ、エラーを重複する<ph id="ph1">`element`</ph>ですべて<ph id="ph2">`Next`</ph>ステートメントです。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>If your code depends on traversing a collection in a particular order, a <ph id="ph1">`For Each`</ph>...<ph id="ph2">`Next`</ph> loop isn't the best choice, unless you know the characteristics of the enumerator object the collection exposes.</source>
          <target state="translated">コードは、特定の順序でコレクションを走査に依存する場合、 <ph id="ph1">`For Each`</ph>.<ph id="ph2">`Next`</ph>ループ、最適なのだ、列挙子オブジェクトの特性をわかっていない限り、コレクションを公開します。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The order of traversal isn't determined by Visual Basic, but by the &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; method of the enumerator object.</source>
          <target state="translated">走査の順序はありませんによって決定される Visual Basic の場合は、&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;列挙子オブジェクトのメソッドです&lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt;。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Therefore, you might not be able to predict which element of the collection is the first to be returned in <ph id="ph1">`element`</ph>, or which is the next to be returned after a given element.</source>
          <target state="translated">したがって、しないことができますのどの要素のコレクションが、最初に返されるを予測<ph id="ph1">`element`</ph>にある指定された要素の後に返されるか。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>You might achieve more reliable results using a different loop structure, such as <ph id="ph1">`For`</ph>...<ph id="ph2">`Next`</ph> or <ph id="ph3">`Do`</ph>...<ph id="ph4">`Loop`</ph>.</source>
          <target state="translated">など、さまざまなループ構造を使用して、信頼性の高い結果を得られるもあります<ph id="ph1">`For`</ph>.<ph id="ph2">`Next`</ph> or <ph id="ph3">`Do`</ph>...<ph id="ph4">`Loop`</ph>.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The data type of <ph id="ph1">`element`</ph> must be such that the data type of the elements of <ph id="ph2">`group`</ph> can be converted to it.</source>
          <target state="translated">データ型<ph id="ph1">`element`</ph>の要素のデータを入力するようにする必要があります<ph id="ph2">`group`</ph>に変換できます。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The data type of <ph id="ph1">`group`</ph> must be a reference type that refers to a collection or an array that's enumerable.</source>
          <target state="translated">データ型<ph id="ph1">`group`</ph>コレクションまたは列挙可能なである配列を参照する参照型である必要があります。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Most commonly this means that <ph id="ph1">`group`</ph> refers to an object that implements the &lt;xref:System.Collections.IEnumerable&gt; interface of the <ph id="ph2">`System.Collections`</ph> namespace or the &lt;xref:System.Collections.Generic.IEnumerable%601&gt; interface of the <ph id="ph3">`System.Collections.Generic`</ph> namespace.</source>
          <target state="translated">このため、最もよく<ph id="ph1">`group`</ph>を実装するオブジェクトを指す、&lt;xref:System.Collections.IEnumerable&gt;のインターフェイス、<ph id="ph2">`System.Collections`</ph>名前空間または&lt;xref:System.Collections.Generic.IEnumerable%601&gt;のインターフェイス、<ph id="ph3">`System.Collections.Generic`</ph>名前空間&lt;/xref:System.Collections.Generic.IEnumerable%601&gt;&lt;/xref:System.Collections.IEnumerable&gt;。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`System.Collections.IEnumerable`</ph> defines the &lt;xref:System.Collections.IEnumerable.GetEnumerator%2A&gt; method, which returns an enumerator object for the collection.</source>
          <target state="translated"><ph id="ph1">`System.Collections.IEnumerable`</ph>定義、&lt;xref:System.Collections.IEnumerable.GetEnumerator%2A&gt;メソッドで、コレクションの列挙子オブジェクトを返します&lt;/xref:System.Collections.IEnumerable.GetEnumerator%2A&gt;。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The enumerator object implements the <ph id="ph1">`System.Collections.IEnumerator`</ph> interface of the <ph id="ph2">`System.Collections`</ph> namespace and exposes the &lt;xref:System.Collections.IEnumerator.Current%2A&gt; property and the &lt;xref:System.Collections.IEnumerator.Reset%2A&gt; and &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; methods.</source>
          <target state="translated">列挙子オブジェクトを実装して、<ph id="ph1">`System.Collections.IEnumerator`</ph>のインターフェイス、<ph id="ph2">`System.Collections`</ph>名前空間を公開し、&lt;xref:System.Collections.IEnumerator.Current%2A&gt;プロパティおよび&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;と&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;メソッド&lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt;&lt;/xref:System.Collections.IEnumerator.Reset%2A&gt;&lt;/xref:System.Collections.IEnumerator.Current%2A&gt;。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Visual Basic uses these to traverse the collection.</source>
          <target state="translated">Visual Basic では、これらを使用して、コレクションを走査します。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Narrowing Conversions</source>
          <target state="translated">縮小変換</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`Option Strict`</ph> is set to <ph id="ph2">`On`</ph>, narrowing conversions ordinarily cause compiler errors.</source>
          <target state="translated"><ph id="ph1">`Option Strict`</ph>に設定されている<ph id="ph2">`On`</ph>、縮小変換に通常はコンパイラ エラーが発生します。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>In a <ph id="ph1">`For Each`</ph> statement, however, conversions from the elements in <ph id="ph2">`group`</ph> to <ph id="ph3">`element`</ph> are evaluated and performed at run time, and compiler errors caused by narrowing conversions are suppressed.</source>
          <target state="translated"><ph id="ph1">`For Each`</ph>ステートメント、ただし、内の要素からの変換<ph id="ph2">`group`</ph>に<ph id="ph3">`element`</ph>が評価され、実行時に実行される、縮小変換によるコンパイラ エラーを抑制します。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>In the following example, the assignment of <ph id="ph1">`m`</ph> as the initial value for <ph id="ph2">`n`</ph> doesn't compile when <ph id="ph3">`Option Strict`</ph> is on because the conversion of a <ph id="ph4">`Long`</ph> to an <ph id="ph5">`Integer`</ph> is a narrowing conversion.</source>
          <target state="translated">割り当て、次の例で<ph id="ph1">`m`</ph>の初期値として<ph id="ph2">`n`</ph>場合はコンパイルされません<ph id="ph3">`Option Strict`</ph>ためへの変換、<ph id="ph4">`Long`</ph>に、<ph id="ph5">`Integer`</ph>縮小変換です。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">`For Each`</ph> statement, however, no compiler error is reported, even though the assignment to <ph id="ph2">`number`</ph> requires the same conversion from <ph id="ph3">`Long`</ph> to <ph id="ph4">`Integer`</ph>.</source>
          <target state="translated"><ph id="ph1">`For Each`</ph>ステートメント、ただし、コンパイラ エラーがないへの代入も報告<ph id="ph2">`number`</ph>から同じ変換が必要<ph id="ph3">`Long`</ph>に<ph id="ph4">`Integer`</ph>します。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">`For Each`</ph> statement that contains a large number, a run-time error occurs when &lt;xref:Microsoft.VisualBasic.CompilerServices.Conversions.ToInteger%2A&gt; is applied to the large number.</source>
          <target state="translated"><ph id="ph1">`For Each`</ph>を膨大な数を含むステートメントでは、実行時エラーが発生したときに&lt;xref:Microsoft.VisualBasic.CompilerServices.Conversions.ToInteger%2A&gt;膨大な数に適用されます&lt;/xref:Microsoft.VisualBasic.CompilerServices.Conversions.ToInteger%2A&gt;。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#89<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/for-each-next-statement_5.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements #&amp;89;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/for-each-next-statement_5.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>IEnumerator Calls</source>
          <target state="translated">IEnumerator 呼び出し</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>When execution of a <ph id="ph1">`For Each`</ph>...<ph id="ph2">`Next`</ph> loop starts, Visual Basic verifies that <ph id="ph3">`group`</ph> refers to a valid collection object.</source>
          <target state="translated">時の実行、 <ph id="ph1">`For Each`</ph>.<ph id="ph2">`Next`</ph>ループの開始、Visual Basic では、あることを確認<ph id="ph3">`group`</ph>は有効なコレクション オブジェクトを参照します。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>If not, it throws an exception.</source>
          <target state="translated">ない場合は、例外がスローされます。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Otherwise, it calls the &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; method and the &lt;xref:System.Collections.IEnumerator.Current%2A&gt; property of the enumerator object to return the first element.</source>
          <target state="translated">それ以外の場合、それを呼び出す、&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;メソッドおよび&lt;xref:System.Collections.IEnumerator.Current%2A&gt;最初の要素を返す列挙子オブジェクトのプロパティ&lt;/xref:System.Collections.IEnumerator.Current%2A&gt;&lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt;。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`MoveNext`</ph> indicates that there is no next element, that is, if the collection is empty, the <ph id="ph2">`For Each`</ph> loop stops and control passes to the statement following the <ph id="ph3">`Next`</ph> statement.</source>
          <target state="translated">場合<ph id="ph1">`MoveNext`</ph>ないことを示しますが次の要素は、コレクションが空である場合、<ph id="ph2">`For Each`</ph>ループが停止し、次のステートメントのパスを制御、<ph id="ph3">`Next`</ph>ステートメントです。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Otherwise, Visual Basic sets <ph id="ph1">`element`</ph> to the first element and runs the statement block.</source>
          <target state="translated">Visual Basic のそれ以外の場合、設定<ph id="ph1">`element`</ph>に最初の要素と、ステートメント ブロックを実行します。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Each time Visual Basic encounters the <ph id="ph1">`Next`</ph> statement, it returns to the <ph id="ph2">`For Each`</ph> statement.</source>
          <target state="translated">Visual Basic が発生するたびに、<ph id="ph1">`Next`</ph>にステートメントを返します、<ph id="ph2">`For Each`</ph>ステートメントです。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Again it calls <ph id="ph1">`MoveNext`</ph> and <ph id="ph2">`Current`</ph> to return the next element, and again it either runs the block or stops the loop depending on the result.</source>
          <target state="translated">再び呼び出します<ph id="ph1">`MoveNext`</ph>と<ph id="ph2">`Current`</ph>次の要素と、もう一度を返す、ブロックが実行か、その結果に応じて、ループを停止します。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>This process continues until <ph id="ph1">`MoveNext`</ph> indicates that there is no next element or an <ph id="ph2">`Exit For`</ph> statement is encountered.</source>
          <target state="translated">このプロセスが到達するまで続行<ph id="ph1">`MoveNext`</ph>次の要素がないことを示しますまたは<ph id="ph2">`Exit For`</ph>ステートメントが見つかりました。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Modifying the Collection.<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>コレクションを変更します。<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The enumerator object returned by &lt;xref:System.Collections.IEnumerable.GetEnumerator%2A&gt; normally doesn't let you change the collection by adding, deleting, replacing, or reordering any elements.</source>
          <target state="translated">によって返される列挙子オブジェクト&lt;xref:System.Collections.IEnumerable.GetEnumerator%2A&gt;通常することは、コレクションを変更するには、追加、削除、置換、または任意の要素の順序を変更します&lt;/xref:System.Collections.IEnumerable.GetEnumerator%2A&gt;。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>If you change the collection after you have initiated a <ph id="ph1">`For Each`</ph>...<ph id="ph2">`Next`</ph> loop, the enumerator object becomes invalid, and the next attempt to access an element causes an &lt;xref:System.InvalidOperationException&gt; exception.</source>
          <target state="translated">開始した後にコレクションを変更する場合、 <ph id="ph1">`For Each`</ph>.<ph id="ph2">`Next`</ph>ループ、列挙子オブジェクトは、無効になり、要素にアクセスするには、次の試行により、&lt;xref:System.InvalidOperationException&gt;例外&lt;/xref:System.InvalidOperationException&gt;。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>However, this blocking of modification isn't determined by <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>, but rather by the implementation of the &lt;xref:System.Collections.IEnumerable&gt; interface.</source>
          <target state="translated">ただし、によって決定されていない変更のこのブロック<ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>の実装ではなく、&lt;xref:System.Collections.IEnumerable&gt;インターフェイス&lt;/xref:System.Collections.IEnumerable&gt;。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>It is possible to implement <ph id="ph1">`IEnumerable`</ph> in a way that allows for modification during iteration.</source>
          <target state="translated">実装することは<ph id="ph1">`IEnumerable`</ph>イテレーション中に変更を許可するようにします。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>If you are considering doing such dynamic modification, make sure that you understand the characteristics of the <ph id="ph1">`IEnumerable`</ph> implementation on the collection you are using.</source>
          <target state="translated">このような動的な変更を行うを検討している場合は、特性を理解していることを確認してください、<ph id="ph1">`IEnumerable`</ph>を使用しているコレクションを実装します。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Modifying Collection Elements.<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>コレクションの要素を変更します。<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Collections.IEnumerator.Current%2A&gt; property of the enumerator object is <bpt id="p1">[</bpt>ReadOnly<ept id="p1">](../../../visual-basic/language-reference/modifiers/readonly.md)</ept>, and it returns a local copy of each collection element.</source>
          <target state="translated">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;列挙子オブジェクトのプロパティが<bpt id="p1">[</bpt>ReadOnly<ept id="p1">](../../../visual-basic/language-reference/modifiers/readonly.md)</ept>コレクションの各要素のローカル コピーを返します&lt;/xref:System.Collections.IEnumerator.Current%2A&gt;。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>This means that you cannot modify the elements themselves in a <ph id="ph1">`For Each`</ph>...<ph id="ph2">`Next`</ph> loop.</source>
          <target state="translated">つまり、要素自体を変更できないことで、 <ph id="ph1">`For Each`</ph>.<ph id="ph2">`Next`</ph> loop.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Any modification you make affects only the local copy from <ph id="ph1">`Current`</ph> and isn't reflected back into the underlying collection.</source>
          <target state="translated">対して行った変更からのローカル コピーのみに影響を与えます<ph id="ph1">`Current`</ph>し、基になるコレクションに反映されることはありません。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>However, if an element is a reference type, you can modify the members of the instance to which it points.</source>
          <target state="translated">ただし、要素が参照型の場合は、ポイントするインスタンスのメンバーを変更できます。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The following example modifies the <ph id="ph1">`BackColor`</ph> member of each <ph id="ph2">`thisControl`</ph> element.</source>
          <target state="translated">次の例では、変更、<ph id="ph1">`BackColor`</ph>のそれぞれに所属<ph id="ph2">`thisControl`</ph>要素。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>You cannot, however, modify <ph id="ph1">`thisControl`</ph> itself.</source>
          <target state="translated">ただし、変更することはできません<ph id="ph1">`thisControl`</ph>自体です。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>1<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>1<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The previous example can modify the <ph id="ph1">`BackColor`</ph> member of each <ph id="ph2">`thisControl`</ph> element, although it cannot modify <ph id="ph3">`thisControl`</ph> itself.</source>
          <target state="translated">前の例を変更できます、<ph id="ph1">`BackColor`</ph>のそれぞれに所属<ph id="ph2">`thisControl`</ph>要素、それを変更できませんが<ph id="ph3">`thisControl`</ph>自体です。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Traversing Arrays.<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>配列の反復処理します。<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Because the &lt;xref:System.Array&gt; class implements the &lt;xref:System.Collections.IEnumerable&gt; interface, all arrays expose the &lt;xref:System.Array.GetEnumerator%2A&gt; method.</source>
          <target state="translated">&lt;xref:System.Array&gt;クラスが実装する、&lt;xref:System.Collections.IEnumerable&gt;インターフェイス、すべての配列を公開、&lt;xref:System.Array.GetEnumerator%2A&gt;メソッド&lt;/xref:System.Array.GetEnumerator%2A&gt;&lt;/xref:System.Collections.IEnumerable&gt;&lt;/xref:System.Array&gt;。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>This means that you can iterate through an array with a <ph id="ph1">`For Each`</ph>...<ph id="ph2">`Next`</ph> loop.</source>
          <target state="translated">つまり、配列を反復処理できること、 <ph id="ph1">`For Each`</ph>.<ph id="ph2">`Next`</ph> loop.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>However, you can only read the array elements.</source>
          <target state="translated">ただし、配列の要素のみを読み取ることができます。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>You cannot change them.</source>
          <target state="translated">変更することはできません。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">例</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>The following example lists all the folders in the C:\ directory by using the &lt;xref:System.IO.DirectoryInfo&gt; class.</source>
          <target state="translated">次の例では、&lt;xref:System.IO.DirectoryInfo&gt;クラス&lt;/xref:System.IO.DirectoryInfo&gt;を使用して、C:\ ディレクトリ内のすべてのフォルダーが一覧表示します。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#124<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/for-each-next-statement_6.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements #&amp;124;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/for-each-next-statement_6.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">例</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The following example illustrates a procedure for sorting a collection.</source>
          <target state="translated">次の例では、コレクションを並べ替えるための手順を示しています。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The example sorts instances of a <ph id="ph1">`Car`</ph> class that are stored in a &lt;xref:System.Collections.Generic.List%601&gt;.</source>
          <target state="translated">この例のインスタンスの並べ替え、 <ph id="ph1">`Car`</ph> &lt;xref:System.Collections.Generic.List%601&gt;.&lt;/xref:System.Collections.Generic.List%601&gt;に格納されているクラス</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Car`</ph> class implements the &lt;xref:System.IComparable%601&gt; interface, which requires that the &lt;xref:System.IComparable%601.CompareTo%2A&gt; method be implemented.</source>
          <target state="translated"><ph id="ph1">`Car`</ph>クラスが実装する、&lt;xref:System.IComparable%601&gt;を必要とするインターフェイス、&lt;xref:System.IComparable%601.CompareTo%2A&gt;メソッドを実装する&lt;/xref:System.IComparable%601.CompareTo%2A&gt;&lt;/xref:System.IComparable%601&gt;。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Each call to the &lt;xref:System.IComparable%601.CompareTo%2A&gt; method makes a single comparison that's used for sorting.</source>
          <target state="translated">呼び出すたび、&lt;xref:System.IComparable%601.CompareTo%2A&gt;メソッドは、並べ替えに使用される単一の比較&lt;/xref:System.IComparable%601.CompareTo%2A&gt;。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>User-written code in the <ph id="ph1">`CompareTo`</ph> method returns a value for each comparison of the current object with another object.</source>
          <target state="translated"><ph id="ph1">`CompareTo`</ph> メソッドのユーザーが作成したコードは、現在のオブジェクトと別のオブジェクトとの各比較の値を戻します。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>The value returned is less than zero if the current object is less than the other object, greater than zero if the current object is greater than the other object, and zero if they are equal.</source>
          <target state="translated">現在のオブジェクトが別のオブジェクトよりも小さい場合はゼロ未満の値を、大きい場合はゼロ以上の値を、等しい場合はゼロを戻します。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>This enables you to define in code the criteria for greater than, less than, and equal.</source>
          <target state="translated">これによって、より大きい、より小さい、等しい、の条件をコードに定義することができます。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">`ListCars`</ph> method, the <ph id="ph2">`cars.Sort()`</ph> statement sorts the list.</source>
          <target state="translated"><ph id="ph1">`ListCars`</ph> のメソッドでは、<ph id="ph2">`cars.Sort()`</ph> ステートメントがリストを並べ替えます。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>This call to the &lt;xref:System.Collections.Generic.List%601.Sort%2A&gt; method of the &lt;xref:System.Collections.Generic.List%601&gt; causes the <ph id="ph1">`CompareTo`</ph> method to be called automatically for the <ph id="ph2">`Car`</ph> objects in the <ph id="ph3">`List`</ph>.</source>
          <target state="translated">この呼び出しを&lt;xref:System.Collections.Generic.List%601.Sort%2A&gt;のメソッド、&lt;xref:System.Collections.Generic.List%601&gt;により、<ph id="ph1">`CompareTo`</ph>に対して自動的に呼び出されるメソッド、<ph id="ph2">`Car`</ph>内のオブジェクト、 <ph id="ph3">`List`</ph>&lt;/xref:System.Collections.Generic.List%601&gt; &lt;/xref:System.Collections.Generic.List%601.Sort%2A&gt; 。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#125<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/for-each-next-statement_7.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements #&amp;125;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/for-each-next-statement_7.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">関連項目</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Collections<ept id="p1">](http://msdn.microsoft.com/library/e76533a9-5033-4a0b-b003-9c2be60d185b)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>コレクション<ept id="p1">](http://msdn.microsoft.com/library/e76533a9-5033-4a0b-b003-9c2be60d185b)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>For...Next Statement<ept id="p1">](../../../visual-basic/language-reference/statements/for-next-statement.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>.次のステートメント<ept id="p1">](../../../visual-basic/language-reference/statements/for-next-statement.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Loop Structures<ept id="p1">](../../../visual-basic/programming-guide/language-features/control-flow/loop-structures.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>ループ構造<ept id="p1">](../../../visual-basic/programming-guide/language-features/control-flow/loop-structures.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>While...End While Statement<ept id="p1">](../../../visual-basic/language-reference/statements/while-end-while-statement.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>しばらくしています.While ステートメントの終了<ept id="p1">](../../../visual-basic/language-reference/statements/while-end-while-statement.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Do...Loop Statement<ept id="p1">](../../../visual-basic/language-reference/statements/do-loop-statement.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>操作を実行しています.ループ ステートメント<ept id="p1">](../../../visual-basic/language-reference/statements/do-loop-statement.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Widening and Narrowing Conversions<ept id="p1">](../../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>拡大変換と縮小変換<ept id="p1">](../../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Object Initializers: Named and Anonymous Types<ept id="p1">](../../../visual-basic/programming-guide/language-features/objects-and-classes/object-initializers-named-and-anonymous-types.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>オブジェクト初期化子: 名前付きおよび匿名型<ept id="p1">](../../../visual-basic/programming-guide/language-features/objects-and-classes/object-initializers-named-and-anonymous-types.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Collection Initializers<ept id="p1">](../../../visual-basic/programming-guide/language-features/collection-initializers/index.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>コレクション初期化子<ept id="p1">](../../../visual-basic/programming-guide/language-features/collection-initializers/index.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Arrays<ept id="p1">](../../../visual-basic/programming-guide/language-features/arrays/index.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>配列<ept id="p1">](../../../visual-basic/programming-guide/language-features/arrays/index.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>