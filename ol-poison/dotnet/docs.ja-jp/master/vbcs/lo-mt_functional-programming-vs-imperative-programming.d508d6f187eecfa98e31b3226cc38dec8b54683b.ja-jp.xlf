<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7fd7a2defabe2d03b658977cc0106e3bbf985202</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\linq\functional-programming-vs-imperative-programming.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e5770038fa361658af832cff09006d1185be7625</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">baced08be04c396bf5de15960c97b8b5f5e24b27</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Handback file name: lo-mt_functional-programming-vs-imperative-programming.d508d6f187eecfa98e31b3226cc38dec8b54683b.ja-jp is different with handoff file name: functional-programming-vs-imperative-programming.d508d6f187eecfa98e31b3226cc38dec8b54683b.ja-jp.</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Functional Programming vs. Imperative Programming (Visual Basic) | Microsoft Docs</source>
          <target state="translated">関数型プログラミングと命令型プログラミング (Visual Basic) |Microsoft ドキュメント</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Functional Programming vs. Imperative Programming (Visual Basic)</source>
          <target state="translated">関数型プログラミングと命令型プログラミング (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic compares and contrasts functional programming with more traditional imperative (procedural) programming.</source>
          <target state="translated">このトピックでは、関数型プログラミングを従来の命令型 (手続き型) プログラミングと比較対照します。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Functional Programming vs. Imperative Programming</source>
          <target state="translated">関数型プログラミングと命令型プログラミング</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>functional programming<ept id="p1">*</ept> paradigm was explicitly created to support a pure functional approach to problem solving.</source>
          <target state="translated"><bpt id="p1">*</bpt>関数型プログラミング<ept id="p1">*</ept>パラダイムは、問題を解決するため、純粋関数型アプローチをサポートするために明示的に作成します。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Functional programming is a form of <bpt id="p1">*</bpt>declarative programming<ept id="p1">*</ept>.</source>
          <target state="translated">関数型プログラミングは一種の<bpt id="p1">*</bpt>宣言型プログラミング<ept id="p1">*</ept>します。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>In contrast, most mainstream languages, including object-oriented programming (OOP) languages such as C#, Visual Basic, C++, and Java, were designed to primarily support <bpt id="p1">*</bpt>imperative<ept id="p1">*</ept> (procedural) programming.</source>
          <target state="translated">これに対し、c#、Visual Basic、C++、および、Java などのプログラミング (OOP) 言語のオブジェクト指向を含め、ほとんどの主流言語に設計されています、主にサポートする<bpt id="p1">*</bpt>命令型<ept id="p1">*</ept>(手続き型) プログラミングします。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>With an imperative approach, a developer writes code that describes in exacting detail the steps that the computer must take to accomplish the goal.</source>
          <target state="translated">命令型の方法では、開発者はコードを記述して、目的を達成するためにコンピューターが実行するステップを詳細に示します。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This is sometimes referred to as <bpt id="p1">*</bpt>algorithmic<ept id="p1">*</ept> programming.</source>
          <target state="translated">これとも呼ば<bpt id="p1">*</bpt>アルゴリズム<ept id="p1">*</ept>プログラミングします。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In contrast, a functional approach involves composing the problem as a set of functions to be executed.</source>
          <target state="translated">一方、関数型の方法では、実行される一連の関数として問題が組み立てられ、</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You define carefully the input to each function, and what each function returns.</source>
          <target state="translated">それぞれの関数に何が入力され、何が返されるのかが、慎重に定義されます。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The following table describes some of the general differences between these two approaches.</source>
          <target state="translated">この&amp;2; つの方法の一般的な違いを次の表に示します。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Characteristic</source>
          <target state="translated">特徴</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Imperative approach</source>
          <target state="translated">命令型の方法</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Functional approach</source>
          <target state="translated">関数型の方法</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Programmer focus</source>
          <target state="translated">プログラミングの焦点</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>How to perform tasks (algorithms) and how to track changes in state.</source>
          <target state="translated">タスク (アルゴリズム) の実行方法と状態の変化の追跡方法。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>What information is desired and what transformations are required.</source>
          <target state="translated">目的となる情報と必要な変換。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>State changes</source>
          <target state="translated">状態変更</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Important.</source>
          <target state="translated">重要。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Non-existent.</source>
          <target state="translated">存在しない。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Order of execution</source>
          <target state="translated">実行の順序</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Important.</source>
          <target state="translated">重要。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Low importance.</source>
          <target state="translated">あまり重要ではない。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Primary flow control</source>
          <target state="translated">主要なフロー制御</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Loops, conditionals, and function (method) calls.</source>
          <target state="translated">ループ、条件、および関数 (メソッド) 呼び出し。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Function calls, including recursion.</source>
          <target state="translated">関数呼び出し (再帰を含む)。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Primary manipulation unit</source>
          <target state="translated">主要な操作単位</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Instances of structures or classes.</source>
          <target state="translated">構造体またはクラスのインスタンス。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Functions as first-class objects and data collections.</source>
          <target state="translated">ファーストクラス オブジェクトとしての関数とデータ コレクション。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Although most languages were designed to support a specific programming paradigm, many general languages are flexible enough to support multiple paradigms.</source>
          <target state="translated">ほとんどの言語は特定のプログラミング パラダイムをサポートするために作成されていますが、汎用言語の多くは、複数のパラダイムをサポートできる柔軟性を備えています。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For example, most languages that contain function pointers can be used to credibly support functional programming.</source>
          <target state="translated">たとえば、関数ポインターを含むほとんどの言語で関数型プログラミングがサポートされます。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Furthermore, Visual Basic includes explicit language extensions to support functional programming, including lambda expressions and type inference.</source>
          <target state="translated">さらに、Visual Basic には、ラムダ式などの関数型プログラミングのサポートや型推論する明確な言語拡張が含まれています。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>LINQ technology is a form of declarative, functional programming.</source>
          <target state="translated">LINQ テクノロジは、宣言型 (関数型) プログラミングの一種です。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Functional Programming Using XSLT</source>
          <target state="translated">XSLT による関数型プログラミング</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Many XSLT developers are familiar with the pure functional approach.</source>
          <target state="translated">純粋関数型の方法については、多くの XSLT 開発者が精通しています。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The most effective way to develop an XSLT style sheet is to treat each template as an isolated, composable transformation.</source>
          <target state="translated">XSLT スタイル シートを開発するための最も効果的な方法では、各テンプレートが、分離された構成可能な変換として扱われ、</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The order of execution is completely de-emphasized.</source>
          <target state="translated">実行の順序はまったく重要ではなくなります。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>XSLT does not allow side effects (with the exception that escaping mechanisms for executing procedural code can introduce side effects that result in functional impurity).</source>
          <target state="translated">また、XSLT では副作用も許可されません (例外として、手続き型のコードを実行するためのエスケープ メカニズムによって副作用が導入されることがあります。このため、純粋関数型ではなくなる場合があります)。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>However, although XSLT is an effective tool, some of its characteristics are not optimal.</source>
          <target state="translated">XSLT は有効なツールですが、その一方で、最適とは言えない特性もあります。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For example, expressing programming constructs in XML makes code relatively verbose, and therefore difficult to maintain.</source>
          <target state="translated">たとえば、プログラミング構成要素が XML で表現されるため、コードが比較的冗長になり、保守が困難になります。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Also, the heavy reliance on recursion for flow control can result in code that is hard to read.</source>
          <target state="translated">また、フロー制御のために再帰に大きく依存しているため、コードが読みにくくなることがあります。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For more information about XSLT, see <bpt id="p1">[</bpt>XSLT Transformations<ept id="p1">](http://msdn.microsoft.com/library/202f8820-224c-494f-b61e-cd127eac6e03)</ept>.</source>
          <target state="translated">XSLT の詳細については、次を参照してください。 <bpt id="p1">[</bpt>XSLT 変換<ept id="p1">](http://msdn.microsoft.com/library/202f8820-224c-494f-b61e-cd127eac6e03)</ept>します。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>However, XSLT has proved the value of using a pure functional approach for transforming XML from one shape to another.</source>
          <target state="translated">ただし、XML の形式を変換する場合に純粋関数型の方法を使用する意味は、XSLT によって証明されます。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Pure functional programming with LINQ to XML is similar in many ways to XSLT.</source>
          <target state="translated">LINQ to XML による純粋関数型プログラミングは多くの点で XSLT に似ていますが、</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>However, the programming constructs introduced by LINQ to XML and Visual Basic allow you to write pure functional transformations that are more readable and maintainable than XSLT.</source>
          <target state="translated">ただし、LINQ to XML と Visual Basic によって導入されるプログラミング構成要素では、読みやすくなり、実装する XSLT よりもを純粋関数型変換を記述できます。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Advantages of Pure Functions</source>
          <target state="translated">純粋関数の利点</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The primary reason to implement functional transformations as pure functions is that pure functions are composable: that is, self-contained and stateless.</source>
          <target state="translated">関数型変換を純粋関数として実装する最大の理由は、純粋関数が構成可能であること (自己完結していて、ステートレスなこと) です。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>These characteristics bring a number of benefits, including the following:</source>
          <target state="translated">これらの特性は、以下に示すようなさまざまな利点をもたらします。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Increased readability and maintainability.</source>
          <target state="translated">読みやすさが向上し、保守が容易になる。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>This is because each function is designed to accomplish a specific task given its arguments.</source>
          <target state="translated">これは、それぞれの関数が、引数を渡されると特定のタスクを実行するように作られていて、</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The function does not rely on any external state.</source>
          <target state="translated">外部の状態に依存しないためです。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Easier reiterative development.</source>
          <target state="translated">反復開発が容易になる。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Because the code is easier to refactor, changes to design are often easier to implement.</source>
          <target state="translated">コードのリファクタリングが容易になるため、多くの場合、設計変更を実装しやすくなります。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>For example, suppose you write a complicated transformation, and then realize that some code is repeated several times in the transformation.</source>
          <target state="translated">たとえば、複雑な変換を記述していて、何度も繰り返されているコードがあることに気付いた場合、</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>If you refactor through a pure method, you can call your pure method at will without worrying about side effects.</source>
          <target state="translated">純粋メソッドによるリファクタリングでは、副作用を考慮せずにその純粋メソッドを自由に呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Easier testing and debugging.</source>
          <target state="translated">テストやデバッグが容易になる。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Because pure functions can more easily be tested in isolation, you can write test code that calls the pure function with typical values, valid edge cases, and invalid edge cases.</source>
          <target state="translated">純粋関数は単独でのテストが容易なため、典型的な値、有効なエッジ ケース、および無効なエッジ ケースを使用して純粋関数を呼び出すテスト コードを作成できます。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Transitioning for OOP Developers</source>
          <target state="translated">OOP 開発者向けの移行</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>In traditional object-oriented programming (OOP), most developers are accustomed to programming in the imperative/procedural style.</source>
          <target state="translated">従来のオブジェクト指向プログラミング (OOP) では、ほとんどの開発者が命令型/手続き型スタイルのプログラミングに慣れています。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>To switch to developing in a pure functional style, they have to make a transition in their thinking and their approach to development.</source>
          <target state="translated">純粋関数型スタイルの開発に移行するには、考え方を切り替えて、開発に適用する方法を変える必要があります。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>To solve problems, OOP developers design class hierarchies, focus on proper encapsulation, and think in terms of class contracts.</source>
          <target state="translated">問題を解決する際、OOP 開発者は、クラス階層を設計し、適切なカプセル化に焦点を絞り、クラス コントラクトの観点から考えます。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The behavior and state of object types are paramount, and language features, such as classes, interfaces, inheritance, and polymorphism, are provided to address these concerns.</source>
          <target state="translated">何より重要なのはオブジェクト型の動作と状態であり、それに対処するために、クラス、インターフェイス、継承、ポリモーフィズムなどの言語機能が用意されています。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>In contrast, functional programming approaches computational problems as an exercise in the evaluation of pure functional transformations of data collections.</source>
          <target state="translated">一方、関数型プログラミングでは、計算の問題を、データ コレクションの純粋関数型変換の&amp;1; つの課題として捉えます。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Functional programming avoids state and mutable data, and instead emphasizes the application of functions.</source>
          <target state="translated">関数型プログラミングでは、状態や変化するデータを避け、関数の適用を重視します。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Fortunately, Visual Basic doesn't require the full leap to functional programming, because it supports both imperative and functional programming approaches.</source>
          <target state="translated">さいわい、Visual Basic では、命令型と関数の両方のプログラミング方法をサポートするために、関数型プログラミングに完全に移行が必要としません。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>A developer can choose which approach is most appropriate for a particular scenario.</source>
          <target state="translated">開発者は、個々のシナリオに適した方法を選択できます。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>In fact, programs often combine both approaches.</source>
          <target state="translated">実際、プログラムで両方の方法が組み合わされている場合もよくあります。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">関連項目</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Introduction to Pure Functional Transformations (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/introduction-to-pure-functional-transformations.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>純粋関数型変換 (Visual Basic) の概要<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/introduction-to-pure-functional-transformations.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>XSLT Transformations<ept id="p1">](http://msdn.microsoft.com/library/202f8820-224c-494f-b61e-cd127eac6e03)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>XSLT 変換<ept id="p1">](http://msdn.microsoft.com/library/202f8820-224c-494f-b61e-cd127eac6e03)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Refactoring Into Pure Functions (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/refactoring-into-pure-functions.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>純粋関数 (Visual Basic) へのリファクタリング<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/refactoring-into-pure-functions.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>