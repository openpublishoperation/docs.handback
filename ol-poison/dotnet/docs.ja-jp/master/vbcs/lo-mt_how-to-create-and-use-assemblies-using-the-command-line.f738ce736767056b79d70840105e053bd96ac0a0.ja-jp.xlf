<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">363bca806736e5540165ea96e9b4fe60d0968098</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\assemblies-gac\how-to-create-and-use-assemblies-using-the-command-line.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f254e4f4d0fa86f42269bd382f7e1238da7c543b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bba6eaa23bc847aad8d31250470f5253e693d443</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Handback file name: lo-mt_how-to-create-and-use-assemblies-using-the-command-line.f738ce736767056b79d70840105e053bd96ac0a0.ja-jp is different with handoff file name: how-to-create-and-use-assemblies-using-the-command-line.f738ce736767056b79d70840105e053bd96ac0a0.ja-jp.</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Create and Use Assemblies Using the Command Line (Visual Basic) | Microsoft Docs</source>
          <target state="translated">方法: を作成し、コマンドライン (Visual Basic) を使用してアセンブリを使用する |Microsoft ドキュメント</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Create and Use Assemblies Using the Command Line (Visual Basic)</source>
          <target state="translated">方法: を作成し、コマンドライン (Visual Basic) を使用してアセンブリを使用します。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>An assembly, or a dynamic linking library (DLL), is linked to your program at run time.</source>
          <target state="translated">アセンブリ、またはダイナミック リンク ライブラリ (DLL) は、実行時に、プログラムにリンクされます。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>To demonstrate building and using a DLL, consider the following scenario:</source>
          <target state="translated">ビルドと DLL の使用例として、次のシナリオを考慮してください。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MathLibrary.DLL`</ph>: The library file that contains the methods to be called at run time.</source>
          <target state="translated"><ph id="ph1">`MathLibrary.DLL`</ph>: 実行時に呼び出されるメソッドを含むライブラリ ファイル。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>In this example, the DLL contains two methods, <ph id="ph1">`Add`</ph> and <ph id="ph2">`Multiply`</ph>.</source>
          <target state="translated">この例では、DLL は、2 つのメソッドを含まれています。<ph id="ph1">`Add`</ph>と<ph id="ph2">`Multiply`</ph>です。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Add`</ph>: The source file that contains the method <ph id="ph2">`Add`</ph>.</source>
          <target state="translated"><ph id="ph1">`Add`</ph>メソッドを含むソース ファイル:<ph id="ph2">`Add`</ph>です。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>It returns the sum of its parameters.</source>
          <target state="translated">そのパラメーターの合計を返します。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The class <ph id="ph1">`AddClass`</ph> that contains the method <ph id="ph2">`Add`</ph> is a member of the namespace <ph id="ph3">`UtilityMethods`</ph>.</source>
          <target state="translated">クラス<ph id="ph1">`AddClass`</ph>メソッドが含まれている<ph id="ph2">`Add`</ph>名前空間のメンバーである<ph id="ph3">`UtilityMethods`</ph>です。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Mult`</ph>: The source code that contains the method <ph id="ph2">`Multiply`</ph>.</source>
          <target state="translated"><ph id="ph1">`Mult`</ph>メソッドを含むソース コード:<ph id="ph2">`Multiply`</ph>です。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>It returns the product of its parameters.</source>
          <target state="translated">これは、そのパラメーターの積を返します。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The class <ph id="ph1">`MultiplyClass`</ph> that contains the method <ph id="ph2">`Multiply`</ph> is also a member of the namespace <ph id="ph3">`UtilityMethods`</ph>.</source>
          <target state="translated">クラス<ph id="ph1">`MultiplyClass`</ph>メソッドが含まれている<ph id="ph2">`Multiply`</ph>名前空間のメンバーである<ph id="ph3">`UtilityMethods`</ph>です。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TestCode`</ph>: The file that contains the <ph id="ph2">`Main`</ph> method.</source>
          <target state="translated"><ph id="ph1">`TestCode`</ph>: 格納しているファイル、<ph id="ph2">`Main`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>It uses the methods in the DLL file to calculate the sum and the product of the run-time arguments.</source>
          <target state="translated">DLL ファイル内の合計と実行時引数の積を計算するのにメソッドを使用します。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">例</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This file contains the algorithm that uses the DLL methods, <ph id="ph1">`Add`</ph> and <ph id="ph2">`Multiply`</ph>.</source>
          <target state="translated">このファイルには、DLL のメソッドを使用するアルゴリズムが含まれている<ph id="ph1">`Add`</ph>と<ph id="ph2">`Multiply`</ph>です。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>It starts with parsing the arguments entered from the command line, <ph id="ph1">`num1`</ph> and <ph id="ph2">`num2`</ph>.</source>
          <target state="translated">コマンド プロンプトから入力した引数の解析で始まる<ph id="ph1">`num1`</ph>と<ph id="ph2">`num2`</ph>です。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Then it calculates the sum by using the <ph id="ph1">`Add`</ph> method on the <ph id="ph2">`AddClass`</ph> class, and the product by using the <ph id="ph3">`Multiply`</ph> method on the <ph id="ph4">`MultiplyClass`</ph> class.</source>
          <target state="translated">使用して合計を計算し、<ph id="ph1">`Add`</ph>メソッドを<ph id="ph2">`AddClass`</ph>クラス、および製品を使用して、<ph id="ph3">`Multiply`</ph>メソッドを<ph id="ph4">`MultiplyClass`</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Notice that the  <ph id="ph1">`Imports`</ph> statement at the beginning of the file enables you to use the unqualified class names to reference the DLL methods at compile time, as follows:</source>
          <target state="translated">注意して、<ph id="ph1">`Imports`</ph>ファイルの先頭にあるステートメントでは、次のように、コンパイル時に DLL のメソッドを参照する非修飾クラス名を使用することができます。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Otherwise, you have to use the fully qualified names, as follows:</source>
          <target state="translated">それ以外の場合、次のように完全修飾名を使用しなければなりません。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Execution</source>
          <target state="translated">実行</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>To run the program, enter the name of the EXE file, followed by two numbers, as follows:</source>
          <target state="translated">プログラムを実行するには、次のように&amp;2; つの数値の後に、EXE ファイルの名前を入力します。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Compiling the Code</source>
          <target state="translated">コードのコンパイル</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>To build the file <ph id="ph1">`MathLibrary.DLL`</ph>, compile the two files <ph id="ph2">`Add`</ph> and <ph id="ph3">`Mult`</ph> by using the following command line.</source>
          <target state="translated">ファイルをビルドする<ph id="ph1">`MathLibrary.DLL`</ph>、2 つのファイルをコンパイル<ph id="ph2">`Add`</ph>と<ph id="ph3">`Mult`</ph>次のコマンドラインを使用しています。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>/target (Visual Basic)<ept id="p1">](../../../../visual-basic/reference/command-line-compiler/target.md)</ept> compiler option tells the compiler to output a DLL instead of an EXE file.</source>
          <target state="translated"><bpt id="p1">[</bpt>/Target (Visual Basic)<ept id="p1">](../../../../visual-basic/reference/command-line-compiler/target.md)</ept>コンパイラ オプションを指定すると、EXE ファイルではなく、DLL を出力します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>/out (Visual Basic)<ept id="p1">](../../../../visual-basic/reference/command-line-compiler/out.md)</ept> compiler option followed by a file name is used to specify the DLL file name.</source>
          <target state="translated"><bpt id="p1">[</bpt>/Out (Visual Basic)<ept id="p1">](../../../../visual-basic/reference/command-line-compiler/out.md)</ept> DLL のファイル名を指定するファイル名を続けてコンパイラ オプションを使用します。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Otherwise, the compiler uses the first file (<ph id="ph1">`Add.vb`</ph>) as the name of the DLL.</source>
          <target state="translated">それ以外の場合、コンパイラが最初のファイルを使用して (<ph id="ph1">`Add.vb`</ph>) として、DLL の名前。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>To build the executable file, <ph id="ph1">`TestCode.exe`</ph>, use the following command line:</source>
          <target state="translated">実行可能ファイルをビルドする<ph id="ph1">`TestCode.exe`</ph>、次のコマンドラインを使用します。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>/out<ept id="p1">**</ept> compiler option tells the compiler to output an EXE file and specifies the name of the output file (<ph id="ph1">`TestCode.exe`</ph>).</source>
          <target state="translated"><bpt id="p1">**</bpt>/Out<ept id="p1">**</ept>コンパイラ オプションは、EXE ファイルを出力するようにコンパイラに指示し、出力ファイルの名前を指定 (<ph id="ph1">`TestCode.exe`</ph>)。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This compiler option is optional.</source>
          <target state="translated">このコンパイラ オプションは省略できます。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>/reference (Visual Basic)<ept id="p1">](../../../../visual-basic/reference/command-line-compiler/reference.md)</ept> compiler option specifies the DLL file or files that this program uses.</source>
          <target state="translated"><bpt id="p1">[</bpt>/Reference (Visual Basic)<ept id="p1">](../../../../visual-basic/reference/command-line-compiler/reference.md)</ept>コンパイラ オプションは、DLL ファイルをこのプログラムを使用してファイルを指定します。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For more information about building from the command line, see  and <bpt id="p1">[</bpt>Building from the Command Line<ept id="p1">](../../../../visual-basic/reference/command-line-compiler/building-from-the-command-line.md)</ept>.</source>
          <target state="translated">コマンドラインからのビルドの詳細については、次を参照してください。 と<bpt id="p1">[</bpt>コマンドラインからのビルド<ept id="p1">](../../../../visual-basic/reference/command-line-compiler/building-from-the-command-line.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">関連項目</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Programming Concepts<ept id="p1">](../../../../visual-basic/programming-guide/concepts/index.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>プログラミングの概念<ept id="p1">](../../../../visual-basic/programming-guide/concepts/index.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Assemblies and the Global Assembly Cache (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/assemblies-gac/index.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>アセンブリとグローバル アセンブリ キャッシュ (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/assemblies-gac/index.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Creating a Class to Hold DLL Functions<ept id="p1">](http://msdn.microsoft.com/library/e08e4c34-0223-45f7-aa55-a3d8dd979b0f)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>DLL 関数を保持するクラスを作成します。<ept id="p1">](http://msdn.microsoft.com/library/e08e4c34-0223-45f7-aa55-a3d8dd979b0f)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>