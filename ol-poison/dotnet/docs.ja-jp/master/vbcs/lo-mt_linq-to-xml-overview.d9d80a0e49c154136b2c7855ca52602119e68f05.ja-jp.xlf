<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05d756bc5cd7655a5220c3564d120f90a59ce901</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\linq\linq-to-xml-overview.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">46b53c667f786d534ff986a9a533ff1ade74d1da</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ec4f1729806f297ba47eeaf1883149fc695b1692</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Handback file name: lo-mt_linq-to-xml-overview.d9d80a0e49c154136b2c7855ca52602119e68f05.ja-jp is different with handoff file name: linq-to-xml-overview.d9d80a0e49c154136b2c7855ca52602119e68f05.ja-jp.</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>LINQ to XML Overview (Visual Basic) | Microsoft Docs</source>
          <target state="translated">LINQ to XML の概要 (Visual Basic) |Microsoft ドキュメント</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>LINQ to XML Overview (Visual Basic)</source>
          <target state="translated">LINQ to XML の概要 (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>XML has been widely adopted as a way to format data in many contexts.</source>
          <target state="translated">XML は、多くのコンテキストでデータを書式設定する方法として広く採用されてきました。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For example, you can find XML on the Web, in configuration files, in Microsoft Office Word files, and in databases.</source>
          <target state="translated">たとえば、Web、構成ファイル、Microsoft Office Word ファイル、データベースで XML が使用されています。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> is an up-to-date, redesigned approach to programming with XML.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> は、XML によるプログラミングのために再設計された最新の方法です。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>It provides the in-memory document modification capabilities of the Document Object Model (DOM), and supports <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> query expressions.</source>
          <target state="translated">ドキュメント オブジェクト モデル (DOM) のメモリ内ドキュメント変更機能を備え、<ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> クエリ式をサポートします。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Although these query expressions are syntactically different from XPath, they provide similar functionality.</source>
          <target state="translated">このクエリ式は、XPath と構文は異なりますが、機能が似ています。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>LINQ to XML Developers</source>
          <target state="translated">LINQ to XML の開発者</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> targets a variety of developers.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> は、さまざまな開発者を対象としています。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For an average developer who just wants to get something done, <ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> makes XML easier by providing a query experience that is similar to SQL.</source>
          <target state="translated">何らかの処理を行うだけの平均的な開発者にとっては、<ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> によって SQL と同じようにクエリを作成できるので、XML の操作がより簡単になります。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>With just a bit of study, programmers can learn to write succinct and powerful queries in their programming language of choice.</source>
          <target state="translated">プログラマは、短時間の学習で簡潔かつ強力なクエリを、選択したプログラミング言語で記述できるようになります。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Professional developers can use <ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> to greatly increase their productivity.</source>
          <target state="translated">熟練した開発者は、<ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> を使用することで生産性を大きく高めることができます。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>With <ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph>, they can write less code that is more expressive, more compact, and more powerful.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> を使用すると、より少ないコードで、表現性と簡潔性に優れた強力なコードを記述できます。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>They can use query expressions from multiple data domains at the same time.</source>
          <target state="translated">また、同時に複数のデータ ドメインからクエリ式を使用できます。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>What Is LINQ to XML?</source>
          <target state="translated">LINQ to XML とは</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> is a LINQ-enabled, in-memory XML programming interface that enables you to work with XML from within the <ph id="ph2">[!INCLUDE[dnprdnshort](../../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph> programming languages.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> は、<ph id="ph2">[!INCLUDE[dnprdnshort](../../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph> プログラミング言語から XML を操作できるようにする、LINQ に対応したメモリ内 XML プログラミング インターフェイスです。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> is like the Document Object Model (DOM) in that it brings the XML document into memory.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph>XML ドキュメントをメモリに読み込むという点では、ドキュメント オブジェクト モデル (DOM) のようなです。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You can query and modify the document, and after you modify it you can save it to a file or serialize it and send it over the Internet.</source>
          <target state="translated">ドキュメントに対するクエリや変更を行うことができ、変更したドキュメントをファイルに保存したり、シリアル化してインターネット経由で送信したりできます。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>However, <ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> differs from DOM: It provides a new object model that is lighter weight and easier to work with, and that takes advantage of language features in Visual Basic.</source>
          <target state="translated">ただし、 <ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> DOM と異なります: 軽量である新しいオブジェクト モデルを提供し、容易に扱う、利用している言語機能の Visual Basic でします。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The most important advantage of <ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> is its integration with <ph id="ph2">[!INCLUDE[vbteclinqext](../../../../csharp/getting-started/includes/vbteclinqext_md.md)]</ph>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> の最も重要な利点は、<ph id="ph2">[!INCLUDE[vbteclinqext](../../../../csharp/getting-started/includes/vbteclinqext_md.md)]</ph> と統合されていることです。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This integration enables you to write queries on the in-memory XML document to retrieve collections of elements and attributes.</source>
          <target state="translated">この統合により、メモリ内の XML ドキュメントに対するクエリを記述して、要素および属性のコレクションを取得できます。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The query capability of <ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> is comparable in functionality (although not in syntax) to XPath and XQuery.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> のクエリ機能は、構文は異なりますが、XPath および XQuery と機能面で互換性があります。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The integration of <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> in Visual Basic provides stronger typing, compile-time checking, and improved debugger support.</source>
          <target state="translated">統合<ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph>Visual Basic より強力な型指定とコンパイル時チェック、およびデバッガー サポートの強化を提供します。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Another advantage of <ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> is the ability to use query results as parameters to &lt;xref:System.Xml.Linq.XElement&gt; and &lt;xref:System.Xml.Linq.XAttribute&gt; object constructors enables a powerful approach to creating XML trees.</source>
          <target state="translated">別の利点<ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph>へのパラメーターとしてクエリ結果を使用する機能は、&lt;xref:System.Xml.Linq.XElement&gt;と&lt;xref:System.Xml.Linq.XAttribute&gt;オブジェクト コンス トラクターにより、XML ツリーを作成するための強力な方法です&lt;/xref:System.Xml.Linq.XAttribute&gt;&lt;/xref:System.Xml.Linq.XElement&gt;。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This approach, called <bpt id="p1">*</bpt>functional construction<ept id="p1">*</ept>, enables developers to easily transform XML trees from one shape to another.</source>
          <target state="translated">呼ばれるこのアプローチ<bpt id="p1">*</bpt>関数型構築<ept id="p1">*</ept>の形式で XML ツリーを簡単に変換することができます。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For example, you might have a typical XML purchase order as described in <bpt id="p1">[</bpt>Sample XML File: Typical Purchase Order (LINQ to XML)<ept id="p1">](http://msdn.microsoft.com/library/0606c09f-6e43-4f8d-95c8-e8e2e08d2348)</ept>.</source>
          <target state="translated">たとえば、注文書」の説明に従って、典型的な XML がある<bpt id="p1">[</bpt>サンプル XML ファイル: 一般的な購買発注書 (LINQ to XML)<ept id="p1">](http://msdn.microsoft.com/library/0606c09f-6e43-4f8d-95c8-e8e2e08d2348)</ept>します。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>By using <ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph>, you could run the following query to obtain the part number attribute value for every item element in the purchase order:</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> を使用することで、次のクエリを実行して購買発注書のすべての品目要素の部品番号属性を取得できます。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>As another example, you might want a list, sorted by part number, of the items with a value greater than $100.</source>
          <target state="translated">もう&amp;1; つの例として、金額が $100 を超える品目を部品番号順に並べた一覧が必要であるとします。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>To obtain this information, you could run the following query:</source>
          <target state="translated">この情報を取得するには、次のクエリを実行します。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In addition to these <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> capabilities, <ph id="ph2">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> provides an improved XML programming interface.</source>
          <target state="translated">これらに加えて<ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph>機能、 <ph id="ph2">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> XML プログラミング インターフェイスを機能強化を提供します。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Using <ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph>, you can:</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> を使用すると、次のことを実行できます。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Load XML from files or streams.</source>
          <target state="translated">ファイルまたはストリームからの XML の読み込み</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Serialize XML to files or streams.</source>
          <target state="translated">ファイルまたはストリームへの XML のシリアル化</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Create XML from scratch by using functional construction.</source>
          <target state="translated">関数型構築を使用した XML の新規作成</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Query XML using XPath-like axes.</source>
          <target state="translated">XPath に類似した軸を使用した XML に対するクエリの実行</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Manipulate the in-memory XML tree by using methods such as &lt;xref:System.Xml.Linq.XContainer.Add%2A&gt;, &lt;xref:System.Xml.Linq.XNode.Remove%2A&gt;, &lt;xref:System.Xml.Linq.XNode.ReplaceWith%2A&gt;, and &lt;xref:System.Xml.Linq.XElement.SetValue%2A&gt;.</source>
          <target state="translated">などのメソッドを使用して、メモリ内の XML ツリーを操作&lt;xref:System.Xml.Linq.XContainer.Add%2A&gt;、 &lt;xref:System.Xml.Linq.XNode.Remove%2A&gt;、 &lt;xref:System.Xml.Linq.XNode.ReplaceWith%2A&gt;、 &lt;xref:System.Xml.Linq.XElement.SetValue%2A&gt;.&lt;/xref:System.Xml.Linq.XElement.SetValue%2A&gt; &lt;/xref:System.Xml.Linq.XNode.ReplaceWith%2A&gt; &lt;/xref:System.Xml.Linq.XNode.Remove%2A&gt; &lt;/xref:System.Xml.Linq.XContainer.Add%2A&gt;</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Validate XML trees using XSD.</source>
          <target state="translated">XSD を使用した XML ツリーの検証</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Use a combination of these features to transform XML trees from one shape into another.</source>
          <target state="translated">上記の機能を組み合わせて使用した XML ツリーの構造の変換</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Creating XML Trees</source>
          <target state="translated">XML ツリーの作成</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>IOne of the most significant advantages of programming with <ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> is that it is easy to create XML trees.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> でのプログラミングで最も重要な利点の&amp;1; つは、XML ツリーを簡単に作成できるという点です。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For example, to create a small XML tree, you can write  code as follows:</source>
          <target state="translated">たとえば、小さな XML ツリーを作成するにすることができますように記述コード。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> compiler translates XML literals into <ph id="ph2">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> method calls.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>コンパイラに XML リテラルを変換する<ph id="ph2">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph>メソッドの呼び出しです。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Creating XML Trees (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/creating-xml-trees.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。 <bpt id="p1">[</bpt>XML ツリーを作成する」(Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/creating-xml-trees.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">関連項目</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Xml.Linq&gt;</source>
          <target state="translated">&lt;xref:System.Xml.Linq&gt;</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Getting Started (LINQ to XML)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/getting-started-linq-to-xml.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>はじめに (LINQ to XML)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/getting-started-linq-to-xml.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Overview of LINQ to XML in Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/language-features/xml/overview-of-linq-to-xml.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Visual Basic における LINQ to XML の概要<ept id="p1">](../../../../visual-basic/programming-guide/language-features/xml/overview-of-linq-to-xml.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>XML<ept id="p1">](../../../../visual-basic/programming-guide/language-features/xml/index.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>XML<ept id="p1">](../../../../visual-basic/programming-guide/language-features/xml/index.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>