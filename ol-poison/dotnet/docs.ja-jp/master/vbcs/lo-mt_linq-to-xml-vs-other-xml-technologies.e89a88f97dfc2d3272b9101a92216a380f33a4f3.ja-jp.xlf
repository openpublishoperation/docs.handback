<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0254788fb9efa018e735a57990144c6b176d30d6</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\linq\linq-to-xml-vs-other-xml-technologies.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7f79b3f5dc88ac7a7c1018b309e2c4bd1a29ea91</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">01e69010dcf9e7fb7c719391c4aaf86203e7ae6c</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Handback file name: lo-mt_linq-to-xml-vs-other-xml-technologies.e89a88f97dfc2d3272b9101a92216a380f33a4f3.ja-jp is different with handoff file name: linq-to-xml-vs-other-xml-technologies.e89a88f97dfc2d3272b9101a92216a380f33a4f3.ja-jp.</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>LINQ to XML vs. Other XML Technologies2 | Microsoft Docs</source>
          <target state="translated">LINQ to XML およびその他の XML Technologies2 |Microsoft ドキュメント</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>LINQ to XML vs. Other XML Technologies</source>
          <target state="translated">LINQ to XML およびその他の XML テクノロジ</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic compares <ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> to the following XML technologies: &lt;xref:System.Xml.XmlReader&gt;, XSLT, MSXML, and XmlLite.</source>
          <target state="translated">このトピックでは比較<ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph>を次の XML テクノロジ: &lt;xref:System.Xml.XmlReader&gt;、XSLT、MSXML、および XmlLite&lt;/xref:System.Xml.XmlReader&gt; 。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This information can help you decide which technology to use.</source>
          <target state="translated">使用するテクノロジを決定するときに、ここで説明する情報を参照してください。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For a comparison of <ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> to the Document Object Model (DOM), see <bpt id="p1">[</bpt>LINQ to XML vs. DOM (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/linq-to-xml-vs-dom.md)</ept>.</source>
          <target state="translated">比較について<ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph>ドキュメント オブジェクト モデル (DOM) を参照してください<bpt id="p1">[</bpt>LINQ to XML およびです。(Visual Basic) の DOM<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/linq-to-xml-vs-dom.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>LINQ to XML vs. XmlReader</source>
          <target state="translated">LINQ to XML およびXmlReader</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Xml.XmlReader&gt; is a fast, forward-only, non-caching parser.</source>
          <target state="translated">&lt;xref:System.Xml.XmlReader&gt;高速、前方参照専用、非キャッシュのパーサーです。&lt;/xref:System.Xml.XmlReader&gt;</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> is implemented on top of &lt;xref:System.Xml.XmlReader&gt;, and they are tightly integrated.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph>上位に実装&lt;xref:System.Xml.XmlReader&gt;と緊密に統合されています&lt;/xref:System.Xml.XmlReader&gt;。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>However, you can also use &lt;xref:System.Xml.XmlReader&gt; by itself.</source>
          <target state="translated">ただしも使用できます&lt;xref:System.Xml.XmlReader&gt;自体&lt;/xref:System.Xml.XmlReader&gt;。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For example, suppose you are building a Web service that will parse hundreds of XML documents per second, and the documents have the same structure, meaning that you only have to write one implementation of the code to parse the XML.</source>
          <target state="translated">たとえば、1 秒間に何百もの XML ドキュメントを解析する Web サービスを構築する際に、これらのドキュメントの構造が同じであるため、XML を解析するために実装するコードの作成が&amp;1; つだけで済む場合は、</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In this case, you would probably want to use &lt;xref:System.Xml.XmlReader&gt; by itself.</source>
          <target state="translated">ここではおそらく使用する&lt;xref:System.Xml.XmlReader&gt;自体&lt;/xref:System.Xml.XmlReader&gt;。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In contrast, if you are building a system that parses many smaller XML documents, and each one is different, you would want to take advantage of the productivity improvements that <ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> provides.</source>
          <target state="translated">これに対し、多数の小さい XML ドキュメントを解析するシステムを構築して、それぞれが異なる場合はする生産性の向上を活用する<ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph>を提供します。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>LINQ to XML vs. XSLT</source>
          <target state="translated">LINQ to XML およびXSLT</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Both <ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> and XSLT provide extensive XML document transformation capabilities.</source>
          <target state="translated">両方とも<ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph>し、XSLT が広範な XML ドキュメント変換機能を提供します。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>XSLT is a rule-based, declarative approach.</source>
          <target state="translated">XSLT は、ルール ベースの宣言型の方法です。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Advanced XSLT programmers write XSLT in a functional programming style that emphasizes a stateless approach.</source>
          <target state="translated">高度な XSLT プログラミングでは、ステートレスな方法が重視される関数型のプログラミング スタイルで XSLT を記述します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Transformations can be written using pure functions that are implemented without side effects.</source>
          <target state="translated">変換は、副作用なしで実装される純粋関数を使用して記述できます。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This rule-based or functional approach is unfamiliar to many developers, and can be difficult and time-consuming to learn.</source>
          <target state="translated">このルール ベース (関数型) の方法に精通している開発者は多くありません。また、修得するのは難しく、相当の学習時間を要する場合があります。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>XSLT can be a very productive system that yields high-performance applications.</source>
          <target state="translated">XSLT は、パフォーマンスの高いアプリケーションを生成する、生産性の高いシステムとして利用できます。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For example, some big Web companies use XSLT as a way to generate HTML from XML that has been pulled from a variety of data stores.</source>
          <target state="translated">たとえば、Web 関連の大企業の中には、さまざまなデータ ソースを基に取得した XML から HTML を生成するための手段として XSLT を使用している企業もあります。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The managed XSLT engine compiles XSLT to CLR code, and performs even better in some scenarios than the native XSLT engine.</source>
          <target state="translated">XSLT を CLR コードにコンパイルするマネージ XSLT エンジンは、一部のシナリオではネイティブ XSLT エンジンより高いパフォーマンスを発揮します。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>However, XSLT does not take advantage of the C# and Visual Basic knowledge that many developers have.</source>
          <target state="translated">ただし、XSLT では、多くの開発者が持っている C# や Visual Basic の知識は活かされません。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>It requires developers to write code in a different and complex programming language.</source>
          <target state="translated">開発者は、別の複雑なプログラミング言語でコードを記述する必要があります。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Using two non-integrated development systems such as C# (or Visual Basic) and XSLT results in software systems that are more difficult to develop and maintain.</source>
          <target state="translated">C# (または Visual Basic) と XSLT など、統合されていない&amp;2; つの開発システムを使用すると、ソフトウェア システムの開発や保守が困難になります。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>After you have mastered <ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> query expressions, <ph id="ph2">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> transformations are a powerful technology that is easy to use.</source>
          <target state="translated">修得後<ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph>クエリ式、<ph id="ph2">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph>変換は、強力なテクノロジでありは簡単に使用します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Basically, you form your XML document by using functional construction, pulling in data from various sources, constructing &lt;xref:System.Xml.Linq.XElement&gt; objects dynamically, and assembling the whole into a new XML tree.</source>
          <target state="translated">基本的には、XML ドキュメントを作成、関数型構築を使用してデータから取り込んで、さまざまなソースを構築する&lt;xref:System.Xml.Linq.XElement&gt;オブジェクトを動的にし、全体を新しい XML ツリーにまとめています&lt;/xref:System.Xml.Linq.XElement&gt;。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The transformation can generate a completely new document.</source>
          <target state="translated">変換では、まったく新しいドキュメントを生成できます。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Constructing transformations in <ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> is relatively easy and intuitive, and the resulting code is readable.</source>
          <target state="translated">変換を構築する<ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph>を比較的簡単かつ直感的で、その結果のコードでは読み取り可能です。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>This reduces development and maintenance costs.</source>
          <target state="translated">このため、開発と保守のコストを削減できます。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> is not intended to replace XSLT.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> は、XSLT に置き換わることを目的としていません。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>XSLT is still the tool of choice for complicated and document-centric XML transformations, especially if the structure of the document is not well defined.</source>
          <target state="translated">複雑なドキュメント中心の XML 変換 (特に、ドキュメントの構造が明確に定義されていない場合) では、引き続き XSLT が最適なツールになります。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>XSLT has the advantage of being a World Wide Web Consortium (W3C) standard.</source>
          <target state="translated">XSLT には、W3C (World Wide Web Consortium) 標準という利点があります。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If you have a requirement that you use only technologies that are standards, XSLT might be more appropriate.</source>
          <target state="translated">標準となっている技術を使用するだけで十分な場合は、XSLT の方が適切といえます。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>XSLT is XML, and therefore can be programmatically manipulated.</source>
          <target state="translated">XSLT は XML であるため、プログラムで操作できます。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>LINQ to XML vs. MSXML</source>
          <target state="translated">LINQ to XML およびMSXML</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>MSXML is the COM-based technology for processing XML that is included with Microsoft Windows.</source>
          <target state="translated">MSXML は、Microsoft Windows に付属する、XML 処理のための COM ベース テクノロジです。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>MSXML provides a native implementation of the DOM with support for XPath and XSLT.</source>
          <target state="translated">MSXML は DOM をネイティブで実装し、XPath と XSLT をサポートしています。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>It also contains the SAX2 non-caching, event-based parser.</source>
          <target state="translated">MSXML には、非キャッシュの SAX2 イベントベース パーサーも含まれています。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>MSXML performs well, is secure by default in most scenarios, and can be accessed in Internet Explorer for performing client-side XML processing in AJAX-style applications.</source>
          <target state="translated">MSXML はパフォーマンスが高く、セキュリティもほとんどのシナリオで既定で確保されます。また、Internet Explorer でアクセスできるため、AJAX スタイルのアプリケーションでクライアント側での XML の処理を実行できます。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>MSXML can be used from any programming language that supports COM, including C++, JavaScript, and <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> 6.0.</source>
          <target state="translated">MSXML は、C++、JavaScript、<ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> 6.0 など、COM をサポートするすべてのプログラミング言語から使用できます。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>MSXML is not recommended for use in managed code based on the common language runtime (CLR).</source>
          <target state="translated">ただし共通言語ランタイム (CLR) に基づくマネージ コードで使用することは推奨されません。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>LINQ to XML vs. XmlLite</source>
          <target state="translated">LINQ to XML およびXmlLite</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>XmlLite is a non-caching, forward only, pull parser.</source>
          <target state="translated">XmlLite は、非キャッシュ、前方参照専用のプル パーサーで、</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Developers primarily use XmlLite with C++.</source>
          <target state="translated">主に C++ で使用されます。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>It is not recommended for developers to use XmlLite with managed code.</source>
          <target state="translated">マネージ コードで使用することは推奨されません。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The main advantage of XmlLite is that it is a lightweight, fast XML parser that is secure in most scenarios.</source>
          <target state="translated">XmlLite の最大の利点は、ほとんどのシナリオで、軽量かつ高速で安全な XML パーサーとして利用できることです。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Its threat surface area is very small.</source>
          <target state="translated">XmlLite は脅威の対象となる要素がほとんどないため、</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>If you have to parse untrusted documents and you want to protect against attacks such as denial of service or exposure of data, XmlLite might be a good option.</source>
          <target state="translated">信頼されていないドキュメントを解析し、サービス拒否攻撃やデータ漏洩攻撃などからの保護が必要な場合は、優れた方法となります。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>XmlLite is not integrated with <ph id="ph1">[!INCLUDE[vbteclinqext](../../../../csharp/getting-started/includes/vbteclinqext_md.md)]</ph>.</source>
          <target state="translated">XmlLite は、<ph id="ph1">[!INCLUDE[vbteclinqext](../../../../csharp/getting-started/includes/vbteclinqext_md.md)]</ph> と統合されていません。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>It does not yield the programmer productivity improvements that are the motivating force behind <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph>.</source>
          <target state="translated">しないプログラマの生産性の向上はもたらさ動機である<ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">関連項目</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Getting Started (LINQ to XML)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/getting-started-linq-to-xml.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>はじめに (LINQ to XML)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/getting-started-linq-to-xml.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>