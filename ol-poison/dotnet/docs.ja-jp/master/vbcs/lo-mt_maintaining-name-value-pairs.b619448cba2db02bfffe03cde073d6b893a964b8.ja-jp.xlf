<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">54db297ecd39e37492dcf8bb4de4f64476662670</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\linq\maintaining-name-value-pairs.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2be8a303f931c0693f267499c3148b40459cf871</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">503dca79697845b6a014bd56d041b085ca701cee</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Handback file name: lo-mt_maintaining-name-value-pairs.b619448cba2db02bfffe03cde073d6b893a964b8.ja-jp is different with handoff file name: maintaining-name-value-pairs.b619448cba2db02bfffe03cde073d6b893a964b8.ja-jp.</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Maintaining Name-Value Pairs (Visual Basic) | Microsoft Docs</source>
          <target state="translated">名前と値のペア (Visual Basic) の保持 |Microsoft ドキュメント</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Maintaining Name/Value Pairs (Visual Basic)</source>
          <target state="translated">(Visual Basic) の名前/値ペアの保持</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Many applications have to maintain information that is best kept as name/value pairs.</source>
          <target state="translated">多くのアプリケーションでは、情報を名前と値のペアとして保持するのが最適な場合があります。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This information might be configuration information or global settings.</source>
          <target state="translated">このような情報には、構成情報やグローバル設定などがあります。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> contains some methods that make it easy to keep a set of name/value pairs.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> には、名前と値のペアのセットを簡単に保持できるようにするメソッドがあります。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You can either keep the information as attributes or as a set of child elements.</source>
          <target state="translated">情報を属性として保持することも、子要素のセットとして保持することもできます。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>One difference between keeping the information as attributes or as child elements is that attributes have the constraint that there can be only one attribute with a particular name for an element.</source>
          <target state="translated">情報を属性として保持する場合と子要素として保持する場合の違いの&amp;1; つは、要素の特定の名前を持つ属性は&amp;1; つしか存在できないという制約が属性にはあることです。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This limitation does not apply to child elements.</source>
          <target state="translated">この制限は子要素には適用されません。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>SetAttributeValue and SetElementValue</source>
          <target state="translated">SetAttributeValue と SetElementValue</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The two methods that facilitate keeping name/value pairs are &lt;xref:System.Xml.Linq.XElement.SetAttributeValue%2A&gt; and &lt;xref:System.Xml.Linq.XElement.SetElementValue%2A&gt;.</source>
          <target state="translated">名前と値の保持を容易にする&amp;2; つのメソッドのペアは&lt;xref:System.Xml.Linq.XElement.SetAttributeValue%2A&gt;&lt;xref:System.Xml.Linq.XElement.SetElementValue%2A&gt;.&lt;/xref:System.Xml.Linq.XElement.SetElementValue%2A&gt; &lt;/xref:System.Xml.Linq.XElement.SetAttributeValue%2A&gt;</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>These two methods have similar semantics.</source>
          <target state="translated">これらの&amp;2; つのメソッドは、よく似たセマンティクスを持っています。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Xml.Linq.XElement.SetAttributeValue%2A&gt; can add, modify, or remove attributes of an element.</source>
          <target state="translated">&lt;xref:System.Xml.Linq.XElement.SetAttributeValue%2A&gt;できますを追加、変更、または、要素の属性を削除します。&lt;/xref:System.Xml.Linq.XElement.SetAttributeValue%2A&gt;</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If you call &lt;xref:System.Xml.Linq.XElement.SetAttributeValue%2A&gt; with a name of an attribute that does not exist, the method creates a new attribute and adds it to the specified element.</source>
          <target state="translated">呼び出した場合&lt;xref:System.Xml.Linq.XElement.SetAttributeValue%2A&gt;が存在しない属性の名前を持つメソッドが新しい属性を作成し、指定された要素に追加します&lt;/xref:System.Xml.Linq.XElement.SetAttributeValue%2A&gt;。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If you call &lt;xref:System.Xml.Linq.XElement.SetAttributeValue%2A&gt; with a name of an existing attribute and with some specified content, the contents of the attribute are replaced with the specified content.</source>
          <target state="translated">呼び出した場合&lt;xref:System.Xml.Linq.XElement.SetAttributeValue%2A&gt;コンテンツの既存の属性の名前、および指定の属性のコンテンツが指定された内容で置き換えられます&lt;/xref:System.Xml.Linq.XElement.SetAttributeValue%2A&gt;。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If you call &lt;xref:System.Xml.Linq.XElement.SetAttributeValue%2A&gt; with a name of an existing attribute, and specify null for the content, the attribute is removed from its parent.</source>
          <target state="translated">呼び出した場合&lt;xref:System.Xml.Linq.XElement.SetAttributeValue%2A&gt;、既存の名前を持つ属性があり、指定されたコンテンツの null 属性は親から削除するが&lt;/xref:System.Xml.Linq.XElement.SetAttributeValue%2A&gt;。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Xml.Linq.XElement.SetElementValue%2A&gt; can add, modify, or remove child elements of an element.</source>
          <target state="translated">&lt;xref:System.Xml.Linq.XElement.SetElementValue%2A&gt;できる追加、変更、または要素の子要素を削除します。&lt;/xref:System.Xml.Linq.XElement.SetElementValue%2A&gt;</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If you call &lt;xref:System.Xml.Linq.XElement.SetElementValue%2A&gt; with a name of a child element that does not exist, the method creates a new element and adds it to the specified element.</source>
          <target state="translated">呼び出した場合&lt;xref:System.Xml.Linq.XElement.SetElementValue%2A&gt;が存在しない子要素の名前を持つメソッドが新しい要素を作成し、指定された要素に追加します&lt;/xref:System.Xml.Linq.XElement.SetElementValue%2A&gt;。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If you call &lt;xref:System.Xml.Linq.XElement.SetElementValue%2A&gt; with a name of an existing element and with some specified content, the contents of the element are replaced with the specified content.</source>
          <target state="translated">呼び出した場合&lt;xref:System.Xml.Linq.XElement.SetElementValue%2A&gt;コンテンツの既存の要素の名前、および指定の要素のコンテンツが指定された内容で置き換えられます&lt;/xref:System.Xml.Linq.XElement.SetElementValue%2A&gt;。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If you call &lt;xref:System.Xml.Linq.XElement.SetElementValue%2A&gt; with a name of an existing element, and specify null for the content, the element is removed from its parent.</source>
          <target state="translated">呼び出した場合&lt;xref:System.Xml.Linq.XElement.SetElementValue%2A&gt;既存の要素の名前を持つ null コンテンツを指定して、要素が親から削除します&lt;/xref:System.Xml.Linq.XElement.SetElementValue%2A&gt;。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">例</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The following example creates an element with no attributes.</source>
          <target state="translated">次の例では、属性を持たない要素を作成します。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>It then uses the &lt;xref:System.Xml.Linq.XElement.SetAttributeValue%2A&gt; method to create and maintain a list of name/value pairs.</source>
          <target state="translated">次を使用して、&lt;xref:System.Xml.Linq.XElement.SetAttributeValue%2A&gt;メソッドを作成し、名前/値ペアのリストを維持します&lt;/xref:System.Xml.Linq.XElement.SetAttributeValue%2A&gt;。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">例</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The following example creates an element with no child elements.</source>
          <target state="translated">次の例では、子要素を持たない要素を作成します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>It then uses the &lt;xref:System.Xml.Linq.XElement.SetElementValue%2A&gt; method to create and maintain a list of name/value pairs.</source>
          <target state="translated">次を使用して、&lt;xref:System.Xml.Linq.XElement.SetElementValue%2A&gt;メソッドを作成し、名前/値ペアのリストを維持します&lt;/xref:System.Xml.Linq.XElement.SetElementValue%2A&gt;。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">関連項目</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Xml.Linq.XElement.SetAttributeValue%2A&gt;</source>
          <target state="translated">&lt;xref:System.Xml.Linq.XElement.SetAttributeValue%2A&gt;&lt;/xref:System.Xml.Linq.XElement.SetAttributeValue%2A&gt;</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Xml.Linq.XElement.SetElementValue%2A&gt;</source>
          <target state="translated">&lt;xref:System.Xml.Linq.XElement.SetElementValue%2A&gt;&lt;/xref:System.Xml.Linq.XElement.SetElementValue%2A&gt;</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Modifying XML Trees (LINQ to XML) (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/modifying-xml-trees-linq-to-xml.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>XML ツリー (LINQ to XML) の変更 (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/modifying-xml-trees-linq-to-xml.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>