<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9cdf1864fe955a082936596821ee84c831b86444</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\data-types\nullable-value-types.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">026e294bdd6f97d8d365f4e81101898e762943fc</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6fed3ca968601f71b711a462ffa98b9f5f4c2eaa</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Handback file name: lo-mt_nullable-value-types.6d3157154964ee4226832d91a822e8945c3dee8b.ja-jp is different with handoff file name: nullable-value-types.6d3157154964ee4226832d91a822e8945c3dee8b.ja-jp.</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Nullable Value Types (Visual Basic) | Microsoft Docs</source>
          <target state="translated">Null 許容値型 (Visual Basic) |Microsoft ドキュメント</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Nullable Value Types (Visual Basic)</source>
          <target state="translated">null 許容値型 (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Sometimes you work with a value type that does not have a defined value in certain circumstances.</source>
          <target state="translated">特定の状況で 定義済みの値がない値型を操作することがあります。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For example, a field in a database might have to distinguish between having an assigned value that is meaningful and not having an assigned value.</source>
          <target state="translated">たとえば、データベース内のフィールドは、意味のある割り当てられた値を持つと、割り当てられた値がないとを区別する必要があります。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Value types can be extended to take either their normal values or a null value.</source>
          <target state="translated">値型は、通常の値または null 値のいずれかを拡張できます。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Such an extension is called a <bpt id="p1">*</bpt>nullable type<ept id="p1">*</ept>.</source>
          <target state="translated">このような拡張機能と呼ばれる、 <bpt id="p1">*</bpt>null 許容型<ept id="p1">*</ept>します。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Each nullable type is constructed from the generic &lt;xref:System.Nullable%601&gt; structure.</source>
          <target state="translated">各 null 許容型がジェネリックから構築された&lt;xref:System.Nullable%601&gt;構造体&lt;/xref:System.Nullable%601&gt;。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Consider a database that tracks work-related activities.</source>
          <target state="translated">仕事に関連するアクティビティを追跡するデータベースを検討してください。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The following example constructs a nullable <ph id="ph1">`Boolean`</ph> type and declares a variable of that type.</source>
          <target state="translated">次の例は、null 許容型を構築<ph id="ph1">`Boolean`</ph>を入力し、その型の変数を宣言します。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You can write the declaration in three ways:</source>
          <target state="translated">次の&amp;3; つの方法では、宣言を記述できます。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrNullableValue#1<ept id="p2">](../../../../visual-basic/programming-guide/language-features/data-types/codesnippet/VisualBasic/nullable-value-types_1.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrNullableValue&amp;#1;<ept id="p2">](../../../../visual-basic/programming-guide/language-features/data-types/codesnippet/VisualBasic/nullable-value-types_1.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The variable <ph id="ph1">`ridesBusToWork`</ph> can hold a value of <ph id="ph2">`True`</ph>, a value of <ph id="ph3">`False`</ph>, or no value at all.</source>
          <target state="translated">変数<ph id="ph1">`ridesBusToWork`</ph>の値を保持できる<ph id="ph2">`True`</ph>の値<ph id="ph3">`False`</ph>、またはすべてに値がありません。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Its initial default value is no value at all, which in this case could mean that the information has not yet been obtained for this person.</source>
          <target state="translated">初期の既定値値はありません、ここで可能性があることについては、いないまだに対して取得されたこの人。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In contrast, <ph id="ph1">`False`</ph> could mean that the information has been obtained and the person does not ride the bus to work.</source>
          <target state="translated">これに対し、<ph id="ph1">`False`</ph>情報を取得、ユーザーが仕事のバスをオーバーライドしていないことを示します。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You can declare variables and properties with nullable types, and you can declare an array with elements of a nullable type.</source>
          <target state="translated">変数とプロパティを宣言するには null 許容型と null 許容型の要素を持つ配列を宣言することができます。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You can declare procedures with nullable types as parameters, and you can return a nullable type from a <ph id="ph1">`Function`</ph> procedure.</source>
          <target state="translated">プロシージャを宣言するには、パラメーターとして null 許容型およびから null 許容型を返すことができます、<ph id="ph1">`Function`</ph>プロシージャです。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You cannot construct a nullable type on a reference type such as an array, a <ph id="ph1">`String`</ph>, or a class.</source>
          <target state="translated">配列などの参照型で null 許容型を構築することはできません、 <ph id="ph1">`String`</ph>、またはクラスです。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The underlying type must be a value type.</source>
          <target state="translated">基になる型は、値型である必要があります。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Value Types and Reference Types<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>値型と参照型<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Using a Nullable Type Variable</source>
          <target state="translated">Null 許容型の変数を使用します。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The most important members of a nullable type are its &lt;xref:System.Nullable%601.HasValue%2A&gt; and &lt;xref:System.Nullable%601.Value%2A&gt; properties.</source>
          <target state="translated">Null 許容型の最も重要なメンバーは、その&lt;xref:System.Nullable%601.HasValue%2A&gt;と&lt;xref:System.Nullable%601.Value%2A&gt;プロパティ&lt;/xref:System.Nullable%601.Value%2A&gt;&lt;/xref:System.Nullable%601.HasValue%2A&gt;。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For a variable of a nullable type, &lt;xref:System.Nullable%601.HasValue%2A&gt; tells you whether the variable contains a defined value.</source>
          <target state="translated">Null 許容型の変数の&lt;xref:System.Nullable%601.HasValue%2A&gt;変数が定義済みの値を含むかどうかがわかります&lt;/xref:System.Nullable%601.HasValue%2A&gt;。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If &lt;xref:System.Nullable%601.HasValue%2A&gt; is <ph id="ph1">`True`</ph>, you can read the value from &lt;xref:System.Nullable%601.Value%2A&gt;.</source>
          <target state="translated">場合&lt;xref:System.Nullable%601.HasValue%2A&gt;は<ph id="ph1">`True`</ph>、 &lt;xref:System.Nullable%601.Value%2A&gt;.&lt;/xref:System.Nullable%601.Value%2A&gt;から値を読み取ることができます&lt;/xref:System.Nullable%601.HasValue%2A&gt;</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Note that both &lt;xref:System.Nullable%601.HasValue%2A&gt; and &lt;xref:System.Nullable%601.Value%2A&gt; are <ph id="ph1">`ReadOnly`</ph> properties.</source>
          <target state="translated">両方&lt;xref:System.Nullable%601.HasValue%2A&gt;と&lt;xref:System.Nullable%601.Value%2A&gt;は<ph id="ph1">`ReadOnly`</ph>プロパティ&lt;/xref:System.Nullable%601.Value%2A&gt;&lt;/xref:System.Nullable%601.HasValue%2A&gt;。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Default Values</source>
          <target state="translated">既定値</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>When you declare a variable with a nullable type, its &lt;xref:System.Nullable%601.HasValue%2A&gt; property has a default value of <ph id="ph1">`False`</ph>.</source>
          <target state="translated">Null 許容型を持つ変数を宣言するときにその&lt;xref:System.Nullable%601.HasValue%2A&gt;プロパティには、既定値は<ph id="ph1">`False`</ph>&lt;/xref:System.Nullable%601.HasValue%2A&gt;。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This means that by default the variable has no defined value, instead of the default value of its underlying value type.</source>
          <target state="translated">つまり、既定では、変数がない、基になる値型の既定値ではなく、定義済みの値。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In the following example, the variable <ph id="ph1">`numberOfChildren`</ph> initially has no defined value, even though the default value of the <ph id="ph2">`Integer`</ph> type is 0.</source>
          <target state="translated">次の例では、変数<ph id="ph1">`numberOfChildren`</ph>最初に値を持たない値が定義されても、既定の<ph id="ph2">`Integer`</ph>型は 0 です。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrNullableValue#2<ept id="p2">](../../../../visual-basic/programming-guide/language-features/data-types/codesnippet/VisualBasic/nullable-value-types_2.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrNullableValue&amp;#2;<ept id="p2">](../../../../visual-basic/programming-guide/language-features/data-types/codesnippet/VisualBasic/nullable-value-types_2.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>A null value is useful to indicate an undefined or unknown value.</source>
          <target state="translated">Null 値は、未定義または未知の値を指定すると便利です。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`numberOfChildren`</ph> had been declared as <ph id="ph2">`Integer`</ph>, there would be no value that could indicate that the information is not currently available.</source>
          <target state="translated">場合<ph id="ph1">`numberOfChildren`</ph>として宣言されていた<ph id="ph2">`Integer`</ph>がなくなることは、情報が現在使用できないことを示す値。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Storing Values</source>
          <target state="translated">値を格納します。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You store a value in a variable or property of a nullable type in the typical way.</source>
          <target state="translated">一般的な方法で変数または null 許容型のプロパティ値を格納します。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The following example assigns a value to the variable <ph id="ph1">`numberOfChildren`</ph> declared in the previous example.</source>
          <target state="translated">次の例では、その値を変数に代入<ph id="ph1">`numberOfChildren`</ph>前の例で宣言します。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrNullableValue#3<ept id="p2">](../../../../visual-basic/programming-guide/language-features/data-types/codesnippet/VisualBasic/nullable-value-types_3.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrNullableValue&amp;#3;<ept id="p2">](../../../../visual-basic/programming-guide/language-features/data-types/codesnippet/VisualBasic/nullable-value-types_3.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If a variable or property of a nullable type contains a defined value, you can cause it to revert to its initial state of not having a value assigned.</source>
          <target state="translated">変数または null 許容型のプロパティには定義済みの値がある場合、値を割り当てる必要があるの初期状態に戻すことが発生することができます。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You do this by setting the variable or property to <ph id="ph1">`Nothing`</ph>, as the following example shows.</source>
          <target state="translated">変数またはプロパティを設定して、これを行う<ph id="ph1">`Nothing`</ph>次の例を示します。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrNullableValue#4<ept id="p2">](../../../../visual-basic/programming-guide/language-features/data-types/codesnippet/VisualBasic/nullable-value-types_4.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrNullableValue&amp;4;<ept id="p2">](../../../../visual-basic/programming-guide/language-features/data-types/codesnippet/VisualBasic/nullable-value-types_4.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Although you can assign <ph id="ph1">`Nothing`</ph> to a variable of a nullable type, you cannot test it for <ph id="ph2">`Nothing`</ph> by using the equal sign.</source>
          <target state="translated">割り当てることはできます<ph id="ph1">`Nothing`</ph>null 許容型の変数をテストできません<ph id="ph2">`Nothing`</ph>等号 (=) を使用しています。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Comparison that uses the equal sign, <ph id="ph1">`someVar = Nothing`</ph>, always evaluates to <ph id="ph2">`Nothing`</ph>.</source>
          <target state="translated">比較に等号 (=) を使用して<ph id="ph1">`someVar = Nothing`</ph>、常に評価<ph id="ph2">`Nothing`</ph>します。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>You can test the variable's &lt;xref:System.Nullable%601.HasValue%2A&gt; property for <ph id="ph1">`False`</ph>, or test by using the <ph id="ph2">`Is`</ph> or <ph id="ph3">`IsNot`</ph> operator.</source>
          <target state="translated">変数をテストして&lt;xref:System.Nullable%601.HasValue%2A&gt;プロパティを<ph id="ph1">`False`</ph>、またはを使用してテスト、<ph id="ph2">`Is`</ph>または<ph id="ph3">`IsNot`</ph>演算子&lt;/xref:System.Nullable%601.HasValue%2A&gt;。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Retrieving Values</source>
          <target state="translated">値を取得します。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>To retrieve the value of a variable of a nullable type, you should first test its &lt;xref:System.Nullable%601.HasValue%2A&gt; property to confirm that it has a value.</source>
          <target state="translated">Null 許容型の変数の値を取得するには、テストしてください、&lt;xref:System.Nullable%601.HasValue%2A&gt;プロパティに値を使用していることを確認します&lt;/xref:System.Nullable%601.HasValue%2A&gt;。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If you try to read the value when &lt;xref:System.Nullable%601.HasValue%2A&gt; is <ph id="ph1">`False`</ph>, <ph id="ph2">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> throws an &lt;xref:System.InvalidOperationException&gt; exception.</source>
          <target state="translated">値を読み取るしようとする場合と&lt;xref:System.Nullable%601.HasValue%2A&gt;は<ph id="ph1">`False`</ph>、<ph id="ph2">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>スロー、&lt;xref:System.InvalidOperationException&gt;例外&lt;/xref:System.InvalidOperationException&gt;&lt;/xref:System.Nullable%601.HasValue%2A&gt;。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The following example shows the recommended way to read the variable <ph id="ph1">`numberOfChildren`</ph> of the previous examples.</source>
          <target state="translated">次の例では、変数を読み取ることをお勧め<ph id="ph1">`numberOfChildren`</ph>上の例です。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrNullableValue#5<ept id="p2">](../../../../visual-basic/programming-guide/language-features/data-types/codesnippet/VisualBasic/nullable-value-types_5.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrNullableValue&amp;#5;<ept id="p2">](../../../../visual-basic/programming-guide/language-features/data-types/codesnippet/VisualBasic/nullable-value-types_5.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Comparing Nullable Types</source>
          <target state="translated">Null 許容型を比較します。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>When nullable <ph id="ph1">`Boolean`</ph> variables are used in Boolean expressions, the result can be <ph id="ph2">`True`</ph>, <ph id="ph3">`False`</ph>, or <ph id="ph4">`Nothing`</ph>.</source>
          <target state="translated">Null 許容型と<ph id="ph1">`Boolean`</ph>ブール式で変数が使用を定義できます。 <ph id="ph2">`True`</ph>、 <ph id="ph3">`False`</ph>、または<ph id="ph4">`Nothing`</ph>です。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The following is the truth table for <ph id="ph1">`And`</ph> and <ph id="ph2">`Or`</ph>.</source>
          <target state="translated">次の真理値表は、<ph id="ph1">`And`</ph>と<ph id="ph2">`Or`</ph>です。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">`b1`</ph> and <ph id="ph2">`b2`</ph> now have three possible values, there are nine combinations to evaluate.</source>
          <target state="translated"><ph id="ph1">`b1`</ph>と<ph id="ph2">`b2`</ph>これで&amp;3; つの値がある&amp;9; つの組み合わせを評価します。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>b1</source>
          <target state="translated">b1</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>b2</source>
          <target state="translated">b2</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>b1 And b2</source>
          <target state="translated">b1 および b2</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>b1 Or b2</source>
          <target state="translated">b1 または b2</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>When the value of a Boolean variable or expression is <ph id="ph1">`Nothing`</ph>, it is neither <ph id="ph2">`true`</ph> nor <ph id="ph3">`false`</ph>.</source>
          <target state="translated">ブール型の変数または式の値が<ph id="ph1">`Nothing`</ph>はどちらも<ph id="ph2">`true`</ph>も<ph id="ph3">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Consider the following example.</source>
          <target state="translated">例を次に示します。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrNullableValue#6<ept id="p2">](../../../../visual-basic/programming-guide/language-features/data-types/codesnippet/VisualBasic/nullable-value-types_6.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrNullableValue&amp;6;<ept id="p2">](../../../../visual-basic/programming-guide/language-features/data-types/codesnippet/VisualBasic/nullable-value-types_6.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>In this example, <ph id="ph1">`b1 And b2`</ph> evaluates to <ph id="ph2">`Nothing`</ph>.</source>
          <target state="translated">この例では<ph id="ph1">`b1 And b2`</ph>に評価<ph id="ph2">`Nothing`</ph>します。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>As a result, the <ph id="ph1">`Else`</ph> clause is executed in each <ph id="ph2">`If`</ph> statement, and the output is as follows:</source>
          <target state="translated">その結果、<ph id="ph1">`Else`</ph>句が各実行<ph id="ph2">`If`</ph>ステートメント、および、出力を次に示します。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><ph id="ph1"> `AndAlso`</ph> and <ph id="ph2">`OrElse`</ph>, which use short-circuit evaluation, must evaluate their second operands when the first evaluates to <ph id="ph3">`Nothing`</ph>.</source>
          <target state="translated"><ph id="ph1"> `AndAlso`</ph><ph id="ph2">`OrElse`</ph>、1 つ目の評価が、2 番目のオペランドを評価する必要がありますなるショート サーキット評価、<ph id="ph3">`Nothing`</ph>です。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Propagation</source>
          <target state="translated">伝達</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>If one or both of the operands of an arithmetic, comparison, shift, or type operation is nullable, the result of the operation is also nullable.</source>
          <target state="translated">算術演算子、比較、shift キー、または種類の操作のオペランドの一方または両方が null 許容型の場合は、操作の結果も null 値を許容できます。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>If both operands have values that are not <ph id="ph1">`Nothing`</ph>, the operation is performed on the underlying values of the operands, as if neither were a nullable type.</source>
          <target state="translated">両方のオペランドが値ではない<ph id="ph1">`Nothing`</ph>がどちらも場合と同様に、オペランドの基になる値で、操作を実行、null 許容型です。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>In the following example, variables <ph id="ph1">`compare1`</ph> and <ph id="ph2">`sum1`</ph> are implicitly typed.</source>
          <target state="translated">次の例では、変数<ph id="ph1">`compare1`</ph>と<ph id="ph2">`sum1`</ph>は暗黙的に型指定されています。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>If you rest the mouse pointer over them, you will see that the compiler infers nullable types for both of them.</source>
          <target state="translated">上にマウス ポインターを置く場合、コンパイラは、それらの両方に対して null 許容型を推測が表示されます。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrNullableValue#7<ept id="p2">](../../../../visual-basic/programming-guide/language-features/data-types/codesnippet/VisualBasic/nullable-value-types_7.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrNullableValue&amp;#7;<ept id="p2">](../../../../visual-basic/programming-guide/language-features/data-types/codesnippet/VisualBasic/nullable-value-types_7.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>If one or both operands have a value of <ph id="ph1">`Nothing`</ph>, the result will be <ph id="ph2">`Nothing`</ph>.</source>
          <target state="translated">1 つまたは両方のオペランドの値であれば<ph id="ph1">`Nothing`</ph>、結果になります<ph id="ph2">`Nothing`</ph>します。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrNullableValue#8<ept id="p2">](../../../../visual-basic/programming-guide/language-features/data-types/codesnippet/VisualBasic/nullable-value-types_8.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrNullableValue&amp;#8;<ept id="p2">](../../../../visual-basic/programming-guide/language-features/data-types/codesnippet/VisualBasic/nullable-value-types_8.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Using Nullable Types with Data</source>
          <target state="translated">Null 許容型のデータを使用します。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>A database is one of the most important places to use nullable types.</source>
          <target state="translated">データベースは、null 許容型を使用する最も重要な場所の&amp;1; つです。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Not all database objects currently support nullable types, but the designer-generated table adapters do.</source>
          <target state="translated">すべてのデータベース オブジェクトが現在 null 許容型をサポートしますが、テーブルのデザイナーで生成されるアダプターします。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>See "TableAdapter Support for Nullable Types" in <bpt id="p1">[</bpt>TableAdapter Overview<ept id="p1">](https://docs.microsoft.com/visualstudio/data-tools/tableadapter-overview)</ept>.</source>
          <target state="translated">「TableAdapter で null 許容型のサポート」を参照してください<bpt id="p1">[</bpt>TableAdapter の概要<ept id="p1">](https://docs.microsoft.com/visualstudio/data-tools/tableadapter-overview)</ept>します。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">関連項目</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.InvalidOperationException&gt;</source>
          <target state="translated">&lt;xref:System.InvalidOperationException&gt;&lt;/xref:System.InvalidOperationException&gt;</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Nullable%601.HasValue%2A&gt;</source>
          <target state="translated">&lt;xref:System.Nullable%601.HasValue%2A&gt;&lt;/xref:System.Nullable%601.HasValue%2A&gt;</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Using Nullable Types<ept id="p1">](../../../../csharp/programming-guide/nullable-types/using-nullable-types.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Null 許容型の使用<ept id="p1">](../../../../csharp/programming-guide/nullable-types/using-nullable-types.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Data Types<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/index.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>データ型<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/index.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Value Types and Reference Types<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>値型と参照型<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Troubleshooting Data Types<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/troubleshooting-data-types.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>データ型のトラブルシューティング<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/troubleshooting-data-types.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>TableAdapter Overview<ept id="p1">](https://docs.microsoft.com/visualstudio/data-tools/tableadapter-overview)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>TableAdapter の概要<ept id="p1">](https://docs.microsoft.com/visualstudio/data-tools/tableadapter-overview)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>If Operator<ept id="p1">](../../../../visual-basic/language-reference/operators/if-operator.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>場合演算子<ept id="p1">](../../../../visual-basic/language-reference/operators/if-operator.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Local Type Inference<ept id="p1">](../../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>ローカル型推論<ept id="p1">](../../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Is Operator<ept id="p1">](../../../../visual-basic/language-reference/operators/is-operator.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Is 演算子<ept id="p1">](../../../../visual-basic/language-reference/operators/is-operator.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>IsNot Operator<ept id="p1">](../../../../visual-basic/language-reference/operators/isnot-operator.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>IsNot 演算子<ept id="p1">](../../../../visual-basic/language-reference/operators/isnot-operator.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>