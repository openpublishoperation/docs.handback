<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3c3098370b8d9dcb6aafcb06dcfb8f4e144b899a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\data-types\numeric-data-types.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7b31fff9a24e058c965d5c2b4b5da6c01a3fdb29</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4cfbc6d8f2f539294898699654794635577a26c8</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Handback file name: lo-mt_numeric-data-types.c2797de69ebf2a39a03ada5d56a81491fdd1d595.ja-jp is different with handoff file name: numeric-data-types.c2797de69ebf2a39a03ada5d56a81491fdd1d595.ja-jp.</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Numeric Data Types (Visual Basic) | Microsoft Docs</source>
          <target state="translated">数値データ型 (Visual Basic) |Microsoft ドキュメント</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Numeric Data Types (Visual Basic)</source>
          <target state="translated">数値データ型 (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> supplies several <bpt id="p1">*</bpt>numeric data types<ept id="p1">*</ept> for handling numbers in various representations.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>いくつか提供<bpt id="p1">*</bpt>数値データ型<ept id="p1">*</ept>さまざまな表現で数値を処理するためです。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Integral<ept id="p1">*</ept> types represent only whole numbers (positive, negative, and zero), and <bpt id="p2">*</bpt>nonintegral<ept id="p2">*</ept> types represent numbers with both integer and fractional parts.</source>
          <target state="translated"><bpt id="p1">*</bpt>整数<ept id="p1">*</ept>型を表す整数のみ (正、負、およびゼロ)、および<bpt id="p2">*</bpt>非整数<ept id="p2">*</ept>型では、数値を表す整数と小数部の両方にします。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For a table showing a side-by-side comparison of the <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> data types, see <bpt id="p1">[</bpt>Data Types<ept id="p1">](../../../../visual-basic/language-reference/data-types/data-type-summary.md)</ept>.</source>
          <target state="translated">サイド バイ サイドの比較を示す表に、<ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>データ型を参照してください<bpt id="p1">[</bpt>データ型<ept id="p1">](../../../../visual-basic/language-reference/data-types/data-type-summary.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Integral Numeric Types</source>
          <target state="translated">整数数値型</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Integral data types<ept id="p1">*</ept> are those that represent only numbers without fractional parts.</source>
          <target state="translated"><bpt id="p1">*</bpt>整数データ型<ept id="p1">*</ept>は小数部のない数だけを表す。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>signed<ept id="p1">*</ept> integral data types are <bpt id="p2">[</bpt>SByte Data Type<ept id="p2">](../../../../visual-basic/language-reference/data-types/sbyte-data-type.md)</ept> (8-bit), <bpt id="p3">[</bpt>Short Data Type<ept id="p3">](../../../../visual-basic/language-reference/data-types/short-data-type.md)</ept> (16-bit), <bpt id="p4">[</bpt>Integer Data Type<ept id="p4">](../../../../visual-basic/language-reference/data-types/integer-data-type.md)</ept> (32-bit), and <bpt id="p5">[</bpt>Long Data Type<ept id="p5">](../../../../visual-basic/language-reference/data-types/long-data-type.md)</ept> (64-bit).</source>
          <target state="translated"><bpt id="p1">*</bpt>署名<ept id="p1">*</ept>整数データ型は<bpt id="p2">[</bpt>SByte データ型<ept id="p2">](../../../../visual-basic/language-reference/data-types/sbyte-data-type.md)</ept>(8 ビット)、 <bpt id="p3">[</bpt>Short データ型<ept id="p3">](../../../../visual-basic/language-reference/data-types/short-data-type.md)</ept>(16 ビット)、<bpt id="p4">[</bpt>整数データ型<ept id="p4">](../../../../visual-basic/language-reference/data-types/integer-data-type.md)</ept>(32 ビット) および<bpt id="p5">[</bpt>Long データ型<ept id="p5">](../../../../visual-basic/language-reference/data-types/long-data-type.md)</ept>(64 ビット)。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If a variable always stores integers rather than fractional numbers, declare it as one of these types.</source>
          <target state="translated">変数は、小数部ではなく、整数を常に保存する場合は、これらの型のいずれかとしてを宣言します。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>unsigned<ept id="p1">*</ept> integral types are <bpt id="p2">[</bpt>Byte Data Type<ept id="p2">](../../../../visual-basic/language-reference/data-types/byte-data-type.md)</ept> (8-bit), <bpt id="p3">[</bpt>UShort Data Type<ept id="p3">](../../../../visual-basic/language-reference/data-types/ushort-data-type.md)</ept> (16-bit), <bpt id="p4">[</bpt>UInteger Data Type<ept id="p4">](../../../../visual-basic/language-reference/data-types/uinteger-data-type.md)</ept> (32-bit), and <bpt id="p5">[</bpt>ULong Data Type<ept id="p5">](../../../../visual-basic/language-reference/data-types/ulong-data-type.md)</ept> (64-bit).</source>
          <target state="translated"><bpt id="p1">*</bpt>符号なし<ept id="p1">*</ept>整数型では<bpt id="p2">[</bpt>Byte データ型<ept id="p2">](../../../../visual-basic/language-reference/data-types/byte-data-type.md)</ept>(8 ビット)、 <bpt id="p3">[</bpt>UShort データ型<ept id="p3">](../../../../visual-basic/language-reference/data-types/ushort-data-type.md)</ept>(16 ビット)、 <bpt id="p4">[</bpt>UInteger データ型<ept id="p4">](../../../../visual-basic/language-reference/data-types/uinteger-data-type.md)</ept>(32 ビット) および<bpt id="p5">[</bpt>ULong データ型<ept id="p5">](../../../../visual-basic/language-reference/data-types/ulong-data-type.md)</ept>(64 ビット)。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If a variable contains binary data, or data of unknown nature, declare it as one of these types.</source>
          <target state="translated">変数にバイナリ データ、または不明のデータが含まれる場合は、これらの型のいずれかとしてを宣言します。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Performance</source>
          <target state="translated">パフォーマンス</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Arithmetic operations are faster with integral types than with other data types.</source>
          <target state="translated">算術演算は、他のデータ型よりも整数型の高速化します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>They are fastest with the <ph id="ph1">`Integer`</ph> and <ph id="ph2">`UInteger`</ph> types in <ph id="ph3">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>.</source>
          <target state="translated">最も高速なは、<ph id="ph1">`Integer`</ph>と<ph id="ph2">`UInteger`</ph>型<ph id="ph3">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>します。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Large Integers</source>
          <target state="translated">大きな整数</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If you need to hold an integer larger than the <ph id="ph1">`Integer`</ph> data type can hold, you can use the <ph id="ph2">`Long`</ph> data type instead.</source>
          <target state="translated">大きい整数値を保持する必要がある場合、<ph id="ph1">`Integer`</ph>使用すると、データ型を保持できる、<ph id="ph2">`Long`</ph>代わりにデータを入力します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Long`</ph> variables can hold numbers from -9,223,372,036,854,775,808 through 9,223,372,036,854,775,807.</source>
          <target state="translated"><ph id="ph1">`Long`</ph>変数は、9,223,372,036,854,775,807 を通じて-9,223,372,036,854,775,808 から数値を保持できます。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Operations with <ph id="ph1">`Long`</ph> are slightly slower than with <ph id="ph2">`Integer`</ph>.</source>
          <target state="translated">操作が<ph id="ph1">`Long`</ph>でよりも少し低速<ph id="ph2">`Integer`</ph>します。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If you need even larger values, you can use the <bpt id="p1">[</bpt>Decimal Data Type<ept id="p1">](../../../../visual-basic/language-reference/data-types/decimal-data-type.md)</ept>.</source>
          <target state="translated">さらに大きな値が必要な場合を使用できます、 <bpt id="p1">[</bpt>Decimal データ型<ept id="p1">](../../../../visual-basic/language-reference/data-types/decimal-data-type.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You can hold numbers from -79,228,162,514,264,337,593,543,950,335 through 79,228,162,514,264,337,593,543,950,335 in a <ph id="ph1">`Decimal`</ph> variable if you do not use any decimal places.</source>
          <target state="translated">79,228,162,514,264,337,593,543,950,335 を通じて-79,228,162,514,264,337,593,543,950,335 から数値を保持することができます、<ph id="ph1">`Decimal`</ph>変数の場合は、小数点以下桁数を使用しないでください。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>However, operations with <ph id="ph1">`Decimal`</ph> numbers are considerably slower than with any other numeric data type.</source>
          <target state="translated">ただし、操作が<ph id="ph1">`Decimal`</ph>番号は、その他の数値データ型よりもかなり遅くなります。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Small Integers</source>
          <target state="translated">小さい整数</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If you do not need the full range of the <ph id="ph1">`Integer`</ph> data type, you can use the <ph id="ph2">`Short`</ph> data type, which can hold integers from -32,768 through 32,767.</source>
          <target state="translated">すべての範囲を必要としない場合、<ph id="ph1">`Integer`</ph>に使用できるデータの種類、<ph id="ph2">`Short`</ph>データ型は、-32,768 ~ 32,767 の整数を格納することができます。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For the smallest integer range, the <ph id="ph1">`SByte`</ph> data type holds integers from -128 through 127.</source>
          <target state="translated">最小の整数の範囲の<ph id="ph1">`SByte`</ph>データ型は-128 ~ 127 の整数値を格納します。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If you have a very large number of variables that hold small integers, the common language runtime can sometimes store your <ph id="ph1">`Short`</ph> and <ph id="ph2">`SByte`</ph> variables more efficiently and save memory consumption.</source>
          <target state="translated">非常に多くの小さい整数を保持する変数を設定していれば、共通言語ランタイムを格納できる場合があります、<ph id="ph1">`Short`</ph>と<ph id="ph2">`SByte`</ph>変数より効率的かつメモリ消費量を保存します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>However, operations with <ph id="ph1">`Short`</ph> and <ph id="ph2">`SByte`</ph> are somewhat slower than with <ph id="ph3">`Integer`</ph>.</source>
          <target state="translated">ただし、操作が<ph id="ph1">`Short`</ph>と<ph id="ph2">`SByte`</ph>でよりもやや低速<ph id="ph3">`Integer`</ph>します。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Unsigned Integers</source>
          <target state="translated">符号なし整数</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>If you know that your variable never needs to hold a negative number, you can use the <bpt id="p1">*</bpt>unsigned types<ept id="p1">*</ept><ph id="ph1">`Byte`</ph>, <ph id="ph2">`UShort`</ph>, <ph id="ph3">`UInteger`</ph>, and <ph id="ph4">`ULong`</ph>.</source>
          <target state="translated">変数が負の値を保持する必要はありません、使用することがわかっている場合、<bpt id="p1">*</bpt>型の符号なし<ept id="p1">*</ept><ph id="ph1">`Byte`</ph>、 <ph id="ph2">`UShort`</ph>、 <ph id="ph3">`UInteger`</ph>、および<ph id="ph4">`ULong`</ph>です。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Each of these data types can hold a positive integer twice as large as its corresponding signed type (<ph id="ph1">`SByte`</ph>, <ph id="ph2">`Short`</ph>, <ph id="ph3">`Integer`</ph>, and <ph id="ph4">`Long`</ph>).</source>
          <target state="translated">正の整数を&amp;2; 回よりも小さい符号付きの型を対応するこれらのデータ型の各保持できます (<ph id="ph1">`SByte`</ph>、 <ph id="ph2">`Short`</ph>、 <ph id="ph3">`Integer`</ph>、および<ph id="ph4">`Long`</ph>)。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In terms of performance, each unsigned type is exactly as efficient as its corresponding signed type.</source>
          <target state="translated">パフォーマンスの面では、各符号なしの型は、対応する符号付きの型と同じくらい効率的です。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In particular, <ph id="ph1">`UInteger`</ph> shares with <ph id="ph2">`Integer`</ph> the distinction of being the most efficient of all the elementary numeric data types.</source>
          <target state="translated">具体的には、<ph id="ph1">`UInteger`</ph>と共有<ph id="ph2">`Integer`</ph>の最も効率的なすべての基本的な数値データ型が区別されます。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Nonintegral Numeric Types</source>
          <target state="translated">非整数の数値型</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Nonintegral data types<ept id="p1">*</ept> are those that represent numbers with both integer and fractional parts.</source>
          <target state="translated"><bpt id="p1">*</bpt>整数以外のデータ型<ept id="p1">*</ept>は整数と小数部の両方で数値を表す。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The nonintegral numeric data types are <ph id="ph1">`Decimal`</ph> (128-bit fixed point), <bpt id="p1">[</bpt>Single Data Type<ept id="p1">](../../../../visual-basic/language-reference/data-types/single-data-type.md)</ept> (32-bit floating point), and <bpt id="p2">[</bpt>Double Data Type<ept id="p2">](../../../../visual-basic/language-reference/data-types/double-data-type.md)</ept> (64-bit floating point).</source>
          <target state="translated">非整数の数値データ型は<ph id="ph1">`Decimal`</ph>(128 ビットの固定小数点)、 <bpt id="p1">[</bpt>Single データ型<ept id="p1">](../../../../visual-basic/language-reference/data-types/single-data-type.md)</ept>(32 ビット浮動小数点数)、および<bpt id="p2">[</bpt>Double データ型<ept id="p2">](../../../../visual-basic/language-reference/data-types/double-data-type.md)</ept>(64 ビットの浮動小数点)。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>They are all signed types.</source>
          <target state="translated">これらは、すべて署名済みの種類です。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If a variable can contain a fraction, declare it as one of these types.</source>
          <target state="translated">変数には、小数が含まれることができます、これらの型のいずれかとしてを宣言します。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Decimal`</ph> is not a floating-point data type.</source>
          <target state="translated"><ph id="ph1">`Decimal`</ph>浮動小数点データ型がありません。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Decimal`</ph> numbers have a binary integer value and an integer scaling factor that specifies what portion of the value is a decimal fraction.</source>
          <target state="translated"><ph id="ph1">`Decimal`</ph>数値は、バイナリの整数値と値のどの部分が、小数を指定する整数値のスケール ファクターがあります。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>You can use <ph id="ph1">`Decimal`</ph> variables for money values.</source>
          <target state="translated">使用する<ph id="ph1">`Decimal`</ph>money 値として変数をします。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The advantage is the precision of the values.</source>
          <target state="translated">利点は、値の有効桁数です。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Double`</ph> data type is faster and requires less memory, but it is subject to rounding errors.</source>
          <target state="translated"><ph id="ph1">`Double`</ph>データ型が高速より少ないメモリが必要ですが、丸め誤差が発生します。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Decimal`</ph> data type retains complete accuracy to 28 decimal places.</source>
          <target state="translated"><ph id="ph1">`Decimal`</ph>データ型は小数点以下桁数が 28 の完全な精度を保持します。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Floating-point (<ph id="ph1">`Single`</ph> and <ph id="ph2">`Double`</ph>) numbers have larger ranges than <ph id="ph3">`Decimal`</ph> numbers but can be subject to rounding errors.</source>
          <target state="translated">浮動小数点 (<ph id="ph1">`Single`</ph>と<ph id="ph2">`Double`</ph>) の数値よりも大きい範囲がある<ph id="ph3">`Decimal`</ph>番号が、丸め誤差が発生することができます。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Floating-point types support fewer significant digits than <ph id="ph1">`Decimal`</ph> but can represent values of greater magnitude.</source>
          <target state="translated">浮動小数点型サポートの有効桁数よりも少ない<ph id="ph1">`Decimal`</ph>ですより大きい値を表すことができます。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Nonintegral number values can be expressed as mmmEeee, in which mmm is the <bpt id="p1">*</bpt>mantissa<ept id="p1">*</ept> (the significant digits) and eee is the <bpt id="p2">*</bpt>exponent<ept id="p2">*</ept> (a power of 10).</source>
          <target state="translated">非整数の数値として表現できます mmmEeee にある mmm、<bpt id="p1">*</bpt>仮数<ept id="p1">*</ept>(有効桁数)、eee、<bpt id="p2">*</bpt>指数<ept id="p2">*</ept>(10 の累乗) します。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The highest positive values of the nonintegral types are 7.9228162514264337593543950335E+28 for <ph id="ph1">`Decimal`</ph>, 3.4028235E+38 for <ph id="ph2">`Single`</ph>, and 1.79769313486231570E+308 for <ph id="ph3">`Double`</ph>.</source>
          <target state="translated">非整数型の最も高い正の値は 7.9228162514264337593543950335 e + 28 <ph id="ph1">`Decimal`</ph>、3.4028235 e + 38 <ph id="ph2">`Single`</ph>、および 1.79769313486231570 e + 308 の<ph id="ph3">`Double`</ph>です。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Performance</source>
          <target state="translated">パフォーマンス</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Double`</ph> is the most efficient of the fractional data types, because the processors on current platforms perform floating-point operations in double precision.</source>
          <target state="translated"><ph id="ph1">`Double`</ph>小数部のデータ型の最も効率的な現在のプラットフォーム上のプロセッサでは、倍精度浮動小数点演算を実行するためです。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>However, operations with <ph id="ph1">`Double`</ph> are not as fast as with the integral types such as <ph id="ph2">`Integer`</ph>.</source>
          <target state="translated">ただし、操作が<ph id="ph1">`Double`</ph>などの整数型と同様に高速ではない<ph id="ph2">`Integer`</ph>します。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Small Magnitudes</source>
          <target state="translated">小さい絶対値</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For numbers with the smallest possible magnitude (closest to 0), <ph id="ph1">`Double`</ph> variables can hold numbers as small as -4.94065645841246544E-324 for negative values and 4.94065645841246544E-324 for positive values.</source>
          <target state="translated">(0 に最も近い)、可能な大きさの最小の数値の<ph id="ph1">`Double`</ph>変数に保持できます - 4.94065645841246544E ように小規模の 324 の負の値および 4.94065645841246544E-の正の値。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Small Fractional Numbers</source>
          <target state="translated">小さい小数値</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>If you do not need the full range of the <ph id="ph1">`Double`</ph> data type, you can use the <ph id="ph2">`Single`</ph> data type, which can hold floating-point numbers from -3.4028235E+38 through 3.4028235E+38.</source>
          <target state="translated">すべての範囲を必要としない場合、<ph id="ph1">`Double`</ph>に使用できるデータの種類、 <ph id="ph2">`Single`</ph> 3.4028235 e + 38 から 3.4028235 e + 38 までの浮動小数点数を保持できるデータ型。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The smallest magnitudes for <ph id="ph1">`Single`</ph> variables are -1.401298E-45 for negative values and 1.401298E-45 for positive values.</source>
          <target state="translated">最も小さいマグニチュード<ph id="ph1">`Single`</ph>変数は、- 1.401298E-45 の負の値および 1.401298-の正の値。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>If you have a very large number of variables that hold small floating-point numbers, the common language runtime can sometimes store your <ph id="ph1">`Single`</ph> variables more efficiently and save memory consumption.</source>
          <target state="translated">共通言語ランタイムを格納できますも非常に多くの小規模の浮動小数点数を保持する変数があれば、<ph id="ph1">`Single`</ph>変数より効率的かつメモリ消費量を保存します。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">関連項目</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Elementary Data Types<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/elementary-data-types.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>基本データ型<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/elementary-data-types.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Character Data Types<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/character-data-types.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>文字データ型<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/character-data-types.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Miscellaneous Data Types<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/miscellaneous-data-types.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>その他のデータ型<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/miscellaneous-data-types.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Troubleshooting Data Types<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/troubleshooting-data-types.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>データ型のトラブルシューティング<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/troubleshooting-data-types.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Call a Windows Function that Takes Unsigned Types<ept id="p1">](../../../../visual-basic/programming-guide/com-interop/how-to-call-a-windows-function-that-takes-unsigned-types.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>方法 : 符号なしの型を使用する Windows の機能を呼び出す<ept id="p1">](../../../../visual-basic/programming-guide/com-interop/how-to-call-a-windows-function-that-takes-unsigned-types.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>