<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0de3a603fa84a72018a566f6e7182b45e53ec89e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\procedures\overload-resolution.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">85d8df5bb52b2cc71db6067938c7c45387e491ad</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d4bb5c06befd461e274648feafb7cad2a630b335</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Handback file name: lo-mt_overload-resolution.aecead235c14405572d5f7bdc7cb9244f1ff86b2.ja-jp is different with handoff file name: overload-resolution.aecead235c14405572d5f7bdc7cb9244f1ff86b2.ja-jp.</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Overload Resolution (Visual Basic) | Microsoft Docs</source>
          <target state="translated">オーバー ロードの解決 (Visual Basic) |Microsoft ドキュメント</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Overload Resolution (Visual Basic)</source>
          <target state="translated">オーバーロードの解決法 (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> compiler encounters a call to a procedure that is defined in several overloaded versions, the compiler must decide which of the overloads to call.</source>
          <target state="translated">ときに、<ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>コンパイラは、いくつかのオーバー ロードされたバージョンで定義されているプロシージャの呼び出しを検出すると、コンパイラは、オーバー ロードを呼び出すを決定する必要があります。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>It does this by performing the following steps:</source>
          <target state="translated">次の手順を実行することによってこれが行われます。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Accessibility.<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>ユーザー補助機能です。<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>It eliminates any overload with an access level that prevents the calling code from calling it.</source>
          <target state="translated">呼び出し元のコードの呼び出しを防止するアクセス レベルを持つオーバー ロードを除外します。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Number of Parameters.<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>パラメーターの数。<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>It eliminates any overload that defines a different number of parameters than are supplied in the call.</source>
          <target state="translated">呼び出しで指定された数と異なる数のパラメーターが定義されているオーバー ロードを除外します。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Parameter Data Types.<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>パラメーターのデータ型。<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The compiler gives instance methods preference over extension methods.</source>
          <target state="translated">コンパイラは、拡張メソッドよりインスタンス メソッドを優先します。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If any instance method is found that requires only widening conversions to match the procedure call, all extension methods are dropped and the compiler continues with only the instance method candidates.</source>
          <target state="translated">拡大に合わせてプロシージャの呼び出しの変換だけが必要な任意のインスタンス メソッドが見つかった場合は、すべての拡張メソッドは削除され、インスタンス メソッドの候補をコンパイラが続行します。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If no such instance method is found, it continues with both instance and extension methods.</source>
          <target state="translated">このようなインスタンス メソッドが見つからない場合は、インスタンスと拡張メソッドの両方で続行します。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In this step, it eliminates any overload for which the data types of the calling arguments cannot be converted to the parameter types defined in the overload.</source>
          <target state="translated">この手順で、オーバー ロードで定義されているパラメーターの型への呼び出しの引数のデータ型を変換できませんオーバー ロードを除外します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Narrowing Conversions.<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>縮小変換です。<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>It eliminates any overload that requires a narrowing conversion from the calling argument types to the defined parameter types.</source>
          <target state="translated">定義されたパラメーターの型への呼び出しの引数の型から縮小変換を必要なオーバー ロードを除外します。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This is true whether the type checking switch (<bpt id="p1">[</bpt>Option Strict Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/option-strict-statement.md)</ept>) is <ph id="ph1">`On`</ph> or <ph id="ph2">`Off`</ph>.</source>
          <target state="translated">これは、該当の型チェックを切り替えるかどうか (<bpt id="p1">[</bpt>Option Strict ステートメント<ept id="p1">](../../../../visual-basic/language-reference/statements/option-strict-statement.md)</ept>) は<ph id="ph1">`On`</ph>または<ph id="ph2">`Off`</ph>です。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Least Widening.<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>最小の拡大。<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The compiler considers the remaining overloads in pairs.</source>
          <target state="translated">コンパイラは、ペアで残りのオーバー ロードを考慮します。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For each pair, it compares the data types of the defined parameters.</source>
          <target state="translated">各ペアに対して定義されているパラメーターのデータ型を比較します。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If the types in one of the overloads all widen to the corresponding types in the other, the compiler eliminates the latter.</source>
          <target state="translated">すべてのオーバー ロードのいずれかの型は、もう一方で対応する型に拡大する場合、コンパイラは、後者を除外します。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>That is, it retains the overload that requires the least amount of widening.</source>
          <target state="translated">つまり、最小限の拡大を必要とするオーバー ロードを保持します。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Single Candidate.<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>1 つの候補です。<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>It continues considering overloads in pairs until only one overload remains, and it resolves the call to that overload.</source>
          <target state="translated">オーバー ロードを&amp;1; つだけまでのペアがそのまま残り、オーバー ロードし、そのオーバー ロードの呼び出しを解決することを検討して続行します。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If the compiler cannot reduce the overloads to a single candidate, it generates an error.</source>
          <target state="translated">コンパイラは、候補を&amp;1; つのオーバー ロードを減らすことができない、エラーを生成します。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The following illustration shows the process that determines which of a set of overloaded versions to call.</source>
          <target state="translated">次の図は、一連のオーバー ロードされたバージョンを呼び出すのどれかを判断するプロセスを示しています。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Flow diagram of overload resolution process<ept id="p1">](./media/overloadres.gif "OverloadRes")</ept></source>
          <target state="translated"><bpt id="p1">![</bpt>オーバー ロードの解決プロセスのフロー図<ept id="p1">](./media/overloadres.gif "OverloadRes")</ept></target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Resolving among overloaded versions</source>
          <target state="translated">オーバー ロードされたバージョンを解決します。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The following example illustrates this overload resolution process.</source>
          <target state="translated">次の例では、このオーバー ロードの解決プロセスを示します。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnProcedures#62<ept id="p2">](./codesnippet/VisualBasic/overload-resolution_1.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnProcedures #&amp;62;<ept id="p2">](./codesnippet/VisualBasic/overload-resolution_1.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnProcedures#63<ept id="p2">](./codesnippet/VisualBasic/overload-resolution_2.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnProcedures #&amp;63;<ept id="p2">](./codesnippet/VisualBasic/overload-resolution_2.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In the first call, the compiler eliminates the first overload because the type of the first argument (<ph id="ph1">`Short`</ph>) narrows to the type of the corresponding parameter (<ph id="ph2">`Byte`</ph>).</source>
          <target state="translated">最初の呼び出しで、コンパイラが最初のオーバー ロードを排除の最初の引数の型 (<ph id="ph1">`Short`</ph>) に対応するパラメーターの型を変更して (<ph id="ph2">`Byte`</ph>)。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>It then eliminates the third overload because each argument type in the second overload (<ph id="ph1">`Short`</ph> and <ph id="ph2">`Single`</ph>) widens to the corresponding type in the third overload (<ph id="ph3">`Integer`</ph> and <ph id="ph4">`Single`</ph>).</source>
          <target state="translated">次に除去&amp;3; 番目のオーバー ロードは、2 番目のオーバー ロードで各引数の型 (<ph id="ph1">`Short`</ph>と<ph id="ph2">`Single`</ph>)&amp;3; 番目のオーバー ロードでは、対応する型に拡大変換 (<ph id="ph3">`Integer`</ph>と<ph id="ph4">`Single`</ph>)。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The second overload requires less widening, so the compiler uses it for the call.</source>
          <target state="translated">2 番目のオーバー ロードが必要な拡大が少ないので、コンパイラは、呼び出しの使用します。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>In the second call, the compiler cannot eliminate any of the overloads on the basis of narrowing.</source>
          <target state="translated">2 番目の呼び出しで、コンパイラは縮小に基づいてオーバー ロードのいずれかを取り除くことはできません。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>It eliminates the third overload for the same reason as in the first call, because it can call the second overload with less widening of the argument types.</source>
          <target state="translated">除外した引数型の&amp;2; 番目のオーバー ロードを呼び出すことがあるため、最初の呼び出しと同様に、同じ理由から&amp;3; 番目のオーバー ロードを除外します。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>However, the compiler cannot resolve between the first and second overloads.</source>
          <target state="translated">ただし、コンパイラは、最初と&amp;2; 番目のオーバー ロードの間で解決できません。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Each has one defined parameter type that widens to the corresponding type in the other (<ph id="ph1">`Byte`</ph> to <ph id="ph2">`Short`</ph>, but <ph id="ph3">`Single`</ph> to <ph id="ph4">`Double`</ph>).</source>
          <target state="translated">もう一方で対応する型を拡張する&amp;1; つの定義済みパラメーターの型を持つ各 (<ph id="ph1">`Byte`</ph>に<ph id="ph2">`Short`</ph>が<ph id="ph3">`Single`</ph>に<ph id="ph4">`Double`</ph>)。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The compiler therefore generates an overload resolution error.</source>
          <target state="translated">そのため、コンパイラは、オーバー ロードの解決エラーを生成します。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Overloaded Optional and ParamArray Arguments</source>
          <target state="translated">省略可能なオーバー ロードと ParamArray 引数</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If two overloads of a procedure have identical signatures except that the last parameter is declared <bpt id="p1">[</bpt>Optional<ept id="p1">](../../../../visual-basic/language-reference/modifiers/optional.md)</ept> in one and <bpt id="p2">[</bpt>ParamArray<ept id="p2">](../../../../visual-basic/language-reference/modifiers/paramarray.md)</ept> in the other, the compiler resolves a call to that procedure as follows:</source>
          <target state="translated">最後のパラメーターを宣言する点を除いて、プロシージャの&amp;2; つのオーバー ロードと同じシグネチャを持つ場合<bpt id="p1">[</bpt>オプション<ept id="p1">](../../../../visual-basic/language-reference/modifiers/optional.md)</ept>いずれかでと<bpt id="p2">[</bpt>ParamArray<ept id="p2">](../../../../visual-basic/language-reference/modifiers/paramarray.md)</ept> 、もう一方で、コンパイラは解決そのプロシージャを呼び出す次のようにします。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>If the call supplies the last argument as</source>
          <target state="translated">呼び出しが最後の引数として指定した場合</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The compiler resolves the call to the overload declaring the last argument as</source>
          <target state="translated">コンパイラは最後の引数として宣言するオーバー ロードの呼び出しを解決します。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>No value (argument omitted)</source>
          <target state="translated">値なし (引数を省略すると)</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>A single value</source>
          <target state="translated">1 つの値</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Two or more values in a comma-separated list</source>
          <target state="translated">コンマ区切りの一覧で、2 つ以上の値</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>An array of any length (including an empty array)</source>
          <target state="translated">(空の配列を含む) 任意の長さの配列</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">関連項目</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Optional Parameters<ept id="p1">](./optional-parameters.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>省略可能なパラメーター<ept id="p1">](./optional-parameters.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Parameter Arrays<ept id="p1">](./parameter-arrays.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>パラメーター配列<ept id="p1">](./parameter-arrays.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Procedure Overloading<ept id="p1">](./procedure-overloading.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>プロシージャのオーバー ロード<ept id="p1">](./procedure-overloading.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Troubleshooting Procedures<ept id="p1">](./troubleshooting-procedures.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>トラブルシューティングの手順<ept id="p1">](./troubleshooting-procedures.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Define Multiple Versions of a Procedure<ept id="p1">](./how-to-define-multiple-versions-of-a-procedure.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>方法: プロシージャの複数のバージョンを定義します。<ept id="p1">](./how-to-define-multiple-versions-of-a-procedure.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Call an Overloaded Procedure<ept id="p1">](./how-to-call-an-overloaded-procedure.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>方法: オーバー ロードされたプロシージャを呼び出す<ept id="p1">](./how-to-call-an-overloaded-procedure.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Overload a Procedure that Takes Optional Parameters<ept id="p1">](./how-to-overload-a-procedure-that-takes-optional-parameters.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>方法: 省略可能なパラメーターを受け取るプロシージャをオーバー ロード<ept id="p1">](./how-to-overload-a-procedure-that-takes-optional-parameters.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Overload a Procedure that Takes an Indefinite Number of Parameters<ept id="p1">](./how-to-overload-a-procedure-that-takes-an-indefinite-number-of-parameters.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>方法: 不特定数のパラメーターを受け取るプロシージャをオーバー ロード<ept id="p1">](./how-to-overload-a-procedure-that-takes-an-indefinite-number-of-parameters.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Considerations in Overloading Procedures<ept id="p1">](./considerations-in-overloading-procedures.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>プロシージャのオーバー ロードに関する考慮事項<ept id="p1">](./considerations-in-overloading-procedures.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Overloads<ept id="p1">](../../../../visual-basic/language-reference/modifiers/overloads.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>オーバー ロード<ept id="p1">](../../../../visual-basic/language-reference/modifiers/overloads.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Extension Methods<ept id="p1">](./extension-methods.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>拡張メソッド<ept id="p1">](./extension-methods.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>