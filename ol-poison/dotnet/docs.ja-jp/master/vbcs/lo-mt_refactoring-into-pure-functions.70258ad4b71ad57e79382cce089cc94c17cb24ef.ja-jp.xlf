<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e622436905893872521994f6dc1a5bc1c8b3d06a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\linq\refactoring-into-pure-functions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a3c178ff6c32487001cf6e01c8ab97ff0838655a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">734c77ad98f910cf0ab62e09062b2bbf519350b4</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Handback file name: lo-mt_refactoring-into-pure-functions.70258ad4b71ad57e79382cce089cc94c17cb24ef.ja-jp is different with handoff file name: refactoring-into-pure-functions.70258ad4b71ad57e79382cce089cc94c17cb24ef.ja-jp.</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Refactoring Into Pure Functions (Visual Basic) | Microsoft Docs</source>
          <target state="translated">純粋関数 (Visual Basic) へのリファクタリング |Microsoft ドキュメント</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Refactoring Into Pure Functions (Visual Basic)</source>
          <target state="translated">純粋関数 (Visual Basic) へのリファクタリング</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>An important aspect of pure functional transformations is learning how to refactor code using pure functions.</source>
          <target state="translated">純粋関数型変換で重要なのは、純粋関数を使用してコードをリファクターする方法を理解することです。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>As noted previously in this section, a pure function has two useful characteristics:</source>
          <target state="translated">このセクションで既に説明したように、純粋関数には&amp;2; つの実用的な特性があります。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>It has no side effects.</source>
          <target state="translated">副作用がありません。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The function does not change any variables or the data of any type outside of the function.</source>
          <target state="translated">この関数は、関数の外部にある変数やあらゆる型のデータを一切変更しません。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>It is consistent.</source>
          <target state="translated">一貫性があります。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Given the same set of input data, it will always return the same output value.</source>
          <target state="translated">同じ入力データを与えられると、常に同じ出力値を返します。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>One way of transitioning to functional programming is to refactor existing code to eliminate unnecessary side effects and external dependencies.</source>
          <target state="translated">関数型プログラミングに移行するには、既存のコードをリファクターして不要な副作用や外部依存関係を排除するのが&amp;1; つの方法です。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In this way, you can create pure function versions of existing code.</source>
          <target state="translated">この方法で、既存のコードの純粋関数バージョンを作成できます。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This topic discusses what a pure function is and what it is not.</source>
          <target state="translated">このトピックでは、純粋関数の特徴とそれ以外の関数の特徴について説明します。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Tutorial: Manipulating Content in a WordprocessingML Document (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/tutorial-manipulating-content-in-a-wordprocessingml-document.md)</ept> tutorial shows how to manipulate a WordprocessingML document, and includes two examples of how to refactor using a pure function.</source>
          <target state="translated"><bpt id="p1">[</bpt>チュートリアル: WordprocessingML ドキュメント (Visual Basic の場合) 内のコンテンツを操作する<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/tutorial-manipulating-content-in-a-wordprocessingml-document.md)</ept>チュートリアル、WordprocessingML ドキュメントを操作する方法について説明し、純粋関数を使用してリファクターする方法の&amp;2; つの例が含まれています。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Eliminating Side Effects and External Dependencies</source>
          <target state="translated">副作用と外部依存関係の排除</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The following examples contrast two non-pure functions and a pure function.</source>
          <target state="translated">次の例に示す&amp;2; つの非純粋関数と&amp;1; つの純粋関数を参照して、その違いを確認してください。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Non-Pure Function that Changes a Class Member</source>
          <target state="translated">クラス メンバーを変更する非純粋関数</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In the following code, the <ph id="ph1">`HypenatedConcat`</ph> function is not a pure function, because it modifies the <ph id="ph2">`aMember`</ph> data member in the class:</source>
          <target state="translated">次のコードの <ph id="ph1">`HypenatedConcat`</ph> 関数は、クラス内の <ph id="ph2">`aMember`</ph> データ メンバーを変更するため、純粋関数ではありません。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This code produces the following output:</source>
          <target state="translated">このコードを実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Note that it is irrelevant whether the data being modified has <ph id="ph1">`public`</ph> or <ph id="ph2">`private`</ph> access, or is a  <ph id="ph3">`shared`</ph> member or an instance member.</source>
          <target state="translated">ない関係は、データの変更の有無<ph id="ph1">`public`</ph>または<ph id="ph2">`private`</ph>にアクセスするか、<ph id="ph3">`shared`</ph>メンバーまたはインスタンス メンバーです。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>A pure function does not change any data outside of the function.</source>
          <target state="translated">純粋関数は、関数の外部にあるデータを一切変更しません。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Non-Pure Function that Changes an Argument</source>
          <target state="translated">引数を変更する非純粋関数</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Furthermore, the following version of this same function is not pure because it modifies the contents of its parameter, <ph id="ph1">`sb`</ph>.</source>
          <target state="translated">同じ関数の次のバージョンは、そのパラメーターである <ph id="ph1">`sb`</ph> の内容を変更するため、純粋関数ではありません。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This version of the program produces the same output as the first version, because the <ph id="ph1">`HypenatedConcat`</ph> function has changed the value (state) of its first parameter by invoking the &lt;xref:System.Text.StringBuilder.Append%2A&gt; member function.</source>
          <target state="translated">このバージョンのプログラムでは、最初のバージョンと同じ出力が生成されるため、<ph id="ph1">`HypenatedConcat`</ph>関数を呼び出して最初のパラメーターの値 (状態) を変更した、&lt;xref:System.Text.StringBuilder.Append%2A&gt;メンバー関数&lt;/xref:System.Text.StringBuilder.Append%2A&gt;。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Note that this alteration occurs despite that fact that <ph id="ph1">`HypenatedConcat`</ph> uses call-by-value parameter passing.</source>
          <target state="translated"><ph id="ph1">`HypenatedConcat`</ph> はパラメーターを値で渡しますが、それでもこの変更は行われるので注意してください。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For reference types, if you pass a parameter by value, it results in a copy of the reference to an object being passed.</source>
          <target state="translated">参照型の場合、パラメーターを値で渡すと、渡されるオブジェクトへの参照がコピーされて渡されます。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This copy is still associated with the same instance data as the original reference (until the reference variable is assigned to a new object).</source>
          <target state="translated">このコピーは、参照変数が新しいオブジェクトに割り当てられるまで、元の参照と同じインスタンス データに関連付けられたままとなります。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Call-by-reference is not necessarily required for a function to modify a parameter.</source>
          <target state="translated">パラメーターを変更する場合に、必ずしも関数に参照を渡す必要はありません。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Pure Function</source>
          <target state="translated">純粋関数</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This next version of the program hows how to implement the <ph id="ph1">`HypenatedConcat`</ph> function as a pure function.</source>
          <target state="translated">次のバージョンのプログラムは、<ph id="ph1">`HypenatedConcat`</ph> 関数を純粋関数として実装する方法を示しています。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Again, this version produces the same line of output: <ph id="ph1">`StringOne-StringTwo`</ph>.</source>
          <target state="translated">このバージョンも、同じ出力行 <ph id="ph1">`StringOne-StringTwo`</ph> を生成します。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Note that to retain the concatenated value, it is stored in the intermediate variable <ph id="ph1">`s2`</ph>.</source>
          <target state="translated">この連結された値を保持するために、中間変数 <ph id="ph1">`s2`</ph> が使用されていることに注意してください。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>One approach that can be very useful is to write functions that are locally impure (that is, they declare and modify local variables) but are globally pure.</source>
          <target state="translated">ローカルには純粋ではないが (つまりローカル変数を宣言して変更する)、グローバルには純粋である関数を作成すると、非常に便利な場合があります。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Such functions have many of the desirable composability characteristics, but avoid some of the more convoluted functional programming idioms, such as having to use recursion when a simple loop would accomplish the same thing.</source>
          <target state="translated">このような関数は、必要に応じて構成できる特性を多く備えていますが、関数型プログラミングの複雑な表現方法の一部 (単純なループによる処理を行う場合は再帰を使用する必要があるなど) が省かれています。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Standard Query Operators</source>
          <target state="translated">標準クエリ演算子</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>An important characteristic of the standard query operators is that they are implemented as pure functions.</source>
          <target state="translated">標準クエリ演算子の重要な特性は、純粋関数として実装される点です。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Standard Query Operators Overview (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/standard-query-operators-overview.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>標準クエリ演算子の概要 (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/standard-query-operators-overview.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">関連項目</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Introduction to Pure Functional Transformations (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/introduction-to-pure-functional-transformations.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>純粋関数型変換 (Visual Basic) の概要<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/introduction-to-pure-functional-transformations.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Functional Programming vs. Imperative Programming (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/functional-programming-vs-imperative-programming.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>関数型プログラミングと命令型プログラミング (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/functional-programming-vs-imperative-programming.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>