<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5f4053de05f0a7a42fccdade1714e08f8eb172e6</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\declared-elements\shadowing.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6a3dcb4742e65cad554563505301890edd140982</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">19bcf9cde653fc46382e953b8d81fe8a5a281d58</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Handback file name: lo-mt_shadowing.65aa29f022d448fb02c6973ee65b708f899f9679.ja-jp is different with handoff file name: shadowing.65aa29f022d448fb02c6973ee65b708f899f9679.ja-jp.</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Shadowing in Visual Basic | Microsoft Docs</source>
          <target state="translated">Visual Basic におけるシャドウ |Microsoft ドキュメント</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Shadowing in Visual Basic</source>
          <target state="translated">Visual Basic におけるシャドウ</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>When two programming elements share the same name, one of them can hide, or <bpt id="p1">*</bpt>shadow<ept id="p1">*</ept>, the other one.</source>
          <target state="translated">2 つのプログラミング要素は、同じ名前を共有する場合の&amp;1; つ非表示にできます、または<bpt id="p1">*</bpt>シャドウ<ept id="p1">*</ept>、もう&amp;1; つです。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In such a situation, the shadowed element is not available for reference; instead, when your code uses the element name, the <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> compiler resolves it to the shadowing element.</source>
          <target state="translated">このような場合は、影付きの要素は参照できません。代わりに、コードが、要素名を使用する場合、<ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>コンパイラでは、それを解決する要素。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Purpose</source>
          <target state="translated">目的</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The main purpose of shadowing is to protect the definition of your class members.</source>
          <target state="translated">シャドウの主な目的は、クラス メンバーの定義を保護します。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The base class might undergo a change that creates an element with the same name as one you have already defined.</source>
          <target state="translated">基本クラスには、既に定義されているいずれかと同じ名前の要素を作成する変更が行われること可能性があります。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>If this happens, the <ph id="ph1">`Shadows`</ph> modifier forces references through your class to be resolved to the member you defined, instead of to the new base class element.</source>
          <target state="translated">このような場合、<ph id="ph1">`Shadows`</ph>修飾子フォースをするメンバーに解決するのには、クラスを参照する基本クラスの新しい要素の代わりに定義された、します。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Types of Shadowing</source>
          <target state="translated">シャドウの種類</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>An element can shadow another element in two different ways.</source>
          <target state="translated">要素は、2 つの方法で別の要素をシャドウすることができます。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The shadowing element can be declared inside a subregion of the region containing the shadowed element, in which case the shadowing is accomplished <bpt id="p1">*</bpt>through scope<ept id="p1">*</ept>.</source>
          <target state="translated">シャドウ ケースを行う影付きの要素を含む領域のサブ領域内に要素を宣言できます<bpt id="p1">*</bpt>スコープによる<ept id="p1">*</ept>します。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Or a deriving class can redefine a member of a base class, in which case the shadowing is done <bpt id="p1">*</bpt>through inheritance<ept id="p1">*</ept>.</source>
          <target state="translated">派生クラスが場合は、シャドウは、基本クラスのメンバーを再<bpt id="p1">*</bpt>継承によって<ept id="p1">*</ept>します。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Shadowing Through Scope</source>
          <target state="translated">スコープによるシャドウ</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>It is possible for programming elements in the same module, class, or structure to have the same name but different scope.</source>
          <target state="translated">プログラミングのモジュール、クラスまたは構造体に名前が同じでは異なるスコープ内の要素のことができます。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>When two elements are declared in this manner and the code refers to the name they share, the element with the narrower scope shadows the other element (block scope is the narrowest).</source>
          <target state="translated">狭いスコープを持つ要素が他の要素をシャドウする&amp;2; つの要素がこのような方法で宣言されているし、コードが共有されている名前を指す、(ブロック スコープは最も狭いです)。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For example, a module can define a <ph id="ph1">`Public`</ph> variable named <ph id="ph2">`temp`</ph>, and a procedure within the module can declare a local variable also named <ph id="ph3">`temp`</ph>.</source>
          <target state="translated">たとえば、モジュールを定義できます、<ph id="ph1">`Public`</ph>という名前の変数<ph id="ph2">`temp`</ph>、モジュール内のプロシージャもという名前のローカル変数を宣言および<ph id="ph3">`temp`</ph>です。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>References to <ph id="ph1">`temp`</ph> from within the procedure access the local variable, while references to <ph id="ph2">`temp`</ph> from outside the procedure access the <ph id="ph3">`Public`</ph> variable.</source>
          <target state="translated">参照<ph id="ph1">`temp`</ph>プロシージャ内からへの参照中に、ローカル変数にアクセス<ph id="ph2">`temp`</ph>からプロシージャへのアクセスの外側、<ph id="ph3">`Public`</ph>変数です。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In this case, the procedure variable <ph id="ph1">`temp`</ph> shadows the module variable <ph id="ph2">`temp`</ph>.</source>
          <target state="translated">この場合、プロシージャの変数<ph id="ph1">`temp`</ph>モジュール変数のシャドウ<ph id="ph2">`temp`</ph>します。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The following illustration shows two variables, both named <ph id="ph1">`temp`</ph>.</source>
          <target state="translated">次の図は、2 つの変数、という名前を<ph id="ph1">`temp`</ph>します。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The local variable <ph id="ph1">`temp`</ph> shadows the member variable <ph id="ph2">`temp`</ph> when accessed from within its own procedure <ph id="ph3">`p`</ph>.</source>
          <target state="translated">ローカル変数<ph id="ph1">`temp`</ph>メンバー変数のシャドウ<ph id="ph2">`temp`</ph>独自のプロシージャ内からアクセスしたときに<ph id="ph3">`p`</ph>します。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>However, the <ph id="ph1">`MyClass`</ph> keyword bypasses the shadowing and accesses the member variable.</source>
          <target state="translated">ただし、<ph id="ph1">`MyClass`</ph>キーワードがシャドウをバイパスし、メンバー変数にアクセスします。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Graphic diagram of shadowing through scope<ept id="p1">](../../../../visual-basic/programming-guide/language-features/declared-elements/media/shadowscope.gif "ShadowScope")</ept></source>
          <target state="translated"><bpt id="p1">![</bpt>スコープによるシャドウのグラフィック ダイアグラム<ept id="p1">](../../../../visual-basic/programming-guide/language-features/declared-elements/media/shadowscope.gif "ShadowScope")</ept></target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Shadowing through scope</source>
          <target state="translated">スコープによるシャドウ</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For an example of shadowing through scope, see <bpt id="p1">[</bpt>How to: Hide a Variable with the Same Name as Your Variable<ept id="p1">](../../../../visual-basic/programming-guide/language-features/declared-elements/how-to-hide-a-variable-with-the-same-name-as-your-variable.md)</ept>.</source>
          <target state="translated">スコープによるシャドウの例は、次を参照してください。<bpt id="p1">[</bpt>する方法: 変数のと同じ名前の変数を隠す<ept id="p1">](../../../../visual-basic/programming-guide/language-features/declared-elements/how-to-hide-a-variable-with-the-same-name-as-your-variable.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Shadowing Through Inheritance</source>
          <target state="translated">継承によるシャドウ</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If a derived class redefines a programming element inherited from a base class, the redefining element shadows the original element.</source>
          <target state="translated">派生クラスは、基本クラスから継承したプログラミングの要素を再定義を再定義する要素は、元の要素をシャドウします。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>You can shadow any type of declared element, or set of overloaded elements, with any other type.</source>
          <target state="translated">他の種類と、宣言された要素の任意の型、または一連のオーバー ロードされた要素をシャドウすることができます。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For example, an <ph id="ph1">`Integer`</ph> variable can shadow a <ph id="ph2">`Function`</ph> procedure.</source>
          <target state="translated">たとえば、<ph id="ph1">`Integer`</ph>変数をシャドウする、<ph id="ph2">`Function`</ph>プロシージャです。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If you shadow a procedure with another procedure, you can use a different parameter list and a different return type.</source>
          <target state="translated">別のプロシージャを使ってプロシージャをシャドウする場合は、別のパラメーター リストと異なる戻り値の型を使用できます。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The following illustration shows a base class <ph id="ph1">`b`</ph> and a derived class <ph id="ph2">`d`</ph> that inherits from <ph id="ph3">`b`</ph>.</source>
          <target state="translated">次の図は、基本クラス<ph id="ph1">`b`</ph>と派生クラス<ph id="ph2">`d`</ph>から継承する<ph id="ph3">`b`</ph>です。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The base class defines a procedure named <ph id="ph1">`proc`</ph>, and the derived class shadows it with another procedure of the same name.</source>
          <target state="translated">基本クラスという名前のプロシージャを定義する<ph id="ph1">`proc`</ph>と派生クラスは、同じ名前の別のプロシージャでシャドウします。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The first <ph id="ph1">`Call`</ph> statement accesses the shadowing <ph id="ph2">`proc`</ph> in the derived class.</source>
          <target state="translated">最初の<ph id="ph1">`Call`</ph>シャドウ ステートメントにアクセスする<ph id="ph2">`proc`</ph>派生クラスにします。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>However, the <ph id="ph1">`MyBase`</ph> keyword bypasses the shadowing and accesses the shadowed procedure in the base class.</source>
          <target state="translated">ただし、<ph id="ph1">`MyBase`</ph>キーワードがシャドウをバイパスし、基本クラスで影付きのプロシージャにアクセスします。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Graphic diagram of shadowing through inheritance<ept id="p1">](../../../../visual-basic/programming-guide/language-features/declared-elements/media/shadowinherit.gif "ShadowInherit")</ept></source>
          <target state="translated"><bpt id="p1">![</bpt>継承によるシャドウのグラフィック ダイアグラム<ept id="p1">](../../../../visual-basic/programming-guide/language-features/declared-elements/media/shadowinherit.gif "ShadowInherit")</ept></target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Shadowing through inheritance</source>
          <target state="translated">継承によるシャドウ</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For an example of shadowing through inheritance, see <bpt id="p1">[</bpt>How to: Hide a Variable with the Same Name as Your Variable<ept id="p1">](../../../../visual-basic/programming-guide/language-features/declared-elements/how-to-hide-a-variable-with-the-same-name-as-your-variable.md)</ept> and <bpt id="p2">[</bpt>How to: Hide an Inherited Variable<ept id="p2">](../../../../visual-basic/programming-guide/language-features/declared-elements/how-to-hide-an-inherited-variable.md)</ept>.</source>
          <target state="translated">継承によるシャドウの例は、次を参照してください。<bpt id="p1">[</bpt>方法:、変数と同じ名前の変数を隠す<ept id="p1">](../../../../visual-basic/programming-guide/language-features/declared-elements/how-to-hide-a-variable-with-the-same-name-as-your-variable.md)</ept>と<bpt id="p2">[</bpt>方法:、継承された変数を非表示に<ept id="p2">](../../../../visual-basic/programming-guide/language-features/declared-elements/how-to-hide-an-inherited-variable.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Shadowing and Access Level</source>
          <target state="translated">シャドウとアクセス レベル</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The shadowing element is not always accessible from the code using the derived class.</source>
          <target state="translated">要素は、常に、派生クラスを使用して、コードからアクセスできません。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For example, it might be declared <ph id="ph1">`Private`</ph>.</source>
          <target state="translated">たとえば、宣言することがあります<ph id="ph1">`Private`</ph>します。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>In such a case, shadowing is defeated and the compiler resolves any reference to the same element it would have if there had been no shadowing.</source>
          <target state="translated">このような場合は、シャドウが無効化し、コンパイラは同じになります。 要素への参照を解決が行われていない場合のシャドウします。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This element is the accessible element the fewest derivational steps backward from the shadowing class.</source>
          <target state="translated">この要素は、最小の継承はステップ後方シャドウするクラスからアクセス可能な要素です。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>If the shadowed element is a procedure, the resolution is to the closest accessible version with the same name, parameter list, and return type.</source>
          <target state="translated">影付きの要素が、プロシージャの場合は、解像度は、最も近い利用可能なバージョンと同じ名前、パラメーター リストし、型を返します。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The following example shows an inheritance hierarchy of three classes.</source>
          <target state="translated">次の例では、3 つのクラスの継承階層を示します。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Each class defines a <ph id="ph1">`Sub`</ph> procedure <ph id="ph2">`display`</ph>, and each derived class shadows the <ph id="ph3">`display`</ph> procedure in its base class.</source>
          <target state="translated">各クラスを定義、<ph id="ph1">`Sub`</ph>プロシージャ<ph id="ph2">`display`</ph>、および各派生したクラスの影、<ph id="ph3">`display`</ph>基本クラスのプロシージャです。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>In the preceding example, the derived class <ph id="ph1">`secondClass`</ph> shadows <ph id="ph2">`display`</ph> with a <ph id="ph3">`Private`</ph> procedure.</source>
          <target state="translated">前の例では、派生クラスで<ph id="ph1">`secondClass`</ph>シャドウ<ph id="ph2">`display`</ph>で、<ph id="ph3">`Private`</ph>プロシージャです。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>When module <ph id="ph1">`callDisplay`</ph> calls <ph id="ph2">`display`</ph> in <ph id="ph3">`secondClass`</ph>, the calling code is outside <ph id="ph4">`secondClass`</ph> and therefore cannot access the private <ph id="ph5">`display`</ph> procedure.</source>
          <target state="translated">ときにモジュール<ph id="ph1">`callDisplay`</ph>呼び出し<ph id="ph2">`display`</ph>で<ph id="ph3">`secondClass`</ph>、呼び出し元のコードが範囲外です<ph id="ph4">`secondClass`</ph>ため秘密にアクセスできない<ph id="ph5">`display`</ph>プロシージャです。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Shadowing is defeated, and the compiler resolves the reference to the base class <ph id="ph1">`display`</ph> procedure.</source>
          <target state="translated">シャドウは行われず、およびコンパイラは、基底クラスへの参照を解決<ph id="ph1">`display`</ph>プロシージャです。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>However, the further derived class <ph id="ph1">`thirdClass`</ph> declares <ph id="ph2">`display`</ph> as <ph id="ph3">`Public`</ph>, so the code in <ph id="ph4">`callDisplay`</ph> can access it.</source>
          <target state="translated">ただし、さらに、派生クラス<ph id="ph1">`thirdClass`</ph>を宣言<ph id="ph2">`display`</ph>として<ph id="ph3">`Public`</ph>ため、コードで<ph id="ph4">`callDisplay`</ph>にアクセスできます。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Shadowing and Overriding</source>
          <target state="translated">シャドウとオーバーライド</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Do not confuse shadowing with overriding.</source>
          <target state="translated">シャドウとオーバーライドを混同しないでください。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Both are used when a derived class inherits from a base class, and both redefine one declared element with another.</source>
          <target state="translated">派生クラスを基本クラスから継承し、再定義を別の&amp;1; つの宣言された要素両方使用されます。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>But there are significant differences between the two.</source>
          <target state="translated">2 つの主な違いがあります。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>For a comparison, see <bpt id="p1">[</bpt>Differences Between Shadowing and Overriding<ept id="p1">](../../../../visual-basic/programming-guide/language-features/declared-elements/differences-between-shadowing-and-overriding.md)</ept>.</source>
          <target state="translated">比較では、次を参照してください。<bpt id="p1">[</bpt>シャドウの間の相違点と優先する<ept id="p1">](../../../../visual-basic/programming-guide/language-features/declared-elements/differences-between-shadowing-and-overriding.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Shadowing and Overloading</source>
          <target state="translated">シャドウとオーバー ロード</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>If you shadow the same base class element with more than one element in your derived class, the shadowing elements become overloaded versions of that element.</source>
          <target state="translated">派生クラスで複数の要素と同じ基本クラスの要素をシャドウする場合は、その要素のオーバー ロードされたバージョンがシャドウする要素になります。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Procedure Overloading<ept id="p1">](../../../../visual-basic/programming-guide/language-features/procedures/procedure-overloading.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>プロシージャのオーバー ロード<ept id="p1">](../../../../visual-basic/programming-guide/language-features/procedures/procedure-overloading.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Accessing a Shadowed Element</source>
          <target state="translated">シャドウされた要素へのアクセス</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>When you access an element from a derived class, you normally do so through the current instance of that derived class, by qualifying the element name with the <ph id="ph1">`Me`</ph> keyword.</source>
          <target state="translated">派生クラスからの要素をアクセスするときに通常これを行う、派生クラスの現在のインスタンスを要素名を修飾することにより、<ph id="ph1">`Me`</ph>キーワードです。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>If your derived class shadows the element in the base class, you can access the base class element by qualifying it with the <ph id="ph1">`MyBase`</ph> keyword.</source>
          <target state="translated">修飾基本クラスの要素にアクセスする場合は、派生クラスでは、基本クラスで要素をシャドウ、<ph id="ph1">`MyBase`</ph>キーワードです。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>For an example of accessing a shadowed element, see <bpt id="p1">[</bpt>How to: Access a Variable Hidden by a Derived Class<ept id="p1">](../../../../visual-basic/programming-guide/language-features/declared-elements/how-to-access-a-variable-hidden-by-a-derived-class.md)</ept>.</source>
          <target state="translated">シャドウされた要素へのアクセスの例は、次を参照してください。<bpt id="p1">[</bpt>方法: 派生クラスによって非表示変数にアクセス<ept id="p1">](../../../../visual-basic/programming-guide/language-features/declared-elements/how-to-access-a-variable-hidden-by-a-derived-class.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Declaration of the Object Variable</source>
          <target state="translated">オブジェクト変数の宣言</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>How you create the object variable can also affect whether the derived class accesses a shadowing element or the shadowed element.</source>
          <target state="translated">オブジェクト変数を作成する方法と、派生クラスは、シャドウ要素または影付きの要素にアクセスするかどうかが影響ことができます。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The following example creates two objects from a derived class, but one object is declared as the base class and the other as the derived class.</source>
          <target state="translated">次の例では、2 つのオブジェクトを作成、派生クラスからが、基本クラスと派生クラスとして、その他の&amp;1; つのオブジェクトが宣言されています。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>In the preceding example, the variable <ph id="ph1">`basObj`</ph> is declared as the base class.</source>
          <target state="translated">上記の例では、変数<ph id="ph1">`basObj`</ph>基本クラスとして宣言します。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Assigning a <ph id="ph1">`dervCls`</ph> object to it constitutes a widening conversion and is therefore valid.</source>
          <target state="translated">割り当て、<ph id="ph1">`dervCls`</ph>オブジェクトをそれには、拡大変換し、ため有効です。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>However, the base class cannot access the shadowing version of the variable <ph id="ph1">`z`</ph> in the derived class, so the compiler resolves <ph id="ph2">`basObj.z`</ph> to the original base class value.</source>
          <target state="translated">ただし、基本クラスがシャドウされた変数をアクセスできない<ph id="ph1">`z`</ph>派生クラスでそのため、コンパイラは解決<ph id="ph2">`basObj.z`</ph>値は、元の基本クラスにします。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">関連項目</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>References to Declared Elements<ept id="p1">](../../../../visual-basic/programming-guide/language-features/declared-elements/references-to-declared-elements.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>宣言された要素への参照<ept id="p1">](../../../../visual-basic/programming-guide/language-features/declared-elements/references-to-declared-elements.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Scope in Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/language-features/declared-elements/scope.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Visual Basic におけるスコープ<ept id="p1">](../../../../visual-basic/programming-guide/language-features/declared-elements/scope.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Widening and Narrowing Conversions<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>拡大変換と縮小変換<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Shadows<ept id="p1">](../../../../visual-basic/language-reference/modifiers/shadows.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>シャドウ<ept id="p1">](../../../../visual-basic/language-reference/modifiers/shadows.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Overrides<ept id="p1">](../../../../visual-basic/language-reference/modifiers/overrides.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>オーバーライド<ept id="p1">](../../../../visual-basic/language-reference/modifiers/overrides.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Me, My, MyBase, and MyClass<ept id="p1">](../../../../visual-basic/programming-guide/program-structure/me-my-mybase-and-myclass.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Me、My、MyBase、および MyClass<ept id="p1">](../../../../visual-basic/programming-guide/program-structure/me-my-mybase-and-myclass.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Inheritance Basics<ept id="p1">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/inheritance-basics.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>継承の基本<ept id="p1">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/inheritance-basics.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>