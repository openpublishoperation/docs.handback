<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6d4b6e74ef3dfab3a7174da07cff7100fa4b2a2f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\program-structure\special-characters-in-code.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ae8eb42355c4f4e1260b0ecbb3b0d158f632c8e7</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">03d321aca28fb551375d64077755b28066cfd032</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Handback file name: lo-mt_special-characters-in-code.a1e5fe85ad5a196f403dce1750c4eafd1142cf23.ja-jp is different with handoff file name: special-characters-in-code.a1e5fe85ad5a196f403dce1750c4eafd1142cf23.ja-jp.</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Special Characters in Code (Visual Basic) | Microsoft Docs</source>
          <target state="translated">コード (Visual Basic) 内の特殊文字 |Microsoft ドキュメント</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Special Characters in Code (Visual Basic)</source>
          <target state="translated">コード内の特殊文字 (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Sometimes you have to use special characters in your code, that is, characters that are not alphabetical or numeric.</source>
          <target state="translated">場合がありますコードでは、アルファベットまたは数字ではない文字が特殊文字を使用する必要があります。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The punctuation and special characters in the <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> character set have various uses, from organizing program text to defining the tasks that the compiler or the compiled program performs.</source>
          <target state="translated">句読点と特殊文字に、<ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>文字セットに、コンパイラやコンパイル済みプログラムを実行するタスクの定義をプログラム テキストの整理から、さまざまな用途があります。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>They do not specify an operation to be performed.</source>
          <target state="translated">実行するオペレーションを指定するのには使用されません。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Parentheses</source>
          <target state="translated">かっこ</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Use parentheses when you define a procedure, such as a <ph id="ph1">`Sub`</ph> or <ph id="ph2">`Function`</ph>.</source>
          <target state="translated">など、プロシージャを定義するときに、かっこを使用して、<ph id="ph1">`Sub`</ph>または<ph id="ph2">`Function`</ph>です。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You must enclose all procedure argument lists in parentheses.</source>
          <target state="translated">すべてのプロシージャの引数リストをかっこで囲む必要があります。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You also use parentheses for putting variables or arguments into logical groups, especially to override the default order of operator precedence in a complex expression.</source>
          <target state="translated">複雑な式で演算子の優先順位の既定の順序を上書きするには、特に変数または引数を論理グループに配置することのかっこを使用します。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The following example illustrates this.</source>
          <target state="translated">次に例を示します。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnConventions#11<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/special-characters-in-code_1.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnConventions&amp;#11;<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/special-characters-in-code_1.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Following execution of the previous code, the value of <ph id="ph1">`d`</ph> is 8.225 and the value of <ph id="ph2">`e`</ph> is 3.</source>
          <target state="translated">次のコードでは、値の実行<ph id="ph1">`d`</ph>8.225 との値は、<ph id="ph2">`e`</ph>は 3 です。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The calculation for <ph id="ph1">`d`</ph> uses the default precedence of <ph id="ph2">`/`</ph> over <ph id="ph3">`+`</ph> and is equivalent to <ph id="ph4">`d = b + (c / a)`</ph>.</source>
          <target state="translated">計算<ph id="ph1">`d`</ph>の既定の優先順位を使用して<ph id="ph2">`/`</ph>経由で<ph id="ph3">`+`</ph>と同じ<ph id="ph4">`d = b + (c / a)`</ph>します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The parentheses in the calculation for <ph id="ph1">`e`</ph> override the default precedence.</source>
          <target state="translated">計算にかっこ<ph id="ph1">`e`</ph>既定の優先順位をオーバーライドします。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Separators</source>
          <target state="translated">[区切り記号]</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Separators do what their name suggests: they separate sections of code.</source>
          <target state="translated">区切り記号は、その名前が示す: コードのセクションを区切ります。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>, the separator character is the colon (<ph id="ph2">`:`</ph>).</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>、区切り記号はコロン (<ph id="ph2">`:`</ph>)。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Use separators when you want to include multiple statements on a single line instead of separate lines.</source>
          <target state="translated">別々 の行ではなく単一の行で複数のステートメントを追加する場合は、区切り記号を使用します。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This saves space and improves the readability of your code.</source>
          <target state="translated">領域を節約し、コードの読みやすさが向上します。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The following example shows three statements separated by colons.</source>
          <target state="translated">次の例は、コロンで区切られた&amp;3; つのステートメントを示しています。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnConventions#12<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/special-characters-in-code_2.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnConventions&amp;#12;<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/special-characters-in-code_2.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Break and Combine Statements in Code<ept id="p1">](../../../visual-basic/programming-guide/program-structure/how-to-break-and-combine-statements-in-code.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>方法: 区切りとコード内でステートメントを組み合わせて<ept id="p1">](../../../visual-basic/programming-guide/program-structure/how-to-break-and-combine-statements-in-code.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The colon (<ph id="ph1">`:`</ph>) character is also used to identify a statement label.</source>
          <target state="translated">コロン (<ph id="ph1">`:`</ph>) 文字は、ステートメント ラベルを識別するためにも使用します。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Label Statements<ept id="p1">](../../../visual-basic/programming-guide/program-structure/how-to-label-statements.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>方法: ラベル ステートメント<ept id="p1">](../../../visual-basic/programming-guide/program-structure/how-to-label-statements.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Concatenation</source>
          <target state="translated">連結</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`&amp;`</ph> operator for <bpt id="p1">*</bpt>concatenation<ept id="p1">*</ept>, or linking strings together.</source>
          <target state="translated">使用して、<ph id="ph1">`&amp;`</ph>の演算子<bpt id="p1">*</bpt>連結<ept id="p1">*</ept>、または文字列を一緒にリンクします。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Do not confuse it with the <ph id="ph1">`+`</ph> operator, which adds together numeric values.</source>
          <target state="translated">混同しないでください、<ph id="ph1">`+`</ph>演算子で、数値を加算します。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>If you use the <ph id="ph1">`+`</ph> operator to concatenate when you operate on numeric values, you can obtain incorrect results.</source>
          <target state="translated">使用する場合、<ph id="ph1">`+`</ph>数値を操作するときに連結する演算子を正しくない結果を得ることができます。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The following example demonstrates this.</source>
          <target state="translated">次に例を示します。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnConventions#13<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/special-characters-in-code_3.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnConventions&amp;#13;<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/special-characters-in-code_3.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Following execution of the previous code, the value of <ph id="ph1">`resultA`</ph> is 21.01 and the value of <ph id="ph2">`resultB`</ph> is "10.0111".</source>
          <target state="translated">次のコードでは、値の実行<ph id="ph1">`resultA`</ph>21.01 との値は、<ph id="ph2">`resultB`</ph>は「10.0111」です。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Member Access Operators</source>
          <target state="translated">メンバー アクセス演算子</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>To access a member of a type, you use the dot (<ph id="ph1">`.`</ph>) or exclamation point (<ph id="ph2">`!`</ph>) operator between the type name and the member name.</source>
          <target state="translated">型のメンバーにアクセスするには、ドットを使用 (<ph id="ph1">`.`</ph>) または感嘆符 (<ph id="ph2">`!`</ph>) 型名およびメンバー名の間の演算子です。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Dot (.) Operator</source>
          <target state="translated">ドット (.)演算子</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`.`</ph> operator on a class, structure, interface, or enumeration as a member access operator.</source>
          <target state="translated">使用して、<ph id="ph1">`.`</ph>クラス、構造体、インターフェイス、または列挙体のメンバー アクセス演算子としての演算子です。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The member can be a field, property, event, or method.</source>
          <target state="translated">メンバーは、フィールド、プロパティ、イベント、またはメソッドにできます。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The following example illustrates this.</source>
          <target state="translated">次に例を示します。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnConventions#14<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/special-characters-in-code_4.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnConventions&amp;#14;<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/special-characters-in-code_4.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Exclamation Point (!) Operator</source>
          <target state="translated">感嘆符 (!)演算子</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`!`</ph> operator only on a class or interface as a dictionary access operator.</source>
          <target state="translated">使用して、<ph id="ph1">`!`</ph>ディクショナリ アクセス演算子としてクラスまたはインターフェイスでのみ演算子。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The class or interface must have a default property that accepts a single <ph id="ph1">`String`</ph> argument.</source>
          <target state="translated">クラスまたはインターフェイスが既定のプロパティを&amp;1; つを受け付ける必要<ph id="ph1">`String`</ph>引数。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The identifier immediately following the <ph id="ph1">`!`</ph> operator becomes the argument value passed to the default property as a string.</source>
          <target state="translated">直後の識別子、<ph id="ph1">`!`</ph>演算子が文字列として既定のプロパティに渡される引数の値になります。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The following example demonstrates this.</source>
          <target state="translated">次に例を示します。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnConventions#15<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/special-characters-in-code_5.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnConventions&amp;#15;<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/special-characters-in-code_5.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The three output lines of <ph id="ph1">`MsgBox`</ph> all display the value <ph id="ph2">`32856`</ph>.</source>
          <target state="translated">3 つの出力行の<ph id="ph1">`MsgBox`</ph>値を表示すべて<ph id="ph2">`32856`</ph>です。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The first line uses the traditional access to property <ph id="ph1">`index`</ph>, the second makes use of the fact that <ph id="ph2">`index`</ph> is the default property of class <ph id="ph3">`hasDefault`</ph>, and the third uses dictionary access to the class.</source>
          <target state="translated">最初の行がプロパティには、従来のアクセスを使用して<ph id="ph1">`index`</ph>、もう&amp;1; つという事実を利用する<ph id="ph2">`index`</ph>クラスの既定のプロパティは、<ph id="ph3">`hasDefault`</ph>クラスへのアクセスのディクショナリを使用しています。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Note that the second operand of the <ph id="ph1">`!`</ph> operator must be a valid Visual Basic identifier not enclosed in double quotation marks (<ph id="ph2">`" "`</ph>).</source>
          <target state="translated">なおの&amp;2; 番目のオペランド、<ph id="ph1">`!`</ph>演算子は二重引用符で囲まれていない、有効な Visual Basic 識別子である必要があります (<ph id="ph2">`" "`</ph>)。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>In other words, you cannot use a string literal or string variable.</source>
          <target state="translated">つまり、リテラル文字列または文字列変数を使用することはできません。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The following change to the last line of the <ph id="ph1">`MsgBox`</ph> call generates an error because <ph id="ph2">`"X"`</ph> is an enclosed string literal.</source>
          <target state="translated">次の行を変更し、最後、<ph id="ph1">`MsgBox`</ph>ために、呼び出しがエラーを生成<ph id="ph2">`"X"`</ph>囲まれた文字列リテラルでは。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>References to default collections must be explicit.</source>
          <target state="translated">既定のコレクションへの参照を明示的にする必要があります。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>In particular, you cannot use the <ph id="ph1">`!`</ph> operator on a late-bound variable.</source>
          <target state="translated">具体的には、使用することはできません、<ph id="ph1">`!`</ph>演算子を遅延バインディングされた変数にします。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`!`</ph> character is also used as the <ph id="ph2">`Single`</ph> type character.</source>
          <target state="translated"><ph id="ph1">`!`</ph>としても使用される文字、<ph id="ph2">`Single`</ph>文字を入力します。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">関連項目</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Program Structure and Code Conventions<ept id="p1">](../../../visual-basic/programming-guide/program-structure/program-structure-and-code-conventions.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>プログラム構造とコード規則<ept id="p1">](../../../visual-basic/programming-guide/program-structure/program-structure-and-code-conventions.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Type Characters<ept id="p1">](../../../visual-basic/programming-guide/language-features/data-types/type-characters.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>型文字<ept id="p1">](../../../visual-basic/programming-guide/language-features/data-types/type-characters.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>