<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">001ea1cb5e651b95f808eefd47fd468f556550a1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\statements.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">51d8c0b1e82c05d55d408985a200a190f434ef24</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6931b6f08eb6c22cd973a2ae2fc585297fa9811a</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Handback file name: lo-mt_statements.c22ef5b384b09e8f3dc98bab97e8f3d356ea4f5e.ja-jp is different with handoff file name: statements.c22ef5b384b09e8f3dc98bab97e8f3d356ea4f5e.ja-jp.</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Statements in Visual Basic | Microsoft Docs</source>
          <target state="translated">Visual Basic におけるステートメント |Microsoft ドキュメント</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Statements in Visual Basic</source>
          <target state="translated">Visual Basic におけるステートメント</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A statement in <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> is a complete instruction.</source>
          <target state="translated">内のステートメント<ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>は完全な命令します。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>It can contain keywords, operators, variables, constants, and expressions.</source>
          <target state="translated">これには、キーワード、演算子、変数、定数、および式を含めることができます。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Each statement belongs to one of the following categories:</source>
          <target state="translated">各ステートメントは、次のカテゴリのいずれかに属します。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Declaration Statements<ept id="p1">**</ept>, which name a variable, constant, or procedure, and can also specify a data type.</source>
          <target state="translated"><bpt id="p1">**</bpt>宣言ステートメント<ept id="p1">**</ept>変数、定数、またはプロシージャの名前し、データ型を指定することもできます。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Executable Statements<ept id="p1">**</ept>, which initiate actions.</source>
          <target state="translated"><bpt id="p1">**</bpt>実行可能なステートメント<ept id="p1">**</ept>、これが操作を開始します。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>These statements can call a method or function, and they can loop or branch through blocks of code.</source>
          <target state="translated">これらのステートメントは、メソッドまたは関数を呼び出すことができ、ループや分岐のコード ブロックすることができます。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Executable statements include <bpt id="p1">**</bpt>Assignment Statements<ept id="p1">**</ept>, which assign a value or expression to a variable or constant.</source>
          <target state="translated">実行可能なステートメントを含める<bpt id="p1">**</bpt>代入ステートメント<ept id="p1">**</ept>、値または式を代入する変数または定数。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This topic describes each category.</source>
          <target state="translated">このトピックでは、各カテゴリについて説明します。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Also, this topic describes how to combine multiple statements on a single line and how to continue a statement over multiple lines.</source>
          <target state="translated">また、このトピックは、1 行に複数のステートメントを結合する方法と、ステートメントを複数行にわたって継続する方法について説明します。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Declaration Statements</source>
          <target state="translated">宣言ステートメント</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You use declaration statements to name and define procedures, variables, properties, arrays, and constants.</source>
          <target state="translated">名前を指定し、プロシージャ、変数、プロパティ、配列、および定数を定義するには、宣言のステートメントを使用します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>When you declare a programming element, you can also define its data type, access level, and scope.</source>
          <target state="translated">プログラミングの要素を宣言するときは、そのデータ型、アクセス レベル、およびスコープも定義できます。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Declared Element Characteristics<ept id="p1">](../../../visual-basic/programming-guide/language-features/declared-elements/declared-element-characteristics.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>宣言された要素の特性<ept id="p1">](../../../visual-basic/programming-guide/language-features/declared-elements/declared-element-characteristics.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The following example contains three declarations.</source>
          <target state="translated">次の例には、3 つの宣言が含まれています。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#80<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_1.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements #&amp;80;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_1.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The first declaration is the <ph id="ph1">`Sub`</ph> statement.</source>
          <target state="translated">最初の宣言は、<ph id="ph1">`Sub`</ph>ステートメントです。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Together with its matching <ph id="ph1">`End Sub`</ph> statement, it declares a procedure named <ph id="ph2">`applyFormat`</ph>.</source>
          <target state="translated">そのに一致すると共に<ph id="ph1">`End Sub`</ph>という名前のプロシージャ宣言ステートメント、<ph id="ph2">`applyFormat`</ph>です。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>It also specifies that <ph id="ph1">`applyFormat`</ph> is <ph id="ph2">`Public`</ph>, which means that any code that can refer to it can call it.</source>
          <target state="translated">指定<ph id="ph1">`applyFormat`</ph>は<ph id="ph2">`Public`</ph>、つまり、それを参照できるすべてのコードで呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The second declaration is the <ph id="ph1">`Const`</ph> statement, which declares the constant <ph id="ph2">`limit`</ph>, specifying the <ph id="ph3">`Integer`</ph> data type and a value of 33.</source>
          <target state="translated">2 番目の宣言は、<ph id="ph1">`Const`</ph>定数を宣言するステートメント<ph id="ph2">`limit`</ph>を指定して、<ph id="ph3">`Integer`</ph>データ型と 33 の値。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The third declaration is the <ph id="ph1">`Dim`</ph> statement, which declares the variable <ph id="ph2">`thisWidget`</ph>.</source>
          <target state="translated">3 番目の宣言は、<ph id="ph1">`Dim`</ph>変数を宣言するステートメント<ph id="ph2">`thisWidget`</ph>します。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The data type is a specific object, namely an object created from the <ph id="ph1">`Widget`</ph> class.</source>
          <target state="translated">データ型は、特定のオブジェクト、つまりからオブジェクトが作成される、<ph id="ph1">`Widget`</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>You can declare a variable to be of any elementary data type or of any object type that is exposed in the application you are using.</source>
          <target state="translated">任意の基本データ型の場合に使用するアプリケーションで公開されているオブジェクトの種類の場合に変数を宣言することができます。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Initial Values</source>
          <target state="translated">初期値</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>When the code containing a declaration statement runs, <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> reserves the memory required for the declared element.</source>
          <target state="translated">宣言ステートメントを含むコードを実行すると<ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>は宣言された要素に必要なメモリを確保します。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If the element holds a value, <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> initializes it to the default value for its data type.</source>
          <target state="translated">要素には、値が含まれる場合<ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>そのデータ型の既定値に初期化します。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For more information, see "Behavior" in <bpt id="p1">[</bpt>Dim Statement<ept id="p1">](../../../visual-basic/language-reference/statements/dim-statement.md)</ept>.</source>
          <target state="translated">詳細については、「動作」を参照してください<bpt id="p1">[</bpt>Dim ステートメント<ept id="p1">](../../../visual-basic/language-reference/statements/dim-statement.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You can assign an initial value to a variable as part of its declaration, as the following example illustrates.</source>
          <target state="translated">次の例に示すように、その宣言の一部として変数に初期値を割り当てることができます。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#81<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_2.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements #&amp;81;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_2.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If a variable is an object variable, you can explicitly create an instance of its class when you declare it by using the <bpt id="p1">[</bpt>New Operator<ept id="p1">](../../../visual-basic/language-reference/operators/new-operator.md)</ept> keyword, as the following example illustrates.</source>
          <target state="translated">使用して宣言するときに、明示的にそのクラスのインスタンスを作成する変数がオブジェクト変数の場合、 <bpt id="p1">[</bpt>New 演算子<ept id="p1">](../../../visual-basic/language-reference/operators/new-operator.md)</ept>キーワードとして次の例を示しています。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#82<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_3.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements #&amp;82;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_3.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Note that the initial value you specify in a declaration statement is not assigned to a variable until execution reaches its declaration statement.</source>
          <target state="translated">宣言ステートメントで指定した初期値が割り当てられていないことを変数にその宣言ステートメントに達するまでに注意してください。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Until that time, the variable contains the default value for its data type.</source>
          <target state="translated">それまでは、変数には、そのデータ型の既定値が含まれています。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Executable Statements</source>
          <target state="translated">実行可能なステートメント</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>An executable statement performs an action.</source>
          <target state="translated">実行可能なステートメントでは、アクションを実行します。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>It can call a procedure, branch to another place in the code, loop through several statements, or evaluate an expression.</source>
          <target state="translated">手順については、いくつかのステートメントをループ処理、コードの別の場所に分岐を呼び出すしたり、式を評価することができます。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>An assignment statement is a special case of an executable statement.</source>
          <target state="translated">代入ステートメントは、実行可能なステートメントの特殊なケースです。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The following example uses an <ph id="ph1">`If...Then...Else`</ph> control structure to run different blocks of code based on the value of a variable.</source>
          <target state="translated">次の例では、<ph id="ph1">`If...Then...Else`</ph>変数の値に基づくコードの別のブロックを実行する構造を制御します。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Within each block of code, a <ph id="ph1">`For...Next`</ph> loop runs a specified number of times.</source>
          <target state="translated">各コード ブロック内で、<ph id="ph1">`For...Next`</ph>ループは、指定した回数だけを実行します。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#83<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_4.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements&amp;#83;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_4.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`If`</ph> statement in the preceding example checks the value of the parameter <ph id="ph2">`clockwise`</ph>.</source>
          <target state="translated"><ph id="ph1">`If`</ph>前の例ではステートメントのパラメーターの値をチェックする<ph id="ph2">`clockwise`</ph>です。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>If the value is <ph id="ph1">`True`</ph>, it calls the <ph id="ph2">`spinClockwise`</ph> method of <ph id="ph3">`aWidget`</ph>.</source>
          <target state="translated">値の場合<ph id="ph1">`True`</ph>を呼び出す、<ph id="ph2">`spinClockwise`</ph>メソッドの<ph id="ph3">`aWidget`</ph>です。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If the value is <ph id="ph1">`False`</ph>, it calls the <ph id="ph2">`spinCounterClockwise`</ph> method of <ph id="ph3">`aWidget`</ph>.</source>
          <target state="translated">値の場合<ph id="ph1">`False`</ph>を呼び出す、<ph id="ph2">`spinCounterClockwise`</ph>メソッドの<ph id="ph3">`aWidget`</ph>です。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`If...Then...Else`</ph> control structure ends with <ph id="ph2">`End If`</ph>.</source>
          <target state="translated"><ph id="ph1">`If...Then...Else`</ph>制御構造がで終わる<ph id="ph2">`End If`</ph>します。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`For...Next`</ph> loop within each block calls the appropriate method a number of times equal to the value of the <ph id="ph2">`revolutions`</ph> parameter.</source>
          <target state="translated"><ph id="ph1">`For...Next`</ph>各ブロック内でループ メソッドを呼び出して、適切な何度もの値と等しく、<ph id="ph2">`revolutions`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Assignment Statements</source>
          <target state="translated">代入ステートメント</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Assignment statements carry out assignment operations, which consist of taking the value on the right side of the assignment operator (<ph id="ph1">`=`</ph>) and storing it in the element on the left, as in the following example.</source>
          <target state="translated">代入ステートメントは、代入演算子の右側にある値を取得するので構成されている代入演算を実行 (<ph id="ph1">`=`</ph>) し、次の例のように、左の要素に格納することです。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#73<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_5.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements #&amp;73;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_5.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>In the preceding example, the assignment statement stores the literal value 42 in the variable <ph id="ph1">`v`</ph>.</source>
          <target state="translated">代入ステートメントが、変数のリテラル値 42 を格納する前の例で<ph id="ph1">`v`</ph>します。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Eligible Programming Elements</source>
          <target state="translated">使用できるプログラミング要素</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The programming element on the left side of the assignment operator must be able to accept and store a value.</source>
          <target state="translated">代入演算子の左側にあるプログラミングの要素は、そのまま使用し、値を格納できる必要があります。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>This means it must be a variable or property that is not <bpt id="p1">[</bpt>ReadOnly<ept id="p1">](../../../visual-basic/language-reference/modifiers/readonly.md)</ept>, or it must be an array element.</source>
          <target state="translated">つまり、変数またはプロパティがある必要があります<bpt id="p1">[</bpt>ReadOnly<ept id="p1">](../../../visual-basic/language-reference/modifiers/readonly.md)</ept>、または配列の要素があります。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>In the context of an assignment statement, such an element is sometimes called an <bpt id="p1">*</bpt>lvalue<ept id="p1">*</ept>, for "left value."</source>
          <target state="translated">代入ステートメントのコンテキストでこのような要素とも呼ばれます、<bpt id="p1">*</bpt>左辺値<ept id="p1">*</ept>、「左辺値です」の。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The value on the right side of the assignment operator is generated by an expression, which can consist of any combination of literals, constants, variables, properties, array elements, other expressions, or function calls.</source>
          <target state="translated">代入演算子の右側にある値は、リテラル、定数、変数、プロパティ、配列の要素、その他の式、または関数呼び出しの任意の組み合わせから成る式によって生成されます。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The following example illustrates this.</source>
          <target state="translated">次に例を示します。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#74<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_6.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements #&amp;74;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_6.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The preceding example adds the value held in variable <ph id="ph1">`y`</ph> to the value held in variable <ph id="ph2">`z`</ph>, and then adds the value returned by the call to function <ph id="ph3">`findResult`</ph>.</source>
          <target state="translated">上記の例では、変数に保持された値<ph id="ph1">`y`</ph>変数に保持された値に<ph id="ph2">`z`</ph>、関数への呼び出しによって返される値を追加および<ph id="ph3">`findResult`</ph>です。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The total value of this expression is then stored in variable <ph id="ph1">`x`</ph>.</source>
          <target state="translated">この式の合計値が変数に格納し、<ph id="ph1">`x`</ph>です。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Data Types in Assignment Statements</source>
          <target state="translated">代入ステートメント内のデータ型</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>In addition to numeric values, the assignment operator can also assign <ph id="ph1">`String`</ph> values, as the following example illustrates.</source>
          <target state="translated">代入演算子も代入するだけでなく、数値<ph id="ph1">`String`</ph>値は、次の例に示すようにします。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#75<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_7.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements #&amp;75;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_7.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>You can also assign <ph id="ph1">`Boolean`</ph> values, using either a <ph id="ph2">`Boolean`</ph> literal or a <ph id="ph3">`Boolean`</ph> expression, as the following example illustrates.</source>
          <target state="translated">割り当てることも<ph id="ph1">`Boolean`</ph>値のいずれかを使用して、<ph id="ph2">`Boolean`</ph>リテラルまたは<ph id="ph3">`Boolean`</ph>式で次の例を示しています。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#76<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_8.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements #&amp;76;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_8.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Similarly, you can assign appropriate values to programming elements of the <ph id="ph1">`Char`</ph>, <ph id="ph2">`Date`</ph>, or <ph id="ph3">`Object`</ph> data type.</source>
          <target state="translated">同様のプログラミング要素への適切な値を割り当てることができます、 <ph id="ph1">`Char`</ph>、 <ph id="ph2">`Date`</ph>、または<ph id="ph3">`Object`</ph>データ型。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>You can also assign an object instance to an element declared to be of the class from which that instance is created.</source>
          <target state="translated">そのインスタンスの作成元となるクラスを指定して宣言された要素をオブジェクトのインスタンスを割り当てることもできます。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Compound Assignment Statements</source>
          <target state="translated">複合代入ステートメント</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Compound assignment statements<ept id="p1">*</ept> first perform an operation on an expression before assigning it to a programming element.</source>
          <target state="translated"><bpt id="p1">*</bpt>複合代入ステートメント<ept id="p1">*</ept>まずプログラミング要素に割り当てる前に、式に対して操作を実行します。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The following example illustrates one of these operators, <ph id="ph1">`+=`</ph>, which increments the value of the variable on the left side of the operator by the value of the expression on the right.</source>
          <target state="translated">次の例では、これらの演算子のいずれかを示しています<ph id="ph1">`+=`</ph>右側の式の値によって、演算子の左側にある変数の値をインクリメントします。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#77<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_9.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements #&amp;77;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_9.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The preceding example adds 1 to the value of <ph id="ph1">`n`</ph>, and then stores that new value in <ph id="ph2">`n`</ph>.</source>
          <target state="translated">前の例の値に 1 を加算する<ph id="ph1">`n`</ph>でその新しい値を格納および<ph id="ph2">`n`</ph>です。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>It is a shorthand equivalent of the following statement:</source>
          <target state="translated">短縮形である、次のステートメントに相当します。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#78<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_10.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements #&amp;78;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_10.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>A variety of compound assignment operations can be performed using operators of this type.</source>
          <target state="translated">この種類の演算子を使用して、さまざまな複合代入演算を実行できます。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>For a list of these operators and more information about them, see <bpt id="p1">[</bpt>Assignment Operators<ept id="p1">](../../../visual-basic/language-reference/operators/assignment-operators.md)</ept>.</source>
          <target state="translated">これらの演算子とその詳細情報の一覧は、次を参照してください。<bpt id="p1">[</bpt>代入演算子<ept id="p1">](../../../visual-basic/language-reference/operators/assignment-operators.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The concatenation assignment operator (<ph id="ph1">`&amp;=`</ph>) is useful for adding a string to the end of already existing strings, as the following example illustrates.</source>
          <target state="translated">連結代入演算子 (<ph id="ph1">`&amp;=`</ph>) の既存の最後に文字列を追加するために便利ですが、文字列を次の例に示すようにします。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#79<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_11.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements #&amp;79;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_11.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Type Conversions in Assignment Statements</source>
          <target state="translated">代入ステートメントでは型変換</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The value you assign to a variable, property, or array element must be of a data type appropriate to that destination element.</source>
          <target state="translated">変数、プロパティ、または配列要素に割り当てる値は、代入先の要素に適切なデータ型でなければなりません。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>In general, you should try to generate a value of the same data type as that of the destination element.</source>
          <target state="translated">一般に、目的の要素のと同じデータ型の値を生成しようとする必要があります。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>However, some types can be converted to other types during assignment.</source>
          <target state="translated">ただし、一部の種類は、代入時に他の型に変換できます。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>For information on converting between data types, see <bpt id="p1">[</bpt>Type Conversions in Visual Basic<ept id="p1">](../../../visual-basic/programming-guide/language-features/data-types/type-conversions.md)</ept>.</source>
          <target state="translated">データ型の変換方法の詳細については、次を参照してください。 <bpt id="p1">[</bpt>Visual Basic における型変換<ept id="p1">](../../../visual-basic/programming-guide/language-features/data-types/type-conversions.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>In brief, <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> automatically converts a value of a given type to any other type to which it widens.</source>
          <target state="translated">簡単に言えば、<ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>拡大変換、他の種類を指定した型の値を自動的に変換します。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>widening conversion<ept id="p1">*</ept> is one in that always succeeds at run time and does not lose any data.</source>
          <target state="translated">A<bpt id="p1">*</bpt>拡大変換<ept id="p1">*</ept>はそのいずれかが常に実行時に成功し、データが失われない。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> converts an <ph id="ph2">`Integer`</ph> value to <ph id="ph3">`Double`</ph> when appropriate, because <ph id="ph4">`Integer`</ph> widens to <ph id="ph5">`Double`</ph>.</source>
          <target state="translated">たとえば、<ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>に変換、<ph id="ph2">`Integer`</ph>値を<ph id="ph3">`Double`</ph>該当する場合に、<ph id="ph4">`Integer`</ph>に拡大変換<ph id="ph5">`Double`</ph>します。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Widening and Narrowing Conversions<ept id="p1">](../../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>拡大変換と縮小変換<ept id="p1">](../../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Narrowing conversions<ept id="p1">*</ept> (those that are not widening) carry a risk of failure at run time, or of data loss.</source>
          <target state="translated"><bpt id="p1">*</bpt>縮小変換<ept id="p1">*</ept>(は、拡大しないもの) の実行時にエラーまたはデータ損失のリスクを実行します。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>You can perform a narrowing conversion explicitly by using a type conversion function, or you can direct the compiler to perform all conversions implicitly by setting <ph id="ph1">`Option Strict Off`</ph>.</source>
          <target state="translated">縮小変換を明示的に実行するには型変換関数を使用して、またはコンパイラに設定して、すべての変換を暗黙的に実行を行うことができます<ph id="ph1">`Option Strict Off`</ph>します。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Implicit and Explicit Conversions<ept id="p1">](../../../visual-basic/programming-guide/language-features/data-types/implicit-and-explicit-conversions.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>暗黙的および明示的な変換<ept id="p1">](../../../visual-basic/programming-guide/language-features/data-types/implicit-and-explicit-conversions.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Putting Multiple Statements on One Line</source>
          <target state="translated">1 つの行に複数のステートメントを配置します。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>You can have multiple statements on a single line separated by the colon (<ph id="ph1">`:`</ph>) character.</source>
          <target state="translated">複数のステートメントは、コロンで区切られた&amp;1; 行に配置できます (<ph id="ph1">`:`</ph>) 文字です。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The following example illustrates this.</source>
          <target state="translated">次に例を示します。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#70<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_12.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements #&amp;70;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_12.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Though occasionally convenient, this form of syntax makes your code hard to read and maintain.</source>
          <target state="translated">ただし、場合によって不便なの構文には、この形式により、コードの読み取りおよびメンテナンスが困難です。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Thus, it is recommended that you keep one statement to a line.</source>
          <target state="translated">したがって、1 つのステートメントの行にしておくことをお勧めします。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Continuing a Statement over Multiple Lines</source>
          <target state="translated">複数の行にまたがるステートメント</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>A statement usually fits on one line, but when it is too long, you can continue it onto the next line using a line-continuation sequence, which consists of a space followed by an underscore character (<ph id="ph1">`_`</ph>) followed by a carriage return.</source>
          <target state="translated">ステートメントは、通常&amp;1; つの行に収まるが長すぎるときに、後にアンダー スコア文字でスペースから成る行連結シーケンスを使用して次の行に続けることができます (<ph id="ph1">`_`</ph>) 後にキャリッジ リターン。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>In the following example, the <ph id="ph1">`MsgBox`</ph> executable statement is continued over two lines.</source>
          <target state="translated">次の例では、<ph id="ph1">`MsgBox`</ph>実行可能なステートメントは&amp;2; つの行を継続します。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#71<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_13.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements #&amp;71;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_13.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Implicit Line Continuation</source>
          <target state="translated">暗黙的な行継続</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>In many cases, you can continue a statement on the next consecutive line without using the underscore character (_).</source>
          <target state="translated">多くの場合、アンダー スコア文字 (_) を使用せず、次の連続する行で、ステートメントを続行できます。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The following table lists the syntax elements that implicitly continue the statement on the next line of code.</source>
          <target state="translated">次の表には、次のコード行で、ステートメントが暗黙的に継続構文要素が一覧表示します。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Syntax element</source>
          <target state="translated">構文要素</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">例</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>After a comma (<ph id="ph1">`,`</ph>).</source>
          <target state="translated">コンマの後 (<ph id="ph1">`,`</ph>)。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation#1<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_14.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation&amp;#1;<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_14.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>After an open parenthesis (<ph id="ph1">`(`</ph>) or before a closing parenthesis (<ph id="ph2">`)`</ph>).</source>
          <target state="translated">かっこの後 (<ph id="ph1">`(`</ph>) または閉じかっこの前に、(<ph id="ph2">`)`</ph>)。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation#2<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_15.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation&amp;#2;<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_15.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>After an open curly brace (<ph id="ph1">`{`</ph>) or before a closing curly brace (<ph id="ph2">`}`</ph>).</source>
          <target state="translated">開いている中かっこの後 (<ph id="ph1">`{`</ph>) または右中かっこの前に (<ph id="ph2">`}`</ph>)。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation#3<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_16.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation&amp;#3;<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_16.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Object Initializers: Named and Anonymous Types<ept id="p1">](../../../visual-basic/programming-guide/language-features/objects-and-classes/object-initializers-named-and-anonymous-types.md)</ept> or <bpt id="p2">[</bpt>Collection Initializers<ept id="p2">](../../../visual-basic/programming-guide/language-features/collection-initializers/index.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>オブジェクト初期化子: 名前付きおよび匿名型<ept id="p1">](../../../visual-basic/programming-guide/language-features/objects-and-classes/object-initializers-named-and-anonymous-types.md)</ept>または<bpt id="p2">[</bpt>コレクション初期化子<ept id="p2">](../../../visual-basic/programming-guide/language-features/collection-initializers/index.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>After an open embedded expression (<ph id="ph1">`&lt;%=`</ph>) or before the close of an embedded expression (<ph id="ph2">`%&gt;`</ph>) within an XML literal.</source>
          <target state="translated">開いた後は、埋め込み式 (<ph id="ph1">`&lt;%=`</ph>) や組み込み式の終了前に (<ph id="ph2">`%&gt;`</ph>) XML リテラル内です。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation#4<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_17.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation&amp;4;<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_17.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Embedded Expressions in XML<ept id="p1">](../../../visual-basic/programming-guide/language-features/xml/embedded-expressions-in-xml.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。 <bpt id="p1">[</bpt>XML での埋め込み式<ept id="p1">](../../../visual-basic/programming-guide/language-features/xml/embedded-expressions-in-xml.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>After the concatenation operator (<ph id="ph1">`&amp;`</ph>).</source>
          <target state="translated">連結演算子の後に (<ph id="ph1">`&amp;`</ph>)。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnConventions#9<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_18.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnConventions&amp;#9;<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_18.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Operators Listed by Functionality<ept id="p1">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>機能別の演算子一覧<ept id="p1">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>After assignment operators (<ph id="ph1">`=`</ph>, <ph id="ph2">`&amp;=`</ph>, <ph id="ph3">`:=`</ph>, <ph id="ph4">`+=`</ph>, <ph id="ph5">`-=`</ph>, <ph id="ph6">`*=`</ph>, <ph id="ph7">`/=`</ph>, <ph id="ph8">`\=`</ph>, <ph id="ph9">`^=`</ph>, <ph id="ph10">`&lt;&lt;=`</ph>, <ph id="ph11">`&gt;&gt;=`</ph>).</source>
          <target state="translated">After assignment operators (<ph id="ph1">`=`</ph>, <ph id="ph2">`&amp;=`</ph>, <ph id="ph3">`:=`</ph>, <ph id="ph4">`+=`</ph>, <ph id="ph5">`-=`</ph>, <ph id="ph6">`*=`</ph>, <ph id="ph7">`/=`</ph>, <ph id="ph8">`\=`</ph>, <ph id="ph9">`^=`</ph>, <ph id="ph10">`&lt;&lt;=`</ph>, <ph id="ph11">`&gt;&gt;=`</ph>).</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation#5<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_19.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation&amp;#5;<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_19.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Operators Listed by Functionality<ept id="p1">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>機能別の演算子一覧<ept id="p1">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>After binary operators (<ph id="ph1">`+`</ph>, <ph id="ph2">`-`</ph>, <ph id="ph3">`/`</ph>, <ph id="ph4">`*`</ph>, <ph id="ph5">`Mod`</ph>, <ph id="ph6">`&lt;&gt;`</ph>, <ph id="ph7">`&lt;`</ph>, <ph id="ph8">`&gt;`</ph>, <ph id="ph9">`&lt;=`</ph>, <ph id="ph10">`&gt;=`</ph>, <ph id="ph11">`^`</ph>, <ph id="ph12">`&gt;&gt;`</ph>, <ph id="ph13">`&lt;&lt;`</ph>, <ph id="ph14">`And`</ph>, <ph id="ph15">`AndAlso`</ph>, <ph id="ph16">`Or`</ph>, <ph id="ph17">`OrElse`</ph>, <ph id="ph18">`Like`</ph>, <ph id="ph19">`Xor`</ph>) within an expression.</source>
          <target state="translated">After binary operators (<ph id="ph1">`+`</ph>, <ph id="ph2">`-`</ph>, <ph id="ph3">`/`</ph>, <ph id="ph4">`*`</ph>, <ph id="ph5">`Mod`</ph>, <ph id="ph6">`&lt;&gt;`</ph>, <ph id="ph7">`&lt;`</ph>, <ph id="ph8">`&gt;`</ph>, <ph id="ph9">`&lt;=`</ph>, <ph id="ph10">`&gt;=`</ph>, <ph id="ph11">`^`</ph>, <ph id="ph12">`&gt;&gt;`</ph>, <ph id="ph13">`&lt;&lt;`</ph>, <ph id="ph14">`And`</ph>, <ph id="ph15">`AndAlso`</ph>, <ph id="ph16">`Or`</ph>, <ph id="ph17">`OrElse`</ph>, <ph id="ph18">`Like`</ph>, <ph id="ph19">`Xor`</ph>) within an expression.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation#7<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_20.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation&amp;#7;<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_20.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Operators Listed by Functionality<ept id="p1">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>機能別の演算子一覧<ept id="p1">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>After the <ph id="ph1">`Is`</ph> and <ph id="ph2">`IsNot`</ph> operators.</source>
          <target state="translated">後に、<ph id="ph1">`Is`</ph>と<ph id="ph2">`IsNot`</ph>演算子。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation#8<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_21.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation&amp;#8;<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_21.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Operators Listed by Functionality<ept id="p1">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>機能別の演算子一覧<ept id="p1">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>After a member qualifier character (<ph id="ph1">`.`</ph>) and before the member name.</source>
          <target state="translated">メンバー修飾子文字の後に (<ph id="ph1">`.`</ph>) およびメンバー名の前にします。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>However, you must include a line-continuation character (_) following a member qualifier character when you are using the <ph id="ph1">`With`</ph> statement or supplying values in the initialization list for a type.</source>
          <target state="translated">ただし、次のメンバーの修飾子文字を使用しているときに行連結文字 (_) を含める必要があります、<ph id="ph1">`With`</ph>ステートメントまたは型の初期化リストの値を指定します。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Consider breaking the line after the assignment operator (for example, <ph id="ph1">`=`</ph>) when you are using <ph id="ph2">`With`</ph> statements or object initialization lists.</source>
          <target state="translated">代入演算子の後で改行を検討してください (たとえば、 <ph id="ph1">`=`</ph>) を使用する場合<ph id="ph2">`With`</ph>ステートメントやオブジェクトの初期化リストです。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation#5<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_19.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation&amp;#5;<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_19.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation#14<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_22.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation&amp;#14;<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_22.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>With...End With Statement<ept id="p1">](../../../visual-basic/language-reference/statements/with-end-with-statement.md)</ept> or <bpt id="p2">[</bpt>Object Initializers: Named and Anonymous Types<ept id="p2">](../../../visual-basic/programming-guide/language-features/objects-and-classes/object-initializers-named-and-anonymous-types.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください<bpt id="p1">[</bpt>としています.。ステートメントで終了して<ept id="p1">](../../../visual-basic/language-reference/statements/with-end-with-statement.md)</ept>または<bpt id="p2">[</bpt>オブジェクト初期化子: 名前付きおよび匿名型<ept id="p2">](../../../visual-basic/programming-guide/language-features/objects-and-classes/object-initializers-named-and-anonymous-types.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>After an XML axis property qualifier (<ph id="ph1">`.`</ph> or <ph id="ph2">`.@`</ph> or <ph id="ph3">`...`</ph>).</source>
          <target state="translated">XML 軸プロパティ修飾子後 (<ph id="ph1">`.`</ph>または<ph id="ph2">`.@`</ph>または<ph id="ph3">`...`</ph>)。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>However, you must include a line-continuation character (_) when you specify a member qualifier when you are using the <ph id="ph1">`With`</ph> keyword.</source>
          <target state="translated">使用しているときに、メンバーの修飾子を指定すると、行連結文字 (_) を含める必要がありますが、<ph id="ph1">`With`</ph>キーワードです。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation#9<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_23.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation&amp;#9;<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_23.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>XML Axis Properties<ept id="p1">](../../../visual-basic/language-reference/xml-axis/xml-axis-properties.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。 <bpt id="p1">[</bpt>XML 軸プロパティ<ept id="p1">](../../../visual-basic/language-reference/xml-axis/xml-axis-properties.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>After a less-than sign (&lt;) or before a greater-than sign (<ph id="ph1">`&gt;`</ph>) when you specify an attribute.</source>
          <target state="translated">小後・不等号 (&lt;) or="" before="" a="" greater-than="" sign=""&gt;&lt;/)&gt;<ph id="ph1">`&gt;`</ph>) 属性を指定するとします。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Also after a greater-than sign (<ph id="ph1">`&gt;`</ph>) when you specify an attribute.</source>
          <target state="translated">値が高い後も-不等号 (<ph id="ph1">`&gt;`</ph>) 属性を指定するとします。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>However, you must include a line-continuation character (_) when you specify assembly-level or module-level attributes.</source>
          <target state="translated">ただし、アセンブリ レベルまたはモジュール レベルの属性を指定する場合は、行連結文字 (_) を含める必要があります。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation#10<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_24.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation&amp;#10;<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_24.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Attributes overview<ept id="p1">](../../../visual-basic/programming-guide/concepts/attributes/index.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>属性の概要<ept id="p1">](../../../visual-basic/programming-guide/concepts/attributes/index.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Before and after query operators (<ph id="ph1">`Aggregate`</ph>, <ph id="ph2">`Distinct`</ph>, <ph id="ph3">`From`</ph>, <ph id="ph4">`Group By`</ph>, <ph id="ph5">`Group Join`</ph>, <ph id="ph6">`Join`</ph>, <ph id="ph7">`Let`</ph>, <ph id="ph8">`Order By`</ph>, <ph id="ph9">`Select`</ph>, <ph id="ph10">`Skip`</ph>, <ph id="ph11">`Skip While`</ph>, <ph id="ph12">`Take`</ph>, <ph id="ph13">`Take While`</ph>, <ph id="ph14">`Where`</ph>, <ph id="ph15">`In`</ph>, <ph id="ph16">`Into`</ph>, <ph id="ph17">`On`</ph>, <ph id="ph18">`Ascending`</ph>, and <ph id="ph19">`Descending`</ph>).</source>
          <target state="translated">Before and after query operators (<ph id="ph1">`Aggregate`</ph>, <ph id="ph2">`Distinct`</ph>, <ph id="ph3">`From`</ph>, <ph id="ph4">`Group By`</ph>, <ph id="ph5">`Group Join`</ph>, <ph id="ph6">`Join`</ph>, <ph id="ph7">`Let`</ph>, <ph id="ph8">`Order By`</ph>, <ph id="ph9">`Select`</ph>, <ph id="ph10">`Skip`</ph>, <ph id="ph11">`Skip While`</ph>, <ph id="ph12">`Take`</ph>, <ph id="ph13">`Take While`</ph>, <ph id="ph14">`Where`</ph>, <ph id="ph15">`In`</ph>, <ph id="ph16">`Into`</ph>, <ph id="ph17">`On`</ph>, <ph id="ph18">`Ascending`</ph>, and <ph id="ph19">`Descending`</ph>).</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>You cannot break a line between the keywords of query operators that are made up of multiple keywords (<ph id="ph1">`Order By`</ph>, <ph id="ph2">`Group Join`</ph>, <ph id="ph3">`Take While`</ph>, and <ph id="ph4">`Skip While`</ph>).</source>
          <target state="translated">複数のキーワードで構成されているクエリ演算子のキーワードの間に行を分割することはできません (<ph id="ph1">`Order By`</ph>、 <ph id="ph2">`Group Join`</ph>、 <ph id="ph3">`Take While`</ph>、および<ph id="ph4">`Skip While`</ph>)。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation#11<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_25.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation&amp;#11;<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_25.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Queries<ept id="p1">](../../../visual-basic/language-reference/queries/queries.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>クエリ<ept id="p1">](../../../visual-basic/language-reference/queries/queries.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>After the <ph id="ph1">`In`</ph> keyword in a <ph id="ph2">`For Each`</ph> statement.</source>
          <target state="translated">後に、<ph id="ph1">`In`</ph>のキーワード、<ph id="ph2">`For Each`</ph>ステートメントです。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation#12<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_26.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation&amp;#12;<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_26.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>For Each...Next Statement<ept id="p1">](../../../visual-basic/language-reference/statements/for-each-next-statement.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください<bpt id="p1">[</bpt>ごとにしています.。次のステートメントの<ept id="p1">](../../../visual-basic/language-reference/statements/for-each-next-statement.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>After the <ph id="ph1">`From`</ph> keyword in a collection initializer.</source>
          <target state="translated">後に、<ph id="ph1">`From`</ph>コレクション初期化子のキーワードです。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation#13<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_27.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrLineContinuation&amp;#13;<ept id="p2">](../../../visual-basic/programming-guide/language-features/codesnippet/VisualBasic/statements_27.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Collection Initializers<ept id="p1">](../../../visual-basic/programming-guide/language-features/collection-initializers/index.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>コレクション初期化子<ept id="p1">](../../../visual-basic/programming-guide/language-features/collection-initializers/index.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Adding Comments</source>
          <target state="translated">コメントを追加します。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Source code is not always self-explanatory, even to the programmer who wrote it.</source>
          <target state="translated">ソース コードは、常に自明ですが、それを記述したプログラマにすることもできません。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>To help document their code, therefore, most programmers make liberal use of embedded comments.</source>
          <target state="translated">ために、コードを文書化をしたがって、ほとんどのプログラマください埋め込まれたコメントを多めに使用します。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Comments in code can explain a procedure or a particular instruction to anyone reading or working with it later.</source>
          <target state="translated">コード内のコメントは、プロシージャ、または読み取り中または後で作業してすべてのユーザーが特定の命令に説明します。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> ignores comments during compilation, and they do not affect the compiled code.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>コンパイル時に、コメントを無視し、コンパイルされたコードには影響しません。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Comment lines begin with an apostrophe (<ph id="ph1">`'`</ph>) or <ph id="ph2">`REM`</ph> followed by a space.</source>
          <target state="translated">コメント行はアポストロフィで始まります (<ph id="ph1">`'`</ph>) または<ph id="ph2">`REM`</ph>後にスペースをします。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>They can be added anywhere in code, except within a string.</source>
          <target state="translated">追加する任意の場所コードを除く文字列内にあります。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>To append a comment to a statement, insert an apostrophe or <ph id="ph1">`REM`</ph> after the statement, followed by the comment.</source>
          <target state="translated">ステートメントにコメントを追加するには、アポストロフィを挿入または<ph id="ph1">`REM`</ph>コメントに続くステートメントの後です。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Comments can also go on their own separate line.</source>
          <target state="translated">コメントは、独自の個別の行に移動できます。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>The following example demonstrates these possibilities.</source>
          <target state="translated">次の例は、これらの可能性を示しています。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#72<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_28.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements #&amp;72;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/statements_28.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Checking Compilation Errors</source>
          <target state="translated">コンパイル エラーをチェックします。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>If, after you type a line of code, the line is displayed with a wavy blue underline (an error message may appear as well), there is a syntax error in the statement.</source>
          <target state="translated">後のコード行を入力する場合は、青い波線 (エラー メッセージが表示されることにも)、行が表示されます、ステートメントに構文エラーがあります。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>You must find out what is wrong with the statement (by looking in the task list, or hovering over the error with the mouse pointer and reading the error message) and correct it.</source>
          <target state="translated">ステートメントの問題 (してタスク リストで検索して、またはエラーにマウス ポインターの上にカーソルを置くとエラー メッセージを読み取っています) は、修正してする必要があります。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Until you have fixed all syntax errors in your code, your program will fail to compile correctly.</source>
          <target state="translated">コードですべての構文エラーを修正するまで、プログラムは正しくコンパイルは失敗します。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Related Sections</source>
          <target state="translated">関連項目</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Term</source>
          <target state="translated">用語</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Definition</source>
          <target state="translated">定義</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Assignment Operators<ept id="p1">](../../../visual-basic/language-reference/operators/assignment-operators.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>代入演算子<ept id="p1">](../../../visual-basic/language-reference/operators/assignment-operators.md)</ept></target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Provides links to language reference pages covering assignment operators such as <ph id="ph1">`=`</ph>, <ph id="ph2">`*=`</ph>, and <ph id="ph3">`&amp;=`</ph>.</source>
          <target state="translated">代入演算子をなどに記載されている言語のリファレンス ページへのリンク<ph id="ph1">`=`</ph>、 <ph id="ph2">`*=`</ph>、および<ph id="ph3">`&amp;=`</ph>です。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Operators and Expressions<ept id="p1">](../../../visual-basic/programming-guide/language-features/operators-and-expressions/index.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>演算子および式<ept id="p1">](../../../visual-basic/programming-guide/language-features/operators-and-expressions/index.md)</ept></target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Shows how to combine elements with operators to yield new values.</source>
          <target state="translated">新しい値を生成する演算子を使用して要素を結合する方法を示します。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Break and Combine Statements in Code<ept id="p1">](../../../visual-basic/programming-guide/program-structure/how-to-break-and-combine-statements-in-code.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>方法 : コード内でステートメントを分割および連結する<ept id="p1">](../../../visual-basic/programming-guide/program-structure/how-to-break-and-combine-statements-in-code.md)</ept></target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Shows how to break a single statement into multiple lines and how to place multiple statements on the same line.</source>
          <target state="translated">1 つのステートメントを複数の行に分割する方法と同じ行に複数のステートメントを配置する方法を示します。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Label Statements<ept id="p1">](../../../visual-basic/programming-guide/program-structure/how-to-label-statements.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>方法 : ステートメントへのラベル付け<ept id="p1">](../../../visual-basic/programming-guide/program-structure/how-to-label-statements.md)</ept></target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Shows how to label a line of code.</source>
          <target state="translated">コード行にラベルを付ける方法を示します。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>