<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2ea8e71acf861b93a21296c74254b3ca4d977d0a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\linq\statically-compiled-queries-linq-to-xml.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0ac5864adc213bf982ae36d4d54e3cec6879ef92</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a65720e5d19a88ac6ffec0bb2c1a11a5703a808a</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Handback file name: lo-mt_statically-compiled-queries-linq-to-xml.a9642209f858c7ccb3e629e2a1dc3cc6a45ca540.ja-jp is different with handoff file name: statically-compiled-queries-linq-to-xml.a9642209f858c7ccb3e629e2a1dc3cc6a45ca540.ja-jp.</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Statically Compiled Queries (LINQ to XML) (Visual Basic) | Microsoft Docs</source>
          <target state="translated">静的にコンパイル済みクエリ (LINQ to XML) (Visual Basic) |Microsoft ドキュメント</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Statically Compiled Queries (LINQ to XML) (Visual Basic)</source>
          <target state="translated">静的にコンパイル済みクエリ (LINQ to XML) (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>One of the most important performance benefits LINQ to XML, as opposed to &lt;xref:System.Xml.XmlDocument&gt;, is that queries in LINQ to XML are statically compiled, whereas XPath queries must be interpreted at run time.</source>
          <target state="translated">代わりに LINQ を XML で最も重要なパフォーマンスのいずれかの利点&lt;xref:System.Xml.XmlDocument&gt;を LINQ to XML クエリでは静的にコンパイル、実行時に XPath クエリを解釈する必要があります&lt;/xref:System.Xml.XmlDocument&gt;。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This feature is built in to LINQ to XML, so you do not have to perform extra steps to take advantage of it, but it is helpful to understand the distinction when choosing between the two technologies.</source>
          <target state="translated">この機能は LINQ to XML に組み込まれているので、追加の手順を実行することなく利用できますが、その違いを理解しておくと、この&amp;2; つの技術のどちらかを選ぶときに役立ちます。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This topic explains the difference.</source>
          <target state="translated">このトピックでは、相違点について説明します。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Statically Compiled Queries vs. XPath</source>
          <target state="translated">静的にコンパイルされたクエリと XPath</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The following example shows how to get the descendant elements with a specified name, and with an attribute with a specified value.</source>
          <target state="translated">次の例は、指定した名前と指定した値の属性がある子孫要素を取得する方法を示しています。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The following is the equivalent XPath expression:</source>
          <target state="translated">次に示すのは、これに相当する XPath 式です。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The query expression in this example is re-written by the compiler to method-based query syntax.</source>
          <target state="translated">この例のクエリ式は、コンパイラによってメソッドベースのクエリ構文に書き換えられています。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The following example, which is written in method-based query syntax, produces the same results as the previous one:</source>
          <target state="translated">メソッドベースのクエリ構文で書かれた次の例では、前の例と同じ結果が生成されます。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Linq.Enumerable.Where%2A&gt; method is an extension method.</source>
          <target state="translated">&lt;xref:System.Linq.Enumerable.Where%2A&gt;メソッドは、拡張メソッド&lt;/xref:System.Linq.Enumerable.Where%2A&gt;。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Extension Methods<ept id="p1">](../../../../csharp/programming-guide/classes-and-structs/extension-methods.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>拡張メソッド<ept id="p1">](../../../../csharp/programming-guide/classes-and-structs/extension-methods.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Because &lt;xref:System.Linq.Enumerable.Where%2A&gt; is an extension method, the query above is compiled as though it were written as follows:</source>
          <target state="translated">&lt;xref:System.Linq.Enumerable.Where%2A&gt;拡張メソッドは、次のように記述されているかのように、上記のクエリがコンパイルされた:&lt;/xref:System.Linq.Enumerable.Where%2A&gt;</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This example produces exactly the same results as the previous two examples.</source>
          <target state="translated">この例では、前の&amp;2; つの例と同じ結果が生成されます。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This illustrates the fact that queries are effectively compiled into statically linked method calls.</source>
          <target state="translated">これは、静的にリンクされたメソッド呼び出しにクエリが効果的にコンパイルされたことを示します。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This, combined with the deferred execution semantics of iterators, improves performance.</source>
          <target state="translated">これと反復子の遅延実行セマンティクスが組み合わさることで、パフォーマンスが向上します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For more information about the deferred execution semantics of iterators, see <bpt id="p1">[</bpt>Deferred Execution and Lazy Evaluation in LINQ to XML (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/deferred-execution-and-lazy-evaluation-in-linq-to-xml.md)</ept>.</source>
          <target state="translated">反復子の遅延実行セマンティクスの詳細については、次を参照してください。<bpt id="p1">[</bpt>遅延実行とレイジー評価 linq to XML (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/deferred-execution-and-lazy-evaluation-in-linq-to-xml.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>These examples are representative of the code that the compiler might write.</source>
          <target state="translated">これらは、コンパイラが書き込むコードの例です。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The actual implementation might differ slightly from these examples, but the performance will be the same or similar to these examples.</source>
          <target state="translated">実際の実装はこれらの例と若干異なる可能性がありますが、パフォーマンスは同じか類似したものになります。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Executing XPath Expressions with XmlDocument</source>
          <target state="translated">XmlDocument を使用した XPath 式の実行</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The following example uses &lt;xref:System.Xml.XmlDocument&gt; to accomplish the same results as the previous examples:</source>
          <target state="translated">次の例では使用&lt;xref:System.Xml.XmlDocument&gt;前の例と同じ結果を得るため:&lt;/xref:System.Xml.XmlDocument&gt;</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This query returns the same output as the examples that use LINQ to XML; the only difference is that LINQ to XML indents the printed XML, whereas &lt;xref:System.Xml.XmlDocument&gt; does not.</source>
          <target state="translated">このクエリには、LINQ to XML を使用する例と同じ出力が返されます。唯一の違いがありますが LINQ to XML が印刷された XML をインデント&lt;xref:System.Xml.XmlDocument&gt;しません&lt;/xref:System.Xml.XmlDocument&gt;。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>However, the &lt;xref:System.Xml.XmlDocument&gt; approach generally does not perform as well as LINQ to XML, because the &lt;xref:System.Xml.XmlNode.SelectNodes%2A&gt; method must do the following internally every time it is called:</source>
          <target state="translated">ただし、&lt;xref:System.Xml.XmlDocument&gt;アプローチ一般的にパフォーマンスが低く、LINQ to XML のため、&lt;xref:System.Xml.XmlNode.SelectNodes%2A&gt;メソッド必要があります、次の操作に、内部的に呼び出されるたびに:&lt;/xref:System.Xml.XmlNode.SelectNodes%2A&gt; &lt;/xref:System.Xml.XmlDocument&gt;</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>It parses the string that contains the XPath expression, breaking the string into tokens.</source>
          <target state="translated">XPath 式を含んでいる文字列を解析してトークンに分解します。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>It validates the tokens to make sure that the XPath expression is valid.</source>
          <target state="translated">トークンを検証して、XPath 式が有効であることを確認します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>It translates the expression into an internal expression tree.</source>
          <target state="translated">式を内部式ツリーに変換します。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>It iterates through the nodes, appropriately selecting the nodes for the result set based on the evaluation of the expression.</source>
          <target state="translated">ノードを反復処理し、式の評価に基づいて結果セットのノードを適切に選択します。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This is significantly more than the work done by the corresponding LINQ to XML query.</source>
          <target state="translated">この場合、対応する LINQ to XML のクエリよりも処理量がかなり多くなります。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The specific performance difference varies for different types of queries, but in general LINQ to XML queries do less work, and therefore perform better, than evaluating XPath expressions using &lt;xref:System.Xml.XmlDocument&gt;.</source>
          <target state="translated">特定のパフォーマンスの違いは、さまざまな種類のクエリはによって異なりますが一般に LINQ to XML クエリは処理量が少ないためよりも優れて&lt;xref:System.Xml.XmlDocument&gt;。&lt;/xref:System.Xml.XmlDocument&gt;を使用して XPath 式を評価します。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">関連項目</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Performance (LINQ to XML) (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/performance-linq-to-xml.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>パフォーマンス (LINQ to XML) (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/performance-linq-to-xml.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>