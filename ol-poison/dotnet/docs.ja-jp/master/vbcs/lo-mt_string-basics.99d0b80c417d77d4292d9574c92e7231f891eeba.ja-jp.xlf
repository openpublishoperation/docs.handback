<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a9475c57f01c78fd5c4e2d2674f22f18ad4772e5</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\strings\string-basics.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a7f9e9b14c109329d815d4f52387e301b5df2f99</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7c5e67119ef701c76351df357251a868600c4647</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Handback file name: lo-mt_string-basics.99d0b80c417d77d4292d9574c92e7231f891eeba.ja-jp is different with handoff file name: string-basics.99d0b80c417d77d4292d9574c92e7231f891eeba.ja-jp.</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>String Basics in Visual Basic | Microsoft Docs</source>
          <target state="translated">Visual Basic における基本文字列 |Microsoft ドキュメント</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>String Basics in Visual Basic</source>
          <target state="translated">Visual Basic における文字列の基本</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`String`</ph> data type represents a series of characters (each representing in turn an instance of the <ph id="ph2">`Char`</ph> data type).</source>
          <target state="translated"><ph id="ph1">`String`</ph> データ型は、一連の文字を表します (各文字は <ph id="ph2">`Char`</ph> データ型のインスタンスを表しています)。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This topic introduces the basic concepts of strings in <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>.</source>
          <target state="translated">このトピックでは、<ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> での文字列の基本的な概念について説明します。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>String Variables</source>
          <target state="translated">文字列変数</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>An instance of a string can be assigned a literal value that represents a series of characters.</source>
          <target state="translated">文字列のインスタンスには、一連の文字を表すリテラル値を代入できます。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例:</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStrings#63<ept id="p2">](../../../../visual-basic/language-reference/functions/codesnippet/VisualBasic/string-basics_1.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStrings #&amp;63;<ept id="p2">](../../../../visual-basic/language-reference/functions/codesnippet/VisualBasic/string-basics_1.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`String`</ph> variable can also accept any expression that evaluates to a string.</source>
          <target state="translated"><ph id="ph1">`String`</ph> 変数は、文字列に評価される任意の式も受け取ることができます。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Examples are shown below:</source>
          <target state="translated">以下に例を示します。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStrings#64<ept id="p2">](../../../../visual-basic/language-reference/functions/codesnippet/VisualBasic/string-basics_2.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStrings #&amp;64;<ept id="p2">](../../../../visual-basic/language-reference/functions/codesnippet/VisualBasic/string-basics_2.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Any literal that is assigned to a <ph id="ph1">`String`</ph> variable must be enclosed in quotation marks ("").</source>
          <target state="translated"><ph id="ph1">`String`</ph> 変数に代入されるすべてのリテラルは、引用符 ("") で囲む必要があります。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This means that a quotation mark within a string cannot be represented by a quotation mark.</source>
          <target state="translated">これは、文字列内の引用符を引用符で表すことができないことを意味します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For example, the following code causes a compiler error:</source>
          <target state="translated">たとえば、次のコードはコンパイラ エラーになります。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStrings#65<ept id="p2">](../../../../visual-basic/language-reference/functions/codesnippet/VisualBasic/string-basics_3.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStrings #&amp;65;<ept id="p2">](../../../../visual-basic/language-reference/functions/codesnippet/VisualBasic/string-basics_3.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This code causes an error because the compiler terminates the string after the second quotation mark, and the remainder of the string is interpreted as code.</source>
          <target state="translated">このコードでは、2 つ目の引用符の後で文字列が終了し、残りの部分はコードであるとコンパイラが解釈するため、エラーが発生します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>To solve this problem, <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> interprets two quotation marks in a string literal as one quotation mark in the string.</source>
          <target state="translated">この問題を解決するために、<ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> は文字列リテラル内の&amp;2; つの引用符を文字列内の&amp;1; つの引用符として解釈します。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The following example demonstrates the correct way to include a quotation mark in a string:</source>
          <target state="translated">次の例は、引用符を文字列に含めるための正しい方法を示しています。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStrings#66<ept id="p2">](../../../../visual-basic/language-reference/functions/codesnippet/VisualBasic/string-basics_4.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStrings #&amp;66;<ept id="p2">](../../../../visual-basic/language-reference/functions/codesnippet/VisualBasic/string-basics_4.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In the preceding example, the two quotation marks preceding the word <ph id="ph1">`Look`</ph> become one quotation mark in the string.</source>
          <target state="translated">前の例で、<ph id="ph1">`Look`</ph> という単語の前の&amp;2; つの引用符は、文字列内では&amp;1; つの引用符になります。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The three quotation marks at the end of the line represent one quotation mark in the string and the string termination character.</source>
          <target state="translated">行の末尾の&amp;3; つの引用符は、文字列内の&amp;1; つの引用符と文字列終端文字を表します。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>String literals can contain multiple lines:</source>
          <target state="translated">文字列リテラルには、複数の行を含めることができます。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The resulting string contains newline sequences that you used in your string literal (vbcr, vbcrlf, etc.).</source>
          <target state="translated">結果の文字列には、文字列リテラルで使用する改行シーケンス (vbcr、vbcrlf など) が含まれます。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>You no longer need to use the old workaround:</source>
          <target state="translated">古い回避策を使用する必要はなくなりました。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Characters in Strings</source>
          <target state="translated">文字列内の文字</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>A string can be thought of as a series of <ph id="ph1">`Char`</ph> values, and the <ph id="ph2">`String`</ph> type has built-in functions that allow you to perform many manipulations on a string that resemble the manipulations allowed by arrays.</source>
          <target state="translated">文字列は、一連の <ph id="ph1">`Char`</ph> 値であると考えることができます。また、配列の場合と同様に、<ph id="ph2">`String`</ph> 型には文字列に対してさまざまな操作を行うことができる、組み込み関数があります。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Like all array in <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph>, these are zero-based arrays.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[dnprdnshort](../../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph> のすべての配列のように、これらは&amp;0; ベース配列です。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You may refer to a specific character in a string through the <ph id="ph1">`Chars`</ph> property, which provides a way to access a character by the position in which it appears in the string.</source>
          <target state="translated">文字列内の特定の文字は、<ph id="ph1">`Chars`</ph> プロパティを通じて参照できます。このプロパティでは、文字列内で文字が現れる位置を使用して、文字にアクセスできます。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例:</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStrings#67<ept id="p2">](../../../../visual-basic/language-reference/functions/codesnippet/VisualBasic/string-basics_5.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStrings #&amp;67;<ept id="p2">](../../../../visual-basic/language-reference/functions/codesnippet/VisualBasic/string-basics_5.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In the above example, the <ph id="ph1">`Chars`</ph> property of the string returns the fourth character in the string, which is <ph id="ph2">`D`</ph>, and assigns it to <ph id="ph3">`myChar`</ph>.</source>
          <target state="translated">上の例で、文字列の <ph id="ph1">`Chars`</ph> プロパティは、文字列内の&amp;4; 番目の文字 (つまり <ph id="ph2">`D`</ph>) を返し、<ph id="ph3">`myChar`</ph> に代入します。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You can also get the length of a particular string through the <ph id="ph1">`Length`</ph> property.</source>
          <target state="translated"><ph id="ph1">`Length`</ph> プロパティを通じて、特定の文字列の長さを取得することもできます。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If you need to perform multiple array-type manipulations on a string, you can convert it to an array of <ph id="ph1">`Char`</ph> instances using the <ph id="ph2">`ToCharArray`</ph> function of the string.</source>
          <target state="translated">文字列に対して複数の配列型の操作を実行する必要がある場合は、文字列の <ph id="ph2">`ToCharArray`</ph> 関数を使用して、文字列を <ph id="ph1">`Char`</ph> インスタンスの配列に変換することができます。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例:</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStrings#68<ept id="p2">](../../../../visual-basic/language-reference/functions/codesnippet/VisualBasic/string-basics_6.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStrings #&amp;68;<ept id="p2">](../../../../visual-basic/language-reference/functions/codesnippet/VisualBasic/string-basics_6.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The variable <ph id="ph1">`myArray`</ph> now contains an array of <ph id="ph2">`Char`</ph> values, each representing a character from <ph id="ph3">`myString`</ph>.</source>
          <target state="translated">これで、変数 <ph id="ph1">`myArray`</ph> の内容は、<ph id="ph2">`Char`</ph> 値の配列になりました。各値は <ph id="ph3">`myString`</ph> の文字を表しています。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The Immutability of Strings</source>
          <target state="translated">文字列の不変性</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>A string is <bpt id="p1">*</bpt>immutable<ept id="p1">*</ept>, which means its value cannot be changed once it has been created.</source>
          <target state="translated">文字列とは、<bpt id="p1">*</bpt>不変<ept id="p1">*</ept>つまり、その値を一度変更することはできませんが作成されました。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>However, this does not prevent you from assigning more than one value to a string variable.</source>
          <target state="translated">ただし、文字列変数に複数の値を代入できないわけではありません。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Consider the following example:</source>
          <target state="translated">次に例を示します。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStrings#69<ept id="p2">](../../../../visual-basic/language-reference/functions/codesnippet/VisualBasic/string-basics_7.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStrings #&amp;69;<ept id="p2">](../../../../visual-basic/language-reference/functions/codesnippet/VisualBasic/string-basics_7.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Here, a string variable is created, given a value, and then its value is changed.</source>
          <target state="translated">ここでは、文字列変数が作成され、値を設定され、その値が変更されています。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>More specifically, in the first line, an instance of type <ph id="ph1">`String`</ph> is created and given the value <ph id="ph2">`This string is immutable`</ph>.</source>
          <target state="translated">より具体的には、最初の行で型 <ph id="ph1">`String`</ph> のインスタンスが作成され、値 <ph id="ph2">`This string is immutable`</ph> が設定されます。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>In the second line of the example, a new instance is created and given the value <ph id="ph1">`Or is it?`</ph>, and the string variable discards its reference to the first instance and stores a reference to the new instance.</source>
          <target state="translated">例の&amp;2; 番目の行では、新しいインスタンスが作成され、値 <ph id="ph1">`Or is it?`</ph> が設定されます。文字列変数は、最初のインスタンスへの参照を破棄し、新しいインスタンスへの参照を格納します。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Unlike other intrinsic data types, <ph id="ph1">`String`</ph> is a reference type.</source>
          <target state="translated">他の組み込みのデータ型とは異なり、<ph id="ph1">`String`</ph> は参照型です。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>When a variable of reference type is passed as an argument to a function or subroutine, a reference to the memory address where the data is stored is passed instead of the actual value of the string.</source>
          <target state="translated">参照型の変数が関数またはサブルーチンへの引数として渡されると、文字列の実際の値ではなく、データが格納されているメモリ アドレスへの参照が渡されます。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>So in the previous example, the name of the variable remains the same, but it points to a new and different instance of the <ph id="ph1">`String`</ph> class, which holds the new value.</source>
          <target state="translated">そのため、前の例では変数の名前は変わりませんが、新しい値を保持している、<ph id="ph1">`String`</ph> クラスの新しい別のインスタンスを指すようになります。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">関連項目</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Introduction to Strings in Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/language-features/strings/introduction-to-strings.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Visual Basic における文字列の概要<ept id="p1">](../../../../visual-basic/programming-guide/language-features/strings/introduction-to-strings.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>String Data Type<ept id="p1">](../../../../visual-basic/language-reference/data-types/string-data-type.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>文字列データ型<ept id="p1">](../../../../visual-basic/language-reference/data-types/string-data-type.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Char Data Type<ept id="p1">](../../../../visual-basic/language-reference/data-types/char-data-type.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Char データ型<ept id="p1">](../../../../visual-basic/language-reference/data-types/char-data-type.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Basic String Operations<ept id="p1">](http://msdn.microsoft.com/library/8133d357-90b5-4b62-9927-43323d99b6b6)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>基本的な文字列操作<ept id="p1">](http://msdn.microsoft.com/library/8133d357-90b5-4b62-9927-43323d99b6b6)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>