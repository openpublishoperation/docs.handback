<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e7402ec0fcfc279470d39a4919d3b5ec8b5d9dff</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\data-types\structures-and-classes.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ad3aeb05a6eb801d11a7118faa7babd02bf82958</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e791bc1570715fed0060c8c58d5509ff02983807</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Handback file name: lo-mt_structures-and-classes.dad274352fc8ce95c501d53b0cb0172cf8de299a.ja-jp is different with handoff file name: structures-and-classes.dad274352fc8ce95c501d53b0cb0172cf8de299a.ja-jp.</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Structures and Classes (Visual Basic) | Microsoft Docs</source>
          <target state="translated">構造体とクラス (Visual Basic) |Microsoft ドキュメント</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Structures and Classes (Visual Basic)</source>
          <target state="translated">構造体とクラス (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> unifies the syntax for structures and classes, with the result that both entities support most of the same features.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>構造体と結果の両方のエンティティに同じ機能のほとんどがサポートされると共に、クラスの構文を統一します。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>However, there are also important differences between structures and classes.</source>
          <target state="translated">ただし、構造体とクラスの重要な違いもします。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Classes have the advantage of being reference types — passing a reference is more efficient than passing a structure variable with all its data.</source>
          <target state="translated">クラスの参照型になるというメリットがある、参照を渡すことは、そのすべてのデータと構造体変数を渡すことよりも効率的です。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>On the other hand, structures do not require allocation of memory on the global heap.</source>
          <target state="translated">その一方で、構造体には、グローバル ヒープにメモリの割り当ては不要です。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Because you cannot inherit from a structure, structures should be used only for objects that do not need to be extended.</source>
          <target state="translated">構造体から継承することはできませんので構造体を拡張する必要のないオブジェクトに対してのみ使用してください。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Use structures when the object you wish to create has a small instance size, and take into account the performance characteristics of classes versus structures.</source>
          <target state="translated">作成するオブジェクト s インスタンスのサイズがあり、構造体とクラスのパフォーマンス特性を考慮に入れる場合は、構造体を使用します。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Similarities</source>
          <target state="translated">類似点</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Structures and classes are similar in the following respects:</source>
          <target state="translated">構造体とクラスは、次の点で似ています。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Both are <bpt id="p1">*</bpt>container<ept id="p1">*</ept> types, meaning that they contain other types as members.</source>
          <target state="translated">どちらも<bpt id="p1">*</bpt>コンテナー<ept id="p1">*</ept>型、メンバーとして他の種類が含まれていることを意味します。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Both have members, which can include constructors, methods, properties, fields, constants, enumerations, events, and event handlers.</source>
          <target state="translated">両方があるメンバーで、コンス トラクター、メソッド、プロパティ、フィールド、定数、列挙型、イベント、およびイベント ハンドラーを含めることができます。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>However, do not confuse these members with the declared <bpt id="p1">*</bpt>elements<ept id="p1">*</ept> of a structure.</source>
          <target state="translated">ただし、これらのメンバー宣言とを混同しないでください<bpt id="p1">*</bpt>要素<ept id="p1">*</ept>構造体の。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Members of both can have individualized access levels.</source>
          <target state="translated">両方のメンバーも、個別のアクセス レベル。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For example, one member can be declared <ph id="ph1">`Public`</ph> and another <ph id="ph2">`Private`</ph>.</source>
          <target state="translated">たとえば、1 つのメンバーを宣言できます<ph id="ph1">`Public`</ph>別<ph id="ph2">`Private`</ph>します。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Both can implement interfaces.</source>
          <target state="translated">インターフェイスを両方実装できます。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Both can have shared constructors, with or without parameters.</source>
          <target state="translated">両方が共有できますコンス トラクター、パラメーターの有無。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Both can expose a <bpt id="p1">*</bpt>default property<ept id="p1">*</ept>, provided that property takes at least one parameter.</source>
          <target state="translated">両方を公開できます、<bpt id="p1">*</bpt>既定プロパティ<ept id="p1">*</ept>、そのプロパティは、少なくとも&amp;1; つのパラメーターを受け取ります。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Both can declare and raise events, and both can declare delegates.</source>
          <target state="translated">両方を宣言してイベントを発生させるし、デリゲートを宣言できます。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Differences</source>
          <target state="translated">相違点</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Structures and classes differ in the following particulars:</source>
          <target state="translated">構造体とクラスは、次のとおりで異なります。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Structures are <bpt id="p1">*</bpt>value types<ept id="p1">*</ept>; classes are <bpt id="p2">*</bpt>reference types<ept id="p2">*</ept>.</source>
          <target state="translated">構造体は<bpt id="p1">*</bpt>値の型<ept id="p1">*</ept>; クラスは、<bpt id="p2">*</bpt>参照型<ept id="p2">*</ept>します。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>A variable of a structure type contains the structure's data, rather than containing a reference to the data as a class type does.</source>
          <target state="translated">データとしてクラス型への参照を含むのではなく、構造体型の変数には、構造体のデータが含まれています。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Structures use stack allocation; classes use heap allocation.</source>
          <target state="translated">スタックの割り当てを使用して構造クラスは、ヒープ割り当てを使用します。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>All structure elements are <ph id="ph1">`Public`</ph> by default; class variables and constants are <ph id="ph2">`Private`</ph> by default, while other class members are <ph id="ph3">`Public`</ph> by default.</source>
          <target state="translated">すべての構造体要素<ph id="ph1">`Public`</ph>既定ではクラスの変数と定数は<ph id="ph2">`Private`</ph>既定では、他のクラス メンバーは<ph id="ph3">`Public`</ph>既定では。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This behavior for class members provides compatibility with the Visual Basic 6.0 system of defaults.</source>
          <target state="translated">クラス メンバーの場合は、この動作は、既定の Visual Basic 6.0 システムとの互換性を提供します。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A structure must have at least one nonshared variable or nonshared, noncustom event element; a class can be completely empty.</source>
          <target state="translated">構造体の有効期限が必要に少なくとも&amp;1; つの非共有変数または非共有の非カスタム イベントの要素です。クラスは、完全に空にすることができます。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Structure elements cannot be declared as <ph id="ph1">`Protected`</ph>; class members can.</source>
          <target state="translated">構造体の要素として宣言できません<ph id="ph1">`Protected`</ph>; クラス メンバーにします。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>A structure procedure can handle events only if it is a <bpt id="p1">[</bpt>Shared<ept id="p1">](../../../../visual-basic/language-reference/modifiers/shared.md)</ept><ph id="ph1">`Sub`</ph> procedure, and only by means of the <bpt id="p2">[</bpt>AddHandler Statement<ept id="p2">](../../../../visual-basic/language-reference/statements/addhandler-statement.md)</ept>; any class procedure can handle events, using either the <bpt id="p3">[</bpt>Handles<ept id="p3">](../../../../visual-basic/language-reference/statements/handles-clause.md)</ept> keyword or the <ph id="ph2">`AddHandler`</ph> statement.</source>
          <target state="translated">構造体のプロシージャがである場合にのみイベントを処理、 <bpt id="p1">[</bpt>Shared<ept id="p1">](../../../../visual-basic/language-reference/modifiers/shared.md)</ept> <ph id="ph1">`Sub`</ph>プロシージャとのことでのみ、 <bpt id="p2">[</bpt>AddHandler ステートメント<ept id="p2">](../../../../visual-basic/language-reference/statements/addhandler-statement.md)</ept>;、クラスのプロシージャは、いずれかを使用して、イベントを処理できます、<bpt id="p3">[</bpt>処理<ept id="p3">](../../../../visual-basic/language-reference/statements/handles-clause.md)</ept>キーワードまたは<ph id="ph2">`AddHandler`</ph>ステートメントです。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Events<ept id="p1">](../../../../visual-basic/programming-guide/language-features/events/index.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>イベント<ept id="p1">](../../../../visual-basic/programming-guide/language-features/events/index.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Structure variable declarations cannot specify initializers or initial sizes for arrays; class variable declarations can.</source>
          <target state="translated">構造体の変数宣言は、初期化子、または配列の初期サイズを指定できません。クラスの変数宣言ことができます。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Structures implicitly inherit from the &lt;xref:System.ValueType?displayProperty=fullName&gt; class and cannot inherit from any other type; classes can inherit from any class or classes other than &lt;xref:System.ValueType?displayProperty=fullName&gt;.</source>
          <target state="translated">構造体を暗黙的に継承、&lt;xref:System.ValueType?displayProperty=fullName&gt;クラスし、その他の型から継承できないクラスは、任意のクラスまたは&lt;xref:System.ValueType?displayProperty=fullName&gt;.&lt;/xref:System.ValueType?displayProperty=fullName&gt;以外のクラスから継承できます&lt;/xref:System.ValueType?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Structures are not inheritable; classes are.</source>
          <target state="translated">構造体は、継承可能な; がないです。クラスです。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Structures are never terminated, so the common language runtime (CLR) never calls the &lt;xref:System.Object.Finalize%2A&gt; method on any structure; classes are terminated by the garbage collector (GC), which calls &lt;xref:System.Object.Finalize%2A&gt; on a class when it detects there are no active references remaining.</source>
          <target state="translated">構造体が決して終了して、共通言語ランタイム (CLR) を呼び出すことはありませんので、&lt;xref:System.Object.Finalize%2A&gt;メソッドすべての構造をクラスは、ガベージ コレクター (GC) を呼び出すで終了&lt;xref:System.Object.Finalize%2A&gt;アクティブな参照が残っていないを検出した場合にクラスにします&lt;/xref:System.Object.Finalize%2A&gt;&lt;/xref:System.Object.Finalize%2A&gt;。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>A structure does not require a constructor; a class does.</source>
          <target state="translated">構造体には、コンス トラクターは不要します。クラスでは。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Structures can have nonshared constructors only if they take parameters; classes can have them with or without parameters.</source>
          <target state="translated">構造体のパラメーターになる場合にのみ、非共有コンス トラクターパラメーターの有無は、クラスでを設定できます。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Every structure has an implicit public constructor without parameters.</source>
          <target state="translated">すべての構造体には、パラメーターを指定しない暗黙の型のパブリック コンス トラクターがあります。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>This constructor initializes all the structure's data elements to their default values.</source>
          <target state="translated">このコンス トラクターでは、既定値に構造体のすべてのデータ要素を初期化します。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>You cannot redefine this behavior.</source>
          <target state="translated">この動作を再定義することはできません。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Instances and Variables</source>
          <target state="translated">インスタンスと変数</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Because structures are value types, each structure variable is permanently bound to an individual structure instance.</source>
          <target state="translated">構造体は値型であるために、各構造体変数は永続的に個別の構造体のインスタンスにバインドします。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>But classes are reference types, and an object variable can refer to various class instances at different times.</source>
          <target state="translated">クラスは参照型、オブジェクト変数が異なる時間にさまざまなクラスのインスタンスを参照できます。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This distinction affects your usage of structures and classes in the following ways:</source>
          <target state="translated">このような区別では、次の方法で構造体とクラスの使用に影響します。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Initialization.<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>初期化します。<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>A structure variable implicitly includes an initialization of the elements using the structure's parameterless constructor.</source>
          <target state="translated">構造体変数には、暗黙的に、構造体のパラメーターなしのコンス トラクターを使用して要素の初期化が含まれます。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Therefore, <ph id="ph1">`Dim s As struct1`</ph> is equivalent to <ph id="ph2">`Dim s As struct1 = New struct1()`</ph>.</source>
          <target state="translated">したがって、<ph id="ph1">`Dim s As struct1`</ph>は<ph id="ph2">`Dim s As struct1 = New struct1()`</ph>です。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Assigning Variables.<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>変数の割り当てください。<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>When you assign one structure variable to another, or pass a structure instance to a procedure argument, the current values of all the variable elements are copied to the new structure.</source>
          <target state="translated">1 つの構造体変数を別に代入するか、またはプロシージャの引数に構造体のインスタンスを渡すと、変数のすべての要素の現在の値は、新しい構造にコピーされます。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>When you assign one object variable to another, or pass an object variable to a procedure, only the reference pointer is copied.</source>
          <target state="translated">1 つのオブジェクト変数を別に代入するか、またはオブジェクト変数をプロシージャに渡すと、参照ポインターだけがコピーされます。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Assigning Nothing.<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>Nothing を代入します。<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>You can assign the value <bpt id="p1">[</bpt>Nothing<ept id="p1">](../../../../visual-basic/language-reference/nothing.md)</ept> to a structure variable, but the instance continues to be associated with the variable.</source>
          <target state="translated">値を割り当てることができます<bpt id="p1">[</bpt>Nothing<ept id="p1">](../../../../visual-basic/language-reference/nothing.md)</ept>構造体へのインスタンスでは、変数はまだ復旧して、変数に関連付けられています。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>You can still call its methods and access its data elements, although variable elements are reinitialized by the assignment.</source>
          <target state="translated">代入によって可変要素が再初期化がそのデータ要素にアクセスしたりメソッドを呼び出したりすることができます。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>In contrast, if you set an object variable to <ph id="ph1">`Nothing`</ph>, you dissociate it from any class instance, and you cannot access any members through the variable until you assign another instance to it.</source>
          <target state="translated">これに対して、オブジェクト変数を設定した場合に<ph id="ph1">`Nothing`</ph>、任意のクラス インスタンスの関連付けを解除し、別のインスタンスを割り当てるまで、変数を使ってメンバーにアクセスすることはできません。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Multiple Instances.<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>複数のインスタンス。<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>An object variable can have different class instances assigned to it at different times, and several object variables can refer to the same class instance at the same time.</source>
          <target state="translated">オブジェクト変数が、異なる時期に割り当てられた別のクラス インスタンスを持つことができ、複数のオブジェクト変数が、同時に、同じクラスのインスタンスを参照できます。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Changes you make to the values of class members affect those members when accessed through another variable pointing to the same instance.</source>
          <target state="translated">クラスのメンバーの値に加えた変更は、同じインスタンスを指す別の変数を使用してアクセスするときにそのメンバーに影響します。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Structure elements, however, are isolated within their own instance.</source>
          <target state="translated">ただし、構造体の要素は、独自のインスタンス内で分離されます。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Changes to their values are not reflected in any other structure variables, even in other instances of the same <ph id="ph1">`Structure`</ph> declaration.</source>
          <target state="translated">他の同じインスタンスであっても、別の構造体変数にその値への変更は反映されません<ph id="ph1">`Structure`</ph>宣言します。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Equality.<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>等しいかどうか。<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Equality testing of two structures must be performed with an element-by-element test.</source>
          <target state="translated">2 つの構造の等価テストは、要素でテストを実行する必要があります。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Two object variables can be compared using the &lt;xref:System.Object.Equals%2A&gt; method.</source>
          <target state="translated">使用して&amp;2; つのオブジェクト変数を比較することができます、&lt;xref:System.Object.Equals%2A&gt;メソッド&lt;/xref:System.Object.Equals%2A&gt;。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Object.Equals%2A&gt; indicates whether the two variables point to the same instance.</source>
          <target state="translated">&lt;xref:System.Object.Equals%2A&gt;2 つの変数が同じインスタンスを参照するかどうかを示します。&lt;/xref:System.Object.Equals%2A&gt;</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">関連項目</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Data Types<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/index.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>データ型<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/index.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Composite Data Types<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/composite-data-types.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>複合データ型<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/composite-data-types.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Value Types and Reference Types<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>値型と参照型<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Structures<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/structures.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>構造体<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/structures.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Troubleshooting Data Types<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/troubleshooting-data-types.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>データ型のトラブルシューティング<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/troubleshooting-data-types.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Structures and Other Programming Elements<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/structures-and-other-programming-elements.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>構造体およびその他のプログラミング要素<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/structures-and-other-programming-elements.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Objects and Classes<ept id="p1">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/index.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>クラスとオブジェクト<ept id="p1">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/index.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>