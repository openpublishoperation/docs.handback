<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d224fa3338ca707070ee431380578a8fdde47e07</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\procedures\sub-procedures.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">92289ee0f1e0e4f2e2817ac61aaa137c5c974cfc</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">79bed87074bea072163a45e1c5c51a5e463e2db9</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Handback file name: lo-mt_sub-procedures.fc4a277df9980a40f04d3472278b0b131413adea.ja-jp is different with handoff file name: sub-procedures.fc4a277df9980a40f04d3472278b0b131413adea.ja-jp.</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Sub Procedures (Visual Basic) | Microsoft Docs</source>
          <target state="translated">Sub プロシージャ (Visual Basic) |Microsoft ドキュメント</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Sub Procedures (Visual Basic)</source>
          <target state="translated">Sub プロシージャ (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Sub`</ph> procedure is a series of <ph id="ph2">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> statements enclosed by the <ph id="ph3">`Sub`</ph> and <ph id="ph4">`End Sub`</ph> statements.</source>
          <target state="translated">A<ph id="ph1">`Sub`</ph>プロシージャは、一連の<ph id="ph2">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>で囲まれたステートメント、<ph id="ph3">`Sub`</ph>と<ph id="ph4">`End Sub`</ph>ステートメントです。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Sub`</ph> procedure performs a task and then returns control to the calling code, but it does not return a value to the calling code.</source>
          <target state="translated"><ph id="ph1">`Sub`</ph>呼び出し元のコードに値を返すことはできませんが、プロシージャは、タスクを実行し、呼び出し元のコードに制御を戻します。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Each time the procedure is called, its statements are executed, starting with the first executable statement after the <ph id="ph1">`Sub`</ph> statement and ending with the first <ph id="ph2">`End Sub`</ph>, <ph id="ph3">`Exit Sub`</ph>, or <ph id="ph4">`Return`</ph> statement encountered.</source>
          <target state="translated">そのステートメントで実行されるプロシージャが呼び出されるたびに後の最初の実行可能ステートメントで始まる、<ph id="ph1">`Sub`</ph>ステートメントおよび&amp;1; つ目で終了するまで<ph id="ph2">`End Sub`</ph>、 <ph id="ph3">`Exit Sub`</ph>、または<ph id="ph4">`Return`</ph>ステートメントが発生しました。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You can define a <ph id="ph1">`Sub`</ph> procedure in modules, classes, and structures.</source>
          <target state="translated">定義する、<ph id="ph1">`Sub`</ph>モジュール、クラス、および構造体のプロシージャです。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>By default, it is <ph id="ph1">`Public`</ph>, which means you can call it from anywhere in your application that has access to the module, class, or structure in which you defined it.</source>
          <target state="translated">既定では<ph id="ph1">`Public`</ph>、することができるから呼び出せる任意の場所をモジュール、クラス、または、定義された構造体へのアクセスを持つアプリケーションにします。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The term, <bpt id="p1">*</bpt>method<ept id="p1">*</ept>, describes a <ph id="ph1">`Sub`</ph> or <ph id="ph2">`Function`</ph> procedure that is accessed from outside its defining module, class, or structure.</source>
          <target state="translated">この言葉を<bpt id="p1">*</bpt>メソッド<ept id="p1">*</ept>、について説明します、<ph id="ph1">`Sub`</ph>または<ph id="ph2">`Function`</ph>プロシージャの定義の外部からアクセスされるモジュール、クラスまたは構造体。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Procedures<ept id="p1">](./index.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>プロシージャ<ept id="p1">](./index.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Sub`</ph> procedure can take arguments, such as constants, variables, or expressions, which are passed to it by the calling code.</source>
          <target state="translated">A<ph id="ph1">`Sub`</ph>プロシージャは、定数、変数、または、呼び出し元のコードに渡される式などの引数を渡すことができます。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Declaration Syntax</source>
          <target state="translated">宣言の構文</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The syntax for declaring a <ph id="ph1">`Sub`</ph> procedure is as follows:</source>
          <target state="translated">宣言の構文、<ph id="ph1">`Sub`</ph>手順は、次のようにします。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`[`</ph> <bpt id="p1">*</bpt>modifiers<ept id="p1">*</ept> <ph id="ph2">`] Sub`</ph>  <bpt id="p2">*</bpt>subname<ept id="p2">*</ept> <ph id="ph3">`[(`</ph> <bpt id="p3">*</bpt>parameterlist<ept id="p3">*</ept> <ph id="ph4">`)]`</ph></source>
          <target state="translated"><ph id="ph1">`[`</ph><bpt id="p1">*</bpt>modifiers<ept id="p1">*</ept> <ph id="ph2">`] Sub`</ph><bpt id="p2">*</bpt>subname<ept id="p2">*</ept> <ph id="ph3">`[(`</ph> <bpt id="p3">*</bpt>parameterlist<ept id="p3">*</ept>  <ph id="ph4">`)]`</ph></target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`modifiers`</ph> can specify access level and information about overloading, overriding, sharing, and shadowing.</source>
          <target state="translated"><ph id="ph1">`modifiers`</ph>アクセス レベルとオーバー ロード、オーバーライド、共有、およびシャドウに関する情報を指定できます。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Sub Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/sub-statement.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。 <bpt id="p1">[</bpt>Sub ステートメント<ept id="p1">](../../../../visual-basic/language-reference/statements/sub-statement.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Parameter Declaration</source>
          <target state="translated">パラメーターの宣言</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You declare each procedure parameter similarly to how you declare a variable, specifying the parameter name and data type.</source>
          <target state="translated">同様にどのように変数を宣言する、パラメーター名とデータ型を指定するには、各プロシージャ パラメーターを宣言するとします。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You can also specify the passing mechanism, and whether the parameter is optional or a parameter array.</source>
          <target state="translated">引数渡しの方法を指定することも、パラメーターは省略可能かどうかや、パラメーター配列。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The syntax for each parameter in the parameter list is as follows:</source>
          <target state="translated">パラメーター リスト内の各パラメーターの構文は次のとおりです。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`[Optional] [ByVal | ByRef] [ParamArray]`</ph>  <bpt id="p1">*</bpt>parametername<ept id="p1">*</ept>  <ph id="ph2">`As`</ph>  <bpt id="p2">*</bpt>datatype<ept id="p2">*</ept></source>
          <target state="translated"><ph id="ph1">`[Optional] [ByVal | ByRef] [ParamArray]`</ph>  <bpt id="p1">*</bpt>parametername<ept id="p1">*</ept><ph id="ph2">`As`</ph><bpt id="p2">*</bpt>データ型    <ept id="p2">*</ept></target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If the parameter is optional, you must also supply a default value as part of its declaration.</source>
          <target state="translated">パラメーターが省略可能な場合も、その宣言の一部として既定値を指定する必要があります。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The syntax for specifying a default value is as follows:</source>
          <target state="translated">既定値を指定する構文は次のとおりです。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Optional [ByVal | ByRef]`</ph>  <bpt id="p1">*</bpt>parametername<ept id="p1">*</ept>  <ph id="ph2">`As`</ph>  <bpt id="p2">*</bpt>datatype<ept id="p2">*</ept>  <ph id="ph3">`=`</ph>  <bpt id="p3">*</bpt>defaultvalue<ept id="p3">*</ept></source>
          <target state="translated"><ph id="ph1">`Optional [ByVal | ByRef]`</ph>  <bpt id="p1">*</bpt>parametername<ept id="p1">*</ept><ph id="ph2">`As`</ph><bpt id="p2">*</bpt>datatype<ept id="p2">*</ept><ph id="ph3">`=`</ph><bpt id="p3">*</bpt>defaultvalue        <ept id="p3">*</ept></target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Parameters as Local Variables</source>
          <target state="translated">ローカル変数とパラメーター</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>When control passes to the procedure, each parameter is treated as a local variable.</source>
          <target state="translated">コントロール、プロシージャに渡すと、各パラメーターは、ローカル変数として扱われます。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This means that its lifetime is the same as that of the procedure, and its scope is the whole procedure.</source>
          <target state="translated">これは、そのスコープは、プロシージャ全体をその有効期間は、プロシージャのと同じことを意味します。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Calling Syntax</source>
          <target state="translated">呼び出し構文</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You invoke a <ph id="ph1">`Sub`</ph> procedure explicitly with a stand-alone calling statement.</source>
          <target state="translated">呼び出す、<ph id="ph1">`Sub`</ph>プロシージャ スタンドアロン呼び出し元のステートメントを明示的にします。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You cannot call it by using its name in an expression.</source>
          <target state="translated">式の中でその名前を使用して呼び出すことはできません。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>You must provide values for all arguments that are not optional, and you must enclose the argument list in parentheses.</source>
          <target state="translated">省略可能でないすべての引数の値を指定する必要があり、引数リストをかっこで囲む必要があります。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If no arguments are supplied, you can optionally omit the parentheses.</source>
          <target state="translated">引数がない場合は、かっこを省略することができます。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The use of the <ph id="ph1">`Call`</ph> keyword is optional but not recommended.</source>
          <target state="translated">使用、<ph id="ph1">`Call`</ph>キーワードは任意ですがないことをお勧めします。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The syntax for a call to a <ph id="ph1">`Sub`</ph> procedure is as follows:</source>
          <target state="translated">呼び出しの構文、<ph id="ph1">`Sub`</ph>手順は、次のようにします。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`[Call]`</ph>  <bpt id="p1">*</bpt>subname<ept id="p1">*</ept> <ph id="ph2">`[(`</ph> <bpt id="p2">*</bpt>argumentlist<ept id="p2">*</ept> <ph id="ph3">`)]`</ph></source>
          <target state="translated"><ph id="ph1">`[Call]`</ph>  <bpt id="p1">*</bpt>subname<ept id="p1">*</ept> <ph id="ph2">`[(`</ph> <bpt id="p2">*</bpt>argumentlist<ept id="p2">*</ept><ph id="ph3">`)]`</ph></target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>You can call a <ph id="ph1">`Sub`</ph> method from outside the class that defines it.</source>
          <target state="translated">呼び出すことができます、<ph id="ph1">`Sub`</ph>からこれを定義するクラスの外側のメソッドです。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>First, you have to use the <ph id="ph1">`New`</ph> keyword to create an instance of the class, or call a method that returns an instance of the class.</source>
          <target state="translated">最初に、使用する必要がある、<ph id="ph1">`New`</ph>キーワードをクラスのインスタンスを作成またはメソッドを呼び出すには、クラスのインスタンスが返されます。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>New Operator<ept id="p1">](../../../../visual-basic/language-reference/operators/new-operator.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。 <bpt id="p1">[</bpt>New 演算子<ept id="p1">](../../../../visual-basic/language-reference/operators/new-operator.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Then, you can use the following syntax to call the <ph id="ph1">`Sub`</ph> method on the instance object:</source>
          <target state="translated">呼び出す次の構文を使用し、<ph id="ph1">`Sub`</ph>インスタンス オブジェクトのメソッド。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Object<ept id="p1">*</ept>.<bpt id="p2">*</bpt>methodname<ept id="p2">*</ept><ph id="ph1">`[(`</ph><bpt id="p3">*</bpt>argumentlist<ept id="p3">*</ept><ph id="ph2">`)]`</ph></source>
          <target state="translated"><bpt id="p1">*</bpt>Object<ept id="p1">*</ept>.<bpt id="p2">*</bpt>methodname<ept id="p2">*</ept><ph id="ph1">`[(`</ph><bpt id="p3">*</bpt>argumentlist<ept id="p3">*</ept><ph id="ph2">`)]`</ph></target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Illustration of Declaration and Call</source>
          <target state="translated">宣言と呼び出しの図</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The following <ph id="ph1">`Sub`</ph> procedure tells the computer operator which task the application is about to perform, and also displays a time stamp.</source>
          <target state="translated">次<ph id="ph1">`Sub`</ph>手順で実行しようとしてタスク、アプリケーション コンピューター演算子を説明し、タイムスタンプを表示します。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Instead of duplicating this code at the start of every task, the application just calls <ph id="ph1">`tellOperator`</ph> from various locations.</source>
          <target state="translated">アプリケーションのすべてのタスクの開始時に、このコードを複製するのではなくはだけ<ph id="ph1">`tellOperator`</ph>さまざまな場所からです。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Each call passes a string in the <ph id="ph1">`task`</ph> argument that identifies the task being started.</source>
          <target state="translated">各呼び出しで文字列を渡して、<ph id="ph1">`task`</ph>開始されているタスクを識別する引数。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnProcedures#2<ept id="p2">](./codesnippet/VisualBasic/sub-procedures_1.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnProcedures&amp;#2;<ept id="p2">](./codesnippet/VisualBasic/sub-procedures_1.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The following example shows a typical call to <ph id="ph1">`tellOperator`</ph>.</source>
          <target state="translated">次の例では、一般的な呼び出しを<ph id="ph1">`tellOperator`</ph>します。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnProcedures#3<ept id="p2">](./codesnippet/VisualBasic/sub-procedures_2.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnProcedures&amp;#3;<ept id="p2">](./codesnippet/VisualBasic/sub-procedures_2.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">関連項目</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Procedures<ept id="p1">](./index.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>手順<ept id="p1">](./index.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Function Procedures<ept id="p1">](./function-procedures.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Function プロシージャ<ept id="p1">](./function-procedures.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Property Procedures<ept id="p1">](./property-procedures.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>プロパティ プロシージャ<ept id="p1">](./property-procedures.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Operator Procedures<ept id="p1">](./operator-procedures.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>演算子プロシージャ<ept id="p1">](./operator-procedures.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Procedure Parameters and Arguments<ept id="p1">](./procedure-parameters-and-arguments.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>プロシージャのパラメーターと引数<ept id="p1">](./procedure-parameters-and-arguments.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Sub Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/sub-statement.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Sub ステートメント<ept id="p1">](../../../../visual-basic/language-reference/statements/sub-statement.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Call a Procedure that Does Not Return a Value<ept id="p1">](./how-to-call-a-procedure-that-does-not-return-a-value.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>方法: 値を返さないプロシージャを呼び出す<ept id="p1">](./how-to-call-a-procedure-that-does-not-return-a-value.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Call an Event Handler in Visual Basic<ept id="p1">](./how-to-call-an-event-handler.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>方法: Visual Basic でイベント ハンドラーを呼び出す<ept id="p1">](./how-to-call-an-event-handler.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>