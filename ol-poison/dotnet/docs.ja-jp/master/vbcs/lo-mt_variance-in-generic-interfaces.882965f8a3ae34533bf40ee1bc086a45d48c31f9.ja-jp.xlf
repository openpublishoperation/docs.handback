<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c53c27bdb085213046553fc4b08f11336880a7c2</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\covariance-contravariance\variance-in-generic-interfaces.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">280011b3618f864a5b10a479567bd761cd42351e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">99e140f054f4d2a1a8450c357be4aa7d27074cd1</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Handback file name: lo-mt_variance-in-generic-interfaces.882965f8a3ae34533bf40ee1bc086a45d48c31f9.ja-jp is different with handoff file name: variance-in-generic-interfaces.882965f8a3ae34533bf40ee1bc086a45d48c31f9.ja-jp.</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Variance in Generic Interfaces (Visual Basic) | Microsoft Docs</source>
          <target state="translated">ジェネリック インターフェイス (Visual Basic) の分散 |Microsoft ドキュメント</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Variance in Generic Interfaces (Visual Basic)</source>
          <target state="translated">ジェネリック インターフェイス (Visual Basic) の分散</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET Framework 4 introduced variance support for several existing generic interfaces.</source>
          <target state="translated">.NET framework 4 には、いくつかの既存のジェネリック インターフェイスの分散のサポートが導入されました。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Variance support enables implicit conversion of classes that implement these interfaces.</source>
          <target state="translated">分散のサポートにより、これらのインターフェイスを実装するクラスの暗黙的な変換です。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The following interfaces are now variant:</source>
          <target state="translated">次のインターフェイスは、バリアントになりました。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Collections.Generic.IEnumerable%601&gt; (T is covariant)</source>
          <target state="translated">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;(T は共変)&lt;/xref:System.Collections.Generic.IEnumerable%601&gt;</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Collections.Generic.IEnumerator%601&gt; (T is covariant)</source>
          <target state="translated">&lt;xref:System.Collections.Generic.IEnumerator%601&gt;(T は共変)&lt;/xref:System.Collections.Generic.IEnumerator%601&gt;</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Linq.IQueryable%601&gt; (T is covariant)</source>
          <target state="translated">&lt;xref:System.Linq.IQueryable%601&gt;(T は共変)&lt;/xref:System.Linq.IQueryable%601&gt;</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Linq.IGrouping%602&gt; (<ph id="ph1">`TKey`</ph> and <ph id="ph2">`TElement`</ph> are covariant)</source>
          <target state="translated">&lt;xref:System.Linq.IGrouping%602&gt;(<ph id="ph1">`TKey`</ph>と<ph id="ph2">`TElement`</ph>は共変のみ)&lt;/xref:System.Linq.IGrouping%602&gt;</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Collections.Generic.IComparer%601&gt; (T is contravariant)</source>
          <target state="translated">&lt;xref:System.Collections.Generic.IComparer%601&gt;(T は反変)&lt;/xref:System.Collections.Generic.IComparer%601&gt;</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt; (T is contravariant)</source>
          <target state="translated">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;(T は反変)&lt;/xref:System.Collections.Generic.IEqualityComparer%601&gt;</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.IComparable%601&gt; (T is contravariant)</source>
          <target state="translated">&lt;xref:System.IComparable%601&gt;(T は反変)&lt;/xref:System.IComparable%601&gt;</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Covariance permits a method to have a more derived return type than that defined by the generic type parameter of the interface.</source>
          <target state="translated">ジェネリックの共変性は、メソッドの戻り値のより強い派生型、インターフェイスのジェネリック型パラメーターによって定義されているよりもを許可します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>To illustrate the covariance feature, consider these generic interfaces: <ph id="ph1">`IEnumerable(Of Object)`</ph> and <ph id="ph2">`IEnumerable(Of String)`</ph>.</source>
          <target state="translated">ジェネリックの共変性機能を示すためには、次の汎用インターフェイスを検討してください:<ph id="ph1">`IEnumerable(Of Object)`</ph>と<ph id="ph2">`IEnumerable(Of String)`</ph>です。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`IEnumerable(Of String)`</ph> interface does not inherit the <ph id="ph2">`IEnumerable(Of Object)`</ph> interface.</source>
          <target state="translated"><ph id="ph1">`IEnumerable(Of String)`</ph>インターフェイスを継承しない、<ph id="ph2">`IEnumerable(Of Object)`</ph>インターフェイスです。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>However, the <ph id="ph1">`String`</ph> type does inherit the <ph id="ph2">`Object`</ph> type, and in some cases you may want to assign objects of these interfaces to each other.</source>
          <target state="translated">ただし、<ph id="ph1">`String`</ph>型が継承、<ph id="ph2">`Object`</ph>の種類と場合によっては相互にこれらのインターフェイスのオブジェクトを代入することもできます。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This is shown in the following code example.</source>
          <target state="translated">これにより、次のコード例を示します。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>0<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>0<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In earlier versions of the .NET Framework, this code causes a compilation error in Visual Basic with <ph id="ph1">`Option Strict On`</ph>.</source>
          <target state="translated">以前のバージョンの .NET Framework では、このコードによりと Visual Basic でコンパイル エラーが発生<ph id="ph1">`Option Strict On`</ph>します。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>But now you can use <ph id="ph1">`strings`</ph> instead of <ph id="ph2">`objects`</ph>, as shown in the previous example, because the &lt;xref:System.Collections.Generic.IEnumerable%601&gt; interface is covariant.</source>
          <target state="translated">使用するようになりましたが、<ph id="ph1">`strings`</ph>の代わりに<ph id="ph2">`objects`</ph>ために、前の例で示すように、&lt;xref:System.Collections.Generic.IEnumerable%601&gt;インターフェイスは、共変&lt;/xref:System.Collections.Generic.IEnumerable%601&gt;。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Contravariance permits a method to have argument types that are less derived than that specified by the generic parameter of the interface.</source>
          <target state="translated">反変性により、メソッドの引数の型がインターフェイスのジェネリック パラメーターで指定されているよりも弱い派生します。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>To illustrate contravariance, assume that you have created a <ph id="ph1">`BaseComparer`</ph> class to compare instances of the <ph id="ph2">`BaseClass`</ph> class.</source>
          <target state="translated">反変性を示すためには、作成した前提としています、<ph id="ph1">`BaseComparer`</ph>クラスのインスタンスを比較する、<ph id="ph2">`BaseClass`</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`BaseComparer`</ph> class implements the <ph id="ph2">`IEqualityComparer(Of BaseClass)`</ph> interface.</source>
          <target state="translated"><ph id="ph1">`BaseComparer`</ph> クラスは、<ph id="ph2">`IEqualityComparer(Of BaseClass)`</ph> インターフェイスを実装します。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Because the &lt;xref:System.Collections.Generic.IEqualityComparer%601&gt; interface is now contravariant, you can use <ph id="ph1">`BaseComparer`</ph> to compare instances of classes that inherit the <ph id="ph2">`BaseClass`</ph> class.</source>
          <target state="translated">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;インターフェイスは、反変では現在使用すると、<ph id="ph1">`BaseComparer`</ph>継承したクラスのインスタンスを比較する、<ph id="ph2">`BaseClass`</ph>クラス&lt;/xref:System.Collections.Generic.IEqualityComparer%601&gt;</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This is shown in the following code example.</source>
          <target state="translated">これにより、次のコード例を示します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>1<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>1<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For more examples, see <bpt id="p1">[</bpt>Using Variance in Interfaces for Generic Collections (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/covariance-contravariance/using-variance-in-interfaces-for-generic-collections.md)</ept>.</source>
          <target state="translated">例については、次を参照してください。 <bpt id="p1">[</bpt>(Visual Basic) のジェネリック コレクションに対するインターフェイスを使用して分散<ept id="p1">](../../../../visual-basic/programming-guide/concepts/covariance-contravariance/using-variance-in-interfaces-for-generic-collections.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Variance in generic interfaces is supported for reference types only.</source>
          <target state="translated">ジェネリック インターフェイスの分散は参照型のみサポートされます。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Value types do not support variance.</source>
          <target state="translated">値型は、分散をサポートしていません。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`IEnumerable(Of Integer)`</ph> cannot be implicitly converted to <ph id="ph2">`IEnumerable(Of Object)`</ph>, because integers are represented by a value type.</source>
          <target state="translated">たとえば、<ph id="ph1">`IEnumerable(Of Integer)`</ph>に暗黙的に変換できない<ph id="ph2">`IEnumerable(Of Object)`</ph>整数が値型によって表されるため、します。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>2<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>2<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>It is also important to remember that classes that implement variant interfaces are still invariant.</source>
          <target state="translated">バリアント インターフェイスを実装するクラスは引き続き不変を覚えておいてもできます。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For example, although &lt;xref:System.Collections.Generic.List%601&gt; implements the covariant interface &lt;xref:System.Collections.Generic.IEnumerable%601&gt;, you cannot implicitly convert <ph id="ph1">`List(Of Object)`</ph> to <ph id="ph2">`List(Of String)`</ph>.</source>
          <target state="translated">たとえばが&lt;xref:System.Collections.Generic.List%601&gt;共変のインターフェイスを実装する&lt;xref:System.Collections.Generic.IEnumerable%601&gt;、暗黙的に変換することはできません<ph id="ph1">`List(Of Object)`</ph>に<ph id="ph2">`List(Of String)`</ph>&lt;/xref:System.Collections.Generic.IEnumerable%601&gt;&lt;/xref:System.Collections.Generic.List%601&gt;。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This is illustrated in the following code example.</source>
          <target state="translated">これは、次のコード例に示します。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">関連項目</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Using Variance in Interfaces for Generic Collections (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/covariance-contravariance/using-variance-in-interfaces-for-generic-collections.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>(Visual Basic) のジェネリック コレクションに対するインターフェイスの分散の使用<ept id="p1">](../../../../visual-basic/programming-guide/concepts/covariance-contravariance/using-variance-in-interfaces-for-generic-collections.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Creating Variant Generic Interfaces (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/covariance-contravariance/creating-variant-generic-interfaces.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>バリアント ジェネリック インターフェイス (Visual Basic) の作成<ept id="p1">](../../../../visual-basic/programming-guide/concepts/covariance-contravariance/creating-variant-generic-interfaces.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Generic Interfaces<ept id="p1">](http://msdn.microsoft.com/library/88bf5b04-d371-4edb-ba38-01ec7cabaacf)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>ジェネリック インターフェイス<ept id="p1">](http://msdn.microsoft.com/library/88bf5b04-d371-4edb-ba38-01ec7cabaacf)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Variance in Delegates (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/covariance-contravariance/variance-in-delegates.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>デリゲート (Visual Basic) の分散<ept id="p1">](../../../../visual-basic/programming-guide/concepts/covariance-contravariance/variance-in-delegates.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>