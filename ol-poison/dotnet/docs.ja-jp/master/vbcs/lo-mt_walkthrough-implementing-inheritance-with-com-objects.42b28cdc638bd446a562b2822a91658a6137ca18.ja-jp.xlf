<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fa7753847619f14600c924cba01e55651c4f17c2</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\com-interop\walkthrough-implementing-inheritance-with-com-objects.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1b2001e2f4191ce4a2943cdd5852bbf4dc20b44d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7f328b32e55b676e2d524ea17aa26ad6542a2c3d</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Handback file name: lo-mt_walkthrough-implementing-inheritance-with-com-objects.42b28cdc638bd446a562b2822a91658a6137ca18.ja-jp is different with handoff file name: walkthrough-implementing-inheritance-with-com-objects.42b28cdc638bd446a562b2822a91658a6137ca18.ja-jp.</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Walkthrough: Implementing Inheritance with COM Objects (Visual Basic) | Microsoft Docs</source>
          <target state="translated">チュートリアル: COM オブジェクト (Visual Basic) での継承を実装する |Microsoft ドキュメント</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Walkthrough: Implementing Inheritance with COM Objects (Visual Basic)</source>
          <target state="translated">チュートリアル: COM オブジェクトによる継承の実装 (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You can derive Visual Basic classes from <ph id="ph1">`Public`</ph> classes in COM objects, even those created in earlier versions of <ph id="ph2">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>.</source>
          <target state="translated">Visual Basic クラスを派生する<ph id="ph1">`Public`</ph>でもの以前のバージョンで作成された COM オブジェクトのクラス<ph id="ph2">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>します。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The properties and methods of classes inherited from COM objects can be overridden or overloaded just as properties and methods of any other base class can be overridden or overloaded.</source>
          <target state="translated">プロパティと COM オブジェクトから継承されたクラスのメソッドをオーバーライドまたはプロパティと同じようにオーバー ロード、およびその他の基本クラスのメソッドをオーバーライドまたはオーバー ロードします。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Inheritance from COM objects is useful when you have an existing class library that you do not want to recompile.</source>
          <target state="translated">COM オブジェクトからの継承は、再コンパイルしない既存のクラス ライブラリがある場合に便利です。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The following procedure shows how to use Visual Basic 6.0 to create a COM object that contains a class, and then use it as a base class.</source>
          <target state="translated">次の手順では、Visual Basic 6.0 を使用して、クラスが含まれている COM オブジェクトを作成し、基本クラスとして使用する方法を示します。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>To build the COM object that is used in this walkthrough</source>
          <target state="translated">このチュートリアルで使用される COM オブジェクトを構築するには</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In Visual Basic 6.0, open a new ActiveX DLL project.</source>
          <target state="translated">Visual Basic 6.0 では、新しい ActiveX DLL プロジェクトを開きます。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A project named <ph id="ph1">`Project1`</ph> is created.</source>
          <target state="translated">という名前のプロジェクト<ph id="ph1">`Project1`</ph>が作成されます。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>It has a class named <ph id="ph1">`Class1`</ph>.</source>
          <target state="translated">という名前のクラスがある<ph id="ph1">`Class1`</ph>です。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Project Explorer<ept id="p1">**</ept>, right-click <bpt id="p2">**</bpt>Project1<ept id="p2">**</ept>, and then click <bpt id="p3">**</bpt>Project1 Properties<ept id="p3">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>プロジェクト エクスプ ローラー<ept id="p1">**</ept>を右クリックして<bpt id="p2">**</bpt>Project1<ept id="p2">**</ept>、クリックして<bpt id="p3">**</bpt>Project1 プロパティ<ept id="p3">**</ept>します。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Project Properties<ept id="p1">**</ept> dialog box is displayed.</source>
          <target state="translated"><bpt id="p1">**</bpt>プロジェクトのプロパティ<ept id="p1">**</ept> ダイアログ ボックスが表示されます。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>General<ept id="p1">**</ept> tab of the <bpt id="p2">**</bpt>Project Properties<ept id="p2">**</ept> dialog box, change the project name by typing <ph id="ph1">`ComObject1`</ph> in the <bpt id="p3">**</bpt>Project Name<ept id="p3">**</ept> field.</source>
          <target state="translated"><bpt id="p1">**</bpt>全般<ept id="p1">**</ept>のタブ、<bpt id="p2">**</bpt>プロジェクトのプロパティ<ept id="p2">**</ept> ダイアログ ボックスで、」と入力して、プロジェクト名を変更<ph id="ph1">`ComObject1`</ph>で、<bpt id="p3">**</bpt>プロジェクト名<ept id="p3">**</ept>フィールドです。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Project Explorer<ept id="p1">**</ept>, right-click <ph id="ph1">`Class1`</ph>, and then click <bpt id="p2">**</bpt>Properties<ept id="p2">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>プロジェクト エクスプ ローラー<ept id="p1">**</ept>を右クリックして<ph id="ph1">`Class1`</ph>、クリックして<bpt id="p2">**</bpt>プロパティ<ept id="p2">**</ept>します。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Properties<ept id="p1">**</ept> window for the class is displayed.</source>
          <target state="translated"><bpt id="p1">**</bpt>プロパティ<ept id="p1">**</ept>クラスのウィンドウが表示されます。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Change the <ph id="ph1">`Name`</ph> property to <ph id="ph2">`MathFunctions`</ph>.</source>
          <target state="translated">変更、<ph id="ph1">`Name`</ph>プロパティを<ph id="ph2">`MathFunctions`</ph>します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Project Explorer<ept id="p1">**</ept>, right-click <ph id="ph1">`MathFunctions`</ph>, and then click <bpt id="p2">**</bpt>View Code<ept id="p2">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>プロジェクト エクスプ ローラー<ept id="p1">**</ept>を右クリックして<ph id="ph1">`MathFunctions`</ph>、クリックして<bpt id="p2">**</bpt>コードの表示<ept id="p2">**</ept>します。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Code Editor<ept id="p1">**</ept> is displayed.</source>
          <target state="translated"><bpt id="p1">**</bpt>コード エディター<ept id="p1">**</ept>が表示されます。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Add a local variable to hold the property value:</source>
          <target state="translated">プロパティ値を保持するローカル変数を追加します。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Add Property <ph id="ph1">`Let`</ph> and Property <ph id="ph2">`Get`</ph> property procedures:</source>
          <target state="translated">プロパティを追加<ph id="ph1">`Let`</ph>とプロパティ<ph id="ph2">`Get`</ph>プロパティ プロシージャ。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Add a function:</source>
          <target state="translated">関数を追加します。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Create and register the COM object by clicking <bpt id="p1">**</bpt>Make ComObject1.dll<ept id="p1">**</ept> on the <bpt id="p2">**</bpt>File<ept id="p2">**</ept> menu.</source>
          <target state="translated">作成しをクリックして、COM オブジェクトを登録<bpt id="p1">**</bpt>、ComObject1.dll<ept id="p1">**</ept>上、<bpt id="p2">**</bpt>ファイル<ept id="p2">**</ept>メニュー。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Although you can also expose a class created with <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> as a COM object, it is not a true COM object and cannot be used in this walkthrough.</source>
          <target state="translated">作成したクラスを公開することもできます。 ただし<ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>COM オブジェクトとして、真の COM オブジェクトではありませんし、このチュートリアルでは使用できません。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For details, see <bpt id="p1">[</bpt>COM Interoperability in .NET Framework Applications<ept id="p1">](../../../visual-basic/programming-guide/com-interop/com-interoperability-in-net-framework-applications.md)</ept>.</source>
          <target state="translated">詳細については、「 <bpt id="p1">[</bpt>.NET Framework アプリケーションにおける COM 相互運用性<ept id="p1">](../../../visual-basic/programming-guide/com-interop/com-interoperability-in-net-framework-applications.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Interop Assemblies</source>
          <target state="translated">相互運用機能アセンブリ</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In the following procedure, you will create an interop assembly, which acts as a bridge between unmanaged code (such as a COM object) and the managed code <ph id="ph1">[!INCLUDE[vsprvs](../../../csharp/includes/vsprvs_md.md)]</ph> uses.</source>
          <target state="translated">次の手順では、COM オブジェクト) などのアンマネージ コードとマネージ コード間のブリッジとして機能する相互運用機能アセンブリを作成します<ph id="ph1">[!INCLUDE[vsprvs](../../../csharp/includes/vsprvs_md.md)]</ph>を使用します。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The interop assembly that <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> creates handles many of the details of working with COM objects, such as <bpt id="p1">*</bpt>interop marshaling<ept id="p1">*</ept>, the process of packaging parameters and return values into equivalent data types as they move to and from COM objects.</source>
          <target state="translated">相互運用機能アセンブリを<ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>などの COM の使用の詳細の多くのオブジェクトのハンドルが作成<bpt id="p1">*</bpt>相互運用マーシャ リング<ept id="p1">*</ept>、パッケージ パラメーターと戻り値を等価のデータの処理と COM オブジェクトの間で移動するための型します。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The reference in the <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> application points to the interop assembly, not the actual COM object.</source>
          <target state="translated">内の参照、<ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>実際の COM オブジェクトではなく、相互運用機能アセンブリをアプリケーションのポイント。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>To use a COM object with Visual Basic 2005 and later versions</source>
          <target state="translated">Visual Basic 2005 およびそれ以降のバージョンで、COM オブジェクトを使用するには</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Open a new <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> Windows Application project.</source>
          <target state="translated">新しい<ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>Windows アプリケーション プロジェクト。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>Project<ept id="p1">**</ept> menu, click <bpt id="p2">**</bpt>Add Reference<ept id="p2">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>プロジェクト<ept id="p1">**</ept> メニューのをクリックして<bpt id="p2">**</bpt>参照の追加<ept id="p2">**</ept>します。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Add Reference<ept id="p1">**</ept> dialog box is displayed.</source>
          <target state="translated"><bpt id="p1">**</bpt>参照の追加<ept id="p1">**</ept> ダイアログ ボックスが表示されます。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>COM<ept id="p1">**</ept> tab, double-click <ph id="ph1">`ComObject1`</ph> in the <bpt id="p2">**</bpt>Component Name<ept id="p2">**</ept> list and click <bpt id="p3">**</bpt>OK<ept id="p3">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>COM<ept id="p1">**</ept>  タブをダブルクリックして<ph id="ph1">`ComObject1`</ph>で、<bpt id="p2">**</bpt>コンポーネント名<ept id="p2">**</ept>を一覧表示し、クリックして<bpt id="p3">**</bpt>ok<ept id="p3">**</ept>します。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>Project<ept id="p1">**</ept> menu, click <bpt id="p2">**</bpt>Add New Item<ept id="p2">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>[プロジェクト]<ept id="p1">**</ept> メニューの <bpt id="p2">**</bpt>[新しい項目の追加]<ept id="p2">**</ept>をクリックします。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Add New Item<ept id="p1">**</ept> dialog box is displayed.</source>
          <target state="translated"><bpt id="p1">**</bpt>新しい項目の追加<ept id="p1">**</ept> ダイアログ ボックスが表示されます。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Templates<ept id="p1">**</ept> pane, click <bpt id="p2">**</bpt>Class<ept id="p2">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>テンプレート<ept id="p1">**</ept> ウィンドウで、をクリックして<bpt id="p2">**</bpt>クラス<ept id="p2">**</ept>します。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The default file name, <ph id="ph1">`Class1.vb`</ph>, appears in the <bpt id="p1">**</bpt>Name<ept id="p1">**</ept> field.</source>
          <target state="translated">既定のファイル名<ph id="ph1">`Class1.vb`</ph>に表示されます、<bpt id="p1">**</bpt>名前<ept id="p1">**</ept>フィールドです。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Change this field to MathClass.vb and click <bpt id="p1">**</bpt>Add<ept id="p1">**</ept>.</source>
          <target state="translated">このフィールドは変更をクリックして MathClass.vb<bpt id="p1">**</bpt>追加<ept id="p1">**</ept>します。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>This creates a class named <ph id="ph1">`MathClass`</ph>, and displays its code.</source>
          <target state="translated">という名前のクラスを作成この<ph id="ph1">`MathClass`</ph>、し、そのコードを表示します。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Add the following code to the top of <ph id="ph1">`MathClass`</ph> to inherit from the COM class.</source>
          <target state="translated">先頭に次のコードを追加<ph id="ph1">`MathClass`</ph>COM クラスから継承します。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrInterop#31<ept id="p2">](../../../visual-basic/programming-guide/com-interop/codesnippet/VisualBasic/walkthrough-implementing-inheritance-with-com-objects_1.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrInterop #&amp;31;<ept id="p2">](../../../visual-basic/programming-guide/com-interop/codesnippet/VisualBasic/walkthrough-implementing-inheritance-with-com-objects_1.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Overload the public method of the base class by adding the following code to <ph id="ph1">`MathClass`</ph>:</source>
          <target state="translated">次のコードを追加することで、基本クラスのパブリック メソッドをオーバー ロード<ph id="ph1">`MathClass`</ph>:</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrInterop#32<ept id="p2">](../../../visual-basic/programming-guide/com-interop/codesnippet/VisualBasic/walkthrough-implementing-inheritance-with-com-objects_2.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrInterop&amp;#32;<ept id="p2">](../../../visual-basic/programming-guide/com-interop/codesnippet/VisualBasic/walkthrough-implementing-inheritance-with-com-objects_2.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Extend the inherited class by adding the following code to <ph id="ph1">`MathClass`</ph>:</source>
          <target state="translated">次のコードを追加することで、継承されたクラスを拡張<ph id="ph1">`MathClass`</ph>:</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrInterop#33<ept id="p2">](../../../visual-basic/programming-guide/com-interop/codesnippet/VisualBasic/walkthrough-implementing-inheritance-with-com-objects_3.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrInterop #&amp;33;<ept id="p2">](../../../visual-basic/programming-guide/com-interop/codesnippet/VisualBasic/walkthrough-implementing-inheritance-with-com-objects_3.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The new class inherits the properties of the base class in the COM object, overloads a method, and defines a new method to extend the class.</source>
          <target state="translated">新しいクラスは、COM オブジェクトの基本クラスのプロパティを継承し、メソッドをオーバー ロード、クラスを拡張する新しいメソッドを定義します。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>To test the inherited class</source>
          <target state="translated">継承されたクラスをテストするには</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Add a button to your startup form, and then double-click it to view its code.</source>
          <target state="translated">スタートアップ フォームにボタンを追加し、そのコードを表示することをダブルクリックします。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>In the button's <ph id="ph1">`Click`</ph> event handler procedure, add the following code to create an instance of <ph id="ph2">`MathClass`</ph> and call the overloaded methods:</source>
          <target state="translated">ボタンの<ph id="ph1">`Click`</ph>イベント ハンドラーのプロシージャのインスタンスを作成するには、次のコードを追加<ph id="ph2">`MathClass`</ph>オーバー ロードされたメソッドを呼び出します。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrInterop#34<ept id="p2">](../../../visual-basic/programming-guide/com-interop/codesnippet/VisualBasic/walkthrough-implementing-inheritance-with-com-objects_4.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrInterop #&amp;34;<ept id="p2">](../../../visual-basic/programming-guide/com-interop/codesnippet/VisualBasic/walkthrough-implementing-inheritance-with-com-objects_4.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Run the project by pressing F5.</source>
          <target state="translated">F5 キーを押して、プロジェクトを実行します。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>When you click the button on the form, the <ph id="ph1">`AddNumbers`</ph> method is first called with <ph id="ph2">`Short`</ph> data type numbers, and <ph id="ph3">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> chooses the appropriate method from the base class.</source>
          <target state="translated">フォーム上のボタンをクリックすると、<ph id="ph1">`AddNumbers`</ph>メソッドが呼び出された最初<ph id="ph2">`Short`</ph>データ型の数字、および<ph id="ph3">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>基本クラスから適切な方法を選択します。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The second call to <ph id="ph1">`AddNumbers`</ph> is directed to the overload method from <ph id="ph2">`MathClass`</ph>.</source>
          <target state="translated">2 番目の呼び出し<ph id="ph1">`AddNumbers`</ph>からメソッドをオーバー ロードに転送<ph id="ph2">`MathClass`</ph>します。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The third call calls the <ph id="ph1">`SubtractNumbers`</ph> method, which extends the class.</source>
          <target state="translated">3 番目の呼び出しを呼び出して、<ph id="ph1">`SubtractNumbers`</ph>メソッドで、クラスを拡張します。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The property in the base class is set, and the value is displayed.</source>
          <target state="translated">基本クラスのプロパティを設定すると、され、値が表示されます。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Next Steps</source>
          <target state="translated">次の手順</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>You may have noticed that the overloaded <ph id="ph1">`AddNumbers`</ph> function appears to have the same data type as the method inherited from the base class of the COM object.</source>
          <target state="translated">気付いたかもしれませんが、オーバー ロードされた<ph id="ph1">`AddNumbers`</ph>して、データ型、COM オブジェクトの基本クラスから継承されたメソッドと同じ関数が表示されます。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>This is because the arguments and parameters of the base class method are defined as 16-bit integers in Visual Basic 6.0, but they are exposed as 16-bit integers of type <ph id="ph1">`Short`</ph> in later versions of Visual Basic.</source>
          <target state="translated">これは、引数および基本クラスのメソッドのパラメーターが Visual Basic 6.0 での 16 ビット整数値として定義されている型の 16 ビット整数として公開されるため<ph id="ph1">`Short`</ph>Visual Basic のそれ以降のバージョン。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The new function accepts 32-bit integers, and overloads the base class function.</source>
          <target state="translated">新しい関数は、32 ビットの整数入力し、基本クラスの関数をオーバー ロードします。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>When working with COM objects, make sure that you verify the size and data types of parameters.</source>
          <target state="translated">COM オブジェクトを使用する場合は、パラメーターのサイズとデータ型を確認することを確認します。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>For example, when you are using a COM object that accepts a Visual Basic 6.0 collection object as an argument, you cannot provide a collection from a later version of Visual Basic.</source>
          <target state="translated">たとえば、Visual Basic 6.0 コレクション オブジェクトを引数として受け取り、COM オブジェクトを使用しているときに、それ以降のバージョンの Visual Basic からコレクションを提供できません。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Properties and methods inherited from COM classes can be overridden, meaning that you can declare a local property or method that replaces a property or method inherited from a base COM class.</source>
          <target state="translated">プロパティとメソッドが COM クラスから継承されたオーバーライドできます、つまり、ローカルのプロパティまたはプロパティを置換するメソッドまたは COM の基本クラスから継承されたメソッドを宣言することができます。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The rules for overriding inherited COM properties are similar to the rules for overriding other properties and methods with the following exceptions:</source>
          <target state="translated">COM の継承されたプロパティをオーバーライドするためのルールは、その他のプロパティと、次の例外のメソッドをオーバーライドするための規則に似ています。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>If you override any property or method inherited from a COM class, you must override all the other inherited properties and methods.</source>
          <target state="translated">任意のプロパティまたは COM クラスから継承されたメソッドをオーバーライドする場合は、その他のすべての継承されたプロパティとメソッドをオーバーライドする必要があります。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Properties that use <ph id="ph1">`ByRef`</ph> parameters cannot be overridden.</source>
          <target state="translated">使用するプロパティ<ph id="ph1">`ByRef`</ph>パラメーターはオーバーライドできません。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">関連項目</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COM Interoperability in .NET Framework Applications<ept id="p1">](../../../visual-basic/programming-guide/com-interop/com-interoperability-in-net-framework-applications.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>.NET Framework アプリケーションにおける COM 相互運用性<ept id="p1">](../../../visual-basic/programming-guide/com-interop/com-interoperability-in-net-framework-applications.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Inherits Statement<ept id="p1">](../../../visual-basic/language-reference/statements/inherits-statement.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Inherits ステートメント<ept id="p1">](../../../visual-basic/language-reference/statements/inherits-statement.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Short Data Type<ept id="p1">](../../../visual-basic/language-reference/data-types/short-data-type.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>Short データ型<ept id="p1">](../../../visual-basic/language-reference/data-types/short-data-type.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>