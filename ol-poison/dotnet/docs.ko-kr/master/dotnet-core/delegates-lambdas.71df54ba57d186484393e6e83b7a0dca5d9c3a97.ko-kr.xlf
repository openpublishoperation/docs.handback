<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-6a73dd2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7e9bb11db4b3586639a0447737db9cd376898325</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\delegates-lambdas.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p2</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">aae9cbbba18c773bfb2aa397d05cf92d27a78319</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">49dc69e4e91139bbca55aa335f4dc86d6899dfa7</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">file delegates-lambdas.71df54ba57d186484393e6e83b7a0dca5d9c3a97.ko-kr.xlf is out of handoff scope</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Delegates and lambdas</source>
          <target state="translated">대리자 및 람다 식</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Delegates and lambdas</source>
          <target state="translated">대리자 및 람다 식</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Delegates and lambdas</source>
          <target state="translated">대리자 및 람다 식</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Delegates define a type, which specify a particular method signature.</source>
          <target state="translated">대리자는 특정 메서드 시그니처를 지정하는 형식을 정의합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>A method (static or instance) that satisfies this signature can be assigned to a variable of that type, then called directly (with the appropriate arguments) or passed as an argument itself to another method and then called.</source>
          <target state="translated">이 시그니처를 충족하는 메서드(정적 또는 인스턴스)를 해당 형식의 변수에 할당한 다음 직접 호출하거나(적절한 인수 사용) 다른 메서드에 인수로 전달한 다음 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The following example demonstrates delegate use.</source>
          <target state="translated">다음 예제에서는 대리자 사용을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>On line 4 we create a delegate type of a certain signature, in this case a method that takes a string parameter and then returns a string parameter.</source>
          <target state="translated">줄 4에서는 특정 시그니처의 대리자 형식(이 경우 문자열 매개 변수를 사용하고 문자열 매개 변수를 반환하는 메서드)을 만듭니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>On line 6, we define the implementation of the delegate by providing a method that has the exact same signature.</source>
          <target state="translated">줄 6에서는 정확히 동일한 시그니처가 있는 메서드를 제공하여 대리자 구현을 정의합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>On line 13, the method is assigned to a type that conforms to the <ph id="ph1">`Reverse`</ph> delegate.</source>
          <target state="translated">줄 13에서는 <ph id="ph1">`Reverse`</ph> 대리자를 준수하는 형식에 메서드가 할당됩니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Finally, on line 15 we invoke the delegate passing a string to be reversed.</source>
          <target state="translated">마지막으로, 줄 15에서는 대리자를 호출하고 반대로 만들 문자열을 전달합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In order to streamline the development process, .NET includes a set of delegate types that programmers can reuse and not have to create new types.</source>
          <target state="translated">개발 프로세스를 간소화하기 위해 .NET에는 프로그래머가 새 형식을 만들 필요 없이 다시 사용할 수 있는 대리자 형식 집합이 포함되어 있습니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>These are <ph id="ph1">`Func&lt;&gt;`</ph>, <ph id="ph2">`Action&lt;&gt;`</ph> and <ph id="ph3">`Predicate&lt;&gt;`</ph>, and they can be used in various places throughout the .NET APIs without the need to define new delegate types.</source>
          <target state="translated"><ph id="ph1">`Func&lt;&gt;`</ph>, <ph id="ph2">`Action&lt;&gt;`</ph> 및 <ph id="ph3">`Predicate&lt;&gt;`</ph>이며, 새 대리자 형식을 정의할 필요 없이 .NET API의 여러 위치에서 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Of course, there are some differences between the three as you will see in their signatures which mostly have to do with the way they were meant to be used:</source>
          <target state="translated">물론, 세 가지 형식 간에는 대체로 의도된 사용 방법과 관계가 있는 몇 가지 차이점이 있으며 해당 시그니처에서 확인할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Action&lt;&gt;`</ph> is used when there is a need to perform an action using the arguments of the delegate.</source>
          <target state="translated"><ph id="ph1">`Action&lt;&gt;`</ph>은 대리자의 인수를 사용하여 작업을 수행해야 할 때 사용됩니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Func&lt;&gt;`</ph> is used usually when you have a transformation on hand, that is, you need to transform the arguments of the delegate into a different result.</source>
          <target state="translated"><ph id="ph1">`Func&lt;&gt;`</ph>는 일반적으로 변환을 수행해야 할 때 사용됩니다. 즉, 대리자의 인수를 다른 결과로 변환해야 할 때 사용됩니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Projections are a prime example of this.</source>
          <target state="translated">대표적인 예로 프로젝션이 있습니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Predicate&lt;&gt;`</ph> is used when you need to determine if the argument satisfies the condition of the delegate.</source>
          <target state="translated"><ph id="ph1">`Predicate&lt;&gt;`</ph>는 인수가 대리자의 조건을 충족하는지 확인해야 할 때 사용됩니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>It can also be written as a <ph id="ph1">`Func&lt;T, bool&gt;`</ph>.</source>
          <target state="translated"><ph id="ph1">`Func&lt;T, bool&gt;`</ph>로 작성할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>We can now take our example above and rewrite it using the <ph id="ph1">`Func&lt;&gt;`</ph> delegate instead of a custom type.</source>
          <target state="translated">이제 위의 예제를 가져와서 사용자 지정 형식 대신 <ph id="ph1">`Func&lt;&gt;`</ph> 대리자를 사용하여 다시 작성할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The program will continue running exactly the same.</source>
          <target state="translated">프로그램은 동일하게 실행됩니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For this simple example, having a method defined outside of the Main() method seems a bit superfluous.</source>
          <target state="translated">이 간단한 예제에서는 Main() 메서드 외부에서 메서드를 정의하는 것이 불필요해 보입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>It is because of this that .NET Framework 2.0 introduced the concept of <bpt id="p1">**</bpt>anonymous delegates<ept id="p1">**</ept>.</source>
          <target state="translated">.NET Framework 2.0에서 <bpt id="p1">**</bpt>익명 대리자<ept id="p1">**</ept> 개념이 도입된 것은 이 때문입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>With their support you are able to create “inline” delegates without having to specify any additional type or method.</source>
          <target state="translated">익명 대리자 지원을 사용하면 추가 형식이나 메서드를 지정할 필요 없이 "인라인" 대리자를 만들 수 있습니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>You simply inline the definition of the delegate where you need it.</source>
          <target state="translated">필요한 위치에 대리자 정의를 인라인으로 추가하기만 하면 됩니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For an example, we are going to switch it up and use our anonymous delegate to filter out a list of only even numbers and then print them to the console.</source>
          <target state="translated">예를 들어 이번에는 익명 대리자를 사용하여 짝수 목록만 필터링한 다음 콘솔에 출력하겠습니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Notice the highlighted lines.</source>
          <target state="translated">강조 표시된 줄에 유의하세요.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>As you can see, the body of the delegate is just a set of expressions, as any other delegate.</source>
          <target state="translated">보시는 것처럼 대리자 본문은 다른 모든 대리자와 마찬가지로 단순히 식 집합일 뿐입니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>But instead of it being a separate definition, we’ve introduced it <bpt id="p1">_</bpt>ad hoc<ept id="p1">_</ept> in our call to the <ph id="ph1">`FindAll()`</ph> method of the <ph id="ph2">`List&lt;T&gt;`</ph> type.</source>
          <target state="translated">그러나 별도의 정의가 아니라 <ph id="ph2">`List&lt;T&gt;`</ph> 형식의 <ph id="ph1">`FindAll()`</ph> 메서드 호출에서 <bpt id="p1">_</bpt>임시로<ept id="p1">_</ept> 도입했습니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>However, even with this approach, there is still much code that we can throw away.</source>
          <target state="translated">그러나 이 방법의 경우에도 제거할 수 있는 많은 코드가 있습니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This is where <bpt id="p1">**</bpt>lambda expressions<ept id="p1">**</ept> come into play.</source>
          <target state="translated">이때 <bpt id="p1">**</bpt>람다 식<ept id="p1">**</ept>이 유용합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Lambda expressions, or just “lambdas” for short, were introduced first in C# 3.0, as one of the core building blocks of Language Integrated Query (LINQ).</source>
          <target state="translated">람다 식 또는 줄여서 "람다"는 처음에 C# 3.0에서 LINQ(Language-Integrated Query)의 핵심 구성 요소 중 하나로 도입되었습니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>They are just a more convenient syntax for using delegates.</source>
          <target state="translated">람다 식은 단지 대리자 사용에 더 편리한 구문일 뿐입니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>They declare a signature and a method body, but don’t have an formal identity of their own, unless they are assigned to a delegate.</source>
          <target state="translated">시그니처와 메서드 본문을 선언하지만 대리자에 할당되지 않은 경우 고유한 공식 ID가 없습니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Unlike delegates, they can be directly assigned as the left-hand side of event registration or in various Linq clauses and methods.</source>
          <target state="translated">대리자와 달리 이벤트 등록의 왼쪽 항으로 또는 다양한 Linq 절과 메서드에서 직접 할당할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Since a lambda expression is just another way of specifying a delegate, we should be able to rewrite the above sample to use a lambda expression instead of an anonymous delegate.</source>
          <target state="translated">람다 식은 대리자를 지정하는 또 다른 방법이므로 익명 대리자 대신 람다 식을 사용하도록 위의 샘플을 다시 작성할 수 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If you take a look at the highlighted lines, you can see how a lambda expression looks like.</source>
          <target state="translated">강조 표시된 줄을 살펴보면 람다 식이 어떻게 표시되는지 확인할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Again, it is just a <bpt id="p1">**</bpt>very<ept id="p1">**</ept> convenient syntax for using delegates, so what happens under the covers is similar to what happens with the anonymous delegate.</source>
          <target state="translated">대리자 사용에 <bpt id="p1">**</bpt>매우<ept id="p1">**</ept> 편리한 구문일 뿐이므로 이면에서 수행되는 동작은 익명 대리자의 경우와 비슷합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Again, lambdas are just delegates, which means that they can be used as an event handler without any problems, as the following code snippet illustrates.</source>
          <target state="translated">다시 말해, 람다는 단순히 대리자이므로 다음 코드 조각과 같이 문제 없이 이벤트 처리기로 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Further reading and resources</source>
          <target state="translated">추가 정보 및 리소스</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Delegates<ept id="p1">](https://msdn.microsoft.com/library/ms173171.aspx)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>대리자<ept id="p1">](https://msdn.microsoft.com/library/ms173171.aspx)</ept></target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Anonymous Functions<ept id="p1">](https://msdn.microsoft.com/library/bb882516.aspx)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>익명 함수<ept id="p1">](https://msdn.microsoft.com/library/bb882516.aspx)</ept></target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Lambda expressions<ept id="p1">](https://msdn.microsoft.com/library/bb397687.aspx)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>람다 식<ept id="p1">](https://msdn.microsoft.com/library/bb397687.aspx)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>