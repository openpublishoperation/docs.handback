<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-6a73dd2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2dc4d1deff8d1b72cbe433c45dda873e9caa26fb</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\base-types\formatting-types.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p2</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0aad1c66fd4542b09f65909d7b69c99303fac946</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e11b2353ab977b4035ff84b067d78ac3ce6192fc</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">file formatting-types.b9aca03e3ff151bde1e5f780e9a8accb15b62b16.ko-kr.xlf is out of handoff scope</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Formatting types</source>
          <target state="translated">서식 지정 형식</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Formatting types</source>
          <target state="translated">서식 지정 형식</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Formatting types</source>
          <target state="translated">서식 지정 형식</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Formatting is the process of converting an instance of a class, structure, or enumeration value to its string representation, often so that the resulting string can be displayed to users or deserialized to restore the original data type.</source>
          <target state="translated">형식 지정은 대개 결과 문자열을 사용자에게 표시하거나 deserialize하여 원본 데이터 형식으로 복원하기 위해 클래스, 구조체 또는 열거형 값의 인스턴스를 해당 문자열 표현으로 변환하는 프로세스입니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This conversion can pose a number of challenges:</source>
          <target state="translated">이 변환 프로세스에는 다음과 같은 여러 가지 문제점이 나타날 수 있습니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The way that values are stored internally does not necessarily reflect the way that users want to view them.</source>
          <target state="translated">내부적으로 값을 저장하는 방식에 사용자가 원하는 표시 방식이 반영되지 않을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For example, a telephone number might be stored in the form <bpt id="p1">**</bpt>8009999999<ept id="p1">**</ept>, which is not user-friendly.</source>
          <target state="translated">예를 들어 전화 번호가 사용자에게 친숙하지 않은 <bpt id="p1">**</bpt>8009999999<ept id="p1">**</ept> 형식으로 저장될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>It should instead be displayed as <bpt id="p1">**</bpt>800-999-9999<ept id="p1">**</ept>.</source>
          <target state="translated">이 전화 번호는 <bpt id="p1">**</bpt>800-999-9999<ept id="p1">**</ept>로 표시되어야 합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>See the <bpt id="p1">[</bpt>Custom format strings<ept id="p1">](#custom-format-strings)</ept> section for an example that formats a number in this way.</source>
          <target state="translated">이러한 방식으로 숫자의 서식을 지정하는 예제는 <bpt id="p1">[</bpt>사용자 지정 서식 문자열<ept id="p1">](#custom-format-strings)</ept> 섹션을 참조하세요.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Sometimes the conversion of an object to its string representation is not intuitive.</source>
          <target state="translated">개체를 문자열 표현으로 변환하는 과정이 명확하지 않을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For example, it is not clear how the string representation of a <bpt id="p1">**</bpt>Temperature<ept id="p1">**</ept> object or a <bpt id="p2">**</bpt>Person<ept id="p2">**</ept> object should appear.</source>
          <target state="translated">예를 들어 <bpt id="p1">**</bpt>Temperature<ept id="p1">**</ept> 또는 <bpt id="p2">**</bpt>Person<ept id="p2">**</ept> 개체의 문자열 표현이 어떻게 표시될지 명확하지 않습니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For an example that formats a <bpt id="p1">**</bpt>Temperature<ept id="p1">**</ept> object in a variety of ways, see the <bpt id="p2">[</bpt>Standard format strings<ept id="p2">](#standard-format-strings)</ept> section.</source>
          <target state="translated">다양한 방식으로 <bpt id="p1">**</bpt>Temperature<ept id="p1">**</ept> 개체의 서식을 지정하는 예제는 <bpt id="p2">[</bpt>표준 서식 문자열<ept id="p2">](#standard-format-strings)</ept> 섹션을 참조하세요.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Values often require culture-sensitive formatting.</source>
          <target state="translated">값에 문화권별 형식 지정이 필요할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For example, in an application that uses numbers to reflect monetary values, numeric strings should include the current culture’s currency symbol, group separator (which, in most cultures, is the thousands separator), and decimal symbol.</source>
          <target state="translated">예를 들어, 숫자를 사용하여 통화 값을 나타내는 응용 프로그램에서는 숫자 문자열에 현재 문화권의 통화 기호, 그룹 구분 기호(대부분의 경우 1000 단위 구분 기호임) 및 소수점 기호가 포함되어야 합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For an example, see the <bpt id="p1">[</bpt>Culture-sensitive formatting with format providers and the IFormatProvider interface<ept id="p1">](#culture-sensitive-formatting-with-format-providers-and-the-iformatprovider-interface)</ept> section.</source>
          <target state="translated">예제는 <bpt id="p1">[</bpt>서식 공급자 및 IFormatProvider 인터페이스를 사용하여 문화권 구분 서식 지정<ept id="p1">](#culture-sensitive-formatting-with-format-providers-and-the-iformatprovider-interface)</ept> 섹션을 참조하세요.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>An application may have to display the same value in different ways.</source>
          <target state="translated">응용 프로그램에서 같은 값을 여러 가지 방법으로 표시해야 하는 경우도 있을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For example, an application may represent an enumeration member by displaying a string representation of its name or by displaying its underlying value.</source>
          <target state="translated">예를 들어, 응용 프로그램에서 해당 이름의 문자열 표현을 표시하거나 해당 내부 값을 표시하여 열거형 멤버를 나타낼 수 있습니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For an example that formats a member of the <bpt id="p1">[</bpt>DayOfWeek<ept id="p1">](xref:System.DayOfWeek)</ept> enumeration in different ways, see the <bpt id="p2">[</bpt>Standard format strings<ept id="p2">](#standard-format-strings)</ept> section.</source>
          <target state="translated">다양한 방식으로 <bpt id="p1">[</bpt>DayOfWeek<ept id="p1">](xref:System.DayOfWeek)</ept> 열거형 멤버의 형식을 지정하는 예제는 <bpt id="p2">[</bpt>표준 서식 문자열<ept id="p2">](#standard-format-strings)</ept> 섹션을 참조하세요.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>.NET provides rich formatting support that enables developers to address these requirements.</source>
          <target state="translated">.NET에서는 개발자가 이러한 요구 사항을 처리할 수 있는 다양한 형식 지정을 지원합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Formatting converts the value of a type into a string representation.</source>
          <target state="translated">형식 지정은 형식의 값을 문자열 표현으로 변환합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Parsing is the inverse of formatting.</source>
          <target state="translated">구문 분석은 형식 지정과 반대 과정으로 진행됩니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>A parsing operation creates an instance of a data type from its string representation.</source>
          <target state="translated">구문 분석 작업은 해당 문자열 표현에서 데이터 형식의 인스턴스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For information about converting strings to other data types, see <bpt id="p1">[</bpt>Parsing strings<ept id="p1">](parsing-strings.md)</ept>.</source>
          <target state="translated">문자열을 다른 데이터 형식으로 변환하는 방법에 대한 자세한 내용은 <bpt id="p1">[</bpt>문자열 구문 분석<ept id="p1">](parsing-strings.md)</ept>을 참조하세요.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This overview contains the following sections:</source>
          <target state="translated">이 개요는 다음과 같은 단원으로 구성됩니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Formatting in .NET<ept id="p1">](#formatting-in-net)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>.NET의 서식 지정<ept id="p1">](#formatting-in-net)</ept></target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Default formatting using the ToString method<ept id="p1">](#default-formatting-using-the-tostring-method)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>ToString 메서드를 사용한 기본 서식 지정<ept id="p1">](#default-formatting-using-the-tostring-method)</ept></target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Overriding the ToString method<ept id="p1">](#overriding-the-tostring-method)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>ToString 메서드 재정의<ept id="p1">](#overriding-the-tostring-method)</ept></target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>The ToString method and format strings<ept id="p1">](#the-tostring-method-and-format-strings)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>ToString 메서드 및 서식 문자열<ept id="p1">](#the-tostring-method-and-format-strings)</ept></target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Standard format strings<ept id="p1">](#standard-format-strings)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>표준 서식 문자열<ept id="p1">](#standard-format-strings)</ept></target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Custom format strings<ept id="p1">](#custom-format-strings)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>사용자 지정 서식 문자열<ept id="p1">](#custom-format-strings)</ept></target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Format strings and .NET types<ept id="p1">](#format-strings-and-net-types)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>서식 문자열 및 .NET 형식<ept id="p1">](#format-strings-and-net-types)</ept></target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Culture-sensitive formatting with format providers and the IFormatProvider interface<ept id="p1">](#culture-sensitive-formatting-with-format-providers-and-the-iformatprovider-interface)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>서식 공급자 및 IFormatProvider 인터페이스를 사용하여 문화권 구분 서식 지정<ept id="p1">](#culture-sensitive-formatting-with-format-providers-and-the-iformatprovider-interface)</ept></target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Culture-sensitive formatting of numeric values<ept id="p1">](#culture-sensitive-formatting-of-numeric-values)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>숫자 값의 문화권 구분 서식 지정<ept id="p1">](#culture-sensitive-formatting-of-numeric-values)</ept></target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Culture-sensitive formatting of date and time values<ept id="p1">](#culture-sensitive-formatting-of-date-and-time-values)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>날짜 및 시간 값의 문화권 구분 서식 지정<ept id="p1">](#culture-sensitive-formatting-of-date-and-time-values)</ept></target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>The IFormattable interface<ept id="p1">](#the-iformattable-interface)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>IFormattable 인터페이스<ept id="p1">](#the-iformattable-interface)</ept></target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Composite formatting<ept id="p1">](#composite-formatting)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>복합 서식 지정<ept id="p1">](#composite-formatting)</ept></target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Custom formatting with ICustomFormatter<ept id="p1">](#custom-formatting-with-icustomformatter)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>ICustomFormatter를 사용한 사용자 지정 서식 지정<ept id="p1">](#custom-formatting-with-icustomformatter)</ept></target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Related topics<ept id="p1">](#related-topics)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>관련 항목<ept id="p1">](#related-topics)</ept></target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Reference<ept id="p1">](#reference)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>참조<ept id="p1">](#reference)</ept></target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Formatting in .NET</source>
          <target state="translated">.NET의 형식 지정</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The basic mechanism for formatting is the default implementation of the <bpt id="p1">[</bpt>Object.ToString<ept id="p1">](xref:System.Object.ToString)</ept> method, which is discussed in the <bpt id="p2">[</bpt>Default formatting using the ToString method<ept id="p2">](#default-formatting-using-the-tostring-method)</ept> section later in this topic.</source>
          <target state="translated">서식 지정의 기본 메커니즘은 <bpt id="p1">[</bpt>Object.ToString<ept id="p1">](xref:System.Object.ToString)</ept> 메서드의 기본 구현으로, 이 항목의 뒷부분에 있는 <bpt id="p2">[</bpt>ToString 메서드를 사용한 기본 서식 지정<ept id="p2">](#default-formatting-using-the-tostring-method)</ept> 섹션에서 설명합니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>However, .NET provides several ways to modify and extend its default formatting support.</source>
          <target state="translated">그러나 .NET에서는 기본 형식 지정 지원을 수정하고 확장할 수 있는 여러 가지 방법을 제공합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>These include the following:</source>
          <target state="translated">이러한 요구 사항은 다음과 같습니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Overriding the <bpt id="p1">[</bpt>Object.ToString<ept id="p1">](xref:System.Object.ToString)</ept> method to define a custom string representation of an object’s value.</source>
          <target state="translated"><bpt id="p1">[</bpt>Object.ToString<ept id="p1">](xref:System.Object.ToString)</ept> 메서드를 재정의하여 개체 값의 사용자 지정 문자열 표현을 정의합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>Overriding the ToString method<ept id="p1">](#overriding-the-tostring-method)</ept> section later in this topic.</source>
          <target state="translated">자세한 내용은 이 항목의 뒷부분에 있는 <bpt id="p1">[</bpt>ToString 메서드 재정의<ept id="p1">](#overriding-the-tostring-method)</ept> 섹션을 참조하세요.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Defining format specifiers that enable the string representation of an object’s value to take multiple forms.</source>
          <target state="translated">개체의 값에 대한 문자열 표현에서 여러 형식을 사용할 수 있도록 형식 지정자를 정의합니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For example, the "X" format specifier in the following statement converts an integer to the string representation of a hexadecimal value.</source>
          <target state="translated">예를 들어, 다음 문의 "X" 형식 지정자는 정수를 16진수 값의 문자열 표현으로 변환합니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For more information about format specifiers, see the <bpt id="p1">[</bpt>The ToString method and format strings<ept id="p1">](#the-tostring-method-and-format-strings)</ept> section.</source>
          <target state="translated">서식 지정자에 대한 자세한 내용은 <bpt id="p1">[</bpt>ToString 메서드 및 서식 문자열<ept id="p1">](#the-tostring-method-and-format-strings)</ept> 섹션을 참조하세요.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Using format providers to take advantage of the formatting conventions of a specific culture.</source>
          <target state="translated">형식 공급자를 사용하여 특정 문화권의 형식 지정 규칙을 사용합니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For example, the following statement displays a currency value by using the formatting conventions of the en-US culture.</source>
          <target state="translated">예를 들어, 다음 문은 en-US 문화권의 형식 지정 규칙을 사용하여 통화 값을 표시합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>For more information about formatting with format providers, see the <bpt id="p1">[</bpt>Culture-sensitive formatting with format providers and the IFormatProvider interface<ept id="p1">](#culture-sensitive-formatting-with-format-providers-and-the-iformatprovider-interface)</ept> section.</source>
          <target state="translated">서식 공급자를 사용하여 서식을 지정하는 방법에 대한 자세한 내용은 <bpt id="p1">[</bpt>서식 공급자 및 IFormatProvider 인터페이스를 사용하여 문화권 구분 서식 지정<ept id="p1">](#culture-sensitive-formatting-with-format-providers-and-the-iformatprovider-interface)</ept> 섹션을 참조하세요.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Implementing the <bpt id="p1">[</bpt>IFormattable<ept id="p1">](xref:System.IFormattable)</ept> interface to support both string conversion with the <bpt id="p2">[</bpt>Convert<ept id="p2">](xref:System.Convert)</ept> class and composite formatting.</source>
          <target state="translated"><bpt id="p1">[</bpt>IFormattable<ept id="p1">](xref:System.IFormattable)</ept> 인터페이스를 구현하여 <bpt id="p2">[</bpt>Convert<ept id="p2">](xref:System.Convert)</ept> 클래스를 사용한 문자열 변환과 복합 형식 지정을 둘 다 지원합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>The IFormattable interface<ept id="p1">](#the-iformattable-interface)</ept> section.</source>
          <target state="translated">자세한 내용은 <bpt id="p1">[</bpt>IFormattable 인터페이스<ept id="p1">](#the-iformattable-interface)</ept> 섹션을 참조하세요.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Using composite formatting to embed the string representation of a value in a larger string.</source>
          <target state="translated">복합 형식 지정을 사용하여 값의 문자열 표현을 더 큰 문자열에 포함합니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>Composite formatting<ept id="p1">](#composite-formatting)</ept> section.</source>
          <target state="translated">자세한 내용은 <bpt id="p1">[</bpt>복합 서식 지정<ept id="p1">](#composite-formatting)</ept> 섹션을 참조하세요.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Implementing <bpt id="p1">[</bpt>ICustomFormatter<ept id="p1">](xref:System.ICustomFormatter)</ept> and <bpt id="p2">[</bpt>IFormatProvider<ept id="p2">](xref:System.IFormatProvider)</ept> to provide a complete custom formatting solution.</source>
          <target state="translated"><bpt id="p1">[</bpt>ICustomFormatter<ept id="p1">](xref:System.ICustomFormatter)</ept> 및 <bpt id="p2">[</bpt>IFormatProvider<ept id="p2">](xref:System.IFormatProvider)</ept>를 구현하여 완벽한 사용자 지정 형식 지정 솔루션을 제공합니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>Custom formatting with ICustomFormatter<ept id="p1">](#custom-formatting-with-icustomformatter)</ept> section.</source>
          <target state="translated">자세한 내용은 <bpt id="p1">[</bpt>ICustomFormatter를 사용한 사용자 지정 서식 지정<ept id="p1">](#custom-formatting-with-icustomformatter)</ept> 섹션을 참조하세요.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The following sections examine these methods for converting an object to its string representation.</source>
          <target state="translated">다음 단원에서는 개체를 문자열 표현으로 변환하는 데 대해 이러한 메서드를 검토합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Default formatting using the ToString method</source>
          <target state="translated">ToString 메서드를 사용한 기본 서식 지정</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Every type that is derived from <bpt id="p1">[</bpt>System.Object<ept id="p1">](xref:System.Object)</ept> automatically inherits a parameterless <bpt id="p2">[</bpt>ToString<ept id="p2">](xref:System.Object.ToString)</ept> method, which returns the name of the type by default.</source>
          <target state="translated"><bpt id="p1">[</bpt>System.Object<ept id="p1">](xref:System.Object)</ept>에서 파생된 모든 형식은 기본적으로 형식의 이름을 반환하는, 매개 변수가 없는 <bpt id="p2">[</bpt>ToString<ept id="p2">](xref:System.Object.ToString)</ept> 메서드를 자동으로 상속받습니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The following example illustrates the default <bpt id="p1">[</bpt>ToString<ept id="p1">](xref:System.Object.ToString)</ept> method.</source>
          <target state="translated">다음 예제에서는 기본 <bpt id="p1">[</bpt>ToString<ept id="p1">](xref:System.Object.ToString)</ept> 메서드를 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>It defines a class named <ph id="ph1">`Automobile`</ph> that has no implementation.</source>
          <target state="translated">이 예제에서는 구현이 없는 <ph id="ph1">`Automobile`</ph>이라는 클래스를 정의합니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>When the class is instantiated and its <bpt id="p1">[</bpt>ToString<ept id="p1">](xref:System.Object.ToString)</ept> method is called, it displays its type name.</source>
          <target state="translated">클래스를 인스턴스화하고 <bpt id="p1">[</bpt>ToString<ept id="p1">](xref:System.Object.ToString)</ept> 메서드를 호출하면 해당 형식 이름이 표시됩니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Note that the <bpt id="p1">[</bpt>ToString<ept id="p1">](xref:System.Object.ToString)</ept> method is not explicitly called in the example.</source>
          <target state="translated">예제에서는 <bpt id="p1">[</bpt>ToString<ept id="p1">](xref:System.Object.ToString)</ept> 메서드를 명시적으로 호출하지 않습니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Console.WriteLine(Object)<ept id="p1">](xref:System.Console.WriteLine(System.Object))</ept> method implicitly calls the <bpt id="p2">[</bpt>ToString<ept id="p2">](xref:System.Object.ToString)</ept> method of the object passed to it as an argument.</source>
          <target state="translated"><bpt id="p1">[</bpt>Console.WriteLine(Object)<ept id="p1">](xref:System.Console.WriteLine(System.Object))</ept> 메서드는 인수로 전달된 개체의 <bpt id="p2">[</bpt>ToString<ept id="p2">](xref:System.Object.ToString)</ept> 메서드를 암시적으로 호출합니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Because all types other than interfaces are derived from <bpt id="p1">[</bpt>Object<ept id="p1">](xref:System.Object)</ept>, this functionality is automatically provided to your custom classes or structures.</source>
          <target state="translated">인터페이스를 제외한 모든 형식이 <bpt id="p1">[</bpt>Object<ept id="p1">](xref:System.Object)</ept>에서 파생되기 때문에 이 함수는 사용자 지정 클래스 또는 구조체에 자동으로 제공됩니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>However, the functionality offered by the default <bpt id="p1">[</bpt>ToString<ept id="p1">](xref:System.Object.ToString)</ept> method, is limited: Although it identifies the type, it fails to provide any information about an instance of the type.</source>
          <target state="translated">그러나 기본 <bpt id="p1">[</bpt>ToString<ept id="p1">](xref:System.Object.ToString)</ept> 메서드에서 제공하는 기능은 제한적이므로 형식을 식별하더라도 해당 형식의 인스턴스에 대한 정보를 제공하지 못합니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>To provide a string representation of an object that provides information about that object, you must override the <bpt id="p1">[</bpt>ToString<ept id="p1">](xref:System.Object.ToString)</ept> method.</source>
          <target state="translated">이 개체에 대한 정보를 제공하는 개체의 문자열 표현을 제공하려면 <bpt id="p1">[</bpt>ToString<ept id="p1">](xref:System.Object.ToString)</ept> 메서드를 재정의해야 합니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Structures inherit from <bpt id="p1">[</bpt>ValueType<ept id="p1">](xref:System.ValueType)</ept>, which in turn is derived from <bpt id="p2">[</bpt>Object<ept id="p2">](xref:System.Object)</ept>.</source>
          <target state="translated">구조체는 <bpt id="p1">[</bpt>ValueType<ept id="p1">](xref:System.ValueType)</ept>에서 상속받고, 이 형식은 다시 <bpt id="p2">[</bpt>Object<ept id="p2">](xref:System.Object)</ept>에서 파생됩니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Although <bpt id="p1">[</bpt>ValueType<ept id="p1">](xref:System.ValueType)</ept> overrides <bpt id="p2">[</bpt>Object.ToString<ept id="p2">](xref:System.Object.ToString)</ept>, its implementation is identical.</source>
          <target state="translated"><bpt id="p1">[</bpt>ValueType<ept id="p1">](xref:System.ValueType)</ept>이 <bpt id="p2">[</bpt>Object.ToString<ept id="p2">](xref:System.Object.ToString)</ept>을 재정의해도 해당 구현은 동일합니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Overriding the ToString method</source>
          <target state="translated">ToString 메서드 재정의</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Displaying the name of a type is often of limited use and does not allow consumers of your types to differentiate one instance from another.</source>
          <target state="translated">형식 이름을 표시할 수 있는 경우가 종종 제한되어 형식의 사용자가 서로 다른 인스턴스를 구분할 수 없는 경우가 있습니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>However, you can override the <bpt id="p1">[</bpt>ToString<ept id="p1">](xref:System.Object.ToString)</ept> method to provide a more useful representation of an object’s value.</source>
          <target state="translated">그러나 <bpt id="p1">[</bpt>ToString<ept id="p1">](xref:System.Object.ToString)</ept> 메서드를 재정의하여 개체 값을 더 유용하게 표현할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The following example defines a <ph id="ph1">`Temperature`</ph> object and overrides its <bpt id="p1">[</bpt>ToString<ept id="p1">](xref:System.Object.ToString)</ept> method to display the temperature in degrees Celsius.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">`Temperature`</ph> 개체를 정의하고 해당 <bpt id="p1">[</bpt>ToString<ept id="p1">](xref:System.Object.ToString)</ept> 메서드를 재정의하여 온도를 섭씨 단위로 표시합니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>In .NET, the <bpt id="p1">[</bpt>ToString<ept id="p1">](xref:System.Object.ToString)</ept> method of each primitive value type has been overridden to display the object’s value instead of its name.</source>
          <target state="translated">.NET에서 각 기본 값 형식의 <bpt id="p1">[</bpt>ToString<ept id="p1">](xref:System.Object.ToString)</ept> 메서드는 개체의 이름 대신 개체의 값을 표시하도록 재정의되었습니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The following table shows the override for each primitive type.</source>
          <target state="translated">다음 표에는 각 기본 형식의 재정의가 나와 있습니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Note that most of the overridden methods call another overload of the <bpt id="p1">[</bpt>ToString<ept id="p1">](xref:System.Object.ToString)</ept> method and pass it the "G" format specifier, which defines the general format for its type, and an <bpt id="p2">[</bpt>IFormatProvider<ept id="p2">](xref:System.IFormatProvider)</ept> object that represents the current culture.</source>
          <target state="translated">재정의된 메서드의 대부분은 <bpt id="p1">[</bpt>ToString<ept id="p1">](xref:System.Object.ToString)</ept> 메서드의 다른 오버로드를 호출하고 해당 형식의 일반적인 서식을 정의하는 "G" 형식 지정자와 현재 문화권을 나타내는 <bpt id="p2">[</bpt>IFormatProvider<ept id="p2">](xref:System.IFormatProvider)</ept> 개체를 전달합니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Type</source>
          <target state="translated">형식</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>ToString override</source>
          <target state="translated">ToString 재정의</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Boolean<ept id="p1">](xref:System.Boolean)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Boolean<ept id="p1">](xref:System.Boolean)</ept></target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Returns either <bpt id="p1">[</bpt>Boolean.TrueString<ept id="p1">](xref:System.Boolean.TrueString)</ept> or <bpt id="p2">[</bpt>Boolean.FalseString<ept id="p2">](xref:System.Boolean.FalseString)</ept>.</source>
          <target state="translated"><bpt id="p1">[</bpt>Boolean.TrueString<ept id="p1">](xref:System.Boolean.TrueString)</ept> 또는 <bpt id="p2">[</bpt>Boolean.FalseString<ept id="p2">](xref:System.Boolean.FalseString)</ept>을 반환합니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Byte<ept id="p1">](xref:System.Byte)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Byte<ept id="p1">](xref:System.Byte)</ept></target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Calls <ph id="ph1">`Byte.ToString("G", NumberFormatInfo.CurrentInfo)`</ph> to format the <bpt id="p1">[</bpt>Byte<ept id="p1">](xref:System.Byte)</ept> value for the current culture.</source>
          <target state="translated"><ph id="ph1">`Byte.ToString("G", NumberFormatInfo.CurrentInfo)`</ph>을 호출하여 현재 문화권에 대한 <bpt id="p1">[</bpt>Byte<ept id="p1">](xref:System.Byte)</ept> 값의 형식을 지정합니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Char<ept id="p1">](xref:System.Char)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Char<ept id="p1">](xref:System.Char)</ept></target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Returns the character as a string.</source>
          <target state="translated">문자를 문자열로 반환합니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>DateTime<ept id="p1">](xref:System.DateTime)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>DateTime<ept id="p1">](xref:System.DateTime)</ept></target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Calls <ph id="ph1">`DateTime.ToString("G", DatetimeFormatInfo.CurrentInfo)`</ph> to format the date and time value for the current culture.</source>
          <target state="translated"><ph id="ph1">`DateTime.ToString("G", DatetimeFormatInfo.CurrentInfo)`</ph>을 호출하여 현재 문화권에 대한 날짜 및 시간 값의 형식을 지정합니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Decimal<ept id="p1">](xref:System.Decimal)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Decimal<ept id="p1">](xref:System.Decimal)</ept></target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Calls <ph id="ph1">`Decimal.ToString("G", NumberFormatInfo.CurrentInfo)`</ph> to format the <bpt id="p1">[</bpt>Decimal<ept id="p1">](xref:System.Decimal)</ept> value for the current culture.</source>
          <target state="translated"><ph id="ph1">`Decimal.ToString("G", NumberFormatInfo.CurrentInfo)`</ph>을 호출하여 현재 문화권에 대한 <bpt id="p1">[</bpt>Decimal<ept id="p1">](xref:System.Decimal)</ept> 값의 형식을 지정합니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Double<ept id="p1">](xref:System.Double)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Double<ept id="p1">](xref:System.Double)</ept></target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Calls <ph id="ph1">`Double.ToString("G", NumberFormatInfo.CurrentInfo)`</ph> to format the <bpt id="p1">[</bpt>Double<ept id="p1">](xref:System.Double)</ept> value for the current culture.</source>
          <target state="translated"><ph id="ph1">`Double.ToString("G", NumberFormatInfo.CurrentInfo)`</ph>을 호출하여 현재 문화권에 대한 <bpt id="p1">[</bpt>Double<ept id="p1">](xref:System.Double)</ept> 값의 형식을 지정합니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Int16<ept id="p1">](xref:System.Int16)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Int16<ept id="p1">](xref:System.Int16)</ept></target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Calls <ph id="ph1">`Int16.ToString("G", NumberFormatInfo.CurrentInfo)`</ph> to format the <bpt id="p1">[</bpt>Int16<ept id="p1">](xref:System.Int16)</ept> value for the current culture.</source>
          <target state="translated"><ph id="ph1">`Int16.ToString("G", NumberFormatInfo.CurrentInfo)`</ph>을 호출하여 현재 문화권에 대한 <bpt id="p1">[</bpt>Int16<ept id="p1">](xref:System.Int16)</ept> 값의 형식을 지정합니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Int32<ept id="p1">](xref:System.Int32)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Int32<ept id="p1">](xref:System.Int32)</ept></target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Calls <ph id="ph1">`Int16.ToString("G", NumberFormatInfo.CurrentInfo)`</ph> to format the <bpt id="p1">[</bpt>Int32<ept id="p1">](xref:System.Int32)</ept> value for the current culture.</source>
          <target state="translated"><ph id="ph1">`Int16.ToString("G", NumberFormatInfo.CurrentInfo)`</ph>을 호출하여 현재 문화권에 대한 <bpt id="p1">[</bpt>Int32<ept id="p1">](xref:System.Int32)</ept> 값의 형식을 지정합니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Int64<ept id="p1">](xref:System.Int64)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Int64<ept id="p1">](xref:System.Int64)</ept></target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Calls <ph id="ph1">`Int16.ToString("G", NumberFormatInfo.CurrentInfo)`</ph> to format the <bpt id="p1">[</bpt>Int64<ept id="p1">](xref:System.Int64)</ept> value for the current culture.</source>
          <target state="translated"><ph id="ph1">`Int16.ToString("G", NumberFormatInfo.CurrentInfo)`</ph>을 호출하여 현재 문화권에 대한 <bpt id="p1">[</bpt>Int64<ept id="p1">](xref:System.Int64)</ept> 값의 형식을 지정합니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>SByte<ept id="p1">](xref:System.SByte)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>SByte<ept id="p1">](xref:System.SByte)</ept></target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Calls <ph id="ph1">`Int16.ToString("G", NumberFormatInfo.CurrentInfo)`</ph> to format the <bpt id="p1">[</bpt>SByte<ept id="p1">](xref:System.SByte)</ept></source>
          <target state="translated"><ph id="ph1">`Int16.ToString("G", NumberFormatInfo.CurrentInfo)`</ph>을 호출하여 현재 문화권에 대한 <bpt id="p1">[</bpt>SByte<ept id="p1">](xref:System.SByte)</ept></target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>value for the current culture.</source>
          <target state="translated">값의 형식을 지정합니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Single<ept id="p1">](xref:System.Single)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Single<ept id="p1">](xref:System.Single)</ept></target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Calls <ph id="ph1">`Int16.ToString("G", NumberFormatInfo.CurrentInfo)`</ph> to format the <bpt id="p1">[</bpt>Single<ept id="p1">](xref:System.Single)</ept> value for the current culture.</source>
          <target state="translated"><ph id="ph1">`Int16.ToString("G", NumberFormatInfo.CurrentInfo)`</ph>을 호출하여 현재 문화권에 대한 <bpt id="p1">[</bpt>Single<ept id="p1">](xref:System.Single)</ept> 값의 형식을 지정합니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>UInt32<ept id="p1">](xref:System.UInt32)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>UInt32<ept id="p1">](xref:System.UInt32)</ept></target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Calls <ph id="ph1">`Int16.ToString("G", NumberFormatInfo.CurrentInfo)`</ph> to format the <bpt id="p1">[</bpt>UInt32<ept id="p1">](xref:System.UInt32)</ept>value for the current culture.</source>
          <target state="translated"><ph id="ph1">`Int16.ToString("G", NumberFormatInfo.CurrentInfo)`</ph>을 호출하여 현재 문화권에 대한 <bpt id="p1">[</bpt>UInt32<ept id="p1">](xref:System.UInt32)</ept> 값의 형식을 지정합니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>UInt32<ept id="p1">](xref:System.UInt32)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>UInt32<ept id="p1">](xref:System.UInt32)</ept></target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Calls <ph id="ph1">`Int16.ToString("G", NumberFormatInfo.CurrentInfo)`</ph> to format the <bpt id="p1">[</bpt>UInt32<ept id="p1">](xref:System.UInt32)</ept> value for the current culture.</source>
          <target state="translated"><ph id="ph1">`Int16.ToString("G", NumberFormatInfo.CurrentInfo)`</ph>을 호출하여 현재 문화권에 대한 <bpt id="p1">[</bpt>UInt32<ept id="p1">](xref:System.UInt32)</ept> 값의 형식을 지정합니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>UInt64<ept id="p1">](xref:System.UInt64)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>UInt64<ept id="p1">](xref:System.UInt64)</ept></target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Calls <ph id="ph1">`Int16.ToString("G", NumberFormatInfo.CurrentInfo)`</ph> to format the <bpt id="p1">[</bpt>UInt64<ept id="p1">](xref:System.UInt64)</ept>  value for the current culture.</source>
          <target state="translated"><ph id="ph1">`Int16.ToString("G", NumberFormatInfo.CurrentInfo)`</ph>을 호출하여 현재 문화권에 대한 <bpt id="p1">[</bpt>UInt64<ept id="p1">](xref:System.UInt64)</ept> 값의 형식을 지정합니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The ToString method and format strings</source>
          <target state="translated">ToString 메서드 및 서식 문자열</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Relying on the default <bpt id="p1">[</bpt>ToString<ept id="p1">](xref:System.Object.ToString)</ept> method or overriding <bpt id="p2">[</bpt>ToString<ept id="p2">](xref:System.Object.ToString)</ept> is appropriate when an object has a single string representation.</source>
          <target state="translated">개체에 문자열 표현이 하나만 있는 경우에는 기본 <bpt id="p1">[</bpt>ToString<ept id="p1">](xref:System.Object.ToString)</ept> 메서드를 사용하거나 <bpt id="p2">[</bpt>ToString<ept id="p2">](xref:System.Object.ToString)</ept>을 재정의합니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>However, the value of an object often has multiple representations.</source>
          <target state="translated">하지만 개체의 값에 여러 표현이 있는 경우가 자주 있습니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>For example, a temperature can be expressed in degrees Fahrenheit, degrees Celsius, or kelvins.</source>
          <target state="translated">예를 들어 온도는 화씨, 섭씨 또는 캘빈으로 표시할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Similarly, the integer value 10 can be represented in numerous ways, including 10, 10.0, 1.0e01, or $10.00.</source>
          <target state="translated">마찬가지로 정수 값 10도 10, 10.0, 1.0e01, $10.00 등과 같은 여러 가지 방식으로 표현될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>To enable a single value to have multiple string representations, .NET uses format strings.</source>
          <target state="translated">하나의 값에 여러 문자열 표현을 허용하기 위해 .NET에서는 형식 문자열을 사용합니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>A format string is a string that contains one or more predefined format specifiers, which are single characters or groups of characters that define how the <bpt id="p1">[</bpt>ToString<ept id="p1">](xref:System.Object.ToString)</ept> method should format its output.</source>
          <target state="translated">형식 문자열은 하나 이상의 미리 정의된 형식 지정자가 들어 있는 문자열이며, 이러한 형식 지정자는 <bpt id="p1">[</bpt>ToString<ept id="p1">](xref:System.Object.ToString)</ept> 메서드가 해당 출력의 형식을 지정하는 방식을 정의한 단일 문자 또는 문자 그룹입니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The format string is then passed as a parameter to the object's <bpt id="p1">[</bpt>ToString<ept id="p1">](xref:System.Object.ToString)</ept> method and determines how the string representation of that object's value should appear.</source>
          <target state="translated">형식 문자열은 개체의 <bpt id="p1">[</bpt>ToString<ept id="p1">](xref:System.Object.ToString)</ept> 메서드에 매개 변수로 전달되어 개체의 값에 대한 문자열 표현의 표시 방법을 결정합니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>All numeric types, date and time types, and enumeration types in .NET support a predefined set of format specifiers.</source>
          <target state="translated">.NET의 모든 숫자 형식, 날짜/시간 형식 및 열거형 형식은 미리 정의된 형식 지정자 집합을 지원합니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>You can also use format strings to define multiple string representations of your application-defined data types.</source>
          <target state="translated">형식 문자열을 사용하여 응용 프로그램 정의 데이터 형식의 여러 문자열 표현도 정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Standard format strings</source>
          <target state="translated">표준 서식 문자열</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>A standard format string contains a single format specifier, which is an alphabetic character that defines the string representation of the object to which it is applied, along with an optional precision specifier that affects how many digits are displayed in the result string.</source>
          <target state="translated">표준 형식 문자열에는 개체의 문자열 표현을 정의하는 영문자인 단일 형식 지정자와 함께 결과 문자열을 표시하는 데 사용할 자릿수에 영향을 주는 선택적 전체 자릿수 지정자가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>If the precision specifier is omitted or is not supported, a standard format specifier is equivalent to a standard format string.</source>
          <target state="translated">전체 자릿수 지정자가 생략되었거나 지원되지 않으면 표준 형식 지정자는 표준 형식 문자열과 같습니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>.NET defines a set of standard format specifiers for all numeric types, all date and time types, and all enumeration types.</source>
          <target state="translated">.NET에서는 모든 숫자 형식, 날짜/시간 형식 및 열거형 형식에 대한 표준 형식 지정자 집합을 정의합니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>For example, each of these categories supports a "G" standard format specifier, which defines a general string representation of a value of that type.</source>
          <target state="translated">예를 들어, 이러한 각 범주는 해당 형식 값에 대한 일반적인 문자열 표현을 정의하는 "G" 표준 형식 지정자를 지원합니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Standard format strings for enumeration types directly control the string representation of a value.</source>
          <target state="translated">열거형 형식의 표준 형식 문자열은 값의 문자열 표현을 직접 제어합니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The format strings passed to an enumeration value’s <bpt id="p1">[</bpt>ToString<ept id="p1">](xref:System.Object.ToString)</ept> method determine whether the value is displayed using its string name (the "G" and "F" format specifiers), its underlying integral value (the "D" format specifier), or its hexadecimal value (the "X" format specifier).</source>
          <target state="translated">열거형 값의 <bpt id="p1">[</bpt>ToString<ept id="p1">](xref:System.Object.ToString)</ept> 메서드에 전달된 형식 문자열은 값이 문자열 이름("G" 및 "F" 형식 지정자), 내부 정수 값("D" 형식 지정자) 또는 16진수 값("X" 형식 지정자)을 사용하여 표시되는지 여부를 결정합니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The following example illustrates the use of standard format strings to format a <bpt id="p1">[</bpt>DayOfWeek<ept id="p1">](xref:System.DayOfWeek)</ept> enumeration value.</source>
          <target state="translated">다음 예제에서는 표준 형식 문자열을 사용하여 <bpt id="p1">[</bpt>DayOfWeek<ept id="p1">](xref:System.DayOfWeek)</ept> 열거형 값의 형식을 지정하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>For information about enumeration format strings, see <bpt id="p1">[</bpt>Enumeration format strings<ept id="p1">](enumeration-format.md)</ept>.</source>
          <target state="translated">열거형 서식 문자열에 대한 자세한 내용은 <bpt id="p1">[</bpt>열거형 서식 문자열<ept id="p1">](enumeration-format.md)</ept>을 참조하세요.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Standard format strings for numeric types usually define a result string whose precise appearance is controlled by one or more property values.</source>
          <target state="translated">일반적으로 숫자 형식의 표준 형식 문자열은 정확한 모양이 하나 이상의 속성 값에 의해 제어되는 결과 문자열을 정의합니다.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>For example, the "C" format specifier formats a number as a currency value.</source>
          <target state="translated">예를 들어, "C" 형식 지정자는 숫자의 형식을 통화 값으로 지정합니다.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>When you call the <bpt id="p1">[</bpt>ToString<ept id="p1">](xref:System.Object.ToString)</ept> method with the "C" format specifier as the only parameter, the following property values from the current culture’s <bpt id="p2">[</bpt>NumberFormatInfo<ept id="p2">](xref:System.Globalization.NumberFormatInfo)</ept> object are used to define the string representation of the numeric value:</source>
          <target state="translated">"C" 형식 지정자를 유일한 매개 변수로 사용하여 <bpt id="p1">[</bpt>ToString<ept id="p1">](xref:System.Object.ToString)</ept> 메서드를 호출하면 현재 문화권의 <bpt id="p2">[</bpt>NumberFormatInfo<ept id="p2">](xref:System.Globalization.NumberFormatInfo)</ept> 개체에 있는 다음 속성 값이 숫자 값의 문자열 표현을 정의하는 데 사용됩니다.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>CurrencySymbol<ept id="p1">](xref:System.Globalization.NumberFormatInfo.CurrencySymbol)</ept> property, which specifies the current culture’s currency symbol.</source>
          <target state="translated">현재 문화권의 통화 기호를 지정하는 <bpt id="p1">[</bpt>CurrencySymbol<ept id="p1">](xref:System.Globalization.NumberFormatInfo.CurrencySymbol)</ept> 속성</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>CurrencyNegativePattern<ept id="p1">](xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern)</ept> or <bpt id="p2">[</bpt>CurrencyPositivePattern<ept id="p2">](xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern)</ept> property, which returns an integer that determines the following:</source>
          <target state="translated">다음과 같은 사항을 결정하는 정수를 반환하는 <bpt id="p1">[</bpt>CurrencyNegativePattern<ept id="p1">](xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern)</ept> 또는 <bpt id="p2">[</bpt>CurrencyPositivePattern<ept id="p2">](xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern)</ept> 속성</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The placement of the currency symbol.</source>
          <target state="translated">통화 기호의 위치</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Whether negative values are indicated by a leading negative sign, a trailing negative sign, or parentheses.</source>
          <target state="translated">음수 값이 선행 음수 기호, 후행 음수 기호 또는 괄호로 표시되는지 여부</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Whether a space appears between the numeric value and the currency symbol.</source>
          <target state="translated">숫자 값과 통화 기호 사이에 공백이 표시되는지 여부</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>CurrencyDecimalDigits<ept id="p1">](xref:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits)</ept> property, which defines the number of fractional digits in the result string.</source>
          <target state="translated">결과 문자열의 소수 자릿수를 정의하는 <bpt id="p1">[</bpt>CurrencyDecimalDigits<ept id="p1">](xref:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits)</ept> 속성</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>CurrencyDecimalSeparator<ept id="p1">](xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator)</ept> property, which defines the decimal separator symbol in the result string.</source>
          <target state="translated">결과 문자열의 소수 구분 기호를 정의하는 <bpt id="p1">[</bpt>CurrencyDecimalSeparator<ept id="p1">](xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator)</ept> 속성</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>CurrencyGroupSeparator<ept id="p1">](xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator)</ept> property, which defines the group separator symbol.</source>
          <target state="translated">그룹 구분 기호를 정의하는 <bpt id="p1">[</bpt>CurrencyGroupSeparator<ept id="p1">](xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator)</ept> 속성</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>CurrencyGroupSizes<ept id="p1">](xref:System.Globalization.NumberFormatInfo.CurrencyGroupSizes)</ept> property, which defines the number of digits in each group to the left of the decimal.</source>
          <target state="translated">정수 부분의 각 그룹 자릿수를 정의하는 <bpt id="p1">[</bpt>CurrencyGroupSizes<ept id="p1">](xref:System.Globalization.NumberFormatInfo.CurrencyGroupSizes)</ept> 속성</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>NegativeSign<ept id="p1">](xref:System.Globalization.NumberFormatInfo.NegativeSign)</ept> property, which determines the negative sign used in the result string if parentheses are not used to indicate negative values.</source>
          <target state="translated">음수 값을 나타내는 데 괄호가 사용되지 않는 경우 결과 문자열에 사용되는 음수 기호를 결정하는 <bpt id="p1">[</bpt>NegativeSign<ept id="p1">](xref:System.Globalization.NumberFormatInfo.NegativeSign)</ept> 속성</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>In addition, numeric format strings may include a precision specifier.</source>
          <target state="translated">이외에도 숫자 형식 문자열에는 전체 자릿수 지정자가 포함될 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>The meaning of this specifier depends on the format string with which it is used, but it typically indicates either the total number of digits or the number of fractional digits that should appear in the result string.</source>
          <target state="translated">이 지정자의 의미는 해당 지정자가 사용되는 형식 문자열에 따라 달라지지만 일반적으로 결과 문자열에 표시될 전체 자릿수나 소수 자릿수를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>For example, the following example uses the "X4" standard numeric string and a precision specifier to create a string value that has four hexadecimal digits.</source>
          <target state="translated">예를 들어, 다음 예제에서는 "X4" 표준 숫자 문자열과 전체 자릿수 지정자를 사용하여 네 자리의 16진수로 구성된 문자열 값을 만듭니다.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>For more information about standard numeric formatting strings, see <bpt id="p1">[</bpt>Standard numeric format strings<ept id="p1">](standard-numeric.md)</ept>.</source>
          <target state="translated">표준 숫자 서식 문자열에 대한 자세한 내용은 <bpt id="p1">[</bpt>표준 숫자 서식 문자열<ept id="p1">](standard-numeric.md)</ept>을 참조하세요.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Standard format strings for date and time values are aliases for custom format strings stored by a particular <bpt id="p1">[</bpt>DateTimeFormatInfo<ept id="p1">](xref:System.Globalization.DateTimeFormatInfo)</ept> class.</source>
          <target state="translated">날짜 및 시간 값의 표준 형식 문자열은 특정 <bpt id="p1">[</bpt>DateTimeFormatInfo<ept id="p1">](xref:System.Globalization.DateTimeFormatInfo)</ept> 클래스에 저장된 사용자 지정 형식 문자열의 별칭입니다.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>For example, calling the <bpt id="p1">[</bpt>ToString<ept id="p1">](xref:System.Object.ToString)</ept> method of a date and time value with the "D" format specifier displays the date and time by using the custom format string stored in the current culture’s <bpt id="p2">[</bpt>DateTimeFormatInfo.LongDatePattern<ept id="p2">](xref:System.Globalization.DateTimeFormatInfo.LongDatePattern)</ept> property.</source>
          <target state="translated">예를 들어, "D" 형식 지정자를 사용하여 날짜 및 시간 값의 <bpt id="p1">[</bpt>ToString<ept id="p1">](xref:System.Object.ToString)</ept> 메서드를 호출하면 현재 문화권의 <bpt id="p2">[</bpt>DateTimeFormatInfo.LongDatePattern<ept id="p2">](xref:System.Globalization.DateTimeFormatInfo.LongDatePattern)</ept> 속성에 저장된 사용자 지정 형식 문자열을 사용하여 날짜 및 시간이 표시됩니다.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>(For more information about custom format strings, see the <bpt id="p1">[</bpt>Custom format strings<ept id="p1">](#custom-format-strings)</ept> section.) The following example illustrates this relationship.</source>
          <target state="translated">사용자 지정 서식 문자열에 대한 자세한 내용은 <bpt id="p1">[</bpt>사용자 지정 서식 문자열<ept id="p1">](#custom-format-strings)</ept>을 참조하세요. 다음 예제에서는 이러한 관계를 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>For more information about standard date and time format strings, see <bpt id="p1">[</bpt>Standard date and time format strings<ept id="p1">](standard-datetime.md)</ept>.</source>
          <target state="translated">표준 날짜 및 시간 서식 문자열에 대한 자세한 내용은 <bpt id="p1">[</bpt>표준 날짜 및 시간 서식 문자열<ept id="p1">](standard-datetime.md)</ept>을 참조하세요.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>You can also use standard format strings to define the string representation of an application-defined object that is produced by the object’s <ph id="ph1">`ToString(String)`</ph> method.</source>
          <target state="translated">표준 형식 문자열을 사용하여 개체의 <ph id="ph1">`ToString(String)`</ph> 메서드에 의해 생성되는 응용 프로그램 정의 개체의 문자열 표현도 정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>You can define the specific standard format specifiers that your object supports, and you can determine whether they are case-sensitive or case-insensitive.</source>
          <target state="translated">개체가 지원하는 특정 표준 형식 지정자를 정의하고 이러한 지정자가 대/소문자를 구분하는지 여부를 결정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Your implementation of the <ph id="ph1">`ToString(String)`</ph> method should support the following:</source>
          <target state="translated"><ph id="ph1">`ToString(String)`</ph> 메서드의 구현에서는 다음을 지원해야 합니다.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>A "G" format specifier that represents a customary or common format of the object.</source>
          <target state="translated">개체의 사용자 지정 또는 일반 형식을 나타내는 "G" 형식 지정자.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>The parameterless overload of your object's <ph id="ph1">`ToString`</ph> method should call its <ph id="ph2">`ToString(String)`</ph> overload and pass it the "G" standard format string.</source>
          <target state="translated">개체의 <ph id="ph1">`ToString`</ph> 메서드에 대한 매개 변수가 없는 오버로드는 해당 <ph id="ph2">`ToString(String)`</ph> 오버로드를 호출하고 이를 "G" 표준 형식 문자열에 전달해야 합니다.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Support for a format specifier that is equal to a null reference.</source>
          <target state="translated">null 참조와 동일한 형식 지정자에 대한 지원.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>A format specifier that is equal to a null reference should be considered equivalent to the "G" format specifier.</source>
          <target state="translated">null 참조와 동일한 형식 지정자는 "G" 형식 지정자와 같은 것으로 간주됩니다.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>For example, a <ph id="ph1">`Temperature`</ph> class can internally store the temperature in degrees Celsius and use format specifiers to represent the value of the <ph id="ph2">`Temperature`</ph> object in degrees Celsius, degrees Fahrenheit, and kelvins.</source>
          <target state="translated">예를 들어 <ph id="ph1">`Temperature`</ph> 클래스는 섭씨 온도를 내부적으로 저장하고 형식 지정자를 사용하여 <ph id="ph2">`Temperature`</ph> 개체의 값을 섭씨, 화씨 및 캘빈으로 표시할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>The following example provides an illustration.</source>
          <target state="translated">다음 예제에서 이에 대해 설명합니다.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Custom format strings</source>
          <target state="translated">사용자 지정 서식 문자열</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>In addition to the standard format strings, .NET defines custom format strings for both numeric values and date and time values.</source>
          <target state="translated">표준 형식 문자열 외에도 .NET에서는 숫자 값과 날짜 및 시간 값에 대한 사용자 지정 형식 문자열을 정의합니다.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>A custom format string consists of one or more custom format specifiers that define the string representation of a value.</source>
          <target state="translated">사용자 지정 형식 문자열은 값의 문자열 표현을 정의하는 하나 이상의 사용자 지정 형식 지정자로 구성됩니다.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>For example, the custom date and time format string "yyyy/mm/dd hh:mm:ss.ffff t zzz" converts a date to its string representation in the form "2008/11/15 07:45:00.0000 P -08:00" for the en-US culture.</source>
          <target state="translated">예를 들어, en-US 문화권의 경우 사용자 지정 날짜 및 시간 형식 문자열 "yyyy/mm/dd hh:mm:ss t zzz"는 날짜를 "2008/11/15 07:45:00.0000 P -08:00" 형태의 문자열 표현으로 변환합니다.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Similarly, the custom format string "0000" converts the integer value 12 to "0012".</source>
          <target state="translated">마찬가지로 사용자 지정 형식 문자열 "0000"은 정수 값 12를 "0012"로 변환합니다.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>For a complete list of custom format strings, see <bpt id="p1">[</bpt>Custom date and time format strings<ept id="p1">](custom-datetime.md)</ept> and <bpt id="p2">[</bpt>Custom numeric format strings<ept id="p2">](custom-numeric.md)</ept>.</source>
          <target state="translated">사용자 지정 서식 문자열의 전체 목록은 <bpt id="p1">[</bpt>사용자 지정 날짜 및 시간 서식 문자열<ept id="p1">](custom-datetime.md)</ept> 및 <bpt id="p2">[</bpt>사용자 지정 숫자 서식 문자열<ept id="p2">](custom-numeric.md)</ept>을 참조하세요.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>If a format string consists of a single custom format specifier, the format specifier should be preceded by the percent (%) symbol to avoid confusion with a standard format specifier.</source>
          <target state="translated">형식 문자열이 단일 사용자 지정 형식 지정자로 구성된 경우에는 표준 형식 지정자와 혼동되지 않도록 형식 지정자 앞에 백분율 기호(%)가 와야 합니다.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>The following example uses the "M" custom format specifier to display a one-digit or two-digit number of the month of a particular date.</source>
          <target state="translated">다음 예제에서는 "M" 사용자 지정 형식 지정자를 사용하여 특정 날짜의 월에 해당하는 한 자리 또는 두 자리 숫자를 표시합니다.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Many standard format strings for date and time values are aliases for custom format strings that are defined by properties of the <bpt id="p1">[</bpt>DateTimeFormatInfo<ept id="p1">](xref:System.Globalization.DateTimeFormatInfo)</ept> object.</source>
          <target state="translated">많은 표준 형식 문자열은 <bpt id="p1">[</bpt>DateTimeFormatInfo<ept id="p1">](xref:System.Globalization.DateTimeFormatInfo)</ept> 개체의 속성에 정의된 사용자 지정 형식 문자열의 별칭입니다.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Custom format strings also offer considerable flexibility in providing application-defined formatting for numeric values or date and time values.</source>
          <target state="translated">또한 사용자 지정 형식 문자열을 사용하면 상당히 융통성 있게 숫자 값 또는 날짜 및 시간 값에 대한 응용 프로그램 정의 형식 지정 기능을 제공할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>You can define your own custom result strings for both numeric values and date and time values by combining multiple custom format specifiers into a single custom format string.</source>
          <target state="translated">여러 사용자 지정 형식 지정자를 하나의 사용자 지정 형식 문자열로 결합하여 숫자 값과 날짜 및 시간 값에 대한 사용자 지정 결과 문자열을 정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>The following example defines a custom format string that displays the day of the week in parentheses after the month name, day, and year.</source>
          <target state="translated">다음 예제에서는 월 이름, 일, 연도 및 괄호로 묶은 요일을 차례로 표시하는 사용자 지정 형식 문자열을 정의합니다.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>The following example defines a custom format string that displays an <bpt id="p1">[</bpt>Int64<ept id="p1">](xref:System.Int64)</ept> value as a standard, seven-digit U.S. telephone number along with its area code.</source>
          <target state="translated">다음 예제에서는 <bpt id="p1">[</bpt>Int64<ept id="p1">](xref:System.Int64)</ept> 값을 7자리 표준 미국 전화 번호로 지역 번호와 함께 표시하는 사용자 지정 형식 문자열을 정의합니다.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Although standard format strings can generally handle most of the formatting needs for your application-defined types, you may also define custom format specifiers to format your types.</source>
          <target state="translated">일반적으로 표준 형식 문자열로 응용 프로그램 정의 형식의 형식 지정 요구를 대부분 처리할 수 있지만 사용자 지정 형식 지정자를 정의하여 형식의 형식을 지정할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Format strings and .NET types</source>
          <target state="translated">서식 문자열 및 .NET 형식</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>All numeric types (that is, the <bpt id="p1">[</bpt>Byte<ept id="p1">](xref:System.Byte)</ept>, <bpt id="p2">[</bpt>Decimal<ept id="p2">](xref:System.Decimal)</ept>, <bpt id="p3">[</bpt>Double<ept id="p3">](xref:System.Double)</ept>, <bpt id="p4">[</bpt>Int16<ept id="p4">](xref:System.Int16)</ept>, <bpt id="p5">[</bpt>Int32<ept id="p5">](xref:System.Int32)</ept>, <bpt id="p6">[</bpt>Int64<ept id="p6">](xref:System.Int64)</ept>, <bpt id="p7">[</bpt>SByte<ept id="p7">](xref:System.SByte)</ept>, <bpt id="p8">[</bpt>Single<ept id="p8">](xref:System.Single)</ept>, <bpt id="p9">[</bpt>UInt16<ept id="p9">](xref:System.UInt16)</ept>, <bpt id="p10">[</bpt>UInt32<ept id="p10">](xref:System.UInt32)</ept>, <bpt id="p11">[</bpt>UInt64<ept id="p11">](xref:System.UInt64)</ept>, and <bpt id="p12">[</bpt>BigInteger<ept id="p12">](xref:System.Numerics.BigInteger)</ept> types), as well as the <bpt id="p13">[</bpt>DateTime<ept id="p13">](xref:System.DateTime)</ept>, <bpt id="p14">[</bpt>DateTimeOffset<ept id="p14">](xref:System.DateTimeOffset)</ept>, <bpt id="p15">[</bpt>TimeSpan<ept id="p15">](xref:System.TimeSpan)</ept>, <bpt id="p16">[</bpt>Guid<ept id="p16">](xref:System.Guid)</ept>, and all enumeration types, support formatting with format strings.</source>
          <target state="translated">모든 숫자 형식(즉, <bpt id="p1">[</bpt>Byte<ept id="p1">](xref:System.Byte)</ept>, <bpt id="p2">[</bpt>Decimal<ept id="p2">](xref:System.Decimal)</ept>, <bpt id="p3">[</bpt>Double<ept id="p3">](xref:System.Double)</ept>, <bpt id="p4">[</bpt>Int16<ept id="p4">](xref:System.Int16)</ept>, <bpt id="p5">[</bpt>Int32<ept id="p5">](xref:System.Int32)</ept>, <bpt id="p6">[</bpt>Int64<ept id="p6">](xref:System.Int64)</ept>, <bpt id="p7">[</bpt>SByte<ept id="p7">](xref:System.SByte)</ept>, <bpt id="p8">[</bpt>Single<ept id="p8">](xref:System.Single)</ept>, <bpt id="p9">[</bpt>UInt16<ept id="p9">](xref:System.UInt16)</ept>, <bpt id="p10">[</bpt>UInt32<ept id="p10">](xref:System.UInt32)</ept>, <bpt id="p11">[</bpt>UInt64<ept id="p11">](xref:System.UInt64)</ept>, <bpt id="p12">[</bpt>BigInteger<ept id="p12">](xref:System.Numerics.BigInteger)</ept> 형식), <bpt id="p13">[</bpt>DateTime<ept id="p13">](xref:System.DateTime)</ept>, <bpt id="p14">[</bpt>DateTimeOffset<ept id="p14">](xref:System.DateTimeOffset)</ept>, <bpt id="p15">[</bpt>TimeSpan<ept id="p15">](xref:System.TimeSpan)</ept>, <bpt id="p16">[</bpt>Guid<ept id="p16">](xref:System.Guid)</ept> 및 모든 열거형 형식은 형식 문자열을 사용한 형식 지정을 지원합니다.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>For information on the specific format strings supported by each type, see the following topics:</source>
          <target state="translated">각 형식에서 지원되는 형식 문자열에 대한 자세한 내용은 다음 항목을 참조하세요.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Title</source>
          <target state="translated">제목</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Definition</source>
          <target state="translated">정의</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Standard numeric format strings<ept id="p1">](standard-numeric.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>표준 숫자 서식 문자열<ept id="p1">](standard-numeric.md)</ept></target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Describes standard format strings that create commonly used string representations of numeric values.</source>
          <target state="translated">숫자 값의 일반적으로 사용되는 문자열 표현을 만드는 표준 형식 문자열에 대해 설명합니다.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Custom numeric format strings<ept id="p1">](custom-numeric.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>사용자 지정 숫자 서식 문자열<ept id="p1">](custom-numeric.md)</ept></target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Describes custom format strings that create application-specific formats for numeric values.</source>
          <target state="translated">숫자 값의 응용 프로그램별 형식을 만드는 사용자 지정 형식 문자열에 대해 설명합니다.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Standard date and time format strings<ept id="p1">](standard-datetime.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>표준 날짜 및 시간 서식 문자열<ept id="p1">](standard-datetime.md)</ept></target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Describes standard format strings that create commonly used string representations of <bpt id="p1">[</bpt>DateTime<ept id="p1">](xref:System.DateTime)</ept> values.</source>
          <target state="translated"><bpt id="p1">[</bpt>DateTime<ept id="p1">](xref:System.DateTime)</ept> 값의 일반적으로 사용되는 문자열 표현을 만드는 표준 형식 문자열에 대해 설명합니다.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Custom date and time format strings<ept id="p1">](custom-datetime.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>사용자 지정 날짜 및 시간 서식 문자열<ept id="p1">](custom-datetime.md)</ept></target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Describes custom format strings that create application-specific formats for <bpt id="p1">[</bpt>DateTime<ept id="p1">](xref:System.DateTime)</ept> values.</source>
          <target state="translated"><bpt id="p1">[</bpt>DateTime<ept id="p1">](xref:System.DateTime)</ept> 값의 응용 프로그램별 형식을 만드는 사용자 지정 형식 문자열에 대해 설명합니다.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Standard TimeSpan format Strings<ept id="p1">](standard-timespan.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>표준 TimeSpan 서식 문자열<ept id="p1">](standard-timespan.md)</ept></target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Describes standard format strings that create commonly used string representations of time intervals.</source>
          <target state="translated">시간 간격의 일반적으로 사용되는 문자열 표현을 만드는 표준 형식 문자열에 대해 설명합니다.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Custom TimeSpan format strings<ept id="p1">](custom-timespan.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>사용자 지정 TimeSpan 서식 문자열<ept id="p1">](custom-timespan.md)</ept></target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Describes custom format strings that create application-specific formats for time intervals.</source>
          <target state="translated">시간 간격의 응용 프로그램별 형식을 만드는 사용자 지정 형식 문자열에 대해 설명합니다.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Enumeration format strings<ept id="p1">](enumeration-format.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>열거형 서식 문자열<ept id="p1">](enumeration-format.md)</ept></target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Describes standard format strings that are used to create string representations of enumeration values.</source>
          <target state="translated">열거형 값의 문자열 표현을 만드는 데 사용되는 표준 형식 문자열에 대해 설명합니다.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Guid.ToString(String)<ept id="p1">](xref:System.Guid.ToString(System.String))</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Guid.ToString(String)<ept id="p1">](xref:System.Guid.ToString(System.String))</ept></target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Describes standard format strings for <bpt id="p1">[</bpt>Guid<ept id="p1">](xref:System.Guid)</ept> values.</source>
          <target state="translated"><bpt id="p1">[</bpt>Guid<ept id="p1">](xref:System.Guid)</ept> 값의 표준 형식 문자열에 대해 설명합니다.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Culture-Sensitive Formatting with Format Providers and the IFormatProvider Interface</source>
          <target state="translated">형식 공급자 및 IFormatProvider 인터페이스를 사용하여 문화권 구분 서식 지정</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Although format specifiers let you customize the formatting of objects, producing a meaningful string representation of objects often requires additional formatting information.</source>
          <target state="translated">형식 지정자를 사용하여 개체의 형식 지정을 사용자 지정할 수 있기는 하지만 의미 있는 개체의 문자열 표현을 만들려면 추가 형식 지정 정보가 필요한 경우가 종종 있습니다.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>For example, formatting a number as a currency value by using either the "C" standard format string or a custom format string such as "$ #,#.00" requires, at a minimum, information about the correct currency symbol, group separator, and decimal separator to be available to include in the formatted string.</source>
          <target state="translated">예를 들어, C" 표준 형식 문자열이나 "$ #,#.00" 같은 사용자 지정 형식 문자열을 사용하여 숫자의 형식을 통화 값으로 지정하려면 최소한 올바른 통화 기호, 그룹 구분 기호 및 소수 구분 기호에 대한 정보를 형식 지정된 문자열에 포함할 수 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>In .NET, this additional formatting information is made available through the <bpt id="p1">[</bpt>IFormatProvider<ept id="p1">](xref:System.IFormatProvider)</ept> interface, which is provided as a parameter to one or more overloads of the <ph id="ph1">`ToString`</ph> method of numeric types and date and time types.</source>
          <target state="translated">.NET에서는 이러한 추가 형식 지정 정보를 <bpt id="p1">[</bpt>IFormatProvider<ept id="p1">](xref:System.IFormatProvider)</ept> 인터페이스를 통해 사용할 수 있습니다. 이러한 인터페이스는 숫자 형식과 날짜 및 시간 형식의 <ph id="ph1">`ToString`</ph> 메서드에 대한 하나 이상의 오버로드에 매개 변수로 제공됩니다.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>IFormatProvider<ept id="p1">](xref:System.IFormatProvider)</ept> implementations are used in .NET to support culture-specific formatting.</source>
          <target state="translated"><bpt id="p1">[</bpt>IFormatProvider<ept id="p1">](xref:System.IFormatProvider)</ept> 구현은 문화권별 형식 지정을 지원하기 위해 .NET에서 사용됩니다.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>The following example illustrates how the string representation of an object changes when it is formatted with three <bpt id="p1">[</bpt>IFormatProvider<ept id="p1">](xref:System.IFormatProvider)</ept> objects that represent different cultures.</source>
          <target state="translated">다음 예제에서는 서로 다른 문화권을 나타내는 세 <bpt id="p1">[</bpt>IFormatProvider<ept id="p1">](xref:System.IFormatProvider)</ept> 개체를 사용하여 형식을 지정할 때 개체의 문자열 표현이 어떻게 바뀌는지 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>IFormatProvider<ept id="p1">](xref:System.IFormatProvider)</ept> interface includes one method, <bpt id="p2">[</bpt>GetFormat(Type)<ept id="p2">](xref:System.IFormatProvider.GetFormat(System.Type))</ept>, which has a single parameter that specifies the type of object that provides formatting information.</source>
          <target state="translated"><bpt id="p1">[</bpt>IFormatProvider<ept id="p1">](xref:System.IFormatProvider)</ept> 인터페이스에는 <bpt id="p2">[</bpt>GetFormat(Type)<ept id="p2">](xref:System.IFormatProvider.GetFormat(System.Type))</ept> 메서드가 하나 있으며, 이 메서드에는 형식 지정 정보를 제공하는 개체의 형식을 지정하는 매개 변수가 하나 있습니다.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>If the method can provide an object of that type, it returns it.</source>
          <target state="translated">이 메서드는 해당 형식의 개체를 제공할 수 있는 경우 해당 형식의 개체를 반환합니다.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Otherwise, it returns a null reference.</source>
          <target state="translated">제공할 수 없으면 null 참조를 반환합니다.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>IFormatProvider.GetFormat<ept id="p1">](xref:System.IFormatProvider.GetFormat(System.Type))</ept> is a callback method.</source>
          <target state="translated"><bpt id="p1">[</bpt>IFormatProvider.GetFormat<ept id="p1">](xref:System.IFormatProvider.GetFormat(System.Type))</ept>은 콜백 메서드입니다.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>When you call a <ph id="ph1">`ToString`</ph> method overload that includes an <bpt id="p1">[</bpt>IFormatProvider<ept id="p1">](xref:System.IFormatProvider)</ept> parameter, it calls the <bpt id="p2">[</bpt>GetFormat<ept id="p2">](xref:System.IFormatProvider.GetFormat(System.Type))</ept> method of that <bpt id="p3">[</bpt>IFormatProvider<ept id="p3">](xref:System.IFormatProvider)</ept> object.</source>
          <target state="translated"><bpt id="p1">[</bpt>IFormatProvider<ept id="p1">](xref:System.IFormatProvider)</ept> 매개 변수가 포함된 <ph id="ph1">`ToString`</ph> 메서드 오버로드를 호출하면 해당 <bpt id="p3">[</bpt>IFormatProvider<ept id="p3">](xref:System.IFormatProvider)</ept> 개체의 <bpt id="p2">[</bpt>GetFormat<ept id="p2">](xref:System.IFormatProvider.GetFormat(System.Type))</ept> 메서드가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>GetFormat<ept id="p1">](xref:System.IFormatProvider.GetFormat(System.Type))</ept> method is responsible for returning an object that provides the necessary formatting information, as specified by its <bpt id="p2">*</bpt>formatType<ept id="p2">*</ept> parameter, to the <ph id="ph1">`ToString`</ph> method.</source>
          <target state="translated"><bpt id="p1">[</bpt>GetFormat<ept id="p1">](xref:System.IFormatProvider.GetFormat(System.Type))</ept> 메서드는 <bpt id="p2">*</bpt>formatType<ept id="p2">*</ept> 매개 변수에 지정된 대로 필요한 형식 지정 정보를 제공하는 개체를 <ph id="ph1">`ToString`</ph> 메서드에 반환합니다.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>A number of formatting or string conversion methods include a parameter of type <bpt id="p1">[</bpt>IFormatProvider<ept id="p1">](xref:System.IFormatProvider)</ept>, but in many cases the value of the parameter is ignored when the method is called.</source>
          <target state="translated"><bpt id="p1">[</bpt>IFormatProvider<ept id="p1">](xref:System.IFormatProvider)</ept> 형식의 매개 변수를 포함하는 형식 지정 또는 문자열 변환 메서드가 많이 있기는 하지만 대부분의 경우 메서드를 호출할 때 매개 변수의 값이 무시됩니다.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>The following table lists some of the formatting methods that use the parameter and the type of the <bpt id="p1">[</bpt>Type<ept id="p1">](xref:System.Type)</ept> object that they pass to the <bpt id="p2">[</bpt>IFormatProvider.GetFormat<ept id="p2">](xref:System.IFormatProvider.GetFormat(System.Type))</ept> method.</source>
          <target state="translated">다음 표에서는 매개 변수를 사용하는 형식 지정 메서드와 이러한 메서드가 <bpt id="p2">[</bpt>IFormatProvider.GetFormat<ept id="p2">](xref:System.IFormatProvider.GetFormat(System.Type))</ept> 메서드로 전달하는 <bpt id="p1">[</bpt>Type<ept id="p1">](xref:System.Type)</ept> 개체의 형식을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Method</source>
          <target state="translated">메서드</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Type of <bpt id="p1">*</bpt>formatType<ept id="p1">*</ept> parameter</source>
          <target state="translated"><bpt id="p1">*</bpt>formatType<ept id="p1">*</ept> 매개 변수의 유형</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`ToString`</ph> method of numeric types</source>
          <target state="translated">숫자 형식의 <ph id="ph1">`ToString`</ph> 메서드</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.Globalization.NumberFormatInfo<ept id="p1">](xref:System.Globalization.NumberFormatInfo)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>System.Globalization.NumberFormatInfo<ept id="p1">](xref:System.Globalization.NumberFormatInfo)</ept></target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`ToString`</ph> method of date and time types</source>
          <target state="translated">날짜 및 시간 형식의 <ph id="ph1">`ToString`</ph> 메서드</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.Globalization.DateTimeFormatInfo<ept id="p1">](xref:System.Globalization.DateTimeFormatInfo)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>System.Globalization.DateTimeFormatInfo<ept id="p1">](xref:System.Globalization.DateTimeFormatInfo)</ept></target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>String.Format<ept id="p1">](xref:System.String.Format(System.IFormatProvider,System.String,System.Object))</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>String.Format<ept id="p1">](xref:System.String.Format(System.IFormatProvider,System.String,System.Object))</ept></target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.ICustomFormatter<ept id="p1">](xref:System.ICustomFormatter)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>System.ICustomFormatter<ept id="p1">](xref:System.ICustomFormatter)</ept></target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>StringBuilder.AppendFormat<ept id="p1">](xref:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object))</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>StringBuilder.AppendFormat<ept id="p1">](xref:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object))</ept></target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.ICustomFormatter<ept id="p1">](xref:System.ICustomFormatter)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>System.ICustomFormatter<ept id="p1">](xref:System.ICustomFormatter)</ept></target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>.NET provides three classes that implement <bpt id="p1">[</bpt>IFormatProvider<ept id="p1">](xref:System.IFormatProvider)</ept>:</source>
          <target state="translated">.NET에는 <bpt id="p1">[</bpt>IFormatProvider<ept id="p1">](xref:System.IFormatProvider)</ept>를 구현하는 세 가지 클래스가 있습니다.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>DateTimeFormatInfo<ept id="p1">](xref:System.Globalization.DateTimeFormatInfo)</ept>, a class that provides formatting information for date and time values for a specific culture.</source>
          <target state="translated">특정 문화권의 날짜 및 시간 값에 대한 형식 지정 정보를 제공하는 <bpt id="p1">[</bpt>DateTimeFormatInfo<ept id="p1">](xref:System.Globalization.DateTimeFormatInfo)</ept> 클래스.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Its <bpt id="p1">[</bpt>IFormatProvider.GetFormat<ept id="p1">](xref:System.IFormatProvider.GetFormat(System.Type))</ept> implementation returns an instance of itself.</source>
          <target state="translated">이 클래스에 대해 <bpt id="p1">[</bpt>IFormatProvider.GetFormat<ept id="p1">](xref:System.IFormatProvider.GetFormat(System.Type))</ept>을 구현하면 해당 클래스의 인스턴스가 반환됩니다.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>NumberFormatInfo<ept id="p1">](xref:System.Globalization.NumberFormatInfo)</ept>, a class that provides numeric formatting information for a specific culture.</source>
          <target state="translated">특정 문화권의 숫자 형식 지정 정보를 제공하는 <bpt id="p1">[</bpt>NumberFormatInfo<ept id="p1">](xref:System.Globalization.NumberFormatInfo)</ept> 클래스.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Its <bpt id="p1">[</bpt>IFormatProvider.GetFormat<ept id="p1">](xref:System.IFormatProvider.GetFormat(System.Type))</ept> implementation returns an instance of itself.</source>
          <target state="translated">이 클래스에 대해 <bpt id="p1">[</bpt>IFormatProvider.GetFormat<ept id="p1">](xref:System.IFormatProvider.GetFormat(System.Type))</ept>을 구현하면 해당 클래스의 인스턴스가 반환됩니다.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CultureInfo<ept id="p1">](xref:System.Globalization.CultureInfo)</ept>.</source>
          <target state="translated"><bpt id="p1">[</bpt>CultureInfo<ept id="p1">](xref:System.Globalization.CultureInfo)</ept>.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Its <bpt id="p1">[</bpt>IFormatProvider.GetFormat<ept id="p1">](xref:System.IFormatProvider.GetFormat(System.Type))</ept> implementation can return either a <bpt id="p2">[</bpt>NumberFormatInfo<ept id="p2">](xref:System.Globalization.NumberFormatInfo)</ept> object to provide numeric formatting information or a <bpt id="p3">[</bpt>DateTimeFormatInfo<ept id="p3">](xref:System.Globalization.DateTimeFormatInfo)</ept> object to provide formatting information for date and time values.</source>
          <target state="translated">이 클래스에 대해 <bpt id="p1">[</bpt>IFormatProvider.GetFormat<ept id="p1">](xref:System.IFormatProvider.GetFormat(System.Type))</ept>을 구현하면 숫자 형식 지정 정보를 제공하는 <bpt id="p2">[</bpt>NumberFormatInfo<ept id="p2">](xref:System.Globalization.NumberFormatInfo)</ept> 개체 또는 날짜 및 시간 값에 대한 형식 지정 정보를 제공하는 <bpt id="p3">[</bpt>DateTimeFormatInfo<ept id="p3">](xref:System.Globalization.DateTimeFormatInfo)</ept> 개체가 반환될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>You can also implement your own format provider to replace any one of these classes.</source>
          <target state="translated">사용자 고유의 형식 공급자를 구현하여 이러한 클래스 중 하나를 대체할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>However, your implementation’s <ph id="ph1">`GetFormat`</ph> method must return an object of the type listed in the previous table if it has to provide formatting information to the <ph id="ph2">`ToString`</ph> method.</source>
          <target state="translated">그러나 <ph id="ph1">`GetFormat`</ph> 메서드에 형식 지정 정보를 제공해야 하는 경우에는 구현된 형식 공급자의 <ph id="ph2">`ToString`</ph> 메서드에서 위의 표에 나와 있는 형식의 개체를 반환해야 합니다.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Culture-sensitive formatting of numeric values</source>
          <target state="translated">숫자 값의 문화권 구분 서식 지정</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>By default, the formatting of numeric values is culture-sensitive.</source>
          <target state="translated">기본적으로 숫자 값의 형식은 문화권을 구분합니다.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>If you do not specify a culture when you call a formatting method, the formatting conventions of the current thread culture are used.</source>
          <target state="translated">형식 지정 메서드를 호출할 때 문화권을 지정하지 않으면 현재 스레드 문화권의 형식 규칙이 사용됩니다.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>This is illustrated in the following example, which changes the current thread culture four times and then calls the <bpt id="p1">[</bpt>Decimal.ToString(String)<ept id="p1">](xref:System.Decimal.ToString(System.String))</ept> method.</source>
          <target state="translated">이는 현재 스레드 문화권을 4번 변경한 후 <bpt id="p1">[</bpt>Decimal.ToString(String)<ept id="p1">](xref:System.Decimal.ToString(System.String))</ept> 메서드를 호출하는 다음 예제에 나와 있습니다.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>In each case, the result string reflects the formatting conventions of the current culture.</source>
          <target state="translated">각각의 경우 결과 문자열은 현재 문화권의 형식 규칙을 반영합니다.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>This is because the <ph id="ph1">`ToString`</ph> and <ph id="ph2">`ToString(String)`</ph> methods wrap calls to each numeric type's <ph id="ph3">`ToString(String, IFormatProvider)`</ph> method.</source>
          <target state="translated">이는 <ph id="ph1">`ToString`</ph> 및 <ph id="ph2">`ToString(String)`</ph> 메서드가 각 숫자 형식의 <ph id="ph3">`ToString(String, IFormatProvider)`</ph> 메서드에 대한 호출을 래핑하기 때문입니다.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>You can also format a numeric value for a specific culture by calling a <ph id="ph1">`ToString`</ph> overload that has a <bpt id="p1">*</bpt>provider<ept id="p1">*</ept> parameter and passing it either of the following:</source>
          <target state="translated"><bpt id="p1">*</bpt>provider<ept id="p1">*</ept> 매개 변수를 포함하는 <ph id="ph1">`ToString`</ph> 오버로드를 호출하고 여기에 다음 중 하나를 전달하여 특정 문화권에 대한 숫자 값의 형식을 지정할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>CultureInfo<ept id="p1">](xref:System.Globalization.CultureInfo)</ept> object that represents the culture whose formatting conventions are to be used.</source>
          <target state="translated">사용할 형식 규칙이 포함된 문화권을 나타내는 <bpt id="p1">[</bpt>CultureInfo<ept id="p1">](xref:System.Globalization.CultureInfo)</ept> 개체.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Its <bpt id="p1">[</bpt>CultureInfo.GetFormat<ept id="p1">](xref:System.Globalization.CultureInfo.GetFormat(System.Type))</ept> method returns the value of the <bpt id="p2">[</bpt>CultureInfo.NumberFormat<ept id="p2">](xref:System.Globalization.CultureInfo.NumberFormat)</ept> property, which is the <bpt id="p3">[</bpt>NumberFormatInfo<ept id="p3">](xref:System.Globalization.NumberFormatInfo)</ept> object that provides culture-specific formatting information for numeric values.</source>
          <target state="translated">해당 <bpt id="p1">[</bpt>CultureInfo.GetFormat<ept id="p1">](xref:System.Globalization.CultureInfo.GetFormat(System.Type))</ept> 메서드는 숫자 값에 대한 문화권별 형식 정보를 제공하는 <bpt id="p3">[</bpt>NumberFormatInfo<ept id="p3">](xref:System.Globalization.NumberFormatInfo)</ept> 개체인 <bpt id="p2">[</bpt>CultureInfo.NumberFormat<ept id="p2">](xref:System.Globalization.CultureInfo.NumberFormat)</ept> 속성의 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>NumberFormatInfo<ept id="p1">](xref:System.Globalization.NumberFormatInfo)</ept> object that defines the culture-specific formatting conventions to be used.</source>
          <target state="translated">사용할 문화권별 형식 규칙을 정의하는 <bpt id="p1">[</bpt>NumberFormatInfo<ept id="p1">](xref:System.Globalization.NumberFormatInfo)</ept> 개체.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Its <bpt id="p1">[</bpt>GetFormat<ept id="p1">](xref:System.Globalization.NumberFormatInfo.GetFormat(System.Type))</ept> method returns an instance of itself.</source>
          <target state="translated">해당 <bpt id="p1">[</bpt>GetFormat<ept id="p1">](xref:System.Globalization.NumberFormatInfo.GetFormat(System.Type))</ept> 메서드는 자신의 인스턴스를 반환합니다.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>The following example uses <bpt id="p1">[</bpt>NumberFormatInfo<ept id="p1">](xref:System.Globalization.NumberFormatInfo)</ept> objects that represent the English (United States) and English (Great Britain) cultures and the French and Russian neutral cultures to format a floating-point number.</source>
          <target state="translated">다음 예제에서는 부동 소수점 숫자의 형식을 지정하기 위해 영어(미국) 및 영어(영국) 문화권과 프랑스어 및 러시아어 중립 문화권을 나타내는 <bpt id="p1">[</bpt>NumberFormatInfo<ept id="p1">](xref:System.Globalization.NumberFormatInfo)</ept> 개체를 사용합니다.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Culture-sensitive formatting of date and time values</source>
          <target state="translated">날짜 및 시간 값의 문화권 구분 서식 지정</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>By default, the formatting of date and time values is culture-sensitive.</source>
          <target state="translated">기본적으로 날짜 및 시간 값의 형식은 문화권을 구분합니다.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>If you do not specify a culture when you call a formatting method, the formatting conventions of the current thread culture are used.</source>
          <target state="translated">형식 지정 메서드를 호출할 때 문화권을 지정하지 않으면 현재 스레드 문화권의 형식 규칙이 사용됩니다.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>This is illustrated in the following example, which changes the current thread culture four times and then calls the <bpt id="p1">[</bpt>DateTime.ToString(String)<ept id="p1">](xref:System.DateTime.ToString(System.String))</ept> method.</source>
          <target state="translated">이는 현재 스레드 문화권을 4번 변경한 후 <bpt id="p1">[</bpt>DateTime.ToString(String)<ept id="p1">](xref:System.DateTime.ToString(System.String))</ept> 메서드를 호출하는 다음 예제에 나와 있습니다.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>In each case, the result string reflects the formatting conventions of the current culture.</source>
          <target state="translated">각각의 경우 결과 문자열은 현재 문화권의 형식 규칙을 반영합니다.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>This is because the <bpt id="p1">[</bpt>DateTime.ToString()<ept id="p1">](xref:System.DateTime.ToString)</ept>, <bpt id="p2">[</bpt>DateTime.ToString(String)<ept id="p2">](xref:System.DateTime.ToString(System.String))</ept>, <bpt id="p3">[</bpt>DateTimeOffset.ToString()<ept id="p3">](xref:System.DateTimeOffset.ToString(System.String))</ept>, and <bpt id="p4">[</bpt>DateTimeOffset.ToString(String)<ept id="p4">](xref:System.DateTimeOffset.ToString(System.String))</ept> methods wrap calls to the <bpt id="p5">[</bpt>DateTime.ToString(String, IFormatProvider)<ept id="p5">](xref:System.DateTime.ToString(System.String,System.IFormatProvider))</ept> and <bpt id="p6">[</bpt>DateTimeOffset.ToString(String, IFormatProvider)<ept id="p6">](xref:System.DateTimeOffset.ToString(System.String,System.IFormatProvider))</ept> methods.</source>
          <target state="translated">이는 <bpt id="p1">[</bpt>DateTime.ToString()<ept id="p1">](xref:System.DateTime.ToString)</ept>, <bpt id="p2">[</bpt>DateTime.ToString(String)<ept id="p2">](xref:System.DateTime.ToString(System.String))</ept>, <bpt id="p3">[</bpt>DateTimeOffset.ToString()<ept id="p3">](xref:System.DateTimeOffset.ToString(System.String))</ept> 및 <bpt id="p4">[</bpt>DateTimeOffset.ToString(String)<ept id="p4">](xref:System.DateTimeOffset.ToString(System.String))</ept> 메서드가 <bpt id="p5">[</bpt>DateTime.ToString(String, IFormatProvider)<ept id="p5">](xref:System.DateTime.ToString(System.String,System.IFormatProvider))</ept> 및 <bpt id="p6">[</bpt>DateTimeOffset.ToString(String, IFormatProvider)<ept id="p6">](xref:System.DateTimeOffset.ToString(System.String,System.IFormatProvider))</ept> 메서드 호출을 래핑하기 때문입니다.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>You can also format a date and time value for a specific culture by calling a <bpt id="p1">[</bpt>DateTime.ToString<ept id="p1">](xref:System.DateTime.ToString(System.String,System.IFormatProvider))</ept> or <bpt id="p2">[</bpt>DateTimeOffset.ToString<ept id="p2">](xref:System.DateTimeOffset.ToString(System.String,System.IFormatProvider))</ept> overload that has a provider parameter and passing it either of the following:</source>
          <target state="translated">provider 매개 변수를 포함하는 <bpt id="p1">[</bpt>DateTime.ToString<ept id="p1">](xref:System.DateTime.ToString(System.String,System.IFormatProvider))</ept> 또는 <bpt id="p2">[</bpt>DateTimeOffset.ToString<ept id="p2">](xref:System.DateTimeOffset.ToString(System.String,System.IFormatProvider))</ept> 오버로드를 호출하고 여기에 다음 중 하나를 전달하여 특정 문화권에 대한 날짜 및 시간 값의 형식을 지정할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>CultureInfo<ept id="p1">](xref:System.Globalization.CultureInfo)</ept> object that represents the culture whose formatting conventions are to be used.</source>
          <target state="translated">사용할 형식 규칙이 포함된 문화권을 나타내는 <bpt id="p1">[</bpt>CultureInfo<ept id="p1">](xref:System.Globalization.CultureInfo)</ept> 개체.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Its <bpt id="p1">[</bpt>CultureInfo.GetFormat<ept id="p1">](xref:System.Globalization.CultureInfo.GetFormat(System.Type))</ept> method returns the value of the <bpt id="p2">[</bpt>CultureInfo.NumberFormat<ept id="p2">](xref:System.Globalization.CultureInfo.NumberFormat)</ept> property, which is the <bpt id="p3">[</bpt>DateTimeFormatInfo<ept id="p3">](xref:System.Globalization.DateTimeFormatInfo)</ept> object that provides culture-specific formatting information for numeric values.</source>
          <target state="translated">해당 <bpt id="p1">[</bpt>CultureInfo.GetFormat<ept id="p1">](xref:System.Globalization.CultureInfo.GetFormat(System.Type))</ept> 메서드는 숫자 값에 대한 문화권별 형식 정보를 제공하는 <bpt id="p3">[</bpt>DateTimeFormatInfo<ept id="p3">](xref:System.Globalization.DateTimeFormatInfo)</ept> 개체인 <bpt id="p2">[</bpt>CultureInfo.NumberFormat<ept id="p2">](xref:System.Globalization.CultureInfo.NumberFormat)</ept> 속성의 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>DateTimeFormatInfo<ept id="p1">](xref:System.Globalization.DateTimeFormatInfo)</ept> object that defines the culture-specific formatting conventions to be used.</source>
          <target state="translated">사용할 문화권별 형식 규칙을 정의하는 <bpt id="p1">[</bpt>DateTimeFormatInfo<ept id="p1">](xref:System.Globalization.DateTimeFormatInfo)</ept> 개체.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Its <bpt id="p1">[</bpt>GetFormat<ept id="p1">](xref:System.Globalization.DateTimeFormatInfo.GetFormat(System.Type))</ept> method returns an instance of itself.</source>
          <target state="translated">해당 <bpt id="p1">[</bpt>GetFormat<ept id="p1">](xref:System.Globalization.DateTimeFormatInfo.GetFormat(System.Type))</ept> 메서드는 자신의 인스턴스를 반환합니다.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>The following example uses <bpt id="p1">[</bpt>DateTimeFormatInfo<ept id="p1">](xref:System.Globalization.DateTimeFormatInfo)</ept> objects that represent the English (United States) and English (Great Britain) cultures and the French and Russian neutral cultures to format a date.</source>
          <target state="translated">다음 예제에서는 날짜의 형식을 지정하기 위해 영어(미국) 및 영어(영국) 문화권과 프랑스어 및 러시아어 중립 문화권을 나타내는 <bpt id="p1">[</bpt>DateTimeFormatInfo<ept id="p1">](xref:System.Globalization.DateTimeFormatInfo)</ept> 개체를 사용합니다.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>The IFormattable interface</source>
          <target state="translated">IFormattable 인터페이스</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Typically, types that overload the <ph id="ph1">`ToString`</ph> method with a format string and an <bpt id="p1">[</bpt>IFormatProvider<ept id="p1">](xref:System.IFormatProvider)</ept> parameter also implement the <bpt id="p2">[</bpt>IFormattable<ept id="p2">](xref:System.IFormattable)</ept> interface.</source>
          <target state="translated">일반적으로 형식 문자열과 <bpt id="p1">[</bpt>IFormatProvider<ept id="p1">](xref:System.IFormatProvider)</ept> 매개 변수로 <ph id="ph1">`ToString`</ph> 메서드를 오버로드하는 형식은 <bpt id="p2">[</bpt>IFormattable<ept id="p2">](xref:System.IFormattable)</ept> 인터페이스도 구현합니다.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>This interface has a single member, <bpt id="p1">[</bpt>IFormattable.ToString(String, IFormatProvider)<ept id="p1">](xref:System.IFormattable.ToString(System.String,System.IFormatProvider))</ept>, that includes both a format string and a format provider as parameters.</source>
          <target state="translated">이 인터페이스에는 형식 문자열과 형식 공급자가 매개 변수로 포함되어 있는 <bpt id="p1">[</bpt>IFormattable.ToString(String, IFormatProvider)<ept id="p1">](xref:System.IFormattable.ToString(System.String,System.IFormatProvider))</ept> 멤버가 하나 있습니다.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>Implementing the <bpt id="p1">[</bpt>IFormattable<ept id="p1">](xref:System.IFormattable)</ept> interface for your application-defined class offers two advantages:</source>
          <target state="translated">응용 프로그램 정의 클래스에 대해 <bpt id="p1">[</bpt>IFormattable<ept id="p1">](xref:System.IFormattable)</ept> 인터페이스를 구현하면 다음과 같은 두 가지 이점이 있습니다.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Support for string conversion by the <bpt id="p1">[</bpt>Convert<ept id="p1">](xref:System.Convert)</ept> class.</source>
          <target state="translated"><bpt id="p1">[</bpt>Convert<ept id="p1">](xref:System.Convert)</ept> 클래스를 사용한 문자열 변환을 지원합니다.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Calls to the <bpt id="p1">[</bpt>Convert.ToString(Object)<ept id="p1">](xref:System.Convert.ToString(System.Object))</ept> and <bpt id="p2">[</bpt>Convert.ToString(Object, IFormatProvider)<ept id="p2">](xref:System.Convert.ToString(System.Object,System.IFormatProvider))</ept> methods call your <bpt id="p3">[</bpt>IFormattable<ept id="p3">](xref:System.IFormattable)</ept> implementation automatically.</source>
          <target state="translated"><bpt id="p1">[</bpt>Convert.ToString(Object)<ept id="p1">](xref:System.Convert.ToString(System.Object))</ept> 및 <bpt id="p2">[</bpt>Convert.ToString(Object, IFormatProvider)<ept id="p2">](xref:System.Convert.ToString(System.Object,System.IFormatProvider))</ept> 메서드를 호출하면 사용자 <bpt id="p3">[</bpt>IFormattable<ept id="p3">](xref:System.IFormattable)</ept> 구현이 자동으로 호출됩니다.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Support for composite formatting.</source>
          <target state="translated">복합 형식 지정을 지원합니다.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>If a format item that includes a format string is used to format your custom type, the Common Language Runtime automatically calls your <bpt id="p1">[</bpt>IFormattable<ept id="p1">](xref:System.IFormattable)</ept> implementation and passes it the format string.</source>
          <target state="translated">형식 문자열을 포함한 형식 항목을 사용하여 사용자 지정 형식의 서식을 지정하는 경우 공용 언어 런타임에서 자동으로 사용자 <bpt id="p1">[</bpt>IFormattable<ept id="p1">](xref:System.IFormattable)</ept> 구현을 호출하고 형식 문자열을 전달합니다.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>For more information about composite formatting with methods such as <ph id="ph1">`String.Format`</ph> or <ph id="ph2">`Console.WriteLine`</ph>, see the <bpt id="p1">[</bpt>Composite formatting<ept id="p1">](#composite-formatting)</ept> section.</source>
          <target state="translated"><ph id="ph1">`String.Format`</ph> 또는 <ph id="ph2">`Console.WriteLine`</ph> 같은 메서드를 사용하는 복합 서식 지정에 대한 자세한 내용은 <bpt id="p1">[</bpt>복합 서식 지정<ept id="p1">](#composite-formatting)</ept> 섹션을 참조하세요.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>The following example defines a <ph id="ph1">`Temperature`</ph> class that implements the <bpt id="p1">[</bpt>IFormattable<ept id="p1">](xref:System.IFormattable)</ept> interface.</source>
          <target state="translated">다음 예제에서는 <bpt id="p1">[</bpt>IFormattable<ept id="p1">](xref:System.IFormattable)</ept> 인터페이스를 구현하는 <ph id="ph1">`Temperature`</ph> 클래스를 정의합니다.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>It supports the "C" or "G" format specifiers to display the temperature in Celsius, the "F" format specifier to display the temperature in Fahrenheit, and the "K" format specifier to display the temperature in Kelvin.</source>
          <target state="translated">이 클래스는 온도를 섭씨로 표시하는 "C" 또는 "G" 형식 지정자, 온도를 화씨로 표시하는 "F" 형식 지정자 또는 온도를 켈빈으로 표시하는 "K" 형식 지정자를 지원합니다.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>The following example instantiates a <ph id="ph1">`Temperature`</ph> object.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">`Temperature`</ph> 개체를 인스턴스화합니다.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>It then calls the <bpt id="p1">[</bpt>ToString<ept id="p1">](xref:System.Convert.ToString(System.Object,System.IFormatProvider))</ept> method and uses several composite format strings to obtain different string representations of a <ph id="ph1">`Temperature`</ph> object.</source>
          <target state="translated">그런 다음 <bpt id="p1">[</bpt>ToString<ept id="p1">](xref:System.Convert.ToString(System.Object,System.IFormatProvider))</ept> 메서드를 호출하고 여러 복합 형식 문자열을 사용하여 <ph id="ph1">`Temperature`</ph> 개체의 다양한 문자열 표현을 얻습니다.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>Each of these method calls, in turn, calls the <bpt id="p1">[</bpt>IFormattable<ept id="p1">](xref:System.IFormattable)</ept> implementation of the <ph id="ph1">`Temperature`</ph> class.</source>
          <target state="translated">이 메서드를 호출할 때마다 자동으로 <ph id="ph1">`Temperature`</ph> 클래스의 <bpt id="p1">[</bpt>IFormattable<ept id="p1">](xref:System.IFormattable)</ept> 구현도 호출됩니다.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Composite formatting</source>
          <target state="translated">복합 형식 지정</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Some methods, such as <ph id="ph1">`String.Format`</ph> and <ph id="ph2">`StringBuilder.AppendFormat`</ph>, support composite formatting.</source>
          <target state="translated"><ph id="ph1">`String.Format`</ph> 및 <ph id="ph2">`StringBuilder.AppendFormat`</ph> 같은 일부 메서드는 복합 형식 지정을 지원합니다.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>A composite format string is a kind of template that returns a single string that incorporates the string representation of zero, one, or more objects.</source>
          <target state="translated">복합 형식 문자열은 0개 이상의 개체에 대한 문자열 표현이 통합된 단일 문자열을 반환하는 일종의 템플릿입니다.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Each object is represented in the composite format string by an indexed format item.</source>
          <target state="translated">복합 형식 문자열에서는 각 개체가 인덱싱된 형식 항목으로 표현됩니다.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>The index of the format item corresponds to the position of the object that it represents in the method's parameter list.</source>
          <target state="translated">형식 항목의 인덱스는 메서드의 매개 변수 목록에 표시되는 개체의 위치에 해당합니다.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>Indexes are zero-based.</source>
          <target state="translated">인덱스는 0에서 시작합니다.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>For example, in the following call to the <ph id="ph1">`String.Format`</ph> method, the first format item, <ph id="ph2">`{0:D}`</ph>, is replaced by the string representation of <ph id="ph3">`thatDate`</ph>; the second format item, <ph id="ph4">`{1}`</ph>, is replaced by the string representation of <ph id="ph5">`item1`</ph>; and the third format item, <ph id="ph6">`{2:C2}`</ph>, is replaced by the string representation of <ph id="ph7">`item1.Value`</ph>.</source>
          <target state="translated">예를 들어 다음과 같은 <ph id="ph1">`String.Format`</ph> 메서드 호출에서 첫 번째 형식 항목인 <ph id="ph2">`{0:D}`</ph>는 <ph id="ph3">`thatDate`</ph>의 문자열 표현으로 바뀌고, 두 번째 형식 항목인 <ph id="ph4">`{1}`</ph>은 <ph id="ph5">`item1`</ph>의 문자열 표현으로 바뀌고, 세 번째 형식 항목인 <ph id="ph6">`{2:C2}`</ph>는 <ph id="ph7">`item1.Value`</ph>의 문자열 표현으로 바뀝니다.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>In addition to replacing a format item with the string representation of its corresponding object, format items also let you control the following:</source>
          <target state="translated">형식 항목을 해당 개체의 문자열 표현으로 바꾸는 것 외에도 형식 항목을 통해 다음을 제어할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>The specific way in which an object is represented as a string, if the object implements the <bpt id="p1">[</bpt>IFormattable<ept id="p1">](xref:System.IFormattable)</ept> interface and supports format strings.</source>
          <target state="translated">개체가 <bpt id="p1">[</bpt>IFormattable<ept id="p1">](xref:System.IFormattable)</ept> 인터페이스를 구현하고 형식 문자열을 지원하는 경우 개체가 문자열로 표현되는 특정 방식.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>You do this by following the format item's index with a : (colon) followed by a valid format string.</source>
          <target state="translated">이렇게 하려면 형식 항목의 인덱스 뒤에 :(콜론) 및 유효한 형식 문자열을 추가합니다.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>The previous example did this by formatting a date value with the "d" (short date pattern) format string (e.g., <ph id="ph1">`{0:d}`</ph>) and by formatting a numeric value with the "C2" format string (e.g., <ph id="ph2">`{2:C2}`</ph> to represent the number as a currency value with two fractional decimal digits.</source>
          <target state="translated">이전 예제에서는 날짜 값의 형식을 "d"(짧은 날짜 패턴) 형식 문자열(예: <ph id="ph1">`{0:d}`</ph>)로 지정하고 숫자 값의 형식을 "C2" 형식 문자열(예: <ph id="ph2">`{2:C2}`</ph>)로 지정하여 소수 두 자리의 통화 값으로 숫자를 나타냈습니다.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>The width of the field that contains the object's string representation, and the alignment of the string representation in that field.</source>
          <target state="translated">개체의 문자열 표현을 포함하는 필드의 너비 및 해당 필드의 문자열 표현 맞춤.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>You do this by following the format item's index with a , (comma) followed the field width.</source>
          <target state="translated">이렇게 하려면 형식 항목의 인덱스 뒤에 ,(쉼표) 및 필드 너비를 추가합니다.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>The string is right-aligned in the field if the field width is a positive value, and it is left-aligned if the field width is a negative value.</source>
          <target state="translated">필드 너비가 양수 값이면 문자열이 필드에 오른쪽 맞춤되고, 필드 너비가 음수 값이면 왼쪽 맞춤됩니다.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>The following example left-aligns date values in a 20-character field, and it right-aligns decimal values with one fractional digit in an 11-character field.</source>
          <target state="translated">다음 예제에서는 날짜 값을 20자 필드에 왼쪽 맞춤하고, 소수 1자리의 10진수 값을 11자 필드에 오른쪽 맞춤합니다.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>Note that, if both the alignment string component and the format string component are present, the former precedes the latter (for example, <ph id="ph1">`{0,-20:g}`</ph>.</source>
          <target state="translated">맞춤 문자열 구성 요소와 형식 문자열 구성 요소가 둘 다 있는 경우 맞춤 문자열 구성 요소가 우선합니다(예: <ph id="ph1">`{0,-20:g}`</ph>).</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>For more information about composite formatting, see <bpt id="p1">[</bpt>Composite formatting<ept id="p1">](composite-format.md)</ept>.</source>
          <target state="translated">복합 서식 지정에 대한 자세한 내용은 <bpt id="p1">[</bpt>복합 서식 지정<ept id="p1">](composite-format.md)</ept>을 참조하세요.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>Custom formatting with ICustomFormatter</source>
          <target state="translated">ICustomFormatter를 사용한 사용자 지정 서식 지정</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Two composite formatting methods, <bpt id="p1">[</bpt>String.Format(IFormatProvider, String, Object[])<ept id="p1">](xref:System.String.Format(System.IFormatProvider,System.String,System.Object[]))</ept> and <bpt id="p2">[</bpt>StringBuilder.AppendFormat(IFormatProvider, String, Object[])<ept id="p2">](xref:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object))</ept>, include a format provider parameter that supports custom formatting.</source>
          <target state="translated">두 복합 형식 지정 메서드 <bpt id="p1">[</bpt>String.Format(IFormatProvider, String, Object[])<ept id="p1">](xref:System.String.Format(System.IFormatProvider,System.String,System.Object[]))</ept> 및 <bpt id="p2">[</bpt>StringBuilder.AppendFormat(IFormatProvider, String, Object[])<ept id="p2">](xref:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object))</ept>에는 사용자 지정 형식 지정을 지원하는 형식 공급자 매개 변수가 포함되어 있습니다.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>When either of these formatting methods is called, it passes a <bpt id="p1">[</bpt>Type<ept id="p1">](xref:System.Type)</ept> object that represents an <bpt id="p2">[</bpt>ICustomFormatter<ept id="p2">](xref:System.ICustomFormatter)</ept> interface to the format provider’s <ph id="ph1">`GetFormat`</ph> method.</source>
          <target state="translated">이러한 형식 지정 메서드 중 하나를 호출하면 <bpt id="p2">[</bpt>ICustomFormatter<ept id="p2">](xref:System.ICustomFormatter)</ept> 인터페이스를 나타내는 <bpt id="p1">[</bpt>Type<ept id="p1">](xref:System.Type)</ept> 개체가 형식 공급자의 <ph id="ph1">`GetFormat`</ph> 메서드에 전달됩니다.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`GetFormat`</ph> method is then responsible for returning the <bpt id="p1">[</bpt>ICustomFormatter<ept id="p1">](xref:System.ICustomFormatter)</ept> implementation that provides custom formatting.</source>
          <target state="translated">그러면 <ph id="ph1">`GetFormat`</ph> 메서드가 사용자 지정 형식 지정을 제공하는 <bpt id="p1">[</bpt>ICustomFormatter<ept id="p1">](xref:System.ICustomFormatter)</ept> 구현을 반환합니다.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>ICustomFormatter<ept id="p1">](xref:System.ICustomFormatter)</ept> interface has a single method, <bpt id="p2">[</bpt>Format(String, Object, IFormatProvider)<ept id="p2">](xref:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider))</ept>, that is called automatically by a composite formatting method, once for each format item in a composite format string.</source>
          <target state="translated"><bpt id="p1">[</bpt>ICustomFormatter<ept id="p1">](xref:System.ICustomFormatter)</ept> 인터페이스에는 복합 형식 지정 메서드에 의해 자동으로 복합 형식 문자열의 각 형식 항목마다 한 번씩 호출되는 <bpt id="p2">[</bpt>Format(String, Object, IFormatProvider)<ept id="p2">](xref:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider))</ept> 메서드가 하나 있습니다.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Format(String, Object, IFormatProvider)<ept id="p1">](xref:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider))</ept> method has three parameters: a format string, which represents the <bpt id="p2">*</bpt>formatString<ept id="p2">*</ept> argument in a format item, an object to format, and an <bpt id="p3">[</bpt>IFormatProvider<ept id="p3">](xref:System.IFormatProvider)</ept> object that provides formatting services.</source>
          <target state="translated"><bpt id="p1">[</bpt>Format(String, Object, IFormatProvider)<ept id="p1">](xref:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider))</ept> 메서드에는 세 개의 매개 변수, 즉 형식 항목의 <bpt id="p2">*</bpt>formatString<ept id="p2">*</ept> 인수를 나타내는 형식 문자열, 형식을 지정할 개체 및 형식 지정 서비스를 제공하는 <bpt id="p3">[</bpt>IFormatProvider<ept id="p3">](xref:System.IFormatProvider)</ept> 개체가 포함되어 있습니다.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>Typically, the class that implements <bpt id="p1">[</bpt>ICustomFormatter<ept id="p1">](xref:System.ICustomFormatter)</ept> also implements <bpt id="p2">[</bpt>IFormatProvider<ept id="p2">](xref:System.IFormatProvider)</ept>, so this last parameter is a reference to the custom formatting class itself.</source>
          <target state="translated">일반적으로 <bpt id="p1">[</bpt>ICustomFormatter<ept id="p1">](xref:System.ICustomFormatter)</ept>를 구현하는 클래스는 <bpt id="p2">[</bpt>IFormatProvider<ept id="p2">](xref:System.IFormatProvider)</ept>도 구현하여 이 마지막 매개 변수가 사용자 지정 형식 지정 클래스를 참조하도록 합니다.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>The method returns a custom formatted string representation of the object to be formatted.</source>
          <target state="translated">이 메서드는 형식을 지정할 개체의 사용자 지정 형식 문자열 표현을 반환합니다.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>If the method cannot format the object, it should return a null reference.</source>
          <target state="translated">이 메서드가 개체의 형식을 지정할 수 없는 경우에는 null 참조가 반환되어야 합니다.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>The following example provides an <bpt id="p1">[</bpt>ICustomFormatter<ept id="p1">](xref:System.ICustomFormatter)</ept> implementation named <ph id="ph1">`ByteByByteFormatter`</ph> that displays integer values as a sequence of two-digit hexadecimal values followed by a space.</source>
          <target state="translated">다음 예제에서는 정수 값을 뒤에 공백이 오는 두 자리 16진수 값 시퀀스로 표시하는 <ph id="ph1">`ByteByByteFormatter`</ph>라는 <bpt id="p1">[</bpt>ICustomFormatter<ept id="p1">](xref:System.ICustomFormatter)</ept> 구현을 제공합니다.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>The following example uses the <ph id="ph1">`ByteByByteFormatter`</ph> class to format integer values.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">`ByteByByteFormatter`</ph> 클래스를 사용하여 정수 값의 형식을 지정합니다.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>Note that the <bpt id="p1">[</bpt>ICustomFormatter.Format<ept id="p1">](xref:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider))</ept> method is called more than once in the second <bpt id="p2">[</bpt>String.Format(IFormatProvider, String, Object[])<ept id="p2">](xref:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider))</ept> method call, and that the default <bpt id="p3">[</bpt>NumberFormatInfo<ept id="p3">](xref:System.Globalization.NumberFormatInfo)</ept> provider is used in the third method call because the <ph id="ph1">`.ByteByByteFormatter.Format`</ph> method does not recognize the "N0" format string and returns a null reference.</source>
          <target state="translated"><bpt id="p1">[</bpt>ICustomFormatter.Format<ept id="p1">](xref:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider))</ept> 메서드는 두 번째 <bpt id="p2">[</bpt>String.Format(IFormatProvider, String, Object[])<ept id="p2">](xref:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider))</ept> 메서드 호출에서 두 번 이상 호출되고 <ph id="ph1">`.ByteByByteFormatter.Format`</ph> 메서드가 "N0" 형식 문자열을 인식하지 못하고 null 참조를 반환하기 때문에 세 번째 메서드 호출에서는 기본 <bpt id="p3">[</bpt>NumberFormatInfo<ept id="p3">](xref:System.Globalization.NumberFormatInfo)</ept> 공급자가 사용됩니다.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>Related topics</source>
          <target state="translated">관련 항목</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>Title</source>
          <target state="translated">제목</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>Definition</source>
          <target state="translated">정의</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Standard numeric format strings<ept id="p1">](standard-numeric.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>표준 숫자 서식 문자열<ept id="p1">](standard-numeric.md)</ept></target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>Describes standard format strings that create commonly used string representations of numeric values.</source>
          <target state="translated">숫자 값의 일반적으로 사용되는 문자열 표현을 만드는 표준 형식 문자열에 대해 설명합니다.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Custom numeric format strings<ept id="p1">](custom-numeric.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>사용자 지정 숫자 서식 문자열<ept id="p1">](custom-numeric.md)</ept></target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>Describes custom format strings that create application-specific formats for numeric values.</source>
          <target state="translated">숫자 값의 응용 프로그램별 형식을 만드는 사용자 지정 형식 문자열에 대해 설명합니다.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Standard date and time format strings<ept id="p1">](standard-datetime.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>표준 날짜 및 시간 서식 문자열<ept id="p1">](standard-datetime.md)</ept></target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>Describes standard format strings that create commonly used string representations of <bpt id="p1">[</bpt>DateTime<ept id="p1">](xref:System.DateTime)</ept> values.</source>
          <target state="translated"><bpt id="p1">[</bpt>DateTime<ept id="p1">](xref:System.DateTime)</ept> 값의 일반적으로 사용되는 문자열 표현을 만드는 표준 형식 문자열에 대해 설명합니다.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Custom date and time format strings<ept id="p1">](custom-datetime.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>사용자 지정 날짜 및 시간 서식 문자열<ept id="p1">](custom-datetime.md)</ept></target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>Describes custom format strings that create application-specific formats for <bpt id="p1">[</bpt>DateTime<ept id="p1">](xref:System.DateTime)</ept> values.</source>
          <target state="translated"><bpt id="p1">[</bpt>DateTime<ept id="p1">](xref:System.DateTime)</ept> 값의 응용 프로그램별 형식을 만드는 사용자 지정 형식 문자열에 대해 설명합니다.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Standard TimeSpan format strings<ept id="p1">](standard-timespan.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>표준 TimeSpan 서식 문자열<ept id="p1">](standard-timespan.md)</ept></target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>Describes standard format strings that create commonly used string representations of time intervals.</source>
          <target state="translated">시간 간격의 일반적으로 사용되는 문자열 표현을 만드는 표준 형식 문자열에 대해 설명합니다.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Custom TimeSpan format strings<ept id="p1">](custom-timespan.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>사용자 지정 TimeSpan 서식 문자열<ept id="p1">](custom-timespan.md)</ept></target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>Describes custom format strings that create application-specific formats for time intervals.</source>
          <target state="translated">시간 간격의 응용 프로그램별 형식을 만드는 사용자 지정 형식 문자열에 대해 설명합니다.</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Enumeration format strings<ept id="p1">](enumeration-format.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>열거형 서식 문자열<ept id="p1">](enumeration-format.md)</ept></target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>Describes standard format strings that are used to create string representations of enumeration values.</source>
          <target state="translated">열거형 값의 문자열 표현을 만드는 데 사용되는 표준 형식 문자열에 대해 설명합니다.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Composite formatting<ept id="p1">](composite-format.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>복합 서식 지정<ept id="p1">](composite-format.md)</ept></target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>Describes how to embed one or more formatted values in a string.</source>
          <target state="translated">문자열에 형식이 지정된 하나 이상의 값을 포함시키는 방법에 대해 설명합니다.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>The string can subsequently be displayed on the console or written to a stream.</source>
          <target state="translated">그런 후 해당 문자열을 콘솔에 표시하거나 스트림에 쓸 수 있습니다.</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Performing formatting operations<ept id="p1">](performing-formatting-operations.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>서식 지정 작업 수행<ept id="p1">](performing-formatting-operations.md)</ept></target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>Lists topics that provide step-by-step instructions for performing specific formatting operations.</source>
          <target state="translated">특정 형식 지정 작업을 수행하기 위한 단계별 지침을 제공하는 항목을 나열합니다.</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Parsing strings<ept id="p1">](parsing-strings.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>문자열 구문 분석<ept id="p1">](parsing-strings.md)</ept></target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>Describes how to initialize objects to the values described by string representations of those objects.</source>
          <target state="translated">개체를 해당 개체의 문자열 표현으로 표시되는 값으로 초기화하는 방법에 대해 설명합니다.</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>Parsing is the inverse operation of formatting.</source>
          <target state="translated">구문 분석은 형식 지정의 역순으로 진행됩니다.</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>Reference</source>
          <target state="translated">참조</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.IFormattable<ept id="p1">](xref:System.IFormattable)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>System.IFormattable<ept id="p1">](xref:System.IFormattable)</ept></target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.IFormatProvider<ept id="p1">](xref:System.IFormatProvider)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>System.IFormatProvider<ept id="p1">](xref:System.IFormatProvider)</ept></target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.ICustomFormatter<ept id="p1">](xref:System.ICustomFormatter)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>System.ICustomFormatter<ept id="p1">](xref:System.ICustomFormatter)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>