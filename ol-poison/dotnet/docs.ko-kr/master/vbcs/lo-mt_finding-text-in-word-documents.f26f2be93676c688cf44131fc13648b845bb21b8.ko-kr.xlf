<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b4a71f961d39d0cf34922ee3bf498e89a1288995</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\linq\finding-text-in-word-documents.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1debcfde1047de92d27eac4c58b048d94b8c7e41</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4ac9fcd30b9faf8ddc5c2caec7c149179ca96320</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Handback file name: lo-mt_finding-text-in-word-documents.f26f2be93676c688cf44131fc13648b845bb21b8.ko-kr is different with handoff file name: finding-text-in-word-documents.f26f2be93676c688cf44131fc13648b845bb21b8.ko-kr.</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Finding Text in Word Documents (Visual Basic) | Microsoft Docs</source>
          <target state="translated">(Visual Basic) Word 문서에서 텍스트 찾기 | Microsoft 문서</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Finding Text in Word Documents (Visual Basic)</source>
          <target state="translated">(Visual Basic) Word 문서에서 텍스트 찾기</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic extends the previous queries to do something useful: find all occurrences of a string in the document.</source>
          <target state="translated">이 항목에서는 이전 쿼리를 확장하여 문서에 있는 문자열을 모두 찾습니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">예제</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This example processes a WordprocessingML document, to find all the occurences of a specific piece of text in the document.</source>
          <target state="translated">이 예제에서는 WordprocessingML 문서를 처리하여 문서에 있는 특정 텍스트 부분을 모두 찾습니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>To do this, we use a query that finds the string "Hello".</source>
          <target state="translated">이렇게 하려면 "Hello" 문자열을 찾는 쿼리를 사용합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This example builds on the previous examples in this tutorial.</source>
          <target state="translated">이 예제는 이 자습서의 이전 예제를 기반으로 합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The new query is called out in comments in the code below.</source>
          <target state="translated">새 쿼리는 아래에 있는 코드의 주석에서 호출됩니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For instructions for creating the source document for this example, see <bpt id="p1">[</bpt>Creating the Source Office Open XML Document (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/creating-the-source-office-open-xml-document.md)</ept>.</source>
          <target state="translated">이 예제에 대 한 소스 문서를 만들기 위한 지침을 참조 하십시오. <bpt id="p1">[</bpt>원본 Office Open XML 문서 (Visual Basic)를 만드는<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/creating-the-source-office-open-xml-document.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This example uses classes found in the WindowsBase assembly.</source>
          <target state="translated">이 예제에서는 WindowsBase 어셈블리의 클래스를 사용하고</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>It uses types in the &lt;xref:System.IO.Packaging?displayProperty=fullName&gt; namespace.</source>
          <target state="translated">형식을 사용는 &lt;xref:System.IO.Packaging?displayProperty=fullName&gt;네임 스페이스.&lt;/xref:System.IO.Packaging?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This example produces the following output:</source>
          <target state="translated">이 예제는 다음과 같은 출력을 생성합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You can, of course, modify the search so that it searches for lines with a specific style.</source>
          <target state="translated">물론 특정 스타일이 포함된 줄을 검색하도록 검색을 수정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The following query finds all blank lines that have the Code style:</source>
          <target state="translated">다음 쿼리에서는 Code 스타일이 있는 빈 줄을 모두 찾습니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This example produces the following output:</source>
          <target state="translated">이 예제는 다음과 같은 출력을 생성합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Of course, this example could be enhanced in a number of ways.</source>
          <target state="translated">물론 여러 가지 방법으로 이 예제를 개선할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For example, we could use regular expressions to search for text, we could iterate through all the Word files in a particular directory, and so on.</source>
          <target state="translated">예를 들어, 정규식을 사용하여 텍스트를 검색할 수 있으며 특정 디렉터리의 모든 Word 파일을 반복할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Note that this example performs approximately as well as if it were written as a single query.</source>
          <target state="translated">이 예제의 성능은 단일 쿼리로 작성된 경우의 성능과 비슷합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Because each query is implemented in a lazy, deferred fashion, each query does not yield its results until the query is iterated.</source>
          <target state="translated">각 쿼리가 지연된 방식으로 구현되기 때문에 각 쿼리는 쿼리가 반복될 때까지 결과를 생성하지 않습니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For more information about execution and lazy evaluation, see <bpt id="p1">[</bpt>Deferred Execution and Lazy Evaluation in LINQ to XML (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/deferred-execution-and-lazy-evaluation-in-linq-to-xml.md)</ept>.</source>
          <target state="translated">실행 및 지연 계산 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>지연 된 실행과 지연 계산은 LINQ to XML (Visual Basic)에서<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/deferred-execution-and-lazy-evaluation-in-linq-to-xml.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Next Steps</source>
          <target state="translated">다음 단계</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The next section provides more information about WordprocessingML documents:</source>
          <target state="translated">다음 단원에서는 WordprocessingML 문서에 대해 자세히 설명합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Details of Office Open XML WordprocessingML Documents (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/details-of-office-open-xml-wordprocessingml-documents.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>세부 정보는 Office Open XML WordprocessingML 문서 (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/details-of-office-open-xml-wordprocessingml-documents.md)</ept></target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">참고 항목</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Tutorial: Manipulating Content in a WordprocessingML Document (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/tutorial-manipulating-content-in-a-wordprocessingml-document.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>자습서: WordprocessingML 문서 (Visual Basic)에서 내용 조작<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/tutorial-manipulating-content-in-a-wordprocessingml-document.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Refactoring Using a Pure Function (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/refactoring-using-a-pure-function.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>순수 함수 (Visual Basic)를 사용 하 여 리팩터링<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/refactoring-using-a-pure-function.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Deferred Execution and Lazy Evaluation in LINQ to XML (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/deferred-execution-and-lazy-evaluation-in-linq-to-xml.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>지연 된 실행과 지연 계산은 linq to XML (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/deferred-execution-and-lazy-evaluation-in-linq-to-xml.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>