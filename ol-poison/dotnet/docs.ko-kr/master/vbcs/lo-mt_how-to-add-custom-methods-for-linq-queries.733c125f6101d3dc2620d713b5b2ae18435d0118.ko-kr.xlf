<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">166eb731d41e009c374ba55f929eed302793ecd0</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\linq\how-to-add-custom-methods-for-linq-queries.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1c2cbf6a624a9d2a49c5809ca6c2ec5b88dc5754</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bab00aae8047bb822ef597b4b3557b0809db7cad</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Handback file name: lo-mt_how-to-add-custom-methods-for-linq-queries.733c125f6101d3dc2620d713b5b2ae18435d0118.ko-kr is different with handoff file name: how-to-add-custom-methods-for-linq-queries.733c125f6101d3dc2620d713b5b2ae18435d0118.ko-kr.</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Add Custom Methods for LINQ Queries (Visual Basic) | Microsoft Docs</source>
          <target state="translated">방법: LINQ 쿼리 (Visual Basic)에 대 한 사용자 지정 메서드 추가 | Microsoft 문서</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Add Custom Methods for LINQ Queries (Visual Basic)</source>
          <target state="translated">방법: LINQ 쿼리 (Visual Basic)에 대 한 사용자 지정 메서드 추가</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You can extend the set of methods that you can use for LINQ queries by adding extension methods to the &lt;xref:System.Collections.Generic.IEnumerable%601&gt; interface.</source>
          <target state="translated">확장 메서드를 추가 하 여 LINQ 쿼리에 사용할 수 있는 메서드 집합을 확장할 수는 &lt;xref:System.Collections.Generic.IEnumerable%601&gt;인터페이스.&lt;/xref:System.Collections.Generic.IEnumerable%601&gt;</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For example, in addition to the standard average or maximum operations, you can create a custom aggregate method to compute a single value from a sequence of values.</source>
          <target state="translated">예를 들어 표준 평균 또는 최대 작업 외에 값의 시퀀스에서 단일 값을 계산 하는 사용자 지정 집계 메서드를 만들 수 있습니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You can also create a method that works as a custom filter or a specific data transform for a sequence of values and returns a new sequence.</source>
          <target state="translated">사용자 지정 필터 또는 값의 시퀀스에 대 한 특정 데이터 변환을로 작동 하 고 새 시퀀스를 반환 하는 메서드를 만들 수 있습니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Examples of such methods are &lt;xref:System.Linq.Enumerable.Distinct%2A&gt;, &lt;xref:System.Linq.Enumerable.Skip%2A&gt;, and &lt;xref:System.Linq.Enumerable.Reverse%2A&gt;.</source>
          <target state="translated">이러한 메서드의 예로 &lt;xref:System.Linq.Enumerable.Distinct%2A&gt;, &lt;xref:System.Linq.Enumerable.Skip%2A&gt;, 및 &lt;xref:System.Linq.Enumerable.Reverse%2A&gt;.&lt;/xref:System.Linq.Enumerable.Reverse%2A&gt; &lt;/xref:System.Linq.Enumerable.Skip%2A&gt; &lt;/xref:System.Linq.Enumerable.Distinct%2A&gt;</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>When you extend the &lt;xref:System.Collections.Generic.IEnumerable%601&gt; interface, you can apply your custom methods to any enumerable collection.</source>
          <target state="translated">확장 하는 경우는 &lt;xref:System.Collections.Generic.IEnumerable%601&gt;인터페이스, 열거형 컬렉션에 사용자 지정 메서드를 적용할 수 있습니다.&lt;/xref:System.Collections.Generic.IEnumerable%601&gt;</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Extension Methods<ept id="p1">](../../../../visual-basic/programming-guide/language-features/procedures/extension-methods.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>확장 메서드<ept id="p1">](../../../../visual-basic/programming-guide/language-features/procedures/extension-methods.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Adding an Aggregate Method</source>
          <target state="translated">집계 메서드를 추가합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>An aggregate method computes a single value from a set of values.</source>
          <target state="translated">집계 메서드는 값 집합에서 단일 값을 계산합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>LINQ provides several aggregate methods, including &lt;xref:System.Linq.Enumerable.Average%2A&gt;, &lt;xref:System.Linq.Enumerable.Min%2A&gt;, and &lt;xref:System.Linq.Enumerable.Max%2A&gt;.</source>
          <target state="translated">포함 하는 여러 집계 메서드를 제공 하는 LINQ &lt;xref:System.Linq.Enumerable.Average%2A&gt;, &lt;xref:System.Linq.Enumerable.Min%2A&gt;, 및 &lt;xref:System.Linq.Enumerable.Max%2A&gt;.&lt;/xref:System.Linq.Enumerable.Max%2A&gt; &lt;/xref:System.Linq.Enumerable.Min%2A&gt; &lt;/xref:System.Linq.Enumerable.Average%2A&gt;</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You can create your own aggregate method by adding an extension method to the &lt;xref:System.Collections.Generic.IEnumerable%601&gt; interface.</source>
          <target state="translated">확장 메서드를 추가 하 여 사용자 고유의 집계 메서드를 만들 수는 &lt;xref:System.Collections.Generic.IEnumerable%601&gt;인터페이스.&lt;/xref:System.Collections.Generic.IEnumerable%601&gt;</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The following code example shows how to create an extension method called <ph id="ph1">`Median`</ph> to compute a median for a sequence of numbers of type <ph id="ph2">`double`</ph>.</source>
          <target state="translated">다음 코드 예제에는 확장 메서드를 만드는 방법을 보여 줍니다 <ph id="ph1">`Median`</ph> 일련의 숫자 형식에 대 한 중앙값을 계산 하 <ph id="ph2">`double`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You call this extension method for any enumerable collection in the same way you call other aggregate methods from the &lt;xref:System.Collections.Generic.IEnumerable%601&gt; interface.</source>
          <target state="translated">다른 집계 메서드를 호출 하면 동일한 방식으로 열거 가능한 컬렉션에 대 한이 확장 메서드를 호출는 &lt;xref:System.Collections.Generic.IEnumerable%601&gt;인터페이스.&lt;/xref:System.Collections.Generic.IEnumerable%601&gt;</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In Visual Basic, you can either use a method call or standard query syntax for the <ph id="ph1">`Aggregate`</ph> or <ph id="ph2">`Group By`</ph> clause.</source>
          <target state="translated">Visual Basic에서 사용 하거나 메서드 호출 또는 표준 쿼리 구문에는 <ph id="ph1">`Aggregate`</ph> 또는 <ph id="ph2">`Group By`</ph> 절.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Aggregate Clause<ept id="p1">](../../../../visual-basic/language-reference/queries/aggregate-clause.md)</ept> and <bpt id="p2">[</bpt>Group By Clause<ept id="p2">](../../../../visual-basic/language-reference/queries/group-by-clause.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>Aggregate 절<ept id="p1">](../../../../visual-basic/language-reference/queries/aggregate-clause.md)</ept> 및 <bpt id="p2">[</bpt>그룹 By 절<ept id="p2">](../../../../visual-basic/language-reference/queries/group-by-clause.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The following code example shows how to use the <ph id="ph1">`Median`</ph> method for an array of type <ph id="ph2">`double`</ph>.</source>
          <target state="translated">다음 코드 예제를 사용 하는 방법을 보여 줍니다는 <ph id="ph1">`Median`</ph> 형식의 배열에 대 한 메서드 <ph id="ph2">`double`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>1<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>1<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>2<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>2<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Overloading an Aggregate Method to Accept Various Types</source>
          <target state="translated">다양 한 형식에 적용할 집계 메서드를 오버 로드</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You can overload your aggregate method so that it accepts sequences of various types.</source>
          <target state="translated">다양 한 형식의 시퀀스를 수락 하 여 집계 메서드를 오버 로드할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The standard approach is to create an overload for each type.</source>
          <target state="translated">각 형식에 대 한 오버 로드를 만들 하는 표준 방법이입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Another approach is to create an overload that will take a generic type and convert it to a specific type by using a delegate.</source>
          <target state="translated">또 다른 방법은 제네릭 형식을 하는 대리자를 사용 하 여 특정 형식으로 변환 하는 오버 로드를 만드는 것입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>You can also combine both approaches.</source>
          <target state="translated">두 방법 모두를 결합할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>To create an overload for each type</source>
          <target state="translated">각 형식에 대 한 오버 로드를 만들려면</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You can create a specific overload for each type that you want to support.</source>
          <target state="translated">지원 하려는 각 형식에 대 한 특정 오버 로드를 만들 수 있습니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The following code example shows an overload of the <ph id="ph1">`Median`</ph> method for the <ph id="ph2">`integer`</ph> type.</source>
          <target state="translated">다음 코드 예제에서는 오버 로드는 <ph id="ph1">`Median`</ph> 에 대 한 메서드는 <ph id="ph2">`integer`</ph> 유형입니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>3<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>3<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You can now call the <ph id="ph1">`Median`</ph> overloads for both <ph id="ph2">`integer`</ph> and <ph id="ph3">`double`</ph> types, as shown in the following code:</source>
          <target state="translated">이제 호출할 수는 <ph id="ph1">`Median`</ph> 둘 다에 대해 오버 로드 <ph id="ph2">`integer`</ph> 및 <ph id="ph3">`double`</ph> 형식, 다음 코드에 나와 있는 것 처럼:</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>4<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>4<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>5<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>5<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>6<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>6<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>To create a generic overload</source>
          <target state="translated">제네릭 오버 로드를 만들려면</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>You can also create an overload that accepts a sequence of generic objects.</source>
          <target state="translated">일반 개체의 시퀀스를 받아들이는 오버 로드를 만들 수 있습니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This overload takes a delegate as a parameter and uses it to convert a sequence of objects of a generic type to a specific type.</source>
          <target state="translated">이 오버 로드는 대리자를 매개 변수로 제네릭 형식의 개체 시퀀스의 특정 형식으로 변환 하려면 사용 합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The following code shows an overload of the <ph id="ph1">`Median`</ph> method that takes the &lt;xref:System.Func%602&gt; delegate as a parameter.</source>
          <target state="translated">다음 코드에서는 오버 로드는 <ph id="ph1">`Median`</ph> 를 받는 메서드에 &lt;xref:System.Func%602&gt;대리자를 매개 변수로.&lt;/xref:System.Func%602&gt;</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This delegate takes an object of generic type T and returns an object of type <ph id="ph1">`double`</ph>.</source>
          <target state="translated">이 대리자는 제네릭 형식 T의 개체는 개체를 반환 형식의 <ph id="ph1">`double`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>You can now call the <ph id="ph1">`Median`</ph> method for a sequence of objects of any type.</source>
          <target state="translated">이제 호출할 수는 <ph id="ph1">`Median`</ph> 모든 형식의 개체의 시퀀스에 대 한 메서드.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If the type does not have its own method overload, you have to pass a delegate parameter.</source>
          <target state="translated">형식에 고유한 메서드 오버 로드가 없는 경우는 대리자 매개 변수를 전달 해야 합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>In Visual Basic, you can use a lambda expression for this purpose.</source>
          <target state="translated">Visual Basic의 람다 식을이 용도로 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Also, if you use the <ph id="ph1">`Aggregate`</ph> or <ph id="ph2">`Group By`</ph> clause instead of the method call, you can pass any value or expression that is in the scope this clause.</source>
          <target state="translated">또한 사용 하는 경우는 <ph id="ph1">`Aggregate`</ph> 또는 <ph id="ph2">`Group By`</ph> 메서드를 호출 하는 대신 절 임의의 값 또는이 절은 범위 내에 있는 식을 전달할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The following example code shows how to call the <ph id="ph1">`Median`</ph> method for an array of integers and an array of strings.</source>
          <target state="translated">다음 예제 코드를 호출 하는 방법을 보여 줍니다는 <ph id="ph1">`Median`</ph> 정수의 배열 및 문자열의 배열에 대 한 메서드.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For strings, the median for the lengths of strings in the array is calculated.</source>
          <target state="translated">문자열, 배열에 문자열의 길이 대 한 중앙값을 계산 됩니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The example shows how to pass the &lt;xref:System.Func%602&gt; delegate parameter to the <ph id="ph1">`Median`</ph> method for each case.</source>
          <target state="translated">전달 하는 방법을 보여 주는 예제는는 &lt;xref:System.Func%602&gt;대리자를 매개 변수는 <ph id="ph1">`Median`</ph> 각 사례에 대 한 메서드.&lt;/xref:System.Func%602&gt;</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>8<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>8<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Adding a Method That Returns a Collection</source>
          <target state="translated">컬렉션을 반환 하는 메서드 추가</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>You can extend the &lt;xref:System.Collections.Generic.IEnumerable%601&gt; interface with a custom query method that returns a sequence of values.</source>
          <target state="translated">확장할 수는 &lt;xref:System.Collections.Generic.IEnumerable%601&gt;값의 시퀀스를 반환 하는 사용자 지정 쿼리 메서드로 인터페이스.&lt;/xref:System.Collections.Generic.IEnumerable%601&gt;</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>In this case, the method must return a collection of type &lt;xref:System.Collections.Generic.IEnumerable%601&gt;.</source>
          <target state="translated">메서드 이름 필드에 &lt;xref:System.Collections.Generic.IEnumerable%601&gt;.&lt;/xref:System.Collections.Generic.IEnumerable%601&gt; 의 컬렉션을 반환 해야이 경우</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Such methods can be used to apply filters or data transforms to a sequence of values.</source>
          <target state="translated">값의 시퀀스에 필터 또는 데이터 변환을 적용 하려면 이러한 메서드를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The following example shows how to create an extension method named <ph id="ph1">`AlternateElements`</ph> that returns every other element in a collection, starting from the first element.</source>
          <target state="translated">다음 예제에 라는 확장 메서드를 만드는 방법을 보여 줍니다 <ph id="ph1">`AlternateElements`</ph> 첫 번째 요소에서 시작 하 여 컬렉션의 다른 모든 요소를 반환 하는 합니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>9<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></source>
          <target state="translated"><bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>9<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept></target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>You can call this extension method for any enumerable collection just as you would call other methods from the &lt;xref:System.Collections.Generic.IEnumerable%601&gt; interface, as shown in the following code:</source>
          <target state="translated">다른 메서드를 호출 하는 것 처럼 모든 열거 가능한 컬렉션에 대 한이 확장 메서드를 호출할 수는 &lt;xref:System.Collections.Generic.IEnumerable%601&gt;인터페이스에 다음 코드에 나와 있는 것 처럼:&lt;/xref:System.Collections.Generic.IEnumerable%601&gt;</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">참고 항목</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</source>
          <target state="translated">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;&lt;/xref:System.Collections.Generic.IEnumerable%601&gt;</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Extension Methods<ept id="p1">](../../../../visual-basic/programming-guide/language-features/procedures/extension-methods.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>확장명 메서드<ept id="p1">](../../../../visual-basic/programming-guide/language-features/procedures/extension-methods.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>