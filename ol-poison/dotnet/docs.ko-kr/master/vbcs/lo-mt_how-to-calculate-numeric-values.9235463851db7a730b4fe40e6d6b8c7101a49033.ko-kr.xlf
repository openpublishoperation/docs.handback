<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d844e2af3892d897125e21d3fd7047a8b295d10a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\operators-and-expressions\how-to-calculate-numeric-values.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">40298962a50b6b9bdb18227ee7d292dca1758efb</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1beebfc5594b7df7b52668022e630b92206fef16</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Handback file name: lo-mt_how-to-calculate-numeric-values.9235463851db7a730b4fe40e6d6b8c7101a49033.ko-kr is different with handoff file name: how-to-calculate-numeric-values.9235463851db7a730b4fe40e6d6b8c7101a49033.ko-kr.</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Calculate Numeric Values (Visual Basic) | Microsoft Docs</source>
          <target state="translated">방법: 숫자 값 계산 (Visual Basic) | Microsoft 문서</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Calculate Numeric Values (Visual Basic)</source>
          <target state="translated">방법: 숫자 값 계산(Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You can calculate numeric values through the use of numeric expressions.</source>
          <target state="translated">숫자 식 사용 하 여 숫자 값을 계산할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>numeric expression<ept id="p1">*</ept> is an expression that contains literals, constants, and variables representing numeric values, and operators that act on those values.</source>
          <target state="translated">A <bpt id="p1">*</bpt>숫자 식<ept id="p1">*</ept> 리터럴, 상수 및 숫자 값을 나타내는 변수를 포함 하는 식을 이며 해당 값에 대해 작동 하는 연산자입니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Calculating Numeric Values</source>
          <target state="translated">숫자 값 계산</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>To calculate a numeric value</source>
          <target state="translated">숫자 값을 계산 하려면</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Combine one or more numeric literals, constants, and variables into a numeric expression.</source>
          <target state="translated">숫자 식으로 하나 이상의 숫자 리터럴, 상수 및 변수를 결합 합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The following example shows some valid numeric expressions.</source>
          <target state="translated">다음 예제에는 유효한 숫자 식을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The first three lines show a literal, a constant, and a variable.</source>
          <target state="translated">처음 세 줄은 리터럴, 상수 및 변수를 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Each one forms a valid numeric expression by itself.</source>
          <target state="translated">각 자체적으로 유효한 숫자 식을 형성합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The final line shows a combination of a variable with two literals.</source>
          <target state="translated">마지막 줄의 두 가지 리터럴 사용 하 여 변수 조합을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Note that a numeric expression does not form a complete <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> statement by itself.</source>
          <target state="translated">참고 숫자 식 전체 형성 하지 않습니다 <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> 자체적으로 문의 합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You must use the expression as part of a complete statement.</source>
          <target state="translated">전체 문의 일부로 식을 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>To store a numeric value</source>
          <target state="translated">숫자 값을 저장 하려면</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You can use an assignment statement to assign the value represented by a numeric expression to a variable, as the following example demonstrates.</source>
          <target state="translated">다음 예제 에서처럼 변수에 숫자 식을 사용 하 여 표시 되는 값을 할당 하는 대입문을 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrOperators#82<ept id="p2">](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/how-to-calculate-numeric-values_1.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrOperators #&amp;82;<ept id="p2">](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/how-to-calculate-numeric-values_1.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In the preceding example, the value of the expression on the right side of the equal operator (<ph id="ph1">`=`</ph>) is assigned to the variable <ph id="ph2">`j`</ph> on the left side of the operator, so <ph id="ph3">`j`</ph> evaluates to 276.</source>
          <target state="translated">위의 예제에서는 같음 연산자의 오른쪽에 있는 식의 값 (<ph id="ph1">`=`</ph>) 변수에 할당 <ph id="ph2">`j`</ph> 연산자의 왼쪽에 있으므로 <ph id="ph3">`j`</ph> 276으로 계산 합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Statements<ept id="p1">](../../../../visual-basic/language-reference/statements/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>문을<ept id="p1">](../../../../visual-basic/language-reference/statements/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Multiple Operators</source>
          <target state="translated">여러 명의 연산자</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If the numeric expression contains more than one operator, the order in which they are evaluated is determined by the rules of operator precedence.</source>
          <target state="translated">숫자 식에 하나 이상의 연산자, 평가 되는 순서는 연산자 우선 순위 규칙에 의해 결정 됩니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>To override the rules of operator precedence, you enclose expressions in parentheses, as in the above example; the enclosed expressions are evaluated first.</source>
          <target state="translated">식 위의 예와 괄호로 묶어 있습니다의 연산자 우선 순위 규칙을 재정의 하려면 괄호 안의 식이 먼저 계산 됩니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>To override normal operator precedence</source>
          <target state="translated">일반 연산자 우선 순위를 재정의 하려면</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Use parentheses to enclose the operations you want to be performed first.</source>
          <target state="translated">괄호를 사용 하 여 먼저 수행 하려는 작업을 묶습니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The following example shows two different results with the same operands and operators.</source>
          <target state="translated">다음 예제에서는 동일한 연산자와 피연산자와 두 개의 서로 다른 결과 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrOperators#83<ept id="p2">](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/how-to-calculate-numeric-values_2.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrOperators #&amp;83;<ept id="p2">](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/how-to-calculate-numeric-values_2.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In the preceding example, the calculation for <ph id="ph1">`j`</ph> performs the addition operator (<ph id="ph2">`+`</ph>) first because the parentheses around <ph id="ph3">`(67 + i)`</ph> override normal precedence, and the value assigned to <ph id="ph4">`j`</ph> is 276 (4 times 69).</source>
          <target state="translated">앞의 예제에 대 한 계산에서 <ph id="ph1">`j`</ph> 더하기 연산자를 수행 (<ph id="ph2">`+`</ph>) 첫 번째 때문에 괄호로 <ph id="ph3">`(67 + i)`</ph> 일반 우선 순위에 할당 된 값을 재정의 <ph id="ph4">`j`</ph> 은 276 (4 회 69).</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The calculation for <ph id="ph1">`k`</ph> performs the operators in their normal precedence (<ph id="ph2">`*`</ph> before <ph id="ph3">`+`</ph>), and the value assigned to <ph id="ph4">`k`</ph> is 270 (268 plus 2).</source>
          <target state="translated">에 대 한 계산 <ph id="ph1">`k`</ph> 일반 우선 순위에 연산자를 수행 하므로 (<ph id="ph2">`*`</ph> 하기 전에 <ph id="ph3">`+`</ph>), 및에 할당 된 값 <ph id="ph4">`k`</ph> 은 270 (268 + 2).</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Operator Precedence in Visual Basic<ept id="p1">](../../../../visual-basic/language-reference/operators/operator-precedence.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>Visual Basic의 연산자 우선 순위<ept id="p1">](../../../../visual-basic/language-reference/operators/operator-precedence.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">참고 항목</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Operators and Expressions<ept id="p1">](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/index.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>연산자 및 식<ept id="p1">](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/index.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Value Comparisons<ept id="p1">](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/value-comparisons.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>값 비교<ept id="p1">](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/value-comparisons.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Statements<ept id="p1">](../../../../visual-basic/language-reference/statements/index.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>문<ept id="p1">](../../../../visual-basic/language-reference/statements/index.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Operator Precedence in Visual Basic<ept id="p1">](../../../../visual-basic/language-reference/operators/operator-precedence.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Visual Basic의 연산자 우선 순위<ept id="p1">](../../../../visual-basic/language-reference/operators/operator-precedence.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Arithmetic Operators<ept id="p1">](../../../../visual-basic/language-reference/operators/arithmetic-operators.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>산술 연산자<ept id="p1">](../../../../visual-basic/language-reference/operators/arithmetic-operators.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Efficient Combination of Operators<ept id="p1">](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/efficient-combination-of-operators.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>연산자의 효율적 결합<ept id="p1">](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/efficient-combination-of-operators.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>