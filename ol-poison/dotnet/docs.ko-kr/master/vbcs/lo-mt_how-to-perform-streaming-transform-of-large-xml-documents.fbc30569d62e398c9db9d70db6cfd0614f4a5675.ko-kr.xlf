<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f35e42e29e316fe1610a011263aa68e622fb95a5</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\linq\how-to-perform-streaming-transform-of-large-xml-documents.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0dc209548ef6d8c29adcf46180a36b3e8f97345c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">22a49863a154c40bad5694e6fc122c96d793b37c</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Handback file name: lo-mt_how-to-perform-streaming-transform-of-large-xml-documents.fbc30569d62e398c9db9d70db6cfd0614f4a5675.ko-kr is different with handoff file name: how-to-perform-streaming-transform-of-large-xml-documents.fbc30569d62e398c9db9d70db6cfd0614f4a5675.ko-kr.</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Perform Streaming Transform of Large XML Documents (Visual Basic) | Microsoft Docs</source>
          <target state="translated">방법: (Visual Basic) 큰 XML 문서의 스트리밍 변환 수행 | Microsoft 문서</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Perform Streaming Transform of Large XML Documents (Visual Basic)</source>
          <target state="translated">방법: (Visual Basic) 큰 XML 문서의 스트리밍 변환 수행</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Sometimes you have to transform large XML files, and write your application so that the memory footprint of the application is predictable.</source>
          <target state="translated">큰 XML 파일을 변형하고 응용 프로그램의 메모리 사용 공간이 예상 가능하도록 응용 프로그램을 작성해야 하는 경우가 있습니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>If you try to populate an XML tree with a very large XML file, your memory usage will be proportional to the size of the file (that is, excessive).</source>
          <target state="translated">XML 트리를 매우 큰 XML 파일로 채우려는 경우 메모리 사용은 파일 크기에 비례하므로 지나치게 증가하게 됩니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Therefore, you should use a streaming technique instead.</source>
          <target state="translated">따라서 스트리밍 기법을 대신 사용해야 합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Streaming techniques are best applied in situations where you need to process the source document only once, and you can process the elements in document order.</source>
          <target state="translated">스트리밍 기법은 소스 문서를 한 번만 처리해야 하고 문서 순서의 요소를 처리할 수 있는 경우에 가장 효과적으로 적용됩니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Certain standard query operators, such as &lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;, iterate their source, collect all of the data, sort it, and then finally yield the first item in the sequence.</source>
          <target state="translated">특정 표준 쿼리 연산자와 같은 &lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;, 자신의 소스를 반복, 모든 데이터를 수집, 정렬 및 다음 시퀀스의 첫 번째 항목을 최종적으로 생성 합니다.&lt;/xref:System.Linq.Enumerable.OrderBy%2A&gt;</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Note that if you use a query operator that materializes its source before yielding the first item, you will not retain a small memory footprint for your application.</source>
          <target state="translated">첫 번째 항목을 반환하기 전에 소스를 유형화하는 쿼리 연산자를 사용하는 경우 응용 프로그램에 대한 작은 메모리 사용 공간이 유지되지 않습니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Even if you use the technique described in <bpt id="p1">[</bpt>How to: Stream XML Fragments with Access to Header Information (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/how-to-stream-xml-fragments-with-access-to-header-information.md)</ept>, if you try to assemble an XML tree that contains the transformed document, memory usage will be too great.</source>
          <target state="translated">에 설명 된 기법을 사용 하는 경우에 <bpt id="p1">[</bpt>하는 방법: 헤더 정보 (Visual Basic)에 액세스할 수 있는 XML 조각 스트림<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/how-to-stream-xml-fragments-with-access-to-header-information.md)</ept>, 메모리 사용 공간이 너무 높으면 변환된 된 문서를 포함 하는 XML 트리를 어셈블하려고 하면 됩니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>There are two main approaches.</source>
          <target state="translated">두 가지 주요 방법이 있습니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>One approach is to use the deferred processing characteristics of &lt;xref:System.Xml.Linq.XStreamingElement&gt;.</source>
          <target state="translated">&lt;xref:System.Xml.Linq.XStreamingElement&gt;.&lt;/xref:System.Xml.Linq.XStreamingElement&gt; 의 지연 된 처리 특성을 사용 하는 한 가지 방법은</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Another approach is to create an &lt;xref:System.Xml.XmlWriter&gt;, and use the capabilities of <ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> to write elements to an &lt;xref:System.Xml.XmlWriter&gt;.</source>
          <target state="translated">만드는 또 다른 방법은 &lt;xref:System.Xml.XmlWriter&gt;의 기능을 사용 하 고 <ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> 요소를 쓰는 &lt;xref:System.Xml.XmlWriter&gt;.&lt;/xref:System.Xml.XmlWriter&gt; &lt;/xref:System.Xml.XmlWriter&gt;</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This topic demonstrates both approaches.</source>
          <target state="translated">이 항목에서는 두 방법을 모두 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">예제</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The following example builds on the example in <bpt id="p1">[</bpt>How to: Stream XML Fragments with Access to Header Information (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/how-to-stream-xml-fragments-with-access-to-header-information.md)</ept>.</source>
          <target state="translated">예제를 기반으로 다음 예제에서는 <bpt id="p1">[</bpt>하는 방법: 헤더 정보 (Visual Basic)에 액세스할 수 있는 XML 조각 스트림<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/how-to-stream-xml-fragments-with-access-to-header-information.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This example uses the deferred execution capabilities of &lt;xref:System.Xml.Linq.XStreamingElement&gt; to stream the output.</source>
          <target state="translated">이 예제에서는 지연 된 실행 기능을 사용 하 여 &lt;xref:System.Xml.Linq.XStreamingElement&gt;출력을 스트림 합니다.&lt;/xref:System.Xml.Linq.XStreamingElement&gt;</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This example can transform a very large document while maintaining a small memory footprint.</source>
          <target state="translated">이 예제에서는 작은 메모리 사용 공간을 유지하면서도 매우 큰 문서를 변형할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Note that the custom axis (<ph id="ph1">`StreamCustomerItem`</ph>) is specifically written so that it expects a document that has <ph id="ph2">`Customer`</ph>, <ph id="ph3">`Name`</ph>, and <ph id="ph4">`Item`</ph> elements, and that those elements will be arranged as in the following Source.xml document.</source>
          <target state="translated">사용자 지정 축(<ph id="ph1">`StreamCustomerItem`</ph>)은 문서에 <ph id="ph2">`Customer`</ph>, <ph id="ph3">`Name`</ph> 및 <ph id="ph4">`Item`</ph> 요소가 있고 이러한 요소가 다음 Source.xml 문서의 경우와 마찬가지로 정렬되어 있다고 가정하고 작성된 것입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>A more robust implementation, however, would be prepared to parse an invalid document.</source>
          <target state="translated">그러나 더욱 강력한 구현은 잘못된 문서의 구문을 분석할 준비가 되어 있습니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The following is the source document, Source.xml:</source>
          <target state="translated">다음은 소스 문서인 Source.xml입니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This code produces the following output:</source>
          <target state="translated">이 코드의 결과는 다음과 같습니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">예제</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The following example also builds on the example in <bpt id="p1">[</bpt>How to: Stream XML Fragments with Access to Header Information (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/how-to-stream-xml-fragments-with-access-to-header-information.md)</ept>.</source>
          <target state="translated">다음 예제에 예제도 기반 <bpt id="p1">[</bpt>하는 방법: 헤더 정보 (Visual Basic)에 액세스할 수 있는 XML 조각 스트림<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/how-to-stream-xml-fragments-with-access-to-header-information.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This example uses the capability of <ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> to write elements to an &lt;xref:System.Xml.XmlWriter&gt;.</source>
          <target state="translated">이 예제에서는 사용 하는 기능이 <ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> &lt;xref:System.Xml.XmlWriter&gt;.&lt;/xref:System.Xml.XmlWriter&gt; 요소를 작성 하려면</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This example can transform a very large document while maintaining a small memory footprint.</source>
          <target state="translated">이 예제에서는 작은 메모리 사용 공간을 유지하면서도 매우 큰 문서를 변형할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Note that the custom axis (<ph id="ph1">`StreamCustomerItem`</ph>) is specifically written so that it expects a document that has <ph id="ph2">`Customer`</ph>, <ph id="ph3">`Name`</ph>, and <ph id="ph4">`Item`</ph> elements, and that those elements will be arranged as in the following Source.xml document.</source>
          <target state="translated">사용자 지정 축(<ph id="ph1">`StreamCustomerItem`</ph>)은 문서에 <ph id="ph2">`Customer`</ph>, <ph id="ph3">`Name`</ph> 및 <ph id="ph4">`Item`</ph> 요소가 있고 이러한 요소가 다음 Source.xml 문서의 경우와 마찬가지로 정렬되어 있다고 가정하고 작성된 것입니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A more robust implementation, however, would either validate the source document with an XSD, or would be prepared to parse an invalid document.</source>
          <target state="translated">그러나 더욱 강력한 구현은 XSD를 사용하여 소스 문서의 유효성을 검사하거나, 잘못된 문서의 구문을 분석할 준비가 되어 있습니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This example uses the same source document, Source.xml, as the previous example in this topic.</source>
          <target state="translated">이 예제에서는 이 항목의 이전 예제와 동일한 소스 문서인 Source.xml을 사용하고</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>It also produces exactly the same output.</source>
          <target state="translated">똑같은 출력을 생성합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Using &lt;xref:System.Xml.Linq.XStreamingElement&gt; for streaming the output XML is preferred over writing to an &lt;xref:System.Xml.XmlWriter&gt;.</source>
          <target state="translated">&lt;xref:System.Xml.Linq.XStreamingElement&gt;XML은 &lt;xref:System.Xml.XmlWriter&gt;.&lt;/xref:System.Xml.XmlWriter&gt; 에 쓰기 보다 선호 하는 출력 스트리밍에&lt;/xref:System.Xml.Linq.XStreamingElement&gt; 사용 하 여</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This code produces the following output:</source>
          <target state="translated">이 코드의 결과는 다음과 같습니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">참고 항목</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Advanced LINQ to XML Programming (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/advanced-linq-to-xml-programming.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>고급 LINQ to XML 프로그래밍 (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/advanced-linq-to-xml-programming.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>