<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8876e65e752e0b18404ec32aecdcad7805533840</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\linq\projection-operations.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">020b385ce54439cbac1c0c304d72caf21adfc988</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">585fdbf6a1d82d9f5c39897ae8ef2f7d5f0b54b2</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Handback file name: lo-mt_projection-operations.672cfe56dfa2ca98e9f03becd61f40226efbed35.ko-kr is different with handoff file name: projection-operations.672cfe56dfa2ca98e9f03becd61f40226efbed35.ko-kr.</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Projection Operations (Visual Basic) | Microsoft Docs</source>
          <target state="translated">프로젝션 작업 (Visual Basic) | Microsoft 문서</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Projection Operations (Visual Basic)</source>
          <target state="translated">프로젝션 작업 (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Projection refers to the operation of transforming an object into a new form that often consists only of those properties that will be subsequently used.</source>
          <target state="translated">프로젝션 종종 나중에 사용 될 속성만 구성 된 새 폼에 개체를 변환 하는 작업을 참조 합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>By using projection, you can construct a new type that is built from each object.</source>
          <target state="translated">프로젝션을 사용하면 각 개체를 기반으로 만들어지는 새 형식을 생성할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You can project a property and perform a mathematical function on it.</source>
          <target state="translated">프로젝트는 속성 수 있으며에 수학 함수를 수행할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You can also project the original object without changing it.</source>
          <target state="translated">또한 변경 하지 않고 원래 개체를 프로젝션 할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The standard query operator methods that perform projection are listed in the following section.</source>
          <target state="translated">프로젝션을 수행 하는 표준 쿼리 연산자 메서드는 다음 섹션에 나열 됩니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Methods</source>
          <target state="translated">메서드</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Method Name</source>
          <target state="translated">메서드 이름</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">설명</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Visual Basic Query Expression Syntax</source>
          <target state="translated">Visual Basic 쿼리 식 구문</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>More Information</source>
          <target state="translated">추가 정보</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Select</source>
          <target state="translated">선택</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Projects values that are based on a transform function.</source>
          <target state="translated">변환 함수를 기반으로 하는 프로젝트의 값입니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Linq.Enumerable.Select%2A?displayProperty=fullName&gt;</source>
          <target state="translated">&lt;xref:System.Linq.Enumerable.Select%2A?displayProperty=fullName&gt;&lt;/xref:System.Linq.Enumerable.Select%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Linq.Queryable.Select%2A?displayProperty=fullName&gt;</source>
          <target state="translated">&lt;xref:System.Linq.Queryable.Select%2A?displayProperty=fullName&gt;&lt;/xref:System.Linq.Queryable.Select%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>SelectMany</source>
          <target state="translated">SelectMany</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Projects sequences of values that are based on a transform function and then flattens them into one sequence.</source>
          <target state="translated">변환 함수에 기반 하 고 단일 시퀀스로 평면화 하는 값의 시퀀스를 프로젝션 합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Use multiple <ph id="ph1">`From`</ph> clauses</source>
          <target state="translated">사용 하 여 <ph id="ph1">`From`</ph> 절</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Linq.Enumerable.SelectMany%2A?displayProperty=fullName&gt;</source>
          <target state="translated">&lt;xref:System.Linq.Enumerable.SelectMany%2A?displayProperty=fullName&gt;&lt;/xref:System.Linq.Enumerable.SelectMany%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Linq.Queryable.SelectMany%2A?displayProperty=fullName&gt;</source>
          <target state="translated">&lt;xref:System.Linq.Queryable.SelectMany%2A?displayProperty=fullName&gt;&lt;/xref:System.Linq.Queryable.SelectMany%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Query Expression Syntax Examples</source>
          <target state="translated">쿼리 식 구문 예제</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Select</source>
          <target state="translated">선택</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The following example uses the <ph id="ph1">`Select`</ph> clause to project the first letter from each string in a list of strings.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">`Select`</ph> 문자열의 목록에서 각 문자열에서 첫 글자를 프로젝션 하는 절.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>SelectMany</source>
          <target state="translated">SelectMany</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The following example uses multiple <ph id="ph1">`From`</ph> clauses to project each word from each string in a list of strings.</source>
          <target state="translated">다음 예제에서는 여러 <ph id="ph1">`From`</ph> 절 문자열의 목록에서 각 문자열에서 각 단어를 프로젝션 합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Select versus SelectMany</source>
          <target state="translated">SelectMany와 선택</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The work of both <ph id="ph1">`Select()`</ph> and <ph id="ph2">`SelectMany()`</ph> is to produce a result value (or values) from source values.</source>
          <target state="translated">역할은 모두 <ph id="ph1">`Select()`</ph> 및 <ph id="ph2">`SelectMany()`</ph> 결과 값 또는 값을 생성 하는 정책 원본 값에서입니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Select()`</ph> produces one result value for every source value.</source>
          <target state="translated"><ph id="ph1">`Select()`</ph>모든 원본 값에 대해 하나의 결과 값을 생성합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The overall result is therefore a collection that has the same number of elements as the source collection.</source>
          <target state="translated">전체 결과 따라서 소스 컬렉션에 동일한 수의 요소가 들어 있는 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In contrast, <ph id="ph1">`SelectMany()`</ph> produces a single overall result that contains concatenated sub-collections from each source value.</source>
          <target state="translated">반면, <ph id="ph1">`SelectMany()`</ph> 각 소스 값에서 연결 된 하위 컬렉션을 포함 하는 하나의 전체 결과 생성 합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The transform function that is passed as an argument to <ph id="ph1">`SelectMany()`</ph> must return an enumerable sequence of values for each source value.</source>
          <target state="translated">변환 함수에 인수로 전달 되는 <ph id="ph1">`SelectMany()`</ph> 각 소스 값에 대 한 값의 열거 가능한 시퀀스를 반환 해야 합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>These enumerable sequences are then concatenated by <ph id="ph1">`SelectMany()`</ph> to create one large sequence.</source>
          <target state="translated">이러한 열거 가능한 시퀀스를 연결 하 여 <ph id="ph1">`SelectMany()`</ph> 하나의 큰 시퀀스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The following two illustrations show the conceptual difference between the actions of these two methods.</source>
          <target state="translated">다음 두 그림은 이러한 두 가지 방법의 작업 간의 개념적 차이 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In each case, assume that the selector (transform) function selects the array of flowers from each source value.</source>
          <target state="translated">각각의 경우에서 선택기 (변환) 함수 꽃의 배열을 각 소스 값에서 선택 한다고 가정 합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This illustration depicts how <ph id="ph1">`Select()`</ph> returns a collection that has the same number of elements as the source collection.</source>
          <target state="translated">이 그림에서는 설명 어떻게 <ph id="ph1">`Select()`</ph> 소스 컬렉션에 동일한 수의 요소가 들어 있는 컬렉션을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Conceptual illustration of the action of Select&amp;#40;&amp;#41;<ept id="p1">]</ept><bpt id="p2">(../../../../csharp/programming-guide/concepts/linq/media/selectaction.png "</bpt>SelectAction<ept id="p2">")</ept></source>
          <target state="translated"><bpt id="p1">![</bpt>Select ()의 동작에 대 한 개념적 설명<ept id="p1">]</ept><bpt id="p2">(../../../../csharp/programming-guide/concepts/linq/media/selectaction.png "</bpt>SelectAction<ept id="p2">")</ept></target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>This illustration depicts how <ph id="ph1">`SelectMany()`</ph> concatenates the intermediate sequence of arrays into one final result value that contains each value from each intermediate array.</source>
          <target state="translated">이 그림에서는 설명 어떻게 <ph id="ph1">`SelectMany()`</ph> 중간 배열 시퀀스에 있는 각 중간 배열에서 각 값이 포함 된 하나의 최종 결과 값으로 연결 합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Graphic showing the action of SelectMany&amp;#40;&amp;#41;.<ept id="p1">]</ept><bpt id="p2">(../../../../csharp/programming-guide/concepts/linq/media/selectmany.png "</bpt>SelectMany<ept id="p2">")</ept></source>
          <target state="translated"><bpt id="p1">![</bpt>Selectmany ()의 동작을 보여주는 그래픽입니다. <ept id="p1">]</ept> <bpt id="p2">(../../../../csharp/programming-guide/concepts/linq/media/selectmany.png "</bpt>SelectMany<ept id="p2">")</ept></target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Code Example</source>
          <target state="translated">코드 예제</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The following example compares the behavior of <ph id="ph1">`Select()`</ph> and <ph id="ph2">`SelectMany()`</ph>.</source>
          <target state="translated">동작을 비교 하는 다음 예제에서는 <ph id="ph1">`Select()`</ph> 및 <ph id="ph2">`SelectMany()`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The code creates a "bouquet" of flowers by taking the first two items from each list of flower names in the source collection.</source>
          <target state="translated">코드는 소스 컬렉션의 각 꽃 이름 목록에서 처음 두 항목을 수행 하 여 "축 하" 꽃을 만듭니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>In this example, the "single value" that the transform function &lt;xref:System.Linq.Enumerable.Select%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29&gt; uses is itself a collection of values.</source>
          <target state="translated">이 예제에서는 "단일 값" 하는 변환 함수 &lt;xref:System.Linq.Enumerable.Select%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29&gt;사용 하 여 값의 컬렉션 자체는.&lt;/xref:System.Linq.Enumerable.Select%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29&gt;</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>This requires the extra <ph id="ph1">`For Each`</ph> loop in order to enumerate each string in each sub-sequence.</source>
          <target state="translated">이 위해서는 추가 <ph id="ph1">`For Each`</ph> 각 하위 시퀀스의 각 문자열을 열거 하기 위해 루프입니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">참고 항목</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Linq&gt;</source>
          <target state="translated">&lt;xref:System.Linq&gt;&lt;/xref:System.Linq&gt;</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Standard Query Operators Overview (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/standard-query-operators-overview.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>표준 쿼리 연산자 개요 (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/standard-query-operators-overview.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Select Clause<ept id="p1">](../../../../visual-basic/language-reference/queries/select-clause.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Select 절<ept id="p1">](../../../../visual-basic/language-reference/queries/select-clause.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Combine Data with Joins<ept id="p1">](../../../../visual-basic/programming-guide/language-features/linq/how-to-combine-data-with-linq-by-using-joins.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>방법: 조인 사용 하 여 데이터 결합<ept id="p1">](../../../../visual-basic/programming-guide/language-features/linq/how-to-combine-data-with-linq-by-using-joins.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Populate Object Collections from Multiple Sources (LINQ) (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/how-to-populate-object-collections-from-multiple-sources-linq.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>방법: 개체 컬렉션 (Visual Basic) (LINQ) 여러 소스에서 채우기<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/how-to-populate-object-collections-from-multiple-sources-linq.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Return a LINQ Query Result as a Specific Type<ept id="p1">](../../../../visual-basic/programming-guide/language-features/linq/how-to-return-a-linq-query-result-as-a-specific-type.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>방법: LINQ 쿼리 결과 특정 형식으로 반환<ept id="p1">](../../../../visual-basic/programming-guide/language-features/linq/how-to-return-a-linq-query-result-as-a-specific-type.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Split a File Into Many Files by Using Groups (LINQ) (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/how-to-split-a-file-into-many-files-by-using-groups-linq.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>방법: 그룹 (LINQ) (Visual Basic)를 사용 하 여 파일을 여러 파일로 분할<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/how-to-split-a-file-into-many-files-by-using-groups-linq.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>