<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ccdb87188b924303057d5867dccece937defe74d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\reference\command-line-compiler\target.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9410af692b0477cf13d7747f0c1f53251f463b76</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">aea18e677c5e98f2b9cb9c87feb45b0e2e1cf678</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Handback file name: lo-mt_target.55c5d425f992b7c81518f429b0e6b0e8aea73d18.ko-kr is different with handoff file name: target.55c5d425f992b7c81518f429b0e6b0e8aea73d18.ko-kr.</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>/target (Visual Basic) | Microsoft Docs</source>
          <target state="translated">/target (Visual Basic) | Microsoft 문서</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>/target (Visual Basic)</source>
          <target state="translated">/target(Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Specifies the format of compiler output.</source>
          <target state="translated">컴파일러 출력의 형식을 지정합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
          <target state="translated">구문</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Remarks</source>
          <target state="translated">주의</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The following table summarizes the effect of the <ph id="ph1">`/target`</ph> option.</source>
          <target state="translated">다음 표에서 요약의 효과 <ph id="ph1">`/target`</ph> 옵션입니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Option<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>옵션<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Behavior<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>동작<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Causes the compiler to create an executable console application.</source>
          <target state="translated">컴파일러가 실행 가능한 콘솔 응용 프로그램을 만드는 합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This is the default option when no <ph id="ph1">`/target`</ph> option is specified.</source>
          <target state="translated">하지 않으면 기본 옵션입니다 <ph id="ph1">`/target`</ph> 옵션을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The executable file is created with an .exe extension.</source>
          <target state="translated">실행 파일 확장명이.exe 만들어집니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Unless otherwise specified with the <ph id="ph1">`/out`</ph> option, the output file name takes the name of the input file that contains the <ph id="ph2">`Sub Main`</ph> procedure.</source>
          <target state="translated">지정 하지 않으면는 <ph id="ph1">`/out`</ph> 옵션을 출력 파일 이름 포함 하는 입력된 파일의 이름으로 사용 된 <ph id="ph2">`Sub Main`</ph> 절차.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Only one <ph id="ph1">`Sub Main`</ph> procedure is required in the source-code files that are compiled into an .exe file.</source>
          <target state="translated">하나의 <ph id="ph1">`Sub Main`</ph> 프로시저는.exe로 컴파일되는 소스 코드 파일에 필요 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`/main`</ph> compiler option to specify which class contains the <ph id="ph2">`Sub Main`</ph> procedure.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">`/main`</ph> 컴파일러 옵션을 포함 하는 클래스가 지정 된 <ph id="ph2">`Sub Main`</ph> 프로시저입니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Causes the compiler to create a dynamic-link library (DLL).</source>
          <target state="translated">컴파일러가 동적 연결 라이브러리 (DLL)를 만들려고 합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The dynamic-link library file is created with a .dll extension.</source>
          <target state="translated">동적 연결 라이브러리 파일은.dll 확장명으로 생성 됩니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Unless otherwise specified with the <ph id="ph1">`/out`</ph> option, the output file name takes the name of the first input file.</source>
          <target state="translated">지정 하지 않으면는 <ph id="ph1">`/out`</ph> 옵션을 출력 파일 이름으로 첫 번째 입력된 파일의 이름을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>When building a DLL, a <ph id="ph1">`Sub Main`</ph> procedure is not required.</source>
          <target state="translated">DLL을 빌드할 때는 <ph id="ph1">`Sub Main`</ph> 절차가 필요 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Causes the compiler to generate a module that can be added to an assembly.</source>
          <target state="translated">컴파일러가 어셈블리에 추가할 수 있는 모듈을 만듭니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The output file is created with an extension of .netmodule.</source>
          <target state="translated">출력 파일은.netmodule의 확장으로 생성 됩니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The .NET common language runtime cannot load a file that does not have an assembly.</source>
          <target state="translated">.NET 공용 언어 런타임 어셈블리 없는 파일을 로드할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>However, you can incorporate such a file into the assembly manifest of an assembly by using <ph id="ph1">`/reference`</ph>.</source>
          <target state="translated">그러나 통합할 수 있습니다 이러한 파일 어셈블리의 어셈블리 매니페스트를 사용 하 여 <ph id="ph1">`/reference`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>When code in one module references internal types in another module, both modules must be incorporated into an assembly manifest by using <ph id="ph1">`/reference`</ph>.</source>
          <target state="translated">모듈을 모두를 사용 하 여 어셈블리 매니페스트에 통합 해야 모듈 하나에 코드에서 다른 모듈의 내부 형식을 참조 하는 경우 <ph id="ph1">`/reference`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>/addmodule<ept id="p1">](../../../visual-basic/reference/command-line-compiler/addmodule.md)</ept> option imports metadata from a module.</source>
          <target state="translated"><bpt id="p1">[</bpt>/addmodule<ept id="p1">](../../../visual-basic/reference/command-line-compiler/addmodule.md)</ept> 옵션 모듈에서 메타 데이터를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Causes the compiler to create an executable Windows-based application.</source>
          <target state="translated">컴파일러가 실행 가능한 Windows 기반 응용 프로그램을 만들려고 합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The executable file is created with an .exe extension.</source>
          <target state="translated">실행 파일 확장명이.exe 만들어집니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A Windows-based application is one that provides a user interface from either the <ph id="ph1">[!INCLUDE[dnprdnshort](../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph> class library or with the Win32 APIs.</source>
          <target state="translated">Windows 기반 응용 프로그램을 제공 하는 것 중 하나에서 사용자 인터페이스는 <ph id="ph1">[!INCLUDE[dnprdnshort](../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph> 클래스 라이브러리 또는 Win32 Api와 함께 합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Unless otherwise specified with the <ph id="ph1">`/out`</ph> option, the output file name takes the name of the input file that contains the <ph id="ph2">`Sub Main`</ph> procedure.</source>
          <target state="translated">지정 하지 않으면는 <ph id="ph1">`/out`</ph> 옵션을 출력 파일 이름 포함 하는 입력된 파일의 이름으로 사용 된 <ph id="ph2">`Sub Main`</ph> 절차.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Only one <ph id="ph1">`Sub Main`</ph> procedure is required in the source-code files that are compiled into an .exe file.</source>
          <target state="translated">하나의 <ph id="ph1">`Sub Main`</ph> 프로시저는.exe로 컴파일되는 소스 코드 파일에 필요 합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In cases where your code has more than one class that has a <ph id="ph1">`Sub Main`</ph> procedure, use the <ph id="ph2">`/main`</ph> compiler option to specify which class contains the <ph id="ph3">`Sub Main`</ph> procedure</source>
          <target state="translated">코드에 둘 이상의 클래스에 있는 경우에는 <ph id="ph1">`Sub Main`</ph> 프로시저를 사용 하 여는 <ph id="ph2">`/main`</ph> 컴파일러 옵션을 포함 하는 클래스가 지정 된 <ph id="ph3">`Sub Main`</ph> 프로시저</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Causes the compiler to create an executable Windows-based application that must be run in an app container.</source>
          <target state="translated">응용 프로그램을 만드는 실행 가능한 Windows 기반 응용 프로그램 컨테이너에서 실행 해야 하는 컴파일러가 선택 합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This setting is designed to be used for <ph id="ph1">[!INCLUDE[win8_appname_long](../../../csharp/includes/win8_appname_long_md.md)]</ph> applications.</source>
          <target state="translated">이 설정은 사용자에 사용할 <ph id="ph1">[!INCLUDE[win8_appname_long](../../../csharp/includes/win8_appname_long_md.md)]</ph> 응용 프로그램입니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>appcontainerexe<ept id="p1">**</ept> setting sets a bit in the Characteristics field of the <bpt id="p2">[</bpt>Portable Executable<ept id="p2">](http://go.microsoft.com/fwlink/p/?LinkId=236960)</ept> file.</source>
          <target state="translated"><bpt id="p1">**</bpt>appcontainerexe<ept id="p1">**</ept> 설정을 설정 하는 약간의 특성 필드에는 <bpt id="p2">[</bpt>이식 가능한 실행 파일<ept id="p2">](http://go.microsoft.com/fwlink/p/?LinkId=236960)</ept> 파일입니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This bit indicates that the app must be run in an app container.</source>
          <target state="translated">이 비트가 나타냅니다. 응용 프로그램 컨테이너에서 응용 프로그램을 실행 해야 합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>When this bit is set, an error occurs if the <ph id="ph1">`CreateProcess`</ph> method tries to launch the application outside of an app container.</source>
          <target state="translated">이 비트가 설정 되어 오류가 발생 하는 경우는 <ph id="ph1">`CreateProcess`</ph> 메서드를 응용 프로그램 컨테이너 외부에서 응용 프로그램을 시작 하려고 시도 합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Aside from this bit setting, <bpt id="p1">**</bpt>/target:appcontainerexe<ept id="p1">**</ept> is equivalent to <bpt id="p2">**</bpt>/target:winexe<ept id="p2">**</ept>.</source>
          <target state="translated">이 비트가 설정 외에도 <bpt id="p1">**</bpt>/target: appcontainerexe<ept id="p1">**</ept> 같습니다 <bpt id="p2">**</bpt>/target: winexe<ept id="p2">**</ept>합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The executable file is created with an .exe extension.</source>
          <target state="translated">실행 파일 확장명이.exe 만들어집니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Unless you specify otherwise by using the <ph id="ph1">`/out`</ph> option, the output file name takes the name of the input file that contains the <ph id="ph2">`Sub Main`</ph> procedure.</source>
          <target state="translated">사용 하 여 별도로 지정 하지 않으면는 <ph id="ph1">`/out`</ph> 옵션을 출력 파일 이름 포함 하는 입력된 파일의 이름으로 사용 된 <ph id="ph2">`Sub Main`</ph> 프로시저.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Only one <ph id="ph1">`Sub Main`</ph> procedure is required in the source-code files that are compiled into an .exe file.</source>
          <target state="translated">하나의 <ph id="ph1">`Sub Main`</ph> 프로시저는.exe로 컴파일되는 소스 코드 파일에 필요 합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If your code contains more than one class that has a <ph id="ph1">`Sub Main`</ph> procedure, use the <ph id="ph2">`/main`</ph> compiler option to specify which class contains the <ph id="ph3">`Sub Main`</ph> procedure</source>
          <target state="translated">코드에 있는 둘 이상의 클래스를 포함 하는 경우는 <ph id="ph1">`Sub Main`</ph> 프로시저를 사용 하 여는 <ph id="ph2">`/main`</ph> 컴파일러 옵션을 포함 하는 클래스가 지정 된 <ph id="ph3">`Sub Main`</ph> 프로시저</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Causes the compiler to create an intermediate file that you can convert to a Windows Runtime binary (.winmd) file.</source>
          <target state="translated">컴파일러가 Windows 런타임 이진 (.winmd) 파일로 변환할 수 있는 중간 파일을 만들려고 합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The .winmd file can be consumed by JavaScript and C++ programs, in addition to managed language programs.</source>
          <target state="translated">.Winmd 파일은 관리 되는 언어 프로그램 뿐만 아니라 JavaScript 및 c + + 프로그램에서 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The intermediate file is created with a .winmdobj extension.</source>
          <target state="translated">중간 파일.winmdobj 확장명으로 생성 됩니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Unless you specify otherwise by using the <ph id="ph1">`/out`</ph> option, the output file name takes the name of the first input file.</source>
          <target state="translated">사용 하 여 별도로 지정 하지 않으면는 <ph id="ph1">`/out`</ph> 옵션을 출력 파일 이름으로 첫 번째 입력된 파일의 이름을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Sub Main`</ph> procedure isn’t required.</source>
          <target state="translated">A <ph id="ph1">`Sub Main`</ph> 프로시저는 필요 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The .winmdobj file is designed to be used as input for the &lt;xref:Microsoft.Build.Tasks.WinMDExp&gt; export tool to produce a Windows metadata (WinMD) file.</source>
          <target state="translated">.Winmdobj 파일에 대 한 입력으로 사용 하도록 설계 되는 &lt;xref:Microsoft.Build.Tasks.WinMDExp&gt;Windows 메타 데이터 (WinMD) 파일을 생성 하는 도구를 내보냅니다.&lt;/xref:Microsoft.Build.Tasks.WinMDExp&gt;</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The WinMD file has a .winmd extension and contains both the code from the original library and the WinMD definitions that JavaScript, C++, and  the Windows Runtime use.</source>
          <target state="translated">WinMD 파일 확장명이.winmd 및 해당 JavaScript, c + + 및 Windows 런타임 사용 WinMD 정 및 원본 라이브러리에서 코드를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Unless you specify <ph id="ph1">`/target:module`</ph>, <ph id="ph2">`/target`</ph> causes a <ph id="ph3">[!INCLUDE[dnprdnshort](../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph> assembly manifest to be added to an output file.</source>
          <target state="translated">지정 하지 않으면 <ph id="ph1">`/target:module`</ph>, <ph id="ph2">`/target`</ph> 하면는 <ph id="ph3">[!INCLUDE[dnprdnshort](../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph> 어셈블리 매니페스트를 출력 파일에 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Each instance of Vbc.exe produces, at most, one output file.</source>
          <target state="translated">Vbc.exe의 각 인스턴스를 생성, 최대 출력 파일은 하나입니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>If you specify a compiler option such as <ph id="ph1">`/out`</ph> or <ph id="ph2">`/target`</ph> more than one time, the last one the compiler processes is put into effect.</source>
          <target state="translated">와 같은 컴파일러 옵션을 지정 하는 경우 <ph id="ph1">`/out`</ph> 또는 <ph id="ph2">`/target`</ph> 한 번 이상, 개가 처리 효과에 배치 됩니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Information about all files in a compilation is added to the manifest.</source>
          <target state="translated">컴파일에서 모든 파일에 대 한 정보는 매니페스트에 추가 됩니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>All output files except those created with <ph id="ph1">`/target:module`</ph> contain assembly metadata in the manifest.</source>
          <target state="translated">모든 출력 파일을 사용 하 여 만든 것을 제외한 파일 <ph id="ph1">`/target:module`</ph> 매니페스트에 어셈블리 메타 데이터를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">[</bpt>Ildasm.exe (IL Disassembler)<ept id="p1">](https://msdn.microsoft.com/library/f7dy01k1)</ept> to view the metadata in an output file.</source>
          <target state="translated">사용 하 여 <bpt id="p1">[</bpt>Ildasm.exe (IL 디스어셈블러)<ept id="p1">](https://msdn.microsoft.com/library/f7dy01k1)</ept> 출력 파일에 메타 데이터를 볼 수 있습니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The short form of <ph id="ph1">`/target`</ph> is <ph id="ph2">`/t`</ph>.</source>
          <target state="translated">약식 <ph id="ph1">`/target`</ph> 는 <ph id="ph2">`/t`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>To set /target in the Visual Studio IDE</source>
          <target state="translated">Visual Studio IDE에서 /target을 설정 하려면</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Have a project selected in <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>솔루션 탐색기<ept id="p1">**</ept>에서 프로젝트를 선택합니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>Project<ept id="p1">**</ept> menu, click <bpt id="p2">**</bpt>Properties<ept id="p2">**</ept>.</source>
          <target state="translated">에 <bpt id="p1">**</bpt>프로젝트<ept id="p1">**</ept> 메뉴를 클릭 하 여 <bpt id="p2">**</bpt>속성<ept id="p2">**</ept>합니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Introduction to the Project Designer<ept id="p1">](http://msdn.microsoft.com/en-us/898dd854-c98d-430c-ba1b-a913ce3c73d7)</ept>.</source>
          <target state="translated">자세한 내용은 <bpt id="p1">[</bpt>프로젝트 디자이너 소개<ept id="p1">](http://msdn.microsoft.com/en-us/898dd854-c98d-430c-ba1b-a913ce3c73d7)</ept>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Click the <bpt id="p1">**</bpt>Application<ept id="p1">**</ept> tab.</source>
          <target state="translated"><bpt id="p1">**</bpt>응용 프로그램<ept id="p1">**</ept> 탭을 클릭합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Modify the value in the <bpt id="p1">**</bpt>Application Type<ept id="p1">**</ept> box.</source>
          <target state="translated">값을 수정 된 <bpt id="p1">**</bpt>응용 프로그램 종류<ept id="p1">**</ept> 상자입니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">예제</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The following code compiles <ph id="ph1">`in.vb`</ph>, creating <ph id="ph2">`in.dll`</ph>:</source>
          <target state="translated">다음 코드에서는 <ph id="ph1">`in.vb`</ph>만들기, <ph id="ph2">`in.dll`</ph>:</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">참고 항목</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Visual Basic Command-Line Compiler<ept id="p1">](../../../visual-basic/reference/command-line-compiler/index.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Visual Basic 명령줄 컴파일러<ept id="p1">](../../../visual-basic/reference/command-line-compiler/index.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>/main<ept id="p1">](../../../visual-basic/reference/command-line-compiler/main.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>주 /<ept id="p1">](../../../visual-basic/reference/command-line-compiler/main.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>/out (Visual Basic)<ept id="p1">](../../../visual-basic/reference/command-line-compiler/out.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>/out (Visual Basic)<ept id="p1">](../../../visual-basic/reference/command-line-compiler/out.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>/reference (Visual Basic)<ept id="p1">](../../../visual-basic/reference/command-line-compiler/reference.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>/reference (Visual Basic)<ept id="p1">](../../../visual-basic/reference/command-line-compiler/reference.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>/addmodule<ept id="p1">](../../../visual-basic/reference/command-line-compiler/addmodule.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>/addmodule<ept id="p1">](../../../visual-basic/reference/command-line-compiler/addmodule.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>/moduleassemblyname<ept id="p1">](../../../visual-basic/reference/command-line-compiler/moduleassemblyname.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>/moduleassemblyname<ept id="p1">](../../../visual-basic/reference/command-line-compiler/moduleassemblyname.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Assemblies and the Global Assembly Cache<ept id="p1">](../../../visual-basic/programming-guide/concepts/assemblies-gac/index.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>어셈블리 및 전역 어셈블리 캐시<ept id="p1">](../../../visual-basic/programming-guide/concepts/assemblies-gac/index.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Sample Compilation Command Lines<ept id="p1">](../../../visual-basic/reference/command-line-compiler/sample-compilation-command-lines.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>샘플 컴파일 명령줄<ept id="p1">](../../../visual-basic/reference/command-line-compiler/sample-compilation-command-lines.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>