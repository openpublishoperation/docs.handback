<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c77a1ec3621d056a814b298cd5ee6b8c44c52ec2</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\language-reference\xml-literals\xml-element-literal.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2d85cc95d4c2fec0ea7cae13a2bbc35b4db8ecdf</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">65674aa06eea0ea85a343f3de7208d3124de95e3</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Handback file name: lo-mt_xml-element-literal.eb1e7ec46eb8c95b4acc45c2931f29bd0f8b3250.ko-kr is different with handoff file name: xml-element-literal.eb1e7ec46eb8c95b4acc45c2931f29bd0f8b3250.ko-kr.</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>XML Element Literal (Visual Basic) | Microsoft Docs</source>
          <target state="translated">XML 요소 리터럴 (Visual Basic) | Microsoft 문서</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>XML Element Literal (Visual Basic)</source>
          <target state="translated">XML 요소 리터럴(Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A literal that represents an &lt;xref:System.Xml.Linq.XElement&gt; object.</source>
          <target state="translated">나타내는 리터럴입니다는 &lt;xref:System.Xml.Linq.XElement&gt;개체.&lt;/xref:System.Xml.Linq.XElement&gt;</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
          <target state="translated">구문</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parts</source>
          <target state="translated">요소</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Required.</source>
          <target state="translated">필수 요소.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Opens the starting element tag.</source>
          <target state="translated">시작 요소 태그를 엽니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Required.</source>
          <target state="translated">필수 요소.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Name of the element.</source>
          <target state="translated">요소 이름입니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The format is one of the following:</source>
          <target state="translated">형식은 다음 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Literal text for the element name, of the form [<ph id="ph1">`ePrefix``:`</ph>]<ph id="ph2">`eName`</ph>, where:</source>
          <target state="translated">폼의 요소 이름에 대 한 리터럴 텍스트 [<ph id="ph1">`ePrefix``:`</ph>]<ph id="ph2">`eName`</ph>, 위치:</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Part</source>
          <target state="translated">파트</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">설명</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">선택적 요소.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>XML namespace prefix for the element.</source>
          <target state="translated">요소에 대 한 XML 네임 스페이스 접두사입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Must be a global XML namespace that is defined with an <ph id="ph1">`Imports`</ph> statement in the file or at the project level, or a local XML namespace that is defined in this element or a parent element.</source>
          <target state="translated">전역으로 정의 된 XML 네임 스페이스 여야는 <ph id="ph1">`Imports`</ph> 파일 또는 프로젝트 수준 또는 로컬이 요소 또는 부모 요소에 정의 된 XML 네임 스페이스에서 문입니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Required.</source>
          <target state="translated">필수 요소.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Name of the element.</source>
          <target state="translated">요소 이름입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The format is one of the following:</source>
          <target state="translated">형식은 다음 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>-   Literal text.</source>
          <target state="translated">-리터럴 텍스트입니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Names of Declared XML Elements and Attributes<ept id="p1">](../../../visual-basic/programming-guide/language-features/xml/names-of-declared-xml-elements-and-attributes.md)</ept>.</source>
          <target state="translated">참조 <bpt id="p1">[</bpt>선언 된 XML 요소 및 특성의 이름을<ept id="p1">](../../../visual-basic/programming-guide/language-features/xml/names-of-declared-xml-elements-and-attributes.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>-   Embedded expression of the form <ph id="ph1">`&lt;%=`</ph> e<ph id="ph2">`NameExp`</ph> <ph id="ph3">`%&gt;`</ph>.</source>
          <target state="translated">포함 형식의 식이 <ph id="ph1">`&lt;%=`</ph> e<ph id="ph2">`NameExp`</ph> <ph id="ph3">`%&gt;`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The type of <ph id="ph1">`eNameExp`</ph> must be <ph id="ph2">`String`</ph> or a type that is implicitly convertible to &lt;xref:System.Xml.Linq.XName&gt;.</source>
          <target state="translated">유형의 <ph id="ph1">`eNameExp`</ph> 해야 <ph id="ph2">`String`</ph> 이거나 &lt;xref:System.Xml.Linq.XName&gt;.&lt;/xref:System.Xml.Linq.XName&gt; 암시적으로 변환할 수 있는 유형</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Embedded expression of the form <ph id="ph1">`&lt;%=`</ph> <ph id="ph2">`nameExp`</ph> <ph id="ph3">`%&gt;`</ph>.</source>
          <target state="translated">형식의 식이 포함 된 <ph id="ph1">`&lt;%=`</ph> <ph id="ph2">`nameExp`</ph> <ph id="ph3">`%&gt;`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The type of <ph id="ph1">`nameExp`</ph> must be <ph id="ph2">`String`</ph> or a type implicitly convertible to &lt;xref:System.Xml.Linq.XName&gt;.</source>
          <target state="translated">유형의 <ph id="ph1">`nameExp`</ph> 해야 <ph id="ph2">`String`</ph> 또는 &lt;xref:System.Xml.Linq.XName&gt;.&lt;/xref:System.Xml.Linq.XName&gt; 암시적으로 변환할 수 있는 유형</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>An embedded expression is not allowed in a closing tag of an element.</source>
          <target state="translated">요소의 닫는 태그에서 포함된 식을 허용 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">선택적 요소.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>List of attributes declared in the literal.</source>
          <target state="translated">리터럴에서 선언 된 특성의 목록입니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Each <ph id="ph1">`attribute`</ph> has one of the following syntaxes:</source>
          <target state="translated">각 <ph id="ph1">`attribute`</ph> 에 다음 구문 중 하나:</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Attribute assignment, of the form [<ph id="ph1">`aPrefix``:`</ph>]<ph id="ph2">`aName``=``aValue`</ph>, where:</source>
          <target state="translated">특성 형식의 할당 [<ph id="ph1">`aPrefix``:`</ph>]<ph id="ph2">`aName``=``aValue`</ph>, 위치:</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Part</source>
          <target state="translated">파트</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">설명</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">선택적 요소.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>XML namespace prefix for the attribute.</source>
          <target state="translated">특성에 대 한 XML 네임 스페이스 접두사입니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Must be a global XML namespace that is defined with an <ph id="ph1">`Imports`</ph> statement, or a local XML namespace that is defined in this element or a parent element.</source>
          <target state="translated">전역으로 정의 된 XML 네임 스페이스 여야는 <ph id="ph1">`Imports`</ph> 문 또는이 요소 또는 부모 요소에 정의 된 로컬 XML 네임 스페이스입니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Required.</source>
          <target state="translated">필수 요소.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Name of the attribute.</source>
          <target state="translated">특성의 이름입니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The format is one of the following:</source>
          <target state="translated">형식은 다음 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>-   Literal text.</source>
          <target state="translated">-리터럴 텍스트입니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Names of Declared XML Elements and Attributes<ept id="p1">](../../../visual-basic/programming-guide/language-features/xml/names-of-declared-xml-elements-and-attributes.md)</ept>.</source>
          <target state="translated">참조 <bpt id="p1">[</bpt>선언 된 XML 요소 및 특성의 이름을<ept id="p1">](../../../visual-basic/programming-guide/language-features/xml/names-of-declared-xml-elements-and-attributes.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>-   Embedded expression of the form <ph id="ph1">`&lt;%=`</ph> <ph id="ph2">`aNameExp`</ph> <ph id="ph3">`%&gt;`</ph>.</source>
          <target state="translated">포함 형식의 식이 <ph id="ph1">`&lt;%=`</ph> <ph id="ph2">`aNameExp`</ph> <ph id="ph3">`%&gt;`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The type of <ph id="ph1">`aNameExp`</ph> must be <ph id="ph2">`String`</ph> or a type that is implicitly convertible to &lt;xref:System.Xml.Linq.XName&gt;.</source>
          <target state="translated">유형의 <ph id="ph1">`aNameExp`</ph> 해야 <ph id="ph2">`String`</ph> 이거나 &lt;xref:System.Xml.Linq.XName&gt;.&lt;/xref:System.Xml.Linq.XName&gt; 암시적으로 변환할 수 있는 유형</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">선택적 요소.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Value of the attribute.</source>
          <target state="translated">특성의 값입니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The format is one of the following:</source>
          <target state="translated">형식은 다음 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>-   Literal text, enclosed in quotation marks.</source>
          <target state="translated">-따옴표로 묶인 리터럴 텍스트입니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>-   Embedded expression of the form <ph id="ph1">`&lt;%=`</ph> <ph id="ph2">`aValueExp`</ph> <ph id="ph3">`%&gt;`</ph>.</source>
          <target state="translated">포함 형식의 식이 <ph id="ph1">`&lt;%=`</ph> <ph id="ph2">`aValueExp`</ph> <ph id="ph3">`%&gt;`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Any type is allowed.</source>
          <target state="translated">모든 형식이 허용 됩니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Embedded expression of the form <ph id="ph1">`&lt;%=`</ph> <ph id="ph2">`aExp`</ph> <ph id="ph3">`%&gt;`</ph>.</source>
          <target state="translated">형식의 식이 포함 된 <ph id="ph1">`&lt;%=`</ph> <ph id="ph2">`aExp`</ph> <ph id="ph3">`%&gt;`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">선택적 요소.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Indicates that the element is an empty element, without content.</source>
          <target state="translated">요소 콘텐츠가 없는 빈 요소를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Required.</source>
          <target state="translated">필수 요소.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Ends the beginning or empty element tag.</source>
          <target state="translated">이상 버전 또는 빈 요소 태그를 종료합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">선택적 요소.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Content of the element.</source>
          <target state="translated">요소 콘텐츠입니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Each <ph id="ph1">`content`</ph> can be one of the following:</source>
          <target state="translated">각 <ph id="ph1">`content`</ph> 다음 중 하나일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Literal text.</source>
          <target state="translated">리터럴 텍스트입니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>All the white space in <ph id="ph1">`elementContents`</ph> becomes significant if there is any literal text.</source>
          <target state="translated">에 있는 모든 공백을 <ph id="ph1">`elementContents`</ph> 리터럴 텍스트가 있으면 의미를 갖습니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Embedded expression of the form <ph id="ph1">`&lt;%=`</ph> <ph id="ph2">`contentExp`</ph> <ph id="ph3">`%&gt;`</ph>.</source>
          <target state="translated">형식의 식이 포함 된 <ph id="ph1">`&lt;%=`</ph> <ph id="ph2">`contentExp`</ph> <ph id="ph3">`%&gt;`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>XML element literal.</source>
          <target state="translated">XML 요소 리터럴입니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>XML comment literal.</source>
          <target state="translated">XML 주석 리터럴입니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>XML Comment Literal<ept id="p1">](../../../visual-basic/language-reference/xml-literals/xml-comment-literal.md)</ept>.</source>
          <target state="translated">참조 <bpt id="p1">[</bpt>XML 주석 리터럴<ept id="p1">](../../../visual-basic/language-reference/xml-literals/xml-comment-literal.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>XML processing instruction literal.</source>
          <target state="translated">XML 처리 명령 리터럴입니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>XML Processing Instruction Literal<ept id="p1">](../../../visual-basic/language-reference/xml-literals/xml-processing-instruction-literal.md)</ept>.</source>
          <target state="translated">참조 <bpt id="p1">[</bpt>XML 처리 명령 리터럴<ept id="p1">](../../../visual-basic/language-reference/xml-literals/xml-processing-instruction-literal.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>XML CDATA literal.</source>
          <target state="translated">XML CDATA 리터럴입니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>XML CDATA Literal<ept id="p1">](../../../visual-basic/language-reference/xml-literals/xml-cdata-literal.md)</ept>.</source>
          <target state="translated">참조 <bpt id="p1">[</bpt>XML CDATA 리터럴<ept id="p1">](../../../visual-basic/language-reference/xml-literals/xml-cdata-literal.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`&lt;/`</ph>[<ph id="ph2">`name`</ph>]<ph id="ph3">`&gt;`</ph></source>
          <target state="translated"><ph id="ph1">`&lt;/`</ph>[<ph id="ph2">`name`</ph>]<ph id="ph3">`&gt;`</ph></target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">선택 사항입니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Represents the closing tag for the element.</source>
          <target state="translated">닫는 태그를 요소를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The optional <ph id="ph1">`name`</ph> parameter is not allowed when it is the result of an embedded expression.</source>
          <target state="translated">선택적 <ph id="ph1">`name`</ph> 포함된 된 식의 결과 경우에 매개 변수가 허용 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Return Value</source>
          <target state="translated">반환 값</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.Xml.Linq.XElement&gt; object.</source>
          <target state="translated">&lt;xref:System.Xml.Linq.XElement&gt;개체.&lt;/xref:System.Xml.Linq.XElement&gt;</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Remarks</source>
          <target state="translated">주의</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>You can use the XML element literal syntax to create &lt;xref:System.Xml.Linq.XElement&gt; objects in your code.</source>
          <target state="translated">XML 요소 리터럴 구문을 사용 하 여 만들려는 &lt;xref:System.Xml.Linq.XElement&gt;코드에서 개체.&lt;/xref:System.Xml.Linq.XElement&gt;</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>An XML literal can span multiple lines without using line continuation characters.</source>
          <target state="translated">XML 리터럴 줄 연속 문자를 사용 하지 않고 여러 줄을 확장할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>This feature enables you to copy content from an XML document and paste it directly into a <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> program.</source>
          <target state="translated">이 기능을 사용 하는 XML 문서에서 콘텐츠를 복사 하 고에 직접 붙여넣을 수는 <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> 프로그램입니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Embedded expressions of the form <ph id="ph1">`&lt;%=`</ph> <ph id="ph2">`exp`</ph> <ph id="ph3">`%&gt;`</ph> enable you to add dynamic information to an XML element literal.</source>
          <target state="translated">포함 형식의 식이 <ph id="ph1">`&lt;%=`</ph> <ph id="ph2">`exp`</ph> <ph id="ph3">`%&gt;`</ph> 리터럴 XML 요소에 동적 정보를 추가할 수 있도록 합니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Embedded Expressions in XML<ept id="p1">](../../../visual-basic/programming-guide/language-features/xml/embedded-expressions-in-xml.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>XML의 포함 식<ept id="p1">](../../../visual-basic/programming-guide/language-features/xml/embedded-expressions-in-xml.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> compiler converts the XML element literal into calls to the &lt;xref:System.Xml.Linq.XElement.%23ctor%2A&gt; constructor and, if it is required, the &lt;xref:System.Xml.Linq.XAttribute.%23ctor%2A&gt; constructor.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> 컴파일러 호출으로 XML 요소 리터럴 변환는 &lt;xref:System.Xml.Linq.XElement.%23ctor%2A&gt;생성자 및 필요한 경우는 &lt;xref:System.Xml.Linq.XAttribute.%23ctor%2A&gt;생성자.&lt;/xref:System.Xml.Linq.XAttribute.%23ctor%2A&gt; &lt;/xref:System.Xml.Linq.XElement.%23ctor%2A&gt;</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>XML Namespaces</source>
          <target state="translated">XML 네임스페이스</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>XML namespace prefixes are useful when you have to create XML literals with elements from the same namespace many times in code.</source>
          <target state="translated">XML 네임 스페이스 접두사는 XML 리터럴을 여러 번 코드에서에서 동일한 네임 스페이스의에서 요소를 만들 수 있는 경우에 유용 합니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>You can use global XML namespace prefixes, which you define by using the <ph id="ph1">`Imports`</ph> statement, or local prefixes, which you define by using the <ph id="ph2">`xmlns:``xmlPrefix`</ph>="<ph id="ph3">`xmlNamespace`</ph>" attribute syntax.</source>
          <target state="translated">사용 하 여 정의 하는 전역 XML 네임 스페이스 접두사를 사용할 수는 <ph id="ph1">`Imports`</ph> 문 또는 로컬 접두사를 사용 하 여 정의 <ph id="ph2">`xmlns:``xmlPrefix`</ph>= "<ph id="ph3">`xmlNamespace`</ph>" 특성 구문입니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Imports Statement (XML Namespace)<ept id="p1">](../../../visual-basic/language-reference/statements/imports-statement-xml-namespace.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>Imports 문 (XML Namespace)<ept id="p1">](../../../visual-basic/language-reference/statements/imports-statement-xml-namespace.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>In accordance with the scoping rules for XML namespaces, local prefixes take precedence over global prefixes.</source>
          <target state="translated">XML 네임 스페이스에 대 한 범위 지정 규칙에 따라 로컬 접두사 전역 접두사 보다 우선합니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>However, if an XML literal defines an XML namespace, that namespace is not available to expressions that appear in an embedded expression.</source>
          <target state="translated">그러나 XML 리터럴과 XML 네임 스페이스를 정의 하는 경우 해당 네임 스페이스 사용할 수 없는 경우 포함된 된 식에 표시 되는 식</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The embedded expression can access only the global XML namespace.</source>
          <target state="translated">포함된 식에 전역 XML 네임 스페이스에만 액세스할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> compiler converts each global XML namespace that is used by an XML literal into a one local namespace definition in the generated code.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> 컴파일러가 변환 하는 XML 리터럴을에서 생성된 된 코드에서 하나의 로컬 네임 스페이스 정의로 사용 되는 각 글로벌 XML 네임 스페이스입니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Global XML namespaces that are not used do not appear in the generated code.</source>
          <target state="translated">사용 되지 않는 전역 XML 네임 스페이스는 생성된 된 코드에 표시 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">예제</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The following example shows how to create a simple XML element that has two nested empty elements.</source>
          <target state="translated">다음 예제에서는 두 개의 중첩 된 빈 요소가 포함 된 간단한 XML 요소를 만드는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbXMLSamples#20<ept id="p2">](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/xml-element-literal_1.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbXMLSamples #&amp;20;<ept id="p2">](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/xml-element-literal_1.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The example displays the following text.</source>
          <target state="translated">다음 텍스트를 표시합니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Notice that the literal preserves the structure of the empty elements.</source>
          <target state="translated">공지 리터럴 빈 요소의 구조를 유지 합니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">예제</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The following example shows how to use embedded expressions to name an element and create attributes.</source>
          <target state="translated">다음 예제에서는 포함된 식을 사용 하 여 요소 이름을 지정 하 고 속성을 작성 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbXMLSamples#21<ept id="p2">](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/xml-element-literal_2.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbXMLSamples #&amp;21;<ept id="p2">](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/xml-element-literal_2.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>This code displays the following text:</source>
          <target state="translated">이 코드의 텍스트는 다음과 같습니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">예제</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The following example declares <ph id="ph1">`ns`</ph> as an XML namespace prefix.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">`ns`</ph>를 XML 네임스페이스 접두사로 선언한 다음</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>It then uses the prefix of the namespace to create an XML literal and displays the element's final form.</source>
          <target state="translated">그런 다음 XML 리터럴을 만드는 데 네임 스페이스의 접두사 값을 사용 하 고 요소의 최종 폼이 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbXMLSamples#22<ept id="p2">](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/xml-element-literal_3.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbXMLSamples #&amp;22;<ept id="p2">](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/xml-element-literal_3.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>This code displays the following text:</source>
          <target state="translated">이 코드의 텍스트는 다음과 같습니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Notice that the compiler converted the prefix of the global XML namespace into a prefix definition for the XML namespace.</source>
          <target state="translated">컴파일러 전역 XML 네임 스페이스의 접두사는 XML 네임 스페이스에 대 한 접두사 정의로 변환 함을 알 수 있습니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">\&lt;</ph>ns:middle&gt; element redefines the XML namespace prefix for the <ph id="ph2">\&lt;</ph>ns:inner1&gt; element.</source>
          <target state="translated"><ph id="ph1">\&lt;</ph>ns:middle &gt; 요소에 대 한 XML 네임 스페이스 접두사를 다시 정의 <ph id="ph2">\&lt;</ph>ns:inner1 &gt; 요소입니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>However, the <ph id="ph1">\&lt;</ph>ns:inner2&gt; element uses the namespace defined by the <ph id="ph2">`Imports`</ph> statement.</source>
          <target state="translated">그러나는 <ph id="ph1">\&lt;</ph>ns:inner2 &gt;에 정의 된 네임 스페이스를 사용 하는 요소는 <ph id="ph2">`Imports`</ph> 문입니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">참고 항목</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Xml.Linq.XElement&gt;</source>
          <target state="translated">&lt;xref:System.Xml.Linq.XElement&gt;</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Names of Declared XML Elements and Attributes<ept id="p1">](../../../visual-basic/programming-guide/language-features/xml/names-of-declared-xml-elements-and-attributes.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>선언 된 XML 요소 및 특성의 이름<ept id="p1">](../../../visual-basic/programming-guide/language-features/xml/names-of-declared-xml-elements-and-attributes.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>XML Comment Literal<ept id="p1">](../../../visual-basic/language-reference/xml-literals/xml-comment-literal.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>XML 주석 리터럴<ept id="p1">](../../../visual-basic/language-reference/xml-literals/xml-comment-literal.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>XML CDATA Literal<ept id="p1">](../../../visual-basic/language-reference/xml-literals/xml-cdata-literal.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>XML CDATA 리터럴<ept id="p1">](../../../visual-basic/language-reference/xml-literals/xml-cdata-literal.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>XML Literals<ept id="p1">](../../../visual-basic/language-reference/xml-literals/index.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>XML 리터럴<ept id="p1">](../../../visual-basic/language-reference/xml-literals/index.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Creating XML in Visual Basic<ept id="p1">](../../../visual-basic/programming-guide/language-features/xml/creating-xml.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Visual Basic에서 XML 만들기<ept id="p1">](../../../visual-basic/programming-guide/language-features/xml/creating-xml.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Embedded Expressions in XML<ept id="p1">](../../../visual-basic/programming-guide/language-features/xml/embedded-expressions-in-xml.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>XML의 포함된 식<ept id="p1">](../../../visual-basic/programming-guide/language-features/xml/embedded-expressions-in-xml.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Imports Statement (XML Namespace)<ept id="p1">](../../../visual-basic/language-reference/statements/imports-statement-xml-namespace.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>Imports 문(XML 네임스페이스)<ept id="p1">](../../../visual-basic/language-reference/statements/imports-statement-xml-namespace.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>