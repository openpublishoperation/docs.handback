<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-eac019f" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">016ee9a4f05fdf36982c5b369780526296b53a7d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\base-types\quantifiers.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p2</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">034dc5c3c179472b5c0e1eeedf37e95e2f3add15</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ffc3bc319e6c6abfb248d3aede700258690d71ae</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Targeting source file commit b20713600d7c3ddc31be5885733a1e8910ede8c6 is lower than latest handed back source file commit b20713600d7c3ddc31be5885733a1e8910ede8c6</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Quantifiers in regular expressions</source>
          <target state="translated">Quantificadores em expressões regulares</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Quantifiers in regular expressions</source>
          <target state="translated">Quantificadores em expressões regulares</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Quantifiers in regular expressions</source>
          <target state="translated">Quantificadores em expressões regulares</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Quantifiers specify how many instances of a character, group, or character class must be present in the input for a match to be found.</source>
          <target state="translated">Os quantificadores especificam quantas instâncias de um caractere, grupo ou classe de caracteres devem estar presentes na entrada para encontrar uma correspondência.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The following table lists the quantifiers supported by .NET.</source>
          <target state="translated">A tabela a seguir lista os quantificadores tem suporte no .NET.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Greedy quantifier</source>
          <target state="translated">Quantificador Greedy</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Lazy quantifier</source>
          <target state="translated">Quantificador lento</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Descrição</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt><ph id="ph1">\*</ph>?<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt><ph id="ph1">\*</ph>?<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Match zero or more times.</source>
          <target state="translated">Corresponder a zero ou mais vezes.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>+?<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>+?<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Match one or more times.</source>
          <target state="translated">Corresponder a um ou mais vezes.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>?<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>?<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>??<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>??<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Match zero or one time.</source>
          <target state="translated">Corresponder a zero ou uma vez.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>}<ept id="p3">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>}<ept id="p3">**</ept></target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>}?<ept id="p3">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>}?<ept id="p3">**</ept></target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Match exactly n times.</source>
          <target state="translated">Corresponder exatamente a n vezes.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,}<ept id="p3">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,}<ept id="p3">**</ept></target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,}?<ept id="p3">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,}?<ept id="p3">**</ept></target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Match at least n times.</source>
          <target state="translated">Corresponder a pelo menos n vezes.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,<ept id="p3">**</ept><bpt id="p4">_</bpt>m<ept id="p4">_</ept><bpt id="p5">**</bpt>}<ept id="p5">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,<ept id="p3">**</ept><bpt id="p4">_</bpt>m<ept id="p4">_</ept><bpt id="p5">**</bpt>}<ept id="p5">**</ept></target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,<ept id="p3">**</ept><bpt id="p4">_</bpt>m<ept id="p4">_</ept><bpt id="p5">**</bpt>}?<ept id="p5">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,<ept id="p3">**</ept><bpt id="p4">_</bpt>m<ept id="p4">_</ept><bpt id="p5">**</bpt>}?<ept id="p5">**</ept></target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Match from n to m times.</source>
          <target state="translated">Corresponder de n a m vezes.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The quantities <bpt id="p1">*</bpt>n<ept id="p1">*</ept> and <bpt id="p2">*</bpt>m<ept id="p2">*</ept> are integer constants.</source>
          <target state="translated">As quantidades <bpt id="p1">*</bpt>n<ept id="p1">*</ept> e <bpt id="p2">*</bpt>m<ept id="p2">*</ept> são constantes inteiras.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Ordinarily, quantifiers are greedy; they cause the regular expression engine to match as many occurrences of particular patterns as possible.</source>
          <target state="translated">Normalmente, os quantificadores são Greedy; eles fazem com que o mecanismo de expressões regulares corresponda a quantas ocorrências de padrões determinados forem possíveis.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Appending the <ph id="ph1">`?`</ph> character to a quantifier makes it lazy; it causes the regular expression engine to match as few occurrences as possible.</source>
          <target state="translated">Acrescentar o caractere <ph id="ph1">`?`</ph> a um quantificador o torna lento; faz com que o mecanismo de expressões regulares corresponda ao mínimo de ocorrências possíveis.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For a complete description of the difference between greedy and lazy quantifiers, see the section <bpt id="p1">[</bpt>Greedy and lazy quantifiers<ept id="p1">](#greedy-and-lazy-quantifiers)</ept> later in this topic.</source>
          <target state="translated">Para obter uma descrição completa da diferença entre quantificadores Greedy e lentos, consulte a seção <bpt id="p1">[</bpt>Quantificadores Greedy e lentos<ept id="p1">](#greedy-and-lazy-quantifiers)</ept> mais adiante neste tópico.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Nesting quantifiers (for example, as the regular expression pattern <ph id="ph1">`(a*)*`</ph> does) can increase the number of comparisons that the regular expression engine must perform, as an exponential function of the number of characters in the input string.</source>
          <target state="translated">O aninhamento de quantificadores (por exemplo, como o padrão de expressão regular <ph id="ph1">`(a*)*`</ph> faz) pode aumentar o número de comparações que o mecanismo de expressões regulares deve executar, como uma função exponencial do número de caracteres na cadeia de caracteres de entrada.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For more information about this behavior and its workarounds, see <bpt id="p1">[</bpt>Backtracking in regular expressions<ept id="p1">](backtracking.md)</ept>.</source>
          <target state="translated">Para obter mais informações sobre esse comportamento e suas soluções alternativas, consulte <bpt id="p1">[</bpt>Retrocesso em expressões regulares<ept id="p1">](backtracking.md)</ept>.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Regular expression quantifiers</source>
          <target state="translated">Quantificadores de expressões regulares</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The following sections list the quantifiers supported by .NET regular expressions.</source>
          <target state="translated">As seções a seguir listam os quantificadores com suporte nas expressões regulares no .NET.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">\*</ph>, +, ?, {, and } characters are encountered in a regular expression pattern, the regular expression engine interprets them as quantifiers or part of quantifier constructs unless they are included in a <bpt id="p1">[</bpt>character class<ept id="p1">](classes.md)</ept>.</source>
          <target state="translated">Se os caracteres <ph id="ph1">\*</ph>, +, ?, { e } forem encontrados em um padrão de expressão regular, o mecanismo de expressões regulares vai interpretá-los como quantificadores ou parte de constructos de quantificador, exceto se estiverem incluídos em uma <bpt id="p1">[</bpt>classe de caracteres<ept id="p1">](classes.md)</ept>.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>To interpret these as literal characters outside a character class, you must escape them by preceding them with a backslash.</source>
          <target state="translated">Para interpretá-los como caracteres literais fora de uma classe de caracteres, você precisa fazer o escape, antecedendo-os com uma barra invertida.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For example, the string <ph id="ph1">`\*`</ph> in a regular expression pattern is interpreted as a literal asterisk ("*") character.</source>
          <target state="translated">Por exemplo, a cadeia de caracteres <ph id="ph1">`\*`</ph> em um padrão de expressão regular é interpretada como um caractere asterisco (“*”) integral.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Match zero or more times: <ph id="ph1">\*</ph></source>
          <target state="translated">Corresponder a zero ou mais vezes: <ph id="ph1">\*</ph></target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">\*</ph> quantifier matches the preceding element zero or more times.</source>
          <target state="translated">O quantificador <ph id="ph1">\*</ph> corresponde ao elemento anterior zero ou mais vezes.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>It is equivalent to the <bpt id="p1">**</bpt>{0,}<ept id="p1">**</ept> quantifier.</source>
          <target state="translated">É equivalente ao quantificador <bpt id="p1">**</bpt>{0,}<ept id="p1">**</ept>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt><ph id="ph1">\*</ph><ept id="p1">**</ept> is a greedy quantifier whose lazy equivalent is <bpt id="p2">**</bpt><ph id="ph2">\*</ph>?<ept id="p2">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt><ph id="ph1">\*</ph><ept id="p1">**</ept> é um quantificador Greedy cujo equivalente lento é <bpt id="p2">**</bpt><ph id="ph2">\*</ph>?<ept id="p2">**</ept>.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The following example illustrates this regular expression.</source>
          <target state="translated">O exemplo a seguir ilustra essa expressão regular.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Of the nine digits in the input string, five match the pattern and four (<ph id="ph1">`95`</ph>, <ph id="ph2">`929`</ph>, <ph id="ph3">`9129`</ph>, and <ph id="ph4">`9919`</ph>) do not.</source>
          <target state="translated">Dentre os nove dígitos na cadeia de caracteres de entrada, cinco correspondem ao padrão e quatro (<ph id="ph1">`95`</ph>, <ph id="ph2">`929`</ph>, <ph id="ph3">`9129`</ph> e <ph id="ph4">`9919`</ph>) não.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The regular expression pattern is defined as shown in the following table.</source>
          <target state="translated">O padrão de expressão regular é definido como mostra a tabela a seguir.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">Padrão</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Descrição</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Start at a word boundary.</source>
          <target state="translated">Iniciar em um limite de palavra.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Match a "9" followed by zero or more "1" characters.</source>
          <target state="translated">Corresponder a “9” seguido por zero ou mais caracteres “1”.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Match zero or more "9" characters.</source>
          <target state="translated">Corresponder a zero ou mais caracteres “9”.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>End at a word boundary.</source>
          <target state="translated">Terminar em um limite de palavra.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Match one or more times: +</source>
          <target state="translated">Corresponder a um ou mais vezes: +</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt><ph id="ph1">+</ph><ept id="p1">**</ept> quantifier matches the preceding element one or more times.</source>
          <target state="translated">O quantificador <bpt id="p1">**</bpt><ph id="ph1">+</ph><ept id="p1">**</ept> corresponde ao elemento anterior uma ou mais vezes.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>It is equivalent to <bpt id="p1">**</bpt>{1,}<ept id="p1">**</ept>.</source>
          <target state="translated">É equivalente a <bpt id="p1">**</bpt>{1,}<ept id="p1">**</ept>.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt><ph id="ph1">+</ph><ept id="p1">**</ept> is a greedy quantifier whose lazy equivalent is <bpt id="p2">**</bpt>+?<ept id="p2">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt><ph id="ph1">+</ph><ept id="p1">**</ept> é um quantificador Greedy cujo equivalente lento é <bpt id="p2">**</bpt>+?<ept id="p2">**</ept>.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For example, the regular expression <ph id="ph1">`\ban+\w*?\b`</ph> tries to match entire words that begin with the letter <ph id="ph2">`a`</ph> followed by one or more instances of the letter <ph id="ph3">`n`</ph>.</source>
          <target state="translated">Por exemplo, a expressão regular <ph id="ph1">`\ban+\w*?\b`</ph> tenta corresponder a palavras inteiras que começam com a letra <ph id="ph2">`a`</ph> seguidas por uma ou mais instâncias da letra <ph id="ph3">`n`</ph>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The following example illustrates this regular expression.</source>
          <target state="translated">O exemplo a seguir ilustra essa expressão regular.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The regular expression matches the words <ph id="ph1">`an`</ph>, <ph id="ph2">`annual`</ph>, <ph id="ph3">`announcement`</ph>, and <ph id="ph4">`antique`</ph>, and correctly fails to match <ph id="ph5">`autumn`</ph> and <ph id="ph6">`all`</ph>.</source>
          <target state="translated">A expressão regular corresponde às palavras <ph id="ph1">`an`</ph>, <ph id="ph2">`annual`</ph>, <ph id="ph3">`announcement`</ph> e <ph id="ph4">`antique`</ph>, e não correspondem corretamente a <ph id="ph5">`autumn`</ph> e <ph id="ph6">`all`</ph>.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The regular expression pattern is defined as shown in the following table.</source>
          <target state="translated">O padrão de expressão regular é definido como mostra a tabela a seguir.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">Padrão</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Descrição</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Start at a word boundary.</source>
          <target state="translated">Iniciar em um limite de palavra.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Match an "a" followed by one or more "n" characters.</source>
          <target state="translated">Corresponder a um “a” seguido por um ou mais caracteres “n”.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Match a word character zero or more times, but as few times as possible.</source>
          <target state="translated">Corresponder a um caractere de palavra zero ou mais vezes, mas o menor número de vezes possível.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>End at a word boundary.</source>
          <target state="translated">Terminar em um limite de palavra.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Match zero or one time: ?</source>
          <target state="translated">Corresponder a zero ou uma vez: ?</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>?<ept id="p1">**</ept></source>
          <target state="translated">O quantificador <bpt id="p1">**</bpt>?<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>quantifier matches the preceding element zero or one time.</source>
          <target state="translated">corresponde ao elemento anterior zero ou uma vez.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>It is equivalent to <bpt id="p1">**</bpt>{0,1}<ept id="p1">**</ept>.</source>
          <target state="translated">É equivalente <bpt id="p1">**</bpt>{0,1}<ept id="p1">**</ept>.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>?<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>?<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>is a greedy quantifier whose lazy equivalent is <bpt id="p1">**</bpt>??<ept id="p1">**</ept>.</source>
          <target state="translated">é um quantificador Greedy cujo equivalente lento é <bpt id="p1">**</bpt>??<ept id="p1">**</ept>.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>For example, the regular expression <ph id="ph1">`\ban?\b`</ph> tries to match entire words that begin with the letter <ph id="ph2">`a`</ph> followed by zero or one instances of the letter <ph id="ph3">`n`</ph>.</source>
          <target state="translated">Por exemplo, a expressão regular <ph id="ph1">`\ban?\b`</ph> tenta corresponder a palavras inteiras que começam com a letra <ph id="ph2">`a`</ph> seguidas por zero ou uma instância da letra <ph id="ph3">`n`</ph>.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>In other words, it tries to match the words <ph id="ph1">`a`</ph> and <ph id="ph2">`an`</ph>.</source>
          <target state="translated">Em outras palavras, ele tenta corresponder às palavras <ph id="ph1">`a`</ph> e <ph id="ph2">`an`</ph>.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The following example illustrates this regular expression.</source>
          <target state="translated">O exemplo a seguir ilustra essa expressão regular.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The regular expression pattern is defined as shown in the following table.</source>
          <target state="translated">O padrão de expressão regular é definido como mostra a tabela a seguir.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">Padrão</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Descrição</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Start at a word boundary.</source>
          <target state="translated">Iniciar em um limite de palavra.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Match an "a" followed by zero or one "n" character.</source>
          <target state="translated">Corresponder a um “a” seguido por zero ou um caractere “n”.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>End at a word boundary.</source>
          <target state="translated">Terminar em um limite de palavra.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Match exactly n times: {n}</source>
          <target state="translated">Corresponder exatamente a n vezes: {n}</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>}<ept id="p3">**</ept> quantifier matches the preceding element exactly <bpt id="p4">*</bpt>n<ept id="p4">*</ept> times, where <bpt id="p5">*</bpt>n<ept id="p5">*</ept> is any integer.</source>
          <target state="translated">O quantificador <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>}<ept id="p3">**</ept> corresponde ao elemento anterior exatamente <bpt id="p4">*</bpt>n<ept id="p4">*</ept> vezes, em que <bpt id="p5">*</bpt>n<ept id="p5">*</ept> é qualquer inteiro.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>}<ept id="p3">**</ept> is a greedy quantifier whose lazy equivalent is <bpt id="p4">**</bpt>{<ept id="p4">**</ept><bpt id="p5">_</bpt>n<ept id="p5">_</ept><bpt id="p6">**</bpt>}?<ept id="p6">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>}<ept id="p3">**</ept> é um quantificador Greedy cujo equivalente lento é <bpt id="p4">**</bpt>{<ept id="p4">**</ept><bpt id="p5">_</bpt>n<ept id="p5">_</ept><bpt id="p6">**</bpt>}?<ept id="p6">**</ept>.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>For example, the regular expression <ph id="ph1">`\b\d+\,\d{3}\b`</ph> tries to match a word boundary followed by one or more decimal digits followed by three decimal digits followed by a word boundary.</source>
          <target state="translated">Por exemplo, a expressão regular <ph id="ph1">`\b\d+\,\d{3}\b`</ph> tenta corresponder a um limite de palavra seguido por um ou mais dígitos decimais seguidos por três dígitos decimais seguidos por um limite de palavra.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The following example illustrates this regular expression.</source>
          <target state="translated">O exemplo a seguir ilustra essa expressão regular.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The regular expression pattern is defined as shown in the following table.</source>
          <target state="translated">O padrão de expressão regular é definido como mostra a tabela a seguir.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">Padrão</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Descrição</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Start at a word boundary.</source>
          <target state="translated">Iniciar em um limite de palavra.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Match one or more decimal digits.</source>
          <target state="translated">Corresponde a um ou mais dígitos decimais.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Match a comma character.</source>
          <target state="translated">Corresponder a um caractere de vírgula.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Match three decimal digits.</source>
          <target state="translated">Corresponder a três dígitos decimais.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>End at a word boundary.</source>
          <target state="translated">Terminar em um limite de palavra.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Match at least n times: {n,}</source>
          <target state="translated">Corresponder a pelo menos n vezes: {n,}</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,}<ept id="p3">**</ept> quantifier matches the preceding element at least <bpt id="p4">*</bpt>n<ept id="p4">*</ept> times, where <bpt id="p5">*</bpt>n<ept id="p5">*</ept> is any integer.</source>
          <target state="translated">O quantificador <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,}<ept id="p3">**</ept> corresponde ao elemento anterior pelo menos <bpt id="p4">*</bpt>n<ept id="p4">*</ept> vezes, em que <bpt id="p5">*</bpt>n<ept id="p5">*</ept> é qualquer inteiro.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,}<ept id="p3">**</ept> is a greedy quantifier whose lazy equivalent is <bpt id="p4">**</bpt>{<ept id="p4">**</ept><bpt id="p5">_</bpt>n<ept id="p5">_</ept><bpt id="p6">**</bpt>}?<ept id="p6">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,}<ept id="p3">**</ept> é um quantificador Greedy cujo equivalente lento é <bpt id="p4">**</bpt>{<ept id="p4">**</ept><bpt id="p5">_</bpt>n<ept id="p5">_</ept><bpt id="p6">**</bpt>}?<ept id="p6">**</ept>.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>For example, the regular expression <ph id="ph1">`\b\d{2,}\b\D+`</ph> tries to match a word boundary followed by at least two digits followed by a word boundary and a non-digit character.</source>
          <target state="translated">Por exemplo, a expressão regular <ph id="ph1">`\b\d{2,}\b\D+`</ph> tenta corresponder a um limite de palavra seguido por pelo menos dois dígitos seguidos por um limite de palavra e um caractere não dígito.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The following example illustrates this regular expression.</source>
          <target state="translated">O exemplo a seguir ilustra essa expressão regular.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The regular expression fails to match the phrase "7 days" because it contains just one decimal digit, but it successfully matches the phrases "10 weeks and 300 years".</source>
          <target state="translated">A expressão regular não corresponde à frase “7 dias” porque contém apenas um dígito decimal, mas corresponde com êxito às frases “10 semanas e 300 anos”.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The regular expression pattern is defined as shown in the following table.</source>
          <target state="translated">O padrão de expressão regular é definido como mostra a tabela a seguir.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">Padrão</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Descrição</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Start at a word boundary.</source>
          <target state="translated">Iniciar em um limite de palavra.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Match at least two decimal digits.</source>
          <target state="translated">Corresponder a pelo menos dois dígitos decimais.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Match a word boundary.</source>
          <target state="translated">Corresponder a um limite de palavra.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Match at least one non-decimal digit.</source>
          <target state="translated">Corresponder a pelo menos uma casa não decimal.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Match between n and m times: {n,m}</source>
          <target state="translated">Corresponder entre n e m vezes: {n,m}</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,<ept id="p3">**</ept><bpt id="p4">_</bpt>m<ept id="p4">_</ept><bpt id="p5">**</bpt>}<ept id="p5">**</ept> quantifier matches the preceding element at least <bpt id="p6">*</bpt>n<ept id="p6">*</ept> times, but no more than <bpt id="p7">*</bpt>m<ept id="p7">*</ept> times, where <bpt id="p8">*</bpt>n<ept id="p8">*</ept> and <bpt id="p9">*</bpt>m<ept id="p9">*</ept> are integers.</source>
          <target state="translated">O quantificador <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,<ept id="p3">**</ept><bpt id="p4">_</bpt>m<ept id="p4">_</ept><bpt id="p5">**</bpt>}<ept id="p5">**</ept> corresponde ao elemento anterior pelo menos <bpt id="p6">*</bpt>n<ept id="p6">*</ept> vezes, mas não mais de <bpt id="p7">*</bpt>m<ept id="p7">*</ept> vezes, em que <bpt id="p8">*</bpt>n<ept id="p8">*</ept> e <bpt id="p9">*</bpt>m<ept id="p9">*</ept> são inteiros.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,<ept id="p3">**</ept><bpt id="p4">_</bpt>m<ept id="p4">_</ept><bpt id="p5">**</bpt>}<ept id="p5">**</ept> is a greedy quantifier whose lazy equivalent is <bpt id="p6">**</bpt>{<ept id="p6">**</ept><bpt id="p7">_</bpt>n<ept id="p7">_</ept><bpt id="p8">**</bpt>,<ept id="p8">**</ept><bpt id="p9">_</bpt>m<ept id="p9">_</ept><bpt id="p10">**</bpt>}?<ept id="p10">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,<ept id="p3">**</ept><bpt id="p4">_</bpt>m<ept id="p4">_</ept><bpt id="p5">**</bpt>}<ept id="p5">**</ept> é um quantificador Greedy cujo equivalente lento é <bpt id="p6">**</bpt>{<ept id="p6">**</ept><bpt id="p7">_</bpt>n<ept id="p7">_</ept><bpt id="p8">**</bpt>,<ept id="p8">**</ept><bpt id="p9">_</bpt>m<ept id="p9">_</ept><bpt id="p10">**</bpt>}?<ept id="p10">**</ept>.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>In the following example, the regular expression <ph id="ph1">`(00\s){2,4}`</ph> tries to match between two and four occurrences of two zero digits followed by a space.</source>
          <target state="translated">No exemplo a seguir, a expressão regular <ph id="ph1">`(00\s){2,4}`</ph> tenta corresponder a entre duas e quatro ocorrências de dois dígitos zero seguidos por um espaço.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Note that the final portion of the input string includes this pattern five times rather than the maximum of four.</source>
          <target state="translated">Observe que a parte final da cadeia de caracteres de entrada inclui esse padrão de cinco vezes em vez de no máximo quatro.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>However, only the initial portion of this substring (up to the space and the fifth pair of zeros) matches the regular expression pattern.</source>
          <target state="translated">No entanto, apenas a parte inicial dessa subcadeia de caracteres (até o espaço e o quinto par de zeros) corresponde ao padrão de expressão regular.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Match zero or more times (lazy match): <ph id="ph1">\*</ph>?</source>
          <target state="translated">Corresponder a zero ou mais vezes (correspondência lenta): <ph id="ph1">\*</ph>?</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt><ph id="ph1">\*</ph>?<ept id="p1">**</ept></source>
          <target state="translated">O quantificador <bpt id="p1">**</bpt><ph id="ph1">\*</ph>?<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>quantifier matches the preceding element zero or more times, but as few times as possible.</source>
          <target state="translated">corresponde ao elemento anterior zero ou mais vezes, mas o menor número de vezes possível.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>It is the lazy counterpart of the greedy quantifier <bpt id="p1">**</bpt><ph id="ph1">\*</ph><ept id="p1">**</ept>.</source>
          <target state="translated">É a contraparte lenta do quantificador Greedy <bpt id="p1">**</bpt><ph id="ph1">\*</ph><ept id="p1">**</ept>.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>In the following example, the regular expression <ph id="ph1">`\b\w*?oo\w*?\b`</ph> matches all words that contain the string <ph id="ph2">`oo`</ph>.</source>
          <target state="translated">No exemplo a seguir, a expressão regular <ph id="ph1">`\b\w*?oo\w*?\b`</ph> corresponde a todas as palavras que contêm a cadeia de caracteres <ph id="ph2">`oo`</ph>.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The regular expression pattern is defined as shown in the following table.</source>
          <target state="translated">O padrão de expressão regular é definido como mostra a tabela a seguir.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">Padrão</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Descrição</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Start at a word boundary.</source>
          <target state="translated">Iniciar em um limite de palavra.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Match zero or more word characters, but as few characters as possible.</source>
          <target state="translated">Corresponder a zero ou mais caracteres de palavra, mas o menor número de caracteres possível.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Match the string "oo".</source>
          <target state="translated">Corresponder à cadeia de caracteres “oo”.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Match zero or more word characters, but as few characters as possible.</source>
          <target state="translated">Corresponder a zero ou mais caracteres de palavra, mas o menor número de caracteres possível.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>End on a word boundary.</source>
          <target state="translated">Terminar em um limite de palavra.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Match one or more times (lazy match): +?</source>
          <target state="translated">Corresponder a uma ou mais vezes (correspondência lenta): +?</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>+?<ept id="p1">**</ept></source>
          <target state="translated">O quantificador <bpt id="p1">**</bpt>+?<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>quantifier matches the preceding element one or more times, but as few times as possible.</source>
          <target state="translated">corresponde ao elemento anterior uma ou mais vezes, mas o menor número de vezes possível.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>It is the lazy counterpart of the greedy quantifier <bpt id="p1">**</bpt><ph id="ph1">+</ph><ept id="p1">**</ept>.</source>
          <target state="translated">É a contraparte lenta do quantificador Greedy <bpt id="p1">**</bpt><ph id="ph1">+</ph><ept id="p1">**</ept>.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>For example, the regular expression <ph id="ph1">`\b\w+?\b`</ph> matches one or more characters separated by word boundaries.</source>
          <target state="translated">Por exemplo, a expressão regular <ph id="ph1">`\b\w+?\b`</ph> corresponde a um ou mais caracteres separados por limites de palavra.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The following example illustrates this regular expression.</source>
          <target state="translated">O exemplo a seguir ilustra essa expressão regular.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Match zero or one time (lazy match): ??</source>
          <target state="translated">Corresponder a zero ou uma vez (correspondência lenta): ??</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>??<ept id="p1">**</ept></source>
          <target state="translated">O quantificador <bpt id="p1">**</bpt>??<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>quantifier matches the preceding element zero or one time, but as few times as possible.</source>
          <target state="translated">corresponde ao elemento anterior zero ou uma vez, mas o menor número de vezes possível.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>It is the lazy counterpart of the greedy quantifier <bpt id="p1">**</bpt>?<ept id="p1">**</ept>.</source>
          <target state="translated">É a contraparte lenta do quantificador Greedy <bpt id="p1">**</bpt>?<ept id="p1">**</ept>.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>For example, the regular expression <ph id="ph1">`^\s*(System.)??Console.Write(Line)??\(??`</ph> attempts to match the strings "Console.Write" or "Console.WriteLine".</source>
          <target state="translated">Por exemplo, a expressão regular <ph id="ph1">`^\s*(System.)??Console.Write(Line)??\(??`</ph> tenta corresponder às cadeias de caracteres “Console.Write” ou “Console.WriteLine”.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The string can also include "System."</source>
          <target state="translated">A cadeia de caracteres também pode incluir "System."</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>before "Console", and it can be followed by an opening parenthesis.</source>
          <target state="translated">antes de “Console” e pode ser seguida por um parêntese de abertura.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>The string must be at the beginning of a line, although it can be preceded by white space.</source>
          <target state="translated">A cadeia de caracteres deve estar no início de uma linha, embora possa ser antecedida por espaço em branco.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The following example illustrates this regular expression.</source>
          <target state="translated">O exemplo a seguir ilustra essa expressão regular.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>The regular expression pattern is defined as shown in the following table.</source>
          <target state="translated">O padrão de expressão regular é definido como mostra a tabela a seguir.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">Padrão</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Descrição</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Match the start of the input stream.</source>
          <target state="translated">Corresponder ao início do fluxo de entrada.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Match zero or more white-space characters.</source>
          <target state="translated">Corresponder a zero ou mais caracteres de espaço em branco.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Match zero or one occurrence of the string "System.".</source>
          <target state="translated">Corresponde a zero ou uma ocorrência da cadeia de caracteres “System.”.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Match the string "Console.Write".</source>
          <target state="translated">Corresponder à cadeia de caracteres “Console.Write”.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Match zero or one occurrence of the string "Line".</source>
          <target state="translated">Corresponde a zero ou uma ocorrência da cadeia de caracteres “Line”.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Match zero or one occurrence of the opening parenthesis.</source>
          <target state="translated">Corresponder a zero ou uma ocorrência do parêntese de abertura.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Match exactly n times (lazy match): {n}?</source>
          <target state="translated">Corresponder exatamente a n vezes (correspondência lenta): {n}?</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>}?<ept id="p3">**</ept></source>
          <target state="translated">O quantificador <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>}?<ept id="p3">**</ept></target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>quantifier matches the preceding element exactly <bpt id="p1">*</bpt>n<ept id="p1">*</ept> times, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is any integer.</source>
          <target state="translated">corresponde ao elemento anterior exatamente <bpt id="p1">*</bpt>n<ept id="p1">*</ept> vezes, em que <bpt id="p2">*</bpt>n<ept id="p2">*</ept> é qualquer inteiro.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>It is the lazy counterpart of the greedy quantifier <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>}+<ept id="p3">**</ept>.</source>
          <target state="translated">É a contraparte lenta do quantificador Greedy <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>}+<ept id="p3">**</ept>.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>In the following example, the regular expression <ph id="ph1">`\b(\w{3,}?\.){2}?\w{3,}?\b`</ph> is used to identify a Web site address.</source>
          <target state="translated">No exemplo a seguir, a expressão regular <ph id="ph1">`\b(\w{3,}?\.){2}?\w{3,}?\b`</ph> é usada para identificar um endereço de site.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Note that it matches "www.microsoft.com" and "msdn.microsoft.com", but does not match "mywebsite" or "mycompany.com".</source>
          <target state="translated">Observe que corresponde a “www.microsoft.com” e “msdn.microsoft.com”, mas não corresponde a “mywebsite” ou “mycompany.com”.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>The regular expression pattern is defined as shown in the following table.</source>
          <target state="translated">O padrão de expressão regular é definido como mostra a tabela a seguir.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">Padrão</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Descrição</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Start at a word boundary.</source>
          <target state="translated">Iniciar em um limite de palavra.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Match at least 3 word characters, but as few characters as possible, followed by a dot or period character.</source>
          <target state="translated">Corresponder a pelo menos três caracteres de palavra, mas o menor número de caracteres possível, seguido por um caractere de ponto.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>This is the first capturing group.</source>
          <target state="translated">Este é o primeiro grupo de captura.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Match the pattern in the first group two times, but as few times as possible.</source>
          <target state="translated">Corresponder ao padrão no primeiro grupo duas vezes, mas o menor número de vezes possível.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>End the match on a word boundary.</source>
          <target state="translated">Termina a correspondência em um limite de palavra.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Match at least n times (lazy match): {n,}?</source>
          <target state="translated">Corresponder a pelo menos n vezes (correspondência lenta): {n,}?</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,}?<ept id="p3">**</ept></source>
          <target state="translated">O quantificador <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,}?<ept id="p3">**</ept></target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>quantifier matches the preceding element at least <bpt id="p1">*</bpt>n<ept id="p1">*</ept> times, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is any integer, but as few times as possible.</source>
          <target state="translated">corresponde ao elemento anterior pelo menos <bpt id="p1">*</bpt>n<ept id="p1">*</ept> vezes, em que <bpt id="p2">*</bpt>n<ept id="p2">*</ept> é qualquer número inteiro, mas o menor número de vezes possível.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>It is the lazy counterpart of the greedy quantifier <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,}<ept id="p3">**</ept>.</source>
          <target state="translated">É a contraparte lenta do quantificador Greedy <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,}<ept id="p3">**</ept>.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>See the example for the <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>}?<ept id="p3">**</ept></source>
          <target state="translated">Consulte o exemplo para o quantificador <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>}?<ept id="p3">**</ept></target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>quantifier in the previous section for an illustration.</source>
          <target state="translated">na seção anterior, para uma ilustração.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>The regular expression in that example uses the <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,}<ept id="p3">**</ept> quantifier to match a string that has at least three characters followed by a period.</source>
          <target state="translated">A expressão regular nesse exemplo usa o quantificador <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,}<ept id="p3">**</ept> para corresponder a uma cadeia de caracteres que tem pelo menos três caracteres seguidos por um ponto.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Match between n and m times (lazy match): {n,m}?</source>
          <target state="translated">Corresponder entre n e m vezes (correspondência lenta): {n,m}?</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,<ept id="p3">**</ept><bpt id="p4">_</bpt>m<ept id="p4">_</ept><bpt id="p5">**</bpt>}?<ept id="p5">**</ept></source>
          <target state="translated">O quantificador <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,<ept id="p3">**</ept><bpt id="p4">_</bpt>m<ept id="p4">_</ept><bpt id="p5">**</bpt>}?<ept id="p5">**</ept></target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>quantifier matches the preceding element between <bpt id="p1">*</bpt>n<ept id="p1">*</ept> and <bpt id="p2">*</bpt>m<ept id="p2">*</ept> times, where <bpt id="p3">*</bpt>n<ept id="p3">*</ept> and <bpt id="p4">*</bpt>m<ept id="p4">*</ept> are integers, but as few times as possible.</source>
          <target state="translated">corresponde ao elemento anterior entre <bpt id="p1">*</bpt>n<ept id="p1">*</ept> e <bpt id="p2">*</bpt>m<ept id="p2">*</ept> vezes, em que <bpt id="p3">*</bpt>n<ept id="p3">*</ept> e <bpt id="p4">*</bpt>m<ept id="p4">*</ept> são inteiros, mas o menor número de vezes possível.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>It is the lazy counterpart of the greedy quantifier <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,<ept id="p3">**</ept><bpt id="p4">_</bpt>m<ept id="p4">_</ept><bpt id="p5">**</bpt>}<ept id="p5">**</ept>.</source>
          <target state="translated">É a contraparte lenta do quantificador Greedy <bpt id="p1">**</bpt>{<ept id="p1">**</ept><bpt id="p2">_</bpt>n<ept id="p2">_</ept><bpt id="p3">**</bpt>,<ept id="p3">**</ept><bpt id="p4">_</bpt>m<ept id="p4">_</ept><bpt id="p5">**</bpt>}<ept id="p5">**</ept>.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>In the following example, the regular expression <ph id="ph1">`\b[A-Z](\w*\s+){1,10}?[.!?]`</ph> matches sentences that contain between one and ten words.</source>
          <target state="translated">No exemplo a seguir, a expressão regular <ph id="ph1">`\b[A-Z](\w*\s+){1,10}?[.!?]`</ph> corresponde a frases que contêm entre uma e dez palavras.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>It matches all the sentences in the input string except for one sentence that contains 18 words.</source>
          <target state="translated">Corresponde a todas as frases na cadeia de caracteres de entrada, exceto por uma frase que contém 18 palavras.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>The regular expression pattern is defined as shown in the following table.</source>
          <target state="translated">O padrão de expressão regular é definido como mostra a tabela a seguir.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">Padrão</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Descrição</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Start at a word boundary.</source>
          <target state="translated">Iniciar em um limite de palavra.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Match an uppercase character from A to Z.</source>
          <target state="translated">Corresponder a um caractere maiúscula de A a Z.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Match zero or more word characters, followed by one or more white-space characters.</source>
          <target state="translated">Corresponder a zero ou mais caracteres de palavra, seguidos por um ou mais caracteres de espaço em branco.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>This is the first capture group.</source>
          <target state="translated">Este é o primeiro grupo de captura.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Match the previous pattern between 1 and 10 times, but as few times as possible.</source>
          <target state="translated">Corresponder ao padrão anterior entre 1 e 10 vezes, mas o menor número de vezes possível.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Match any one of the punctuation characters ".", "!", or "?".</source>
          <target state="translated">Corresponder a qualquer um dos caracteres de pontuação “.”, “!” ou “?”.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Greedy and lazy quantifiers</source>
          <target state="translated">Quantificadores Greedy e lentos</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>A number of the quantifiers have two versions:</source>
          <target state="translated">Alguns quantificadores têm duas versões:</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>A greedy version.</source>
          <target state="translated">Uma versão Greedy.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>A greedy quantifier tries to match an element as many times as possible.</source>
          <target state="translated">Um quantificador Greedy tenta corresponder a um elemento tantas vezes quanto possível.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>•A non-greedy (or lazy) version.</source>
          <target state="translated">•Uma versão não Greedy (ou lenta).</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>A non-greedy quantifier tries to match an element as few times as possible.</source>
          <target state="translated">Um quantificador não Greedy tenta corresponder a um elemento o menor número de vezes possível.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>You can turn a greedy quantifier into a lazy quantifier by simply adding a <bpt id="p1">**</bpt>?<ept id="p1">**</ept>.</source>
          <target state="translated">Você pode transformar um quantificador Greedy em um quantificador lento simplesmente adicionando um <bpt id="p1">**</bpt>?<ept id="p1">**</ept>.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Consider a simple regular expression that is intended to extract the last four digits from a string of numbers such as a credit card number.</source>
          <target state="translated">Considere uma expressão regular simples que se destina a extrair os últimos quatro dígitos de uma cadeia de caracteres de números, como um número de cartão de crédito.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>The version of the regular expression that uses the <bpt id="p1">**</bpt><ph id="ph1">\*</ph><ept id="p1">**</ept> greedy quantifier is <ph id="ph2">`\b.*([0-9]{4})\b`</ph>.</source>
          <target state="translated">A versão da expressão regular que usa o quantificador Greedy <bpt id="p1">**</bpt><ph id="ph1">\*</ph><ept id="p1">**</ept> é <ph id="ph2">`\b.*([0-9]{4})\b`</ph>.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>However, if a string contains two numbers, this regular expression matches the last four digits of the second number only, as the following example shows.</source>
          <target state="translated">No entanto, se uma cadeia de caracteres contiver dois números, essa expressão regular corresponde aos últimos quatro dígitos do segundo número, como mostra o exemplo a seguir.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>The regular expression fails to match the first number because the <bpt id="p1">**</bpt><ph id="ph1">\*</ph><ept id="p1">**</ept> quantifier tries to match the previous element as many times as possible in the entire string, and so it finds its match at the end of the string.</source>
          <target state="translated">A expressão regular não corresponde ao primeiro número porque o quantificador <bpt id="p1">**</bpt><ph id="ph1">\*</ph><ept id="p1">**</ept> tenta corresponder ao elemento anterior tantas vezes quanto possível em toda a cadeia de caracteres e encontra sua correspondência no final da cadeia de caracteres.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>This is not the desired behavior.</source>
          <target state="translated">Esse não é o comportamento desejado.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Instead, you can use the <bpt id="p1">**</bpt><ph id="ph1">\*</ph>?<ept id="p1">**</ept></source>
          <target state="translated">Em vez disso, você pode usar o quantificador lento <bpt id="p1">**</bpt><ph id="ph1">\*</ph>?<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>lazy quantifier to extract digits from both numbers, as the following example shows.</source>
          <target state="translated">para extrair dígitos de ambos os números, como mostra o exemplo a seguir.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>In most cases, regular expressions with greedy and lazy quantifiers return the same matches.</source>
          <target state="translated">Na maioria dos casos, expressões regulares com quantificadores Greedy e lentos retornam as mesmas correspondências.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>They most commonly return different results when they are used with the wildcard (<bpt id="p1">**</bpt>.<ept id="p1">**</ept>) metacharacter, which matches any character.</source>
          <target state="translated">Geralmente retornam resultados diferentes quando são usadas com o metacaractere curinga (<bpt id="p1">**</bpt>.<ept id="p1">**</ept>), que corresponde a qualquer caractere.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Quantifiers and empty matches</source>
          <target state="translated">Quantificadores e correspondências vazias</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>The quantifiers <bpt id="p1">**</bpt><ph id="ph1">\*</ph><ept id="p1">**</ept>, <bpt id="p2">**</bpt><ph id="ph2">+</ph><ept id="p2">**</ept>, and <bpt id="p3">**</bpt>{<ept id="p3">**</ept><bpt id="p4">_</bpt>n<ept id="p4">_</ept><bpt id="p5">**</bpt>,<ept id="p5">**</ept><bpt id="p6">_</bpt>m<ept id="p6">_</ept><bpt id="p7">**</bpt>}<ept id="p7">**</ept> and their lazy counterparts never repeat after an empty match when the minimum number of captures has been found.</source>
          <target state="translated">Os quantificadores <bpt id="p1">**</bpt><ph id="ph1">\*</ph><ept id="p1">**</ept>, <bpt id="p2">**</bpt><ph id="ph2">+</ph><ept id="p2">**</ept> e <bpt id="p3">**</bpt>{<ept id="p3">**</ept><bpt id="p4">_</bpt>n<ept id="p4">_</ept><bpt id="p5">**</bpt>,<ept id="p5">**</ept><bpt id="p6">_</bpt>m<ept id="p6">_</ept><bpt id="p7">**</bpt>}<ept id="p7">**</ept> e suas contrapartes lentas nunca se repetem depois de uma correspondência vazia quando o número mínimo de capturas foi encontrado.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>This rule prevents quantifiers from entering infinite loops on empty subexpression matches when the maximum number of possible group captures is infinite or near infinite.</source>
          <target state="translated">Essa regra impede que quantificadores entrem em loops infinitos em correspondências vazias de subexpressão quando o número máximo de capturas de grupo possíveis é infinito ou quase infinito.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>For example, the following code shows the result of a call to the <bpt id="p1">[</bpt>Regex.Match<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Match(System.String))</ept> method with the regular expression pattern <ph id="ph1">`(a?)*,`</ph> which matches zero or one "a" character zero or more times.</source>
          <target state="translated">Por exemplo, o código a seguir mostra o resultado de uma chamada para o método <bpt id="p1">[</bpt>Regex.Match<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Match(System.String))</ept> com o padrão de expressão regular <ph id="ph1">`(a?)*,`</ph> que corresponde a zero ou a um caractere “a” zero ou mais vezes.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Note that the single capturing group captures each "a" as well as <bpt id="p1">[</bpt>String.Empty<ept id="p1">](xref:System.String.Empty)</ept>, but that there is no second empty match, because the first empty match causes the quantifier to stop repeating.</source>
          <target state="translated">Observe que o grupo de captura único captura cada “a” bem como <bpt id="p1">[</bpt>String.Empty<ept id="p1">](xref:System.String.Empty)</ept>, mas que não há uma segunda correspondência vazia, porque a primeira correspondência vazia faz com que o quantificador pare de se repetir.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>To see the practical difference between a capturing group that defines a minimum and a maximum number of captures and one that defines a fixed number of captures, consider the regular expression patterns <ph id="ph1">`(a\1|(?(1)\1)){0,2}`</ph> and <ph id="ph2">`(a\1|(?(1)\1)){2}`</ph>.</source>
          <target state="translated">Para ver a diferença prática entre um grupo de captura que define um número mínimo e máximo de captura e um que define um número fixo de capturas, considere os padrões de expressão regular <ph id="ph1">`(a\1|(?(1)\1)){0,2}`</ph> e <ph id="ph2">`(a\1|(?(1)\1)){2}`</ph>.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Both regular expressions consist of a single capturing group, which is defined as shown in the following table.</source>
          <target state="translated">Ambas as expressões regulares consistem em um único grupo de captura, que é definido como mostrado na tabela a seguir.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">Padrão</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Descrição</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Either match "a" along with the value of the first captured group …</source>
          <target state="translated">Faça qualquer correspondência a “a” juntamente com o valor do primeiro grupo capturado…</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>…</source>
          <target state="translated">…</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>or test whether the first captured group has been defined.</source>
          <target state="translated">ou teste se o primeiro grupo capturado foi definido.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>(Note that the <bpt id="p1">**</bpt>(?(1)<ept id="p1">**</ept> construct does not define a capturing group.)</source>
          <target state="translated">(Observe que o constructo <bpt id="p1">**</bpt>(?(1)<ept id="p1">**</ept> não define um grupo de captura.)</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>If the first captured group exists, match its value.</source>
          <target state="translated">Se o primeiro grupo capturado existir, faça uma correspondência ao valor.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>If the group does not exist, the group will match <bpt id="p1">[</bpt>String.Empty<ept id="p1">](xref:System.String.Empty)</ept>.</source>
          <target state="translated">Se o grupo não existir, será correspondente a <bpt id="p1">[</bpt>String.Empty<ept id="p1">](xref:System.String.Empty)</ept>.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>The first regular expression tries to match this pattern between zero and two times; the second, exactly two times.</source>
          <target state="translated">A primeira expressão regular tenta corresponder a esse padrão entre zero e duas vezes; a segunda, exatamente duas vezes.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Because the first pattern reaches its minimum number of captures with its first capture of <bpt id="p1">[</bpt>String.Empty<ept id="p1">](xref:System.String.Empty)</ept>, it never repeats to try to match <ph id="ph1">`a\1;`</ph> the <ph id="ph2">`{0,2}`</ph> quantifier allows only empty matches in the last iteration.</source>
          <target state="translated">Como o primeiro padrão atinge o número mínimo de capturas com a primeira captura de <bpt id="p1">[</bpt>String.Empty<ept id="p1">](xref:System.String.Empty)</ept>, ele nunca se repete para tentar corresponder a <ph id="ph1">`a\1;`</ph>; o quantificador <ph id="ph2">`{0,2}`</ph> permite apenas correspondências vazias na última iteração.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>In contrast, the second regular expression does match "a" because it evaluates <ph id="ph1">`a\1`</ph> a second time; the minimum number of iterations, 2, forces the engine to repeat after an empty match.</source>
          <target state="translated">Por outro lado, a segunda expressão regular corresponde a “a” porque avalia <ph id="ph1">`a\1`</ph> uma segunda vez; o número mínimo de iterações, 2, força o mecanismo a se repetir após uma correspondência vazia.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>See also</source>
          <target state="translated">Consulte também</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Regular expression language - quick reference<ept id="p1">](quick-ref.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Linguagem de expressão regular – referência rápida<ept id="p1">](quick-ref.md)</ept></target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Backtracking in regular expressions<ept id="p1">](backtracking.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Retrocesso em expressões regulares<ept id="p1">](backtracking.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>