<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">efbd8c19947c45b3ba15ce7b574000d56526ef45</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\expression-trees\debugging-expression-trees-in-visual-studio.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c83054e527e22150e4504a9ed18aabdfe93da114</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6d567cb8bf323e6aaa21b7190f8a72e37e5fd812</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Handback file name: lo-mt_debugging-expression-trees-in-visual-studio.5a3eef7b4f00502731928dabae6e64b641edf7f1.pt-br is different with handoff file name: debugging-expression-trees-in-visual-studio.5a3eef7b4f00502731928dabae6e64b641edf7f1.pt-br.</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Debugging Expression Trees in Visual Studio (Visual Basic) | Microsoft Docs</source>
          <target state="translated">Depurando árvores de expressão no Visual Studio (Visual Basic) | Documentos do Microsoft</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Debugging Expression Trees in Visual Studio (Visual Basic)</source>
          <target state="translated">Depurando árvores de expressão no Visual Studio (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You can analyze the structure and content of expression trees when you debug your applications.</source>
          <target state="translated">Quando você depurar seus aplicativos, você pode analisar a estrutura e o conteúdo das árvores de expressão.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>To get a quick overview of the expression tree structure, you can use the <ph id="ph1">`DebugView`</ph> property, which is available only in debug mode.</source>
          <target state="translated">Para obter uma visão geral da estrutura de árvore de expressão, você pode usar o <ph id="ph1">`DebugView`</ph> propriedade, que está disponível apenas no modo de depuração.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For more information about debugging, see <bpt id="p1">[</bpt>Debugging in Visual Studio<ept id="p1">](https://docs.microsoft.com/visualstudio/debugger/debugging-in-visual-studio)</ept>.</source>
          <target state="translated">Para obter mais informações sobre depuração, consulte <bpt id="p1">[</bpt>depuração no Visual Studio<ept id="p1">](https://docs.microsoft.com/visualstudio/debugger/debugging-in-visual-studio)</ept>.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>To better represent the content of expression trees, the <ph id="ph1">`DebugView`</ph> property uses Visual Studio visualizers.</source>
          <target state="translated">Para melhor representar o conteúdo das árvores de expressão, o <ph id="ph1">`DebugView`</ph> propriedade usa os visualizadores do Visual Studio.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Create Custom Visualizers<ept id="p1">](https://docs.microsoft.com/visualstudio/debugger/create-custom-visualizers-of-data)</ept>.</source>
          <target state="translated">Para obter mais informações, consulte <bpt id="p1">[</bpt>criar os visualizadores personalizados<ept id="p1">](https://docs.microsoft.com/visualstudio/debugger/create-custom-visualizers-of-data)</ept>.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>To open a visualizer for an expression tree</source>
          <target state="translated">Para abrir um visualizador para uma árvore de expressão</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Click the magnifying glass icon that appears next to the <ph id="ph1">`DebugView`</ph> property of an expression tree in <bpt id="p1">**</bpt>DataTips<ept id="p1">**</ept>, a <bpt id="p2">**</bpt>Watch<ept id="p2">**</ept> window, the <bpt id="p3">**</bpt>Autos<ept id="p3">**</ept> window, or the <bpt id="p4">**</bpt>Locals<ept id="p4">**</ept> window.</source>
          <target state="translated">Clique no ícone de lupa que aparece ao lado de <ph id="ph1">`DebugView`</ph> propriedade de uma árvore de expressão em <bpt id="p1">**</bpt>DataTips<ept id="p1">**</ept>, um <bpt id="p2">**</bpt>inspeção<ept id="p2">**</ept> janela, o <bpt id="p3">**</bpt>Autos<ept id="p3">**</ept> janela, ou o <bpt id="p4">**</bpt>locais<ept id="p4">**</ept> janela.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A list of visualizers is displayed.</source>
          <target state="translated">Uma lista de visualizadores é exibida.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Click the visualizer you want to use.</source>
          <target state="translated">Clique no visualizador que você deseja usar.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Each expression type is displayed in the visualizer as described in the following sections.</source>
          <target state="translated">Cada tipo de expressão é exibido no visualizador, conforme descrito nas seções a seguir.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>ParameterExpressions</source>
          <target state="translated">ParameterExpressions</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Linq.Expressions.ParameterExpression&gt; variable names are displayed with a "$" symbol at the beginning.</source>
          <target state="translated">&lt;xref:System.Linq.Expressions.ParameterExpression&gt;nomes de variáveis são exibidos com um símbolo "$" no início.&lt;/xref:System.Linq.Expressions.ParameterExpression&gt;</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If a parameter does not have a name, it is assigned an automatically generated name, such as <ph id="ph1">`$var1`</ph> or <ph id="ph2">`$var2`</ph>.</source>
          <target state="translated">Se um parâmetro não tem um nome, ele é atribuído um nome gerado automaticamente, como <ph id="ph1">`$var1`</ph> ou <ph id="ph2">`$var2`</ph>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">Exemplos</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DebugView`</ph> property</source>
          <target state="translated">Propriedade <ph id="ph1">`DebugView`</ph></target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DebugView`</ph> property</source>
          <target state="translated">Propriedade <ph id="ph1">`DebugView`</ph></target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>ConstantExpressions</source>
          <target state="translated">ConstantExpressions</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For &lt;xref:System.Linq.Expressions.ConstantExpression&gt; objects that represent integer values, strings, and <ph id="ph1">`null`</ph>, the value of the constant is displayed.</source>
          <target state="translated">Para &lt;xref:System.Linq.Expressions.ConstantExpression&gt;objetos que representam valores inteiros, cadeias de caracteres, e <ph id="ph1">`null`</ph>, o valor da constante é exibido.&lt;/xref:System.Linq.Expressions.ConstantExpression&gt;</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">Exemplos</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DebugView`</ph> property</source>
          <target state="translated">Propriedade <ph id="ph1">`DebugView`</ph></target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>10</source>
          <target state="translated">10</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DebugView`</ph> property</source>
          <target state="translated">Propriedade <ph id="ph1">`DebugView`</ph></target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>10D</source>
          <target state="translated">10D</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>BlockExpression</source>
          <target state="translated">BlockExpression</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If the type of a &lt;xref:System.Linq.Expressions.BlockExpression&gt; object differs from the type of the last expression in the block, the type is displayed in the <ph id="ph1">`DebugInfo`</ph> property in angle brackets (<ph id="ph2">\&lt;</ph> and &gt;).</source>
          <target state="translated">Se o tipo de uma &lt;xref:System.Linq.Expressions.BlockExpression&gt;objeto difere do tipo da última expressão no bloco, o tipo é exibido no <ph id="ph1">`DebugInfo`</ph> propriedade entre colchetes angulares (<ph id="ph2">\&lt;</ph> e &gt;).&lt;/xref:System.Linq.Expressions.BlockExpression&gt;</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Otherwise, the type of the &lt;xref:System.Linq.Expressions.BlockExpression&gt; object is not displayed.</source>
          <target state="translated">Caso contrário, o tipo do &lt;xref:System.Linq.Expressions.BlockExpression&gt;objeto não é exibido.&lt;/xref:System.Linq.Expressions.BlockExpression&gt;</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">Exemplos</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DebugView`</ph> property</source>
          <target state="translated">Propriedade <ph id="ph1">`DebugView`</ph></target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DebugView`</ph> property</source>
          <target state="translated">Propriedade <ph id="ph1">`DebugView`</ph></target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>LambdaExpression</source>
          <target state="translated">LambdaExpression</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Linq.Expressions.LambdaExpression&gt; objects are displayed together with their delegate types.</source>
          <target state="translated">&lt;xref:System.Linq.Expressions.LambdaExpression&gt;objetos são exibidos junto com os tipos de delegado.&lt;/xref:System.Linq.Expressions.LambdaExpression&gt;</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If a lambda expression does not have a name, it is assigned an automatically generated name, such as <ph id="ph1">`#Lambda1`</ph> or <ph id="ph2">`#Lambda2`</ph>.</source>
          <target state="translated">Se uma expressão lambda não tem um nome, ele é atribuído um nome gerado automaticamente, como <ph id="ph1">`#Lambda1`</ph> ou <ph id="ph2">`#Lambda2`</ph>.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">Exemplos</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DebugView`</ph> property</source>
          <target state="translated">Propriedade <ph id="ph1">`DebugView`</ph></target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DebugView`</ph> property</source>
          <target state="translated">Propriedade <ph id="ph1">`DebugView`</ph></target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>LabelExpression</source>
          <target state="translated">LabelExpression</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If you specify a default value for the &lt;xref:System.Linq.Expressions.LabelExpression&gt; object, this value is displayed before the &lt;xref:System.Linq.Expressions.LabelTarget&gt; object.</source>
          <target state="translated">Se você especificar um valor padrão para o &lt;xref:System.Linq.Expressions.LabelExpression&gt;do objeto, esse valor é exibido antes do &lt;xref:System.Linq.Expressions.LabelTarget&gt;objeto.&lt;/xref:System.Linq.Expressions.LabelTarget&gt; &lt;/xref:System.Linq.Expressions.LabelExpression&gt;</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`.Label`</ph> token indicates the start of the label.</source>
          <target state="translated">O <ph id="ph1">`.Label`</ph> token indica o início do rótulo.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`.LabelTarget`</ph> token indicates the destination of the target to jump to.</source>
          <target state="translated">O <ph id="ph1">`.LabelTarget`</ph> token indica o destino de saltar para o destino.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>If a label does not have a name, it is assigned an automatically generated name, such as <ph id="ph1">`#Label1`</ph> or <ph id="ph2">`#Label2`</ph>.</source>
          <target state="translated">Se um rótulo não tem um nome, ele é atribuído um nome gerado automaticamente, como <ph id="ph1">`#Label1`</ph> ou <ph id="ph2">`#Label2`</ph>.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">Exemplos</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DebugView`</ph> property</source>
          <target state="translated">Propriedade <ph id="ph1">`DebugView`</ph></target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DebugView`</ph> property</source>
          <target state="translated">Propriedade <ph id="ph1">`DebugView`</ph></target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Checked Operators</source>
          <target state="translated">Operadores de verificação</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Checked operators are displayed with the "#" symbol in front of the operator.</source>
          <target state="translated">Operadores de verificação é exibido com o símbolo "#" na frente do operador.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For example, the checked addition operator is displayed as <ph id="ph1">`#+`</ph>.</source>
          <target state="translated">Por exemplo, o operador de adição verificado é exibido como <ph id="ph1">`#+`</ph>.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">Exemplos</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DebugView`</ph> property</source>
          <target state="translated">Propriedade <ph id="ph1">`DebugView`</ph></target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DebugView`</ph> property</source>
          <target state="translated">Propriedade <ph id="ph1">`DebugView`</ph></target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">Consulte também</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Expression Trees (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/expression-trees/index.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Árvores de expressão (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/expression-trees/index.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Debugging in Visual Studio<ept id="p1">](https://docs.microsoft.com/visualstudio/debugger/debugging-in-visual-studio)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Depurando no Visual Studio<ept id="p1">](https://docs.microsoft.com/visualstudio/debugger/debugging-in-visual-studio)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Create Custom Visualizers<ept id="p1">](https://docs.microsoft.com/visualstudio/debugger/create-custom-visualizers-of-data)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>Criar visualizadores personalizados<ept id="p1">](https://docs.microsoft.com/visualstudio/debugger/create-custom-visualizers-of-data)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>