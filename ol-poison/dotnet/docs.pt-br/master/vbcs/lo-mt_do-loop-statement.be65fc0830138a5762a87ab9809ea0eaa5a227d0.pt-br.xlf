<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">96254ef47f1455f89df0e683dbd589d77af58c35</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\language-reference\statements\do-loop-statement.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ffb6c381393c9ac1e5d6662574493a4f5f04f4f1</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5e04ea60657cf94f07083cd2d22f6cd8d6437867</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Handback file name: lo-mt_do-loop-statement.be65fc0830138a5762a87ab9809ea0eaa5a227d0.pt-br is different with handoff file name: do-loop-statement.be65fc0830138a5762a87ab9809ea0eaa5a227d0.pt-br.</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Do...Loop Statement (Visual Basic) | Microsoft Docs</source>
          <target state="translated">Fazer... Loop Statement (Visual Basic) | Documentos do Microsoft</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Do...Loop Statement (Visual Basic)</source>
          <target state="translated">Instrução Do...Loop (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Repeats a block of statements while a <ph id="ph1">`Boolean`</ph> condition is <ph id="ph2">`True`</ph> or until the condition becomes <ph id="ph3">`True`</ph>.</source>
          <target state="translated">Repete um bloco de instruções enquanto uma <ph id="ph1">`Boolean`</ph> condição é <ph id="ph2">`True`</ph> ou até que a condição se torne <ph id="ph3">`True`</ph>.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
          <target state="translated">Sintaxe</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parts</source>
          <target state="translated">Partes</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Term</source>
          <target state="translated">Termo</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Definition</source>
          <target state="translated">Definição</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Required.</source>
          <target state="translated">Necessário.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Starts the definition of the <ph id="ph1">`Do`</ph> loop.</source>
          <target state="translated">Inicia a definição do <ph id="ph1">`Do`</ph> loop.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Required unless <ph id="ph1">`Until`</ph> is used.</source>
          <target state="translated">Necessário a menos que <ph id="ph1">`Until`</ph> seja usado.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Repeat the loop until <ph id="ph1">`condition`</ph> is <ph id="ph2">`False`</ph>.</source>
          <target state="translated">Repita o loop até <ph id="ph1">`condition`</ph> é <ph id="ph2">`False`</ph>.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Required unless <ph id="ph1">`While`</ph> is used.</source>
          <target state="translated">Necessário a menos que <ph id="ph1">`While`</ph> seja usado.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Repeat the loop until <ph id="ph1">`condition`</ph> is <ph id="ph2">`True`</ph>.</source>
          <target state="translated">Repita o loop até <ph id="ph1">`condition`</ph> é <ph id="ph2">`True`</ph>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">Opcional.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Boolean`</ph> expression.</source>
          <target state="translated">Expressão <ph id="ph1">`Boolean`</ph>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`condition`</ph> is <ph id="ph2">`Nothing`</ph>, Visual Basic treats it as <ph id="ph3">`False`</ph>.</source>
          <target state="translated">Se <ph id="ph1">`condition`</ph> é <ph id="ph2">`Nothing`</ph>, Visual Basic trata isso <ph id="ph3">`False`</ph>.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">Opcional.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>One or more statements that are repeated while, or until, <ph id="ph1">`condition`</ph> is <ph id="ph2">`True`</ph>.</source>
          <target state="translated">Uma ou mais declarações que são repetidas enquanto, ou até que, <ph id="ph1">`condition`</ph> é <ph id="ph2">`True`</ph>.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">Opcional.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Transfers control to the next iteration of the <ph id="ph1">`Do`</ph> loop.</source>
          <target state="translated">Transfere o controle para a próxima iteração do <ph id="ph1">`Do`</ph> loop.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">Opcional.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Transfers control out of the <ph id="ph1">`Do`</ph> loop.</source>
          <target state="translated">Transfere o controle do <ph id="ph1">`Do`</ph> loop.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Required.</source>
          <target state="translated">Necessário.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Terminates the definition of the <ph id="ph1">`Do`</ph> loop.</source>
          <target state="translated">Finaliza a definição de <ph id="ph1">`Do`</ph> loop.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Remarks</source>
          <target state="translated">Comentários</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Use a <ph id="ph1">`Do...Loop`</ph> structure when you want to repeat a set of statements an indefinite number of times, until a condition is satisfied.</source>
          <target state="translated">Use um <ph id="ph1">`Do...Loop`</ph> estrutura quando quiser repetir um conjunto de declarações por um número indefinido de vezes, até que uma condição é satisfeita.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If you want to repeat the statements a set number of times, the <bpt id="p1">[</bpt>For...Next Statement<ept id="p1">](../../../visual-basic/language-reference/statements/for-next-statement.md)</ept> is usually a better choice.</source>
          <target state="translated">Se você quiser repetir as declarações um determinado número de vezes, o <bpt id="p1">[</bpt>para... Próxima instrução<ept id="p1">](../../../visual-basic/language-reference/statements/for-next-statement.md)</ept> geralmente é uma opção melhor.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You can use either <ph id="ph1">`While`</ph> or <ph id="ph2">`Until`</ph> to specify <ph id="ph3">`condition`</ph>, but not both.</source>
          <target state="translated">Você pode usar o <ph id="ph1">`While`</ph> ou <ph id="ph2">`Until`</ph> para especificar <ph id="ph3">`condition`</ph>, mas não ambos.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You can test <ph id="ph1">`condition`</ph> only one time, at either the start or the end of the loop.</source>
          <target state="translated">Você pode testar <ph id="ph1">`condition`</ph> somente uma vez, no início ou no final do loop.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If you test <ph id="ph1">`condition`</ph> at the start of the loop (in the <ph id="ph2">`Do`</ph> statement), the loop might not run even one time.</source>
          <target state="translated">Se você testar <ph id="ph1">`condition`</ph> no início do loop (no <ph id="ph2">`Do`</ph> instrução), o loop não pode ser executado até mesmo uma vez.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If you test at the end of the loop (in the <ph id="ph1">`Loop`</ph> statement), the loop always runs at least one time.</source>
          <target state="translated">Se você testar no final do loop (no <ph id="ph1">`Loop`</ph> instrução), o loop sempre é executado pelo menos uma vez.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The condition usually results from a comparison of two values, but it can be any expression that evaluates to a <bpt id="p1">[</bpt>Boolean Data Type<ept id="p1">](../../../visual-basic/language-reference/data-types/boolean-data-type.md)</ept> value (<ph id="ph1">`True`</ph> or <ph id="ph2">`False`</ph>).</source>
          <target state="translated">A condição normalmente resulta de uma comparação entre dois valores, mas pode ser qualquer expressão que é avaliada como um <bpt id="p1">[</bpt>tipo de dados Boolean<ept id="p1">](../../../visual-basic/language-reference/data-types/boolean-data-type.md)</ept> valor (<ph id="ph1">`True`</ph> ou <ph id="ph2">`False`</ph>).</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This includes values of other data types, such as numeric types, that have been converted to <ph id="ph1">`Boolean`</ph>.</source>
          <target state="translated">Isso inclui os valores de outros tipos de dados, como tipos numéricos, que foram convertidos em <ph id="ph1">`Boolean`</ph>.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>You can nest <ph id="ph1">`Do`</ph> loops by putting one loop within another.</source>
          <target state="translated">Você pode aninhar <ph id="ph1">`Do`</ph> loops colocando um loop dentro de outro.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>You can also nest different kinds of control structures within each other.</source>
          <target state="translated">Você também pode aninhar diferentes tipos de estruturas de controle em si.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Nested Control Structures<ept id="p1">](../../../visual-basic/programming-guide/language-features/control-flow/nested-control-structures.md)</ept>.</source>
          <target state="translated">Para obter mais informações, consulte <bpt id="p1">[</bpt>estruturas de controle aninhadas<ept id="p1">](../../../visual-basic/programming-guide/language-features/control-flow/nested-control-structures.md)</ept>.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Do...Loop`</ph> structure gives you more flexibility than the <bpt id="p1">[</bpt>While...End While Statement<ept id="p1">](../../../visual-basic/language-reference/statements/while-end-while-statement.md)</ept> because it enables you to decide whether to end the loop when <ph id="ph2">`condition`</ph> stops being <ph id="ph3">`True`</ph> or when it first becomes <ph id="ph4">`True`</ph>.</source>
          <target state="translated">O <ph id="ph1">`Do...Loop`</ph> estrutura lhe dá mais flexibilidade do que o <bpt id="p1">[</bpt>enquanto... End While Statement<ept id="p1">](../../../visual-basic/language-reference/statements/while-end-while-statement.md)</ept> porque ela permite que você decida se deseja terminar o loop quando <ph id="ph2">`condition`</ph> deixa de ser <ph id="ph3">`True`</ph> ou quando ela for primeiro <ph id="ph4">`True`</ph>.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>It also enables you to test <ph id="ph1">`condition`</ph> at either the start or the end of the loop.</source>
          <target state="translated">Ele também permite que você teste <ph id="ph1">`condition`</ph> no início ou no final do loop.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Exit Do</source>
          <target state="translated">Sair</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Exit Do<ept id="p1">](../../../visual-basic/language-reference/statements/exit-statement.md)</ept> statement can provide an alternative way to exit a <ph id="ph1">`Do…Loop`</ph>.</source>
          <target state="translated">O <bpt id="p1">[</bpt>Exit Do<ept id="p1">](../../../visual-basic/language-reference/statements/exit-statement.md)</ept> instrução pode fornecer uma maneira alternativa para encerrar um <ph id="ph1">`Do…Loop`</ph>.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Exit Do`</ph> transfers control immediately to the statement that follows the <ph id="ph2">`Loop`</ph> statement.</source>
          <target state="translated"><ph id="ph1">`Exit Do`</ph>transfere o controle imediatamente para a instrução que segue o <ph id="ph2">`Loop`</ph> instrução.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Exit Do`</ph> is often used after some condition is evaluated, for example in an <ph id="ph2">`If...Then...Else`</ph> structure.</source>
          <target state="translated"><ph id="ph1">`Exit Do`</ph>é frequentemente usado após alguma condição é avaliada, por exemplo, em um <ph id="ph2">`If...Then...Else`</ph> estrutura.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You might want to exit a loop if you detect a condition that makes it unnecessary or impossible to continue iterating, such as an erroneous value or a termination request.</source>
          <target state="translated">Você talvez queira encerrar um loop se você detectar uma condição que torna desnecessária ou impossível de se continuar iterando, como um valor errôneo ou uma solicitação de encerramento.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>One use of <ph id="ph1">`Exit Do`</ph> is to test for a condition that could cause an <bpt id="p1">*</bpt>endless loop<ept id="p1">*</ept>, which is a loop that could run a large or even infinite number of times.</source>
          <target state="translated">Um uso de <ph id="ph1">`Exit Do`</ph> é testar uma condição que pode causar uma <bpt id="p1">*</bpt>loop infinito<ept id="p1">*</ept>, que é um loop que pode executar um número grande ou mesmo infinito de vezes.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>You can use <ph id="ph1">`Exit Do`</ph> to escape the loop.</source>
          <target state="translated">Você pode usar <ph id="ph1">`Exit Do`</ph> para escapar do loop.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>You can include any number of <ph id="ph1">`Exit Do`</ph> statements anywhere in a <ph id="ph2">`Do…Loop`</ph>.</source>
          <target state="translated">Você pode incluir qualquer número de <ph id="ph1">`Exit Do`</ph> instruções em qualquer lugar em um <ph id="ph2">`Do…Loop`</ph>.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>When used within nested <ph id="ph1">`Do`</ph> loops, <ph id="ph2">`Exit Do`</ph> transfers control out of the innermost loop and into the next higher level of nesting.</source>
          <target state="translated">Quando usado dentro aninhados <ph id="ph1">`Do`</ph> loops, <ph id="ph2">`Exit Do`</ph> transfere o controle para fora do loop interno e para o próximo nível mais alto de aninhamento.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Exemplo</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>In the following example, the statements in the loop continue to run until the <ph id="ph1">`index`</ph> variable is greater than 10.</source>
          <target state="translated">No exemplo a seguir, as instruções no loop continuam a executar até o <ph id="ph1">`index`</ph> variável é maior que 10.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Until`</ph> clause is at the end of the loop.</source>
          <target state="translated">O <ph id="ph1">`Until`</ph> cláusula está no final do loop.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#131<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/do-loop-statement_1.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements&amp;#131;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/do-loop-statement_1.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Exemplo</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The following example uses a <ph id="ph1">`While`</ph> clause instead of an <ph id="ph2">`Until`</ph> clause, and <ph id="ph3">`condition`</ph> is tested at the start of the loop instead of at the end.</source>
          <target state="translated">O exemplo a seguir usa uma <ph id="ph1">`While`</ph> cláusula em vez de um <ph id="ph2">`Until`</ph> cláusula, e <ph id="ph3">`condition`</ph> é testado no início do loop, em vez de no final.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#132<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/do-loop-statement_2.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements&amp;132;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/do-loop-statement_2.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Exemplo</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>In the following example, <ph id="ph1">`condition`</ph> stops the loop when the <ph id="ph2">`index`</ph> variable is greater than 100.</source>
          <target state="translated">No exemplo a seguir, <ph id="ph1">`condition`</ph> interrompe o loop quando o <ph id="ph2">`index`</ph> variável é maior que 100.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`If`</ph> statement in the loop, however, causes the <ph id="ph2">`Exit Do`</ph> statement to stop the loop when the index variable is greater than 10.</source>
          <target state="translated">O <ph id="ph1">`If`</ph> instrução loop, no entanto, faz o <ph id="ph2">`Exit Do`</ph> instrução para interromper o loop quando a variável de índice for maior que 10.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#133<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/do-loop-statement_3.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements&amp;#133;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/do-loop-statement_3.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Exemplo</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The following example reads all lines in a text file.</source>
          <target state="translated">O exemplo a seguir lê todas as linhas em um arquivo de texto.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.IO.File.OpenText%2A&gt; method opens the file and returns a &lt;xref:System.IO.StreamReader&gt; that reads the characters.</source>
          <target state="translated">O &lt;xref:System.IO.File.OpenText%2A&gt;método abre o arquivo e retorna um &lt;xref:System.IO.StreamReader&gt;que lê os caracteres.&lt;/xref:System.IO.StreamReader&gt; &lt;/xref:System.IO.File.OpenText%2A&gt;</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">`Do...Loop`</ph> condition, the &lt;xref:System.IO.StreamReader.Peek%2A&gt; method of the <ph id="ph2">`StreamReader`</ph> determines whether there are any additional characters.</source>
          <target state="translated">No <ph id="ph1">`Do...Loop`</ph> condição, o &lt;xref:System.IO.StreamReader.Peek%2A&gt;método o <ph id="ph2">`StreamReader`</ph> determina se há quaisquer caracteres adicionais.&lt;/xref:System.IO.StreamReader.Peek%2A&gt;</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#134<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/do-loop-statement_4.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements&amp;#134;<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/do-loop-statement_4.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">Consulte também</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Loop Structures<ept id="p1">](../../../visual-basic/programming-guide/language-features/control-flow/loop-structures.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Estruturas de loop<ept id="p1">](../../../visual-basic/programming-guide/language-features/control-flow/loop-structures.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>For...Next Statement<ept id="p1">](../../../visual-basic/language-reference/statements/for-next-statement.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Para... Próxima instrução<ept id="p1">](../../../visual-basic/language-reference/statements/for-next-statement.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Boolean Data Type<ept id="p1">](../../../visual-basic/language-reference/data-types/boolean-data-type.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Tipo de dados Boolean<ept id="p1">](../../../visual-basic/language-reference/data-types/boolean-data-type.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Nested Control Structures<ept id="p1">](../../../visual-basic/programming-guide/language-features/control-flow/nested-control-structures.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Estruturas de controle aninhadas<ept id="p1">](../../../visual-basic/programming-guide/language-features/control-flow/nested-control-structures.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Exit Statement<ept id="p1">](../../../visual-basic/language-reference/statements/exit-statement.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Instrução Exit<ept id="p1">](../../../visual-basic/language-reference/statements/exit-statement.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>While...End While Statement<ept id="p1">](../../../visual-basic/language-reference/statements/while-end-while-statement.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>Instrução While...End While<ept id="p1">](../../../visual-basic/language-reference/statements/while-end-while-statement.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>