<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">11baaa6985f0681aa9c67c4f2470fb9917db5b78</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\procedures\function-procedures.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d10c541e9fdffffc46702845240e6a4b8805ed3d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">639d4d68bea76080355b631a32517a0eb45e333f</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Handback file name: lo-mt_function-procedures.bc8510e6055a83ac163a5c034912857a819c3792.pt-br is different with handoff file name: function-procedures.bc8510e6055a83ac163a5c034912857a819c3792.pt-br.</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Function Procedures (Visual Basic) | Microsoft Docs</source>
          <target state="translated">Função procedimentos (Visual Basic) | Documentos do Microsoft</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Function Procedures (Visual Basic)</source>
          <target state="translated">Procedimentos de função (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Function`</ph> procedure is a series of <ph id="ph2">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> statements enclosed by the <ph id="ph3">`Function`</ph> and <ph id="ph4">`End Function`</ph> statements.</source>
          <target state="translated">A <ph id="ph1">`Function`</ph> procedimento é uma série de <ph id="ph2">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> dentro de instruções de <ph id="ph3">`Function`</ph> e <ph id="ph4">`End Function`</ph> instruções.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Function`</ph> procedure performs a task and then returns control to the calling code.</source>
          <target state="translated">O <ph id="ph1">`Function`</ph> procedimento executa uma tarefa e, em seguida, retorna o controle para o código de chamada.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>When it returns control, it also returns a value to the calling code.</source>
          <target state="translated">Quando ele retorna o controle, ele também retorna um valor para o código de chamada.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Each time the procedure is called, its statements run, starting with the first executable statement after the <ph id="ph1">`Function`</ph> statement and ending with the first <ph id="ph2">`End Function`</ph>, <ph id="ph3">`Exit Function`</ph>, or <ph id="ph4">`Return`</ph> statement encountered.</source>
          <target state="translated">Cada vez que é chamada de procedimento, suas declarações são executadas, começando com a primeira instrução executável após o <ph id="ph1">`Function`</ph> instrução e terminando com a primeira <ph id="ph2">`End Function`</ph>, <ph id="ph3">`Exit Function`</ph>, ou <ph id="ph4">`Return`</ph> declaração encontrada.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You can define a <ph id="ph1">`Function`</ph> procedure in a module, class, or structure.</source>
          <target state="translated">Você pode definir uma <ph id="ph1">`Function`</ph> procedimento em um módulo, classe ou estrutura.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>It is <ph id="ph1">`Public`</ph> by default, which means you can call it from anywhere in your application that has access to the module, class, or structure in which you defined it.</source>
          <target state="translated">É <ph id="ph1">`Public`</ph> por padrão, que significa que você pode chamá-lo de qualquer lugar no seu aplicativo que acessou o módulo, classe ou estrutura na qual você a definiu.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Function`</ph> procedure can take arguments, such as constants, variables, or expressions, which are passed to it by the calling code.</source>
          <target state="translated">Um <ph id="ph1">`Function`</ph> procedimento pode receber argumentos, como constantes, variáveis ou expressões, que são passadas a ele pelo código de chamada.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Declaration Syntax</source>
          <target state="translated">Sintaxe da Declaração</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The syntax for declaring a <ph id="ph1">`Function`</ph> procedure is as follows:</source>
          <target state="translated">A sintaxe para declarar uma <ph id="ph1">`Function`</ph> procedimento é o seguinte:</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>modifiers<ept id="p1">*</ept> can specify access level and information regarding overloading, overriding, sharing, and shadowing.</source>
          <target state="translated">O <bpt id="p1">*</bpt>modificadores<ept id="p1">*</ept> pode especificar o nível de acesso e informações sobre sobrecarregamento, substituições, compartilhamento e sombreamento.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Function Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/function-statement.md)</ept>.</source>
          <target state="translated">Para obter mais informações, consulte <bpt id="p1">[</bpt>declaração de função<ept id="p1">](../../../../visual-basic/language-reference/statements/function-statement.md)</ept>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You declare each parameter the same way you do for <bpt id="p1">[</bpt>Sub Procedures<ept id="p1">](./sub-procedures.md)</ept>.</source>
          <target state="translated">Você declara cada parâmetro da mesma maneira que faria para <bpt id="p1">[</bpt>subprocedimentos<ept id="p1">](./sub-procedures.md)</ept>.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Data Type</source>
          <target state="translated">Tipo de dados</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Every <ph id="ph1">`Function`</ph> procedure has a data type, just as every variable does.</source>
          <target state="translated">Cada <ph id="ph1">`Function`</ph> procedimento tem um tipo de dados, assim como cada variável.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This data type is specified by the <ph id="ph1">`As`</ph> clause in the <ph id="ph2">`Function`</ph> statement, and it determines the data type of the value the function returns to the calling code.</source>
          <target state="translated">Esse tipo de dados é especificado pelo <ph id="ph1">`As`</ph> cláusula de <ph id="ph2">`Function`</ph> instrução e ele determina o tipo de dados do valor que a função retorna para o código de chamada.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The following sample declarations illustrate this.</source>
          <target state="translated">As declarações de exemplo a seguir ilustram isso.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For more information, see "Parts" in <bpt id="p1">[</bpt>Function Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/function-statement.md)</ept>.</source>
          <target state="translated">Para obter mais informações, veja "Partes" em <bpt id="p1">[</bpt>declaração de função<ept id="p1">](../../../../visual-basic/language-reference/statements/function-statement.md)</ept>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Returning Values</source>
          <target state="translated">Retornando valores</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The value a <ph id="ph1">`Function`</ph> procedure sends back to the calling code is called its return value.</source>
          <target state="translated">O valor de uma <ph id="ph1">`Function`</ph> procedimento envia de volta para o código de chamada é chamada seu valor de retorno.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The procedure returns this value in one of two ways:</source>
          <target state="translated">O procedimento retorna o valor de uma das seguintes maneiras:</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>It uses the <ph id="ph1">`Return`</ph> statement to specify the return value, and returns control immediately to the calling program.</source>
          <target state="translated">Ele usa o <ph id="ph1">`Return`</ph> para especificar o valor de retorno e retorna o controle imediatamente para o programa de chamada.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The following example illustrates this.</source>
          <target state="translated">O exemplo a seguir ilustra essa situação.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>It assigns a value to its own function name in one or more statements of the procedure.</source>
          <target state="translated">Ele atribui um valor para o seu próprio nome de função em uma ou mais declarações do procedimento.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Control does not return to the calling program until an <ph id="ph1">`Exit Function`</ph> or <ph id="ph2">`End Function`</ph> statement is executed.</source>
          <target state="translated">O controle retorna ao programa de chamada até que uma <ph id="ph1">`Exit Function`</ph> ou <ph id="ph2">`End Function`</ph> instrução é executada.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The following example illustrates this.</source>
          <target state="translated">O exemplo a seguir ilustra essa situação.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The advantage of assigning the return value to the function name is that control does not return from the procedure until it encounters an <ph id="ph1">`Exit Function`</ph> or <ph id="ph2">`End Function`</ph> statement.</source>
          <target state="translated">A vantagem de atribuir o valor de retorno ao nome da função é que o controle não retorna do procedimento até encontrar um <ph id="ph1">`Exit Function`</ph> ou <ph id="ph2">`End Function`</ph> instrução.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>This allows you to assign a preliminary value and adjust it later if necessary.</source>
          <target state="translated">Isso permite que você atribua um valor preliminar e ajustá-lo mais tarde, se necessário.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For more information about returning values, see <bpt id="p1">[</bpt>Function Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/function-statement.md)</ept>.</source>
          <target state="translated">Para obter mais informações sobre como retornar valores, consulte <bpt id="p1">[</bpt>declaração de função<ept id="p1">](../../../../visual-basic/language-reference/statements/function-statement.md)</ept>.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For information about returning arrays, see <bpt id="p1">[</bpt>Arrays<ept id="p1">](../../../../visual-basic/programming-guide/language-features/arrays/index.md)</ept>.</source>
          <target state="translated">Para obter informações sobre como retornar matrizes, consulte <bpt id="p1">[</bpt>matrizes<ept id="p1">](../../../../visual-basic/programming-guide/language-features/arrays/index.md)</ept>.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Calling Syntax</source>
          <target state="translated">Sintaxe de chamada</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You invoke a <ph id="ph1">`Function`</ph> procedure by including its name and arguments either on the right side of an assignment statement or in an expression.</source>
          <target state="translated">Você invocar um <ph id="ph1">`Function`</ph> procedimento, incluindo seu nome e argumentos tanto no lado direito de uma instrução de atribuição ou em uma expressão.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>You must provide values for all arguments that are not optional, and you must enclose the argument list in parentheses.</source>
          <target state="translated">Você deve fornecer valores para todos os argumentos que não são opcionais, e você deve colocar a lista de argumentos entre parênteses.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>If no arguments are supplied, you can optionally omit the parentheses.</source>
          <target state="translated">Se não for fornecido nenhum argumento, opcionalmente, você pode omitir os parênteses.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The syntax for a call to a <ph id="ph1">`Function`</ph> procedure is as follows:</source>
          <target state="translated">A sintaxe para chamar um <ph id="ph1">`Function`</ph> procedimento é o seguinte:</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>lvalue<ept id="p1">*</ept>  <ph id="ph1">`=`</ph>  <bpt id="p2">*</bpt>functionname<ept id="p2">*</ept> <ph id="ph2">`[(`</ph> <bpt id="p3">*</bpt>argumentlist<ept id="p3">*</ept> <ph id="ph3">`)]`</ph></source>
          <target state="translated"><bpt id="p1">*</bpt>l-value<ept id="p1">*</ept><ph id="ph1">`=`</ph><bpt id="p2">*</bpt>functionname<ept id="p2">*</ept> <ph id="ph2">`[(`</ph> <bpt id="p3">*</bpt>argumentlist<ept id="p3">*</ept>    <ph id="ph3">`)]`</ph></target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`If ((`</ph> <bpt id="p1">*</bpt>functionname<ept id="p1">*</ept> <ph id="ph2">`[(`</ph> <bpt id="p2">*</bpt>argumentlist<ept id="p2">*</ept> <ph id="ph3">`)] / 3) &lt;=`</ph>  <bpt id="p3">*</bpt>expression<ept id="p3">*</ept> <ph id="ph4">`) Then`</ph></source>
          <target state="translated"><ph id="ph1">`If ((`</ph><bpt id="p1">*</bpt>functionname<ept id="p1">*</ept> <ph id="ph2">`[(`</ph> <bpt id="p2">*</bpt>argumentlist<ept id="p2">*</ept> <ph id="ph3">`)] / 3) &lt;=`</ph> <bpt id="p3">*</bpt>expressão<ept id="p3">*</ept>  <ph id="ph4">`) Then`</ph></target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>When you call a <ph id="ph1">`Function`</ph> procedure, you do not have to use its return value.</source>
          <target state="translated">Quando você chama um <ph id="ph1">`Function`</ph> procedimento, você não precisa usar seu valor de retorno.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If you do not, all the actions of the function are performed, but the return value is ignored.</source>
          <target state="translated">Se você não fizer isso, todas as ações da função são executadas, mas o valor de retorno será ignorado.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>&lt;xref:Microsoft.VisualBasic.Interaction.MsgBox%2A&gt; is often called in this manner.</source>
          <target state="translated">&lt;xref:Microsoft.VisualBasic.Interaction.MsgBox%2A&gt;é frequentemente chamado dessa maneira.&lt;/xref:Microsoft.VisualBasic.Interaction.MsgBox%2A&gt;</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Illustration of Declaration and Call</source>
          <target state="translated">Ilustração da declaração e chamada</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The following <ph id="ph1">`Function`</ph> procedure calculates the longest side, or hypotenuse, of a right triangle, given the values for the other two sides.</source>
          <target state="translated">O seguinte <ph id="ph1">`Function`</ph> procedimento calcula o maior lado, ou hipotenusa, de um triângulo, considerando os valores para os dois lados.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnProcedures#1<ept id="p2">](./codesnippet/VisualBasic/function-procedures_1.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnProcedures n º&amp;1;<ept id="p2">](./codesnippet/VisualBasic/function-procedures_1.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The following example shows a typical call to <ph id="ph1">`hypotenuse`</ph>.</source>
          <target state="translated">O exemplo a seguir mostra uma chamada típica para <ph id="ph1">`hypotenuse`</ph>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnProcedures#6<ept id="p2">](./codesnippet/VisualBasic/function-procedures_2.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnProcedures n º&amp;6;<ept id="p2">](./codesnippet/VisualBasic/function-procedures_2.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">Consulte também</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Procedures<ept id="p1">](./index.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Procedimentos<ept id="p1">](./index.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Sub Procedures<ept id="p1">](./sub-procedures.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Procedimentos Sub<ept id="p1">](./sub-procedures.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Property Procedures<ept id="p1">](./property-procedures.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Procedimentos de propriedade<ept id="p1">](./property-procedures.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Operator Procedures<ept id="p1">](./operator-procedures.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Procedimentos de operador<ept id="p1">](./operator-procedures.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Procedure Parameters and Arguments<ept id="p1">](./procedure-parameters-and-arguments.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Argumentos e parâmetros de procedimento<ept id="p1">](./procedure-parameters-and-arguments.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Function Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/function-statement.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Instrução Function<ept id="p1">](../../../../visual-basic/language-reference/statements/function-statement.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Create a Procedure that Returns a Value<ept id="p1">](./how-to-create-a-procedure-that-returns-a-value.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Como: criar um procedimento que retorna um valor<ept id="p1">](./how-to-create-a-procedure-that-returns-a-value.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Return a Value from a Procedure<ept id="p1">](./how-to-return-a-value-from-a-procedure.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Como: retornar um valor de um procedimento<ept id="p1">](./how-to-return-a-value-from-a-procedure.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Call a Procedure That Returns a Value<ept id="p1">](./how-to-call-a-procedure-that-returns-a-value.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>Como chamar um procedimento que retorna um valor<ept id="p1">](./how-to-call-a-procedure-that-returns-a-value.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>