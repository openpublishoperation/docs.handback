<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6e18f7ceefeec9c1f422d0eae4e727700ebd8b6e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\procedures\how-to-protect-a-procedure-argument-against-value-changes.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e2804bee417c8af423839ab36812adb4a89edc3a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">623748c2ba3bcd6d3e110285812581aa199592da</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Handback file name: lo-mt_how-to-protect-a-procedure-argument-against-value-changes.92bc0b836a73ab914620aaed514e014785028da9.pt-br is different with handoff file name: how-to-protect-a-procedure-argument-against-value-changes.92bc0b836a73ab914620aaed514e014785028da9.pt-br.</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Protect a Procedure Argument Against Value Changes (Visual Basic) | Microsoft Docs</source>
          <target state="translated">Como: proteger um argumento de procedimento contra alterações de valor (Visual Basic) | Documentos do Microsoft</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Protect a Procedure Argument Against Value Changes (Visual Basic)</source>
          <target state="translated">Como proteger um argumento de procedimento contra alterações de valor (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>If a procedure declares a parameter as <bpt id="p1">[</bpt>ByRef<ept id="p1">](../../../../visual-basic/language-reference/modifiers/byref.md)</ept>, <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> gives the procedure code a direct reference to the programming element underlying the argument in the calling code.</source>
          <target state="translated">Se um procedimento declara um parâmetro como <bpt id="p1">[</bpt>ByRef<ept id="p1">](../../../../visual-basic/language-reference/modifiers/byref.md)</ept>, <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> fornece o código do procedimento uma referência direta ao elemento de programação subjacente o argumento o código de chamada.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This permits the procedure to change the value underlying the argument in the calling code.</source>
          <target state="translated">Isso permite que o procedimento para alterar o valor subjacente do argumento no código de chamada.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In some cases the calling code might want to protect against such a change.</source>
          <target state="translated">Em alguns casos, o código de chamada talvez queira proteger contra uma alteração.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You can always protect an argument from change by declaring the corresponding parameter <bpt id="p1">[</bpt>ByVal<ept id="p1">](../../../../visual-basic/language-reference/modifiers/byval.md)</ept> in the procedure.</source>
          <target state="translated">Você sempre pode proteger um argumento de alteração ao declarar o parâmetro correspondente <bpt id="p1">[</bpt>ByVal<ept id="p1">](../../../../visual-basic/language-reference/modifiers/byval.md)</ept> no procedimento.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If you want to be able to change a given argument in some cases but not others, you can declare it <ph id="ph1">`ByRef`</ph> and let the calling code determine the passing mechanism in each call.</source>
          <target state="translated">Se você quiser ser capaz de alterar um determinado argumento em alguns casos, mas outros não, você pode declará-lo <ph id="ph1">`ByRef`</ph> e permitir que o código de chamada determinar o mecanismo de passagem em cada chamada.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>It does this by enclosing the corresponding argument in parentheses to pass it by value, or not enclosing it in parentheses to pass it by reference.</source>
          <target state="translated">Isso é feito colocando o argumento correspondente entre parênteses para passá-lo por valor ou não envolve em parênteses passá-lo por referência.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Force an Argument to Be Passed by Value<ept id="p1">](./how-to-force-an-argument-to-be-passed-by-value.md)</ept>.</source>
          <target state="translated">Para obter mais informações, consulte <bpt id="p1">[</bpt>como: forçar um argumento a ser passado por valor<ept id="p1">](./how-to-force-an-argument-to-be-passed-by-value.md)</ept>.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Exemplo</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The following example shows two procedures that take an array variable and operate on its elements.</source>
          <target state="translated">O exemplo a seguir mostra dois procedimentos que tenham uma variável de matriz e operam em seus elementos.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`increase`</ph> procedure simply adds one to each element.</source>
          <target state="translated">O <ph id="ph1">`increase`</ph> procedimento simplesmente adiciona um para cada elemento.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`replace`</ph> procedure assigns a new array to the parameter <ph id="ph2">`a()`</ph> and then adds one to each element.</source>
          <target state="translated">O <ph id="ph1">`replace`</ph> procedimento atribui uma nova matriz para o parâmetro <ph id="ph2">`a()`</ph> e, em seguida, adiciona um para cada elemento.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>However, the reassignment does not affect the underlying array variable in the calling code.</source>
          <target state="translated">No entanto, a reatribuição não afeta a variável array subjacente no código de chamada.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnProcedures#35<ept id="p2">](./codesnippet/VisualBasic/how-to-protect-a-procedure-argument-against-value-changes_1.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnProcedures&amp;#35;<ept id="p2">](./codesnippet/VisualBasic/how-to-protect-a-procedure-argument-against-value-changes_1.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnProcedures#38<ept id="p2">](./codesnippet/VisualBasic/how-to-protect-a-procedure-argument-against-value-changes_2.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnProcedures&amp;38;<ept id="p2">](./codesnippet/VisualBasic/how-to-protect-a-procedure-argument-against-value-changes_2.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnProcedures#37<ept id="p2">](./codesnippet/VisualBasic/how-to-protect-a-procedure-argument-against-value-changes_3.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnProcedures&amp;#37;<ept id="p2">](./codesnippet/VisualBasic/how-to-protect-a-procedure-argument-against-value-changes_3.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The first <ph id="ph1">`MsgBox`</ph> call displays "After increase(n): 11, 21, 31, 41".</source>
          <target state="translated">A primeira <ph id="ph1">`MsgBox`</ph> chamada exibe "após increase (n): 11, 21, 31, 41".</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Because the array <ph id="ph1">`n`</ph> is a reference type, <ph id="ph2">`replace`</ph> can change its members, even though the passing mechanism is <ph id="ph3">`ByVal`</ph>.</source>
          <target state="translated">Porque a matriz <ph id="ph1">`n`</ph> é um tipo de referência, <ph id="ph2">`replace`</ph> pode alterar seus membros, mesmo que o mecanismo de passagem é <ph id="ph3">`ByVal`</ph>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The second <ph id="ph1">`MsgBox`</ph> call displays "After replace(n): 11, 21, 31, 41".</source>
          <target state="translated">O segundo <ph id="ph1">`MsgBox`</ph> chamada exibe "Após Replace (n): 11, 21, 31, 41".</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">`n`</ph> is passed <ph id="ph2">`ByVal`</ph>, <ph id="ph3">`replace`</ph> cannot modify the variable <ph id="ph4">`n`</ph> in the calling code by assigning a new array to it.</source>
          <target state="translated">Porque <ph id="ph1">`n`</ph> é passado <ph id="ph2">`ByVal`</ph>, <ph id="ph3">`replace`</ph> não é possível modificar a variável <ph id="ph4">`n`</ph> no código de chamada, atribuindo uma nova matriz para ele.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`replace`</ph> creates the new array instance <ph id="ph2">`k`</ph> and assigns it to the local variable <ph id="ph3">`a`</ph>, it loses the reference to <ph id="ph4">`n`</ph> passed in by the calling code.</source>
          <target state="translated">Quando <ph id="ph1">`replace`</ph> cria a nova instância de matriz <ph id="ph2">`k`</ph> e o atribui à variável local <ph id="ph3">`a`</ph>, ele perde a referência à <ph id="ph4">`n`</ph> passado pelo código de chamada.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>When it changes the members of <ph id="ph1">`a`</ph>, only the local array <ph id="ph2">`k`</ph> is affected.</source>
          <target state="translated">Quando ele se transformar os membros de <ph id="ph1">`a`</ph>, somente o array local <ph id="ph2">`k`</ph> é afetado.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Therefore, <ph id="ph1">`replace`</ph> does not increment the values of array <ph id="ph2">`n`</ph> in the calling code.</source>
          <target state="translated">Portanto, <ph id="ph1">`replace`</ph> não incrementa os valores de matriz <ph id="ph2">`n`</ph> no código de chamada.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Compiling the Code</source>
          <target state="translated">Compilando o código</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The default in <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> is to pass arguments by value.</source>
          <target state="translated">O padrão no <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> é passar argumentos por valor.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>However, it is good programming practice to include either the <bpt id="p1">[</bpt>ByVal<ept id="p1">](../../../../visual-basic/language-reference/modifiers/byval.md)</ept> or <bpt id="p2">[</bpt>ByRef<ept id="p2">](../../../../visual-basic/language-reference/modifiers/byref.md)</ept> keyword with every declared parameter.</source>
          <target state="translated">No entanto, é boa prática incluir de programação a <bpt id="p1">[</bpt>ByVal<ept id="p1">](../../../../visual-basic/language-reference/modifiers/byval.md)</ept> ou <bpt id="p2">[</bpt>ByRef<ept id="p2">](../../../../visual-basic/language-reference/modifiers/byref.md)</ept> palavra-chave com cada parâmetro declarado.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This makes your code easier to read.</source>
          <target state="translated">Isso torna seu código mais fácil de ler.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">Consulte também</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Procedures<ept id="p1">](./index.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Procedimentos<ept id="p1">](./index.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Procedure Parameters and Arguments<ept id="p1">](./procedure-parameters-and-arguments.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Argumentos e parâmetros de procedimento<ept id="p1">](./procedure-parameters-and-arguments.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Pass Arguments to a Procedure<ept id="p1">](./how-to-pass-arguments-to-a-procedure.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Como: passar argumentos para um procedimento<ept id="p1">](./how-to-pass-arguments-to-a-procedure.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Passing Arguments by Value and by Reference<ept id="p1">](./passing-arguments-by-value-and-by-reference.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Passando argumentos por valor e por referência<ept id="p1">](./passing-arguments-by-value-and-by-reference.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Differences Between Modifiable and Nonmodifiable Arguments<ept id="p1">](./differences-between-modifiable-and-nonmodifiable-arguments.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Diferenças entre argumentos modificável e não modificável<ept id="p1">](./differences-between-modifiable-and-nonmodifiable-arguments.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Differences Between Passing an Argument By Value and By Reference<ept id="p1">](./differences-between-passing-an-argument-by-value-and-by-reference.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Diferenças entre passar um argumento por valor e por referência<ept id="p1">](./differences-between-passing-an-argument-by-value-and-by-reference.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Change the Value of a Procedure Argument<ept id="p1">](./how-to-change-the-value-of-a-procedure-argument.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Como: alterar o valor de um argumento de procedimento<ept id="p1">](./how-to-change-the-value-of-a-procedure-argument.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Force an Argument to Be Passed by Value<ept id="p1">](./how-to-force-an-argument-to-be-passed-by-value.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Como: forçar um argumento a ser passado por valor<ept id="p1">](./how-to-force-an-argument-to-be-passed-by-value.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Passing Arguments by Position and by Name<ept id="p1">](./passing-arguments-by-position-and-by-name.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Passando argumentos por posição e nome<ept id="p1">](./passing-arguments-by-position-and-by-name.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Value Types and Reference Types<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>Tipos de Valor e Tipos de Referência<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>