<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-6a73dd2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f01c6521becb930923693a6b6867479f3b5d6df9</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\migrating-from-dnx.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p1</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">af9834f73c6bad720e15657c3a6c7e0cbd0acc0f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">defb9cd7a64178a68a21e9fcbf80be48c0ae00d6</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">file migrating-from-dnx.24d16746eac67884186db7c106ff543d42acccbf.ru-ru.xlf is out of handoff scope</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Migrating from DNX to .NET Core CLI</source>
          <target state="translated">Переход с DNX на интерфейс CLI .NET Core</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Migrating from DNX to .NET Core CLI</source>
          <target state="translated">Переход с DNX на интерфейс CLI .NET Core</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Migrating from DNX to .NET Core CLI</source>
          <target state="translated">Переход с DNX на интерфейс CLI .NET Core</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="translated">Обзор</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The RC1 release of .NET Core and ASP.NET Core 1.0 introduced DNX tooling.</source>
          <target state="translated">В версии-кандидате 1 .NET Core и ASP.NET Core 1.0 были представлены инструменты DNX.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The RC2 release of .NET Core and ASP.NET Core 1.0 moved from DNX to the .NET Core CLI.</source>
          <target state="translated">С выпуском версии-кандидата 2 .NET Core и ASP.NET Core 1.0 был осуществлен переход на интерфейс командной строки (CLI) .NET Core с DNX.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>As a slight refresher, let's recap what DNX was about.</source>
          <target state="translated">Давайте в общих чертах вспомним, что такое DNX.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>DNX was a runtime and a toolset used to build .NET Core and, more specifically, ASP.NET Core 1.0 applications.</source>
          <target state="translated">DNX — это среда выполнения и набор инструментов, которые использовались для создания приложений .NET Core, и в частности приложений ASP.NET Core 1.0.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>It consisted of 3 main pieces:</source>
          <target state="translated">Это решение состояло из трех основных компонентов:</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>DNVM - an install script for obtaining DNX</source>
          <target state="translated">DNVM — скрипт установки для получения DNX;</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>DNX (Dotnet Execution Runtime) - the runtime that executes your code</source>
          <target state="translated">DNX (среда выполнения Dotnet) — среда выполнения вашего кода;</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>DNU (Dotnet Developer Utility) - tooling for managing dependencies, building and publishing your applications</source>
          <target state="translated">DNU (служебная программа для разработки Dotnet) — средство для управления зависимостями, сборки и публикации приложений.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>With the introduction of the CLI, all of the above are now part of a single toolset.</source>
          <target state="translated">С появлением интерфейса CLI все перечисленные выше компоненты входят в одни набор инструментов.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>However, since DNX was available in RC1 timeframe, you might have projects that were built using it that you would want to move off to the new CLI tooling.</source>
          <target state="translated">Однако, поскольку среда DNX была доступна в версии-кандидате 1, у вас могут быть созданные с ее помощью проекты, которые может потребоваться перенести в новый инструментарий CLI.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This migration guide will cover the essentials on how to migrate projects off of DNX and onto .NET Core CLI.</source>
          <target state="translated">В этом руководстве рассматриваются основные действия по переносу проектов из DNX в интерфейс CLI .NET Core.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If you are just starting a project on .NET Core from scratch, you can freely skip this document.</source>
          <target state="translated">Если вы создаете проект в .NET Core с нуля, то этот документ вам не нужен.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Main changes in the tooling</source>
          <target state="translated">Основные изменения в инструментарии</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>There are some general changes in the tooling that should be outlined first.</source>
          <target state="translated">В инструментарии реализован ряд важных изменений, с которыми необходимо предварительно ознакомиться.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>No more DNVM</source>
          <target state="translated">Отсутствие DNVM</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>DNVM, short for <bpt id="p1">*</bpt>DotNet Version Manager<ept id="p1">*</ept> was a bash/PowerShell script used to install a DNX on your machine.</source>
          <target state="translated">DNVM (сокращение от <bpt id="p1">*</bpt>DotNet Version Manager<ept id="p1">*</ept>, диспетчер версий DotNet) — это bash-скрипт или скрипт PowerShell, который использовался для установки DNX на компьютере.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>It helped users get the DNX they need from the feed they specified (or default ones) as well as mark a certain DNX "active", which would put it on the $PATH for the given session.</source>
          <target state="translated">Он помогал пользователям получить DNX из указанного канала (или канала по умолчанию), а также пометить определенную среду DNX как активную, в результате чего она помещалась в переменную $PATH для данного сеанса.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This would allow you to use the various tools.</source>
          <target state="translated">Это позволяло использовать различные средства.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>DNVM was discontinued because its feature set was made redundant by changes coming in the .NET Core CLI tools.</source>
          <target state="translated">Поддержка DNVM прекращена, так как его функциональность стала избыточной вследствие изменений, реализованных в средствах CLI .NET Core.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The CLI tools come packaged in two main ways, as was explained in the <bpt id="p1">[</bpt>overview document<ept id="p1">](tools/index.md#installation)</ept>:</source>
          <target state="translated">Средства CLI упаковываются двумя основными способами, как описано в <bpt id="p1">[</bpt>обзорном документе<ept id="p1">](tools/index.md#installation)</ept>:</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Native installers for a given platform</source>
          <target state="translated">собственные установщики для конкретной платформы;</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Install script for other situations (like CI servers)</source>
          <target state="translated">скрипт установки для других ситуаций (например, серверов CI).</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Given this, the DNVM install features are not needed.</source>
          <target state="translated">С учетом этого возможности установки DNVM больше не нужны.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>But what about the runtime selection features?</source>
          <target state="translated">Но как насчет возможностей выбора среды выполнения?</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>You reference a runtime in your <ph id="ph1">`project.json`</ph> by adding a package of a certain version to your dependencies.</source>
          <target state="translated">Вы ссылаетесь на среду выполнения в файле <ph id="ph1">`project.json`</ph>, добавляя пакет определенной версии в список зависимостей.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>With this change, your application will be able to use the new runtime bits.</source>
          <target state="translated">После внесения этого изменения ваше приложение сможет использовать двоичные файлы новой среды выполнения.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Getting these bits to your machine is the same as with the CLI: you install the runtime via one of the native installers it supports or via its install script.</source>
          <target state="translated">Получение этих двоичных файлов на компьютере производится так же, как и при использовании CLI: вы устанавливаете среду выполнения с помощью одного из поддерживаемых собственных установщиков или посредством скрипта установки.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Different commands</source>
          <target state="translated">Разные команды</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If you were using DNX, you used some commands from one of its three parts (DNX, DNU or DNVM).</source>
          <target state="translated">Если вы использовали среду DNX, то применяли некоторые команды из трех ее компонентов (DNX, DNU и DNVM).</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>With the CLI, some of these commands change, some are not available and some are the same but have slightly different semantics.</source>
          <target state="translated">В CLI некоторые из этих команд изменились, некоторые стали недоступны, а другие сохранились, но имеют немного другую семантику.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The table below shows the mapping between the DNX/DNU commands and their CLI counterparts.</source>
          <target state="translated">В таблице ниже приведены команды DNX и DNU и их аналоги в CLI.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>DNX command</source>
          <target state="translated">Команда DNX</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>CLI command</source>
          <target state="translated">Команда CLI</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Описание</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>dnx run</source>
          <target state="translated">dnx run</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>dotnet run</source>
          <target state="translated">dotnet run</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Run code from source.</source>
          <target state="translated">Выполнение кода из источника.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>dnu build</source>
          <target state="translated">dnu build</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>dotnet build</source>
          <target state="translated">dotnet build</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Build an IL binary of your code.</source>
          <target state="translated">Сборка двоичного файла с кодом на языке IL.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>dnu pack</source>
          <target state="translated">dnu pack</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>dotnet pack</source>
          <target state="translated">dotnet pack</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Package up a NuGet package of your code.</source>
          <target state="translated">Упаковка кода в пакет NuGet.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>dnx <ph id="ph1">\[</ph>command] (for example, "dnx web")</source>
          <target state="translated">dnx <ph id="ph1">\[</ph>команда] (например, dnx web)</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>N/A<ph id="ph1">\*</ph></source>
          <target state="translated">Н/Д <ph id="ph1">\*</ph></target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>In DNX world, run a command as defined in the project.json.</source>
          <target state="translated">Выполнение команды в среде DNX в соответствии с определением в файле project.json.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>dnu install</source>
          <target state="translated">dnu install</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>N/A<ph id="ph1">\*</ph></source>
          <target state="translated">Н/Д <ph id="ph1">\*</ph></target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>In the DNX world, install a package as a dependency.</source>
          <target state="translated">В среде DNX установка пакета в качестве зависимости.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>dnu restore</source>
          <target state="translated">dnu restore</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>dotnet restore</source>
          <target state="translated">dotnet restore</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Restore dependencies specified in your project.json.</source>
          <target state="translated">Восстановление зависимостей, указанных в файле project.json.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>dnu publish</source>
          <target state="translated">dnu publish</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>dotnet publish</source>
          <target state="translated">dotnet publish</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Publish your application for deployment in one of the three forms (portable, portable with native and standalone).</source>
          <target state="translated">Публикация приложения для развертывания в одной из трех форм (переносимое, переносимое с машинным кодом или автономное).</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>dnu wrap</source>
          <target state="translated">dnu wrap</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>N/A<ph id="ph1">\*</ph></source>
          <target state="translated">Н/Д <ph id="ph1">\*</ph></target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>In DNX world, wrap a project.json in csproj.</source>
          <target state="translated">В среде DNX упаковка файла project.json в файл CSPROJ.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>dnu commands</source>
          <target state="translated">dnu commands</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>N/A<ph id="ph1">\*</ph></source>
          <target state="translated">Н/Д <ph id="ph1">\*</ph></target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>In DNX world, manage the globally installed commands.</source>
          <target state="translated">В среде DNX управление глобально установленными командами.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>(<ph id="ph1">\*</ph>) - these features are not supported in the CLI by design.</source>
          <target state="translated">(<ph id="ph1">\*</ph>) — поддержка этих возможностей в CLI не предусмотрена.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>DNX features that are not supported</source>
          <target state="translated">Неподдерживаемые возможности DNX</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>As the table above shows, there are features from the DNX world that we decided not to support in the CLI, at least for the time being.</source>
          <target state="translated">Как видно в приведенной выше таблице, в среде DNX имелись возможности, которые мы решили не поддерживать в CLI, по крайней мере на данный момент.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>This section will go through the most important ones and outline the rationale behind not supporting them as well as workarounds if you do need them.</source>
          <target state="translated">В этом разделе будут рассмотрены наиболее важные из них, а также приведено обоснование прекращению их поддержки и обходные решения для их реализации.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Global commands</source>
          <target state="translated">Глобальные команды</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>DNU came with a concept called "global commands".</source>
          <target state="translated">В DNU появилось такое понятие, как "глобальные команды".</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>These were, essentially, console applications packaged up as NuGet packages with a shell script that would invoke the DNX you specified to run the application.</source>
          <target state="translated">По существу, это консольные приложения, упакованные в виде пакетов NuGet со скриптом оболочки, который вызывает указанную среду DNX для запуска приложения.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The CLI does not support this concept.</source>
          <target state="translated">В интерфейсе CLI такого понятия нет.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>It does, however, support the concept of adding per-project commands that can be invoked using the familiar <ph id="ph1">`dotnet &lt;command&gt;`</ph> syntax.</source>
          <target state="translated">Однако он поддерживает добавление команд для отдельных проектов, которые можно вызывать с помощью привычного синтаксиса <ph id="ph1">`dotnet &lt;command&gt;`</ph>.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>More about this can be found in the <bpt id="p1">[</bpt>extensibility overview<ept id="p1">](tools/index.md#extensibility)</ept>.</source>
          <target state="translated">Дополнительные сведения об этом можно найти в <bpt id="p1">[</bpt>обзоре расширяемости<ept id="p1">](tools/index.md#extensibility)</ept>.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Installing dependencies</source>
          <target state="translated">Установка зависимостей</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>As of v1, the .NET Core CLI tools don't have an <ph id="ph1">`install`</ph> command for installing dependencies.</source>
          <target state="translated">Начиная с версии 1, в средствах CLI .NET Core нет команды <ph id="ph1">`install`</ph> для установки зависимостей.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>In order to install a package from NuGet, you would need to add it as a dependency to your <ph id="ph1">`project.json`</ph> file and then run <ph id="ph2">`dotnet restore`</ph>.</source>
          <target state="translated">Чтобы установить пакет из NuGet, его нужно добавить как зависимость в файл <ph id="ph1">`project.json`</ph>, а затем выполнить команду <ph id="ph2">`dotnet restore`</ph>.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Running your code</source>
          <target state="translated">Выполнение кода</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>There are two main ways to run your code.</source>
          <target state="translated">Выполнять код можно двумя основными способами.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>One is from source, with <ph id="ph1">`dotnet run`</ph>.</source>
          <target state="translated">Один из них — выполнение из источника с помощью команды <ph id="ph1">`dotnet run`</ph>.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Unlike <ph id="ph1">`dnx run`</ph>, this will not do any in-memory compilation.</source>
          <target state="translated">В отличие от команды <ph id="ph1">`dnx run`</ph>, компиляция в памяти при этом не производится.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>It will actually invoke <ph id="ph1">`dotnet build`</ph> to build your code and then run the built binary.</source>
          <target state="translated">Эта команда вызывает <ph id="ph1">`dotnet build`</ph> для сборки кода, а затем запускает собранный двоичный файл.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Another way is using the <ph id="ph1">`dotnet`</ph> itself to run your code.</source>
          <target state="translated">Другой способ — использовать сам драйвер <ph id="ph1">`dotnet`</ph> для выполнения кода.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>This is done by providing a path to your assembly: <ph id="ph1">`dotnet path/to/an/assembly.dll`</ph>.</source>
          <target state="translated">Для этого нужно указать путь к сборке: <ph id="ph1">`dotnet path/to/an/assembly.dll`</ph>.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Migrating your DNX project to .NET Core CLI</source>
          <target state="translated">Перенос проекта DNX в CLI .NET Core</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>In addition to using new commands when working with your code, there are three major things left in migrating from DNX:</source>
          <target state="translated">Помимо использования новых команд для работы с кодом, переход с DNX также требует выполнения еще трех важных действий:</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Migrate the <ph id="ph1">`global.json`</ph> file if you have it to be able to use CLI.</source>
          <target state="translated">перенос файла <ph id="ph1">`global.json`</ph>, если он должен использовать CLI;</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Migrating the project file (<ph id="ph1">`project.json`</ph>) itself to the CLI tooling.</source>
          <target state="translated">перенос самого файла проекта (<ph id="ph1">`project.json`</ph>) в инструментарий CLI;</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Migrating off of any DNX APIs to their BCL counterparts.</source>
          <target state="translated">переход с интерфейсов API среды DNX на их аналоги в BCL.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Changing the global.json file</source>
          <target state="translated">Изменение файла global.json</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`global.json`</ph> file acts like a solution file for both the RC1 and RC2 (or later) projects.</source>
          <target state="translated">Файл <ph id="ph1">`global.json`</ph> выступает в роли файла решения как для проектов версии-кандидата 1, так и для проектов версии-кандидата 2 (или более поздней версии).</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>In order for the CLI tools (as well as Visual Studio) to differentiate between RC1 and later versions, they use the <ph id="ph1">`"sdk": { "version" }`</ph> property to make the distinction which project is RC1 or later.</source>
          <target state="translated">Для различения проектов версии-кандидата 1 и проектов более поздних версий средства CLI (а также Visual Studio) используют свойство <ph id="ph1">`"sdk": { "version" }`</ph>.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`global.json`</ph> doesn't have this node at all, it is assumed to be the latest.</source>
          <target state="translated">Если в файле <ph id="ph1">`global.json`</ph> вообще нет этого узла, предполагается, что проект относится к последней версии.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>In order to update the <ph id="ph1">`global.json`</ph> file, either remove the property or set it to the exact version of the tools that you wish to use, in this case <bpt id="p1">**</bpt>1.0.0-preview2-003121<ept id="p1">**</ept>:</source>
          <target state="translated">Чтобы обновить файл <ph id="ph1">`global.json`</ph>, удалите это свойство или задайте в качестве его значения точную версию средств, которую необходимо использовать. В данном случае это версия <bpt id="p1">**</bpt>1.0.0-preview2-003121<ept id="p1">**</ept>:</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Migrating the project file</source>
          <target state="translated">Перенос файл проекта</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The CLI and DNX both use the same basic project system based on <ph id="ph1">`project.json`</ph> file.</source>
          <target state="translated">Интерфейс CLI и среда DNX используют одну и ту же базовую систему проектов, основанную на файле <ph id="ph1">`project.json`</ph>.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The syntax and the semantics of the project file are pretty much the same, with small differences based on the scenarios.</source>
          <target state="translated">Синтаксис и семантика файла проекта в целом совпадают, за небольшими исключениями в некоторых ситуациях.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>There are also some changes to the schema which you can see in the <bpt id="p1">[</bpt>schema file<ept id="p1">](http://json.schemastore.org/project)</ept> or in a more friendly <bpt id="p2">[</bpt>project.json reference<ept id="p2">](tools/project-json.md)</ept>.</source>
          <target state="translated">Есть также небольшие изменения в схеме, с которыми можно ознакомиться в <bpt id="p1">[</bpt>файле схемы<ept id="p1">](http://json.schemastore.org/project)</ept> или в <bpt id="p2">[</bpt>справочнике по файлу project.json<ept id="p2">](tools/project-json.md)</ept>, в котором они представлены в более понятной форме.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>If you are building a console application, you need to add the following snippet to your project file:</source>
          <target state="translated">Если вы создаете консольное приложение, в файл проекта нужно добавить следующий фрагмент кода:</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>This instructs <ph id="ph1">`dotnet build`</ph> to emit an entry point for your application, effectively making your code runnable.</source>
          <target state="translated">Он предписывает команде <ph id="ph1">`dotnet build`</ph> создать точку входа для приложения, что делает код готовым к выполнению.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>If you are building a class library, simply omit the above section.</source>
          <target state="translated">Если вы создаете библиотеку классов, просто опустите приведенный выше раздел.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Of course, once you add the above snippet to your <ph id="ph1">`project.json`</ph> file, you need to add a static entry point.</source>
          <target state="translated">Само собой, после добавления приведенного выше фрагмента в файл <ph id="ph1">`project.json`</ph> необходимо добавить статическую точку входа.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>With the move off DNX, the DI services it provided are no longer available and thus this needs to be a basic .NET entry point: <ph id="ph1">`static void Main()`</ph>.</source>
          <target state="translated">После перехода с DNX предоставляемые этой средой службы DI становятся недоступны, поэтому это должна быть базовая точка входа .NET: <ph id="ph1">`static void Main()`</ph>.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>If you have a "commands" section in your <ph id="ph1">`project.json`</ph>, you can remove it.</source>
          <target state="translated">Если в файле <ph id="ph1">`project.json`</ph> есть раздел commands, его можно удалить.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Some of the commands that used to exist as DNU commands, such as Entity Framework CLI commands, are being ported to be per-project extensions to the CLI.</source>
          <target state="translated">Некоторые команды, которые существовали как команды DNU, например команды интерфейса CLI для Entity Framework, переносятся в CLI как расширения на уровне отдельных проектов.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>If you built your own commands that you are using in your projects, you need to replace them with CLI extensions.</source>
          <target state="translated">Если вы создали собственные команды, которые используете в проектах, то их надо заменить на расширения CLI.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>In this case, the <ph id="ph1">`commands`</ph> node in <ph id="ph2">`project.json`</ph> needs to be replaced by the <ph id="ph3">`tools`</ph> node and it needs to list the tools dependencies as explained in the <bpt id="p1">[</bpt>CLI extensibility section<ept id="p1">](tools/index.md#extensibility)</ept>.</source>
          <target state="translated">В этом случае узел <ph id="ph1">`commands`</ph> в файле <ph id="ph2">`project.json`</ph> необходимо заменить на узел <ph id="ph3">`tools`</ph>, в котором должны быть перечислены зависимости средств, как описано в <bpt id="p1">[</bpt>разделе, посвященном расширяемости CLI<ept id="p1">](tools/index.md#extensibility)</ept>.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>After these things are done, you need to decide which type of portability you wish for you app.</source>
          <target state="translated">После выполнения этих действий необходимо решить, какой тип переносимости требуется для приложения.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>With .NET Core, we have invested into providing a spectrum of portability options that you can choose from.</source>
          <target state="translated">В .NET Core мы реализовали целый спектр вариантов переносимости.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>For instance, you may want to have a fully <bpt id="p1">*</bpt>portable<ept id="p1">*</ept> application or you may want to have a <bpt id="p2">*</bpt>self-contained<ept id="p2">*</ept> application.</source>
          <target state="translated">Например, приложение может быть полностью <bpt id="p1">*</bpt>переносимым<ept id="p1">*</ept> или <bpt id="p2">*</bpt>автономным<ept id="p2">*</ept>.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The portable application option is more like .NET Framework applications work: it needs a shared component to execute it on the target machine (.NET Core).</source>
          <target state="translated">Переносимое приложение работает примерно так же, как приложение .NET Framework: ему требуется общий компонент для выполнения на целевом компьютере (.NET Core).</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The self-contained application doesn't require .NET Core to be installed on the target, but you have to produce one application for each OS you wish to support.</source>
          <target state="translated">Автономное приложение не требует установки среды .NET Core на целевом компьютере, но для каждой поддерживаемой ОС необходимо создать отдельное приложение.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>These portability types and more are discussed in the <bpt id="p1"> [</bpt>application portability type<ept id="p1">](deploying/index.md)</ept> document.</source>
          <target state="translated">Эти и другие типы переносимости рассматриваются в документе, посвященном <bpt id="p1"> [</bpt>типам переносимости приложений<ept id="p1">](deploying/index.md)</ept>.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Once you make a call on what type of portability you want, you need to change your targeted framework(s).</source>
          <target state="translated">Выбрав нужный тип переносимости, необходимо изменить целевые платформы.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>If you were writing applications for .NET Core, you were most likely using <ph id="ph1">`dnxcore50`</ph> as  your targeted framework.</source>
          <target state="translated">Если вы создавали приложения для .NET Core, то, скорее всего, использовали <ph id="ph1">`dnxcore50`</ph> в качестве целевой платформы.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>With the CLI and the changes that the new <bpt id="p1">[</bpt>.NET Standard Library<ept id="p1">](https://github.com/dotnet/corefx/blob/master/Documentation/architecture/net-platform-standard.md)</ept> brought, the framework needs to be one of the following:</source>
          <target state="translated">В контексте CLI и изменений, связанных с <bpt id="p1">[</bpt>библиотекой .NET Standard<ept id="p1">](https://github.com/dotnet/corefx/blob/master/Documentation/architecture/net-platform-standard.md)</ept>, необходимо использовать одну из следующих платформ:</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`netcoreapp1.0`</ph> - if you are writing applications on .NET Core (including ASP.NET Core applications)</source>
          <target state="translated"><ph id="ph1">`netcoreapp1.0`</ph> — если вы создаете приложения в .NET (включая приложения ASP.NET Core);</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`netstandard1.6`</ph> - if you are writing class libraries for .NET Core</source>
          <target state="translated"><ph id="ph1">`netstandard1.6`</ph> — если вы создаете библиотеки классов для .NET Core.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>If you are using other <ph id="ph1">`dnx`</ph> targets, like <ph id="ph2">`dnx451`</ph> you will need to change those as well.</source>
          <target state="translated">При использовании других целевых платформ <ph id="ph1">`dnx`</ph>, например <ph id="ph2">`dnx451`</ph>, их также необходимо изменить.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`dnx451`</ph> should be changed to <ph id="ph2">`net451`</ph>.</source>
          <target state="translated"><ph id="ph2">`net451`</ph> следует изменить на <ph id="ph1">`dnx451`</ph>.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Please refer to the <bpt id="p1">[</bpt>.NET Standard Library document<ept id="p1">](https://github.com/dotnet/corefx/blob/master/Documentation/architecture/net-platform-standard.md)</ept> for more information.</source>
          <target state="translated">Дополнительные сведения см. в документе по <bpt id="p1">[</bpt>библиотеке .NET Standard<ept id="p1">](https://github.com/dotnet/corefx/blob/master/Documentation/architecture/net-platform-standard.md)</ept>.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Your <ph id="ph1">`project.json`</ph> is now mostly ready.</source>
          <target state="translated">Ваш файл <ph id="ph1">`project.json`</ph> в основном готов.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>You need to go through your dependencies list and update the dependencies to their newer versions, especially if you are using ASP.NET Core dependencies.</source>
          <target state="translated">Теперь нужно проверить список зависимостей и обновить их до более новых версий, особенно если вы используете зависимости ASP.NET Core.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>If you were using separate packages for BCL APIs, you can use the runtime package as explained in the <bpt id="p1">[</bpt>application portability type<ept id="p1">](deploying/index.md)</ept> document.</source>
          <target state="translated">Если вы применяли отдельные пакеты для интерфейсов API BCL, то можете использовать пакет среды выполнения, как описано в документе, посвященном <bpt id="p1">[</bpt>типам переносимости приложений<ept id="p1">](deploying/index.md)</ept>.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Once you are ready, you can try restoring with <ph id="ph1">`dotnet restore`</ph>.</source>
          <target state="translated">Когда вы будете готовы, можно попробовать выполнить восстановление с помощью команды <ph id="ph1">`dotnet restore`</ph>.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Depending on the version of your dependencies, you may encounter errors if NuGet cannot resolve the dependencies for one of the targeted frameworks above.</source>
          <target state="translated">В зависимости от версии зависимостей могут возникнуть ошибки, если системе NuGet не удастся разрешить зависимости для одной из перечисленных выше целевых платформ.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>This is a "point-in-time" problem; as time progresses, more and more packages will include support for these frameworks.</source>
          <target state="translated">Это временная проблема: со временем все большее число пакетов будет поддерживать эти платформы.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>For now, if you run into this, you can use the <ph id="ph1">`imports`</ph> statement within the <ph id="ph2">`framework`</ph> node to specify to NuGet that it can restore the packages targeting the framework within the "imports" statement.</source>
          <target state="translated">Пока же вы можете использовать оператор <ph id="ph1">`imports`</ph> в узле <ph id="ph2">`framework`</ph>, чтобы сообщить системе NuGet, что она может восстановить указанные в этом операторе пакеты, предназначенные для соответствующей платформы.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The restoring errors you get in this case should provide enough information to tell you which frameworks you need to import.</source>
          <target state="translated">В этом случае при возникновении ошибок восстановления вы должны получить достаточно информации, чтобы понять, какие платформы следует импортировать.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>If you are slightly lost or new to this, in general, specifying <ph id="ph1">`dnxcore50`</ph> and <ph id="ph2">`portable-net45+win8`</ph> in the <ph id="ph3">`imports`</ph> statement should do the trick.</source>
          <target state="translated">Если вы немного запутались в этом, то просто помните, что, как правило, указание платформ <ph id="ph1">`dnxcore50`</ph> и <ph id="ph2">`portable-net45+win8`</ph> в операторе <ph id="ph3">`imports`</ph> позволяет добиться желаемого результата.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The JSON snippet below shows how this looks like:</source>
          <target state="translated">В приведенном ниже фрагменте кода в формате JSON показано, как это должно выглядеть.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Running <ph id="ph1">`dotnet build`</ph> will show any eventual build errors, though there shouldn't be too many of them.</source>
          <target state="translated">При выполнении <ph id="ph1">`dotnet build`</ph> будут выведены все итоговые ошибки сборки, хотя их не должно быть много.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>After your code is building and running properly, you can test it out with the runner.</source>
          <target state="translated">После того как код будет собран и будет правильно выполняться, вы можете протестировать его с помощью средства запуска.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Execute <ph id="ph1">`dotnet &lt;path-to-your-assembly&gt;`</ph> and see it run.</source>
          <target state="translated">Выполните команду <ph id="ph1">`dotnet &lt;path-to-your-assembly&gt;`</ph> и понаблюдайте за выполнением.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>