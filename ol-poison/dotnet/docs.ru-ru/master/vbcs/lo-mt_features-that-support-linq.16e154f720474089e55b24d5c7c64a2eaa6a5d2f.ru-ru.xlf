<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3bca15a07a88195589b9c9de5f9842eea42912f1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\linq\features-that-support-linq.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f5e1abe3f7b181cf54800f1df0e8469b67a68679</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">51e2853e5c347f4876ecde17a06a7497bf97eeb6</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Handback file name: lo-mt_features-that-support-linq.16e154f720474089e55b24d5c7c64a2eaa6a5d2f.ru-ru is different with handoff file name: features-that-support-linq.16e154f720474089e55b24d5c7c64a2eaa6a5d2f.ru-ru.</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Visual Basic Features That Support LINQ | Microsoft Docs</source>
          <target state="translated">Возможности Visual Basic, поддерживающие LINQ | Документы Microsoft</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Visual Basic Features That Support LINQ</source>
          <target state="translated">Возможности Visual Basic, поддерживающие LINQ</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The name <ph id="ph1">[!INCLUDE[vbteclinqext](../../../../csharp/getting-started/includes/vbteclinqext_md.md)]</ph> refers to technology in Visual Basic that supports query syntax and other language constructs directly in the language.</source>
          <target state="translated">Имя <ph id="ph1">[!INCLUDE[vbteclinqext](../../../../csharp/getting-started/includes/vbteclinqext_md.md)]</ph> называют технологию в Visual Basic, поддержки синтаксиса запроса и других новых языковых конструкций непосредственно в языке.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>With <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph>, you do not have to learn a new language to query against an external data source.</source>
          <target state="translated">С <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph>, нет необходимости изучать новый язык для запросов к внешнему источнику данных.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You can query against data in relational databases, XML stores, or objects by using Visual Basic.</source>
          <target state="translated">Выполнять запросы к данным в реляционных базах данных, хранилища XML или объекты с помощью Visual Basic.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This integration of query capabilities into the language enables compile-time checking for syntax errors and type safety.</source>
          <target state="translated">Такая интеграция возможностей запроса в язык включает проверку ошибок синтаксиса и безопасность типов во время компиляции.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This integration also ensures that you already know most of what you have to know to write rich, varied queries in Visual Basic.</source>
          <target state="translated">Такая интеграция также гарантирует, что знаете, большая часть нужно знать для написания насыщенных и разнообразных запросов в Visual Basic.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The following sections describe the language constructs that support LINQ in enough detail to enable you to get started in reading the introductory documentation, code examples, and sample applications.</source>
          <target state="translated">В следующих разделах описаны языковые конструкции, которые поддерживают LINQ достаточно подробно, чтобы вы могли начать с чтения вводной документация, примеры и образцы приложений.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You can also click the links to find more detailed explanations of how the language features come together to enable language-integrated query.</source>
          <target state="translated">Можно также щелкнуть ссылок, чтобы найти более подробные пояснения о возможности языка совокупности интегрированный язык запросов.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A good place to start is <bpt id="p1">[</bpt>Walkthrough: Writing Queries in Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/walkthrough-writing-queries.md)</ept>.</source>
          <target state="translated">Является неплохим началом <bpt id="p1">[</bpt>Пошаговое руководство: написание запросов в Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/walkthrough-writing-queries.md)</ept>.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Query Expressions</source>
          <target state="translated">Выражения запросов</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Query expressions in Visual Basic can be expressed in a declarative syntax similar to that of SQL or XQuery.</source>
          <target state="translated">Выражения запросов в Visual Basic могут быть выражены в декларативном синтаксисе, похожем на SQL или XQuery.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>At compile time, query syntax is converted into method calls to a LINQ provider's implementation of the standard query operator extension methods.</source>
          <target state="translated">Во время компиляции синтаксис запроса преобразуется в вызовы методов для реализации методов стандартных операторов запросов расширения поставщика LINQ.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Applications control which standard query operators are in scope by specifying the appropriate namespace with an <ph id="ph1">`Imports`</ph> statement.</source>
          <target state="translated">Приложения управляют стандартных операторов запроса находятся в области действия, путем указания соответствующего пространства имен с <ph id="ph1">`Imports`</ph> инструкции.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Syntax for a Visual Basic query expression looks like this:</source>
          <target state="translated">Синтаксис выражения запроса Visual Basic выглядит следующим образом:</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQVbFeatures#1<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/features-that-support-linq_1.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQVbFeatures&amp;#1;<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/features-that-support-linq_1.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Introduction to LINQ in Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/language-features/linq/introduction-to-linq.md)</ept>.</source>
          <target state="translated">Дополнительные сведения см. в разделе <bpt id="p1">[</bpt>введения в LINQ в Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/language-features/linq/introduction-to-linq.md)</ept>.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Implicitly Typed Variables</source>
          <target state="translated">Неявно типизированные переменные</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Instead of explicitly specifying a type when you declare and initialize a variable, you can enable the compiler to infer and assign the type.</source>
          <target state="translated">Вместо явного задания типа при объявлении и инициализации переменной, можно разрешить компилятору определить и назначить тип.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This is referred to as <bpt id="p1">*</bpt>local type inference<ept id="p1">*</ept>.</source>
          <target state="translated">Это называется <bpt id="p1">*</bpt>вывод локального типа<ept id="p1">*</ept>.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Variables whose types are inferred are strongly typed, just like variables whose type you specify explicitly.</source>
          <target state="translated">Переменные, типы которых выводятся строго типизированы, так же, как переменные, необходимо явно указать тип.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Local type inference works only when you are defining a local variable inside a method body.</source>
          <target state="translated">Вывод локального типа работает только при определении локальной переменной внутри тела метода.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Option Infer Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/option-infer-statement.md)</ept> and <bpt id="p2">[</bpt>Local Type Inference<ept id="p2">](../../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)</ept>.</source>
          <target state="translated">Дополнительные сведения см. в разделе <bpt id="p1">[</bpt>Option Infer оператор<ept id="p1">](../../../../visual-basic/language-reference/statements/option-infer-statement.md)</ept> и <bpt id="p2">[</bpt>вывод локального типа<ept id="p2">](../../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)</ept>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The following example illustrates local type inference.</source>
          <target state="translated">В следующем примере показано определение локального типа.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>To use this example, you must set <ph id="ph1">`Option Infer`</ph> to <ph id="ph2">`On`</ph>.</source>
          <target state="translated">Чтобы использовать этот пример, необходимо установить <ph id="ph1">`Option Infer`</ph> в <ph id="ph2">`On`</ph>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQVbFeatures#2<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/features-that-support-linq_2.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQVbFeatures&amp;#2;<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/features-that-support-linq_2.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Local type inference also makes it possible to create anonymous types, which are described later in this section and are necessary for LINQ queries.</source>
          <target state="translated">Вывод локального типа также дает возможность создавать анонимные типы, которые описаны далее в этом разделе и необходимых для запросов LINQ.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In the following LINQ example, type inference occurs if <ph id="ph1">`Option Infer`</ph> is either <ph id="ph2">`On`</ph> or <ph id="ph3">`Off`</ph>.</source>
          <target state="translated">В следующем примере LINQ определение типа происходит, если <ph id="ph1">`Option Infer`</ph> либо <ph id="ph2">`On`</ph> или <ph id="ph3">`Off`</ph>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>A compile-time error occurs if <ph id="ph1">`Option Infer`</ph> is <ph id="ph2">`Off`</ph> and <ph id="ph3">`Option Strict`</ph> is <ph id="ph4">`On`</ph>.</source>
          <target state="translated">Ошибка времени компиляции возникает, если <ph id="ph1">`Option Infer`</ph> — <ph id="ph2">`Off`</ph> и <ph id="ph3">`Option Strict`</ph> — <ph id="ph4">`On`</ph>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQVbFeatures#3<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/features-that-support-linq_3.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQVbFeatures&amp;#3;<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/features-that-support-linq_3.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Object Initializers</source>
          <target state="translated">Инициализаторы объектов</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Object initializers are used in query expressions when you have to create an anonymous type to hold the results of a query.</source>
          <target state="translated">Инициализаторы объектов используются в выражениях запросов, когда необходимо создать анонимный тип для хранения результатов запроса.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>They also can be used to initialize objects of named types outside of queries.</source>
          <target state="translated">Они также могут использоваться для инициализации объектов с именованными типами за пределами запросов.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>By using an object initializer, you can initialize an object in a single line without explicitly calling a constructor.</source>
          <target state="translated">С помощью инициализатора объектов, можно инициализировать объект в одной строке без явного вызова конструктора.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Assuming that you have a class named <ph id="ph1">`Customer`</ph> that has public <ph id="ph2">`Name`</ph> and <ph id="ph3">`Phone`</ph> properties, along with other properties, an object initializer can be used in this manner:</source>
          <target state="translated">Предположим, что имеется класс с именем <ph id="ph1">`Customer`</ph> , имеющий открытые <ph id="ph2">`Name`</ph> и <ph id="ph3">`Phone`</ph> свойства, вместе с другими свойствами, таким образом можно использовать инициализатор объектов:</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQVbFeatures#4<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/features-that-support-linq_4.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQVbFeatures&amp;#4;<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/features-that-support-linq_4.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Object Initializers: Named and Anonymous Types<ept id="p1">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/object-initializers-named-and-anonymous-types.md)</ept>.</source>
          <target state="translated">Дополнительные сведения см. в разделе <bpt id="p1">[</bpt>инициализаторы объектов: именованные и анонимные типы<ept id="p1">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/object-initializers-named-and-anonymous-types.md)</ept>.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Anonymous Types</source>
          <target state="translated">Анонимные типы</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Anonymous types provide a convenient way to temporarily group a set of properties into an element that you want to include in a query result.</source>
          <target state="translated">Анонимные типы предоставляют удобный способ временной группировки набора свойств в элемент, который требуется включить в результат запроса.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This enables you to choose any combination of available fields in the query, in any order, without defining a named data type for the element.</source>
          <target state="translated">Это позволяет выбрать любое сочетание доступных полей в запросе, в любом порядке, без определения именованных типов данных для элемента.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">*</bpt>anonymous type<ept id="p1">*</ept> is constructed dynamically by the compiler.</source>
          <target state="translated"><bpt id="p1">*</bpt>Анонимного типа<ept id="p1">*</ept> динамически создается компилятором.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The name of the type is assigned by the compiler, and it might change with each new compilation.</source>
          <target state="translated">Имя типа назначается компилятором и оно может изменяться при каждой новой компиляции.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Therefore, the name cannot be used directly.</source>
          <target state="translated">Поэтому имя не может использоваться непосредственно.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Anonymous types are initialized in the following way:</source>
          <target state="translated">Анонимные типы инициализируются следующим образом:</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQVbFeatures#5<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/features-that-support-linq_5.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQVbFeatures&amp;#5;<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/features-that-support-linq_5.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Anonymous Types<ept id="p1">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/anonymous-types.md)</ept>.</source>
          <target state="translated">Дополнительные сведения см. в разделе <bpt id="p1">[</bpt>анонимные типы<ept id="p1">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/anonymous-types.md)</ept>.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Extension Methods</source>
          <target state="translated">Методы расширения</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Extension methods enable you to add methods to a data type or interface from outside the definition.</source>
          <target state="translated">Методы расширения позволяют добавлять методы к типу данных или интерфейсу вне определения.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This feature enables you to, in effect, add new methods to an existing type without actually modifying the type.</source>
          <target state="translated">Эта возможность позволяет, по сути, добавить новые методы в существующий тип без фактического изменения.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The standard query operators are themselves a set of extension methods that provide <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> query functionality for any type that implements &lt;xref:System.Collections.Generic.IEnumerable%601&gt;.</source>
          <target state="translated">Стандартные операторы запросов являются набором методов расширения, обеспечивающие <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> функциональные возможности для любого типа, реализующего &lt;xref:System.Collections.Generic.IEnumerable%601&gt;.&lt;/xref:System.Collections.Generic.IEnumerable%601&gt; запроса</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Other extensions to &lt;xref:System.Collections.Generic.IEnumerable%601&gt; include &lt;xref:System.Linq.Enumerable.Count%2A&gt;, &lt;xref:System.Linq.Enumerable.Union%2A&gt;, and &lt;xref:System.Linq.Enumerable.Intersect%2A&gt;.</source>
          <target state="translated">Другие расширения &lt;xref:System.Collections.Generic.IEnumerable%601&gt;включают &lt;xref:System.Linq.Enumerable.Count%2A&gt;, &lt;xref:System.Linq.Enumerable.Union%2A&gt;и &lt;xref:System.Linq.Enumerable.Intersect%2A&gt;.&lt;/xref:System.Linq.Enumerable.Intersect%2A&gt; &lt;/xref:System.Linq.Enumerable.Union%2A&gt; &lt;/xref:System.Linq.Enumerable.Count%2A&gt; &lt;/xref:System.Collections.Generic.IEnumerable%601&gt;</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The following extension method adds a print method to the &lt;xref:System.String&gt; class.</source>
          <target state="translated">Следующий метод расширения добавляет метод печати в &lt;xref:System.String&gt;класс.&lt;/xref:System.String&gt;</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQVbFeatures#6<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/features-that-support-linq_6.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQVbFeatures №&amp;6;<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/features-that-support-linq_6.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The method is called like an ordinary instance method of &lt;xref:System.String&gt;:</source>
          <target state="translated">Метод вызывается как обычный метод экземпляра &lt;xref:System.String&gt;:&lt;/xref:System.String&gt;</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQVbFeatures#7<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/features-that-support-linq_7.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQVbFeatures&amp;#7;<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/features-that-support-linq_7.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Extension Methods<ept id="p1">](../../../../visual-basic/programming-guide/language-features/procedures/extension-methods.md)</ept>.</source>
          <target state="translated">Дополнительные сведения см. в разделе <bpt id="p1">[</bpt>методы расширения<ept id="p1">](../../../../visual-basic/programming-guide/language-features/procedures/extension-methods.md)</ept>.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Lambda Expressions</source>
          <target state="translated">Лямбда-выражения</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>A lambda expression is a function without a name that calculates and returns a single value.</source>
          <target state="translated">Лямбда-выражения является функцией без имени, которая вычисляет и возвращает одиночное значение.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Unlike named functions, a lambda expression can be defined and executed at the same time.</source>
          <target state="translated">В отличие от именованных функций лямбда-выражение может быть определен и выполняется в то же время.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The following example displays 4.</source>
          <target state="translated">Следующий пример выводит 4.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQVbFeatures#8<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/features-that-support-linq_8.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQVbFeatures №&amp;8;<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/features-that-support-linq_8.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>You can assign the lambda expression definition to a variable name and then use the name to call the function.</source>
          <target state="translated">Можно присвоить определение лямбда-выражения имени переменной и затем использовать имя для вызова функции.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The following example also displays 4.</source>
          <target state="translated">Следующий пример выводит 4.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQVbFeatures#12<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/features-that-support-linq_9.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQVbFeatures&amp;#12;<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/features-that-support-linq_9.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph>, lambda expressions underlie many of the standard query operators.</source>
          <target state="translated">В <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph>, лямбда-выражения лежат в основе многих стандартных операторов запроса.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The compiler creates lambda expressions to capture the calculations that are defined in fundamental query methods such as <ph id="ph1">`Where`</ph>, <ph id="ph2">`Select`</ph>, <ph id="ph3">`Order By`</ph>, <ph id="ph4">`Take While`</ph>, and others.</source>
          <target state="translated">Компилятор создает лямбда-выражения для записи вычислений, определенных в основных методах запроса, таких как <ph id="ph1">`Where`</ph>, <ph id="ph2">`Select`</ph>, <ph id="ph3">`Order By`</ph>, <ph id="ph4">`Take While`</ph>и др.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>For example, the following code defines a query that returns all senior students from a list of students.</source>
          <target state="translated">Например следующий код определяет запрос, который возвращает всех выпускников из списка студентов.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQVbFeatures#9<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/features-that-support-linq_10.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQVbFeatures №&amp;9;<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/features-that-support-linq_10.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The query definition is compiled into code that is similar to the following example, which uses two lambda expressions to specify the arguments for <ph id="ph1">`Where`</ph> and <ph id="ph2">`Select`</ph>.</source>
          <target state="translated">Определение запроса компилируется в код, аналогичный приведенному ниже, который использует два лямбда-выражения для определения аргументов для <ph id="ph1">`Where`</ph> и <ph id="ph2">`Select`</ph>.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQVbFeatures#10<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/features-that-support-linq_11.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQVbFeatures&amp;#10;<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/features-that-support-linq_11.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Either version can be run by using a <ph id="ph1">`For Each`</ph> loop:</source>
          <target state="translated">Любой из версий, которые можно выполнять с помощью <ph id="ph1">`For Each`</ph> цикла:</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQVbFeatures#11<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/features-that-support-linq_12.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbLINQVbFeatures&amp;11;<ept id="p2">](../../../../visual-basic/programming-guide/concepts/linq/codesnippet/VisualBasic/features-that-support-linq_12.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Lambda Expressions<ept id="p1">](../../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)</ept>.</source>
          <target state="translated">Дополнительные сведения см. в разделе <bpt id="p1">[</bpt>лямбда-выражения<ept id="p1">](../../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)</ept>.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">См. также</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Language-Integrated Query (LINQ) (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/index.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Интегрированный в язык запрос (LINQ) (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/index.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Getting Started with LINQ in Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/getting-started-with-linq.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Приступая к работе с LINQ в Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/getting-started-with-linq.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>LINQ and Strings (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/linq-and-strings.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>LINQ и строки (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/linq-and-strings.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Option Infer Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/option-infer-statement.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Оператор Option Infer<ept id="p1">](../../../../visual-basic/language-reference/statements/option-infer-statement.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Option Strict Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/option-strict-statement.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>Оператор Option Strict<ept id="p1">](../../../../visual-basic/language-reference/statements/option-strict-statement.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>