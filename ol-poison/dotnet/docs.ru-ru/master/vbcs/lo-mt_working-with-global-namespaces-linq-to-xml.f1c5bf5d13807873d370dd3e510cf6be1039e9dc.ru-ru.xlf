<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e20d0c0b670d63ebe2be137a48dc1a1a9a861b9f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\linq\working-with-global-namespaces-linq-to-xml.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0b010bc7f6108c589fd01051178e84abc5f60da4</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">048484c76bb61bc8958b394500bd64f240f71704</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Handback file name: lo-mt_working-with-global-namespaces-linq-to-xml.f1c5bf5d13807873d370dd3e510cf6be1039e9dc.ru-ru is different with handoff file name: working-with-global-namespaces-linq-to-xml.f1c5bf5d13807873d370dd3e510cf6be1039e9dc.ru-ru.</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Working with Global Namespaces (Visual Basic) (LINQ to XML) | Microsoft Docs</source>
          <target state="translated">Работа с глобальными пространствами имен (Visual Basic) (LINQ to XML) | Документы Microsoft</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Working with Global Namespaces (Visual Basic) (LINQ to XML)</source>
          <target state="translated">Работа с глобальными пространствами имен (Visual Basic) (LINQ to XML)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>One of the key features of XML literals in Visual Basic is the capability to declare XML namespaces by using the <ph id="ph1">`Imports`</ph> statement.</source>
          <target state="translated">Одной из ключевых особенностей XML-литералов в Visual Basic является возможность объявлять пространства имен XML с помощью <ph id="ph1">`Imports`</ph> инструкции.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Using this feature, you can declare an XML namespace that uses a prefix, or you can declare a default XML namespace.</source>
          <target state="translated">Используя эту возможность, можно объявить либо пространство имен XML, использующее префикс, либо пространство имен XML по умолчанию.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This capability is useful in two situations.</source>
          <target state="translated">Данная возможность полезна в двух ситуациях.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>First, namespaces declared in XML literals do not carry over into embedded expressions.</source>
          <target state="translated">Во-первых, пространства имен, объявленные в XML-литералах, не переносятся во внедренные выражения.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Declaring global namespaces reduces the amount of work that you have to do to use embedded expressions with namespaces.</source>
          <target state="translated">Применение деклараций глобальных пространств имен способствует снижению объема работы, которую необходимо выполнить в целях использования внедренных выражений с пространствами имен.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Second, you must declare global namespaces in order to use namespaces with XML properties.</source>
          <target state="translated">Во-вторых, необходимо объявить глобальные пространства имен в целях использования пространств имен с XML-свойствами.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You can declare global namespaces at the project level.</source>
          <target state="translated">Глобальные пространства имен можно объявлять на уровне проекта.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You can also declare global namespaces at the module level, which overrides the project-level global namespaces.</source>
          <target state="translated">Глобальные пространства имен можно также объявить на уровне модуля, что приводит к переопределению глобальных пространств имен уровня проекта.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Finally, you can override global namespaces in an XML literal.</source>
          <target state="translated">Наконец, можно переопределить глобальные пространства имен в XML-литерале.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>When using XML literals or XML properties that are in globally-declared namespaces, you can see the expanded name of XML literals or properties by hovering over them in Visual Studio.</source>
          <target state="translated">При использовании XML-литералов или XML-свойств, находящихся в пространствах имен, объявленных глобально, можно видеть развернутое имя XML-литералов или свойств при наведении на них курсора в Visual Studio.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You will see the expanded name in a tooltip.</source>
          <target state="translated">Развернутое имя отобразится в подсказке.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You can get an &lt;xref:System.Xml.Linq.XNamespace&gt; object that corresponds to a global namespace using the <ph id="ph1">`GetXmlNamespace`</ph> method.</source>
          <target state="translated">Можно получить &lt;xref:System.Xml.Linq.XNamespace&gt;объекта, который соответствует глобальное пространство имен с помощью <ph id="ph1">`GetXmlNamespace`</ph> метод.&lt;/xref:System.Xml.Linq.XNamespace&gt;</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Examples of Global Namespaces</source>
          <target state="translated">Примеры глобальных пространств имен</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The following example declares a default global namespace by using the <ph id="ph1">`Imports`</ph> statement, and then uses an XML literal to initialize an &lt;xref:System.Xml.Linq.XElement&gt; object in that namespace:</source>
          <target state="translated">В следующем примере объявляется глобальное пространство имен по умолчанию с помощью <ph id="ph1">`Imports`</ph> инструкции, а затем используется XML-литерал для инициализации &lt;xref:System.Xml.Linq.XElement&gt;объект в этом пространстве имен:&lt;/xref:System.Xml.Linq.XElement&gt;</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This example produces the following output:</source>
          <target state="translated">В этом примере выводятся следующие данные:</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The following example declares a global namespace with a prefix, and then uses an XML literal to initialize an element:</source>
          <target state="translated">В следующем примере объявляется глобальное пространство имен с префиксом, а затем используется XML-литерал для инициализации элемента:</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This example produces the following output:</source>
          <target state="translated">В этом примере выводятся следующие данные:</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Global Namespaces and Embedded Expressions</source>
          <target state="translated">Глобальные пространства имен и внедренные выражения</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Namespaces that are declared in XML literals do not carry over into embedded expressions.</source>
          <target state="translated">Пространства имен, объявленные в XML-литералах, не переносятся во внедренные выражения.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The following example declares a default namespace.</source>
          <target state="translated">В следующем примере объявляется пространство имен по умолчанию.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>It then uses an embedded expression for the <ph id="ph1">`Child`</ph> element.</source>
          <target state="translated">Затем в нем используется внедренное выражение для элемента <ph id="ph1">`Child`</ph>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This example produces the following output:</source>
          <target state="translated">В этом примере выводятся следующие данные:</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>As you can see, the resulting XML includes a declaration of a default namespace so that the <ph id="ph1">`Child`</ph> element is in no namespace.</source>
          <target state="translated">Очевидно, что результирующий XML включает декларацию пространства имен по умолчанию, так что элемент <ph id="ph1">`Child`</ph> находится вне пространства имен.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You could re-declare the namespace in the embedded expression, as follows:</source>
          <target state="translated">Можно повторно объявить пространство имен во внедренном выражении следующим образом:</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This example produces the following output:</source>
          <target state="translated">В этом примере выводятся следующие данные:</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>However, this is more cumbersome to use than the global default namespace, which is a better approach.</source>
          <target state="translated">Однако это более сложный и менее выгодный способ по сравнению с использованием глобального пространства имен по умолчанию.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>With the global default namespace, you can use XML literals without declaring namespaces.</source>
          <target state="translated">При наличии глобального пространства имен по умолчанию при использовании XML-литералов можно не декларировать пространства имен.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The resulting XML will be in the globally-declared default namespace.</source>
          <target state="translated">Результирующий XML будет находиться в пространстве имен, объявленном глобально.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This example produces the following output:</source>
          <target state="translated">В этом примере выводятся следующие данные:</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Using Namespaces with XML Properties</source>
          <target state="translated">Использование пространств имен с XML-свойствами</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If you are working with an XML tree that is in a namespace, and you use XML properties, then you must use a global namespace so that the XML properties will also be in the correct namespace.</source>
          <target state="translated">При работе с XML-деревом, находящимся в пространстве имен, и использовании XML-свойств необходимо использовать глобальное пространство имен, чтобы XML-свойства также находились в правильно заданном пространстве имен.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The following example declares an XML tree in a namespace.</source>
          <target state="translated">В следующем примере объявляется XML-дерево в пространстве имен.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>It then prints the count of <ph id="ph1">`Child`</ph> elements.</source>
          <target state="translated">Затем в нем происходит вывод на печать числа элементов <ph id="ph1">`Child`</ph>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This example indicates that there are no <ph id="ph1">`Child`</ph> elements.</source>
          <target state="translated">Данный пример указывает на отсутствие элементов <ph id="ph1">`Child`</ph>.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>It produces the following output:</source>
          <target state="translated">Выводятся следующие результаты:</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If, however, you declare a default global namespace, then both the XML literal and the XML property are in the default global namespace:</source>
          <target state="translated">Однако после объявления глобального пространства имен по умолчанию в нем будут находиться и XML-литерал и XML-свойство.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>This example indicates that there is one <ph id="ph1">`Child`</ph> element.</source>
          <target state="translated">Данный пример указывает на отсутствие одного элемента <ph id="ph1">`Child`</ph>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>It produces the following output:</source>
          <target state="translated">Выводятся следующие результаты:</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>If you declare a global namespace that has a prefix, you can use the prefix for both XML literals and XML properties:</source>
          <target state="translated">После объявления глобального пространства имен с префиксом можно использовать префикс как для XML-литералов, так и для XML-свойств.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>XNamespace and Global Namespaces</source>
          <target state="translated">XNamespace и глобальные пространства имен</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You can get an &lt;xref:System.Xml.Linq.XNamespace&gt; object by using the <ph id="ph1">`GetXmlNamespace`</ph> method:</source>
          <target state="translated">Можно получить &lt;xref:System.Xml.Linq.XNamespace&gt;объекта с помощью <ph id="ph1">`GetXmlNamespace`</ph> метод:&lt;/xref:System.Xml.Linq.XNamespace&gt;</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>This example produces the following output:</source>
          <target state="translated">В этом примере выводятся следующие данные:</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">См. также</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Working with XML Namespaces (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/working-with-xml-namespaces.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Работа с пространствами имен XML (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/working-with-xml-namespaces.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>