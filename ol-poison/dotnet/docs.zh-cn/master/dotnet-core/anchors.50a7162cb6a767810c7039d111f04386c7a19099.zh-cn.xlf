<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-6a73dd2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ef2a63115f1efbe2418c348a3379fe7dd2face86</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\base-types\anchors.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p2</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d2e25c2b175059780bad8d84610bac5dd45943c9</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">94ae0e65a6ef73d01b61abaca196f9a10a7fd773</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">file anchors.50a7162cb6a767810c7039d111f04386c7a19099.zh-cn.xlf is out of handoff scope</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Anchors in regular expressions</source>
          <target state="translated">正则表达式中的定位点</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Anchors in regular expressions</source>
          <target state="translated">正则表达式中的定位点</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Anchors in regular expressions</source>
          <target state="translated">正则表达式中的定位点</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Anchors, or atomic zero-width assertions, specify a position in the string where a match must occur.</source>
          <target state="translated">定位点（原子零宽度断言）指定字符串中必须出现匹配的位置。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>When you use an anchor in your search expression, the regular expression engine does not advance through the string or consume characters; it looks for a match in the specified position only.</source>
          <target state="translated">在搜索表达式中使用定位点时，正则表达式引擎不在字符串中前进或使用字符，它仅在指定位置查找匹配。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For example, <bpt id="p1">**</bpt><ph id="ph1">^</ph><ept id="p1">**</ept> specifies that the match must start at the beginning of a line or string.</source>
          <target state="translated">例如，<bpt id="p1">**</bpt><ph id="ph1">^</ph><ept id="p1">**</ept> 指定必须从行或字符串的开头开始匹配。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Therefore, the regular expression <ph id="ph1">`^http:`</ph> matches "http:" only when it occurs at the beginning of a line.</source>
          <target state="translated">因此，正则表达式 <ph id="ph1">`^http:`</ph> 仅当 "http:" 出现在行开头时才与之匹配。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The following table lists the anchors supported by the regular expressions in .NET.</source>
          <target state="translated">下表列出了 .NET 中正则表达式支持的定位点。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Anchor</source>
          <target state="translated">定位点</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">描述</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The match must occur at the beginning of the string or line.</source>
          <target state="translated">匹配必须出现在字符串或行的开头位置。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The match must occur at the end of the string or line, or before \n at the end of the string or line.</source>
          <target state="translated">匹配必须出现在字符串或行的末尾，或出现在字符串或行末尾的 \n 之前。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>\A<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>\A<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The match must occur at the beginning of the string only (no multiline support)</source>
          <target state="translated">匹配必须仅出现在字符串的开头位置（无多行支持）</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>\Z<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>\Z<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The match must occur at the end of the string, or before \n at the end of the string.</source>
          <target state="translated">匹配必须出现在字符串的末尾或出现在字符串末尾的 \n 之前。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>\z<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>\z<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The match must occur at the end of the string only.</source>
          <target state="translated">匹配必须仅出现在字符串的末尾。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>\G<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>\G<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The match must start at the position where the previous match ended.</source>
          <target state="translated">匹配必须从上一个匹配结束的位置开始。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>\b<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>\b<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The match must occur on a word boundary.</source>
          <target state="translated">匹配必须出现在字边界。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>\B<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>\B<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The match must not occur on a word boundary.</source>
          <target state="translated">匹配不得出现在字边界上。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Start of String or Line: ^</source>
          <target state="translated">字符串或行的开头：^</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt><ph id="ph1">^</ph><ept id="p1">**</ept> anchor specifies that the following pattern must begin at the first character position of the string.</source>
          <target state="translated"><bpt id="p1">**</bpt><ph id="ph1">^</ph><ept id="p1">**</ept> 定位点指定以下模式必须从字符串的第一个字符位置开始。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>If you use <bpt id="p1">**</bpt><ph id="ph1">^</ph><ept id="p1">**</ept> with the <bpt id="p2">[</bpt>RegexOptions.Multiline<ept id="p2">](xref:System.Text.RegularExpressions.RegexOptions.Multiline)</ept> option (see <bpt id="p3">[</bpt>Regular expression options<ept id="p3">](options.md)</ept>), the match must occur at the beginning of each line.</source>
          <target state="translated">如果将 <bpt id="p1">**</bpt><ph id="ph1">^</ph><ept id="p1">**</ept> 与 <bpt id="p2">[</bpt>RegexOptions.Multiline<ept id="p2">](xref:System.Text.RegularExpressions.RegexOptions.Multiline)</ept> 选项结合使用（请参阅<bpt id="p3">[</bpt>正则表达式选项<ept id="p3">](options.md)</ept>），则匹配必须出现在每行的开头。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The following example uses the <bpt id="p1">**</bpt><ph id="ph1">^</ph><ept id="p1">**</ept> anchor in a regular expression that extracts information about the years during which some professional baseball teams existed.</source>
          <target state="translated">下面的示例在正则表达式中使用 <bpt id="p1">**</bpt><ph id="ph1">^</ph><ept id="p1">**</ept> 定位点，可提取有关某些职业棒球队存在年限的信息。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The example calls two overloads of the <ph id="ph1">`Regex.Matches`</ph> method:</source>
          <target state="translated">该示例调用 <ph id="ph1">`Regex.Matches`</ph> 方法的两个重载：</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The call to the <bpt id="p1">[</bpt>Matches(String, String)<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Matches(System.String,System.String))</ept> overload finds only the first substring in the input string that matches the regular expression pattern.</source>
          <target state="translated">调用 <bpt id="p1">[</bpt>Matches(String, String)<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Matches(System.String,System.String))</ept> 重载仅找到输入字符串中与正则表达式模式匹配的第一个子字符串。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The call to the <bpt id="p1">[</bpt>Matches(String, String, RegexOptions)<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions))</ept> overload with the options parameter set to <bpt id="p2">[</bpt>RegexOptions.Multiline<ept id="p2">](xref:System.Text.RegularExpressions.RegexOptions.Multiline)</ept> finds all five substrings.</source>
          <target state="translated">调用 <bpt id="p1">[</bpt>Matches(String, String, RegexOptions)<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions))</ept> 重载，并将 options 参数设置为 <bpt id="p2">[</bpt>RegexOptions.Multiline<ept id="p2">](xref:System.Text.RegularExpressions.RegexOptions.Multiline)</ept> 可找到所有五个子字符串。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The regular expression pattern <ph id="ph1">`^((\w+(\s?)){2,}),\s(\w+\s\w+),(\s\d{4}(-(\d{4}|present))?,?)+`</ph> is defined as shown in the following table.</source>
          <target state="translated">正则表达式模式 <ph id="ph1">`^((\w+(\s?)){2,}),\s(\w+\s\w+),(\s\d{4}(-(\d{4}|present))?,?)+`</ph> 的定义如下表所示。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">模式</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">说明</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Begin the match at the beginning of the input string (or the beginning of the line if the method is called with the <ph id="ph1">`RegexOptions.Multiline`</ph> option).</source>
          <target state="translated">从输入字符串的开头开始匹配（如果在调用该方法时选择了 <ph id="ph1">`RegexOptions.Multiline`</ph> 选项，则从行的开头开始匹配）。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Match one or more word characters followed either by zero or by one space exactly two times.</source>
          <target state="translated">匹配刚好两次后跟零个或一个空格的一个或多个单词字符。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>This is the first capturing group.</source>
          <target state="translated">这是第一个捕获组。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>This expression also defines a second and third capturing group: The second consists of the captured word, and the third consists of the captured spaces.</source>
          <target state="translated">此表达式还定义第二个和第三个捕获组：第二组包括捕获的单词，第三组包括捕获的空格。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Match a comma followed by a white-space character.</source>
          <target state="translated">匹配后跟一个空白字符的逗号。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Match one or more word characters followed by a space, followed by one or more word characters.</source>
          <target state="translated">匹配后跟一个空格再后跟一个或多个单词字符的一个或多个单词字符。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This is the fourth capturing group.</source>
          <target state="translated">这是第四个捕获组。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Match a comma.</source>
          <target state="translated">匹配逗号。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Match a space followed by four decimal digits.</source>
          <target state="translated">匹配后跟四个十进制数字的空格。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`(-(\d{4}`</ph>&amp;#124;<ph id="ph2">`present))?`</ph></source>
          <target state="translated"><ph id="ph1">`(-(\d{4}`</ph>&amp;#124;<ph id="ph2">`present))?`</ph></target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Match zero or one occurrence of a hyphen followed by four decimal digits or the string "present".</source>
          <target state="translated">匹配连字符后跟四个十进制数字或字符串“present”的零或一个匹配项。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This is the sixth capturing group.</source>
          <target state="translated">这是第六个捕获组。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>It also includes a seventh capturing group.</source>
          <target state="translated">还包括第七个捕获组。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Match zero or one occurrence of a comma.</source>
          <target state="translated">匹配逗号的零个或一个匹配项。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`(\s\d{4}(-(\d{4}`</ph>&amp;#124;<ph id="ph2">`present))?,?)+`</ph></source>
          <target state="translated"><ph id="ph1">`(\s\d{4}(-(\d{4}`</ph>&amp;#124;<ph id="ph2">`present))?,?)+`</ph></target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Match one or more occurrences of the following: a space, four decimal digits, zero or one occurrence of a hyphen followed by four decimal digits or the string "present", and zero or one comma.</source>
          <target state="translated">匹配以下内容的一个或多个匹配项：空格、四个十进制数字、连字符后跟四个十进制数字或字符串“present”的零个或一个匹配项以及零个或一个逗号。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>This is the fifth capturing group.</source>
          <target state="translated">这是第五个捕获组。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>End of String or Line: $</source>
          <target state="translated">字符串或行的末尾：$</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt><ph id="ph1">$</ph><ept id="p1">**</ept> anchor specifies that the preceding pattern must occur at the end of the input string, or before \n at the end of the input string.</source>
          <target state="translated"><bpt id="p1">**</bpt><ph id="ph1">$</ph><ept id="p1">**</ept> 定位点指定前面的模式必须出现在输入字符串的末尾，或出现在输入字符串末尾的 \n 之前。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>If you use <bpt id="p1">**</bpt><ph id="ph1">$</ph><ept id="p1">**</ept> with the <bpt id="p2">[</bpt>RegexOptions.Multiline<ept id="p2">](xref:System.Text.RegularExpressions.RegexOptions.Multiline)</ept> option, the match can also occur at the end of a line.</source>
          <target state="translated">如果将 <bpt id="p1">**</bpt><ph id="ph1">$</ph><ept id="p1">**</ept> 与 <bpt id="p2">[</bpt>RegexOptions.Multiline<ept id="p2">](xref:System.Text.RegularExpressions.RegexOptions.Multiline)</ept> 选项，则匹配也可能出现在行的末尾。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Note that <bpt id="p1">**</bpt><ph id="ph1">$</ph><ept id="p1">**</ept> matches <bpt id="p2">**</bpt>\n<ept id="p2">**</ept> but does not match <bpt id="p3">**</bpt>\r\n<ept id="p3">**</ept> (the combination of carriage return and newline characters, or CR/LF).</source>
          <target state="translated">请注意，<bpt id="p1">**</bpt><ph id="ph1">$</ph><ept id="p1">**</ept> 与 <bpt id="p2">**</bpt>\n<ept id="p2">**</ept> 匹配但与 <bpt id="p3">**</bpt>\r\n<ept id="p3">**</ept>（回车符和换行符的组合，或称 CR/LF）不匹配。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>To match the CR/LF character combination, include <bpt id="p1">**</bpt>\r?$<ept id="p1">**</ept> in the regular expression pattern.</source>
          <target state="translated">若要匹配 CR/LF 字符组合，请将 <bpt id="p1">**</bpt>\r?$<ept id="p1">**</ept> 包含在正则表达式模式中。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The following example adds the <bpt id="p1">**</bpt><ph id="ph1">$</ph><ept id="p1">**</ept> anchor to the regular expression pattern used in the example in the previous "Start of String or Line" section.</source>
          <target state="translated">下面的示例将 <bpt id="p1">**</bpt><ph id="ph1">$</ph><ept id="p1">**</ept> 定位点添加到前一部分“字符串或行的开头”的示例中所用的正则表达式模式。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>When used with the original input string, which includes five lines of text, the <bpt id="p1">[</bpt>Regex.Matches(String, String)<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Matches(System.String,System.String))</ept> method is unable to find a match, because the end of the first line does not match the <bpt id="p2">**</bpt><ph id="ph1">$</ph><ept id="p2">**</ept> pattern.</source>
          <target state="translated">配合包括五行文本的原始输入字符串使用时，<bpt id="p1">[</bpt>Regex.Matches(String, String)<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Matches(System.String,System.String))</ept> 方法找不到匹配项，因为第一行的末尾与 <bpt id="p2">**</bpt><ph id="ph1">$</ph><ept id="p2">**</ept> 模式不匹配。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>When the original input string is split into a string array, the <ph id="ph1">`Regex.Matches(String, String)`</ph> method succeeds in matching each of the five lines.</source>
          <target state="translated">当原始输入字符串被拆分为字符串数组时，<ph id="ph1">`Regex.Matches(String, String)`</ph> 方法会成功匹配五行中的每一行。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>When the <bpt id="p1">[</bpt>Regex.Matches(String, String, RegexOptions)<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions))</ept> method is called with the <bpt id="p2">*</bpt>options<ept id="p2">*</ept> parameter set to <ph id="ph1">`RegexOptions.Multiline`</ph>, no matches are found because the regular expression pattern does not account for the carriage return element (\u+000D).</source>
          <target state="translated">如果调用 <bpt id="p1">[</bpt>Regex.Matches(String, String, RegexOptions)<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions))</ept> 方法时将 <bpt id="p2">*</bpt>options<ept id="p2">*</ept> 参数设置为 <ph id="ph1">`RegexOptions.Multiline`</ph>，则找不到匹配项，因为正则表达式模式不考虑回车符元素 (\u+000D)。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>However, when the regular expression pattern is modified by replacing <bpt id="p1">**</bpt><ph id="ph1">$</ph><ept id="p1">**</ept> with <bpt id="p2">**</bpt>\r?$<ept id="p2">**</ept>, calling the <ph id="ph2">`Regex.Matches(String, String, RegexOptions)`</ph> method with the <bpt id="p3">*</bpt>options<ept id="p3">*</ept> parameter set to <ph id="ph3">`RegexOptions.Multiline`</ph> again finds five matches.</source>
          <target state="translated">但是，如果通过用将 <bpt id="p1">**</bpt><ph id="ph1">$</ph><ept id="p1">**</ept> 替换为 <bpt id="p2">**</bpt>\r?$<ept id="p2">**</ept> 修改了正则表达式模式，则调用 <ph id="ph2">`Regex.Matches(String, String, RegexOptions)`</ph> 方法并将 <bpt id="p3">*</bpt>options<ept id="p3">*</ept> 参数设置为 <ph id="ph3">`RegexOptions.Multiline`</ph> 将再次找到五个匹配项。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Start of String Only: \A</source>
          <target state="translated">仅字符串的开头：\A</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>\A<ept id="p1">**</ept> anchor specifies that a match must occur at the beginning of the input string.</source>
          <target state="translated"><bpt id="p1">**</bpt>\A<ept id="p1">**</ept> 定位点指定匹配必须出现在输入字符串的开头。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>It is identical to the <bpt id="p1">**</bpt><ph id="ph1">^</ph><ept id="p1">**</ept> anchor, except that <bpt id="p2">**</bpt>\A<ept id="p2">**</ept> ignores the <bpt id="p3">[</bpt>RegexOptions.Multiline<ept id="p3">](xref:System.Text.RegularExpressions.RegexOptions.Multiline)</ept> option.</source>
          <target state="translated">它等同于 <bpt id="p1">**</bpt><ph id="ph1">^</ph><ept id="p1">**</ept> 定位点，只不过 <bpt id="p2">**</bpt>\A<ept id="p2">**</ept> 忽略了 <bpt id="p3">[</bpt>RegexOptions.Multiline<ept id="p3">](xref:System.Text.RegularExpressions.RegexOptions.Multiline)</ept> 选项。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Therefore, it can only match the start of the first line in a multiline input string.</source>
          <target state="translated">因此，在多行的输入字符串中，它只能匹配第一行的开头。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The following example is similar to the examples for the <bpt id="p1">**</bpt><ph id="ph1">^</ph><ept id="p1">**</ept> and <bpt id="p2">**</bpt><ph id="ph2">$</ph><ept id="p2">**</ept> anchors.</source>
          <target state="translated">下面的示例与 <bpt id="p1">**</bpt><ph id="ph1">^</ph><ept id="p1">**</ept> 和 <bpt id="p2">**</bpt><ph id="ph2">$</ph><ept id="p2">**</ept> 定位点的示例类似。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>It uses the <bpt id="p1">**</bpt>\A<ept id="p1">**</ept> anchor in a regular expression that extracts information about the years during which some professional baseball teams existed.</source>
          <target state="translated">它在正则表达式中使用 <bpt id="p1">**</bpt>\A<ept id="p1">**</ept> 定位点，可提取有关某些职业棒球队存在年限的信息。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The input string includes five lines.</source>
          <target state="translated">输入字符串包括五行。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The call to the <bpt id="p1">[</bpt>Regex.Matches(String, String, RegexOptions)<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions))</ept> method finds only the first substring in the input string that matches the regular expression pattern.</source>
          <target state="translated">调用 <bpt id="p1">[</bpt>Regex.Matches(String, String, RegexOptions)<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions))</ept> 方法仅找到输入字符串中与正则表达式模式匹配的第一个子字符串。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>As the example shows, the <ph id="ph1">`Multiline`</ph> option has no effect.</source>
          <target state="translated">如示例所示，<ph id="ph1">`Multiline`</ph> 选项不起作用。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>End of String or Before Ending Newline: \Z</source>
          <target state="translated">字符串末尾或结束换行之前：\Z</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>\Z<ept id="p1">**</ept> anchor specifies that a match must occur at the end of the input string, or before <bpt id="p2">**</bpt>\n<ept id="p2">**</ept> at the end of the input string.</source>
          <target state="translated"><bpt id="p1">**</bpt>\Z<ept id="p1">**</ept> 定位点指定匹配项必须出现在输入字符串的末尾，或出现在输入字符串末尾的 <bpt id="p2">**</bpt>\n<ept id="p2">**</ept> 之前。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>It is identical to the <bpt id="p1">**</bpt><ph id="ph1">$</ph><ept id="p1">**</ept> anchor, except that <bpt id="p2">**</bpt>\Z<ept id="p2">**</ept> ignores the <bpt id="p3">[</bpt>RegexOptions.Multiline<ept id="p3">](xref:System.Text.RegularExpressions.RegexOptions.Multiline)</ept> option.</source>
          <target state="translated">它等同于 <bpt id="p1">**</bpt><ph id="ph1">$</ph><ept id="p1">**</ept> 定位点，只不过 <bpt id="p2">**</bpt>\Z<ept id="p2">**</ept> 忽略了 <bpt id="p3">[</bpt>RegexOptions.Multiline<ept id="p3">](xref:System.Text.RegularExpressions.RegexOptions.Multiline)</ept> 选项。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Therefore, in a multiline string, it can only match the end of the last line, or the last line before <bpt id="p1">**</bpt>\n<ept id="p1">**</ept>.</source>
          <target state="translated">因此，在多行字符串中，它只能匹配最后一行的末尾，或 <bpt id="p1">**</bpt>\n<ept id="p1">**</ept> 前的最后一行。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Note that <bpt id="p1">**</bpt>\Z<ept id="p1">**</ept> matches <bpt id="p2">**</bpt>\n<ept id="p2">**</ept> but does not match <bpt id="p3">**</bpt>\r\n<ept id="p3">**</ept> (the CR/LF character combination).</source>
          <target state="translated">请注意，<bpt id="p1">**</bpt>\Z<ept id="p1">**</ept> 与 <bpt id="p2">**</bpt>\n<ept id="p2">**</ept> 匹配但与 <bpt id="p3">**</bpt>\r\n<ept id="p3">**</ept> （CR/LF 字符组合）不匹配。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>To match CR/LF, include <bpt id="p1">**</bpt>\r?\Z<ept id="p1">**</ept> in the regular expression pattern.</source>
          <target state="translated">若要匹配 CR/LF，请将 <bpt id="p1">**</bpt>\r?\Z<ept id="p1">**</ept> 包含在正则表达式模式中。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The following example uses the <bpt id="p1">**</bpt>\Z<ept id="p1">**</ept> anchor in a regular expression that is similar to the example in the previous "Start of String or Line" section, which extracts information about the years during which some professional baseball teams existed.</source>
          <target state="translated">下面的示例在正则表达式中使用 <bpt id="p1">**</bpt>\Z<ept id="p1">**</ept> 定位点，与前一部分“字符串或行的开头”部分的示例类似，可提取有关某些职业棒球队存在年限的信息。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The subexpression <ph id="ph1">`\r?\Z`</ph> in the regular expression <ph id="ph2">`^((\w+(\s?)){2,}),\s(\w+\s\w+),(\s\d{4}(-(\d{4}|present))?,?)+\r?\Z`</ph> matches the end of a string, and also matches a string that ends with <bpt id="p1">**</bpt>\n<ept id="p1">**</ept> or <bpt id="p2">**</bpt>\r\n<ept id="p2">**</ept>.</source>
          <target state="translated">正则表达式 <ph id="ph2">`^((\w+(\s?)){2,}),\s(\w+\s\w+),(\s\d{4}(-(\d{4}|present))?,?)+\r?\Z`</ph> 中的子表达式 <ph id="ph1">`\r?\Z`</ph> 匹配字符串的末尾，也匹配以 <bpt id="p1">**</bpt>\n<ept id="p1">**</ept> 或 <bpt id="p2">**</bpt>\r\n<ept id="p2">**</ept> 结尾的字符串。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>As a result, each element in the array matches the regular expression pattern.</source>
          <target state="translated">因此，数组中的每个元素都与正则表达式模式匹配。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>End of String Only: \z</source>
          <target state="translated">仅字符串末尾：\z</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>\z<ept id="p1">**</ept> anchor specifies that a match must occur at the end of the input string.</source>
          <target state="translated"><bpt id="p1">**</bpt>\z<ept id="p1">**</ept> 定位点指定匹配必须出现在输入字符串末尾。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Like the <bpt id="p1">**</bpt><ph id="ph1">$</ph><ept id="p1">**</ept> language element, <bpt id="p2">**</bpt>\z<ept id="p2">**</ept> ignores the <bpt id="p3">[</bpt>RegexOptions.Multiline<ept id="p3">](xref:System.Text.RegularExpressions.RegexOptions.Multiline)</ept> option.</source>
          <target state="translated">与 <bpt id="p1">**</bpt><ph id="ph1">$</ph><ept id="p1">**</ept> 语言元素类似，<bpt id="p2">**</bpt>\z<ept id="p2">**</ept> 忽略了 <bpt id="p3">[</bpt>RegexOptions.Multiline<ept id="p3">](xref:System.Text.RegularExpressions.RegexOptions.Multiline)</ept> 选项。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Unlike the <bpt id="p1">**</bpt>\Z<ept id="p1">**</ept> language element, <bpt id="p2">**</bpt>\z<ept id="p2">**</ept> does not match a <bpt id="p3">**</bpt>\n<ept id="p3">**</ept> character at the end of a string.</source>
          <target state="translated">与 <bpt id="p1">**</bpt>\Z<ept id="p1">**</ept> 语言元素不同，<bpt id="p2">**</bpt>\z<ept id="p2">**</ept> 不匹配字符串末尾的 <bpt id="p3">**</bpt>\n<ept id="p3">**</ept> 字符。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Therefore, it can only match the last line of the input string.</source>
          <target state="translated">因此，它只能匹配输入字符串的最后一行。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The following example uses the <bpt id="p1">**</bpt>\z<ept id="p1">**</ept> anchor in a regular expression that is otherwise identical to the example in the previous section, which extracts information about the years during which some professional baseball teams existed.</source>
          <target state="translated">下面的示例在正则表达式中使用 <bpt id="p1">**</bpt>\z<ept id="p1">**</ept> 定位点，与上一部分的示例中使用的定位点在其他方面相同，用于提取有关某些职业棒球队存在年限的信息。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The example tries to match each of five elements in a string array with the regular expression pattern <ph id="ph1">`^((\w+(\s?)){2,}),\s(\w+\s\w+),(\s\d{4}(-(\d{4}|present))?,?)+\r?\z`</ph>.</source>
          <target state="translated">此示例尝试使用正则表达式模式 <ph id="ph1">`^((\w+(\s?)){2,}),\s(\w+\s\w+),(\s\d{4}(-(\d{4}|present))?,?)+\r?\z`</ph> 匹配字符串数组中五个元素的每一个。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Two of the strings end with carriage return and line feed characters, one ends with a line feed character, and two end with neither a carriage return nor a line feed character.</source>
          <target state="translated">两个字符串以回车符和换行符结尾，一个字符串以换行符结尾，另外两个既不以回车符也不以换行符结尾。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>As the output shows, only the strings without a carriage return or line feed character match the pattern.</source>
          <target state="translated">如输出所示，只有不包含回车符或换行符的字符串与模式匹配。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Contiguous Matches: \G</source>
          <target state="translated">连续匹配：\G</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>\G<ept id="p1">**</ept> anchor specifies that a match must occur at the point where the previous match ended.</source>
          <target state="translated"><bpt id="p1">**</bpt>\G<ept id="p1">**</ept> 定位符指定匹配必须出现在上一个匹配结束的点。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>When you use this anchor with the <bpt id="p1">[</bpt>Regex.Matches<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Matches(System.String))</ept> or <bpt id="p2">[</bpt>Match.NextMatch<ept id="p2">](xref:System.Text.RegularExpressions.Match.NextMatch)</ept> method, it ensures that all matches are contiguous.</source>
          <target state="translated">将此定位点与 <bpt id="p1">[</bpt>Regex.Matches<ept id="p1">](xref:System.Text.RegularExpressions.Regex.Matches(System.String))</ept> 或 <bpt id="p2">[</bpt>Match.NextMatch<ept id="p2">](xref:System.Text.RegularExpressions.Match.NextMatch)</ept> 方法配合使用时，它可确保所有匹配项是连续的。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The following example uses a regular expression to extract the names of rodent species from a comma-delimited string.</source>
          <target state="translated">以下示例使用正则表达式从一个以逗号分隔的字符串中提取啮齿类动物的名称。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The regular expression <ph id="ph1">`\G(\w+\s?\w*),?`</ph> is interpreted as shown in the following table.</source>
          <target state="translated">正则表达式 <ph id="ph1">`\G(\w+\s?\w*),?`</ph> 可以解释为下表中所示内容。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">模式</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">描述</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Begin where the last match ended.</source>
          <target state="translated">从上次匹配结束的位置开始。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Match one or more word characters.</source>
          <target state="translated">匹配一个或多个单词字符。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Match zero or one space.</source>
          <target state="translated">匹配零个或一个空格。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Match zero or more word characters.</source>
          <target state="translated">匹配零个或多个单词字符。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Match one or more word characters followed by zero or one space, followed by zero or more word characters.</source>
          <target state="translated">匹配后跟零个或一个空格再后跟零个或多个单词字符的一个或多个单词字符。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>This is the first capturing group.</source>
          <target state="translated">这是第一个捕获组。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Match zero or one occurrence of a literal comma character.</source>
          <target state="translated">匹配文本逗号字符的零个或一个匹配项。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Word Boundary: \b</source>
          <target state="translated">字边界：\b</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>\b<ept id="p1">**</ept> anchor specifies that the match must occur on a boundary between a word character (the <bpt id="p2">**</bpt>\w<ept id="p2">**</ept> language element) and a non-word character (the <bpt id="p3">**</bpt>\W<ept id="p3">**</ept> language element).</source>
          <target state="translated"><bpt id="p1">**</bpt>\b<ept id="p1">**</ept> 定位符指定匹配必须出现单词字符（<bpt id="p2">**</bpt>\w<ept id="p2">**</ept> 语言元素）和非单词字符（<bpt id="p3">**</bpt>\W<ept id="p3">**</ept> 语言元素）之间的边界上。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Word characters consist of alphanumeric characters and underscores; a non-word character is any character that is not alphanumeric or an underscore.</source>
          <target state="translated">单词字符包括字母数字字符和下划线；非单词字符包括不为字母数字字符或下划线的任何字符。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>(For more information, see <bpt id="p1">[</bpt>Character classes in regular expressions<ept id="p1">](classes.md)</ept>.) The match may also occur on a word boundary at the beginning or end of the string.</source>
          <target state="translated">（有关更多信息，请参见<bpt id="p1">[</bpt>正则表达式中的字符类<ept id="p1">](classes.md)</ept>。）匹配也可以出现在字符串开头或结尾处的单词边界上。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>\b<ept id="p1">**</ept> anchor is frequently used to ensure that a subexpression matches an entire word instead of just the beginning or end of a word.</source>
          <target state="translated"><bpt id="p1">**</bpt>\b<ept id="p1">**</ept> 定位点经常用于确保子表达式与整个单词而不仅与单词的开头或结尾匹配。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The regular expression <ph id="ph1">`\bare\w*\b`</ph> in the following example illustrates this usage.</source>
          <target state="translated">以下示例中的正则表达式 <ph id="ph1">`\bare\w*\b`</ph> 阐释了这种用法。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>It matches any word that begins with the substring "are".</source>
          <target state="translated">它与任何以子字符串“are”开头的单词匹配。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The output from the example also illustrates that <bpt id="p1">**</bpt>\b<ept id="p1">**</ept> matches both the beginning and the end of the input string.</source>
          <target state="translated">该示例的输出也演示了 <bpt id="p1">**</bpt>\b<ept id="p1">**</ept> 与输入字符串的开头和结尾均匹配。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The regular expression pattern is interpreted as shown in the following table.</source>
          <target state="translated">正则表达式模式可以解释为下表中所示内容。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">模式</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">描述</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Begin the match at a word boundary.</source>
          <target state="translated">在单词边界处开始匹配。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Match the substring "are".</source>
          <target state="translated">匹配子字符串“are”。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Match zero or more word characters.</source>
          <target state="translated">匹配零个或多个单词字符。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>End the match at a word boundary.</source>
          <target state="translated">在单词边界处结束匹配。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Non-Word Boundary: \B</source>
          <target state="translated">非字边界：\B</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>\B<ept id="p1">**</ept> anchor specifies that the match must not occur on a word boundary.</source>
          <target state="translated"><bpt id="p1">**</bpt>\B<ept id="p1">**</ept> 定位符指定匹配不得出现在单词边界上。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>It is the opposite of the <bpt id="p1">**</bpt>\b<ept id="p1">**</ept> anchor.</source>
          <target state="translated">它与 <bpt id="p1">**</bpt>\b<ept id="p1">**</ept> 定位点截然相反。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The following example uses the <bpt id="p1">**</bpt>\B<ept id="p1">**</ept> anchor to locate occurrences of the substring "qu" in a word.</source>
          <target state="translated">下面的示例使用 <bpt id="p1">**</bpt>\B<ept id="p1">**</ept> 定位点定位单词中的子字符串“qu”匹配项。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The regular expression pattern <ph id="ph1">`\Bqu\w+`</ph> matches a substring that begins with a "qu" that does not start a word and that continues to the end of the word.</source>
          <target state="translated">正则表达式模式 <ph id="ph1">`\Bqu\w+`</ph> 与以“qu”开头（但“qu”并不位于单词之首）且延续到单词末尾的子字符串匹配。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The regular expression pattern is interpreted as shown in the following table.</source>
          <target state="translated">正则表达式模式可以解释为下表中所示内容。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">模式</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">描述</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Do not begin the match at a word boundary.</source>
          <target state="translated">不在单词边界处开始匹配。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Match the substring "qu".</source>
          <target state="translated">匹配子字符串“qu”。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Match one or more word characters.</source>
          <target state="translated">匹配一个或多个单词字符。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">另请参阅</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Regular expression language - quick reference<ept id="p1">](quick-ref.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>正则表达式语言 - 快速参考<ept id="p1">](quick-ref.md)</ept></target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Regular expression options<ept id="p1">](options.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>正则表达式选项<ept id="p1">](options.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>