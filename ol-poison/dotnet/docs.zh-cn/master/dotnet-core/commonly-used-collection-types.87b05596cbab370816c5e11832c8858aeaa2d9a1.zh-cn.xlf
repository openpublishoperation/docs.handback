<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-6a73dd2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6cadcd91810f08900b58e402240e8a469fad2018</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\collections\commonly-used-collection-types.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p2</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9cb8841fb13291c43ad0af82aecea0707a971cf4</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bcd7b61132154f3126438144f9a0aff676c31881</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">file commonly-used-collection-types.87b05596cbab370816c5e11832c8858aeaa2d9a1.zh-cn.xlf is out of handoff scope</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Commonly Used Collection Types</source>
          <target state="translated">常用的集合类型</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Commonly Used Collection Types</source>
          <target state="translated">常用的集合类型</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET、.NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Commonly Used Collection Types</source>
          <target state="translated">常用的集合类型</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Collection types are the common variations of data collections, such as hash tables, queues, stacks, bags, dictionaries, and lists.</source>
          <target state="translated">集合类型是数据集合（如哈希表、队列、堆栈、包、字典和列表）的常见变体。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Collections are based on the <bpt id="p1">[</bpt><ph id="ph1">`ICollection`</ph><ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.ICollection)</ept> interface, the <bpt id="p2">[</bpt><ph id="ph2">`IList`</ph><ept id="p2">](https://docs.microsoft.com/dotnet/core/api/System.Collections.IList)</ept> interface, the <bpt id="p3">[</bpt><ph id="ph3">`IDictionary`</ph><ept id="p3">](https://docs.microsoft.com/dotnet/core/api/System.Collections.IDictionary)</ept> interface, or their generic counterparts.</source>
          <target state="translated">集合基于 <bpt id="p1">[</bpt><ph id="ph1">`ICollection`</ph><ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.ICollection)</ept> 接口、<bpt id="p2">[</bpt><ph id="ph2">`IList`</ph><ept id="p2">](https://docs.microsoft.com/dotnet/core/api/System.Collections.IList)</ept> 接口、<bpt id="p3">[</bpt><ph id="ph3">`IDictionary`</ph><ept id="p3">](https://docs.microsoft.com/dotnet/core/api/System.Collections.IDictionary)</ept> 接口或对应的泛型集合。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`IList`</ph> interface and the <ph id="ph2">`IDictionary`</ph> interface are both derived from the <ph id="ph3">`ICollection`</ph> interface; therefore, all collections are based on the <ph id="ph4">`ICollection`</ph> interface either directly or indirectly.</source>
          <target state="translated"><ph id="ph1">`IList`</ph> 接口和 <ph id="ph2">`IDictionary`</ph> 接口都派生自 <ph id="ph3">`ICollection`</ph> 接口：因此，所有集合都直接或间接基于 <ph id="ph4">`ICollection`</ph> 接口。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In collections based on the <ph id="ph1">`IList`</ph> interface (such as <bpt id="p1">[</bpt><ph id="ph2">`Array`</ph><ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Array)</ept>, <bpt id="p2">[</bpt><ph id="ph3">`ArrayList`</ph><ept id="p2">](https://docs.microsoft.com/dotnet/core/api/System.Collections.ArrayList)</ept>, or <bpt id="p3">[</bpt><ph id="ph4">`List&lt;T&gt;)`</ph><ept id="p3">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.List-1)</ept> or directly on the <ph id="ph5">`ICollection`</ph> interface (such as <bpt id="p4">[</bpt><ph id="ph6">`Queue`</ph><ept id="p4">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Queue)</ept>, <bpt id="p5">[</bpt><ph id="ph7">`ConcurrentQueue&lt;T&gt;`</ph><ept id="p5">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Concurrent.ConcurrentQueue-1)</ept>, <bpt id="p6">[</bpt><ph id="ph8">`Stack`</ph><ept id="p6">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Stack)</ept>, <bpt id="p7">[</bpt><ph id="ph9">`ConcurrentStack&lt;T&gt;`</ph><ept id="p7">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Concurrent.ConcurrentStack-1)</ept> or <bpt id="p8">[</bpt><ph id="ph10">`LinkedList&lt;T&gt;`</ph><ept id="p8">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.LinkedList-1)</ept>), every element contains only a value.</source>
          <target state="translated">在基于 <ph id="ph1">`IList`</ph> 接口（比如 <bpt id="p1">[</bpt><ph id="ph2">`Array`</ph><ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Array)</ept>、<bpt id="p2">[</bpt><ph id="ph3">`ArrayList`</ph><ept id="p2">](https://docs.microsoft.com/dotnet/core/api/System.Collections.ArrayList)</ept> 或 <bpt id="p3">[</bpt><ph id="ph4">`List&lt;T&gt;)`</ph><ept id="p3">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.List-1)</ept>）或直接基于 <ph id="ph5">`ICollection`</ph> 接口（比如<bpt id="p4">[</bpt><ph id="ph6">`Queue`</ph><ept id="p4">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Queue)</ept>、<bpt id="p5">[</bpt><ph id="ph7">`ConcurrentQueue&lt;T&gt;`</ph><ept id="p5">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Concurrent.ConcurrentQueue-1)</ept>、<bpt id="p6">[</bpt><ph id="ph8">`Stack`</ph><ept id="p6">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Stack)</ept>、<bpt id="p7">[</bpt><ph id="ph9">`ConcurrentStack&lt;T&gt;`</ph><ept id="p7">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Concurrent.ConcurrentStack-1)</ept> 或 <bpt id="p8">[</bpt><ph id="ph10">`LinkedList&lt;T&gt;`</ph><ept id="p8">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.LinkedList-1)</ept>）的集合中，每个元素都只有一个值。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In collections based on the <ph id="ph1">`IDictionary`</ph> interface (such as the <bpt id="p1">[</bpt><ph id="ph2">`Hashtable`</ph><ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Hashtable)</ept> and <bpt id="p2">[</bpt><ph id="ph3">`SortedList`</ph><ept id="p2">](https://docs.microsoft.com/dotnet/core/api/System.Collections.SortedList)</ept> classes, the <bpt id="p3">[</bpt><ph id="ph4">`Dictionary&lt;TKey, TValue&gt;`</ph><ept id="p3">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.Dictionary-2)</ept> and <bpt id="p4">[</bpt><ph id="ph5">`SortedList&lt;TKey, TValue&gt;`</ph><ept id="p4">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.SortedList-2)</ept> generic classes), or the <bpt id="p5">[</bpt><ph id="ph6">`ConcurrentDictionary&lt;TKey, TValue&gt;`</ph><ept id="p5">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Concurrent.ConcurrentDictionary-2)</ept> classes, every element contains both a key and a value.</source>
          <target state="translated">在基于 <ph id="ph1">`IDictionary`</ph> 接口（比如 <bpt id="p1">[</bpt><ph id="ph2">`Hashtable`</ph><ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Hashtable)</ept> 和 <bpt id="p2">[</bpt><ph id="ph3">`SortedList`</ph><ept id="p2">](https://docs.microsoft.com/dotnet/core/api/System.Collections.SortedList)</ept> 类，<bpt id="p3">[</bpt><ph id="ph4">`Dictionary&lt;TKey, TValue&gt;`</ph><ept id="p3">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.Dictionary-2)</ept> 和 <bpt id="p4">[</bpt><ph id="ph5">`SortedList&lt;TKey, TValue&gt;`</ph><ept id="p4">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.SortedList-2)</ept> 泛型类）或 <bpt id="p5">[</bpt><ph id="ph6">`ConcurrentDictionary&lt;TKey, TValue&gt;`</ph><ept id="p5">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Concurrent.ConcurrentDictionary-2)</ept> 类的集合中，每个元素都有一个键和一个值。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><ph id="ph1">`KeyedCollection&lt;TKey, TItem&gt;`</ph><ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.ObjectModel.KeyedCollection-2)</ept> class is unique because it is a list of values with keys embedded within the values and, therefore, it behaves like a list and like a dictionary.</source>
          <target state="translated"><bpt id="p1">[</bpt><ph id="ph1">`KeyedCollection&lt;TKey, TItem&gt;`</ph><ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.ObjectModel.KeyedCollection-2)</ept> 类是唯一的，因为它是值中嵌键的值列表，因此，其行为类似列表和字典。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Generic collections are the best solution to strong typing.</source>
          <target state="translated">泛型集合都是强类型的最佳解决方案。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>However, if your language does not support generics, the <bpt id="p1">[</bpt><ph id="ph1">`System.Collections`</ph><ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections)</ept> namespace includes base collections, such as <bpt id="p2">[</bpt><ph id="ph2">`CollectionBase`</ph><ept id="p2">](https://docs.microsoft.com/dotnet/core/api/System.Collections.CollectionBase)</ept>, <bpt id="p3">[</bpt><ph id="ph3">`ReadOnlyCollectionBase`</ph><ept id="p3">](https://docs.microsoft.com/dotnet/core/api/System.Collections.ReadOnlyCollectionBase)</ept>, and <bpt id="p4">[</bpt><ph id="ph4">`DictionaryBase`</ph><ept id="p4">](https://docs.microsoft.com/dotnet/core/api/System.Collections.DictionaryBase)</ept>, which are abstract base classes that can be extended to create collection classes that are strongly typed.</source>
          <target state="translated">但，如果语言不支持泛型，那么 <bpt id="p1">[</bpt><ph id="ph1">`System.Collections`</ph><ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections)</ept> 命名空间包含基集合，如 <bpt id="p2">[</bpt><ph id="ph2">`CollectionBase`</ph><ept id="p2">](https://docs.microsoft.com/dotnet/core/api/System.Collections.CollectionBase)</ept>、<bpt id="p3">[</bpt><ph id="ph3">`ReadOnlyCollectionBase`</ph><ept id="p3">](https://docs.microsoft.com/dotnet/core/api/System.Collections.ReadOnlyCollectionBase)</ept> 和 <bpt id="p4">[</bpt><ph id="ph4">`DictionaryBase`</ph><ept id="p4">](https://docs.microsoft.com/dotnet/core/api/System.Collections.DictionaryBase)</ept>，这些集合都是可扩展以创建强类型集合类的抽象基类。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>When efficient multi-threaded collection access is required, use the generic collections in the <bpt id="p1">[</bpt><ph id="ph1">`System.Collections.Concurrent`</ph><ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Concurrent)</ept> namespace.</source>
          <target state="translated">需要高效的多线程集合访问时，请使用 <bpt id="p1">[</bpt><ph id="ph1">`System.Collections.Concurrent`</ph><ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Concurrent)</ept> 命名空间中的泛型集合。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Collections can vary, depending on how the elements are stored, how they are sorted, how searches are performed, and how comparisons are made.</source>
          <target state="translated">集合会因元素的存储方式、排序方式、执行搜索的方式以及比较方式的不同而不同。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><ph id="ph1">`Queue`</ph><ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Queue)</ept> class and the <bpt id="p2">[</bpt><ph id="ph2">`Queue&lt;T&gt;`</ph><ept id="p2">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.Queue-1)</ept> generic class provide first-in-first-out lists, while the <bpt id="p3">[</bpt><ph id="ph3">`Stack`</ph><ept id="p3">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Stack)</ept> class and the <bpt id="p4">[</bpt><ph id="ph4">`Stack&lt;T&gt;`</ph><ept id="p4">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.Stack-1)</ept> generic class provide last-in-first-out lists.</source>
          <target state="translated"><bpt id="p1">[</bpt><ph id="ph1">`Queue`</ph><ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Queue)</ept> 类和 <bpt id="p2">[</bpt><ph id="ph2">`Queue&lt;T&gt;`</ph><ept id="p2">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.Queue-1)</ept> 泛型类提供先进先出列表，而 <bpt id="p3">[</bpt><ph id="ph3">`Stack`</ph><ept id="p3">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Stack)</ept> 类和 <bpt id="p4">[</bpt><ph id="ph4">`Stack&lt;T&gt;`</ph><ept id="p4">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.Stack-1)</ept> 泛型类提供后进先出列表。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><ph id="ph1">`SortedList`</ph><ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.SortedList)</ept> class and the <bpt id="p2">[</bpt><ph id="ph2">`SortedList&lt;TKey, TValue&gt;`</ph><ept id="p2">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.SortedList-2)</ept> generic class provide sorted versions of the <bpt id="p3">[</bpt><ph id="ph3">`Hashtable`</ph><ept id="p3">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Hashtable)</ept> class and the <bpt id="p4">[</bpt><ph id="ph4">`Dictionary&lt;TKey, TValue&gt;`</ph><ept id="p4">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.Dictionary-2)</ept> generic class.</source>
          <target state="translated"><bpt id="p1">[</bpt><ph id="ph1">`SortedList`</ph><ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.SortedList)</ept> 类和 <bpt id="p2">[</bpt><ph id="ph2">`SortedList&lt;TKey, TValue&gt;`</ph><ept id="p2">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.SortedList-2)</ept> 泛型类提供 <bpt id="p3">[</bpt><ph id="ph3">`Hashtable`</ph><ept id="p3">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Hashtable)</ept> 类和 <bpt id="p4">[</bpt><ph id="ph4">`Dictionary&lt;TKey, TValue&gt;`</ph><ept id="p4">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.Dictionary-2)</ept> 泛型类的已排序版本。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The elements of a <ph id="ph1">`Hashtable`</ph> or a <ph id="ph2">`Dictionary&lt;TKey, TValue&gt;`</ph> are accessible only by the key of the element, but the elements of a <ph id="ph3">`SortedList`</ph> or a <bpt id="p1">[</bpt><ph id="ph4">`KeyedCollection&lt;TKey, TItem&gt;`</ph><ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.ObjectModel.KeyedCollection-2)</ept> are accessible either by the key or by the index of the element.</source>
          <target state="translated"><ph id="ph1">`Hashtable`</ph> 或 <ph id="ph2">`Dictionary&lt;TKey, TValue&gt;`</ph> 的元素只能通过元素的键访问，但 <ph id="ph3">`SortedList`</ph> 或 <bpt id="p1">[</bpt><ph id="ph4">`KeyedCollection&lt;TKey, TItem&gt;`</ph><ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.ObjectModel.KeyedCollection-2)</ept> 的元素能通过元素的键或索引访问。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The indexes in all collections are zero-based, except <bpt id="p1">[</bpt><ph id="ph1">`Array`</ph><ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Array)</ept>, which allows arrays that are not zero-based.</source>
          <target state="translated">所有集合中的索引都从零开始，<bpt id="p1">[</bpt><ph id="ph1">`Array`</ph><ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Array)</ept> 除外，它允许不从零开始的数组。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The LINQ to Objects feature allows you to use LINQ queries to access in-memory objects as long as the object type implements <bpt id="p1">[</bpt><ph id="ph1">`IEnumerable`</ph><ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.IEnumerable)</ept> or <bpt id="p2">[</bpt><ph id="ph2">`IEnumerable&lt;T&gt;`</ph><ept id="p2">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.IEnumerable-1)</ept>.</source>
          <target state="translated">LINQ to Objects 功能允许通过使用 LINQ 查询来访问内存中的对象，条件是该对象类型实现 <bpt id="p1">[</bpt><ph id="ph1">`IEnumerable`</ph><ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.IEnumerable)</ept> 或 <bpt id="p2">[</bpt><ph id="ph2">`IEnumerable&lt;T&gt;`</ph><ept id="p2">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.IEnumerable-1)</ept>。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>LINQ queries provide a common pattern for accessing data; are typically more concise and readable than standard foreach loops; and provide filtering, ordering and grouping capabilities.</source>
          <target state="translated">LINQ 查询提供了一种通用的数据访问模式；与标准 foreach 循环相比，它通常更加简洁，可读性更高；这种查询可提供筛选、排序和分组功能。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>LINQ queries can also improve performance.</source>
          <target state="translated">LINQ 查询还可提高性能。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Related Topics</source>
          <target state="translated">相关主题</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Title</source>
          <target state="translated">标题</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">说明</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Discusses the various collection types available in the .NET Framework, including stacks, queues, lists, arrays, and dictionaries.</source>
          <target state="translated">讨论在 .NET Framework 中提供的各种集合类型，包括堆栈、队列、列表、数组和字典。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Describes the features of generic and non-generic hash-based dictionary types.</source>
          <target state="translated">描述泛型和非泛型基于哈希的字典类型的功能。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Describes sorted collections performance and characteristics.</source>
          <target state="translated">描述已排序集合的性能和特征。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Reference</source>
          <target state="translated">参考</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>