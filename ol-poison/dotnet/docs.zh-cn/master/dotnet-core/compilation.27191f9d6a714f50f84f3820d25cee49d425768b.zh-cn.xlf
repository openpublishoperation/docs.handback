<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-6a73dd2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e14e386a04c64726e4eacb63dc8855a356a18ba0</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\base-types\compilation.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p2</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">56932ed1fd4d5840cde1afcc475dac369f319d67</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1464c9812435b68fb5ea64b9bef227f4b1a956e7</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">file compilation.27191f9d6a714f50f84f3820d25cee49d425768b.zh-cn.xlf is out of handoff scope</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Compilation and reuse in regular expressions</source>
          <target state="translated">正则表达式中的编译和重复使用</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Compilation and reuse in regular expressions</source>
          <target state="translated">正则表达式中的编译和重复使用</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Compilation and reuse in regular expressions</source>
          <target state="translated">正则表达式中的编译和重复使用</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You can optimize the performance of applications that make extensive use of regular expressions by understanding how the regular expression engine compiles expressions and by understanding how regular expressions are cached.</source>
          <target state="translated">通过了解正则表达式引擎编译表达式的方式以及正则表达式的缓存方式，可以优化大量使用正则表达式的应用程序的性能。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This topic discusses both compilation and caching.</source>
          <target state="translated">本主题介绍编译和缓存。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Compiled Regular Expressions</source>
          <target state="translated">已编译的正则表达式</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>By default, the regular expression engine compiles a regular expression to a sequence of internal instructions (these are high-level codes that are different from Microsoft intermediate language, or MSIL).</source>
          <target state="translated">默认情况下，正则表达式引擎将正则表达式编译成内部指令序列（这些指令序列是不同于 Microsoft 中间语言 (MSIL) 的高级代码）。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>When the engine executes a regular expression, it interprets the internal codes.</source>
          <target state="translated">当引擎执行正则表达式时，会解释内部代码。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If a <bpt id="p1">[</bpt>Regex<ept id="p1">](xref:System.Text.RegularExpressions.Regex)</ept> object is constructed with the <bpt id="p2">[</bpt>RegexOptions.Compiled<ept id="p2">](xref:System.Text.RegularExpressions.RegexOptions.Compiled)</ept> option, it compiles the regular expression to explicit MSIL code instead of high-level regular expression internal instructions.</source>
          <target state="translated">如果 <bpt id="p1">[</bpt>Regex<ept id="p1">](xref:System.Text.RegularExpressions.Regex)</ept> 对象是通过 <bpt id="p2">[</bpt>RegexOptions.Compiled<ept id="p2">](xref:System.Text.RegularExpressions.RegexOptions.Compiled)</ept> 选项构造的，则它会将正则表达式编译为显式 MSIL 代码，而不是高级正则表达式内部指令。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This allows .NET's just-in-time (JIT) compiler to convert the expression to native machine code for higher performance.</source>
          <target state="translated">这样，.NET 的实时 (JIT) 编译器便可以将表达式转换为本机代码以获得更高的性能。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>However, generated MSIL cannot be unloaded.</source>
          <target state="translated">但是，生成的 MSIL 不能卸载。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The only way to unload code is to unload an entire application domain (that is, to unload all of your application's code.).</source>
          <target state="translated">卸载代码的唯一方法是卸载整个应用程序域（即，卸载应用程序的所有代码）。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Effectively, once a regular expression is compiled with the <bpt id="p1">[</bpt>RegexOptions.Compiled<ept id="p1">](xref:System.Text.RegularExpressions.RegexOptions.Compiled)</ept> option, .NET never releases the resources used by the compiled expression, even if the regular expression was created by a <bpt id="p2">[</bpt>Regex<ept id="p2">](xref:System.Text.RegularExpressions.Regex)</ept> object that is itself released to garbage collection.</source>
          <target state="translated">实际上，一旦使用 <bpt id="p1">[</bpt>RegexOptions.Compiled<ept id="p1">](xref:System.Text.RegularExpressions.RegexOptions.Compiled)</ept> 选项编译正则表达式，.NET 就永远不会释放由编译的表达式使用的资源，即使创建该正则表达式的 <bpt id="p2">[</bpt>Regex<ept id="p2">](xref:System.Text.RegularExpressions.Regex)</ept> 对象本身已被释放并进行了垃圾回收，也是如此。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You must be careful to limit the number of different regular expressions you compile with the <bpt id="p1">[</bpt>RegexOptions.Compiled<ept id="p1">](xref:System.Text.RegularExpressions.RegexOptions.Compiled)</ept> option to avoid consuming too many resources.</source>
          <target state="translated">必须注意限制使用 <bpt id="p1">[</bpt>RegexOptions.Compiled<ept id="p1">](xref:System.Text.RegularExpressions.RegexOptions.Compiled)</ept> 选项编译的不同正则表达式的数目，避免消耗过多的资源。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If an application must use a large or unbounded number of regular expressions, each expression should be interpreted, not compiled.</source>
          <target state="translated">如果应用程序必须使用较大数量或极大数量的正则表达式，应该解释每个表达式，而不要编译它们。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>However, if a small number of regular expressions are used repeatedly, they should be compiled with <bpt id="p1">[</bpt>RegexOptions.Compiled<ept id="p1">](xref:System.Text.RegularExpressions.RegexOptions.Compiled)</ept> for better performance.</source>
          <target state="translated">但是，如果重复使用数目较少的正则表达式，则应使用 <bpt id="p1">[</bpt>RegexOptions.Compiled<ept id="p1">](xref:System.Text.RegularExpressions.RegexOptions.Compiled)</ept> 来编译它们，以获得更好的性能。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The Regular Expressions Cache</source>
          <target state="translated">正则表达式缓存</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>To improve performance, the regular expression engine maintains an application-wide cache of compiled regular expressions.</source>
          <target state="translated">为了提高性能，正则表达式引擎为已编译的正则表达式维护了一个应用程序范围的缓存。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The cache stores regular expression patterns that are used only in static method calls.</source>
          <target state="translated">该缓存只存储静态方法调用中使用的正则表达式模式。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>(Regular expression patterns supplied to instance methods are not cached.) This avoids the need to reparse an expression into high-level byte code each time it is used.</source>
          <target state="translated">（不缓存提供给实例方法的正则表达式模式。）这样，在每次使用正则表达式时，就无需将正则表达式重新分析成高级字节代码。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The maximum number of cached regular expressions is determined by the value of the <ph id="ph1">`static`</ph> (<ph id="ph2">`Shared`</ph> in Visual Basic) <bpt id="p1">[</bpt>Regex.CacheSize<ept id="p1">](xref:System.Text.RegularExpressions.Regex.CacheSize)</ept> property.</source>
          <target state="translated">缓存的正则表达式的最大数目由 <ph id="ph1">`static`</ph>（在 Visual Basic 中为 <ph id="ph2">`Shared`</ph>）<bpt id="p1">[</bpt>Regex.CacheSize<ept id="p1">](xref:System.Text.RegularExpressions.Regex.CacheSize)</ept> 属性的值决定。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>By default, the regular expression engine caches up to 15 compiled regular expressions.</source>
          <target state="translated">默认情况下，正则表达式引擎最多可缓存 15 个已编译的正则表达式。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If the number of compiled regular expressions exceeds the cache size, the least recently used regular expression is discarded and the new regular expression is cached.</source>
          <target state="translated">如果已编译正则表达式的数目超过缓存大小，则丢弃最早使用的正则表达式并缓存新的正则表达式。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Your application can take advantage of precompiled regular expressions in one of the following two ways:</source>
          <target state="translated">应用程序可通过以下两种方式之一来利用预编译的正则表达式：</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>By using a static method of the <bpt id="p1">[</bpt>Regex<ept id="p1">](xref:System.Text.RegularExpressions.Regex)</ept> object to define the regular expression.</source>
          <target state="translated">使用 <bpt id="p1">[</bpt>Regex<ept id="p1">](xref:System.Text.RegularExpressions.Regex)</ept> 对象的静态方法定义正则表达式。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If you are using a regular expression pattern that has already been defined in another static method call, the regular expression engine will retrieve it from the cache.</source>
          <target state="translated">如果要使用的正则表达式模式已在其他静态方法调用中定义，则正则表达式引擎将从缓存中检索该模式。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>If not, the engine will compile the regular expression and add it to the cache.</source>
          <target state="translated">如果不是这样，则引擎将编译正则表达式并将其添加到缓存中。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>By reusing an existing <bpt id="p1">[</bpt>Regex<ept id="p1">](xref:System.Text.RegularExpressions.Regex)</ept> object as long as its regular expression pattern is needed.</source>
          <target state="translated">重复使用现有的 <bpt id="p1">[</bpt>Regex<ept id="p1">](xref:System.Text.RegularExpressions.Regex)</ept> 对象（在需要使用其正则表达式模式时）。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Because of the overhead of object instantiation and regular expression compilation, creating and rapidly destroying numerous <bpt id="p1">[</bpt>Regex<ept id="p1">](xref:System.Text.RegularExpressions.Regex)</ept> objects is a very expensive process.</source>
          <target state="translated">由于对象实例化和正则表达式编译会产生大量的系统开销，因此创建大量 <bpt id="p1">[</bpt>Regex<ept id="p1">](xref:System.Text.RegularExpressions.Regex)</ept> 对象并迅速销毁它们的过程将占用大量资源。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For applications that use a large number of different regular expressions, you can optimize performance by using calls to static <bpt id="p1">[</bpt>Regex<ept id="p1">](xref:System.Text.RegularExpressions.Regex)</ept> methods and possibly by increasing the size of the regular expression cache.</source>
          <target state="translated">对于使用大量不同正则表达式的应用程序，可通过调用静态方法 <bpt id="p1">[</bpt>Regex<ept id="p1">](xref:System.Text.RegularExpressions.Regex)</ept> 并尽量增加正则表达式缓存的大小来优化其性能。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">另请参阅</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>.NET regular expressions<ept id="p1">](regular-expressions.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>.NET 正则表达式<ept id="p1">](regular-expressions.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>