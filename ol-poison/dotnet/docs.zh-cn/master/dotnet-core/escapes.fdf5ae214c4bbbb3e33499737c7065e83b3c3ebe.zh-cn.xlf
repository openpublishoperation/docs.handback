<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-6a73dd2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e4f4b9cde90a98215c0aaab6da217ff68476cf88</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\base-types\escapes.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p2</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d35bcbe4d9b600e23c083f58d79365fe706c4b9e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">654be0c1fa88e384746816288cddc163a5014a53</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">file escapes.fdf5ae214c4bbbb3e33499737c7065e83b3c3ebe.zh-cn.xlf is out of handoff scope</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Character escapes in regular expressions</source>
          <target state="translated">正则表达式中的字符转义</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Character escapes in regular expressions</source>
          <target state="translated">正则表达式中的字符转义</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET、.NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Character escapes in regular expressions</source>
          <target state="translated">正则表达式中的字符转义</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The backslash (<ph id="ph1">\)</ph> in a regular expression indicates one of the following:</source>
          <target state="translated">正则表达式中的反斜杠 (<ph id="ph1">\)</ph> 指示以下值之一：</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The character that follows it is a special character, as shown in the table in the following section.</source>
          <target state="translated">后接字符为特殊字符，如下节表中所示。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For example, <bpt id="p1">**</bpt>\b<ept id="p1">**</ept> is an anchor that indicates that a regular expression match should begin on a word boundary, <bpt id="p2">**</bpt>\t<ept id="p2">**</ept> represents a tab, and <bpt id="p3">**</bpt>\x020<ept id="p3">**</ept> represents a space.</source>
          <target state="translated">例如，<bpt id="p1">**</bpt>\b<ept id="p1">**</ept> 是指示正则表达式匹配应从单词边界开始的定位点，<bpt id="p2">**</bpt>\t<ept id="p2">**</ept> 表示制表符，而 <bpt id="p3">**</bpt>\x020<ept id="p3">**</ept> 表示空格。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A character that otherwise would be interpreted as an unescaped language construct should be interpreted literally.</source>
          <target state="translated">本应解释为未转义语言构造的字符应按字面意思进行解释。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For example, a brace (<bpt id="p1">**</bpt>{<ept id="p1">**</ept>) begins the definition of a quantifier, but a backslash followed by a brace (<bpt id="p2">**</bpt><ph id="ph1">\{</ph><ept id="p2">**</ept>) indicates that the regular expression engine should match the brace.</source>
          <target state="translated">例如，大括号 (<bpt id="p1">**</bpt>{<ept id="p1">**</ept>) 开始定义限定符，而反斜杠后接大括号 (<bpt id="p2">**</bpt><ph id="ph1">\{</ph><ept id="p2">**</ept>) 表示正则表达式引擎应匹配大括号。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Similarly, a single backslash marks the beginning of an escaped language construct, but two backslashes (<bpt id="p1">**</bpt><ph id="ph1">\\</ph><ept id="p1">**</ept>) indicate that the regular expression engine should match the backslash.</source>
          <target state="translated">同样，单个反斜杠标记转义的语言构造的开始，而两个反斜杠 (<bpt id="p1">**</bpt><ph id="ph1">\\</ph><ept id="p1">**</ept>) 表示正则表达式引擎应匹配反斜杠。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Character escapes are recognized in regular expression patterns but not in replacement patterns.</source>
          <target state="translated">字符转义可在正则表达式模式中识别，但无法在替换模式中识别。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Character Escapes in .NET</source>
          <target state="translated">.NET 中的字符转义</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The following table lists the character escapes supported by regular expressions in .NET.</source>
          <target state="translated">下表列出了 .NET 中正则表达式支持的字符转义。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Character or sequence</source>
          <target state="translated">字符或序列</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">说明</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>All characters except for the following: <bpt id="p1">*</bpt><bpt id="p2">*</bpt>. $ ^ { [ ( &amp;#124; ) <ept id="p2">*</ept> + ? <ph id="ph1">\*</ph><ept id="p1">*</ept></source>
          <target state="translated">除以下字符外的所有字符：<bpt id="p1">*</bpt><bpt id="p2">*</bpt>. $ ^ { [ ( &amp;#124; ) <ept id="p2">*</ept> + ? <ph id="ph1">\*</ph><ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Characters other than those listed in the <bpt id="p1">**</bpt>Character or sequence<ept id="p1">**</ept> column have no special meaning in regular expressions; they match themselves.</source>
          <target state="translated">“字符或序列”列中未包含的字符在正则表达式中没有特殊含义；此类字符与自身匹配。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The characters included in the <bpt id="p1">**</bpt>Character or sequence<ept id="p1">**</ept> column are special regular expression language elements.</source>
          <target state="translated">“字符或序列”列中包括的字符均为特殊的正则表达式语言元素。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>To match them in a regular expression, they must be escaped or included in a positive character group.</source>
          <target state="translated">若要在正则表达式中匹配这些字符，必须将其转义或纳入 positive 字符组。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For example, the regular expression <ph id="ph1">`\$\d+ or [$]\d+`</ph> matches "$1200".</source>
          <target state="translated">例如，正则表达式 <ph id="ph1">`\$\d+ or [$]\d+`</ph> 匹配“$1200”。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>\a<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>\a<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Matches a bell (alarm) character, <bpt id="p1">**</bpt>\u0007<ept id="p1">**</ept>.</source>
          <target state="translated">匹配响铃（警报）字符 <bpt id="p1">**</bpt>\u0007<ept id="p1">**</ept>。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>\b<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>\b<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In a <bpt id="p1">__</bpt>[<ept id="p1">__</ept><bpt id="p2">*</bpt>character<ept id="p2">*</ept><bpt id="p3">_</bpt><bpt id="p4">*</bpt>group<ept id="p4">*</ept><ept id="p3">_</ept><bpt id="p5">_</bpt>]<ept id="p5">_</ept>_ character class, matches a backspace, <bpt id="p6">**</bpt>\u0008<ept id="p6">**</ept>.</source>
          <target state="translated">在 <bpt id="p1">__</bpt>[<ept id="p1">__</ept>character<bpt id="p3">_</bpt>group<ept id="p3">_</ept><bpt id="p5">_</bpt>]<ept id="p5">_</ept>_ 字符类中，匹配退格 <bpt id="p6">**</bpt>\u0008<ept id="p6">**</ept>。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>(See <bpt id="p1">[</bpt>Character classes in regular expressions<ept id="p1">](classes.md)</ept>.) Outside a character class, <bpt id="p2">**</bpt>\b<ept id="p2">**</ept> is an anchor that matches a word boundary.</source>
          <target state="translated">（请参见 <bpt id="p1">[</bpt>正则表达式中的字符类<ept id="p1">](classes.md)</ept>。）在字符类之外，<bpt id="p2">**</bpt>\b<ept id="p2">**</ept> 是匹配字边界的定位点。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>(See <bpt id="p1">[</bpt>Anchors in regular expressions<ept id="p1">](anchors.md)</ept>.)</source>
          <target state="translated">（请参见 <bpt id="p1">[</bpt>正则表达式中的定位点<ept id="p1">](anchors.md)</ept>。）</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>\t<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>\t<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Matches a tab, <bpt id="p1">**</bpt>\u0009<ept id="p1">**</ept>.</source>
          <target state="translated">匹配制表符 <bpt id="p1">**</bpt>\u0009<ept id="p1">**</ept>。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>\r<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>\r<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Matches a carriage return, <bpt id="p1">**</bpt>\u000D<ept id="p1">**</ept>.</source>
          <target state="translated">匹配回车 <bpt id="p1">**</bpt>\u000D<ept id="p1">**</ept>。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Note that <bpt id="p1">**</bpt>\r<ept id="p1">**</ept> is not equivalent to the newline character, <bpt id="p2">**</bpt>\n<ept id="p2">**</ept>.</source>
          <target state="translated">请注意，<bpt id="p1">**</bpt>\r<ept id="p1">**</ept> 不等同于换行符 <bpt id="p2">**</bpt>\n<ept id="p2">**</ept>。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>\v<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>\v<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Matches a vertical tab, <bpt id="p1">**</bpt>\u000B<ept id="p1">**</ept>.</source>
          <target state="translated">匹配垂直制表符 <bpt id="p1">**</bpt>\u000B<ept id="p1">**</ept>。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>\f<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>\f<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Matches a form feed, <bpt id="p1">**</bpt>\u000C<ept id="p1">**</ept>.</source>
          <target state="translated">匹配换页 <bpt id="p1">**</bpt>\u000C<ept id="p1">**</ept>。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>\n<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>\n<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Matches a new line, <bpt id="p1">**</bpt>\u000A<ept id="p1">**</ept>.</source>
          <target state="translated">匹配换行 <bpt id="p1">**</bpt>\u000A<ept id="p1">**</ept>。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>\e<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>\e<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Matches an escape, <bpt id="p1">**</bpt>\u001B<ept id="p1">**</ept>.</source>
          <target state="translated">匹配转义 <bpt id="p1">**</bpt>\u001B<ept id="p1">**</ept>。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><ph id="ph1">*</ph><bpt id="p1">*</bpt><ph id="ph2">\*</ph><ept id="p1">*</ept><bpt id="p2">_</bpt>nnn<ept id="p2">_</ept></source>
          <target state="translated"><ph id="ph1">*</ph><bpt id="p1">*</bpt><ph id="ph2">\*</ph><ept id="p1">*</ept><bpt id="p2">_</bpt>nnn<ept id="p2">_</ept></target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Matches an ASCII character, where nnn consists of two or three digits that represent the octal character code.</source>
          <target state="translated">匹配 ASCII 字符，其中 nnn 包含表示八进制字符代码的两位数或三位数。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`\040`</ph> represents a space character.</source>
          <target state="translated">例如，<ph id="ph1">`\040`</ph> 表示空格字符。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This construct is interpreted as a backreference if it has only one digit (for example, <ph id="ph1">`\2`</ph>) or if it corresponds to the number of a capturing group.</source>
          <target state="translated">如果此构造仅包含一个数字（如 <ph id="ph1">`\2`</ph>）或者它对应捕获组的编号，则将它解释为向后引用。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>(See <bpt id="p1">[</bpt>Backreference constructs in regular expressions<ept id="p1">](backreference.md)</ept>.)</source>
          <target state="translated">（请参见<bpt id="p1">[</bpt>正则表达式中的反向引用构造<ept id="p1">](backreference.md)</ept>。）</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>\x<ept id="p1">**</ept><bpt id="p2">_</bpt>nn<ept id="p2">_</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>\x<ept id="p1">**</ept><bpt id="p2">_</bpt>nn<ept id="p2">_</ept></target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Matches an ASCII character, where <bpt id="p1">*</bpt>nn<ept id="p1">*</ept> is a two-digit hexadecimal character code.</source>
          <target state="translated">匹配 ASCII 字符，其中 nn 是两位数的十六进制字符代码。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>\c<ept id="p1">**</ept><bpt id="p2">_</bpt>X<ept id="p2">_</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>\c<ept id="p1">**</ept><bpt id="p2">_</bpt>X<ept id="p2">_</ept></target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Matches an ASCII control character, where <bpt id="p1">*</bpt>X<ept id="p1">*</ept> is the letter of the control character.</source>
          <target state="translated">匹配 ASCII 控制字符，其中 X 是控制字符的字母。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`\cC`</ph> is CTRL-C.</source>
          <target state="translated">例如，<ph id="ph1">`\cC`</ph> 为 CTRL-C。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>\u<ept id="p1">**</ept><bpt id="p2">_</bpt>nnnn<ept id="p2">_</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>\u<ept id="p1">**</ept><bpt id="p2">_</bpt>nnnn<ept id="p2">_</ept></target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Matches a UTF-16 code unit whose value is <bpt id="p1">*</bpt>nnnn<ept id="p1">*</ept> hexadecimal.</source>
          <target state="translated">匹配的 UTF-16 代码单元，单元值是 nnnn 十六进制。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept> The Perl 5 character escape that is used to specify Unicode is not supported by .NET.</source>
          <target state="translated"><bpt id="p1">**</bpt>注意<ept id="p1">**</ept> .NET 不支持用于指定 Unicode 的 Perl 5 字符转义。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The Perl 5 character escape has the form <bpt id="p1">**</bpt>\x{####…}<ept id="p1">**</ept>, where <bpt id="p2">**</bpt>####…<ept id="p2">**</ept></source>
          <target state="translated">Perl 5 字符转义的形式为 <bpt id="p1">**</bpt>\x{####…}<ept id="p1">**</ept>，其中 <bpt id="p2">**</bpt>####…<ept id="p2">**</ept></target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>is a series of hexadecimal digits.</source>
          <target state="translated">是一系列十六进制数字。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Instead, use <bpt id="p1">**</bpt>\u<ept id="p1">**</ept><bpt id="p2">_</bpt>nnnn<ept id="p2">_</ept>.</source>
          <target state="translated">请改用 <bpt id="p1">**</bpt>\u<ept id="p1">**</ept><bpt id="p2">_</bpt>nnnn<ept id="p2">_</ept>。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>When followed by a character that is not recognized as an escaped character, matches that character.</source>
          <target state="translated">后接字符未识别为转义字符时，将匹配此字符。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`\*`</ph> matches an asterisk (*) and is the same as <ph id="ph2">`\x2A`</ph>.</source>
          <target state="translated">例如，<ph id="ph1">`\*`</ph> 匹配星号 (*) 并等同于 <ph id="ph2">`\x2A`</ph>。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">示例</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The following example illustrates the use of character escapes in a regular expression.</source>
          <target state="translated">以下示例说明了如何使用正则表达式中的字符转义。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>It parses a string that contains the names of the world's largest cities and their populations in 2009.</source>
          <target state="translated">分析了包含 2009 年世界上最大城市的名称及其人口的字符串。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Each city name is separated from its population by a tab (<bpt id="p1">**</bpt>\t<ept id="p1">**</ept>) or a vertical bar (| or <ph id="ph1">`\u007c`</ph>).</source>
          <target state="translated">使用制表符 (<bpt id="p1">**</bpt>\t<ept id="p1">**</ept>) 或垂直条（| 或 <ph id="ph1">`\u007c`</ph>）将每个城市名与其人口数量分开。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Individual cities and their populations are separated from each other by a carriage return and line feed.</source>
          <target state="translated">使用回车符和换行符分隔各个城市及其人口。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The regular expression <ph id="ph1">`\G(.+)[\t|\u007c](.+)\r?\n`</ph> is interpreted as shown in the following table.</source>
          <target state="translated">正则表达式 <ph id="ph1">`\G(.+)[\t|\u007c](.+)\r?\n`</ph> 可以解释为下表中所示内容。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">模式</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">说明</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Begin the match where the last match ended.</source>
          <target state="translated">从上次匹配结束处开始匹配。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Match any character one or more times.</source>
          <target state="translated">一次或多次匹配任何字符。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>This is the first capturing group.</source>
          <target state="translated">这是第一个捕获组。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Match a tab (<bpt id="p1">**</bpt>\t<ept id="p1">**</ept>) or a vertical bar (&amp;#124;).</source>
          <target state="translated">匹配制表符 (<bpt id="p1">**</bpt>\t<ept id="p1">**</ept>) 或垂直条 (&amp;#124;)。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Match any character one or more times.</source>
          <target state="translated">一次或多次匹配任何字符。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>This is the second capturing group.</source>
          <target state="translated">这是第二个捕获组。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Match zero or one occurrence of a carriage return followed by a new line.</source>
          <target state="translated">匹配零或一个出现回车符后接新行的次数。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">另请参阅</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Regular expression language - quick reference<ept id="p1">](quick-ref.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>正则表达式语言 - 快速参考<ept id="p1">](quick-ref.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>