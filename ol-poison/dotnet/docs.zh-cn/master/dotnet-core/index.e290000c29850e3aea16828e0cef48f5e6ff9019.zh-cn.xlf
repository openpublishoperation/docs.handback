<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-6a73dd2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">66d9060cd92cfe5718c55eb54e721c1239e6f2f1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\index.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p1</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">51d85d4a1a8987cad00d52188931fd6d20e3f794</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f8b7617179284f4ea9a4c845d1f3e19ce9fc248e</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">file index.e290000c29850e3aea16828e0cef48f5e6ff9019.zh-cn.xlf is out of handoff scope</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>.NET Core</source>
          <target state="translated">.NET 核心</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>.NET Core</source>
          <target state="translated">.NET 核心</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET, .NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>.NET Core</source>
          <target state="translated">.NET 核心</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Check out the <bpt id="p1">[</bpt>"Getting Started" tutorials<ept id="p1">](getting-started.md)</ept> to learn how to create a simple .NET Core application.</source>
          <target state="translated">请查看<bpt id="p1">[</bpt>“入门”教程<ept id="p1">](getting-started.md)</ept>，了解如何创建简单的 .NET Core 应用程序。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>It only takes a few minutes to get your first app up and running.</source>
          <target state="translated">只需几分钟即可生成并运行第一个应用。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>.NET Core is a general purpose development platform maintained by Microsoft and the .NET community on <bpt id="p1">[</bpt>GitHub<ept id="p1">](https://github.com/dotnet/core)</ept>.</source>
          <target state="translated">.NET Core 是一个通用开发平台，由 Microsoft 和 <bpt id="p1">[</bpt>GitHub<ept id="p1">](https://github.com/dotnet/core)</ept> 上的 .NET 社区共同维护。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>It is cross-platform, supporting Windows, macOS and Linux, and can be used in device, cloud, and embedded/IoT scenarios.</source>
          <target state="translated">它是跨平台的，支持 Windows、macOS 和 Linux，并且可用于设备、云和嵌入式/IoT 方案。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The following characteristics best define .NET Core:</source>
          <target state="translated">以下特征对 .NET Core 进行了最好的定义：</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Flexible deployment:<ept id="p1">**</ept> Can be included in your app or installed side-by-side user- or machine-wide.</source>
          <target state="translated"><bpt id="p1">**</bpt>部署灵活：<ept id="p1">**</ept>可以包含在应用或已安装的并行用户或计算机范围中。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Cross-platform:<ept id="p1">**</ept> Runs on Windows, macOS and Linux; can be ported to other OSes.</source>
          <target state="translated"><bpt id="p1">**</bpt>跨平台：<ept id="p1">**</ept>可以在 Windows、macOS 和 Linux 上运行；也可移植到其他操作系统。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>supported Operating Systems (OS)<ept id="p1">](https://github.com/dotnet/core/blob/master/roadmap.md)</ept>, CPUs and application scenarios will grow over time, provided by Microsoft, other companies, and individuals.</source>
          <target state="translated">Microsoft、其他公司和个人提供的<bpt id="p1">[</bpt>支持的操作系统 (OS)<ept id="p1">](https://github.com/dotnet/core/blob/master/roadmap.md)</ept>、CPU 和应用程序方案会随着时间推移而增多。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Command-line tools:<ept id="p1">**</ept>  All product scenarios can be exercised at the command-line.</source>
          <target state="translated"><bpt id="p1">**</bpt>命令行工具：<ept id="p1">**</ept>可在命令行中执行所有产品方案。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Compatible:<ept id="p1">**</ept> .NET Core is compatible with .NET Framework, Xamarin and Mono, via the <bpt id="p2">[</bpt>.NET Standard Library<ept id="p2">](../standard/library.md)</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>兼容性：<ept id="p1">**</ept> .NET Core 通过 <bpt id="p2">[</bpt>.NET 标准库<ept id="p2">](../standard/library.md)</ept>与 .NET Framework、Xamarin 和 Mono 兼容。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Open source:<ept id="p1">**</ept> The .NET Core platform is open source, using MIT and Apache 2 licenses.</source>
          <target state="translated"><bpt id="p1">**</bpt>开放源：<ept id="p1">**</ept>.NET Core 是一个开放源平台，使用 MIT 和 Apache 2 许可证。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Documentation is licensed under <bpt id="p1">[</bpt>CC-BY<ept id="p1">](http://creativecommons.org/licenses/by/4.0/)</ept>.</source>
          <target state="translated">文档由 <bpt id="p1">[</bpt>CC-BY<ept id="p1">](http://creativecommons.org/licenses/by/4.0/)</ept> 许可发行。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>.NET Core is a <bpt id="p1">[</bpt>.NET Foundation<ept id="p1">](http://www.dotnetfoundation.org/)</ept> project.</source>
          <target state="translated">.NET Core 是一个 <bpt id="p1">[</bpt>.NET Foundation<ept id="p1">](http://www.dotnetfoundation.org/)</ept> 项目。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Supported by Microsoft:<ept id="p1">**</ept> .NET Core is supported by Microsoft, per <bpt id="p2">[</bpt>.NET Core Support<ept id="p2">](https://www.microsoft.com/net/core/support/)</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>由 Microsoft 支持：<ept id="p1">**</ept>.NET Core 由 Microsoft 依据 <bpt id="p2">[</bpt>.NET Core 支持<ept id="p2">](https://www.microsoft.com/net/core/support/)</ept>提供支持</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Composition</source>
          <target state="translated">撰写</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>.NET Core is composed of the following parts:</source>
          <target state="translated">.NET Core 包括以下部分：</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>.NET runtime<ept id="p1">](https://github.com/dotnet/coreclr)</ept>, which provides a type system, assembly loading, a garbage collector, native interop and other basic services.</source>
          <target state="translated"><bpt id="p1">[</bpt>.NET 运行时<ept id="p1">](https://github.com/dotnet/coreclr)</ept>：提供类型系统、程序集加载、垃圾回收器、本机互操作和其他基本服务。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>A set of <bpt id="p1">[</bpt>framework libraries<ept id="p1">](https://github.com/dotnet/corefx)</ept>, which provide primitive data types, app composition types and fundamental utilities.</source>
          <target state="translated">一组 <bpt id="p1">[</bpt>框架库<ept id="p1">](https://github.com/dotnet/corefx)</ept>：提供基元数据类型、应用编写类型和基本实用程序。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>set of SDK tools<ept id="p1">](https://github.com/dotnet/cli)</ept> and <bpt id="p2">[</bpt>language compilers<ept id="p2">](https://github.com/dotnet/roslyn)</ept> that enable the base developer experience, available in the <bpt id="p3">[</bpt>.NET Core SDK<ept id="p3">](sdk.md)</ept>.</source>
          <target state="translated">一组 <bpt id="p1">[</bpt>SDK 工具<ept id="p1">](https://github.com/dotnet/cli)</ept>和<bpt id="p2">[</bpt>语言编译器<ept id="p2">](https://github.com/dotnet/roslyn)</ept>：提供基本的开发人员体验，可用于 <bpt id="p3">[</bpt>.NET Core SDK<ept id="p3">](sdk.md)</ept>。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The 'dotnet' app host, which is used to launch .NET Core apps.</source>
          <target state="translated">“dotnet”应用主机，用于启动 .NET Core 应用。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>It selects the runtime and hosts the runtime, provides an assembly loading policy and launches the app.</source>
          <target state="translated">它选择运行时并托管运行时，提供程序集加载策略来启动应用。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The same host is also used to launch SDK tools in much the same way.</source>
          <target state="translated">同一主机还可用于以大致相同的方式启动 SDK 工具。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Languages</source>
          <target state="translated">语言</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The C# and F# languages (Visual Basic is coming) can be used to write applications and libraries for .NET Core.</source>
          <target state="translated">可以使用 C# 和 F# 语言（即将推出 Visual Basic）编写 .NET Core 的应用程序和库。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The compilers run on .NET Core, enabling you to develop for .NET Core anywhere it runs.</source>
          <target state="translated">在 .NET Core 上运行的编译器可以在其运行的任何地方进行 .NET Core 开发。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In general, you will not use the compilers directly, but indirectly using the SDK tools.</source>
          <target state="translated">一般情况下，不会直接使用编译器，但会间接使用 SDK 工具。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The C# and F# compilers and the .NET Core tools are or can be integrated into several text editors and IDEs, including Visual Studio, <bpt id="p1">[</bpt>Visual Studio Code<ept id="p1">](https://marketplace.visualstudio.com/items?itemName=ms-vscode.csharp)</ept>, Sublime Text and Vim, making .NET Core development an option in your favorite coding environment and OS.</source>
          <target state="translated">C# 和 F# 编译器以及 .NET Core 工具已集成到或可以集成到多个文本编辑器和 IDE 中，包括 Visual Studio、<bpt id="p1">[</bpt>Visual Studio Code<ept id="p1">](https://marketplace.visualstudio.com/items?itemName=ms-vscode.csharp)</ept> 和 Sublime Text 以及 Vim，使 .NET Core 开发可以在你钟爱的环境和 OS 中进行。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This integration is provided, in part, by the good folks of the <bpt id="p1">[</bpt>OmniSharp project<ept id="p1">](http://www.omnisharp.net/)</ept>.</source>
          <target state="translated">这种集成部分由 <bpt id="p1">[</bpt>OmniSharp 项目<ept id="p1">](http://www.omnisharp.net/)</ept>的高手提供。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>.NET APIs and Compatibility</source>
          <target state="translated">.NET API 和兼容性</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>.NET Core can be thought of as a cross-platform version of the .NET Framework, at the layer of the .NET Framework Base Class Libraries (BCL).</source>
          <target state="translated">可将 .NET Core 看作是 .NET Framework 在 .NET Framework 基类库 (BCL) 的跨平台版本。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>It implements the <bpt id="p1">[</bpt>.NET Standard Library<ept id="p1">](../standard/library.md)</ept> specification.</source>
          <target state="translated">它执行 <bpt id="p1">[</bpt>.NET 标准库<ept id="p1">](../standard/library.md)</ept>规范。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>.NET Core provides a subset of the APIs that are available in the .NET Framework or Mono/Xamarin.</source>
          <target state="translated">.NET Core 提供了一个可用于 .NET Framework 或 Mono/Xamarin 的 API 子集。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>In some cases, types are not fully implemented (some members are not available or have been moved).</source>
          <target state="translated">在某些情况下，类型未完全实现（某些成员不可用或已移动）。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Look at the <bpt id="p1">[</bpt>.NET Core roadmap<ept id="p1">](https://github.com/dotnet/core/blob/master/roadmap.md)</ept> to learn more about the .NET Core API roadmap.</source>
          <target state="translated">有关 .NET Core API 的详细信息，请参阅 <bpt id="p1">[</bpt>.NET Core roadmap<ept id="p1">](https://github.com/dotnet/core/blob/master/roadmap.md)</ept>（.NET Core API 产品系列）。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Relationship to the .NET Standard Library</source>
          <target state="translated">与 .NET 标准库的关系</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>.NET Standard Library<ept id="p1">](../standard/library.md)</ept> is an API spec that describes the consistent set of .NET APIs that developers can expect in each .NET implementation.</source>
          <target state="translated"><bpt id="p1">[</bpt>.NET 标准库<ept id="p1">](../standard/library.md)</ept>是描述开发人员可以在每个 .NET 实现中看到的一组一致的 API 规范。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>.NET implementations need to implement this spec in order to be considered .NET Standard Library compliant and to support libraries that target the .NET Standard Library.</source>
          <target state="translated">.NET 实现需要执行此规范才能被视为合规的 .NET 标准库以及才能支持面向 .NET 标准库的库。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>.NET Core implements the .NET Standard Library, and therefore supports .NET Standard Libraries.</source>
          <target state="translated">由于 .NET Core 可实现 .NET 标准库，因此也支持 .NET 标准库。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Workloads</source>
          <target state="translated">工作负载</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>By itself, .NET Core includes a single application model -- console apps -- which is useful for tools, local services and text-based games.</source>
          <target state="translated">就本身而言，.NET Core 包括单个应用程序模型（控制台应用），这对工具、本地服务和基于文本的游戏很有用。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Additional application models have been built on top of .NET Core to extend its functionality, such as:</source>
          <target state="translated">除 .NET Core 外，还生成了其他应用程序模型以扩展其功能，例如：</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ASP.NET Core<ept id="p1">](http://asp.net)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>ASP.NET Core<ept id="p1">](http://asp.net)</ept></target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Windows 10 Universal Windows Platform (UWP)<ept id="p1">](https://developer.microsoft.com/windows)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Windows 10 通用 Windows 平台 (UWP)<ept id="p1">](https://developer.microsoft.com/windows)</ept></target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Xamarin.Forms<ept id="p1">](https://www.xamarin.com/forms)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Xamarin.Forms<ept id="p1">](https://www.xamarin.com/forms)</ept></target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Open Source</source>
          <target state="translated">开放源</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>.NET Core<ept id="p1">](https://github.com/dotnet/core)</ept> is open source (MIT license) and was contributed to the <bpt id="p2">[</bpt>.NET Foundation<ept id="p2">](http://dotnetfoundation.org)</ept> by Microsoft in 2014.</source>
          <target state="translated"><bpt id="p1">[</bpt>.NET Core<ept id="p1">](https://github.com/dotnet/core)</ept> 属于开放源（MIT 许可证），由 Microsoft 于 2014 年提供给 <bpt id="p2">[</bpt>.NET Foundation<ept id="p2">](http://dotnetfoundation.org)</ept>。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>It is now one of the most active .NET Foundation projects.</source>
          <target state="translated">现在它是最活跃的 .NET Foundation 项目之一。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>It can be freely adopted by individuals and companies, including for personal, academic or commercial purposes.</source>
          <target state="translated">可由个人和企业自由采用，包括用于个人、学术或商业目的。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Multiple companies use .NET Core as part of apps, tools, new platforms and hosting services.</source>
          <target state="translated">许多公司已使用 .NET Core 作为应用、工具、新平台和托管服务的一部分。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Some of these companies make significant contributions to .NET Core on GitHub and provide guidance on the product direction as part of the <bpt id="p1">[</bpt>.NET Foundation Technical Steering Group<ept id="p1">](http://www.dotnetfoundation.org/blog/tsg-welcome)</ept>.</source>
          <target state="translated">其中某些公司对 GitHub 上的 .NET Core 做出了巨大贡献，并作为 <bpt id="p1">[</bpt>.NET Foundation Technical Steering Group<ept id="p1">](http://www.dotnetfoundation.org/blog/tsg-welcome)</ept>（.NET Foundation 技术控制组）的成员，指导产品方向。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Acquisition</source>
          <target state="translated">获取</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>.NET Core is distributed in two main ways, as packages on NuGet.org and as standalone distributions.</source>
          <target state="translated">.NET Core 主要以两种方式发行，以包方式在 NuGet.org 上发行，以及以独立方式发行。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Distributions</source>
          <target state="translated">分布</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>You can download .NET Core at the <bpt id="p1">[</bpt>.NET Core Getting Started<ept id="p1">](https://www.microsoft.com/net/core)</ept> page.</source>
          <target state="translated">可以在 <bpt id="p1">[</bpt>.NET Core 入门<ept id="p1">](https://www.microsoft.com/net/core)</ept>页下载 .NET Core。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>Microsoft .NET Core<ept id="p1">*</ept> distribution includes the CoreCLR runtime, associated libraries, a console application host and the <ph id="ph1">`dotnet`</ph> app launcher.</source>
          <target state="translated"><bpt id="p1">*</bpt>Microsoft.NET Core<ept id="p1">*</ept> 分发包括 CoreCLR 运行时、关联库、控制台应用程序主机和 <ph id="ph1">`dotnet`</ph> 应用启动器。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>It is described by the <bpt id="p1">[</bpt><ph id="ph1">`Microsoft.NETCore.App`</ph><ept id="p1">](https://www.nuget.org/packages/Microsoft.NETCore.App)</ept> metapackage.</source>
          <target state="translated">相关描述请参见 <bpt id="p1">[</bpt><ph id="ph1">`Microsoft.NETCore.App`</ph><ept id="p1">](https://www.nuget.org/packages/Microsoft.NETCore.App)</ept> 元包。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>Microsoft .NET Core SDK<ept id="p1">*</ept> distribution includes .NET Core and a set of tools for restoring NuGet packages and compiling and building apps.</source>
          <target state="translated"><bpt id="p1">*</bpt>Microsoft .NET Core SDK<ept id="p1">*</ept> 分发包括 .NET Core 和一套用来还原 NuGet 数据包以及编译并生成应用的工具。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Typically, you will first install the .NET Core SDK to get started with .NET Core development.</source>
          <target state="translated">通常情况下，将首先安装 .NET Core SDK，以开始 .NET Core 开发。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>You may choose to install additional .NET Core (perhaps pre-release) builds.</source>
          <target state="translated">可以选择安装其他 .NET Core 版本（可以是预发行版）。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Packages</source>
          <target state="translated">包</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>.NET Core Packages<ept id="p1">](packages.md)</ept> contain the .NET Core runtime and libraries (reference assemblies and implementations).</source>
          <target state="translated"><bpt id="p1">[</bpt>.NET Core 包<ept id="p1">](packages.md)</ept>包含 .NET Core 运行时和库（引用程序集和实现）。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>For example, <bpt id="p1">[</bpt>System.Net.Http<ept id="p1">](https://www.nuget.org/packages/System.Net.Http/)</ept>.</source>
          <target state="translated">例如，<bpt id="p1">[</bpt>System.Net.Http<ept id="p1">](https://www.nuget.org/packages/System.Net.Http/)</ept>。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>.NET Core Metapackages<ept id="p1">](packages.md)</ept> describe various layers and app-models by referencing the appropriate set of versioned library packages.</source>
          <target state="translated"><bpt id="p1">[</bpt>.NET Core 元包<ept id="p1">](packages.md)</ept>通过引用相应的带有版本的库包组合来描述各个层和应用模型。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Architecture</source>
          <target state="translated">体系结构</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>.NET Core is a cross-platform .NET implementation.</source>
          <target state="translated">.NET Core 是一个跨平台的 .NET 实现。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The primary architectural concerns unique to .NET Core are related to providing platform-specific implementations for supported platforms.</source>
          <target state="translated">.NET Core 特有的主要体系结构是为支持的平台提供特定于平台的实现。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Environments</source>
          <target state="translated">环境</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>.NET Core is supported by Microsoft on Windows, macOS and Linux.</source>
          <target state="translated">.NET Core 由 Microsoft 在 Windows、macOS 和 Linux 上提供支持。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>On Linux, Microsoft primarily supports .NET Core running on Red Hat Enterprise Linux (RHEL) and Debian distribution families.</source>
          <target state="translated">在 Linux 上，Microsoft 主要支持 Red Hat Enterprise Linux (RHEL) 和 Debian 分发系列上运行的 .NET Core。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>.NET Core currently supports X64 CPUs.</source>
          <target state="translated">.NET Core 目前支持 X64 CPU。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>On Windows, X86 is also supported.</source>
          <target state="translated">在 Windows 上，也支持 X86。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>ARM64 and ARM32 are in progress.</source>
          <target state="translated">将支持 ARM64 和 ARM32。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>.NET Core Roadmap<ept id="p1">](https://github.com/dotnet/core/blob/master/roadmap.md)</ept> provides more detailed information on workload and OS and CPU environment support and plans.</source>
          <target state="translated">有关工作负荷和 OS 以及 CPU 环境支持和计划的更详细信息，请参阅 <bpt id="p1">[</bpt>.NET Core Roadmap<ept id="p1">](https://github.com/dotnet/core/blob/master/roadmap.md)</ept>（.NET Core 产品系列）。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Other companies or groups may support .NET Core for other app types and environment.</source>
          <target state="translated">对于其他应用类型和环境，其他公司或团体可能支持 .NET Core。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Designed for Adaptability</source>
          <target state="translated">针对适应性而设计</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>.NET Core has been built as a very similar but unique product relative to other .NET products.</source>
          <target state="translated">与其他 .NET 产品相比，生成的 .NET Core 与它们十分类似，但具有唯一性。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>It has been designed to enable broad adaptability to new platforms, for new workloads and with new compiler toolchains.</source>
          <target state="translated">其目的是能够适应广泛的新平台、新的工作负荷和新的编译器工具链。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>It has several OS and CPU ports in progress and may be ported to many more.</source>
          <target state="translated">它有多个 OS 和 CPU 端口正在使用中，并可以移植到更多端口。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>An example is the <bpt id="p1">[</bpt>LLILC<ept id="p1">](https://github.com/dotnet/llilc)</ept> project, which is an early prototype of native compilation for .NET Core via the <bpt id="p2">[</bpt>LLVM<ept id="p2">](http://llvm.org/)</ept> compiler.</source>
          <target state="translated">以 <bpt id="p1">[</bpt>LLILC<ept id="p1">](https://github.com/dotnet/llilc)</ept> 项目为例，它是早期 .NET Core 通过 <bpt id="p2">[</bpt>LLVM<ept id="p2">](http://llvm.org/)</ept> 编译器进行本地编译的原型。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The product is broken into several pieces, enabling the various parts to be adapted to new platforms on different schedules.</source>
          <target state="translated">该产品分为几个部分，使各个部件能够根据不同的计划适应新的平台。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The runtime and platform-specific foundational libraries must be ported as a unit.</source>
          <target state="translated">必须将运行时和特定于平台的基础库作为一个单元进行移植。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Platform-agnostic libraries should work as-is on all platforms, by construction.</source>
          <target state="translated">与平台无关的库应在所有平台上按照构建的原样运行。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>There is a project bias to reducing platform-specific implementations to increase developer efficiency, preferring platform-neutral C# code whenever an algorithm or API can be implemented in-full or in-part that way.</source>
          <target state="translated">对于通过减少特定于平台的实现以提高开发人员效率方面，项目存在偏差，但每当可以以此方式全部或部分实现算法或 API 时，都应首选与平台无关的 C# 代码。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>People commonly ask how .NET Core is implemented in order to support multiple operating systems.</source>
          <target state="translated">人们经常会问，为支持多个操作系统应如何实现 .NET Core。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>They typically ask if there are separate implementations or if <bpt id="p1">[</bpt>conditional compilation<ept id="p1">](https://en.wikipedia.org/wiki/Conditional_compilation)</ept> is used.</source>
          <target state="translated">他们还会问是否存在单独的实现，或是否使用 <bpt id="p1">[</bpt>conditional compilation<ept id="p1">](https://en.wikipedia.org/wiki/Conditional_compilation)</ept>（条件编译）。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>It's both, with a strong bias towards conditional compilation.</source>
          <target state="translated">这两者都在用，但强烈偏向条件编译。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>You can see in the chart below that the vast majority of <bpt id="p1">[</bpt>CoreFX<ept id="p1">](https://github.com/dotnet/corefx)</ept> is platform-neutral code that is shared across all platforms.</source>
          <target state="translated">可以在下面的图表看出大多数 <bpt id="p1">[</bpt>CoreFX<ept id="p1">](https://github.com/dotnet/corefx)</ept> 都是与平台无关的代码，该代码可在所有平台共享。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Platform-neutral code can be implemented as a single portable assembly that be used on all platforms.</source>
          <target state="translated">与平台无关的代码可作为在所有平台上使用的单个可移植程序集使用。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>CoreFX: Lines of Code per Platform</source>
          <target state="translated">CoreFX：每个平台的代码行数</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Windows and Unix implementations are similar in size.</source>
          <target state="translated">Windows 和 Unix 实现大小相似。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Windows has a larger implementation since CoreFX implements some Windows-only features, such as <bpt id="p1">[</bpt>Microsoft.Win32.Registry<ept id="p1">](https://github.com/dotnet/corefx/tree/master/src/Microsoft.Win32.Registry)</ept> but does not yet implement any Unix-only concepts.</source>
          <target state="translated">Windows 具有较大的实现，因为 CoreFX 实现了某些仅适用于 Windows 的功能，如 <bpt id="p1">[</bpt>Microsoft.Win32.Registry<ept id="p1">](https://github.com/dotnet/corefx/tree/master/src/Microsoft.Win32.Registry)</ept>，但尚未实现任何仅适用于 Unix 的概念。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>You will also see that the majority of the Linux and macOS implementations are shared across a Unix implementation, while the Linux- and macOS-specific implementations are roughly similar in size.</source>
          <target state="translated">你将发现大多数 Linux 和 macOS 实现都是在 Unix 实现中实现的，而特定于 Linux 和 macOS 的实现大小大致相同。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>There are a mix of platform-specific and platform-neutral libraries in .NET Core.</source>
          <target state="translated">.NET Core 中混合存在特定于平台和与平台无关的库。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>You can see the pattern in a few examples:</source>
          <target state="translated">可以查看几个示例中的模式：</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CoreCLR<ept id="p1">](https://github.com/dotnet/coreclr)</ept> is platform-specific.</source>
          <target state="translated"><bpt id="p1">[</bpt>CoreCLR<ept id="p1">](https://github.com/dotnet/coreclr)</ept> 是特定于平台的。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>It's built in C/C++, so is platform-specific by construction.</source>
          <target state="translated">它是使用 C/C++ 生成的，因此根据构造，它是特定于平台的。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.IO<ept id="p1">](https://github.com/dotnet/corefx/tree/master/src/System.IO)</ept> and <bpt id="p2">[</bpt>System.Security.Cryptography.Algorithms<ept id="p2">](https://github.com/dotnet/corefx/tree/master/src/System.Security.Cryptography.Algorithms)</ept> are platform-specific, given that the storage and cryptography APIs differ significantly on each OS.</source>
          <target state="translated">考虑到每个 OS 上的存储和加密 API 具有显著差异，<bpt id="p1">[</bpt>System.IO<ept id="p1">](https://github.com/dotnet/corefx/tree/master/src/System.IO)</ept> 和 <bpt id="p2">[</bpt>System.Security.Cryptography.Algorithms<ept id="p2">](https://github.com/dotnet/corefx/tree/master/src/System.Security.Cryptography.Algorithms)</ept> 是特定于平台的。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.Collections<ept id="p1">](https://github.com/dotnet/corefx/tree/master/src/System.Collections)</ept> and <bpt id="p2">[</bpt>System.Linq<ept id="p2">](https://github.com/dotnet/corefx/tree/master/src/System.Linq)</ept> are platform-neutral, given that they create and operate over data structures.</source>
          <target state="translated">考虑到它们是通过数据结构创建和操作，<bpt id="p1">[</bpt>System.Collections<ept id="p1">](https://github.com/dotnet/corefx/tree/master/src/System.Collections)</ept> 和 <bpt id="p2">[</bpt>System.Linq<ept id="p2">](https://github.com/dotnet/corefx/tree/master/src/System.Linq)</ept> 是与平台无关的。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Comparisons to other .NET Platforms</source>
          <target state="translated">与其他 .NET 平台比较</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>It is perhaps easiest to understand the size and shape of .NET Core by comparing it to existing .NET platforms.</source>
          <target state="translated">将 .NET Core 与现有平台进行比较，这可能是了解其大小和形状最简单的方法了。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Comparison with .NET Framework</source>
          <target state="translated">与 .NET Framework 比较</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The .NET platform was first announced by Microsoft in 2000 and then evolved from there.</source>
          <target state="translated">.NET 平台由 Microsoft 于 2000 年首次发布，而后发展至今。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The .NET Framework has been the primary .NET product produced by Microsoft during that 15+ year span.</source>
          <target state="translated">15 年多以来，.NET Framework 一直是 Microsoft 生产的主要 .NET 产品。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The major differences between .NET Core and the .NET Framework:</source>
          <target state="translated">.NET Core 和 .NET Framework 的主要差异在于：</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>App-models<ept id="p1">**</ept> -- .NET Core does not support all the .NET Framework app-models, in part because many of them are built on Windows technologies, such as WPF (built on top of DirectX).</source>
          <target state="translated"><bpt id="p1">**</bpt>应用模型<ept id="p1">**</ept> -- .NET Core 不支持所有 .NET Framework 应用模型，某种程序上是因为其中许多模型都是基于 Windows 技术，如 WPF（基于 DirectX 生成）。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The console and ASP.NET Core app-models are supported by both .NET Core and .NET Framework.</source>
          <target state="translated">但 .NET Core 和 .NET Framework 两者都支持控制台和 ASP.NET Core 应用模型。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>APIs<ept id="p1">**</ept> -- .NET Core contains many of the same, but fewer, APIs as the .NET Framework, and with a different factoring (assembly names are different; type shape differs in key cases).</source>
          <target state="translated"><bpt id="p1">**</bpt>API<ept id="p1">**</ept> -- .NET Core 包含很多与 .NET Framework 相同，但数量较少的 API，并且具有不同的组成要素（程序集名称不同；关键用例中的类型形状不同）。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>These differences currently typically require changes to port source to .NET Core.</source>
          <target state="translated">目前，这些差异通常都需要更改，以将源移植到 .NET Core。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>.NET Core implements the <bpt id="p1">[</bpt>.NET Standard Library<ept id="p1">](../standard/library.md)</ept> API, which will grow to include more of the .NET Framework BCL API over time.</source>
          <target state="translated">.NET Core 实现 <bpt id="p1">[</bpt>.NET 标准库<ept id="p1">](../standard/library.md)</ept> API，该 API 将随着时间推移而增长，以便包含更多 .NET Framework BCL API。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Subsystems<ept id="p1">**</ept> -- .NET Core implements a subset of the subsystems in the .NET Framework, with the goal of a simpler implementation and programming model.</source>
          <target state="translated"><bpt id="p1">**</bpt>子系统<ept id="p1">**</ept> -- .NET Core 实现 .NET Framework 中子系统的子级，目的是实现更简单的实现和编程模型。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>For example, Code Access Security (CAS) is not supported, while reflection is supported.</source>
          <target state="translated">例如，不支持代码访问安全性 (CAS)，但支持反射。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Platforms<ept id="p1">**</ept> -- The .NET Framework supports Windows and Windows Server while .NET Core also supports macOS and Linux.</source>
          <target state="translated"><bpt id="p1">**</bpt>平台<ept id="p1">**</ept> -- .NET Framework 支持 Windows 和 Windows Server，而 NET Core 还支持 macOS 和 Linux。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Open Source<ept id="p1">**</ept> -- .NET Core is open source, while a <bpt id="p2">[</bpt>read-only subset of the .NET Framework<ept id="p2">](https://github.com/microsoft/referencesource)</ept> is open source.</source>
          <target state="translated"><bpt id="p1">**</bpt>开放源<ept id="p1">**</ept> -- .NET Core 属于开放源，而 <bpt id="p2">[</bpt>.NET Framework 的只读子集<ept id="p2">](https://github.com/microsoft/referencesource)</ept>属于开放源。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>While .NET Core is unique and has significant differences to the .NET Framework and other .NET platforms, it is straightforward to share code, using either source or binary sharing techniques.</source>
          <target state="translated">虽然 .NET Core 是唯一的且与 .NET Framework 和其他 .NET 平台大不相同，但使用源或二进制共享技术分享代码仍很简单。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Comparison with Mono</source>
          <target state="translated">与 Mono 比较</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Mono<ept id="p1">](http://www.mono-project.com/)</ept> is the original cross-platform and <bpt id="p2">[</bpt>open source<ept id="p2">](https://github.com/mono/mono)</ept> .NET implementation, first shipping in 2004.</source>
          <target state="translated"><bpt id="p1">[</bpt>Mono<ept id="p1">](http://www.mono-project.com/)</ept> 是原始的跨平台和 <bpt id="p2">[</bpt>开放源<ept id="p2">](https://github.com/mono/mono)</ept> .NET 实现，于 2004 年首次发布。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>It can be thought of as a community clone of the .NET Framework.</source>
          <target state="translated">可以把它看作是 .NET Framework 的社区克隆。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The Mono project team relied on the open <bpt id="p1">[</bpt>.NET standards<ept id="p1">](https://github.com/dotnet/coreclr/blob/master/Documentation/project-docs/dotnet-standards.md)</ept> (notably ECMA 335) published by Microsoft in order to provide a compatible implementation.</source>
          <target state="translated">Mono 项目团队依赖于 Microsoft 发布的开放 <bpt id="p1">[</bpt>.NET 标准<ept id="p1">](https://github.com/dotnet/coreclr/blob/master/Documentation/project-docs/dotnet-standards.md)</ept>（尤其是 ECMA 335），以便实现兼容性。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The major differences between .NET Core and Mono:</source>
          <target state="translated">.NET Core 和 Mono 的主要差异在于：</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>App-models<ept id="p1">**</ept> -- Mono supports a subset of the .NET Framework app-models (for example, Windows Forms) and some additional ones (for example, <bpt id="p2">[</bpt>Xamarin.iOS<ept id="p2">](https://www.xamarin.com/platform)</ept>) through the Xamarin product.</source>
          <target state="translated"><bpt id="p1">**</bpt>应用模型<ept id="p1">**</ept> -- Mono 通过 Xamarin 产品支持 .NET Framework 应用模型（例如，Windows Forms）和其他应用模型（例如，<bpt id="p2">[</bpt>Xamarin.iOS<ept id="p2">](https://www.xamarin.com/platform)</ept>）的子集。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>.NET Core doesn't support these.</source>
          <target state="translated">而 .NET Core 不支持这些内容。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>APIs<ept id="p1">**</ept> -- Mono supports a <bpt id="p2">[</bpt>large subset<ept id="p2">](http://docs.go-mono.com/?link=root%3a%2fclasslib)</ept> of the .NET Framework APIs, using the same assembly names and factoring.</source>
          <target state="translated"><bpt id="p1">**</bpt>API<ept id="p1">**</ept> -- Mono 使用相同程序集名称和组成要素支持 .NET Framework API 的 <bpt id="p2">[</bpt>大型子集<ept id="p2">](http://docs.go-mono.com/?link=root%3a%2fclasslib)</ept>。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Platforms<ept id="p1">**</ept> -- Mono supports many platforms and CPUs.</source>
          <target state="translated"><bpt id="p1">**</bpt>平台<ept id="p1">**</ept> -- Mono 支持很多平台和 CPU。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Open Source<ept id="p1">**</ept> -- Mono and .NET Core both use the MIT license and are .NET Foundation projects.</source>
          <target state="translated"><bpt id="p1">**</bpt>开放源<ept id="p1">**</ept> -- Mono 和 .NET Core 两者都使用 MIT 许可证，且都属于 .NET Foundation 项目。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Focus<ept id="p1">**</ept> -- The primary focus of Mono in recent years is mobile platforms, while .NET Core is focused on cloud workloads.</source>
          <target state="translated"><bpt id="p1">**</bpt>焦点<ept id="p1">**</ept> --最近几年，Mono 的主要焦点是移动平台，而 .NET Core 的焦点是云工作负荷。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>