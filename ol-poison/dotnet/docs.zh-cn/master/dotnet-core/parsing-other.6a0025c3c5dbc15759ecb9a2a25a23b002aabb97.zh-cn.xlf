<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-6a73dd2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bf3fc05428ed491e7658951f002a9af17dcba5df</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\base-types\parsing-other.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-p2</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1ded539f02c64a78271d65c58911186c9db97319</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1405ab0e971bc580ee83d984b30d55200641d5f1</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">file parsing-other.6a0025c3c5dbc15759ecb9a2a25a23b002aabb97.zh-cn.xlf is out of handoff scope</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Parsing other strings in .NET</source>
          <target state="translated">在 .NET 中分析其他字符串</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Parsing other strings in .NET</source>
          <target state="translated">在 .NET 中分析其他字符串</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="translated">.NET、.NET Core</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Parsing other strings in .NET</source>
          <target state="translated">在 .NET 中分析其他字符串</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In addition to numeric and <bpt id="p1">[</bpt>DateTime<ept id="p1">](xref:System.DateTime)</ept> strings, you can also parse strings that represent the types <bpt id="p2">[</bpt>Char<ept id="p2">](xref:System.Char)</ept>, <bpt id="p3">[</bpt>Boolean<ept id="p3">](xref:System.Boolean)</ept>, and <bpt id="p4">[</bpt>Enum<ept id="p4">](xref:System.Enum)</ept> into data types.</source>
          <target state="translated">除了数字和 <bpt id="p1">[</bpt>DateTime<ept id="p1">](xref:System.DateTime)</ept> 字符串之外，还可以将表示类型 <bpt id="p2">[</bpt>Char<ept id="p2">](xref:System.Char)</ept>、<bpt id="p3">[</bpt>Boolean<ept id="p3">](xref:System.Boolean)</ept> 和 <bpt id="p4">[</bpt>Enum<ept id="p4">](xref:System.Enum)</ept> 的字符串分析为数据类型。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Char</source>
          <target state="translated">Char</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The static parse method associated with the <bpt id="p1">[</bpt>Char<ept id="p1">](xref:System.Char)</ept> data type is useful for converting a string that contains a single character into its Unicode value.</source>
          <target state="translated">与 <bpt id="p1">[</bpt>Char<ept id="p1">](xref:System.Char)</ept> 数据类型关联的静态分析方法 可用于将包含单个字符的字符串转换为其 Unicode 值。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The following code example parses a string into a Unicode character.</source>
          <target state="translated">下面的代码示例将字符串分析为 Unicode 字符。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Boolean</source>
          <target state="translated">Boolean</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Boolean<ept id="p1">](xref:System.Boolean)</ept> data type contains a <bpt id="p2">[</bpt>Parse<ept id="p2">](xref:System.Boolean.Parse(System.String))</ept> method that you can use to convert a string that represents a <ph id="ph1">`Boolean`</ph> value into an actual <ph id="ph2">`Boolean`</ph> type.</source>
          <target state="translated"><bpt id="p1">[</bpt>Boolean<ept id="p1">](xref:System.Boolean)</ept> 数据类型包含 <bpt id="p2">[</bpt>Parse<ept id="p2">](xref:System.Boolean.Parse(System.String))</ept> 方法，可以用于将表示 <ph id="ph1">`Boolean`</ph> 值的字符串转换为实际 <ph id="ph2">`Boolean`</ph> 类型。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This method is not case-sensitive and can successfully parse a string containing "True" or "False."</source>
          <target state="translated">此方法不区分大小写，可以成功分析包含“True”或“False”的字符串。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Parse`</ph> method associated with the <ph id="ph2">`Boolean`</ph> type can also parse strings that are surrounded by white spaces.</source>
          <target state="translated">与 <ph id="ph2">`Boolean`</ph> 类型关联的 <ph id="ph1">`Parse`</ph> 方法还可以分析两端是空格的字符串。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If any other string is passed, a <bpt id="p1">[</bpt>FormatException<ept id="p1">](xref:System.FormatException)</ept> is thrown.</source>
          <target state="translated">如果传递任何其他字符串，则会引发 <bpt id="p1">[</bpt>FormatException<ept id="p1">](xref:System.FormatException)</ept>。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The following code example uses the <ph id="ph1">`Parse`</ph> method to convert a string into a <ph id="ph2">`Boolean`</ph> value.</source>
          <target state="translated">下面的代码示例使用 <ph id="ph1">`Parse`</ph> 方法将字符串转换为 <ph id="ph2">`Boolean`</ph> 值。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Enumeration</source>
          <target state="translated">枚举</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You can use the static <bpt id="p1">[</bpt>Parse<ept id="p1">](xref:System.Enum.Parse(System.Type,System.String))</ept> method to initialize an enumeration type to the value of a string.</source>
          <target state="translated">可以使用静态 <bpt id="p1">[</bpt>Parse<ept id="p1">](xref:System.Enum.Parse(System.Type,System.String))</ept> 方法将枚举类型初始化为字符串的值。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This method accepts the enumeration type you are parsing, the string to parse, and an optional <ph id="ph1">`Boolean`</ph> flag indicating whether or not the parse is case-sensitive.</source>
          <target state="translated">此方法接受所分析的枚举类型、要分析的字符串和可选 <ph id="ph1">`Boolean`</ph> 标志（指示分析是否区分大小写）。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The string you are parsing can contain several values separated by commas, which can be preceded or followed by one or more empty spaces (also called white spaces).</source>
          <target state="translated">所分析的字符串可以包含用逗号分隔的多个值，这些值前面或后面可以是一个或多个空白（也称为空格）。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>When the string contains multiple values, the value of the returned object is the value of all specified values combined with a bitwise OR operation.</source>
          <target state="translated">当字符串包含多个值时，返回的对象的值是所有指定值通过按位 OR 运算组合的值。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The following example uses the <ph id="ph1">`Parse`</ph> method to convert a string representation into an enumeration value.</source>
          <target state="translated">下面的示例使用 <ph id="ph1">`Parse`</ph> 方法将字符串表示形式转换为枚举值。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>DayOfWeek<ept id="p1">](xref:System.DayOfWeek)</ept> enumeration is initialized to Thursday from a string.</source>
          <target state="translated"><bpt id="p1">[</bpt>DayOfWeek<ept id="p1">](xref:System.DayOfWeek)</ept> 枚举从星期四初始化为字符串。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">另请参阅</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Parsing strings in .NET<ept id="p1">](parsing-strings.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>在 .NET 中分析字符串<ept id="p1">](parsing-strings.md)</ept></target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Formatting types in .NET<ept id="p1">](formatting-types.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>.NET 中的格式设置类型<ept id="p1">](formatting-types.md)</ept></target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Type conversion in .NET<ept id="p1">](type-conversion.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>.NET 中的类型转换<ept id="p1">](type-conversion.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>