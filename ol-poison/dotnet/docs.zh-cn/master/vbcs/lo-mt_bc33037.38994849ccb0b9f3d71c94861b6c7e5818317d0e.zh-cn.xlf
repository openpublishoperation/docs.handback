<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">54fd8763d725e95be98e6f5c035100ceb33809fe</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\misc\bc33037.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e3186b07fec1662069583b4d33dec940aa1e24b9</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0ea49714e01177303998af77ecdb60cfb434bbbd</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Handback file name: lo-mt_bc33037.38994849ccb0b9f3d71c94861b6c7e5818317d0e.zh-cn is different with handoff file name: bc33037.38994849ccb0b9f3d71c94861b6c7e5818317d0e.zh-cn.</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Cannot copy the value of &amp;#39;ByRef&amp;#39; parameter &amp;#39;<ph id="ph1">&amp;lt;</ph>parametername<ph id="ph2">&amp;gt;</ph>&amp;#39; back to the matching argument because type &amp;#39;<ph id="ph3">&amp;lt;</ph>typename1<ph id="ph4">&amp;gt;</ph>&amp;#39; cannot be converted to type &amp;#39;<ph id="ph5">&amp;lt;</ph>typename2<ph id="ph6">&amp;gt;</ph>&amp;#39; | Microsoft Docs</source>
          <target state="translated">不能将 ByRef 参数的值复制 '<ph id="ph1">&amp;lt;</ph>parametername<ph id="ph2">&amp;gt;</ph>回匹配参数，因为类型'<ph id="ph3">&amp;lt;</ph>typename1，而<ph id="ph4">&amp;gt;</ph>'不能将转换为类型<ph id="ph5">&amp;lt;</ph>typename2<ph id="ph6">&amp;gt;</ph>' |Microsoft 文档</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Cannot copy the value of &amp;#39;ByRef&amp;#39; parameter &amp;#39;<ph id="ph1">&amp;lt;</ph>parametername<ph id="ph2">&amp;gt;</ph>&amp;#39; back to the matching argument because type &amp;#39;<ph id="ph3">&amp;lt;</ph>typename1<ph id="ph4">&amp;gt;</ph>&amp;#39; cannot be converted to type &amp;#39;<ph id="ph5">&amp;lt;</ph>typename2<ph id="ph6">&amp;gt;</ph>&amp;#39;</source>
          <target state="translated">不能将 ByRef 参数的值复制 '<ph id="ph1">&amp;lt;</ph>parametername<ph id="ph2">&amp;gt;</ph>回匹配参数，因为类型'<ph id="ph3">&amp;lt;</ph>typename1，而<ph id="ph4">&amp;gt;</ph>'不能将转换为类型<ph id="ph5">&amp;lt;</ph>typename2<ph id="ph6">&amp;gt;</ph></target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A procedure is declared with a parameter type which cannot be converted back to the calling argument type.</source>
          <target state="translated">一个过程，声明该过程时使用的形参类型无法转换回调用实参类型。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>When you define a class or structure, you can define one or more conversion operators to convert that class or structure type to other types.</source>
          <target state="translated">在定义类或结构时，可以定义一个或多个转换运算符来将该类或结构类型转换为其他类型。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You can also define reverse conversion operators to convert those other types back to your class or structure type.</source>
          <target state="translated">也可以定义反向转换运算符来将这些其他类型转换回类或结构类型。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>When you use your class or structure type in a procedure call, <ph id="ph1">[!INCLUDE[vbprvb](../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> can use these conversion operators to convert the type of an argument to the type of its corresponding parameter.</source>
          <target state="translated">当在过程调用中，使用您的类或结构类型<ph id="ph1">[!INCLUDE[vbprvb](../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>可以使用这些转换运算符将参数的类型转换为其对应的参数的类型。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If you pass the argument <bpt id="p1">[</bpt>ByRef<ept id="p1">](../../visual-basic/language-reference/modifiers/byref.md)</ept>, <ph id="ph1">[!INCLUDE[vbprvb](../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> sometimes copies the argument value into a local variable in the procedure instead of passing a reference.</source>
          <target state="translated">如果传递参数<bpt id="p1">[</bpt>ByRef<ept id="p1">](../../visual-basic/language-reference/modifiers/byref.md)</ept>，<ph id="ph1">[!INCLUDE[vbprvb](../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>有时会将参数值复制到局部变量中而不是传递一个引用，该过程。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In such a case, when the procedure returns, <ph id="ph1">[!INCLUDE[vbprvb](../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> must then copy the local variable value back into the argument in the calling code.</source>
          <target state="translated">这种情况下，该过程返回时，<ph id="ph1">[!INCLUDE[vbprvb](../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>然后必须将本地变量的值复制回调用代码中的参数。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If a <ph id="ph1">`ByRef`</ph> argument value is copied into the procedure and the argument and parameter are of the same type, no conversion is necessary.</source>
          <target state="translated">如果将 <ph id="ph1">`ByRef`</ph> 实参值复制到过程中，并且实参与形参为同一类型，则不必进行转换。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>But if the types are different, <ph id="ph1">[!INCLUDE[vbprvb](../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> must convert in both directions.</source>
          <target state="translated">但是，如果类型不同，<ph id="ph1">[!INCLUDE[vbprvb](../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>必须进行双向转换。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If one of the types is your class or structure type, <ph id="ph1">[!INCLUDE[vbprvb](../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> must convert it both to and from the other type.</source>
          <target state="translated">如果一种类型是类或结构类型，<ph id="ph1">[!INCLUDE[vbprvb](../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>必须将其转换传入和传出另一种类型。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This means you must define conversion operators in both directions.</source>
          <target state="translated">这意味着你必须定义两个方向的转换运算符。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Error ID:<ept id="p1">**</ept> BC33037</source>
          <target state="translated"><bpt id="p1">**</bpt>错误 ID：<ept id="p1">**</ept> BC33037</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>To correct this error</source>
          <target state="translated">更正此错误</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If possible, use a calling argument of the same type as the procedure parameter, so <ph id="ph1">[!INCLUDE[vbprvb](../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> does not need to do any conversion.</source>
          <target state="translated">如果可能，请使用与过程参数的调用参数的类型相同，所以<ph id="ph1">[!INCLUDE[vbprvb](../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>不需要进行任何转换。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If you need to call the procedure with an argument type different from the parameter type but do not need to return a value into the calling argument, define the parameter to be <bpt id="p1">[</bpt>ByVal<ept id="p1">](../../visual-basic/language-reference/modifiers/byval.md)</ept> instead of <ph id="ph1">`ByRef`</ph>.</source>
          <target state="translated">如果您需要使用参数调用过程键入的参数类型不同，但不是需要将一个值返回到调用的参数，参数定义为<bpt id="p1">[</bpt>ByVal<ept id="p1">](../../visual-basic/language-reference/modifiers/byval.md)</ept>而不是<ph id="ph1">`ByRef`</ph>。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If you need to return a value into the calling argument, define the reverse conversion operator so <ph id="ph1">[!INCLUDE[vbprvb](../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> can convert back to the calling argument type.</source>
          <target state="translated">如果您需要返回到调用变量的值，因此定义反向转换运算符<ph id="ph1">[!INCLUDE[vbprvb](../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>可以将转换回调用的参数类型。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">另请参阅</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Procedures<ept id="p1">](../../visual-basic/programming-guide/language-features/procedures/index.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>过程<ept id="p1">](../../visual-basic/programming-guide/language-features/procedures/index.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Procedure Parameters and Arguments<ept id="p1">](../../visual-basic/programming-guide/language-features/procedures/procedure-parameters-and-arguments.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>过程参数和变量<ept id="p1">](../../visual-basic/programming-guide/language-features/procedures/procedure-parameters-and-arguments.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Passing Arguments by Value and by Reference<ept id="p1">](../../visual-basic/programming-guide/language-features/procedures/passing-arguments-by-value-and-by-reference.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>通过值和通过引用传递参数<ept id="p1">](../../visual-basic/programming-guide/language-features/procedures/passing-arguments-by-value-and-by-reference.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Operator Procedures<ept id="p1">](../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>运算符过程<ept id="p1">](../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Operator Statement<ept id="p1">](../../visual-basic/language-reference/statements/operator-statement.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Operator 语句<ept id="p1">](../../visual-basic/language-reference/statements/operator-statement.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Define an Operator<ept id="p1">](../../visual-basic/programming-guide/language-features/procedures/how-to-define-an-operator.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>如何︰ 定义运算符<ept id="p1">](../../visual-basic/programming-guide/language-features/procedures/how-to-define-an-operator.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Define a Conversion Operator<ept id="p1">](../../visual-basic/programming-guide/language-features/procedures/how-to-define-a-conversion-operator.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>如何：定义转换运算符<ept id="p1">](../../visual-basic/programming-guide/language-features/procedures/how-to-define-a-conversion-operator.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>