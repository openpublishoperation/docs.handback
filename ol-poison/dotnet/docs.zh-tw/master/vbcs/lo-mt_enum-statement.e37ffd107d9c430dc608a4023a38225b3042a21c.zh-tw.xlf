<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f9d3377300d30fd045c041367a528766fa9a8ed9</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\language-reference\statements\enum-statement.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2b09c73c74bc0db1ba8bbd1042818a1466dc971f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d78a4ee823d61f61738552b0928e99d74c4d9afd</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Handback file name: lo-mt_enum-statement.e37ffd107d9c430dc608a4023a38225b3042a21c.zh-tw is different with handoff file name: enum-statement.e37ffd107d9c430dc608a4023a38225b3042a21c.zh-tw.</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Enum Statement (Visual Basic) | Microsoft Docs</source>
          <target state="translated">Enum 陳述式 (Visual Basic) |Microsoft 文件</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Enum Statement (Visual Basic)</source>
          <target state="translated">Enum 陳述式 (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Declares an enumeration and defines the values of its members.</source>
          <target state="translated">宣告列舉，並定義其成員的值。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
          <target state="translated">語法</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parts</source>
          <target state="translated">組件</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">選擇項。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>List of attributes that apply to this enumeration.</source>
          <target state="translated">這個列舉型別所套用的屬性清單。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You must enclose the <bpt id="p1">[</bpt>attribute list<ept id="p1">](../../../visual-basic/language-reference/statements/attribute-list.md)</ept> in angle brackets ("<ph id="ph1">`&lt;`</ph>" and "<ph id="ph2">`&gt;`</ph>").</source>
          <target state="translated">您必須將<bpt id="p1">[</bpt>屬性清單<ept id="p1">](../../../visual-basic/language-reference/statements/attribute-list.md)</ept>角括弧括住 (「<ph id="ph1">`&lt;`</ph>"和"<ph id="ph2">`&gt;`</ph>")。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.FlagsAttribute&gt; attribute indicates that the value of an instance of the enumeration can include multiple enumeration members, and that each member represents a bit field in the enumeration value.</source>
          <target state="translated">&lt;xref:System.FlagsAttribute&gt;屬性表示列舉型別的執行個體的值可以包含多個列舉成員，而且每個成員代表列舉值的位元欄位。&lt;/xref:System.FlagsAttribute&gt;</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">選擇項。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Specifies what code can access this enumeration.</source>
          <target state="translated">指定哪些程式碼可以存取這個列舉型別。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Can be one of the following:</source>
          <target state="translated">可以是下列其中一項：</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Public<ept id="p1">](../../../visual-basic/language-reference/modifiers/public.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Public<ept id="p1">](../../../visual-basic/language-reference/modifiers/public.md)</ept></target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Protected<ept id="p1">](../../../visual-basic/language-reference/modifiers/protected.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Protected<ept id="p1">](../../../visual-basic/language-reference/modifiers/protected.md)</ept></target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Friend<ept id="p1">](../../../visual-basic/language-reference/modifiers/friend.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Friend<ept id="p1">](../../../visual-basic/language-reference/modifiers/friend.md)</ept></target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Private<ept id="p1">](../../../visual-basic/language-reference/modifiers/private.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Private<ept id="p1">](../../../visual-basic/language-reference/modifiers/private.md)</ept></target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You can specify <ph id="ph1">`Protected``Friend`</ph> to allow access from code within the enumeration's class, a derived class, or the same assembly.</source>
          <target state="translated">您可以指定<ph id="ph1">`Protected``Friend`</ph>以允許從列舉型別的類別，衍生的類別或相同的組件內的程式碼存取。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">選擇項。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Specifies that this enumeration redeclares and hides an identically named programming element, or set of overloaded elements, in a base class.</source>
          <target state="translated">指定此列舉型別會重新宣告，並隱藏同名的程式設計項目或在基底類別中的多載項目集。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You can specify <bpt id="p1">[</bpt>Shadows<ept id="p1">](../../../visual-basic/language-reference/modifiers/shadows.md)</ept> only on the enumeration itself, not on any of its members.</source>
          <target state="translated">您可以指定<bpt id="p1">[</bpt>陰影<ept id="p1">](../../../visual-basic/language-reference/modifiers/shadows.md)</ept>只列舉型別本身，而非其任何成員。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Required.</source>
          <target state="translated">必要項。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Name of the enumeration.</source>
          <target state="translated">列舉型別的名稱。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For information on valid names, see <bpt id="p1">[</bpt>Declared Element Names<ept id="p1">](../../../visual-basic/programming-guide/language-features/declared-elements/declared-element-names.md)</ept>.</source>
          <target state="translated">如需有效的名稱，請參閱<bpt id="p1">[</bpt>宣告項目名稱<ept id="p1">](../../../visual-basic/programming-guide/language-features/declared-elements/declared-element-names.md)</ept>。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">選擇項。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Data type of the enumeration and all its members.</source>
          <target state="translated">列舉型別及其所有成員的資料型別。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Required.</source>
          <target state="translated">必要項。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>List of member constants being declared in this statement.</source>
          <target state="translated">此陳述式所宣告的成員常數的清單。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Multiple members appear on individual source code lines.</source>
          <target state="translated">多個成員會出現在個別的原始程式碼行。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Each <ph id="ph1">`member`</ph> has the following syntax and parts: <ph id="ph2">`[&lt;attribute list&gt;] member name [ = initializer ]`</ph></source>
          <target state="translated">每個<ph id="ph1">`member`</ph>具有以下的語法和組件︰<ph id="ph2">`[&lt;attribute list&gt;] member name [ = initializer ]`</ph></target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Part</source>
          <target state="translated">組件</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">說明</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Required.</source>
          <target state="translated">必要項。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Name of this member.</source>
          <target state="translated">這個成員的名稱。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">選擇項。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Expression that is evaluated at compile time and assigned to this member.</source>
          <target state="translated">在編譯時期評估，以及指派給這個成員的運算式。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`End`</ph> <ph id="ph2">`Enum`</ph></source>
          <target state="translated"><ph id="ph1">`End`</ph> <ph id="ph2">`Enum`</ph></target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Terminates the <ph id="ph1">`Enum`</ph> block.</source>
          <target state="translated">終止 <ph id="ph1">`Enum`</ph> 區塊。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Remarks</source>
          <target state="translated">備註</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If you have a set of unchanging values that are logically related to each other, you can define them together in an enumeration.</source>
          <target state="translated">如果您有一組不會變更將彼此邏輯相關的值，您可以定義它們一起列舉型別。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This provides meaningful names for the enumeration and its members, which are easier to remember than their values.</source>
          <target state="translated">這提供有意義的列舉型別和成員，也就是比它們的值更好記名稱。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>You can then use the enumeration members in many places in your code.</source>
          <target state="translated">然後，您可以使用在許多地方列舉型別成員在您的程式碼。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The benefits of using enumerations include the following:</source>
          <target state="translated">使用列舉的優點包括︰</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Reduces errors caused by transposing or mistyping numbers.</source>
          <target state="translated">減少因調換或輸錯數字的錯誤。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Makes it easy to change values in the future.</source>
          <target state="translated">可讓您輕鬆地在未來變更的值。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Makes code easier to read, which means it is less likely that errors will be introduced.</source>
          <target state="translated">讓程式碼更方便閱讀，這表示它是比較不可能會導入錯誤。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Ensures forward compatibility.</source>
          <target state="translated">可確保往後相容性。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>If you use enumerations, your code is less likely to fail if in the future someone changes the values corresponding to the member names.</source>
          <target state="translated">如果您使用列舉型別，程式碼就比較不可能失敗，如果有人在未來變更為成員名稱的對應值。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>An enumeration has a name, an underlying data type, and a set of members.</source>
          <target state="translated">列舉型別具有名稱、 基礎的資料型別和成員集合。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Each member represents a constant.</source>
          <target state="translated">每個成員代表一個常數。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>An enumeration declared at class, structure, module, or interface level, outside any procedure, is a <bpt id="p1">*</bpt>member enumeration<ept id="p1">*</ept>.</source>
          <target state="translated">類別、 結構、 模組或介面層級以外的任何程序，在宣告列舉類型是<bpt id="p1">*</bpt>成員列舉<ept id="p1">*</ept>。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>It is a member of the class, structure, module, or interface that declares it.</source>
          <target state="translated">它是類別、 結構、 模組或介面宣告它的成員。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Member enumerations can be accessed from anywhere within their class, structure, module, or interface.</source>
          <target state="translated">成員列舉型別可以從任何地方來存取其類別、 結構、 模組或介面中。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Code outside a class, structure, or module must qualify a member enumeration's name with the name of that class, structure, or module.</source>
          <target state="translated">程式碼類別之外，結構或模組必須限定成員列舉型別的名稱，該類別、 結構或模組的名稱。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>You can avoid the need to use fully qualified names by adding an <bpt id="p1">[</bpt>Imports<ept id="p1">](../../../visual-basic/language-reference/statements/imports-statement-net-namespace-and-type.md)</ept> statement to the source file.</source>
          <target state="translated">您可以不需要使用完整限定的名稱加上<bpt id="p1">[</bpt>匯入<ept id="p1">](../../../visual-basic/language-reference/statements/imports-statement-net-namespace-and-type.md)</ept>陳述式的原始程式檔。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>An enumeration declared at namespace level, outside any class, structure, module, or interface, is a member of the namespace in which it appears.</source>
          <target state="translated">命名空間層級以外任何類別、 結構、 模組或介面，在宣告列舉型別是命名空間中的成員。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>declaration context<ept id="p1">*</ept> for an enumeration must be a source file, namespace, class, structure, module, or interface, and cannot be a procedure.</source>
          <target state="translated"><bpt id="p1">*</bpt>宣告內容<ept id="p1">*</ept>列舉型別必須是原始程式檔、 命名空間、 類別、 結構、 模組或介面，而且不能是程序。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Declaration Contexts and Default Access Levels<ept id="p1">](../../../visual-basic/language-reference/statements/declaration-contexts-and-default-access-levels.md)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>宣告內容和預設存取層級<ept id="p1">](../../../visual-basic/language-reference/statements/declaration-contexts-and-default-access-levels.md)</ept>。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>You can apply attributes to an enumeration as a whole, but not to its members individually.</source>
          <target state="translated">您可以分別套用在屬性列舉型別整體而言，但不是屬於其成員。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>An attribute contributes information to the assembly's metadata.</source>
          <target state="translated">屬性會提供組件的中繼資料資訊。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Data Type</source>
          <target state="translated">資料類型</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Enum`</ph> statement can declare the data type of an enumeration.</source>
          <target state="translated"><ph id="ph1">`Enum`</ph>陳述式可以宣告列舉的資料型別。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Each member takes the enumeration's data type.</source>
          <target state="translated">每個成員會在列舉資料類型。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>You can specify <ph id="ph1">`Byte`</ph>, <ph id="ph2">`Integer`</ph>, <ph id="ph3">`Long`</ph>, <ph id="ph4">`SByte`</ph>, <ph id="ph5">`Short`</ph>, <ph id="ph6">`UInteger`</ph>, <ph id="ph7">`ULong`</ph>, or <ph id="ph8">`UShort`</ph>.</source>
          <target state="translated">You can specify <ph id="ph1">`Byte`</ph>, <ph id="ph2">`Integer`</ph>, <ph id="ph3">`Long`</ph>, <ph id="ph4">`SByte`</ph>, <ph id="ph5">`Short`</ph>, <ph id="ph6">`UInteger`</ph>, <ph id="ph7">`ULong`</ph>, or <ph id="ph8">`UShort`</ph>.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>If you do not specify <ph id="ph1">`datatype`</ph> for the enumeration, each member takes the data type of its <ph id="ph2">`initializer`</ph>.</source>
          <target state="translated">如果您未指定<ph id="ph1">`datatype`</ph>列舉，每個成員都會採用的資料型別其<ph id="ph2">`initializer`</ph>。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>If you specify both <ph id="ph1">`datatype`</ph> and <ph id="ph2">`initializer`</ph>, the data type of <ph id="ph3">`initializer`</ph> must be convertible to <ph id="ph4">`datatype`</ph>.</source>
          <target state="translated">如果您同時指定<ph id="ph1">`datatype`</ph>和<ph id="ph2">`initializer`</ph>，資料類型<ph id="ph3">`initializer`</ph>必須轉換成<ph id="ph4">`datatype`</ph>。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>If neither <ph id="ph1">`datatype`</ph> nor <ph id="ph2">`initializer`</ph> is present, the data type defaults to <ph id="ph3">`Integer`</ph>.</source>
          <target state="translated">如果沒有<ph id="ph1">`datatype`</ph>也<ph id="ph2">`initializer`</ph>的話，資料類型的預設值為<ph id="ph3">`Integer`</ph>。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Initializing Members</source>
          <target state="translated">初始化成員</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Enum`</ph> statement can initialize the contents of selected members in <ph id="ph2">`memberlist`</ph>.</source>
          <target state="translated"><ph id="ph1">`Enum`</ph>陳述式可以初始化內容中選取之成員的<ph id="ph2">`memberlist`</ph>。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>You use <ph id="ph1">`initializer`</ph> to supply an expression to be assigned to the member.</source>
          <target state="translated">您使用<ph id="ph1">`initializer`</ph>提供要指派給成員的運算式。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>If you do not specify <ph id="ph1">`initializer`</ph> for a member, Visual Basic initializes it either to zero (if it is the first <ph id="ph2">`member`</ph> in <ph id="ph3">`memberlist`</ph>), or to a value greater by one than that of the immediately preceding <ph id="ph4">`member`</ph>.</source>
          <target state="translated">如果您未指定<ph id="ph1">`initializer`</ph>成員時，Visual Basic 將它初始化為零 (如果是第一個<ph id="ph2">`member`</ph>中<ph id="ph3">`memberlist`</ph>)，或值大一比前面<ph id="ph4">`member`</ph>。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The expression supplied in each <ph id="ph1">`initializer`</ph> can be any combination of literals, other constants that are already defined, and enumeration members that are already defined, including a previous member of this enumeration.</source>
          <target state="translated">提供在每個運算式<ph id="ph1">`initializer`</ph>可以是常值、 其他已定義的常數和列舉型別成員已經定義，包括先前的這個列舉型別成員的任何組合。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>You can use arithmetic and logical operators to combine such elements.</source>
          <target state="translated">您可以使用算術和邏輯運算子來結合這類項目。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>You cannot use variables or functions in <ph id="ph1">`initializer`</ph>.</source>
          <target state="translated">您無法使用變數或函式中的<ph id="ph1">`initializer`</ph>。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>However, you can use conversion keywords such as <ph id="ph1">`CByte`</ph> and <ph id="ph2">`CShort`</ph>.</source>
          <target state="translated">不過，您可以使用轉換關鍵字例如<ph id="ph1">`CByte`</ph>和<ph id="ph2">`CShort`</ph>。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>You can also use <ph id="ph1">`AscW`</ph> if you call it with a constant <ph id="ph2">`String`</ph> or <ph id="ph3">`Char`</ph> argument, since that can be evaluated at compile time.</source>
          <target state="translated">您也可以使用<ph id="ph1">`AscW`</ph>如果您呼叫與常數<ph id="ph2">`String`</ph>或<ph id="ph3">`Char`</ph>引數，因為可以在編譯時期評估的。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Enumerations cannot have floating-point values.</source>
          <target state="translated">列舉型別不能有浮點值。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>If a member is assigned a floating-point value and <ph id="ph1">`Option Strict`</ph> is set to on, a compiler error occurs.</source>
          <target state="translated">如果成員指派的浮點值和<ph id="ph1">`Option Strict`</ph>設定為 on，就會發生編譯器錯誤。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Option Strict`</ph> is off, the value is automatically converted to the <ph id="ph2">`Enum`</ph> type.</source>
          <target state="translated">如果<ph id="ph1">`Option Strict`</ph>值會自動轉換為已關閉，<ph id="ph2">`Enum`</ph>型別。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>If the value of a member exceeds the allowable range for the underlying data type, or if you initialize any member to the maximum value allowed by the underlying data type, the compiler reports an error.</source>
          <target state="translated">如果成員的值超過允許的範圍為基礎的資料型別，或是初始化為基礎的資料類型所允許的最大值的任何成員，編譯器會報告錯誤。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Modifiers</source>
          <target state="translated">修飾詞</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Class, structure, module, and interface member enumerations default to public access.</source>
          <target state="translated">類別、 結構、 模組和介面的成員列舉型別預設為公用存取。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>You can adjust their access levels with the access modifiers.</source>
          <target state="translated">您可以調整存取層級的存取修飾詞。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Namespace member enumerations default to friend access.</source>
          <target state="translated">命名空間成員列舉型別預設為 friend 存取權限。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>You can adjust their access levels to public, but not to private or protected.</source>
          <target state="translated">您可以調整為公開，但不是屬於私用或受保護的存取層。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Access Levels in Visual Basic<ept id="p1">](../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>在 Visual Basic 中的存取層級<ept id="p1">](../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md)</ept>。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>All enumeration members have public access, and you cannot use any access modifiers on them.</source>
          <target state="translated">所有列舉型別成員具有公用存取，且您無法使用任何存取修飾詞上面。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>However, if the enumeration itself has a more restricted access level, the specified enumeration access level takes precedence.</source>
          <target state="translated">不過，如果列舉型別本身具有較嚴格的存取層級，指定列舉型別存取層級的優先順序。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>By default, all enumerations are types and their fields are constants.</source>
          <target state="translated">根據預設，所有列舉型別是類型，其欄位是常數。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Therefore the <ph id="ph1">`Shared`</ph>, <ph id="ph2">`Static`</ph>, and <ph id="ph3">`ReadOnly`</ph> keywords cannot be used when declaring an enumeration or its members.</source>
          <target state="translated">因此<ph id="ph1">`Shared`</ph>， <ph id="ph2">`Static`</ph>，和<ph id="ph3">`ReadOnly`</ph>宣告列舉型別或其成員時，就不能使用關鍵字。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Assigning Multiple Values</source>
          <target state="translated">指派多個值</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Enumerations typically represent mutually exclusive values.</source>
          <target state="translated">列舉型別通常代表互斥的值。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>By including the &lt;xref:System.FlagsAttribute&gt; attribute in the <ph id="ph1">`Enum`</ph> declaration, you can instead assign multiple values to an instance of the enumeration.</source>
          <target state="translated">藉由&lt;xref:System.FlagsAttribute&gt;屬性中<ph id="ph1">`Enum`</ph>宣告中，您可以改為指派多個值給列舉型別的執行個體。&lt;/xref:System.FlagsAttribute&gt;</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.FlagsAttribute&gt; attribute specifies that the enumeration be treated as a bit field, that is, a set of flags.</source>
          <target state="translated">&lt;xref:System.FlagsAttribute&gt;屬性會指定列舉型別視為位元欄位，也就是一組旗標。&lt;/xref:System.FlagsAttribute&gt;</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>These are called <bpt id="p1">*</bpt>bitwise<ept id="p1">*</ept> enumerations.</source>
          <target state="translated">這些稱為<bpt id="p1">*</bpt>位元<ept id="p1">*</ept>列舉型別。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>When you declare an enumeration by using the &lt;xref:System.FlagsAttribute&gt; attribute, we recommend that you use powers of 2, that is, 1, 2, 4, 8, 16, and so on, for the values.</source>
          <target state="translated">當您宣告列舉型別使用&lt;xref:System.FlagsAttribute&gt;屬性，我們建議您使用是 2、 1、 2、 4、 8、 16 和等等的次方值。&lt;/xref:System.FlagsAttribute&gt;</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>We also recommend that "None" be the name of a member whose value is 0.</source>
          <target state="translated">我們也建議 「 無 」 成員，其值為 0 的名稱。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>For additional guidelines, see &lt;xref:System.FlagsAttribute&gt; and &lt;xref:System.Enum&gt;.</source>
          <target state="translated">如需其他指導方針，請參閱&lt;xref:System.FlagsAttribute&gt;和&lt;xref:System.Enum&gt;.&lt;/xref:System.Enum&gt; &lt;/xref:System.FlagsAttribute&gt;</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">範例</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The following example shows how to use the <ph id="ph1">`Enum`</ph> statement.</source>
          <target state="translated">下列範例示範如何使用<ph id="ph1">`Enum`</ph>陳述式。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Note that the member is referred to as <ph id="ph1">`EggSizeEnum.Medium`</ph>, and not as <ph id="ph2">`Medium`</ph>.</source>
          <target state="translated">請注意，成員指<ph id="ph1">`EggSizeEnum.Medium`</ph>，而不是<ph id="ph2">`Medium`</ph>。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbEnumsTask#41<ept id="p2">](../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/enum-statement_1.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbEnumsTask #&amp;41;<ept id="p2">](../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/enum-statement_1.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">範例</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The method in the following example is outside the <ph id="ph1">`Egg`</ph> class.</source>
          <target state="translated">下列範例中的方法已超出<ph id="ph1">`Egg`</ph>類別。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Therefore, <ph id="ph1">`EggSizeEnum`</ph> is fully qualified as <ph id="ph2">`Egg.EggSizeEnum`</ph>.</source>
          <target state="translated">因此，<ph id="ph1">`EggSizeEnum`</ph>完整限定為<ph id="ph2">`Egg.EggSizeEnum`</ph>。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbEnumsTask#42<ept id="p2">](../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/enum-statement_2.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbEnumsTask #&amp;42;<ept id="p2">](../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/enum-statement_2.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">範例</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The following example uses the <ph id="ph1">`Enum`</ph> statement to define a related set of named constant values.</source>
          <target state="translated">下列範例會使用<ph id="ph1">`Enum`</ph>陳述式來定義一組相關的具名常數的值。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>In this case, the values are colors you might choose to design data entry forms for a database.</source>
          <target state="translated">在此情況下，值會是您可以選擇設計資料庫的資料輸入表單的色彩。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbEnumsTask#30<ept id="p2">](../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/enum-statement_3.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbEnumsTask #&amp;30;<ept id="p2">](../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/enum-statement_3.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">範例</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The following example shows values that include both positive and negative numbers.</source>
          <target state="translated">下列範例包含正數和負數的值。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbEnumsTask#31<ept id="p2">](../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/enum-statement_4.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbEnumsTask #&amp;31;<ept id="p2">](../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/enum-statement_4.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">範例</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>In the following example, an <ph id="ph1">`As`</ph> clause is used to specify the <ph id="ph2">`datatype`</ph> of an enumeration.</source>
          <target state="translated">在下列範例中，<ph id="ph1">`As`</ph>子句用來指定<ph id="ph2">`datatype`</ph>的列舉型別。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbEnumsTask#6<ept id="p2">](../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/enum-statement_5.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbEnumsTask #&amp;6;<ept id="p2">](../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/enum-statement_5.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">範例</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The following example shows how to use a bitwise enumeration.</source>
          <target state="translated">下列範例示範如何使用位元的列舉型別。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Multiple values can be assigned to an instance of a bitwise enumeration.</source>
          <target state="translated">多個值可以指派給位元的列舉型別的執行個體。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Enum`</ph> declaration includes the &lt;xref:System.FlagsAttribute&gt; attribute, which indicates that the enumeration can be treated as a set of flags.</source>
          <target state="translated"><ph id="ph1">`Enum`</ph>宣告包含&lt;xref:System.FlagsAttribute&gt;屬性，表示列舉型別可以視為一組旗標。&lt;/xref:System.FlagsAttribute&gt;</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbEnumsTask#61<ept id="p2">](../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/enum-statement_6.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbEnumsTask #&amp;61;<ept id="p2">](../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/enum-statement_6.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">範例</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The following example iterates through an enumeration.</source>
          <target state="translated">下列範例會逐一列舉型別。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>It uses the &lt;xref:System.Enum.GetNames%2A&gt; method to retrieve an array of member names from the enumeration, and &lt;xref:System.Enum.GetValues%2A&gt; to retrieve an array of member values.</source>
          <target state="translated">它會使用&lt;xref:System.Enum.GetNames%2A&gt;方法來擷取列舉中的成員名稱的陣列和&lt;xref:System.Enum.GetValues%2A&gt;擷取成員值的陣列。&lt;/xref:System.Enum.GetValues%2A&gt; &lt;/xref:System.Enum.GetNames%2A&gt;</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbEnumsTask#51<ept id="p2">](../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/enum-statement_7.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbEnumsTask #&amp;51;<ept id="p2">](../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/enum-statement_7.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">另請參閱</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Enum&gt;</source>
          <target state="translated">&lt;xref:System.Enum&gt;&lt;/xref:System.Enum&gt;</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>&lt;xref:Microsoft.VisualBasic.Strings.AscW%2A&gt;</source>
          <target state="translated">&lt;xref:Microsoft.VisualBasic.Strings.AscW%2A&gt;&lt;/xref:Microsoft.VisualBasic.Strings.AscW%2A&gt;</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Const Statement<ept id="p1">](../../../visual-basic/language-reference/statements/const-statement.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Const 陳述式<ept id="p1">](../../../visual-basic/language-reference/statements/const-statement.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Dim Statement<ept id="p1">](../../../visual-basic/language-reference/statements/dim-statement.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Dim 陳述式<ept id="p1">](../../../visual-basic/language-reference/statements/dim-statement.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Implicit and Explicit Conversions<ept id="p1">](../../../visual-basic/programming-guide/language-features/data-types/implicit-and-explicit-conversions.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>隱含和明確轉換<ept id="p1">](../../../visual-basic/programming-guide/language-features/data-types/implicit-and-explicit-conversions.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Type Conversion Functions<ept id="p1">](../../../visual-basic/language-reference/functions/type-conversion-functions.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>類型轉換函式<ept id="p1">](../../../visual-basic/language-reference/functions/type-conversion-functions.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Constants and Enumerations<ept id="p1">](../../../visual-basic/language-reference/constants-and-enumerations.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>常數和列舉<ept id="p1">](../../../visual-basic/language-reference/constants-and-enumerations.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>