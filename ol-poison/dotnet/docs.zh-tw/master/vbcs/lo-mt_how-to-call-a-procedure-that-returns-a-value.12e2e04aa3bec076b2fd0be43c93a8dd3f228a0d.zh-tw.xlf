<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">df6bb1ed8acf5f86a290d67fec9c053cfe5245d2</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\procedures\how-to-call-a-procedure-that-returns-a-value.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">73e1caef81bdb01831f7fcfb4d2416e92c313f9b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a12451dab88b23c41546e8b93b57224739ee9b4a</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Handback file name: lo-mt_how-to-call-a-procedure-that-returns-a-value.12e2e04aa3bec076b2fd0be43c93a8dd3f228a0d.zh-tw is different with handoff file name: how-to-call-a-procedure-that-returns-a-value.12e2e04aa3bec076b2fd0be43c93a8dd3f228a0d.zh-tw.</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Call a Procedure That Returns a Value (Visual Basic) | Microsoft Docs</source>
          <target state="translated">如何︰ 呼叫傳回的值 (Visual Basic) 的程序 |Microsoft 文件</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Call a Procedure That Returns a Value (Visual Basic)</source>
          <target state="translated">如何：呼叫傳回值的程序 (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Function`</ph> procedure returns a value to the calling code.</source>
          <target state="translated">A<ph id="ph1">`Function`</ph>值傳回給呼叫程式碼。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You call it by including its name and arguments either on the right side of an assignment statement or in an expression.</source>
          <target state="translated">它可以呼叫其名稱和引數包括在指派陳述式或運算式的右側。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>To call a Function procedure within an expression</source>
          <target state="translated">若要呼叫的函式程序，在運算式中</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`Function`</ph> procedure name the same way you would use a variable.</source>
          <target state="translated">使用<ph id="ph1">`Function`</ph>程序的名稱相同的方式，您會使用變數。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You can use a <ph id="ph1">`Function`</ph> procedure call anywhere you can use a variable or constant in an expression.</source>
          <target state="translated">您可以使用<ph id="ph1">`Function`</ph>程序呼叫，您可以在運算式中使用變數或常數的任何地方。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Follow the procedure name with parentheses to enclose the argument list.</source>
          <target state="translated">請依照下列程序名稱以括號括住的引數清單。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If there are no arguments, you can optionally omit the parentheses.</source>
          <target state="translated">如果不有任何引數，您可以省略括號。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>However, using the parentheses makes your code easier to read.</source>
          <target state="translated">不過，使用括號會讓您的程式碼容易閱讀。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Place the arguments in the argument list within the parentheses, separated by commas.</source>
          <target state="translated">將引數放在括號，以逗號分隔的引數清單。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Be sure you supply the arguments in the same order that the <ph id="ph1">`Function`</ph> procedure defines the corresponding parameters.</source>
          <target state="translated">確定您提供的相同順序的引數，<ph id="ph1">`Function`</ph>程序定義對應的參數。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Alternatively, you can pass one or more arguments by name.</source>
          <target state="translated">或者，您可以依名稱傳遞一個或多個引數。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Passing Arguments by Position and by Name<ept id="p1">](./passing-arguments-by-position-and-by-name.md)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>傳遞引數依位置和名稱<ept id="p1">](./passing-arguments-by-position-and-by-name.md)</ept>。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The value returned from the procedure participates in the expression just as the value of a variable or constant would.</source>
          <target state="translated">從程序傳回的值加入運算式中只做為值的變數或常數。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>To call a Function procedure in an assignment statement</source>
          <target state="translated">在指派陳述式中呼叫函式程序</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`Function`</ph> procedure name following the equal (<ph id="ph2">`=`</ph>) sign in the assignment statement.</source>
          <target state="translated">使用<ph id="ph1">`Function`</ph>之後等程序名稱 (<ph id="ph2">`=`</ph>) 登入指派陳述式。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Follow the procedure name with parentheses to enclose the argument list.</source>
          <target state="translated">請依照下列程序名稱以括號括住的引數清單。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If there are no arguments, you can optionally omit the parentheses.</source>
          <target state="translated">如果不有任何引數，您可以省略括號。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>However, using the parentheses makes your code easier to read.</source>
          <target state="translated">不過，使用括號會讓您的程式碼容易閱讀。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Place the arguments in the argument list within the parentheses, separated by commas.</source>
          <target state="translated">將引數放在括號，以逗號分隔的引數清單。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Be sure you supply the arguments in the same order that the <ph id="ph1">`Function`</ph> procedure defines the corresponding parameters, unless you are passing them by name.</source>
          <target state="translated">確定您提供的相同順序的引數，<ph id="ph1">`Function`</ph>程序定義對應的參數，除非您依名稱傳遞它們。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The value returned from the procedure is stored in the variable or property on the left side of the assignment statement.</source>
          <target state="translated">從程序傳回的值儲存在變數或屬性指派陳述式的左邊。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">範例</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The following example calls the <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> &lt;xref:Microsoft.VisualBasic.Interaction.Environ%2A&gt; to retrieve the value of an operating system environment variable.</source>
          <target state="translated">下列範例會呼叫<ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>&lt;xref:Microsoft.VisualBasic.Interaction.Environ%2A&gt;擷取作業系統環境變數的值。&lt;/xref:Microsoft.VisualBasic.Interaction.Environ%2A&gt;</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The first line calls <ph id="ph1">`Environ`</ph> within an expression, and the second line calls it in an assignment statement.</source>
          <target state="translated">第一列呼叫<ph id="ph1">`Environ`</ph>內第二個運算式，列在中呼叫它在指派陳述式。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Environ`</ph> takes the variable name as its sole argument.</source>
          <target state="translated"><ph id="ph1">`Environ`</ph>使用變數名稱做為其唯一引數。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>It returns the variable's value to the calling code.</source>
          <target state="translated">會傳回呼叫程式碼變數的值。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnProcedures#7<ept id="p2">](./codesnippet/VisualBasic/how-to-call-a-procedure-that-returns-a-value_1.vb)</ept><ept id="p1">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnProcedures #&amp;7;<ept id="p2">](./codesnippet/VisualBasic/how-to-call-a-procedure-that-returns-a-value_1.vb)</ept><ept id="p1">]</ept></target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">另請參閱</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Function Procedures<ept id="p1">](./function-procedures.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Function 程序<ept id="p1">](./function-procedures.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Procedure Parameters and Arguments<ept id="p1">](./procedure-parameters-and-arguments.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>程序參數和引數<ept id="p1">](./procedure-parameters-and-arguments.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Function Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/function-statement.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>Function 陳述式<ept id="p1">](../../../../visual-basic/language-reference/statements/function-statement.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Create a Procedure that Returns a Value<ept id="p1">](./how-to-create-a-procedure-that-returns-a-value.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>如何︰ 建立程序傳回值<ept id="p1">](./how-to-create-a-procedure-that-returns-a-value.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Return a Value from a Procedure<ept id="p1">](./how-to-return-a-value-from-a-procedure.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>如何︰ 從程序傳回值<ept id="p1">](./how-to-return-a-value-from-a-procedure.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Call a Procedure that Does Not Return a Value<ept id="p1">](./how-to-call-a-procedure-that-does-not-return-a-value.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>如何：呼叫不傳回值的程序<ept id="p1">](./how-to-call-a-procedure-that-does-not-return-a-value.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>