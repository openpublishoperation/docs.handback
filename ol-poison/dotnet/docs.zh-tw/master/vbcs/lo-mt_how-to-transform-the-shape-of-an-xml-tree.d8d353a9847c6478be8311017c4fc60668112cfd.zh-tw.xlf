<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9c71f4af829a395204bc17161547aa5fdd06cbb1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\linq\how-to-transform-the-shape-of-an-xml-tree.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">569c563ee021fb8b1d96a6d6f7a2aa8fc2aaa636</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e03f224523a143bdb27e30a642f38b9cb494fbf6</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Handback file name: lo-mt_how-to-transform-the-shape-of-an-xml-tree.d8d353a9847c6478be8311017c4fc60668112cfd.zh-tw is different with handoff file name: how-to-transform-the-shape-of-an-xml-tree.d8d353a9847c6478be8311017c4fc60668112cfd.zh-tw.</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Transform the Shape of an XML Tree (Visual Basic) | Microsoft Docs</source>
          <target state="translated">如何︰ 轉換 XML 樹狀結構 (Visual Basic) 的圖形 |Microsoft 文件</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Transform the Shape of an XML Tree (Visual Basic)</source>
          <target state="translated">如何︰ 轉換 XML 樹狀結構 (Visual Basic) 的圖形</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>shape<ept id="p1">*</ept> of an XML document refers to its element names, attribute names, and the characteristics of its hierarchy.</source>
          <target state="translated"><bpt id="p1">*</bpt>圖形<ept id="p1">*</ept>的 XML 文件參考其項目名稱、 屬性名稱，及其階層的特性。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Sometimes you will have to change the shape of an XML document.</source>
          <target state="translated">有時候您必須變更 XML 文件的組織結構。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For example, you might have to send an existing XML document to another system that requires different element and attribute names.</source>
          <target state="translated">例如，您可能想要將現有的 XML 文件傳送到需要不同項目和屬性名稱的其他系統。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You could go through the document, deleting and renaming elements as required, but using functional construction results in more readable and maintainable code.</source>
          <target state="translated">您可以瀏覽文件，在必要時刪除並重新命名項目，但使用功能結構會使程式碼更容易讀取與維護。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For more information about functional construction, see <bpt id="p1">[</bpt>Functional Construction (LINQ to XML) (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/functional-construction-linq-to-xml.md)</ept>.</source>
          <target state="translated">如需有關功能結構的詳細資訊，請參閱<bpt id="p1">[</bpt>功能建構 (LINQ to XML) (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/functional-construction-linq-to-xml.md)</ept>。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The first example changes the organization of the XML document.</source>
          <target state="translated">第一個範例會變更 XML 文件的組織。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>It moves complex elements from one location in the tree to another.</source>
          <target state="translated">此範例會在樹狀結構中，將複雜的項目從一個位置移到另一個位置。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The second example in this topic creates an XML document with a different shape than the source document.</source>
          <target state="translated">本主題中的第二個範例會使用不同於來源文件的組織結構，建立 XML 文件。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>It changes the casing of the element names, renames some elements, and leaves some elements from the source tree out of the transformed tree.</source>
          <target state="translated">此範例會變更項目名稱的大小寫、重新命名某些項目，並將某些項目從來源樹狀排除在轉換的樹狀之外。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">範例</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The following code changes the shape of an XML file using embedded query expressions.</source>
          <target state="translated">下列程式碼會使用內嵌的查詢運算式變更 XML 檔案的組織結構。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The source XML document in this example contains a <ph id="ph1">`Customers`</ph> element under the <ph id="ph2">`Root`</ph> element that contains all customers.</source>
          <target state="translated">此範例中的 XML 來源文件包含的 <ph id="ph1">`Customers`</ph> 項目在包含所有客戶的 <ph id="ph2">`Root`</ph> 項目之下。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>It also contains an <ph id="ph1">`Orders`</ph> element under the <ph id="ph2">`Root`</ph> element that contains all orders.</source>
          <target state="translated">同時，它所包含的 <ph id="ph1">`Orders`</ph> 項目在包含所有訂單的 <ph id="ph2">`Root`</ph> 項目之下。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This example creates a new XML tree in which the orders for each customer are contained in an <ph id="ph1">`Orders`</ph> element within the <ph id="ph2">`Customer`</ph> element.</source>
          <target state="translated">此範例會建立新的 XML 樹狀結構，其中每個客戶的訂單會包含在 <ph id="ph1">`Orders`</ph> 項目的 <ph id="ph2">`Customer`</ph> 項目中。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The original document also contains a <ph id="ph1">`CustomerID`</ph> element in the <ph id="ph2">`Order`</ph> element; this element will be removed from the re-shaped document.</source>
          <target state="translated">原始文件在 <ph id="ph1">`CustomerID`</ph> 項目中也包含 <ph id="ph2">`Order`</ph> 項目；這個項目將會從改變組織結構的文件中移除。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This example uses the following XML document: <bpt id="p1">[</bpt>Sample XML File: Customers and Orders (LINQ to XML)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-customers-and-orders-linq-to-xml.md)</ept>.</source>
          <target state="translated">這個範例會使用下列 XML 文件︰<bpt id="p1">[</bpt>範例 XML 檔︰ 客戶和訂單 (LINQ to XML)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-customers-and-orders-linq-to-xml.md)</ept>。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This code produces the following output:</source>
          <target state="translated">此程式碼會產生下列輸出：</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">範例</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This example renames some elements and converts some attributes to elements.</source>
          <target state="translated">此範例會重新命名某些項目，並將某些屬性轉換為項目。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The code calls <ph id="ph1">`ConvertAddress`</ph>, which returns a list of &lt;xref:System.Xml.Linq.XElement&gt; objects.</source>
          <target state="translated">程式碼會呼叫<ph id="ph1">`ConvertAddress`</ph>，它會傳回一份&lt;xref:System.Xml.Linq.XElement&gt;物件。&lt;/xref:System.Xml.Linq.XElement&gt;</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The argument to the method is a query that determines the <ph id="ph1">`Address`</ph> complex element where the <ph id="ph2">`Type`</ph> attribute has a value of <ph id="ph3">`"Shipping"`</ph>.</source>
          <target state="translated">此方法的引數是一個查詢，可判斷 <ph id="ph1">`Address`</ph> 屬性值為 <ph id="ph2">`Type`</ph> 的 <ph id="ph3">`"Shipping"`</ph> 複雜項目。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This example uses the following XML document: <bpt id="p1">[</bpt>Sample XML File: Typical Purchase Order (LINQ to XML)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-typical-purchase-order-linq-to-xml.md)</ept>.</source>
          <target state="translated">這個範例會使用下列 XML 文件︰<bpt id="p1">[</bpt>範例 XML 檔︰ 典型採購訂單 (LINQ to XML)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-typical-purchase-order-linq-to-xml.md)</ept>。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This code produces the following output:</source>
          <target state="translated">此程式碼會產生下列輸出：</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">另請參閱</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Projections and Transformations (LINQ to XML) (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/projections-and-transformations-linq-to-xml.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>投影和轉換 (LINQ to XML) (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/projections-and-transformations-linq-to-xml.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>