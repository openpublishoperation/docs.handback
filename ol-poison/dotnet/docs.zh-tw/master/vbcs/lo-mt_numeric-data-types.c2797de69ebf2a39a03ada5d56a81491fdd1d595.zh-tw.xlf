<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3c3098370b8d9dcb6aafcb06dcfb8f4e144b899a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\data-types\numeric-data-types.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7b31fff9a24e058c965d5c2b4b5da6c01a3fdb29</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4cfbc6d8f2f539294898699654794635577a26c8</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Handback file name: lo-mt_numeric-data-types.c2797de69ebf2a39a03ada5d56a81491fdd1d595.zh-tw is different with handoff file name: numeric-data-types.c2797de69ebf2a39a03ada5d56a81491fdd1d595.zh-tw.</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Numeric Data Types (Visual Basic) | Microsoft Docs</source>
          <target state="translated">數值資料類型 (Visual Basic) |Microsoft 文件</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Numeric Data Types (Visual Basic)</source>
          <target state="translated">數字資料類型 (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> supplies several <bpt id="p1">*</bpt>numeric data types<ept id="p1">*</ept> for handling numbers in various representations.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>提供數個<bpt id="p1">*</bpt>數值資料型別<ept id="p1">*</ept>來處理各種表示相互轉換的數字。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Integral<ept id="p1">*</ept> types represent only whole numbers (positive, negative, and zero), and <bpt id="p2">*</bpt>nonintegral<ept id="p2">*</ept> types represent numbers with both integer and fractional parts.</source>
          <target state="translated"><bpt id="p1">*</bpt>整數類資料<ept id="p1">*</ept>類型表示只有整數 （正數、 負數和零），和<bpt id="p2">*</bpt>整數<ept id="p2">*</ept>類型表示的數字的整數和分數部分。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For a table showing a side-by-side comparison of the <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> data types, see <bpt id="p1">[</bpt>Data Types<ept id="p1">](../../../../visual-basic/language-reference/data-types/data-type-summary.md)</ept>.</source>
          <target state="translated">顯示由並排比較資料表<ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>資料類型，請參閱<bpt id="p1">[</bpt>資料型別<ept id="p1">](../../../../visual-basic/language-reference/data-types/data-type-summary.md)</ept>。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Integral Numeric Types</source>
          <target state="translated">整數數字類型</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Integral data types<ept id="p1">*</ept> are those that represent only numbers without fractional parts.</source>
          <target state="translated"><bpt id="p1">*</bpt>整數類資料類型<ept id="p1">*</ept>」 用來表示沒有小數部分的唯一數字。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>signed<ept id="p1">*</ept> integral data types are <bpt id="p2">[</bpt>SByte Data Type<ept id="p2">](../../../../visual-basic/language-reference/data-types/sbyte-data-type.md)</ept> (8-bit), <bpt id="p3">[</bpt>Short Data Type<ept id="p3">](../../../../visual-basic/language-reference/data-types/short-data-type.md)</ept> (16-bit), <bpt id="p4">[</bpt>Integer Data Type<ept id="p4">](../../../../visual-basic/language-reference/data-types/integer-data-type.md)</ept> (32-bit), and <bpt id="p5">[</bpt>Long Data Type<ept id="p5">](../../../../visual-basic/language-reference/data-types/long-data-type.md)</ept> (64-bit).</source>
          <target state="translated"><bpt id="p1">*</bpt>簽署<ept id="p1">*</ept>整數類資料類型是<bpt id="p2">[</bpt>SByte 資料類型<ept id="p2">](../../../../visual-basic/language-reference/data-types/sbyte-data-type.md)</ept>（8 位元）、<bpt id="p3">[</bpt>簡短的資料型別<ept id="p3">](../../../../visual-basic/language-reference/data-types/short-data-type.md)</ept>（16 位元）、<bpt id="p4">[</bpt>整數資料類型<ept id="p4">](../../../../visual-basic/language-reference/data-types/integer-data-type.md)</ept>（32 位元） 和<bpt id="p5">[</bpt>Long 資料型別<ept id="p5">](../../../../visual-basic/language-reference/data-types/long-data-type.md)</ept>（64 位元）。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If a variable always stores integers rather than fractional numbers, declare it as one of these types.</source>
          <target state="translated">如果變數一律是儲存整數，而不是小數的數字，將它宣告為其中一種類型。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>unsigned<ept id="p1">*</ept> integral types are <bpt id="p2">[</bpt>Byte Data Type<ept id="p2">](../../../../visual-basic/language-reference/data-types/byte-data-type.md)</ept> (8-bit), <bpt id="p3">[</bpt>UShort Data Type<ept id="p3">](../../../../visual-basic/language-reference/data-types/ushort-data-type.md)</ept> (16-bit), <bpt id="p4">[</bpt>UInteger Data Type<ept id="p4">](../../../../visual-basic/language-reference/data-types/uinteger-data-type.md)</ept> (32-bit), and <bpt id="p5">[</bpt>ULong Data Type<ept id="p5">](../../../../visual-basic/language-reference/data-types/ulong-data-type.md)</ept> (64-bit).</source>
          <target state="translated"><bpt id="p1">*</bpt>不帶正負號<ept id="p1">*</ept>整數類資料類型<bpt id="p2">[</bpt>Byte 資料類型<ept id="p2">](../../../../visual-basic/language-reference/data-types/byte-data-type.md)</ept>（8 位元）、 <bpt id="p3">[</bpt>UShort 資料類型<ept id="p3">](../../../../visual-basic/language-reference/data-types/ushort-data-type.md)</ept>（16 位元）、 <bpt id="p4">[</bpt>UInteger 資料類型<ept id="p4">](../../../../visual-basic/language-reference/data-types/uinteger-data-type.md)</ept>（32 位元） 和<bpt id="p5">[</bpt>ULong 資料類型<ept id="p5">](../../../../visual-basic/language-reference/data-types/ulong-data-type.md)</ept>（64 位元）。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If a variable contains binary data, or data of unknown nature, declare it as one of these types.</source>
          <target state="translated">如果變數包含二進位資料或未知的性質的資料，將它宣告為其中一種類型。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Performance</source>
          <target state="translated">效能</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Arithmetic operations are faster with integral types than with other data types.</source>
          <target state="translated">算術運算是整數類資料類型與其他資料型別的更快。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>They are fastest with the <ph id="ph1">`Integer`</ph> and <ph id="ph2">`UInteger`</ph> types in <ph id="ph3">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>.</source>
          <target state="translated">它們是以最快<ph id="ph1">`Integer`</ph>和<ph id="ph2">`UInteger`</ph>中的型別<ph id="ph3">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Large Integers</source>
          <target state="translated">大整數</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If you need to hold an integer larger than the <ph id="ph1">`Integer`</ph> data type can hold, you can use the <ph id="ph2">`Long`</ph> data type instead.</source>
          <target state="translated">如果您需要保存整數大於<ph id="ph1">`Integer`</ph>可以保存的資料類型，您可以使用<ph id="ph2">`Long`</ph>請改為輸入資料。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Long`</ph> variables can hold numbers from -9,223,372,036,854,775,808 through 9,223,372,036,854,775,807.</source>
          <target state="translated"><ph id="ph1">`Long`</ph>變數可以保留從-9223372036854775808 到 9223372036854775807 的數字。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Operations with <ph id="ph1">`Long`</ph> are slightly slower than with <ph id="ph2">`Integer`</ph>.</source>
          <target state="translated">作業<ph id="ph1">`Long`</ph>稍微低於與<ph id="ph2">`Integer`</ph>。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If you need even larger values, you can use the <bpt id="p1">[</bpt>Decimal Data Type<ept id="p1">](../../../../visual-basic/language-reference/data-types/decimal-data-type.md)</ept>.</source>
          <target state="translated">如果您需要更大的值，您可以使用<bpt id="p1">[</bpt>Decimal 資料型別<ept id="p1">](../../../../visual-basic/language-reference/data-types/decimal-data-type.md)</ept>。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You can hold numbers from -79,228,162,514,264,337,593,543,950,335 through 79,228,162,514,264,337,593,543,950,335 in a <ph id="ph1">`Decimal`</ph> variable if you do not use any decimal places.</source>
          <target state="translated">您可以保有數字-79228162514264337593543950335 到 79228162514264337593543950335 中從<ph id="ph1">`Decimal`</ph>變數，如果您不使用任何小數位數。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>However, operations with <ph id="ph1">`Decimal`</ph> numbers are considerably slower than with any other numeric data type.</source>
          <target state="translated">不過，作業<ph id="ph1">`Decimal`</ph>數字會慢很多比其他任何數值資料型別。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Small Integers</source>
          <target state="translated">小整數</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If you do not need the full range of the <ph id="ph1">`Integer`</ph> data type, you can use the <ph id="ph2">`Short`</ph> data type, which can hold integers from -32,768 through 32,767.</source>
          <target state="translated">如果您不需要完整的<ph id="ph1">`Integer`</ph>資料型別，您可以使用<ph id="ph2">`Short`</ph>資料型別，可以用來保留從-32768 到 32767 的整數。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For the smallest integer range, the <ph id="ph1">`SByte`</ph> data type holds integers from -128 through 127.</source>
          <target state="translated">最小的整數範圍內，<ph id="ph1">`SByte`</ph>資料型別可保留從-128 到 127 的整數。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If you have a very large number of variables that hold small integers, the common language runtime can sometimes store your <ph id="ph1">`Short`</ph> and <ph id="ph2">`SByte`</ph> variables more efficiently and save memory consumption.</source>
          <target state="translated">如果您有非常大量的保存小整數變數，有時可以儲存 common language runtime 程式<ph id="ph1">`Short`</ph>和<ph id="ph2">`SByte`</ph>變數更有效率且節省記憶體耗用量。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>However, operations with <ph id="ph1">`Short`</ph> and <ph id="ph2">`SByte`</ph> are somewhat slower than with <ph id="ph3">`Integer`</ph>.</source>
          <target state="translated">不過，作業<ph id="ph1">`Short`</ph>和<ph id="ph2">`SByte`</ph>慢比使用<ph id="ph3">`Integer`</ph>。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Unsigned Integers</source>
          <target state="translated">不帶正負號的整數</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>If you know that your variable never needs to hold a negative number, you can use the <bpt id="p1">*</bpt>unsigned types<ept id="p1">*</ept><ph id="ph1">`Byte`</ph>, <ph id="ph2">`UShort`</ph>, <ph id="ph3">`UInteger`</ph>, and <ph id="ph4">`ULong`</ph>.</source>
          <target state="translated">如果您知道，變數就永遠不需要保存負的數字，您可以使用<bpt id="p1">*</bpt>不帶正負號型別<ept id="p1">*</ept><ph id="ph1">`Byte`</ph>， <ph id="ph2">`UShort`</ph>， <ph id="ph3">`UInteger`</ph>，和<ph id="ph4">`ULong`</ph>。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Each of these data types can hold a positive integer twice as large as its corresponding signed type (<ph id="ph1">`SByte`</ph>, <ph id="ph2">`Short`</ph>, <ph id="ph3">`Integer`</ph>, and <ph id="ph4">`Long`</ph>).</source>
          <target state="translated">每一種資料類型可以保留正整數兩次大小，其對應的帶正負號的類型 (<ph id="ph1">`SByte`</ph>， <ph id="ph2">`Short`</ph>， <ph id="ph3">`Integer`</ph>，和<ph id="ph4">`Long`</ph>)。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In terms of performance, each unsigned type is exactly as efficient as its corresponding signed type.</source>
          <target state="translated">在效能方面，每個不帶正負號的類型的處理效率都與其對應的帶正負號型別。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In particular, <ph id="ph1">`UInteger`</ph> shares with <ph id="ph2">`Integer`</ph> the distinction of being the most efficient of all the elementary numeric data types.</source>
          <target state="translated">特別是，<ph id="ph1">`UInteger`</ph>與共用<ph id="ph2">`Integer`</ph>的差別是最有效率的所有基本的數值資料類型。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Nonintegral Numeric Types</source>
          <target state="translated">非整數的數字類型</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Nonintegral data types<ept id="p1">*</ept> are those that represent numbers with both integer and fractional parts.</source>
          <target state="translated"><bpt id="p1">*</bpt>非整數類資料型別<ept id="p1">*</ept>是指代表具有整數和分數部分的數字。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The nonintegral numeric data types are <ph id="ph1">`Decimal`</ph> (128-bit fixed point), <bpt id="p1">[</bpt>Single Data Type<ept id="p1">](../../../../visual-basic/language-reference/data-types/single-data-type.md)</ept> (32-bit floating point), and <bpt id="p2">[</bpt>Double Data Type<ept id="p2">](../../../../visual-basic/language-reference/data-types/double-data-type.md)</ept> (64-bit floating point).</source>
          <target state="translated">非整數數值資料型別<ph id="ph1">`Decimal`</ph>（128 位元固定的點），<bpt id="p1">[</bpt>單一資料型別<ept id="p1">](../../../../visual-basic/language-reference/data-types/single-data-type.md)</ept>（32 位元浮點數），和<bpt id="p2">[</bpt>Double 資料型別<ept id="p2">](../../../../visual-basic/language-reference/data-types/double-data-type.md)</ept>（64 位元浮點數）。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>They are all signed types.</source>
          <target state="translated">是帶正負號的型別。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If a variable can contain a fraction, declare it as one of these types.</source>
          <target state="translated">如果變數可以包含一小部分，將它宣告為其中一種類型。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Decimal`</ph> is not a floating-point data type.</source>
          <target state="translated"><ph id="ph1">`Decimal`</ph>不是浮點數資料類型。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Decimal`</ph> numbers have a binary integer value and an integer scaling factor that specifies what portion of the value is a decimal fraction.</source>
          <target state="translated"><ph id="ph1">`Decimal`</ph>數字有二進位整數值，並指定值的部分是十進位小數的整數縮放比例。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>You can use <ph id="ph1">`Decimal`</ph> variables for money values.</source>
          <target state="translated">您可以使用<ph id="ph1">`Decimal`</ph>貨幣值的變數。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The advantage is the precision of the values.</source>
          <target state="translated">優點是值的精確度。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Double`</ph> data type is faster and requires less memory, but it is subject to rounding errors.</source>
          <target state="translated"><ph id="ph1">`Double`</ph>資料型別比較快，而且需要較少的記憶體，但是它會受制於捨入錯誤。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Decimal`</ph> data type retains complete accuracy to 28 decimal places.</source>
          <target state="translated"><ph id="ph1">`Decimal`</ph>資料類型會保留至 28 位小數的正確性。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Floating-point (<ph id="ph1">`Single`</ph> and <ph id="ph2">`Double`</ph>) numbers have larger ranges than <ph id="ph3">`Decimal`</ph> numbers but can be subject to rounding errors.</source>
          <target state="translated">浮點數 (<ph id="ph1">`Single`</ph>和<ph id="ph2">`Double`</ph>) 數字有更大範圍比<ph id="ph3">`Decimal`</ph>數字，但可能會受限於捨入錯誤。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Floating-point types support fewer significant digits than <ph id="ph1">`Decimal`</ph> but can represent values of greater magnitude.</source>
          <target state="translated">浮點類型支援較少的有效位數比<ph id="ph1">`Decimal`</ph>但可以代表更大範圍的值。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Nonintegral number values can be expressed as mmmEeee, in which mmm is the <bpt id="p1">*</bpt>mantissa<ept id="p1">*</ept> (the significant digits) and eee is the <bpt id="p2">*</bpt>exponent<ept id="p2">*</ept> (a power of 10).</source>
          <target state="translated">非整數的數字值中能表示為 mmmEeee，即 mmm<bpt id="p1">*</bpt>尾數<ept id="p1">*</ept>（有效位數） 和 eee 是<bpt id="p2">*</bpt>指數<ept id="p2">*</ept>（10 的次方）。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The highest positive values of the nonintegral types are 7.9228162514264337593543950335E+28 for <ph id="ph1">`Decimal`</ph>, 3.4028235E+38 for <ph id="ph2">`Single`</ph>, and 1.79769313486231570E+308 for <ph id="ph3">`Double`</ph>.</source>
          <target state="translated">非整數類型的最高的正值是 7.9228162514264337593543950335 e + 28 <ph id="ph1">`Decimal`</ph>，3.4028235 e + 38 <ph id="ph2">`Single`</ph>，和 1.79769313486231570 e + 308 <ph id="ph3">`Double`</ph>。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Performance</source>
          <target state="translated">效能</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Double`</ph> is the most efficient of the fractional data types, because the processors on current platforms perform floating-point operations in double precision.</source>
          <target state="translated"><ph id="ph1">`Double`</ph>是最有效率的小數點後的資料型別，因為目前的平台上的處理器執行雙精度浮點數運算。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>However, operations with <ph id="ph1">`Double`</ph> are not as fast as with the integral types such as <ph id="ph2">`Integer`</ph>.</source>
          <target state="translated">不過，作業<ph id="ph1">`Double`</ph>速度與整數類資料型別，例如<ph id="ph2">`Integer`</ph>。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Small Magnitudes</source>
          <target state="translated">最小範圍</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For numbers with the smallest possible magnitude (closest to 0), <ph id="ph1">`Double`</ph> variables can hold numbers as small as -4.94065645841246544E-324 for negative values and 4.94065645841246544E-324 for positive values.</source>
          <target state="translated">數字的最小的可能範圍 （最接近 0），<ph id="ph1">`Double`</ph>變數可以保有數字越小越-4.94065645841246544 e-324 的負數值和 4.94065645841246544-324 的正數值。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Small Fractional Numbers</source>
          <target state="translated">最小分數</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>If you do not need the full range of the <ph id="ph1">`Double`</ph> data type, you can use the <ph id="ph2">`Single`</ph> data type, which can hold floating-point numbers from -3.4028235E+38 through 3.4028235E+38.</source>
          <target state="translated">如果您不需要完整的<ph id="ph1">`Double`</ph>資料型別，您可以使用<ph id="ph2">`Single`</ph>資料型別，可以用來保留從-3.4028235 e + 38 到 3.4028235 e + 38 的浮點數。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The smallest magnitudes for <ph id="ph1">`Single`</ph> variables are -1.401298E-45 for negative values and 1.401298E-45 for positive values.</source>
          <target state="translated">最小的範圍為<ph id="ph1">`Single`</ph>變數是-1.401298 e-45 的負數值，以及從 1.401298 e-45 的正數值。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>If you have a very large number of variables that hold small floating-point numbers, the common language runtime can sometimes store your <ph id="ph1">`Single`</ph> variables more efficiently and save memory consumption.</source>
          <target state="translated">如果您有非常大量的保留小的浮點數的變數，有時可以儲存 common language runtime 程式<ph id="ph1">`Single`</ph>變數更有效率且節省記憶體耗用量。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">另請參閱</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Elementary Data Types<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/elementary-data-types.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>基本資料型別<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/elementary-data-types.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Character Data Types<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/character-data-types.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>字元資料類型<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/character-data-types.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Miscellaneous Data Types<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/miscellaneous-data-types.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>其他資料類型<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/miscellaneous-data-types.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Troubleshooting Data Types<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/troubleshooting-data-types.md)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1"> [</bpt>資料類型疑難排解<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/troubleshooting-data-types.md)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Call a Windows Function that Takes Unsigned Types<ept id="p1">](../../../../visual-basic/programming-guide/com-interop/how-to-call-a-windows-function-that-takes-unsigned-types.md)</ept></source>
          <target state="translated"><bpt id="p1"> [</bpt>如何：呼叫使用不帶正負號類型的 Windows 函式<ept id="p1">](../../../../visual-basic/programming-guide/com-interop/how-to-call-a-windows-function-that-takes-unsigned-types.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>