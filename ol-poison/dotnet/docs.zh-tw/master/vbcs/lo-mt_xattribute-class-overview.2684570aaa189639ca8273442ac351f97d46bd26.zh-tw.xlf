<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-317e149" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1ce5f4be6006908b35057854f89432471fd9f06b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\linq\xattribute-class-overview.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3cf7e00e426f14e3f1da45d8820bb9fa1990ec3a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3ac0884e13f4db1cca4918d95179eca1ae6dfb3d</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Handback file name: lo-mt_xattribute-class-overview.2684570aaa189639ca8273442ac351f97d46bd26.zh-tw is different with handoff file name: xattribute-class-overview.2684570aaa189639ca8273442ac351f97d46bd26.zh-tw.</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>XAttribute Class Overview (Visual Basic) | Microsoft Docs</source>
          <target state="translated">XAttribute 類別概觀 (Visual Basic) |Microsoft 文件</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>XAttribute Class Overview (Visual Basic)</source>
          <target state="translated">XAttribute 類別概觀 (Visual Basic)</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Attributes are name/value pairs that are associated with an element.</source>
          <target state="translated">屬性是與項目相關聯的成對名稱/值。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Xml.Linq.XAttribute&gt; class represents XML attributes.</source>
          <target state="translated">&lt;xref:System.Xml.Linq.XAttribute&gt;類別代表 XML 屬性。&lt;/xref:System.Xml.Linq.XAttribute&gt;</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="translated">概觀</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Working with attributes in <ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> is similar to working with elements.</source>
          <target state="translated">在 <ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> 中使用屬性的方式類似於使用項目。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Their constructors are similar.</source>
          <target state="translated">其建構函式類似。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The methods that you use to retrieve collections of them are similar.</source>
          <target state="translated">您用來擷取其集合的方法也類似。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> query expression for a collection of attributes looks very similar to a <ph id="ph2">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> query expression for a collection of elements.</source>
          <target state="translated">A<ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph>屬性集合的查詢運算式看起來非常類似於<ph id="ph2">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph>查詢運算式的項目集合。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The order in which attributes were added to an element is preserved.</source>
          <target state="translated">系統會保留將屬性加入到項目的順序。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>That is, when you iterate through the attributes, you see them in the same order that they were added.</source>
          <target state="translated">也就是說，當您逐一查看屬性時，您會看到加入這些屬性的相同順序。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The XAttribute Constructor</source>
          <target state="translated">XAttribute 建構函式</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The following constructor of the &lt;xref:System.Xml.Linq.XAttribute&gt; class is the one that you will most commonly use:</source>
          <target state="translated">下列建構函式的&lt;xref:System.Xml.Linq.XAttribute&gt;類別是您最常使用的那個︰&lt;/xref:System.Xml.Linq.XAttribute&gt;</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Constructor</source>
          <target state="translated">建構函式</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">描述</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Creates an &lt;xref:System.Xml.Linq.XAttribute&gt; object.</source>
          <target state="translated">建立&lt;xref:System.Xml.Linq.XAttribute&gt;物件。&lt;/xref:System.Xml.Linq.XAttribute&gt;</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`name`</ph> argument specifies the name of the attribute; <ph id="ph2">`content`</ph> specifies the content of the attribute.</source>
          <target state="translated"><ph id="ph1">`name`</ph> 引數會指定屬性的名稱；<ph id="ph2">`content`</ph> 會指定屬性的內容。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Creating an Element with an Attribute</source>
          <target state="translated">建立具有屬性的項目</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The following code shows an element that contains an attribute using XML literals in Visual Basic:</source>
          <target state="translated">下列程式碼會顯示包含在 Visual Basic 中使用 XML 常值的屬性的項目︰</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This example produces the following output:</source>
          <target state="translated">這個範例會產生下列輸出：</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Functional Construction of Attributes</source>
          <target state="translated">屬性的功能結構</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>You can construct &lt;xref:System.Xml.Linq.XAttribute&gt; objects in-line with the construction of &lt;xref:System.Xml.Linq.XElement&gt; objects, as follows:</source>
          <target state="translated">您可以建構&lt;xref:System.Xml.Linq.XAttribute&gt;物件內嵌結構的&lt;xref:System.Xml.Linq.XElement&gt;物件，如下所示︰&lt;/xref:System.Xml.Linq.XElement&gt; &lt;/xref:System.Xml.Linq.XAttribute&gt;</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This example produces the following output:</source>
          <target state="translated">這個範例會產生下列輸出：</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Attributes Are Not Nodes</source>
          <target state="translated">屬性不是節點</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>There are some differences between attributes and elements.</source>
          <target state="translated">屬性和項目有一些差異。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Xml.Linq.XAttribute&gt; objects are not nodes in the XML tree.</source>
          <target state="translated">&lt;xref:System.Xml.Linq.XAttribute&gt;物件不是 XML 樹狀結構中的節點。&lt;/xref:System.Xml.Linq.XAttribute&gt;</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>They are name/value pairs associated with an XML element.</source>
          <target state="translated">它們是與 XML 項目相關聯的成對名稱/值。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In contrast to the Document Object Model (DOM), this more closely reflects the structure of XML.</source>
          <target state="translated">相較於文件物件模型 (DOM)，這在反映 XML 的結構時，更為接近。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Although &lt;xref:System.Xml.Linq.XAttribute&gt; objects are not actually nodes in the XML tree, working with &lt;xref:System.Xml.Linq.XAttribute&gt; objects is very similar to working with &lt;xref:System.Xml.Linq.XElement&gt; objects.</source>
          <target state="translated">雖然&lt;xref:System.Xml.Linq.XAttribute&gt;物件不是實際使用的 XML 樹狀目錄中的節點&lt;xref:System.Xml.Linq.XAttribute&gt;物件的方式非常類似於使用&lt;xref:System.Xml.Linq.XElement&gt;物件。&lt;/xref:System.Xml.Linq.XElement&gt; &lt;/xref:System.Xml.Linq.XAttribute&gt; &lt;/xref:System.Xml.Linq.XAttribute&gt;</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This distinction is primarily important only to developers who are writing code that works with XML trees at the node level.</source>
          <target state="translated">這個區別只有對於撰寫可在節點層級使用 XML 樹狀結構之程式碼的開發人員特別重要。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Many developers will not be concerned with this distinction.</source>
          <target state="translated">這個區別與許多開發人員都無關。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">另請參閱</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>LINQ to XML Programming Overview (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/linq-to-xml-programming-overview.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>LINQ to XML 程式設計概觀 (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/linq-to-xml-programming-overview.md)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>